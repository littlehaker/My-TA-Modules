create_mailer_file Rails::Generators::MailerGenerator.create_mailer_file()\n\n
deliver ActionMailer::LogSubscriber.deliver(event)\n\n
logger ActionMailer::LogSubscriber.logger()\n\n
receive ActionMailer::LogSubscriber.receive(event)\n\n
old_transfer_encoding Mail::Message.old_transfer_encoding(value = nil)\n\n
original_filename Mail::Message.original_filename()\n\n
set_content_type Mail::Message.set_content_type(*args)\n\n
transfer_encoding Mail::Message.transfer_encoding(value = nil)\n\n
transfer_encoding= Mail::Message.transfer_encoding=(value)\n\n
new ActionMailer::Collector.new(context, &block)\n\n
all ActionMailer::Collector.all(*args, &block)\n\n
any ActionMailer::Collector.any(*args, &block)\n\n
custom ActionMailer::Collector.custom(mime, options={})\n\n
default ActionMailer::Base.default(value = nil)\n\n
mailer_name ActionMailer::Base.mailer_name()\n\n
new ActionMailer::Base.new(method_name=nil, *args)\nInstantiate a new mailer object. If +method_name+ is not +nil+, the mailer\nwill be initialized according to the named method. If not, the mailer will\nremain uninitialized (useful when you only need to invoke the "receive"\nmethod, for instance).\n
receive ActionMailer::Base.receive(raw_mail)\nReceives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes the email object to the mailer\nobject's +receive+ method. If you want your mailer to be able to\nprocess incoming messages, you'll need to implement a +receive+\nmethod that accepts the raw email string as a parameter:\n\n  class MyMailer < ActionMailer::Base\n    def receive(mail)\n      ...\n    end\n  end\n
attachments ActionMailer::Base.attachments()\nAllows you to add attachments to an email, like so:\n\n mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')\n\nIf you do this, then Mail will take the file name and work out the mime type\nset the Content-Type, Content-Disposition, Content-Transfer-Encoding and\nbase64 encode the contents of the attachment all for you.\n\nYou can also specify overrides if you want by passing a hash instead of\na string:\n\n mail.attachments['filename.jpg'] = {:mime_type => 'application/x-gzip',\n                                     :content =>\n                                     File.read('/path/to/filename.jpg')}\n\nIf you want to use a different encoding than Base64, you can pass an\nencoding in,\nbut then it is up to you to pass in the content pre-encoded, and don't expect\nMail to know how to decode this data:\n\n file_content = SpecialEncode(File.read('/path/to/filename.jpg'))\n mail.attachments['filename.jpg'] = {:mime_type => 'application/x-gzip',\n                                     :encoding => 'SpecialEncoding',\n                                     :content => file_content }\n\nYou can also search for specific attachments:\n By Filename\n mail.attachments['filename.jpg']   # => Mail::Part object or nil\n or by index\n mail.attachments[0]                # => Mail::Part (first attachment)\n
headers ActionMailer::Base.headers(args=nil)\nAllows you to pass random and unusual headers to the new +Mail::Message+ object\nwhich will add them to itself.\n\n  headers['X-Special-Domain-Specific-Header'] = "SecretValue"\n\nYou can also pass a hash into headers of header field names and values, which\nwill then be set on the Mail::Message object:\n\n  headers 'X-Special-Domain-Specific-Header' => "SecretValue",\n          'In-Reply-To' => incoming.message_id\n\nThe resulting Mail::Message will have the following in it's header:\n\n  X-Special-Domain-Specific-Header: SecretValue\n
mail ActionMailer::Base.mail(headers={}, &block)\nThe main method that creates the message and renders the email templates. There\nare\ntwo ways to call this method, with a block, or without a block.\n\nBoth methods accept a headers hash. This hash allows you to specify the most\nused headers\nin an email message, these are:\n\n* <tt>:subject</tt> - The subject of the message, if this is omitted, Action\nMailer will\n  ask the Rails I18n class for a translated <tt>:subject</tt> in the scope of\n  <tt>[:actionmailer, mailer_scope, action_name]</tt> or if this is missing,\n  will translate the\n  humanized version of the <tt>action_name</tt>\n* <tt>:to</tt> - Who the message is destined for, can be a string of addresses,\nor an array\n  of addresses.\n* <tt>:from</tt> - Who the message is from\n* <tt>:cc</tt> - Who you would like to Carbon-Copy on this email, can be a\nstring of addresses,\n  or an array of addresses.\n* <tt>:bcc</tt> - Who you would like to Blind-Carbon-Copy on this email,\ncan be a string of\n  addresses, or an array of addresses.\n* <tt>:reply_to</tt> - Who to set the Reply-To header of the email to.\n* <tt>:date</tt> - The date to say the email was sent on.\n\nYou can set default values for any of the above headers (except :date)\nby using the <tt>default</tt>\nclass method:\n\n class Notifier < ActionMailer::Base\n   self.default :from => 'no-reply@test.lindsaar.net',\n                :bcc => 'email_logger@test.lindsaar.net',\n                :reply_to => 'bounces@test.lindsaar.net'\n end\n\nIf you need other headers not listed above, you can either pass them in\nas part of the headers hash or use the <tt>headers['name'] = value</tt>\nmethod.\n\nWhen a <tt>:return_path</tt> is specified as header, that value will be used\nas the 'envelope from'\naddress for the Mail message.  Setting this is useful when you want delivery\nnotifications\nsent to a different address than the one in <tt>:from</tt>.  Mail will\nactually use the\n<tt>:return_path</tt> in preference to the <tt>:sender</tt> in preference\nto the <tt>:from</tt>\nfield for the 'envelope from' value.\n\nIf you do not pass a block to the +mail+ method, it will find all templates\nin the\nview paths using by default the mailer name and the method name that it\nis being\ncalled from, it will then create parts for each of these templates\nintelligently,\nmaking educated guesses on correct content type and sequence, and return\na fully\nprepared Mail::Message ready to call <tt>:deliver</tt> on to send.\n\nFor example:\n\n  class Notifier < ActionMailer::Base\n    default :from => 'no-reply@test.lindsaar.net',\n\n    def welcome\n      mail(:to => 'mikel@test.lindsaar.net')\n    end\n  end\n\nWill look for all templates at "app/views/notifier" with name\n"welcome". However, those\ncan be customized:\n\n  mail(:template_path => 'notifications', :template_name => 'another')\n\nAnd now it will look for all templates at "app/views/notifications" with name\n"another".\n\nIf you do pass a block, you can render specific templates of your choice:\n\n  mail(:to => 'mikel@test.lindsaar.net') do |format|\n    format.text\n    format.html\n  end\n\nYou can even render text directly without using a template:\n\n  mail(:to => 'mikel@test.lindsaar.net') do |format|\n    format.text { render :text => "Hello Mikel!" }\n    format.html { render :text => "<h1>Hello Mikel!</h1>" }\n  end\n\nWhich will render a <tt>multipart/alternative</tt> email with\n<tt>text/plain</tt> and\n<tt>text/html</tt> parts.\n\nThe block syntax also allows you to customize the part headers if desired:\n\n  mail(:to => 'mikel@test.lindsaar.net') do |format|\n    format.text(:content_transfer_encoding => "base64")\n    format.html\n  end\n
set_content_type ActionMailer::Base.set_content_type(m, user_content_type, class_default)\n\n
new ActionMailer::Base::DeprecatedHeaderProxy.new(message)\n\n
headers ActionMailer::Base::DeprecatedHeaderProxy.headers(hash = {})\n\n
method_missing ActionMailer::Base::DeprecatedHeaderProxy.method_missing(meth, *args, &block)\n\n
new ActionMailer::NonInferrableMailerError.new(name)\n\n
new ActionView::Template.new(source, identifier, handler, details)\n\n
build_method_name ActionView::Template.build_method_name(locals)\n\n
compile ActionView::Template.compile(locals, view, mod)\nAmong other things, this method is responsible for properly setting\nthe encoding of the source. Until this point, we assume that the\nsource is BINARY data. If no additional information is supplied,\nwe assume the encoding is the same as Encoding.default_external.\n\nThe user can also specify the encoding via a comment on the first\nline of the template (# encoding: NAME-OF-ENCODING). This will work\nwith any template engine, as we process out the encoding comment\nbefore passing the source on to the template engine, leaving a\nblank line in its stead.\n\nIf the template engine handles encodings, we send the encoded\nString to the engine without further processing. This allows\nthe template engine to support additional mechanisms for\nspecifying the encoding. For instance, ERB supports <%# encoding: %>\n\nOtherwise, after we figure out the correct encoding, we then\nencode the source into Encoding.default_internal. In general,\nthis means that templates will be UTF-8 inside of Rails,\nregardless of the original source encoding.\n
counter_name ActionView::Template.counter_name()\n\n
identifier_method_name ActionView::Template.identifier_method_name()\n\n
inspect ActionView::Template.inspect()\n\n
mime_type ActionView::Template.mime_type()\n\n
render ActionView::Template.render(view, locals, &block)\n\n
variable_name ActionView::Template.variable_name()\n\n
compile ActionView::Template::Handlers::Builder.compile(template)\n\n
new ActionView::OutputBuffer.new(*)\n\n
append= ActionView::OutputBuffer.append=(value)\n\n
append_if_string= ActionView::OutputBuffer.append_if_string=(value)\n\n
add_expr_escaped ActionView::Template::Handlers::Erubis.add_expr_escaped(src, code)\n\n
add_expr_literal ActionView::Template::Handlers::Erubis.add_expr_literal(src, code)\n\n
add_postamble ActionView::Template::Handlers::Erubis.add_postamble(src)\n\n
add_preamble ActionView::Template::Handlers::Erubis.add_preamble(src)\n\n
add_stmt ActionView::Template::Handlers::Erubis.add_stmt(src, code)\n\n
add_text ActionView::Template::Handlers::Erubis.add_text(src, text)\n\n
erb_trim_mode ActionView::Template::Handlers::ERB.erb_trim_mode\nSpecify trim mode for the ERB compiler. Defaults to '-'.\nSee ERb documentation for suitable values.\n
handles_encoding? ActionView::Template::Handlers::ERB.handles_encoding?()\n\n
compile ActionView::Template::Handlers::ERB.compile(template)\n\n
valid_encoding ActionView::Template::Handlers::ERB.valid_encoding(string, encoding)\n\n
compile ActionView::Template::Handlers::RJS.compile(template)\n\n
default_format ActionView::Template::Handlers::RJS.default_format()\n\n
call ActionView::Template::Handler.call(template)\n\n
render ActionView::Template::Handler.render(template, local_assigns)\n\n
new ActionView::Resolver.new()\n\n
cached ActionView::Resolver.cached(key, prefix, name, partial)\n\n
caching? ActionView::Resolver.caching?()\n\n
clear_cache ActionView::Resolver.clear_cache()\n\n
find_all ActionView::Resolver.find_all(name, prefix=nil, partial=false, details={},\nkey=nil)\nNormalizes the arguments and passes it on to find_template.\n
find_templates ActionView::Resolver.find_templates(name, prefix, partial, details)\nThis is what child classes implement. No defaults are needed\nbecause Resolver guarantees that the arguments are present and\nnormalized.\n
build_path ActionView::PathResolver.build_path(name, prefix, partial, details)\n\n
extract_handler_and_format ActionView::PathResolver.extract_handler_and_format(path, default_formats)\nExtract handler and formats from path. If a format cannot be a found neither\nfrom the path, or the handler, we should return the array of formats given\nto the resolver.\n
find_templates ActionView::PathResolver.find_templates(name, prefix, partial, details)\n\n
query ActionView::PathResolver.query(path, exts, formats)\n\n
to_path ActionView::PathResolver.to_path()\n\n
to_s ActionView::PathResolver.to_s()\n\n
new ActionView::FileSystemResolver.new(path)\n\n
eql? ActionView::FileSystemResolver.eql?(resolver)\n\n
from_rails_root ActionView::LogSubscriber.from_rails_root(string)\n\n
logger ActionView::LogSubscriber.logger()\nTODO: Ideally, ActionView should have its own logger so it does not depend\non AC.logger\n
render_collection ActionView::LogSubscriber.render_collection(event)\n\n
render_partial ActionView::LogSubscriber.render_partial(event)\n\n
render_template ActionView::LogSubscriber.render_template(event)\n\n
new ActionView::Helpers::NumberHelper::InvalidNumberError.new(number)\n\n
model_name ActionView::Helpers::FormBuilder.model_name()\n\n
new ActionView::Helpers::FormBuilder.new(object_name, object, template, options,\nproc)\n\n
check_box ActionView::Helpers::FormBuilder.check_box(method, options = {}, checked_value\n= "1", unchecked_value = "0")\n\n
collection_select ActionView::Helpers::FormBuilder.collection_select(method, collection,\nvalue_method, text_method, options = {}, html_options = {})\n\n
date_select ActionView::Helpers::FormBuilder.date_select(method, options = {}, html_options\n= {})\n\n
datetime_select ActionView::Helpers::FormBuilder.datetime_select(method, options = {},\nhtml_options = {})\n\n
emitted_hidden_id? ActionView::Helpers::FormBuilder.emitted_hidden_id?()\n\n
fields_for ActionView::Helpers::FormBuilder.fields_for(record_or_name_or_array, *args,\n&block)\n\n
fields_for_nested_model ActionView::Helpers::FormBuilder.fields_for_nested_model(name, object,\noptions, block)\n\n
fields_for_with_nested_attributes ActionView::Helpers::FormBuilder.fields_for_with_nested_attributes(association_name,\nargs, block)\n\n
grouped_collection_select ActionView::Helpers::FormBuilder.grouped_collection_select(method, collection,\ngroup_method, group_label_method, option_key_method, option_value_method,\noptions = {}, html_options = {})\n\n
hidden_field ActionView::Helpers::FormBuilder.hidden_field(method, options = {})\n\n
label ActionView::Helpers::FormBuilder.label(method, text = nil, options = {},\n&block)\n\n
nested_attributes_association? ActionView::Helpers::FormBuilder.nested_attributes_association?(association_name)\n\n
nested_child_index ActionView::Helpers::FormBuilder.nested_child_index(name)\n\n
objectify_options ActionView::Helpers::FormBuilder.objectify_options(options)\n\n
radio_button ActionView::Helpers::FormBuilder.radio_button(method, tag_value, options = {})\n\n
select ActionView::Helpers::FormBuilder.select(method, choices, options = {},\nhtml_options = {})\n\n
submit ActionView::Helpers::FormBuilder.submit(value=nil, options={})\nAdd the submit button for the given form. When no value is given, it checks\nif the object is a new resource or not to create the proper label:\n\n  <%= form_for @post do |f| %>\n    <%= f.submit %>\n  <% end %>\n\nIn the example above, if @post is a new record, it will use "Create Post" as\nsubmit button label, otherwise, it uses "Update Post".\n\nThose labels can be customized using I18n, under the helpers.submit key\nand accept\nthe %{model} as translation interpolation:\n\n  en:\n    helpers:\n      submit:\n        create: "Create a %{model}"\n        update: "Confirm changes to %{model}"\n\nIt also searches for a key specific for the given object:\n\n  en:\n    helpers:\n      submit:\n        post:\n          create: "Add %{model}"\n
submit_default_value ActionView::Helpers::FormBuilder.submit_default_value()\n\n
time_select ActionView::Helpers::FormBuilder.time_select(method, options = {}, html_options\n= {})\n\n
time_zone_select ActionView::Helpers::FormBuilder.time_zone_select(method, priority_zones =\nnil, options = {}, html_options = {})\n\n
to_model ActionView::Helpers::FormBuilder.to_model()\n\n
new ActionView::Helpers::AtomFeedHelper::AtomBuilder.new(xml)\n\n
method_missing ActionView::Helpers::AtomFeedHelper::AtomBuilder.method_missing(method,\n*arguments, &block)\nDelegate to xml builder, first wrapping the element in a xhtml\nnamespaced div element if the method and arguments indicate\nthat an xhtml_block? is desired.\n
xhtml_block? ActionView::Helpers::AtomFeedHelper::AtomBuilder.xhtml_block?(method,\narguments)\nTrue if the method name matches one of the five elements defined\nin the Atom spec as potentially containing XHTML content and\nif :type => 'xhtml' is, in fact, specified.\n
new ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder.new(xml, view,\nfeed_options = {})\n\n
entry ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder.entry(record, options\n= {})\nCreates an entry tag for a specific record and prefills the id using class\nand id.\n\nOptions:\n\n* <tt>:published</tt>: Time first published. Defaults to the created_at\nattribute on the record if one such exists.\n* <tt>:updated</tt>: Time of update. Defaults to the updated_at attribute\non the record if one such exists.\n* <tt>:url</tt>: The URL for this entry. Defaults to the polymorphic_url\nfor the record.\n* <tt>:id</tt>: The ID for this entry. Defaults to\n"tag:#{@view.request.host},#{@feed_options[:schema_date]}:#{record.class}/#{record.id}"\n
updated ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder.updated(date_or_time\n= nil)\nAccepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in UTC is used.\n
new ActionView::FixtureResolver.new(hash = {})\n\n
query ActionView::FixtureResolver.query(path, exts, formats)\n\n
query ActionView::NullResolver.query(path, exts, formats)\n\n
new ActionView::TestCase::TestController.new()\n\n
controller_path= ActionView::TestCase::TestController.controller_path=(path)\n\n
normalize_name ActionDispatch::Routing::Mapper.normalize_name(name)\n\n
normalize_path ActionDispatch::Routing::Mapper.normalize_path(path)\nInvokes Rack::Mount::Utils.normalize path and ensure that\n(:locale) becomes (/:locale) instead of /(:locale). Except\nfor root cases, where the latter is the correct one.\n
new ActionDispatch::Integration::Session.new(app)\nCreate and initialize a new Session instance.\n
_mock_session ActionDispatch::Integration::Session._mock_session()\n\n
cookies ActionDispatch::Integration::Session.cookies()\nA map of the cookies returned by the last response, and which will be\nsent with the next request.\n
default_url_options ActionDispatch::Integration::Session.default_url_options()\n\n
host ActionDispatch::Integration::Session.host()\nThe hostname used in the last request.\n
host! ActionDispatch::Integration::Session.host!(name)\nSet the host name to use in the next request.\n\n  session.host! "www.example.com"\n
https! ActionDispatch::Integration::Session.https!(flag = true)\nSpecify whether or not the session should mimic a secure HTTPS request.\n\n  session.https!\n  session.https!(false)\n
https? ActionDispatch::Integration::Session.https?()\nReturn +true+ if the session is mimicking a secure HTTPS request.\n\n  if session.https?\n    ...\n  end\n
process ActionDispatch::Integration::Session.process(method, path, parameters = nil,\nrack_environment = nil)\nPerforms the actual request.\n
reset! ActionDispatch::Integration::Session.reset!()\nResets the instance. This can be used to reset the state information\nin an existing session instance, so it can be used from a clean-slate\ncondition.\n\n  session.reset!\n
app ActionDispatch::IntegrationTest.app()\n\n
app= ActionDispatch::IntegrationTest.app=(app)\n\n
app ActionDispatch::IntegrationTest.app()\n\n
from_response ActionDispatch::TestResponse.from_response(response)\n\n
client_error? ActionDispatch::TestResponse.client_error?()\nWas there a client client?\n
error? ActionDispatch::TestResponse.error?()\nWas there a server-side error?\n
missing? ActionDispatch::TestResponse.missing?()\nWas the URL not found?\n
redirect? ActionDispatch::TestResponse.redirect?()\nWere we redirected?\n
server_error? ActionDispatch::TestResponse.server_error?()\n\n
success? ActionDispatch::TestResponse.success?()\nWas the response successful?\n
new ActionDispatch::TestRequest.new(env = {})\n\n
new ActionDispatch::TestRequest.new(env = {})\n\n
accept= ActionDispatch::TestRequest.accept=(mime_types)\n\n
action= ActionDispatch::TestRequest.action=(action_name)\n\n
cookies ActionDispatch::TestRequest.cookies()\n\n
delete_nil_values! ActionDispatch::TestRequest.delete_nil_values!()\n\n
env ActionDispatch::TestRequest.env()\n\n
host= ActionDispatch::TestRequest.host=(host)\n\n
if_modified_since= ActionDispatch::TestRequest.if_modified_since=(last_modified)\n\n
if_none_match= ActionDispatch::TestRequest.if_none_match=(etag)\n\n
path= ActionDispatch::TestRequest.path=(path)\n\n
port= ActionDispatch::TestRequest.port=(number)\n\n
remote_addr= ActionDispatch::TestRequest.remote_addr=(addr)\n\n
request_method= ActionDispatch::TestRequest.request_method=(method)\n\n
request_uri= ActionDispatch::TestRequest.request_uri=(uri)\n\n
user_agent= ActionDispatch::TestRequest.user_agent=(user_agent)\n\n
write_cookies! ActionDispatch::TestRequest.write_cookies!()\n\n
new ActionDispatch::Http::ParameterFilter.new(filters)\n\n
compile_filter ActionDispatch::Http::ParameterFilter.compile_filter()\n\n
compiled_filter ActionDispatch::Http::ParameterFilter.compiled_filter()\n\n
enabled? ActionDispatch::Http::ParameterFilter.enabled?()\n\n
filter ActionDispatch::Http::ParameterFilter.filter(params)\n\n
assign_default_content_type_and_charset! ActionDispatch::Response.assign_default_content_type_and_charset!()\n\n
body ActionDispatch::Response.body()\n\n
body= ActionDispatch::Response.body=(body)\n\n
body_parts ActionDispatch::Response.body_parts()\n\n
code ActionDispatch::Response.code()\nReturns a String to ensure compatibility with Net::HTTPResponse\n
cookies ActionDispatch::Response.cookies()\nReturns the response cookies, converted to a Hash of (name => value) pairs\n\n  assert_equal 'AuthorOfNewPage', r.cookies['author']\n
each ActionDispatch::Response.each(&callback)\n\n
location ActionDispatch::Response.location()\n\n
location= ActionDispatch::Response.location=(url)\n\n
message ActionDispatch::Response.message()\n\n
prepare! ActionDispatch::Response.prepare!()\n\n
redirect_url ActionDispatch::Response.redirect_url()\n\n
respond_to? ActionDispatch::Response.respond_to?(method)\n\n
response_code ActionDispatch::Response.response_code()\nThe response code of the request\n
status= ActionDispatch::Response.status=(status)\n\n
status_message ActionDispatch::Response.status_message()\n\n
to_a ActionDispatch::Response.to_a()\n\n
to_path ActionDispatch::Response.to_path()\n\n
write ActionDispatch::Response.write(str)\n\n
new ActionDispatch::Request.new(env)\n\n
GET ActionDispatch::Request.GET()\nOverride Rack's GET method to support indifferent access\n
POST ActionDispatch::Request.POST()\nOverride Rack's POST method to support indifferent access\n
authorization ActionDispatch::Request.authorization()\nReturns the authorization header regardless of whether it was specified\ndirectly or through one of the\nproxy alternatives.\n
body ActionDispatch::Request.body()\nThe request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap it in a StringIO.\n
content_length ActionDispatch::Request.content_length()\nReturns the content length of the request as an integer.\n
cookie_jar ActionDispatch::Request.cookie_jar()\n\n
delete? ActionDispatch::Request.delete?()\nIs this a DELETE request?\nEquivalent to <tt>request.request_method == :delete</tt>.\n
flash ActionDispatch::Request.flash()\nAccess the contents of the flash. Use <tt>flash["notice"]</tt> to\nread a notice you put there or <tt>flash["notice"] = "hello"</tt>\nto put a new one.\n
forgery_whitelisted? ActionDispatch::Request.forgery_whitelisted?()\n\n
form_data? ActionDispatch::Request.form_data?()\n\n
fullpath ActionDispatch::Request.fullpath()\n\n
get? ActionDispatch::Request.get?()\nIs this a GET (or HEAD) request?\nEquivalent to <tt>request.request_method == :get</tt>.\n
head? ActionDispatch::Request.head?()\nIs this a HEAD request?\nEquivalent to <tt>request.method == :head</tt>.\n
headers ActionDispatch::Request.headers()\nProvides access to the request's HTTP headers, for example:\n\n  request.headers["Content-Type"] # => "text/plain"\n
ip ActionDispatch::Request.ip()\n\n
key? ActionDispatch::Request.key?(key)\n\n
local? ActionDispatch::Request.local?()\nTrue if the request came from localhost, 127.0.0.1.\n
media_type ActionDispatch::Request.media_type()\n\n
method ActionDispatch::Request.method()\nReturns the original value of the environment's REQUEST_METHOD,\neven if it was overridden by middleware. See #request_method for\nmore information.\n
method_symbol ActionDispatch::Request.method_symbol()\nReturns a symbol form of the #method\n
post? ActionDispatch::Request.post?()\nIs this a POST request?\nEquivalent to <tt>request.request_method == :post</tt>.\n
put? ActionDispatch::Request.put?()\nIs this a PUT request?\nEquivalent to <tt>request.request_method == :put</tt>.\n
query_parameters ActionDispatch::Request.query_parameters()\n\n
raw_post ActionDispatch::Request.raw_post()\nRead the request \body. This is useful for web services that need to\nwork with raw requests directly.\n
remote_ip ActionDispatch::Request.remote_ip()\nDetermines originating IP address.  REMOTE_ADDR is the standard\nbut will fail if the user is behind a proxy.  HTTP_CLIENT_IP and/or\nHTTP_X_FORWARDED_FOR are set by proxies so check for these if\nREMOTE_ADDR is a proxy.  HTTP_X_FORWARDED_FOR may be a comma-\ndelimited list in the case of multiple chained proxies; the last\naddress which is not trusted is the originating IP.\n
request_method ActionDispatch::Request.request_method()\nReturns the HTTP \method that the application should see.\nIn the case where the \method was overridden by a middleware\n(for instance, if a HEAD request was converted to a GET,\nor if a _method parameter was used to determine the \method\nthe application should use), this \method returns the overridden\nvalue, not the original.\n
request_method_symbol ActionDispatch::Request.request_method_symbol()\nReturns a symbol form of the #request_method\n
request_parameters ActionDispatch::Request.request_parameters()\n\n
reset_session ActionDispatch::Request.reset_session()\nTODO This should be broken apart into AD::Request::Session and probably\nbe included by the session middleware.\n
server_software ActionDispatch::Request.server_software()\nReturns the lowercase name of the HTTP server software.\n
session_options= ActionDispatch::Request.session_options=(options)\n\n
xhr? ActionDispatch::Request.xhr?()\n\n
xml_http_request? ActionDispatch::Request.xml_http_request?()\nReturns true if the request's "X-Requested-With" header contains\n"XMLHttpRequest". (The Prototype Javascript library sends this header with\nevery Ajax request.)\n
new ActionDispatch::Http::UploadedFile.new(hash)\n\n
open ActionDispatch::Http::UploadedFile.open()\n\n
path ActionDispatch::Http::UploadedFile.path()\n\n
read ActionDispatch::Http::UploadedFile.read(*args)\n\n
rewind ActionDispatch::Http::UploadedFile.rewind()\n\n
size ActionDispatch::Http::UploadedFile.size()\n\n
symbols Mime::Mimes.symbols()\n\n
lookup Mime::Type.lookup(string)\n\n
lookup_by_extension Mime::Type.lookup_by_extension(extension)\n\n
new Mime::Type.new(string, symbol = nil, synonyms = [])\n\n
parse Mime::Type.parse(accept_header)\n\n
register Mime::Type.register(string, symbol, mime_type_synonyms = [], extension_synonyms\n= [], skip_lookup = false)\n\n
register_alias Mime::Type.register_alias(string, symbol, extension_synonyms = [])\nRegisters an alias that's not used on mime type lookup, but can be referenced\ndirectly. Especially useful for\nrendering different HTML versions depending on the user agent, like an iPhone.\n
html? Mime::Type.html?()\n\n
method_missing Mime::Type.method_missing(method, *args)\n\n
ref Mime::Type.ref()\n\n
to_s Mime::Type.to_s()\n\n
to_str Mime::Type.to_str()\n\n
to_sym Mime::Type.to_sym()\n\n
verify_request? Mime::Type.verify_request?()\nReturns true if Action Pack should check requests using this Mime Type for\npossible request forgery.  See\nActionController::RequestForgeryProtection.\n
new ActionDispatch::Http::Headers.new(*args)\n\n
env_name ActionDispatch::Http::Headers.env_name(header_name)\nConverts a HTTP header name to an environment variable name.\n
new ActionDispatch::Flash.new(app)\n\n
call ActionDispatch::Flash.call(env)\n\n
alert ActionDispatch::Flash::FlashHash.alert()\nConvenience accessor for flash[:alert]\n
alert= ActionDispatch::Flash::FlashHash.alert=(message)\nConvenience accessor for flash[:alert]=\n
discard ActionDispatch::Flash::FlashHash.discard(k = nil)\nMarks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n    flash.discard              # discard the entire flash at the end of the\n    current action\n    flash.discard(:warning)    # discard only the "warning" entry at the\n    end of the current action\n
keep ActionDispatch::Flash::FlashHash.keep(k = nil)\nKeeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n   flash.keep            # keeps the entire flash\n   flash.keep(:notice)   # keeps only the "notice" entry, the rest of the\n   flash is discarded\n
notice ActionDispatch::Flash::FlashHash.notice()\nConvenience accessor for flash[:notice]\n
notice= ActionDispatch::Flash::FlashHash.notice=(message)\nConvenience accessor for flash[:notice]=\n
now ActionDispatch::Flash::FlashHash.now()\nSets a flash that will not be available to the next action, only to the\ncurrent.\n\n    flash.now[:message] = "Hello current action"\n\nThis method enables you to use the flash as a central messaging system in\nyour app.\nWhen you need to pass an object to the next action, you use the standard\nflash assign (<tt>[]=</tt>).\nWhen you need to pass an object to the current action, you use <tt>now</tt>,\nand your object will\nvanish when the current action is done.\n\nEntries set via <tt>now</tt> are accessed the same way as standard entries:\n<tt>flash['my-key']</tt>.\n
use ActionDispatch::Flash::FlashHash.use(key = nil, used = true)\nUsed internally by the <tt>keep</tt> and <tt>discard</tt> methods\n    use()               # marks the entire flash as used\n    use('msg')          # marks the "msg" entry as used\n    use(nil, false)     # marks the entire flash as unused (keeps it around\n    for one more action)\n    use('msg', false)   # marks the "msg" entry as unused (keeps it around\n    for one more action)\nReturns the single value for the key you asked to be marked (un)used or the\nFlashHash itself\nif no key is passed.\n
after ActionDispatch::Callbacks.after(*args, &block)\n\n
before ActionDispatch::Callbacks.before(*args, &block)\n\n
new ActionDispatch::Callbacks.new(app, prepare_each_request = false)\n\n
to_prepare ActionDispatch::Callbacks.to_prepare(*args, &block)\nAdd a preparation callback. Preparation callbacks are run before every\nrequest in development mode, and before the first request in production mode.\n\nIf a symbol with a block is given, the symbol is used as an identifier.\nThat allows to_prepare to be called again with the same identifier to\nreplace the existing callback. Passing an identifier is a suggested\npractice if the code adding a preparation block may be reloaded.\n
call ActionDispatch::Callbacks.call(env)\n\n
new ActionDispatch::Head.new(app)\n\n
call ActionDispatch::Head.call(env)\n\n
new ActionDispatch::Rescue.new(app, rescuers = {}, &block)\n\n
call ActionDispatch::Rescue.call(env)\n\n
rescue_from ActionDispatch::Rescue.rescue_from(exception, rescuer)\n\n
new ActionDispatch::ParamsParser.new(app, parsers = {})\n\n
call ActionDispatch::ParamsParser.call(env)\n\n
content_type_from_legacy_post_data_format_header ActionDispatch::ParamsParser.content_type_from_legacy_post_data_format_header(env)\n\n
logger ActionDispatch::ParamsParser.logger()\n\n
parse_formatted_parameters ActionDispatch::ParamsParser.parse_formatted_parameters(env)\n\n
new ActionDispatch::ShowExceptions.new(app, consider_all_requests_local = false)\n\n
application_trace ActionDispatch::ShowExceptions.application_trace(exception)\n\n
call ActionDispatch::ShowExceptions.call(env)\n\n
clean_backtrace ActionDispatch::ShowExceptions.clean_backtrace(exception, *args)\n\n
framework_trace ActionDispatch::ShowExceptions.framework_trace(exception)\n\n
full_trace ActionDispatch::ShowExceptions.full_trace(exception)\n\n
log_error ActionDispatch::ShowExceptions.log_error(exception)\n\n
logger ActionDispatch::ShowExceptions.logger()\n\n
public_path ActionDispatch::ShowExceptions.public_path()\n\n
render ActionDispatch::ShowExceptions.render(status, body)\n\n
render_exception ActionDispatch::ShowExceptions.render_exception(env, exception)\n\n
rescue_action_in_public ActionDispatch::ShowExceptions.rescue_action_in_public(exception)\nAttempts to render a static error page based on the\n<tt>status_code</tt> thrown, or just return headers if no such file\nexists. At first, it will try to render a localized static page.\nFor example, if a 500 error is being handled Rails and locale is :da,\nit will first attempt to render the file at <tt>public/500.da.html</tt>\nthen attempt to render <tt>public/500.html</tt>. If none of them exist,\nthe body of the response will be left empty.\n
rescue_action_locally ActionDispatch::ShowExceptions.rescue_action_locally(request, exception)\nRender detailed diagnostics for unhandled exceptions rescued from\na controller action.\n
status_code ActionDispatch::ShowExceptions.status_code(exception)\n\n
new ActionDispatch::Session::CookieStore.new(app, options = {})\n\n
destroy ActionDispatch::Session::CookieStore.destroy(env)\n\n
extract_session_id ActionDispatch::Session::CookieStore.extract_session_id(env)\n\n
load_session ActionDispatch::Session::CookieStore.load_session(env)\n\n
persistent_session_id! ActionDispatch::Session::CookieStore.persistent_session_id!(data, sid=nil)\n\n
set_cookie ActionDispatch::Session::CookieStore.set_cookie(request, options)\n\n
set_session ActionDispatch::Session::CookieStore.set_session(env, sid, session_data)\n\n
unpacked_cookie_data ActionDispatch::Session::CookieStore.unpacked_cookie_data(env)\n\n
new ActionDispatch::Session::AbstractStore.new(app, options = {})\n\n
call ActionDispatch::Session::AbstractStore.call(env)\n\n
current_session_id ActionDispatch::Session::AbstractStore.current_session_id(env)\n\n
destroy ActionDispatch::Session::AbstractStore.destroy(env)\n\n
ensure_session_key! ActionDispatch::Session::AbstractStore.ensure_session_key!()\n\n
exists? ActionDispatch::Session::AbstractStore.exists?(env)\n\n
extract_session_id ActionDispatch::Session::AbstractStore.extract_session_id(env)\n\n
generate_sid ActionDispatch::Session::AbstractStore.generate_sid()\n\n
get_session ActionDispatch::Session::AbstractStore.get_session(env, sid)\n\n
load_session ActionDispatch::Session::AbstractStore.load_session(env)\n\n
prepare! ActionDispatch::Session::AbstractStore.prepare!(env)\n\n
set_cookie ActionDispatch::Session::AbstractStore.set_cookie(request, options)\n\n
set_session ActionDispatch::Session::AbstractStore.set_session(env, sid, session_data)\n\n
stale_session_check! ActionDispatch::Session::AbstractStore.stale_session_check!()\n\n
new ActionDispatch::Session::AbstractStore::OptionsHash.new(by, env,\ndefault_options)\n\n
has_session_id? ActionDispatch::Session::AbstractStore::OptionsHash.has_session_id?()\n\n
load_session_id! ActionDispatch::Session::AbstractStore::OptionsHash.load_session_id!()\n\n
new ActionDispatch::Session::AbstractStore::SessionHash.new(by, env)\n\n
clear ActionDispatch::Session::AbstractStore::SessionHash.clear()\n\n
delete ActionDispatch::Session::AbstractStore::SessionHash.delete(key)\n\n
destroy ActionDispatch::Session::AbstractStore::SessionHash.destroy()\n\n
exists? ActionDispatch::Session::AbstractStore::SessionHash.exists?()\n\n
has_key? ActionDispatch::Session::AbstractStore::SessionHash.has_key?(key)\n\n
inspect ActionDispatch::Session::AbstractStore::SessionHash.inspect()\n\n
load! ActionDispatch::Session::AbstractStore::SessionHash.load!()\n\n
load_for_read! ActionDispatch::Session::AbstractStore::SessionHash.load_for_read!()\n\n
load_for_write! ActionDispatch::Session::AbstractStore::SessionHash.load_for_write!()\n\n
loaded? ActionDispatch::Session::AbstractStore::SessionHash.loaded?()\n\n
to_hash ActionDispatch::Session::AbstractStore::SessionHash.to_hash()\n\n
update ActionDispatch::Session::AbstractStore::SessionHash.update(hash)\n\n
new ActionDispatch::Session::MemCacheStore.new(app, options = {})\n\n
destroy ActionDispatch::Session::MemCacheStore.destroy(env)\n\n
get_session ActionDispatch::Session::MemCacheStore.get_session(env, sid)\n\n
set_session ActionDispatch::Session::MemCacheStore.set_session(env, sid, session_data)\n\n
new ActionDispatch::Static.new(app, root)\n\n
call ActionDispatch::Static.call(env)\n\n
directory_exist? ActionDispatch::Static.directory_exist?(path)\n\n
file_exist? ActionDispatch::Static.file_exist?(path)\n\n
new ActionDispatch::Cookies.new(app)\n\n
call ActionDispatch::Cookies.call(env)\n\n
new ActionDispatch::BestStandardsSupport.new(app, type = true)\n\n
call ActionDispatch::BestStandardsSupport.call(env)\n\n
new ActionDispatch::MiddlewareStack.new(*args, &block)\n\n
active ActionDispatch::MiddlewareStack.active()\n\n
assert_index ActionDispatch::MiddlewareStack.assert_index(index, where)\n\n
build ActionDispatch::MiddlewareStack.build(app = nil, &block)\n\n
insert ActionDispatch::MiddlewareStack.insert(index, *args, &block)\n\n
insert_after ActionDispatch::MiddlewareStack.insert_after(index, *args, &block)\n\n
insert_before ActionDispatch::MiddlewareStack.insert_before(index, *args, &block)\n\n
swap ActionDispatch::MiddlewareStack.swap(target, *args, &block)\n\n
use ActionDispatch::MiddlewareStack.use(*args, &block)\n\n
new ActionDispatch::MiddlewareStack::Middleware.new(klass_or_name, *args, &block)\n\n
build ActionDispatch::MiddlewareStack::Middleware.build(app)\n\n
inspect ActionDispatch::MiddlewareStack::Middleware.inspect()\n\n
klass ActionDispatch::MiddlewareStack::Middleware.klass()\n\n
normalize ActionDispatch::MiddlewareStack::Middleware.normalize(object)\n\n
new ActionDispatch::RemoteIp.new(app, check_ip_spoofing = true, trusted_proxies\n= nil)\n\n
call ActionDispatch::RemoteIp.call(env)\n\n
new ActionDispatch::RemoteIp::RemoteIpGetter.new(env, check_ip_spoofing,\ntrusted_proxies)\n\n
remote_addrs ActionDispatch::RemoteIp::RemoteIpGetter.remote_addrs()\n\n
to_s ActionDispatch::RemoteIp::RemoteIpGetter.to_s()\n\n
process_node HTML::Sanitizer.process_node(node, result, options)\n\n
sanitize HTML::Sanitizer.sanitize(text, options = {})\n\n
sanitizeable? HTML::Sanitizer.sanitizeable?(text)\n\n
tokenize HTML::Sanitizer.tokenize(text, options)\n\n
process_node HTML::FullSanitizer.process_node(node, result, options)\n\n
sanitize HTML::FullSanitizer.sanitize(text, options = {})\n\n
process_node HTML::LinkSanitizer.process_node(node, result, options)\n\n
sanitizeable? HTML::LinkSanitizer.sanitizeable?(text)\n\n
contains_bad_protocols? HTML::WhiteListSanitizer.contains_bad_protocols?(attr_name, value)\n\n
process_attributes_for HTML::WhiteListSanitizer.process_attributes_for(node, options)\n\n
process_node HTML::WhiteListSanitizer.process_node(node, result, options)\n\n
sanitize_css HTML::WhiteListSanitizer.sanitize_css(style)\nSanitizes a block of css code.  Used by #sanitize when it comes across a\nstyle attribute\n
tokenize HTML::WhiteListSanitizer.tokenize(text, options)\n\n
for_class HTML::Selector.for_class(cls)\nCreates a new selector for the given class name.\n
for_id HTML::Selector.for_id(id)\nCreates a new selector for the given id.\n
new HTML::Selector.new(selector, *values)\nCreates a new selector from a CSS 2 selector expression.\n\nThe first argument is the selector expression. All other arguments\nare used for value substitution.\n\nThrows InvalidSelectorError is the selector expression is invalid.\n
attribute_match HTML::Selector.attribute_match(equality, value)\nCreate a regular expression to match an attribute value based\non the equality operator (=, ^=, |=, etc).\n
match HTML::Selector.match(element, first_only = false)\nMatches an element against the selector.\n\nFor a simple selector this method returns an array with the\nelement if the element matches, nil otherwise.\n\nFor a complex selector (sibling and descendant) this method\nreturns an array with all matching elements, nil if no match is\nfound.\n\nUse +first_only=true+ if you are only interested in the first element.\n\nFor example:\n  if selector.match(element)\n    puts "Element is a login form"\n  end\n
next_element HTML::Selector.next_element(element, name = nil)\nReturn the next element after this one. Skips sibling text nodes.\n\nWith the +name+ argument, returns the next element with that name,\nskipping other sibling elements.\n
next_selector HTML::Selector.next_selector(statement, values)\nCalled to create a dependent selector (sibling, descendant, etc).\nPasses the remainder of the statement that will be reduced to zero\neventually, and array of substitution values.\n\nThis method is called from four places, so it helps to put it here\nfor reuse. The only logic deals with the need to detect comma\nseparators (alternate) and apply them to the selector group of the\ntop selector.\n
nth_child HTML::Selector.nth_child(a, b, of_type, reverse)\nReturns a lambda that can match an element against the nth-child\npseudo class, given the following arguments:\n* +a+ -- Value of a part.\n* +b+ -- Value of b part.\n* +of_type+ -- True to test only elements of this type (of-type).\n* +reverse+ -- True to count in reverse order (last-).\n
only_child HTML::Selector.only_child(of_type)\nCreates a only child lambda. Pass +of-type+ to only look at\nelements of its type.\n
select HTML::Selector.select(root)\nSelects and returns an array with all matching elements, beginning\nwith one node and traversing through all children depth-first.\nReturns an empty array if no match is found.\n\nThe root node may be any element in the document, or the document\nitself.\n\nFor example:\n  selector = HTML::Selector.new "input[type=text]"\n  matches = selector.select(element)\n  matches.each do |match|\n    puts "Found text field with name #{match.attributes['name']}"\n  end\n
select_first HTML::Selector.select_first(root)\nSimilar to #select but returns the first matching element. Returns +nil+\nif no element matches the selector.\n
simple_selector HTML::Selector.simple_selector(statement, values, can_negate = true)\nCreates a simple selector given the statement and array of\nsubstitution values.\n\nReturns a hash with the values +tag_name+, +attributes+,\n+pseudo+ (classes) and +negation+.\n\nCalled the first time with +can_negate+ true to allow\nnegation. Called a second time with false since negation\ncannot be negated.\n
build ActionController::Middleware.build(app)\n\n
new ActionController::Middleware.new(app)\n\n
new ActionController::Middleware.new(app)\n\n
index ActionController::Middleware.index()\n\n
process ActionController::Middleware.process(action)\n\n
new ActionController::Middleware::ActionMiddleware.new(controller, app)\n\n
call ActionController::Middleware::ActionMiddleware.call(env)\n\n
logger ActionController::LogSubscriber.logger()\n\n
process_action ActionController::LogSubscriber.process_action(event)\n\n
redirect_to ActionController::LogSubscriber.redirect_to(event)\n\n
send_data ActionController::LogSubscriber.send_data(event)\n\n
send_file ActionController::LogSubscriber.send_file(event)\n\n
start_processing ActionController::LogSubscriber.start_processing(event)\n\n
after_dispatch ActionController::Dispatcher.after_dispatch(*args, &block)\n\n
before_dispatch ActionController::Dispatcher.before_dispatch(*args, &block)\n\n
new ActionController::Dispatcher.new()\n\n
to_prepare ActionController::Dispatcher.to_prepare(*args, &block)\n\n
inherited ActionController::Base.inherited(klass)\n\n
without_modules ActionController::Base.without_modules(*modules)\n\n
app ActionDispatch::IntegrationTest.app()\n\n
app= ActionDispatch::IntegrationTest.app=(app)\n\n
app ActionDispatch::IntegrationTest.app()\n\n
new ActionController::UrlRewriter.new(*)\n\n
call ActionController::Responder.call(*args)\nInitializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format.\n
new ActionController::Responder.new(controller, resources, options={})\n\n
api_behavior ActionController::Responder.api_behavior(error)\nThis is the common behavior for "API" requests, like :xml and :json.\n
api_location ActionController::Responder.api_location()\n\n
default_action ActionController::Responder.default_action()\nBy default, render the `:edit` action for HTML requests with failure, unless\nthe verb is POST.\n
default_render ActionController::Responder.default_render()\nIf a given response block was given, use it, otherwise call render on\ncontroller.\n
display ActionController::Responder.display(resource, given_options={})\nDisplay is just a shortcut to render a resource with the current format.\n\n  display @user, :status => :ok\n\nFor XML requests it's equivalent to:\n\n  render :xml => @user, :status => :ok\n\nOptions sent by the user are also used:\n\n  respond_with(@user, :status => :created)\n  display(@user, :status => :ok)\n\nResults in:\n\n  render :xml => @user, :status => :created\n
empty_json_resource ActionController::Responder.empty_json_resource()\nReturn a valid empty JSON resource\n
empty_resource ActionController::Responder.empty_resource()\nDelegate to proper empty resource method\n
has_empty_resource_definition? ActionController::Responder.has_empty_resource_definition?()\nCheck whether resource needs a specific definition of empty resource to\nbe valid\n
has_errors? ActionController::Responder.has_errors?()\nCheck whether the resource has errors.\n
navigation_behavior ActionController::Responder.navigation_behavior(error)\nThis is the common behavior for "navigation" requests, like :html, :iphone\nand so forth.\n
navigation_location ActionController::Responder.navigation_location()\n\n
resource_location ActionController::Responder.resource_location()\nReturns the resource location by retrieving it from the options or\nreturning the resources array.\n
resourceful? ActionController::Responder.resourceful?()\nChecks whether the resource responds to the current format or not.\n
respond ActionController::Responder.respond()\nMain entry point for responder responsible to dispatch to the proper format.\n
to_format ActionController::Responder.to_format()\nAll other formats follow the procedure below. First we try to render a\ntemplate, if the template is not available, we verify if the resource\nresponds to :to_format and display it.\n
to_html ActionController::Responder.to_html()\nHTML format does not render the resource, it always attempt to render a\ntemplate.\n
new ActionController::Caching::Actions::ActionCachePath.new(controller, options =\n{}, infer_extension = true)\nIf +infer_extension+ is true, the cache path extension is looked up from\nthe request's\npath & format. This is desirable when reading and writing the cache, but\nnot when\nexpiring the cache - expire_action should expire the same files regardless\nof the\nrequest format.\n
normalize! ActionController::Caching::Actions::ActionCachePath.normalize!(path)\n\n
recycle! ActionController::TestResponse.recycle!()\n\n
action ActionController::Metal.action(name, klass = ActionDispatch::Request)\nReturn a rack endpoint for the given action. Memoize the endpoint, so\nmultiple calls into MyController.action will return the same object\nfor the same action.\n\n==== Parameters\naction<#to_s>:: An action name\n\n==== Returns\nProc:: A rack application\n
call ActionController::Metal.call(env)\n\n
controller_name ActionController::Metal.controller_name()\nReturns the last part of the controller's name, underscored, without the ending\n"Controller". For instance, MyApp::MyPostsController would return "my_posts"\nfor\ncontroller_name\n\n==== Returns\nString\n
inherited ActionController::Metal.inherited(base)\n\n
middleware ActionController::Metal.middleware()\n\n
new ActionController::Metal.new(*)\n\n
use ActionController::Metal.use(*args, &block)\n\n
content_type ActionController::Metal.content_type()\n\n
content_type= ActionController::Metal.content_type=(type)\nBasic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency on the RackDelegation module\nin Renderer and Redirector.\n
controller_name ActionController::Metal.controller_name()\nDelegates to the class' #controller_name\n
dispatch ActionController::Metal.dispatch(name, request)\n:api: private\n
location ActionController::Metal.location()\n\n
location= ActionController::Metal.location=(url)\n\n
params ActionController::Metal.params()\n\n
params= ActionController::Metal.params=(val)\n\n
response_body= ActionController::Metal.response_body=(val)\n\n
status ActionController::Metal.status()\n\n
status= ActionController::Metal.status=(status)\n\n
to_a ActionController::Metal.to_a()\n:api: private\n
url_for ActionController::Metal.url_for(string)\nbasic url_for that can be overridden for more robust functionality\n
new AbstractController::DoubleRenderError.new(message = nil)\n\n
abstract! AbstractController::Base.abstract!()\nDefine a controller as abstract. See internal_methods for more\ndetails.\n
action_methods AbstractController::Base.action_methods()\nA list of method names that should be considered actions. This\nincludes all public instance methods on a controller, less\nany internal methods (see #internal_methods), adding back in\nany methods that are internal, but still exist on the class\nitself. Finally, #hidden_actions are removed.\n\n==== Returns\n* <tt>array</tt> - A list of all methods that should be considered actions.\n
clear_action_methods! AbstractController::Base.clear_action_methods!()\naction_methods are cached and there is sometimes need to refresh\nthem. clear_action_methods! allows you to do that, so next time\nyou run action_methods, they will be recalculated\n
controller_path AbstractController::Base.controller_path()\nReturns the full controller name, underscored, without the ending Controller.\nFor instance, MyApp::MyPostsController would return "my_app/my_posts" for\ncontroller_name.\n\n==== Returns\n* <tt>string</tt>\n
hidden_actions AbstractController::Base.hidden_actions()\nThe list of hidden actions to an empty array. Defaults to an\nempty array. This can be modified by other modules or subclasses\nto specify particular actions as hidden.\n\n==== Returns\n* <tt>array</tt> - An array of method names that should not be considered\nactions.\n
internal_methods AbstractController::Base.internal_methods()\nA list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, and gets a list of all public\ninstance methods on that abstract class. Public instance methods of\na controller would normally be considered action methods, so methods\ndeclared on abstract classes are being removed.\n(ActionController::Metal and ActionController::Base are defined as abstract)\n
method_added AbstractController::Base.method_added(name)\n\n
_handle_action_missing AbstractController::Base._handle_action_missing()\nIf the action name was not found, but a method called "action_missing"\nwas found, #method_for_action will return "_handle_action_missing".\nThis method calls #action_missing with the current action name.\n
action_method? AbstractController::Base.action_method?(name)\nReturns true if the name can be considered an action. This can\nbe overridden in subclasses to modify the semantics of what\ncan be considered an action.\n\n==== Parameters\n* <tt>name</tt> - The name of an action to be tested\n\n==== Returns\n* <tt>TrueClass</tt>, <tt>FalseClass</tt>\n
action_methods AbstractController::Base.action_methods()\n\n
controller_path AbstractController::Base.controller_path()\nDelegates to the class' #controller_path\n
method_for_action AbstractController::Base.method_for_action(action_name)\nTakes an action name and returns the name of the method that will\nhandle the action. In normal cases, this method returns the same\nname as it receives. By default, if #method_for_action receives\na name that is not an action, it will look for an #action_missing\nmethod and return "_handle_action_missing" if one is found.\n\nSubclasses may override this method to add additional conditions\nthat should be considered an action. For instance, an HTTP controller\nwith a template matching the action name is considered to exist.\n\nIf you override this method to handle additional cases, you may\nalso provide a method (like _handle_method_missing) to handle\nthe case.\n\nIf none of these conditions are true, and method_for_action\nreturns nil, an ActionNotFound exception will be raised.\n\n==== Parameters\n* <tt>action_name</tt> - An action name to find a method name for\n\n==== Returns\n* <tt>string</tt> - The name of the method that handles the action\n* <tt>nil</tt>    - No method name could be found. Raise ActionNotFound.\n
process AbstractController::Base.process(action, *args)\nCalls the action going through the entire action dispatch stack.\n\nThe actual method that is called is determined by calling\nmethod_for_action. If no method can handle the action, then an\nActionNotFound error is raised.\n\n==== Returns\n* <tt>self</tt>\n
process_action AbstractController::Base.process_action(method_name, *args)\nCall the action. Override this in a subclass to modify the\nbehavior around processing an action. This, and not #process,\nis the intended way to override action dispatching.\n
new ActiveModel::Validations::LengthValidator.new(options)\n\n
check_validity! ActiveModel::Validations::LengthValidator.check_validity!()\n\n
validate_each ActiveModel::Validations::LengthValidator.validate_each(record, attribute,\nvalue)\n\n
check_validity! ActiveModel::Validations::ExclusionValidator.check_validity!()\n\n
validate_each ActiveModel::Validations::ExclusionValidator.validate_each(record, attribute,\nvalue)\n\n
new ActiveModel::Validations::NumericalityValidator.new(options)\n\n
check_validity! ActiveModel::Validations::NumericalityValidator.check_validity!()\n\n
filtered_options ActiveModel::Validations::NumericalityValidator.filtered_options(value)\n\n
parse_raw_value_as_a_number ActiveModel::Validations::NumericalityValidator.parse_raw_value_as_a_number(raw_value)\n\n
parse_raw_value_as_an_integer ActiveModel::Validations::NumericalityValidator.parse_raw_value_as_an_integer(raw_value)\n\n
validate_each ActiveModel::Validations::NumericalityValidator.validate_each(record,\nattr_name, value)\n\n
check_validity! ActiveModel::Validations::InclusionValidator.check_validity!()\n\n
validate_each ActiveModel::Validations::InclusionValidator.validate_each(record, attribute,\nvalue)\n\n
validate ActiveModel::Validations::PresenceValidator.validate(record)\n\n
check_validity! ActiveModel::Validations::FormatValidator.check_validity!()\n\n
validate_each ActiveModel::Validations::FormatValidator.validate_each(record, attribute,\nvalue)\n\n
new ActiveModel::Validations::AcceptanceValidator.new(options)\n\n
setup ActiveModel::Validations::AcceptanceValidator.setup(klass)\n\n
validate_each ActiveModel::Validations::AcceptanceValidator.validate_each(record, attribute,\nvalue)\n\n
setup ActiveModel::Validations::ConfirmationValidator.setup(klass)\n\n
validate_each ActiveModel::Validations::ConfirmationValidator.validate_each(record,\nattribute, value)\n\n
new ActiveModel::Observer.new()\nStart observing the declared classes and their subclasses.\n
observe ActiveModel::Observer.observe(*models)\nAttaches the observer to the supplied model classes.\n
observed_class ActiveModel::Observer.observed_class()\nThe class observed by default is inferred from the observer's class name:\n  assert_equal Person, PersonObserver.observed_class\n
observed_classes ActiveModel::Observer.observed_classes()\nReturns an array of Classes to observe.\n\nYou can override this instead of using the +observe+ helper.\n\n  class AuditObserver < ActiveModel::Observer\n    def self.observed_classes\n      [Account, Balance]\n    end\n  end\n
new ActiveModel::Name.new(klass)\n\n
human ActiveModel::Name.human(options={})\nTransform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize the class name\n\n  BlogPost.model_name.human # => "Blog post"\n\nSpecify +options+ with additional translating options.\n
new ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher.new(options\n= {})\n\n
match ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher.match(method_name)\n\n
method_missing_target ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher.method_missing_target()\n\n
method_name ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher.method_name(attr_name)\n\n
new ActiveModel::Errors.new(base)\nPass in the instance of the object that is using the errors object.\n\n  class Person\n    def initialize\n      @errors = ActiveModel::Errors.new(self)\n    end\n  end\n
add ActiveModel::Errors.add(attribute, message = nil, options = {})\nAdds +message+ to the error messages on +attribute+, which will be returned\non a call to\n<tt>on(attribute)</tt> for the same attribute. More than one error can be\nadded to the same\n+attribute+ in which case an array will be returned on a call to\n<tt>on(attribute)</tt>.\nIf no +message+ is supplied, <tt>:invalid</tt> is assumed.\n\nIf +message+ is a symbol, it will be translated using the appropriate scope\n(see +translate_error+).\nIf +message+ is a proc, it will be called, allowing for things like\n<tt>Time.now</tt> to be used within an error.\n
add_on_blank ActiveModel::Errors.add_on_blank(attributes, options = {})\nWill add an error message to each of the attributes in +attributes+ that is\nblank (using Object#blank?).\n
add_on_empty ActiveModel::Errors.add_on_empty(attributes, options = {})\nWill add an error message to each of the attributes in +attributes+ that\nis empty.\n
as_json ActiveModel::Errors.as_json(options=nil)\nReturns an ActiveSupport::OrderedHash that can be used as the JSON\nrepresentation for this object.\n
blank? ActiveModel::Errors.blank?()\n\n
count ActiveModel::Errors.count()\nReturns the number of error messages.\n  p.errors.add(:name, "can't be blank")\n  p.errors.count # => 1\n  p.errors.add(:name, "must be specified")\n  p.errors.count # => 2\n
each ActiveModel::Errors.each()\nIterates through each error key, value pair in the error messages hash.\nYields the attribute and the error for that attribute.  If the attribute\nhas more than one error message, yields once for each error message.\n\n  p.errors.add(:name, "can't be blank")\n  p.errors.each do |attribute, errors_array|\n Will yield :name and "can't be blank"\n  end\n\n  p.errors.add(:name, "must be specified")\n  p.errors.each do |attribute, errors_array|\n Will yield :name and "can't be blank"\n then yield :name and "must be specified"\n  end\n
empty? ActiveModel::Errors.empty?()\nReturns true if there are any errors, false if not.\n
full_messages ActiveModel::Errors.full_messages()\nReturns all the full error messages in an array.\n\n  class Company\n    validates_presence_of :name, :address, :email\n    validates_length_of :name, :in => 5..30\n  end\n\n  company = Company.create(:address => '123 First St.')\n  company.errors.full_messages # =>\n    ["Name is too short (minimum is 5 characters)", "Name can't be blank",\n    "Address can't be blank"]\n
generate_message ActiveModel::Errors.generate_message(attribute, type = :invalid, options = {})\nTranslates an error message in its default scope\n(<tt>activemodel.errors.messages</tt>).\n\nError messages are first looked up in\n<tt>models.MODEL.attributes.ATTRIBUTE.MESSAGE</tt>,\nif it's not there, it's looked up in <tt>models.MODEL.MESSAGE</tt> and if\nthat is not\nthere also, it returns the translation of the default message\n(e.g. <tt>activemodel.errors.messages.MESSAGE</tt>). The translated model name,\ntranslated attribute name and the value are available for interpolation.\n\nWhen using inheritance in your models, it will check all the inherited\nmodels too, but only if the model itself hasn't been found. Say you have\n<tt>class Admin < User; end</tt> and you wanted the translation for\nthe <tt>:blank</tt> error +message+ for the <tt>title</tt> +attribute+,\nit looks for these translations:\n\n<ol>\n<li><tt>activemodel.errors.models.admin.attributes.title.blank</tt></li>\n<li><tt>activemodel.errors.models.admin.blank</tt></li>\n<li><tt>activemodel.errors.models.user.attributes.title.blank</tt></li>\n<li><tt>activemodel.errors.models.user.blank</tt></li>\n<li>any default you provided through the +options+ hash (in the\nactivemodel.errors scope)</li>\n<li><tt>activemodel.errors.messages.blank</tt></li>\n<li><tt>errors.attributes.title.blank</tt></li>\n<li><tt>errors.messages.blank</tt></li>\n</ol>\n
get ActiveModel::Errors.get(attribute)\n\n
set ActiveModel::Errors.set(attribute, error)\n\n
size ActiveModel::Errors.size()\nReturns the number of error messages.\n\n  p.errors.add(:name, "can't be blank")\n  p.errors.size # => 1\n  p.errors.add(:name, "must be specified")\n  p.errors.size # => 2\n
to_a ActiveModel::Errors.to_a()\nReturns an array of error messages, with the attribute name included\n\n  p.errors.add(:name, "can't be blank")\n  p.errors.add(:name, "must be specified")\n  p.errors.to_a # => ["name can't be blank", "name must be specified"]\n
to_hash ActiveModel::Errors.to_hash()\n\n
to_xml ActiveModel::Errors.to_xml(options={})\nReturns an xml formatted representation of the Errors hash.\n\n  p.errors.add(:name, "can't be blank")\n  p.errors.add(:name, "must be specified")\n  p.errors.to_xml\n =>\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <errors>\n    <error>name can't be blank</error>\n    <error>name must be specified</error>\n  </errors>\n
kind ActiveModel::Validator.kind()\nReturns the kind of the validator.\n\n== Examples\n\n  PresenceValidator.kind   # => :presence\n  UniquenessValidator.kind # => :uniqueness\n
new ActiveModel::Validator.new(options)\nAccepts options that will be made available through the +options+ reader.\n
kind ActiveModel::Validator.kind()\nReturn the kind for this validator.\n
validate ActiveModel::Validator.validate(record)\nOverride this method in subclasses with validation logic, adding errors\nto the records +errors+ array where necessary.\n
new ActiveModel::EachValidator.new(options)\nReturns a new validator instance. All options will be available via the\n+options+ reader, however the <tt>:attributes</tt> option will be removed\nand instead be made available through the +attributes+ reader.\n
check_validity! ActiveModel::EachValidator.check_validity!()\nHook method that gets called by the initializer allowing verification\nthat the arguments supplied are valid. You could for example raise an\nArgumentError when invalid options are supplied.\n
validate ActiveModel::EachValidator.validate(record)\nPerforms validation on the supplied record. By default this will call\n+validates_each+ to determine validity therefore subclasses should\noverride +validates_each+ with validation logic.\n
validate_each ActiveModel::EachValidator.validate_each(record, attribute, value)\nOverride this method in subclasses with the validation logic, adding\nerrors to the records +errors+ array where necessary.\n
new ActiveModel::BlockValidator.new(options, &block)\n\n
validate_each ActiveModel::BlockValidator.validate_each(record, attribute, value)\n\n
include? ActiveModel::MassAssignmentSecurity::PermissionSet.include?(key)\n\n
remove_multiparameter_id ActiveModel::MassAssignmentSecurity::PermissionSet.remove_multiparameter_id(key)\n\n
deny? ActiveModel::MassAssignmentSecurity::WhiteList.deny?(key)\n\n
deny? ActiveModel::MassAssignmentSecurity::BlackList.deny?(key)\n\n
create_observer_file ActiveRecord::Generators::ObserverGenerator.create_observer_file()\n\n
create_migration_file ActiveRecord::Generators::MigrationGenerator.create_migration_file()\n\n
set_local_assigns! ActiveRecord::Generators::MigrationGenerator.set_local_assigns!()\n\n
create_migration_file ActiveRecord::Generators::SessionMigrationGenerator.create_migration_file()\n\n
session_table_name ActiveRecord::Generators::SessionMigrationGenerator.session_table_name()\n\n
create_migration_file ActiveRecord::Generators::ModelGenerator.create_migration_file()\n\n
create_model_file ActiveRecord::Generators::ModelGenerator.create_model_file()\n\n
create_module_file ActiveRecord::Generators::ModelGenerator.create_module_file()\n\n
parent_class_name ActiveRecord::Generators::ModelGenerator.parent_class_name()\n\n
new ActiveRecord::Validations::UniquenessValidator.new(options)\n\n
setup ActiveRecord::Validations::UniquenessValidator.setup(klass)\nUnfortunately, we have to tie Uniqueness validators to a class.\n
validate_each ActiveRecord::Validations::UniquenessValidator.validate_each(record,\nattribute, value)\n\n
validate_each ActiveRecord::Validations::AssociatedValidator.validate_each(record,\nattribute, value)\n\n
new ActiveRecord::RecordInvalid.new(record)\n\n
define ActiveRecord::Schema.define(info={}, &block)\nEval the given block. All methods available to the current connection\nadapter are available within the block, so you can easily use the\ndatabase definition DSL to build up your schema (+create_table+,\n+add_index+, etc.).\n\nThe +info+ hash is optional, and if given is used to define metadata\nabout the current schema (currently, only the schema's version):\n\n  ActiveRecord::Schema.define(:version => 20380119000001) do\n    ...\n  end\n
migrations_path ActiveRecord::Schema.migrations_path()\n\n
new ActiveRecord::LogSubscriber.new()\n\n
reset_runtime ActiveRecord::LogSubscriber.reset_runtime()\n\n
runtime ActiveRecord::LogSubscriber.runtime()\n\n
runtime= ActiveRecord::LogSubscriber.runtime=(value)\n\n
logger ActiveRecord::LogSubscriber.logger()\n\n
odd? ActiveRecord::LogSubscriber.odd?()\n\n
sql ActiveRecord::LogSubscriber.sql(event)\n\n
new ActiveRecord::Observer.new()\n\n
add_observer! ActiveRecord::Observer.add_observer!(klass)\n\n
define_callbacks ActiveRecord::Observer.define_callbacks(klass)\n\n
observed_descendants ActiveRecord::Observer.observed_descendants()\n\n
new ActiveRecord::Reflection::MacroReflection.new(macro, name, options,\nactive_record)\n\n
class_name ActiveRecord::Reflection::MacroReflection.class_name()\nReturns the class name for the macro.\n\n<tt>composed_of :balance, :class_name => 'Money'</tt> returns <tt>'Money'</tt>\n<tt>has_many :clients</tt> returns <tt>'Client'</tt>\n
derive_class_name ActiveRecord::Reflection::MacroReflection.derive_class_name()\n\n
klass ActiveRecord::Reflection::MacroReflection.klass()\nReturns the class for the macro.\n\n<tt>composed_of :balance, :class_name => 'Money'</tt> returns the Money class\n<tt>has_many :clients</tt> returns the Client class\n
new ActiveRecord::PredicateBuilder.new(engine)\n\n
build_from_hash ActiveRecord::PredicateBuilder.build_from_hash(attributes, default_table)\n\n
new ActiveRecord::WrappedDatabaseException.new(message, original_exception)\n\n
new ActiveRecord::AttributeAssignmentError.new(message, exception, attribute)\n\n
new ActiveRecord::MultiparameterAssignmentErrors.new(errors)\n\n
announce ActiveRecord::Migration.announce(message)\n\n
connection ActiveRecord::Migration.connection()\n\n
method_missing ActiveRecord::Migration.method_missing(method, *arguments, &block)\n\n
migrate ActiveRecord::Migration.migrate(direction)\nExecute this migration in the named direction\n
say ActiveRecord::Migration.say(message, subitem=false)\n\n
say_with_time ActiveRecord::Migration.say_with_time(message)\n\n
suppress_messages ActiveRecord::Migration.suppress_messages()\n\n
write ActiveRecord::Migration.write(text="")\n\n
load_migration ActiveRecord::MigrationProxy.load_migration()\n\n
migration ActiveRecord::MigrationProxy.migration()\n\n
abstract_class? ActiveRecord::Base.abstract_class?()\nReturns whether this class is an abstract class or not.\n
aggregate_mapping ActiveRecord::Base.aggregate_mapping(reflection)\n\n
all_attributes_exists? ActiveRecord::Base.all_attributes_exists?(attribute_names)\n\n
arel_engine ActiveRecord::Base.arel_engine()\n\n
arel_table ActiveRecord::Base.arel_table()\n\n
attr_readonly ActiveRecord::Base.attr_readonly(*attributes)\nAttributes listed as readonly will be used to create a new record but update\noperations will\nignore these fields.\n
attribute_method? ActiveRecord::Base.attribute_method?(attribute)\n\n
attributes_protected_by_default ActiveRecord::Base.attributes_protected_by_default()\nThe primary key and inheritance column can never be set by mass-assignment\nfor security reasons.\n
base_class ActiveRecord::Base.base_class()\nReturns the base AR subclass that this class descends from. If A\nextends AR::Base, A.base_class will return A. If B descends from A\nthrough some arbitrarily deep hierarchy, B.base_class will return A.\n\nIf B < A and C < B and if A is an abstract_class then both B.base_class\nand C.base_class would return B as the answer since A is an abstract_class.\n
class_of_active_record_descendant ActiveRecord::Base.class_of_active_record_descendant(klass)\nReturns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance hierarchy.\n
colorize_logging ActiveRecord::Base.colorize_logging(*args)\n\n
column_names ActiveRecord::Base.column_names()\nReturns an array of column names as strings.\n
columns ActiveRecord::Base.columns()\nReturns an array of column objects for the table associated with this class.\n
columns_hash ActiveRecord::Base.columns_hash()\nReturns a hash of column objects for the table associated with this class.\n
compute_table_name ActiveRecord::Base.compute_table_name()\nComputes and returns a table name according to default conventions.\n
compute_type ActiveRecord::Base.compute_type(type_name)\nReturns the class type of the record using the current module as a prefix. So\ndescendants of\nMyApp::Business::Account would appear as MyApp::Business::AccountSubclass.\n
configurations ActiveRecord::Base.configurations\nContains the database configuration - as is typically stored in\nconfig/database.yml -\nas a Hash.\n\nFor example, the following database.yml...\n\n  development:\n    adapter: sqlite3\n    database: db/development.sqlite3\n\n  production:\n    adapter: sqlite3\n    database: db/production.sqlite3\n\n...would result in ActiveRecord::Base.configurations to look like this:\n\n  {\n     'development' => {\n        'adapter'  => 'sqlite3',\n        'database' => 'db/development.sqlite3'\n     },\n     'production' => {\n        'adapter'  => 'sqlite3',\n        'database' => 'db/production.sqlite3'\n     }\n  }\n
connected? ActiveRecord::Base.connected?()\nReturns true if Active Record is connected.\n
connection ActiveRecord::Base.connection()\nReturns the connection currently associated with the class. This can\nalso be used to "borrow" the connection to do database work unrelated\nto any of the specific Active Records.\n
connection_handler ActiveRecord::Base.connection_handler\nThe connection handler\n
connection_pool ActiveRecord::Base.connection_pool()\n\n
construct_attributes_from_arguments ActiveRecord::Base.construct_attributes_from_arguments(attribute_names,\narguments)\n\n
construct_finder_arel ActiveRecord::Base.construct_finder_arel(options = {}, scope = nil)\n\n
content_columns ActiveRecord::Base.content_columns()\nReturns an array of column objects where the primary id, all columns ending in\n"_id" or "_count",\nand columns used for single table inheritance have been removed.\n
count_by_sql ActiveRecord::Base.count_by_sql(sql)\nReturns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part.\nThe use of this method should be restricted to complicated SQL queries that\ncan't be executed\nusing the ActiveRecord::Calculations class methods.  Look into those before\nusing this.\n\n==== Parameters\n\n* +sql+ - An SQL statement which should return a count query from the database,\nsee the example below.\n\n==== Examples\n\n  Product.count_by_sql "SELECT COUNT(*) FROM sales s, customers c WHERE\n  s.customer_id = c.id"\n
create ActiveRecord::Base.create(attributes = nil, &block)\nCreates an object (or multiple objects) and saves it to the database, if\nvalidations pass.\nThe resulting object is returned whether the object was saved successfully\nto the database or not.\n\nThe +attributes+ parameter can be either be a Hash or an Array of Hashes.\nThese Hashes describe the\nattributes on the objects that are to be created.\n\n==== Examples\n Create a single new object\n  User.create(:first_name => 'Jamie')\n Create an Array of new objects\n  User.create([{ :first_name => 'Jamie' }, { :first_name => 'Jeremy' }])\n Create a single object and pass it into a block to set other attributes.\n  User.create(:first_name => 'Jamie') do |u|\n    u.is_admin = false\n  end\n Creating an Array of new objects using a block, where the block is executed\n for each object:\n  User.create([{ :first_name => 'Jamie' }, { :first_name => 'Jeremy' }]) do |u|\n    u.is_admin = false\n  end\n
default_scope ActiveRecord::Base.default_scope(options = {})\nSets the default options for the model. The format of the\n<tt>options</tt> argument is the same as in find.\n\n  class Person < ActiveRecord::Base\n    default_scope order('last_name, first_name')\n  end\n\n<tt>default_scope</tt> is also applied while creating/building a record. It\nis not\napplied while updating a record.\n\n  class Article < ActiveRecord::Base\n    default_scope where(:published => true)\n  end\n\n  Article.new.published    # => true\n  Article.create.published # => true\n
default_timezone ActiveRecord::Base.default_timezone\nDetermines whether to use Time.local (using :local) or Time.utc (using :utc)\nwhen pulling\ndates and times from the database. This is set to :local by default.\n
descends_from_active_record? ActiveRecord::Base.descends_from_active_record?()\nTrue if this isn't a concrete subclass needing a STI type condition.\n
establish_connection ActiveRecord::Base.establish_connection(spec = nil)\nEstablishes the connection to the database. Accepts a hash as input where\nthe <tt>:adapter</tt> key must be specified with the name of a database\nadapter (in lower-case)\nexample for regular databases (MySQL, Postgresql, etc):\n\n  ActiveRecord::Base.establish_connection(\n    :adapter  => "mysql",\n    :host     => "localhost",\n    :username => "myuser",\n    :password => "mypass",\n    :database => "somedatabase"\n  )\n\nExample for SQLite database:\n\n  ActiveRecord::Base.establish_connection(\n    :adapter => "sqlite",\n    :database  => "path/to/dbfile"\n  )\n\nAlso accepts keys as strings (for parsing from YAML for example):\n\n  ActiveRecord::Base.establish_connection(\n    "adapter" => "sqlite",\n    "database"  => "path/to/dbfile"\n  )\n\nThe exceptions AdapterNotSpecified, AdapterNotFound and ArgumentError\nmay be returned on an error.\n
expand_attribute_names_for_aggregates ActiveRecord::Base.expand_attribute_names_for_aggregates(attribute_names)\nSimilar in purpose to +expand_hash_conditions_for_aggregates+.\n
expand_hash_conditions_for_aggregates ActiveRecord::Base.expand_hash_conditions_for_aggregates(attrs)\nAccepts a hash of SQL conditions and replaces those attributes\nthat correspond to a +composed_of+ relationship with their expanded\naggregate attribute values.\nGiven:\n    class Person < ActiveRecord::Base\n      composed_of :address, :class_name => "Address",\n        :mapping => [%w(address_street street), %w(address_city city)]\n    end\nThen:\n    { :address => Address.new("813 abc st.", "chicago") }\n => { :address_street => "813 abc st.", :address_city => "chicago" }\n
find_by_sql ActiveRecord::Base.find_by_sql(sql)\nExecutes a custom SQL query against your database and returns all the results.\nThe results will\nbe returned as an array with columns requested encapsulated as attributes\nof the model you call\nthis method from.  If you call <tt>Product.find_by_sql</tt> then the results\nwill be returned in\na Product object with the attributes you specified in the SQL query.\n\nIf you call a complicated SQL query which spans multiple tables the columns\nspecified by the\nSELECT will be attributes of the model, whether or not they are columns of\nthe corresponding\ntable.\n\nThe +sql+ parameter is a full SQL query as a string.  It will be called as\nis, there will be\nno database agnostic conversions performed.  This should be a last resort\nbecause using, for example,\nMySQL specific terms will lock you to using that particular database engine\nor require you to\nchange your call if you switch engines.\n\n==== Examples\n A simple SQL query spanning multiple tables\n  Post.find_by_sql "SELECT p.title, c.author FROM posts p, comments c WHERE\n  p.id = c.post_id"\n  > [#<Post:0x36bff9c @attributes={"title"=>"Ruby Meetup",\n  "first_name"=>"Quentin"}>, ...]\n You can use the same string replacement techniques as you can with\n ActiveRecord#find\n  Post.find_by_sql ["SELECT title FROM posts WHERE author = ? AND created >\n  ?", author_id, start_date]\n  > [#<Post:0x36bff9c @attributes={"first_name"=>"The Cheap Man Buys\n  Twice"}>, ...]\n
find_sti_class ActiveRecord::Base.find_sti_class(type_name)\n\n
inheritance_column ActiveRecord::Base.inheritance_column()\nDefines the column name for use with single table inheritance. Use\n<tt>set_inheritance_column</tt> to set a different value.\n
inspect ActiveRecord::Base.inspect()\nReturns a string like 'Post id:integer, title:string, body:text'\n
instantiate ActiveRecord::Base.instantiate(record)\nFinder methods must instantiate through this method to work with the\nsingle-table inheritance model that makes it possible to create\nobjects of different types from the same table.\n
logger ActiveRecord::Base.logger\nAccepts a logger conforming to the interface of Log4r or the default Ruby 1.8+\nLogger class,\nwhich is then passed on to any new database connections made and which can\nbe retrieved on both\na class and instance level by calling +logger+.\n
method_missing ActiveRecord::Base.method_missing(method_id, *arguments, &block)\nEnables dynamic finders like <tt>User.find_by_user_name(user_name)</tt> and\n<tt>User.scoped_by_user_name(user_name). Refer to Dynamic attribute-based\nfinders\nsection at the top of this file for more detailed information.\n\nIt's even possible to use all the additional parameters to +find+. For\nexample, the\nfull interface for +find_all_by_amount+ is actually\n<tt>find_all_by_amount(amount, options)</tt>.\n\nEach dynamic finder using <tt>scoped_by_*</tt> is also defined in the class\nafter it\nis first invoked, so that future attempts to use it do not run through\nmethod_missing.\n
new ActiveRecord::Base.new(attributes = nil)\nNew objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with\nattributes but not yet saved (pass a hash with key names matching the\nassociated table column names).\nIn both instances, valid attribute keys are determined by the column names\nof the associated table --\nhence you can't have attributes that aren't part of the table columns.\n
pluralize_table_names ActiveRecord::Base.pluralize_table_names\nIndicates whether table names should be the pluralized versions of the\ncorresponding class names.\nIf true, the default table name for a Product class will be +products+. If\nfalse, it would just be +product+.\nSee table_name for the full rules on table/class naming. This is true,\nby default.\n
primary_key_prefix_type ActiveRecord::Base.primary_key_prefix_type\nAccessor for the prefix type that will be prepended to every primary key\ncolumn name.\nThe options are :table_name and :table_name_with_underscore. If the first\nis specified,\nthe Product class will look for "productid" instead of "id" as the primary\ncolumn. If the\nlatter is specified, the Product class will look for "product_id" instead of\n"id". Remember\nthat this is a global setting for all Active Records.\n
quoted_table_name ActiveRecord::Base.quoted_table_name()\nReturns a quoted version of the table name, used to construct SQL statements.\n
readonly_attributes ActiveRecord::Base.readonly_attributes()\nReturns an array of all the attributes that have been specified as readonly.\n
remove_connection ActiveRecord::Base.remove_connection(klass = self)\n\n
reset_column_information ActiveRecord::Base.reset_column_information()\nResets all the cached information about columns, which will cause them\nto be reloaded on the next request.\n\nThe most common usage pattern for this method is probably in a migration,\nwhen just after creating a table you want to populate it with some default\nvalues, eg:\n\n class CreateJobLevels < ActiveRecord::Migration\n   def self.up\n     create_table :job_levels do |t|\n       t.integer :id\n       t.string :name\n\n       t.timestamps\n     end\n\n     JobLevel.reset_column_information\n     %w{assistant executive manager director}.each do |type|\n       JobLevel.create(:name => type)\n     end\n   end\n\n   def self.down\n     drop_table :job_levels\n   end\n end\n
respond_to? ActiveRecord::Base.respond_to?(method_id, include_private = false)\n\n
retrieve_connection ActiveRecord::Base.retrieve_connection()\n\n
sanitize_sql_array ActiveRecord::Base.sanitize_sql_array(ary)\nAccepts an array of conditions.  The array has each value\nsanitized and interpolated into the SQL statement.\n  ["name='%s' and group_id='%s'", "foo'bar", 4]  returns  "name='foo''bar'\n  and group_id='4'"\n
sanitize_sql_for_assignment ActiveRecord::Base.sanitize_sql_for_assignment(assignments)\nAccepts an array, hash, or string of SQL conditions and sanitizes\nthem into a valid SQL fragment for a SET clause.\n  { :name => nil, :group_id => 4 }  returns "name = NULL , group_id='4'"\n
sanitize_sql_for_conditions ActiveRecord::Base.sanitize_sql_for_conditions(condition, table_name =\nself.table_name)\nAccepts an array, hash, or string of SQL conditions and sanitizes\nthem into a valid SQL fragment for a WHERE clause.\n  ["name='%s' and group_id='%s'", "foo'bar", 4]  returns  "name='foo''bar'\n  and group_id='4'"\n  { :name => "foo'bar", :group_id => 4 }  returns "name='foo''bar' and\n  group_id='4'"\n  "name='foo''bar' and group_id='4'" returns "name='foo''bar' and group_id='4'"\n
sanitize_sql_hash_for_assignment ActiveRecord::Base.sanitize_sql_hash_for_assignment(attrs)\nSanitizes a hash of attribute/value pairs into SQL conditions for a SET clause.\n  { :status => nil, :group_id => 1 }\n => "status = NULL , group_id = 1"\n
sanitize_sql_hash_for_conditions ActiveRecord::Base.sanitize_sql_hash_for_conditions(attrs, default_table_name\n= self.table_name)\nSanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n  { :name => "foo'bar", :group_id => 4 }\n => "name='foo''bar' and group_id= 4"\n  { :status => nil, :group_id => [1,2,3] }\n => "status IS NULL and group_id IN (1,2,3)"\n  { :age => 13..18 }\n => "age BETWEEN 13 AND 18"\n  { 'other_records.id' => 7 }\n => "`other_records`.`id` = 7"\n  { :other_records => { :id => 7 } }\n => "`other_records`.`id` = 7"\nAnd for value objects on a composed_of relationship:\n  { :address => Address.new("123 abc st.", "chicago") }\n => "address_street='123 abc st.' and address_city='chicago'"\n
schema_format ActiveRecord::Base.schema_format\nSpecifies the format to use when dumping the database schema with Rails'\nRakefile.  If :sql, the schema is dumped as (potentially database-\nspecific) SQL statements.  If :ruby, the schema is dumped as an\nActiveRecord::Schema file which can be loaded into any database that\nsupports migrations.  Use :ruby if you want to have different database\nadapters for, e.g., your development and test environments.\n
serialize ActiveRecord::Base.serialize(attr_name, class_name = Object)\nIf you have an attribute that needs to be saved to the database as an object,\nand retrieved as the same object,\nthen specify the name of that attribute using this method and it will be\nhandled automatically.\nThe serialization is done through YAML. If +class_name+ is specified, the\nserialized object must be of that\nclass on retrieval or SerializationTypeMismatch will be raised.\n\n==== Parameters\n\n* +attr_name+ - The field name that should be serialized.\n* +class_name+ - Optional, class name that the object type should be equal to.\n\n==== Example\n Serialize a preferences attribute\n  class User\n    serialize :preferences\n  end\n
serialized_attributes ActiveRecord::Base.serialized_attributes()\nReturns a hash of all the attributes that have been specified for\nserialization as\nkeys and their class restriction as values.\n
set_inheritance_column ActiveRecord::Base.set_inheritance_column(value = nil, &block)\nSets the name of the inheritance column to use to the given value,\nor (if the value # is nil or false) to the value returned by the\ngiven block.\n\n  class Project < ActiveRecord::Base\n    set_inheritance_column do\n      original_inheritance_column + "_id"\n    end\n  end\n
set_sequence_name ActiveRecord::Base.set_sequence_name(value = nil, &block)\nSets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil or false) to the value returned by the\ngiven block. This is required for Oracle and is useful for any\ndatabase which relies on sequences for primary key generation.\n\nIf a sequence name is not explicitly set when using Oracle or Firebird,\nit will default to the commonly used pattern of: #{table_name}_seq\n\nIf a sequence name is not explicitly set when using PostgreSQL, it\nwill discover the sequence corresponding to your primary key for you.\n\n  class Project < ActiveRecord::Base\n    set_sequence_name "projectseq"   # default would have been "project_seq"\n  end\n
set_table_name ActiveRecord::Base.set_table_name(value = nil, &block)\nSets the table name. If the value is nil or false  then the value returned\nby the given\nblock is used.\n\n  class Project < ActiveRecord::Base\n    set_table_name "project"\n  end\n
sti_name ActiveRecord::Base.sti_name()\n\n
subclasses ActiveRecord::Base.subclasses()\n\n
table_exists? ActiveRecord::Base.table_exists?()\nIndicates whether the table associated with this class exists\n
table_name ActiveRecord::Base.table_name()\nGuesses the table name (in forced lower-case) based on the name of the class\nin the\ninheritance hierarchy descending directly from ActiveRecord::Base. So if\nthe hierarchy\nlooks like: Reply < Message < ActiveRecord::Base, then Message is used\nto guess the table name even when called on Reply. The rules used to do\nthe guess\nare handled by the Inflector class in Active Support, which knows almost\nall common\nEnglish inflections. You can add new inflections in\nconfig/initializers/inflections.rb.\n\nNested classes are given table names prefixed by the singular form of\nthe parent's table name. Enclosing modules are not considered.\n\n==== Examples\n\n  class Invoice < ActiveRecord::Base; end;\n  file                  class               table_name\n  invoice.rb            Invoice             invoices\n\n  class Invoice < ActiveRecord::Base; class Lineitem < ActiveRecord::Base;\n  end; end;\n  file                  class               table_name\n  invoice.rb            Invoice::Lineitem   invoice_lineitems\n\n  module Invoice; class Lineitem < ActiveRecord::Base; end; end;\n  file                  class               table_name\n  invoice/lineitem.rb   Invoice::Lineitem   lineitems\n\nAdditionally, the class-level +table_name_prefix+ is prepended and the\n+table_name_suffix+ is appended.  So if you have "myapp_" as a prefix,\nthe table name guess for an Invoice class becomes "myapp_invoices".\nInvoice::Lineitem becomes "myapp_invoice_lineitems".\n\nYou can also overwrite this class method to allow for unguessable\nlinks, such as a Mouse class with a link to a "mice" table. Example:\n\n  class Mouse < ActiveRecord::Base\n    set_table_name "mice"\n  end\n
table_name_prefix ActiveRecord::Base.table_name_prefix\nAccessor for the name of the prefix string to prepend to every table name. So\nif set\nto "basecamp_", all table names will be named like "basecamp_projects",\n"basecamp_people",\netc. This is a convenient way of creating a namespace for tables in a shared\ndatabase.\nBy default, the prefix is the empty string.\n\nIf you are organising your models within modules you can add a prefix to\nthe models within\na namespace by defining a singleton method in the parent module called\ntable_name_prefix which\nreturns your chosen prefix.\n
table_name_suffix ActiveRecord::Base.table_name_suffix\nWorks like +table_name_prefix+, but appends instead of prepends (set to\n"_basecamp" gives "projects_basecamp",\n"people_basecamp"). By default, the suffix is the empty string.\n
timestamped_migrations ActiveRecord::Base.timestamped_migrations\nSpecify whether or not to use timestamps for migration versions\n
type_condition ActiveRecord::Base.type_condition()\n\n
undecorated_table_name ActiveRecord::Base.undecorated_table_name(class_name = base_class.name)\nGuesses the table name, but does not decorate it with prefix and suffix\ninformation.\n
with_exclusive_scope ActiveRecord::Base.with_exclusive_scope(method_scoping = {}, &block)\nWorks like with_scope, but discards any nested properties.\n
with_scope ActiveRecord::Base.with_scope(method_scoping = {}, action = :merge, &block)\nwith_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be\n<tt>:find</tt> or <tt>:create</tt>. <tt>:find</tt> parameter is\n<tt>Relation</tt> while\n<tt>:create</tt> parameters are an attributes hash.\n\n  class Article < ActiveRecord::Base\n    def self.create_with_scope\n      with_scope(:find => where(:blog_id => 1), :create => { :blog_id =>\n      1 }) do\n        find(1) # => SELECT * from articles WHERE blog_id = 1 AND id = 1\n        a = create(1)\n        a.blog_id # => 1\n      end\n    end\n  end\n\nIn nested scopings, all previous parameters are overwritten by the innermost\nrule, with the exception of\n<tt>where</tt>, <tt>includes</tt>, and <tt>joins</tt> operations in\n<tt>Relation</tt>, which are merged.\n\n<tt>joins</tt> operations are uniqued so multiple scopes can join in the\nsame table without table aliasing\nproblems.  If you need to join multiple tables, but still want one of the\ntables to be uniqued, use the\narray of strings format for your joins.\n\n  class Article < ActiveRecord::Base\n    def self.find_with_scope\n      with_scope(:find => where(:blog_id => 1).limit(1), :create => {\n      :blog_id => 1 }) do\n        with_scope(:find => limit(10)) do\n          all # => SELECT * from articles WHERE blog_id = 1 LIMIT 10\n        end\n        with_scope(:find => where(:author_id => 3)) do\n          all # => SELECT * from articles WHERE blog_id = 1 AND author_id =\n          3 LIMIT 1\n        end\n      end\n    end\n  end\n\nYou can ignore any previous scopings by using the <tt>with_exclusive_scope</tt>\nmethod.\n\n  class Article < ActiveRecord::Base\n    def self.find_with_exclusive_scope\n      with_scope(:find => where(:blog_id => 1).limit(1)) do\n        with_exclusive_scope(:find => limit(10)) do\n          all # => SELECT * from articles LIMIT 10\n        end\n      end\n    end\n  end\n\n*Note*: the +:find+ scope also has effect on update and deletion methods,\nlike +update_all+ and +delete_all+.\n
arel_attributes_values ActiveRecord::Base.arel_attributes_values(include_primary_key = true,\ninclude_readonly_attributes = true, attribute_names = @attributes.keys)\nReturns a copy of the attributes hash where all the values have been safely\nquoted for use in\nan Arel insert/update method.\n
assign_multiparameter_attributes ActiveRecord::Base.assign_multiparameter_attributes(pairs)\nInstantiates objects for all attribute classes that needs more than one\nconstructor parameter. This is done\nby calling new on the column type or aggregation type (through composed_of)\nobject with these parameters.\nSo having the pairs written_on(1) = "2004", written_on(2) = "6", written_on(3)\n= "24", will instantiate\nwritten_on (a date type) with Date.new("2004", "6", "24"). You can also\nspecify a typecast character in the\nparentheses to have the parameters typecasted before they're used in the\nconstructor. Use i for Fixnum,\nf for Float, s for String, and a for Array. If all the values for a given\nattribute are empty, the\nattribute will be set to nil.\n
attribute_for_inspect ActiveRecord::Base.attribute_for_inspect(attr_name)\nReturns an <tt>#inspect</tt>-like string for the value of the\nattribute +attr_name+. String attributes are elided after 50\ncharacters, and Date and Time attributes are returned in the\n<tt>:db</tt> format. Other attributes return the value of\n<tt>#inspect</tt> without modification.\n\n  person = Person.create!(:name => "David Heinemeier Hansson " * 3)\n\n  person.attribute_for_inspect(:name)\n => '"David Heinemeier Hansson David Heinemeier Hansson D..."'\n\n  person.attribute_for_inspect(:created_at)\n => '"2009-01-12 04:48:57"'\n
attribute_names ActiveRecord::Base.attribute_names()\nReturns an array of names for the attributes available on this object sorted\nalphabetically.\n
attribute_present? ActiveRecord::Base.attribute_present?(attribute)\nReturns true if the specified +attribute+ has been set by the user or by a\ndatabase load and is neither\nnil nor empty? (the latter only applies to objects that respond to empty?,\nmost notably Strings).\n
attributes ActiveRecord::Base.attributes()\nReturns a hash of all the attributes with their names as keys and the values\nof the attributes as values.\n
attributes= ActiveRecord::Base.attributes=(new_attributes, guard_protected_attributes\n= true)\nAllows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names (which again matches the column names).\n\nIf +guard_protected_attributes+ is true (the default), then sensitive\nattributes can be protected from this form of mass-assignment by using\nthe +attr_protected+ macro. Or you can alternatively specify which\nattributes *can* be accessed with the +attr_accessible+ macro. Then all the\nattributes not included in that won't be allowed to be mass-assigned.\n\n  class User < ActiveRecord::Base\n    attr_protected :is_admin\n  end\n\n  user = User.new\n  user.attributes = { :username => 'Phusion', :is_admin => true }\n  user.username   # => "Phusion"\n  user.is_admin?  # => false\n\n  user.send(:attributes=, { :username => 'Phusion', :is_admin => true }, false)\n  user.is_admin?  # => true\n
cache_key ActiveRecord::Base.cache_key()\nReturns a cache key that can be used to identify this record.\n\n==== Examples\n\n  Product.new.cache_key     # => "products/new"\n  Product.find(5).cache_key # => "products/5" (updated_at not available)\n  Person.find(5).cache_key  # => "people/5-20071224150000" (updated_at\n  available)\n
clone_attribute_value ActiveRecord::Base.clone_attribute_value(reader_method, attribute_name)\n\n
clone_attributes ActiveRecord::Base.clone_attributes(reader_method = :read_attribute,\nattributes = {})\n\n
column_for_attribute ActiveRecord::Base.column_for_attribute(name)\nReturns the column object for the named attribute.\n
comma_pair_list ActiveRecord::Base.comma_pair_list(hash)\nReturns a comma-separated pair list, like "key1 = val1, key2 = val2".\n
connection ActiveRecord::Base.connection()\nReturns the connection currently associated with the class. This can\nalso be used to "borrow" the connection to do database work that isn't\neasily done without going straight to SQL.\n
convert_number_column_value ActiveRecord::Base.convert_number_column_value(value)\n\n
dup ActiveRecord::Base.dup()\nReturns duplicated record with unfreezed attributes.\n
ensure_proper_type ActiveRecord::Base.ensure_proper_type()\nSets the attribute used for single table inheritance to this class name if\nthis is not the\nActiveRecord::Base descendant.\nConsidering the hierarchy Reply < Message < ActiveRecord::Base, this makes\nit possible to\ndo Reply.new without having to set <tt>Reply[Reply.inheritance_column] =\n"Reply"</tt> yourself.\nNo such attribute would be set for objects of the Message class in that\nexample.\n
eql? ActiveRecord::Base.eql?(comparison_object)\nDelegates to ==\n
execute_callstack_for_multiparameter_attributes ActiveRecord::Base.execute_callstack_for_multiparameter_attributes(callstack)\n\n
extract_callstack_for_multiparameter_attributes ActiveRecord::Base.extract_callstack_for_multiparameter_attributes(pairs)\n\n
find_parameter_position ActiveRecord::Base.find_parameter_position(multiparameter_name)\n\n
freeze ActiveRecord::Base.freeze()\nFreeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n
frozen? ActiveRecord::Base.frozen?()\nReturns +true+ if the attributes hash has been frozen.\n
has_attribute? ActiveRecord::Base.has_attribute?(attr_name)\nReturns true if the given attribute is in the attributes hash\n
hash ActiveRecord::Base.hash()\nDelegates to id in order to allow two records of the same type and id to\nwork with something like:\n  [ Person.find(1), Person.find(2), Person.find(3) ] & [ Person.find(1),\n  Person.find(4) ] # => [ Person.find(1) ]\n
init_with ActiveRecord::Base.init_with(coder)\nInitialize an empty model object from +coder+.  +coder+ must contain\nthe attributes necessary for initializing an empty model object.  For\nexample:\n\n  class Post < ActiveRecord::Base\n  end\n\n  post = Post.allocate\n  post.init_with('attributes' => { 'title' => 'hello world' })\n  post.title # => 'hello world'\n
initialize_copy ActiveRecord::Base.initialize_copy(other)\nCloned objects have no id assigned and are treated as new records. Note that\nthis is a "shallow" clone\nas it copies the object's attributes only, not its associations. The extent\nof a "deep" clone is\napplication specific and is therefore left to the application to implement\naccording to its need.\n
inspect ActiveRecord::Base.inspect()\nReturns the contents of the record as a nicely formatted string.\n
instantiate_time_object ActiveRecord::Base.instantiate_time_object(name, values)\n\n
interpolate_sql ActiveRecord::Base.interpolate_sql(sql, record = nil)\nInterpolate custom SQL string in instance context.\nOptional record argument is meant for custom insert_sql.\n
object_from_yaml ActiveRecord::Base.object_from_yaml(string)\n\n
populate_with_current_scope_attributes ActiveRecord::Base.populate_with_current_scope_attributes()\n\n
quote_columns ActiveRecord::Base.quote_columns(quoter, hash)\n\n
quote_value ActiveRecord::Base.quote_value(value, column = nil)\nQuote strings appropriately for SQL statements.\n
quoted_comma_pair_list ActiveRecord::Base.quoted_comma_pair_list(quoter, hash)\n\n
readonly! ActiveRecord::Base.readonly!()\nMarks this record as read only.\n
readonly? ActiveRecord::Base.readonly?()\nReturns +true+ if the record is read only. Records loaded through joins\nwith piggy-back\nattributes will be marked as read only since they cannot be saved.\n
to_param ActiveRecord::Base.to_param()\nReturns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation returns this record's id as a String,\nor nil if this record's unsaved.\n\nFor example, suppose that you have a User model, and that you have a\n<tt>resources :users</tt> route. Normally, +user_path+ will\nconstruct a path with the user object's 'id' in it:\n\n  user = User.find_by_name('Phusion')\n  user_path(user)  # => "/users/1"\n\nYou can override +to_param+ in your model to make +user_path+ construct\na path using the user's name instead of the user's id:\n\n  class User < ActiveRecord::Base\n    def to_param  # overridden\n      name\n    end\n  end\n\n  user = User.find_by_name('Phusion')\n  user_path(user)  # => "/users/Phusion"\n
type_cast_attribute_value ActiveRecord::Base.type_cast_attribute_value(multiparameter_name, value)\n\n
match ActiveRecord::DynamicScopeMatch.match(method)\n\n
new ActiveRecord::DynamicScopeMatch.new(scope, attribute_names)\n\n
cache_fixtures Fixtures.cache_fixtures(connection, fixtures_map)\n\n
cache_for_connection Fixtures.cache_for_connection(connection)\n\n
cached_fixtures Fixtures.cached_fixtures(connection, keys_to_fetch = nil)\n\n
create_fixtures Fixtures.create_fixtures(fixtures_directory, table_names, class_names = {})\n\n
fixture_is_cached? Fixtures.fixture_is_cached?(connection, table_name)\n\n
identify Fixtures.identify(label)\nReturns a consistent, platform-independent identifier for +label+.\nIdentifiers are positive integers less than 2^32.\n
instantiate_all_loaded_fixtures Fixtures.instantiate_all_loaded_fixtures(object, load_instances = true)\n\n
instantiate_fixtures Fixtures.instantiate_fixtures(object, table_name, fixtures, load_instances\n= true)\n\n
new Fixtures.new(connection, table_name, class_name, fixture_path, file_filter =\nDEFAULT_FILTER_RE)\n\n
reset_cache Fixtures.reset_cache(connection = nil)\n\n
column_names Fixtures.column_names()\n\n
csv_file_path Fixtures.csv_file_path()\n\n
delete_existing_fixtures Fixtures.delete_existing_fixtures()\n\n
erb_render Fixtures.erb_render(fixture_content)\n\n
has_primary_key_column? Fixtures.has_primary_key_column?()\n\n
inheritance_column_name Fixtures.inheritance_column_name()\n\n
insert_fixtures Fixtures.insert_fixtures()\n\n
model_class Fixtures.model_class()\n\n
parse_yaml_string Fixtures.parse_yaml_string(fixture_content)\n\n
primary_key_name Fixtures.primary_key_name()\n\n
read_csv_fixture_files Fixtures.read_csv_fixture_files()\n\n
read_fixture_files Fixtures.read_fixture_files()\n\n
read_yaml_fixture_files Fixtures.read_yaml_fixture_files()\n\n
timestamp_column_names Fixtures.timestamp_column_names()\n\n
yaml_file_path Fixtures.yaml_file_path()\n\n
yaml_fixtures_key Fixtures.yaml_fixtures_key(path)\n\n
new ActiveRecord::QueryCache.new(app)\n\n
call ActiveRecord::QueryCache.call(env)\n\n
destroy ActiveRecord::SessionStore.destroy(env)\n\n
find_session ActiveRecord::SessionStore.find_session(id)\n\n
get_session ActiveRecord::SessionStore.get_session(env, sid)\n\n
get_session_model ActiveRecord::SessionStore.get_session_model(env, sid)\n\n
set_session ActiveRecord::SessionStore.set_session(env, sid, session_data)\n\n
data_column_name ActiveRecord::SessionStore::Session.data_column_name\nCustomizable data column name.  Defaults to 'data'.\n
data_column_size_limit ActiveRecord::SessionStore::Session.data_column_size_limit()\n\n
find_by_session_id ActiveRecord::SessionStore::Session.find_by_session_id(session_id)\nHook to set up sessid compatibility.\n
find_by_session_id ActiveRecord::SessionStore::Session.find_by_session_id(*args)\n\n
find_by_session_id ActiveRecord::SessionStore::Session.find_by_session_id(session_id)\n\n
new ActiveRecord::SessionStore::Session.new(attributes = nil)\n\n
session_id_column ActiveRecord::SessionStore::Session.session_id_column()\n\n
setup_sessid_compatibility! ActiveRecord::SessionStore::Session.setup_sessid_compatibility!()\nCompatibility with tables using sessid instead of session_id.\n
data ActiveRecord::SessionStore::Session.data()\nLazy-unmarshal session state.\n
loaded? ActiveRecord::SessionStore::Session.loaded?()\nHas the session been loaded yet?\n
marshal_data! ActiveRecord::SessionStore::Session.marshal_data!()\n\n
raise_on_session_data_overflow! ActiveRecord::SessionStore::Session.raise_on_session_data_overflow!()\nEnsures that the data about to be stored in the database is not\nlarger than the data storage column. Raises\nActionController::SessionOverflowError.\n
connection ActiveRecord::SessionStore::SqlBypass.connection\nUse the ActiveRecord::Base.connection by default.\n
connection ActiveRecord::SessionStore::SqlBypass.connection()\n\n
data_column ActiveRecord::SessionStore::SqlBypass.data_column\nThe data field defaults to 'data'.\n
find_by_session_id ActiveRecord::SessionStore::SqlBypass.find_by_session_id(session_id)\nLook up a session by id and unmarshal its data if found.\n
new ActiveRecord::SessionStore::SqlBypass.new(attributes)\nLook for normal and marshaled data, self.find_by_session_id's way of\ntelling us to postpone unmarshaling until the data is requested.\nWe need to handle a normal data attribute in case of a new record.\n
session_id_column ActiveRecord::SessionStore::SqlBypass.session_id_column\nThe session id field defaults to 'session_id'.\n
table_name ActiveRecord::SessionStore::SqlBypass.table_name\nThe table name defaults to 'sessions'.\n
data ActiveRecord::SessionStore::SqlBypass.data()\nLazy-unmarshal session state.\n
destroy ActiveRecord::SessionStore::SqlBypass.destroy()\n\n
loaded? ActiveRecord::SessionStore::SqlBypass.loaded?()\n\n
save ActiveRecord::SessionStore::SqlBypass.save()\n\n
find_target ActiveRecord::Associations::HasOneThroughAssociation.find_target()\n\n
replace ActiveRecord::Associations::HasOneThroughAssociation.replace(new_value)\n\n
match ActiveRecord::DynamicFinderMatch.match(method)\n\n
new ActiveRecord::DynamicFinderMatch.new(finder, instantiator, bang,\nattribute_names)\n\n
bang? ActiveRecord::DynamicFinderMatch.bang?()\n\n
creator? ActiveRecord::DynamicFinderMatch.creator?()\n\n
finder? ActiveRecord::DynamicFinderMatch.finder?()\n\n
instantiator? ActiveRecord::DynamicFinderMatch.instantiator?()\n\n
new ActiveRecord::ConnectionAdapters::TableDefinition.new(base)\n\n
belongs_to ActiveRecord::ConnectionAdapters::TableDefinition.belongs_to(*args)\n\n
column ActiveRecord::ConnectionAdapters::TableDefinition.column(name, type, options\n= {})\nInstantiates a new column for the table.\nThe +type+ parameter is normally one of the migrations native types,\nwhich is one of the following:\n<tt>:primary_key</tt>, <tt>:string</tt>, <tt>:text</tt>,\n<tt>:integer</tt>, <tt>:float</tt>, <tt>:decimal</tt>,\n<tt>:datetime</tt>, <tt>:timestamp</tt>, <tt>:time</tt>,\n<tt>:date</tt>, <tt>:binary</tt>, <tt>:boolean</tt>.\n\nYou may use a type not in this list as long as it is supported by your\ndatabase (for example, "polygon" in MySQL), but this will not be database\nagnostic and should usually be avoided.\n\nAvailable options are (none of these exists by default):\n* <tt>:limit</tt> -\n  Requests a maximum column length. This is number of characters for\n  <tt>:string</tt> and\n  <tt>:text</tt> columns and number of bytes for :binary and :integer columns.\n* <tt>:default</tt> -\n  The column's default value. Use nil for NULL.\n* <tt>:null</tt> -\n  Allows or disallows +NULL+ values in the column. This option could\n  have been named <tt>:null_allowed</tt>.\n* <tt>:precision</tt> -\n  Specifies the precision for a <tt>:decimal</tt> column.\n* <tt>:scale</tt> -\n  Specifies the scale for a <tt>:decimal</tt> column.\n\nFor clarity's sake: the precision is the number of significant digits,\nwhile the scale is the number of digits that can be stored following\nthe decimal point. For example, the number 123.45 has a precision of 5\nand a scale of 2. A decimal with a precision of 5 and a scale of 2 can\nrange from -999.99 to 999.99.\n\nPlease be aware of different RDBMS implementations behavior with\n<tt>:decimal</tt> columns:\n* The SQL standard says the default scale should be 0, <tt>:scale</tt> <=\n  <tt>:precision</tt>, and makes no comments about the requirements of\n  <tt>:precision</tt>.\n* MySQL: <tt>:precision</tt> [1..63], <tt>:scale</tt> [0..30].\n  Default is (10,0).\n* PostgreSQL: <tt>:precision</tt> [1..infinity],\n  <tt>:scale</tt> [0..infinity]. No default.\n* SQLite2: Any <tt>:precision</tt> and <tt>:scale</tt> may be used.\n  Internal storage as strings. No default.\n* SQLite3: No restrictions on <tt>:precision</tt> and <tt>:scale</tt>,\n  but the maximum supported <tt>:precision</tt> is 16. No default.\n* Oracle: <tt>:precision</tt> [1..38], <tt>:scale</tt> [-84..127].\n  Default is (38,0).\n* DB2: <tt>:precision</tt> [1..63], <tt>:scale</tt> [0..62].\n  Default unknown.\n* Firebird: <tt>:precision</tt> [1..18], <tt>:scale</tt> [0..18].\n  Default (9,0). Internal types NUMERIC and DECIMAL have different\n  storage rules, decimal being better.\n* FrontBase?: <tt>:precision</tt> [1..38], <tt>:scale</tt> [0..38].\n  Default (38,0). WARNING Max <tt>:precision</tt>/<tt>:scale</tt> for\n  NUMERIC is 19, and DECIMAL is 38.\n* SqlServer?: <tt>:precision</tt> [1..38], <tt>:scale</tt> [0..38].\n  Default (38,0).\n* Sybase: <tt>:precision</tt> [1..38], <tt>:scale</tt> [0..38].\n  Default (38,0).\n* OpenBase?: Documentation unclear. Claims storage in <tt>double</tt>.\n\nThis method returns <tt>self</tt>.\n\n== Examples\n Assuming td is an instance of TableDefinition\n td.column(:granted, :boolean)\n granted BOOLEAN\n\n td.column(:picture, :binary, :limit => 2.megabytes)\n => picture BLOB(2097152)\n\n td.column(:sales_stage, :string, :limit => 20, :default => 'new', :null\n => false)\n => sales_stage VARCHAR(20) DEFAULT 'new' NOT NULL\n\n td.column(:bill_gates_money, :decimal, :precision => 15, :scale => 2)\n => bill_gates_money DECIMAL(15,2)\n\n td.column(:sensor_reading, :decimal, :precision => 30, :scale => 20)\n => sensor_reading DECIMAL(30,20)\n While <tt>:scale</tt> defaults to zero on most databases, it\n probably wouldn't hurt to include it.\n td.column(:huge_integer, :decimal, :precision => 30)\n => huge_integer DECIMAL(30)\n Defines a column with a database-specific type.\n td.column(:foo, 'polygon')\n => foo polygon\n\n== Short-hand examples\n\nInstead of calling +column+ directly, you can also work with the short-hand\ndefinitions for the default types.\nThey use the type as the method name instead of as a parameter and allow\nfor multiple columns to be defined\nin a single statement.\n\nWhat can be written like this with the regular calls to column:\n\n  create_table "products", :force => true do |t|\n    t.column "shop_id",    :integer\n    t.column "creator_id", :integer\n    t.column "name",       :string,   :default => "Untitled"\n    t.column "value",      :string,   :default => "Untitled"\n    t.column "created_at", :datetime\n    t.column "updated_at", :datetime\n  end\n\nCan also be written as follows using the short-hand:\n\n  create_table :products do |t|\n    t.integer :shop_id, :creator_id\n    t.string  :name, :value, :default => "Untitled"\n    t.timestamps\n  end\n\nThere's a short-hand method for each of the type values declared at the\ntop. And then there's\nTableDefinition#timestamps that'll add created_at and +updated_at+ as\ndatetimes.\n\nTableDefinition#references will add an appropriately-named _id column,\nplus a corresponding _type\ncolumn if the <tt>:polymorphic</tt> option is supplied. If\n<tt>:polymorphic</tt> is a hash of\noptions, these will be used when creating the <tt>_type</tt> column. So what\ncan be written like this:\n\n  create_table :taggings do |t|\n    t.integer :tag_id, :tagger_id, :taggable_id\n    t.string  :tagger_type\n    t.string  :taggable_type, :default => 'Photo'\n  end\n\nCan also be written as follows using references:\n\n  create_table :taggings do |t|\n    t.references :tag\n    t.references :tagger, :polymorphic => true\n    t.references :taggable, :polymorphic => { :default => 'Photo' }\n  end\n
method_missing ActiveRecord::ConnectionAdapters::TableDefinition.method_missing(symbol, *args)\nHandles non supported datatypes - e.g. XML\n
native ActiveRecord::ConnectionAdapters::TableDefinition.native()\n\n
primary_key ActiveRecord::ConnectionAdapters::TableDefinition.primary_key(name)\nAppends a primary key definition to the table definition.\nCan be called multiple times, but this is probably not a good idea.\n
references ActiveRecord::ConnectionAdapters::TableDefinition.references(*args)\n\n
timestamps ActiveRecord::ConnectionAdapters::TableDefinition.timestamps(*args)\nAppends <tt>:datetime</tt> columns <tt>:created_at</tt> and\n<tt>:updated_at</tt> to the table.\n
to_sql ActiveRecord::ConnectionAdapters::TableDefinition.to_sql()\nReturns a String whose contents are the column definitions\nconcatenated together. This string can then be prepended and appended to\nto generate the final SQL to create the table.\n
xml ActiveRecord::ConnectionAdapters::TableDefinition.xml(*args)\n\n
xml_column_fallback ActiveRecord::ConnectionAdapters::TableDefinition.xml_column_fallback(*args)\n\n
extract_value_from_default ActiveRecord::ConnectionAdapters::PostgreSQLColumn.extract_value_from_default(default)\nExtracts the value from a PostgreSQL column default definition.\n
extract_limit ActiveRecord::ConnectionAdapters::PostgreSQLColumn.extract_limit(sql_type)\n\n
extract_precision ActiveRecord::ConnectionAdapters::PostgreSQLColumn.extract_precision(sql_type)\nExtracts the precision from PostgreSQL-specific data types.\n
extract_scale ActiveRecord::ConnectionAdapters::PostgreSQLColumn.extract_scale(sql_type)\nExtracts the scale from PostgreSQL-specific data types.\n
simplified_type ActiveRecord::ConnectionAdapters::PostgreSQLColumn.simplified_type(field_type)\nMaps PostgreSQL-specific data types to logical Rails types.\n
new ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.new(connection, logger,\nconnection_parameters, config)\nInitializes and connects a PostgreSQL adapter.\n
active? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.active?()\nIs this connection alive and ready for queries?\n
adapter_name ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.adapter_name()\nReturns 'PostgreSQL' as adapter name for identification purposes.\n
add_column ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.add_column(table_name,\ncolumn_name, type, options = {})\nAdds a new column to the named table.\nSee TableDefinition#column for details of the options you can use.\n
begin_db_transaction ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.begin_db_transaction()\nBegins a transaction.\n
change_column ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.change_column(table_name,\ncolumn_name, type, options = {})\nChanges the column of a table.\n
change_column_default ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.change_column_default(table_name,\ncolumn_name, default)\nChanges the default value of a table column.\n
change_column_null ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.change_column_null(table_name,\ncolumn_name, null, default = nil)\n\n
client_min_messages ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.client_min_messages()\nReturns the current client message level.\n
client_min_messages= ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.client_min_messages=(level)\nSet the client message level.\n
columns ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.columns(table_name,\nname = nil)\nReturns the list of all column definitions for a table.\n
commit_db_transaction ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.commit_db_transaction()\nCommits a transaction.\n
configure_connection ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.configure_connection()\nConfigures the encoding, verbosity, schema search path, and time zone of\nthe connection.\nThis is called by #connect and should not be called manually.\n
connect ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.connect()\nConnects to a PostgreSQL server and sets up the adapter depending on the\nconnected server's characteristics.\n
create ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.create(sql, name = nil,\npk = nil, id_value = nil, sequence_name = nil)\n\n
create_database ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.create_database(name,\noptions = {})\nCreate a new PostgreSQL database.  Options include <tt>:owner</tt>,\n<tt>:template</tt>,\n<tt>:encoding</tt>, <tt>:tablespace</tt>, and <tt>:connection_limit</tt>\n(note that MySQL uses\n<tt>:charset</tt> while PostgreSQL uses <tt>:encoding</tt>).\n\nExample:\n  create_database config[:database], config\n  create_database 'foo_development', :encoding => 'unicode'\n
create_savepoint ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.create_savepoint()\n\n
current_database ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.current_database()\nReturns the current database name.\n
disconnect! ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.disconnect!()\nClose the connection.\n
encoding ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.encoding()\nReturns the current database encoding format.\n
escape_bytea ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.escape_bytea(value)\nEscapes binary strings for bytea input to the database.\n
execute ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.execute(sql, name = nil)\nExecutes an SQL statement, returning a PGresult object on success\nor raising a PGError exception otherwise.\n
extract_pg_identifier_from_name ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.extract_pg_identifier_from_name(name)\n\n
index_name_length ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.index_name_length()\n\n
indexes ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.indexes(table_name,\nname = nil)\nReturns the list of all indexes for a table.\n
insert ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.insert(sql, name = nil,\npk = nil, id_value = nil, sequence_name = nil)\nExecutes an INSERT query and returns the new record's ID\n
outside_transaction? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.outside_transaction?()\n\n
postgresql_version ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.postgresql_version()\nReturns the version of the connected PostgreSQL version.\n
primary_key ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.primary_key(table)\nReturns just a table's primary key\n
quote_table_name ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.quote_table_name(name)\nChecks the following cases:\n\n- table_name\n- "table.name"\n- schema_name.table_name\n- schema_name."table.name"\n- "schema.name".table_name\n- "schema.name"."table.name"\n
reconnect! ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.reconnect!()\nClose then reopen the connection.\n
release_savepoint ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.release_savepoint()\n\n
rename_column ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.rename_column(table_name,\ncolumn_name, new_column_name)\nRenames a column in a table.\n
rename_table ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.rename_table(name,\nnew_name)\nRenames a table.\n
rollback_db_transaction ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.rollback_db_transaction()\nAborts a transaction.\n
rollback_to_savepoint ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.rollback_to_savepoint()\n\n
schema_search_path ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.schema_search_path()\nReturns the active schema search path.\n
schema_search_path= ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.schema_search_path=(schema_csv)\nSets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have to be quoted (e.g. $user => '$user').\nSee: http://www.postgresql.org/docs/current/static/ddl-schemas.html\n\nThis should be not be called manually but set in database.yml.\n
select ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.select(sql, name = nil)\nExecutes a SELECT query and returns the results, performing any data type\nconversions that are required to be performed here instead of in\nPostgreSQLColumn.\n
select_raw ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.select_raw(sql, name = nil)\n\n
select_rows ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.select_rows(sql, name\n= nil)\nExecutes a SELECT query and returns an array of rows. Each row is an\narray of field values.\n
set_standard_conforming_strings ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.set_standard_conforming_strings()\nEnable standard-conforming strings if available.\n
supports_ddl_transactions? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.supports_ddl_transactions?()\n\n
supports_insert_with_returning? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.supports_insert_with_returning?()\n\n
supports_migrations? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.supports_migrations?()\nDoes PostgreSQL support migrations?\n
supports_savepoints? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.supports_savepoints?()\n\n
table_alias_length ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.table_alias_length()\nReturns the configured supported identifier length supported by PostgreSQL,\nor report the default of 63 on PostgreSQL 7.x.\n
table_exists? ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.table_exists?(name)\n\n
tables ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.tables(name = nil)\nReturns the list of all tables in the schema search path or a specified schema.\n
translate_exception ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.translate_exception(exception,\nmessage)\n\n
type_to_sql ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.type_to_sql(type, limit =\nnil, precision = nil, scale = nil)\nMaps logical Rails types to PostgreSQL-specific data types.\n
unescape_bytea ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.unescape_bytea(value)\nUnescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse of escape_bytea! This is only to be used\n      on escaped binary output from database drive.\n
update_sql ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.update_sql(sql, name = nil)\nExecutes an UPDATE query and returns the number of affected tuples.\n
new ActiveRecord::ConnectionAdapters::SQLiteAdapter.new(connection, logger, config)\n\n
change_column_null ActiveRecord::ConnectionAdapters::SQLiteAdapter.change_column_null(table_name,\ncolumn_name, null, default = nil)\n\n
default_primary_key_type ActiveRecord::ConnectionAdapters::SQLiteAdapter.default_primary_key_type()\n\n
disconnect! ActiveRecord::ConnectionAdapters::SQLiteAdapter.disconnect!()\n\n
empty_insert_statement_value ActiveRecord::ConnectionAdapters::SQLiteAdapter.empty_insert_statement_value()\n\n
rename_table ActiveRecord::ConnectionAdapters::SQLiteAdapter.rename_table(name, new_name)\n\n
requires_reloading? ActiveRecord::ConnectionAdapters::SQLiteAdapter.requires_reloading?()\n\n
select_rows ActiveRecord::ConnectionAdapters::SQLiteAdapter.select_rows(sql, name = nil)\n\n
sqlite_version ActiveRecord::ConnectionAdapters::SQLiteAdapter.sqlite_version()\n\n
supports_add_column? ActiveRecord::ConnectionAdapters::SQLiteAdapter.supports_add_column?()\n\n
supports_ddl_transactions? ActiveRecord::ConnectionAdapters::SQLiteAdapter.supports_ddl_transactions?()\n\n
table_structure ActiveRecord::ConnectionAdapters::SQLiteAdapter.table_structure(table_name)\n\n
translate_exception ActiveRecord::ConnectionAdapters::SQLiteAdapter.translate_exception(exception,\nmessage)\n\n
valid_alter_table_options ActiveRecord::ConnectionAdapters::SQLiteAdapter.valid_alter_table_options(\ntype, options)\nSee: http://www.sqlite.org/lang_altertable.html\nSQLite has an additional restriction on the ALTER TABLE statement\n
new ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version.new(version_string)\n\n
active? ActiveRecord::ConnectionAdapters::AbstractAdapter.active?()\nChecks whether the connection to the database is still active. This includes\nchecking whether the database is actually capable of responding, i.e. whether\nthe connection isn't stale.\n
adapter_name ActiveRecord::ConnectionAdapters::AbstractAdapter.adapter_name()\nReturns the human-readable name of the adapter.  Use mixed case - one\ncan always use downcase if needed.\n
create_savepoint ActiveRecord::ConnectionAdapters::AbstractAdapter.create_savepoint()\n\n
current_savepoint_name ActiveRecord::ConnectionAdapters::AbstractAdapter.current_savepoint_name()\n\n
decrement_open_transactions ActiveRecord::ConnectionAdapters::AbstractAdapter.decrement_open_transactions()\n\n
disable_referential_integrity ActiveRecord::ConnectionAdapters::AbstractAdapter.disable_referential_integrity()\nOverride to turn off referential integrity while executing <tt>&block</tt>.\n
disconnect! ActiveRecord::ConnectionAdapters::AbstractAdapter.disconnect!()\nDisconnects from the database if already connected. Otherwise, this\nmethod does nothing.\n
ids_in_list_limit ActiveRecord::ConnectionAdapters::AbstractAdapter.ids_in_list_limit()\nDoes this adapter restrict the number of ids you can use in a list. Oracle\nhas a limit of 1000.\n
increment_open_transactions ActiveRecord::ConnectionAdapters::AbstractAdapter.increment_open_transactions()\n\n
log ActiveRecord::ConnectionAdapters::AbstractAdapter.log(sql, name)\n\n
open_transactions ActiveRecord::ConnectionAdapters::AbstractAdapter.open_transactions()\n\n
prefetch_primary_key? ActiveRecord::ConnectionAdapters::AbstractAdapter.prefetch_primary_key?(table_name\n= nil)\nShould primary key values be selected from their corresponding\nsequence before the insert statement?  If true, next_sequence_value\nis called before each insert to set the record's primary key.\nThis is false for all adapters but Firebird.\n
quote_table_name ActiveRecord::ConnectionAdapters::AbstractAdapter.quote_table_name(name)\nOverride to return the quoted table name. Defaults to column quoting.\n
raw_connection ActiveRecord::ConnectionAdapters::AbstractAdapter.raw_connection()\nProvides access to the underlying database driver for this adapter. For\nexample, this method returns a Mysql object in case of MysqlAdapter,\nand a PGconn object in case of PostgreSQLAdapter.\n\nThis is useful for when you need to call a proprietary method such as\nPostgreSQL's lo_* methods.\n
reconnect! ActiveRecord::ConnectionAdapters::AbstractAdapter.reconnect!()\nDisconnects from the database if already connected, and establishes a\nnew connection with the database.\n
release_savepoint ActiveRecord::ConnectionAdapters::AbstractAdapter.release_savepoint()\n\n
requires_reloading? ActiveRecord::ConnectionAdapters::AbstractAdapter.requires_reloading?()\nReturns true if its required to reload the connection between requests for\ndevelopment mode.\nThis is not the case for Ruby/MySQL and it's not necessary for any adapters\nexcept SQLite.\n
reset! ActiveRecord::ConnectionAdapters::AbstractAdapter.reset!()\nReset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related server-side state. Usually a\ndatabase-dependent operation.\n\nThe default implementation does nothing; the implementation should be\noverridden by concrete adapters.\n
rollback_to_savepoint ActiveRecord::ConnectionAdapters::AbstractAdapter.rollback_to_savepoint()\n\n
supports_count_distinct? ActiveRecord::ConnectionAdapters::AbstractAdapter.supports_count_distinct?()\nDoes this adapter support using DISTINCT within COUNT?  This is +true+\nfor all adapters except sqlite.\n
supports_ddl_transactions? ActiveRecord::ConnectionAdapters::AbstractAdapter.supports_ddl_transactions?()\nDoes this adapter support DDL rollbacks in transactions?  That is, would\nCREATE TABLE or ALTER TABLE get rolled back by a transaction?  PostgreSQL,\nSQL Server, and others support this.  MySQL and others do not.\n
supports_migrations? ActiveRecord::ConnectionAdapters::AbstractAdapter.supports_migrations?()\nDoes this adapter support migrations?  Backend specific, as the\nabstract adapter always returns +false+.\n
supports_primary_key? ActiveRecord::ConnectionAdapters::AbstractAdapter.supports_primary_key?()\nCan this adapter determine the primary key for tables not attached\nto an Active Record class, such as join tables?  Backend specific, as\nthe abstract adapter always returns +false+.\n
supports_savepoints? ActiveRecord::ConnectionAdapters::AbstractAdapter.supports_savepoints?()\nDoes this adapter support savepoints? PostgreSQL and MySQL do, SQLite\ndoes not.\n
transaction_joinable= ActiveRecord::ConnectionAdapters::AbstractAdapter.transaction_joinable=(joinable)\n\n
translate_exception ActiveRecord::ConnectionAdapters::AbstractAdapter.translate_exception(e,\nmessage)\n\n
verify! ActiveRecord::ConnectionAdapters::AbstractAdapter.verify!(*ignored)\nChecks whether the connection to the database is still active (i.e. not stale).\nThis is done under the hood by calling <tt>active?</tt>. If the connection\nis no longer active, then this method will reconnect to the database.\n
emulate_booleans ActiveRecord::ConnectionAdapters::MysqlAdapter.emulate_booleans\nBy default, the MysqlAdapter will consider all columns of type\n<tt>tinyint(1)</tt>\nas boolean. If you wish to disable this emulation (which was the default\nbehavior in versions 0.13.1 and earlier) you can add the following line\nto your application.rb file:\n\n  ActiveRecord::ConnectionAdapters::MysqlAdapter.emulate_booleans = false\n
new ActiveRecord::ConnectionAdapters::MysqlAdapter.new(connection, logger,\nconnection_options, config)\n\n
active? ActiveRecord::ConnectionAdapters::MysqlAdapter.active?()\nCONNECTION MANAGEMENT ====================================\n
add_column ActiveRecord::ConnectionAdapters::MysqlAdapter.add_column(table_name,\ncolumn_name, type, options = {})\n\n
add_column_position! ActiveRecord::ConnectionAdapters::MysqlAdapter.add_column_position!(sql,\noptions)\n\n
case_sensitive_equality_operator ActiveRecord::ConnectionAdapters::MysqlAdapter.case_sensitive_equality_operator()\n\n
change_column_null ActiveRecord::ConnectionAdapters::MysqlAdapter.change_column_null(table_name,\ncolumn_name, null, default = nil)\n\n
charset ActiveRecord::ConnectionAdapters::MysqlAdapter.charset()\nReturns the database character set.\n
collation ActiveRecord::ConnectionAdapters::MysqlAdapter.collation()\nReturns the database collation strategy.\n
column_for ActiveRecord::ConnectionAdapters::MysqlAdapter.column_for(table_name,\ncolumn_name)\n\n
configure_connection ActiveRecord::ConnectionAdapters::MysqlAdapter.configure_connection()\n\n
connect ActiveRecord::ConnectionAdapters::MysqlAdapter.connect()\n\n
create_database ActiveRecord::ConnectionAdapters::MysqlAdapter.create_database(name, options\n= {})\nCreate a new MySQL database with optional <tt>:charset</tt> and\n<tt>:collation</tt>.\nCharset defaults to utf8.\n\nExample:\n  create_database 'charset_test', :charset => 'latin1', :collation =>\n  'latin1_bin'\n  create_database 'matt_development'\n  create_database 'matt_development', :charset => :big5\n
create_savepoint ActiveRecord::ConnectionAdapters::MysqlAdapter.create_savepoint()\n\n
current_database ActiveRecord::ConnectionAdapters::MysqlAdapter.current_database()\n\n
disconnect! ActiveRecord::ConnectionAdapters::MysqlAdapter.disconnect!()\n\n
drop_table ActiveRecord::ConnectionAdapters::MysqlAdapter.drop_table(table_name,\noptions = {})\n\n
limited_update_conditions ActiveRecord::ConnectionAdapters::MysqlAdapter.limited_update_conditions(where_sql,\nquoted_table_name, quoted_primary_key)\n\n
primary_key ActiveRecord::ConnectionAdapters::MysqlAdapter.primary_key(table)\nReturns just a table's primary key\n
quote ActiveRecord::ConnectionAdapters::MysqlAdapter.quote(value, column = nil)\nQUOTING ==================================================\n
quoted_columns_for_index ActiveRecord::ConnectionAdapters::MysqlAdapter.quoted_columns_for_index(column_names,\noptions = {})\n\n
quoted_false ActiveRecord::ConnectionAdapters::MysqlAdapter.quoted_false()\n\n
quoted_true ActiveRecord::ConnectionAdapters::MysqlAdapter.quoted_true()\n\n
reconnect! ActiveRecord::ConnectionAdapters::MysqlAdapter.reconnect!()\n\n
release_savepoint ActiveRecord::ConnectionAdapters::MysqlAdapter.release_savepoint()\n\n
rename_table ActiveRecord::ConnectionAdapters::MysqlAdapter.rename_table(table_name,\nnew_name)\n\n
reset! ActiveRecord::ConnectionAdapters::MysqlAdapter.reset!()\n\n
rollback_to_savepoint ActiveRecord::ConnectionAdapters::MysqlAdapter.rollback_to_savepoint()\n\n
select ActiveRecord::ConnectionAdapters::MysqlAdapter.select(sql, name = nil)\n\n
select_rows ActiveRecord::ConnectionAdapters::MysqlAdapter.select_rows(sql, name = nil)\nDATABASE STATEMENTS ======================================\n
show_variable ActiveRecord::ConnectionAdapters::MysqlAdapter.show_variable(name)\nSHOW VARIABLES LIKE 'name'\n
supports_views? ActiveRecord::ConnectionAdapters::MysqlAdapter.supports_views?()\n\n
translate_exception ActiveRecord::ConnectionAdapters::MysqlAdapter.translate_exception(exception,\nmessage)\n\n
type_to_sql ActiveRecord::ConnectionAdapters::MysqlAdapter.type_to_sql(type, limit =\nnil, precision = nil, scale = nil)\nMaps logical Rails types to MySQL-specific data types.\n
version ActiveRecord::ConnectionAdapters::MysqlAdapter.version()\n\n
binary_to_string ActiveRecord::ConnectionAdapters::Column.binary_to_string(value)\nUsed to convert from BLOBs to Strings\n
fallback_string_to_date ActiveRecord::ConnectionAdapters::Column.fallback_string_to_date(string)\n\n
fallback_string_to_time ActiveRecord::ConnectionAdapters::Column.fallback_string_to_time(string)\n\n
fast_string_to_date ActiveRecord::ConnectionAdapters::Column.fast_string_to_date(string)\n\n
fast_string_to_time ActiveRecord::ConnectionAdapters::Column.fast_string_to_time(string)\nDoesn't handle time zones.\n
microseconds ActiveRecord::ConnectionAdapters::Column.microseconds(time)\n'0.123456' -> 123456\n'1.123456' -> 123456\n
new ActiveRecord::ConnectionAdapters::Column.new(name, default, sql_type = nil,\nnull = true)\nInstantiates a new column in the table.\n\n+name+ is the column's name, such as <tt>supplier_id</tt> in <tt>supplier_id\nint(11)</tt>.\n+default+ is the type-casted default value, such as +new+ in <tt>sales_stage\nvarchar(20) default 'new'</tt>.\n+sql_type+ is used to extract the column's length, if necessary. For example\n+60+ in\n<tt>company_name varchar(60)</tt>.\nIt will be mapped to one of the standard Rails SQL types in the <tt>type</tt>\nattribute.\n+null+ determines if this column allows +NULL+ values.\n
new_date ActiveRecord::ConnectionAdapters::Column.new_date(year, mon, mday)\n\n
new_time ActiveRecord::ConnectionAdapters::Column.new_time(year, mon, mday, hour,\nmin, sec, microsec)\n\n
string_to_binary ActiveRecord::ConnectionAdapters::Column.string_to_binary(value)\nUsed to convert from Strings to BLOBs\n
string_to_date ActiveRecord::ConnectionAdapters::Column.string_to_date(string)\n\n
string_to_dummy_time ActiveRecord::ConnectionAdapters::Column.string_to_dummy_time(string)\n\n
string_to_time ActiveRecord::ConnectionAdapters::Column.string_to_time(string)\n\n
value_to_boolean ActiveRecord::ConnectionAdapters::Column.value_to_boolean(value)\nconvert something to a boolean\n
value_to_decimal ActiveRecord::ConnectionAdapters::Column.value_to_decimal(value)\nconvert something to a BigDecimal\n
extract_default ActiveRecord::ConnectionAdapters::Column.extract_default(default)\n\n
extract_limit ActiveRecord::ConnectionAdapters::Column.extract_limit(sql_type)\n\n
extract_precision ActiveRecord::ConnectionAdapters::Column.extract_precision(sql_type)\n\n
extract_scale ActiveRecord::ConnectionAdapters::Column.extract_scale(sql_type)\n\n
has_default? ActiveRecord::ConnectionAdapters::Column.has_default?()\n\n
human_name ActiveRecord::ConnectionAdapters::Column.human_name()\nReturns the human name of the column name.\n\n===== Examples\n Column.new('sales_stage', ...).human_name # => 'Sales stage'\n
klass ActiveRecord::ConnectionAdapters::Column.klass()\nReturns the Ruby class that corresponds to the abstract data type.\n
number? ActiveRecord::ConnectionAdapters::Column.number?()\nReturns +true+ if the column is either of type integer, float or decimal.\n
simplified_type ActiveRecord::ConnectionAdapters::Column.simplified_type(field_type)\n\n
text? ActiveRecord::ConnectionAdapters::Column.text?()\nReturns +true+ if the column is either of type string or text.\n
type_cast ActiveRecord::ConnectionAdapters::Column.type_cast(value)\nCasts value (which is a String) to an appropriate instance.\n
type_cast_code ActiveRecord::ConnectionAdapters::Column.type_cast_code(var_name)\n\n
new ActiveRecord::ConnectionAdapters::Table.new(table_name, base)\n\n
belongs_to ActiveRecord::ConnectionAdapters::Table.belongs_to(*args)\n\n
change ActiveRecord::ConnectionAdapters::Table.change(column_name, type, options = {})\nChanges the column's definition according to the new options.\nSee TableDefinition#column for details of the options you can use.\n===== Examples\n t.change(:name, :string, :limit => 80)\n t.change(:description, :text)\n
change_default ActiveRecord::ConnectionAdapters::Table.change_default(column_name, default)\nSets a new default value for a column. See\nSchemaStatements#change_column_default\n===== Examples\n t.change_default(:qualification, 'new')\n t.change_default(:authorized, 1)\n
column ActiveRecord::ConnectionAdapters::Table.column(column_name, type, options = {})\nAdds a new column to the named table.\nSee TableDefinition#column for details of the options you can use.\n===== Example\n====== Creating a simple column\n t.column(:name, :string)\n
column_exists? ActiveRecord::ConnectionAdapters::Table.column_exists?(column_name, type =\nnil, options = nil)\nChecks to see if a column exists. See SchemaStatements#column_exists?\n
index ActiveRecord::ConnectionAdapters::Table.index(column_name, options = {})\nAdds a new index to the table. +column_name+ can be a single Symbol, or\nan Array of Symbols. See SchemaStatements#add_index\n\n===== Examples\n====== Creating a simple index\n t.index(:name)\n====== Creating a unique index\n t.index([:branch_id, :party_id], :unique => true)\n====== Creating a named index\n t.index([:branch_id, :party_id], :unique => true, :name => 'by_branch_party')\n
index_exists? ActiveRecord::ConnectionAdapters::Table.index_exists?(column_name, options\n= {})\nChecks to see if an index exists. See SchemaStatements#index_exists?\n
native ActiveRecord::ConnectionAdapters::Table.native()\n\n
references ActiveRecord::ConnectionAdapters::Table.references(*args)\nAdds a reference. Optionally adds a +type+ column.\n<tt>references</tt> and <tt>belongs_to</tt> are acceptable.\n===== Examples\n t.references(:goat)\n t.references(:goat, :polymorphic => true)\n t.belongs_to(:goat)\n
remove ActiveRecord::ConnectionAdapters::Table.remove(*column_names)\nRemoves the column(s) from the table definition.\n===== Examples\n t.remove(:qualification)\n t.remove(:qualification, :experience)\n
remove_belongs_to ActiveRecord::ConnectionAdapters::Table.remove_belongs_to(*args)\n\n
remove_index ActiveRecord::ConnectionAdapters::Table.remove_index(options = {})\nRemoves the given index from the table.\n\n===== Examples\n====== Remove the suppliers_name_index in the suppliers table\n  t.remove_index :name\n====== Remove the index named accounts_branch_id_index in the accounts table\n  t.remove_index :column => :branch_id\n====== Remove the index named accounts_branch_id_party_id_index in the\naccounts table\n  t.remove_index :column => [:branch_id, :party_id]\n====== Remove the index named by_branch_party in the accounts table\n  t.remove_index :name => :by_branch_party\n
remove_references ActiveRecord::ConnectionAdapters::Table.remove_references(*args)\nRemoves a reference. Optionally removes a +type+ column.\n<tt>remove_references</tt> and <tt>remove_belongs_to</tt> are acceptable.\n===== Examples\n t.remove_references(:goat)\n t.remove_references(:goat, :polymorphic => true)\n t.remove_belongs_to(:goat)\n
remove_timestamps ActiveRecord::ConnectionAdapters::Table.remove_timestamps()\nRemoves the timestamp columns (created_at and updated_at) from the table.\n===== Example\n t.remove_timestamps\n
rename ActiveRecord::ConnectionAdapters::Table.rename(column_name, new_column_name)\nRenames a column.\n===== Example\n t.rename(:description, :name)\n
timestamps ActiveRecord::ConnectionAdapters::Table.timestamps()\nAdds timestamps (created_at and updated_at) columns to the table. See\nSchemaStatements#add_timestamps\n===== Example\n t.timestamps\n
new ActiveRecord::ConnectionAdapters::ConnectionPool.new(spec)\nCreates a new ConnectionPool object. +spec+ is a ConnectionSpecification\nobject which describes database connection information (e.g. adapter,\nhost name, username, password, etc), as well as the maximum size for\nthis ConnectionPool.\n\nThe default ConnectionPool maximum size is 5.\n
checkin ActiveRecord::ConnectionAdapters::ConnectionPool.checkin(conn)\nCheck-in a database connection back into the pool, indicating that you\nno longer need this connection.\n\n+conn+: an AbstractAdapter object, which was obtained by earlier by\ncalling +checkout+ on this pool.\n
checkout ActiveRecord::ConnectionAdapters::ConnectionPool.checkout()\nCheck-out a database connection from the pool, indicating that you want\nto use it. You should call #checkin when you no longer need this.\n\nThis is done by either returning an existing connection, or by creating\na new connection. If the maximum number of connections for this pool has\nalready been reached, but the pool is empty (i.e. they're all being used),\nthen this method will wait until a thread has checked in a connection.\nThe wait time is bounded however: if no connection can be checked out\nwithin the timeout specified for this pool, then a ConnectionTimeoutError\nexception will be raised.\n\nReturns: an AbstractAdapter object.\n\nRaises:\n- ConnectionTimeoutError: no connection can be obtained from the pool\n  within the timeout period.\n
checkout_and_verify ActiveRecord::ConnectionAdapters::ConnectionPool.checkout_and_verify(c)\n\n
checkout_existing_connection ActiveRecord::ConnectionAdapters::ConnectionPool.checkout_existing_connection()\n\n
checkout_new_connection ActiveRecord::ConnectionAdapters::ConnectionPool.checkout_new_connection()\n\n
clear_reloadable_connections! ActiveRecord::ConnectionAdapters::ConnectionPool.clear_reloadable_connections!()\nClears the cache which maps classes\n
clear_stale_cached_connections! ActiveRecord::ConnectionAdapters::ConnectionPool.clear_stale_cached_connections!()\nReturn any checked-out connections back to the pool by threads that\nare no longer alive.\n
connected? ActiveRecord::ConnectionAdapters::ConnectionPool.connected?()\nReturns true if a connection has already been opened.\n
connection ActiveRecord::ConnectionAdapters::ConnectionPool.connection()\nRetrieve the connection associated with the current thread, or call\ncheckout to obtain one if necessary.\nconnection can be called any number of times; the connection is\nheld in a hash keyed by the thread id.\n
disconnect! ActiveRecord::ConnectionAdapters::ConnectionPool.disconnect!()\nDisconnects all connections in the pool, and clears the pool.\n
new_connection ActiveRecord::ConnectionAdapters::ConnectionPool.new_connection()\n\n
release_connection ActiveRecord::ConnectionAdapters::ConnectionPool.release_connection(with_id\n= current_connection_id)\nSignal that the thread is finished with the current connection.\nrelease_connection releases the connection-thread association\nand returns the connection to the pool.\n
with_connection ActiveRecord::ConnectionAdapters::ConnectionPool.with_connection()\nIf a connection already exists yield it to the block.  If no connection\nexists checkout a connection, yield it to the block, and checkin the\nconnection when finished.\n
new ActiveRecord::ConnectionAdapters::ConnectionHandler.new(pools = {})\n\n
clear_active_connections! ActiveRecord::ConnectionAdapters::ConnectionHandler.clear_active_connections!()\nReturns any connections in use by the current thread back to the pool,\nand also returns connections to the pool cached by threads that are no\nlonger alive.\n
clear_all_connections! ActiveRecord::ConnectionAdapters::ConnectionHandler.clear_all_connections!()\n\n
clear_reloadable_connections! ActiveRecord::ConnectionAdapters::ConnectionHandler.clear_reloadable_connections!()\nClears the cache which maps classes\n
connected? ActiveRecord::ConnectionAdapters::ConnectionHandler.connected?(klass)\nReturns true if a connection that's accessible to this class has\nalready been opened.\n
establish_connection ActiveRecord::ConnectionAdapters::ConnectionHandler.establish_connection(name,\nspec)\n\n
remove_connection ActiveRecord::ConnectionAdapters::ConnectionHandler.remove_connection(klass)\nRemove the connection for this class. This will close the active\nconnection and the defined connection (if they exist). The result\ncan be used as an argument for establish_connection, for easily\nre-establishing the connection.\n
retrieve_connection_pool ActiveRecord::ConnectionAdapters::ConnectionHandler.retrieve_connection_pool(klass)\n\n
new ActiveRecord::ConnectionAdapters::ConnectionManagement.new(app)\n\n
call ActiveRecord::ConnectionAdapters::ConnectionManagement.call(env)\n\n
new ActiveRecord::Relation.new(klass, table)\n\n
any? ActiveRecord::Relation.any?()\n\n
build ActiveRecord::Relation.build(*args, &block)\n\n
create ActiveRecord::Relation.create(*args, &block)\n\n
create! ActiveRecord::Relation.create!(*args, &block)\n\n
delete ActiveRecord::Relation.delete(id_or_array)\nDeletes the row with a primary key matching the +id+ argument, using a\nSQL +DELETE+ statement, and returns the number of rows deleted. Active\nRecord objects are not instantiated, so the object's callbacks are not\nexecuted, including any <tt>:dependent</tt> association options or\nObserver methods.\n\nYou can delete multiple rows at once by passing an Array of <tt>id</tt>s.\n\nNote: Although it is often much faster than the alternative,\n<tt>#destroy</tt>, skipping callbacks might bypass business logic in\nyour application that ensures referential integrity or performs other\nessential jobs.\n\n==== Examples\n Delete a single row\n  Todo.delete(1)\n Delete multiple rows\n  Todo.delete([2,3,4])\n
delete_all ActiveRecord::Relation.delete_all(conditions = nil)\nDeletes the records matching +conditions+ without instantiating the records\nfirst, and hence not\ncalling the +destroy+ method nor invoking callbacks. This is a single SQL\nDELETE statement that\ngoes straight to the database, much more efficient than +destroy_all+. Be\ncareful with relations\nthough, in particular <tt>:dependent</tt> rules defined on associations are\nnot honored.  Returns\nthe number of rows affected.\n\n==== Parameters\n\n* +conditions+ - Conditions are specified the same way as with +find+ method.\n\n==== Example\n\n  Post.delete_all("person_id = 5 AND (category = 'Something' OR category =\n  'Else')")\n  Post.delete_all(["person_id = ? AND (category = ? OR category = ?)", 5,\n  'Something', 'Else'])\n\nBoth calls delete the affected posts all at once with a single DELETE\nstatement.\nIf you need to destroy dependent associations or call your <tt>before_*</tt> or\n+after_destroy+ callbacks, use the +destroy_all+ method instead.\n
destroy ActiveRecord::Relation.destroy(id)\nDestroy an object (or multiple objects) that has the given id, the object\nis instantiated first,\ntherefore all callbacks and filters are fired off before the object is deleted.\nThis method is\nless efficient than ActiveRecord#delete but allows cleanup methods and other\nactions to be run.\n\nThis essentially finds the object (or multiple objects) with the given id,\ncreates a new object\nfrom the attributes, and then calls destroy on it.\n\n==== Parameters\n\n* +id+ - Can be either an Integer or an Array of Integers.\n\n==== Examples\n Destroy a single object\n  Todo.destroy(1)\n Destroy multiple objects\n  todos = [1,2,3]\n  Todo.destroy(todos)\n
destroy_all ActiveRecord::Relation.destroy_all(conditions = nil)\nDestroys the records matching +conditions+ by instantiating each\nrecord and calling its +destroy+ method. Each object's callbacks are\nexecuted (including <tt>:dependent</tt> association options and\n+before_destroy+/+after_destroy+ Observer methods). Returns the\ncollection of objects that were destroyed; each will be frozen, to\nreflect that no changes should be made (since they can't be\npersisted).\n\nNote: Instantiation, callback execution, and deletion of each\nrecord can be time consuming when you're removing many records at\nonce. It generates at least one SQL +DELETE+ query per record (or\npossibly more, to enforce your callbacks). If you want to delete many\nrows quickly, without concern for their associations or callbacks, use\n+delete_all+ instead.\n\n==== Parameters\n\n* +conditions+ - A string, array, or hash that specifies which records\n  to destroy. If omitted, all records are destroyed. See the\n  Conditions section in the introduction to ActiveRecord::Base for\n  more information.\n\n==== Examples\n\n  Person.destroy_all("last_login < '2004-04-04'")\n  Person.destroy_all(:status => "inactive")\n
eager_loading? ActiveRecord::Relation.eager_loading?()\n\n
empty? ActiveRecord::Relation.empty?()\nReturns true if there are no records.\n
initialize_copy ActiveRecord::Relation.initialize_copy(other)\n\n
inspect ActiveRecord::Relation.inspect()\n\n
many? ActiveRecord::Relation.many?()\n\n
method_missing ActiveRecord::Relation.method_missing(method, *args, &block)\n\n
new ActiveRecord::Relation.new(*args, &block)\n\n
primary_key ActiveRecord::Relation.primary_key()\n\n
references_eager_loaded_tables? ActiveRecord::Relation.references_eager_loaded_tables?()\n\n
reload ActiveRecord::Relation.reload()\n\n
reset ActiveRecord::Relation.reset()\n\n
respond_to? ActiveRecord::Relation.respond_to?(method, include_private = false)\n\n
scope_for_create ActiveRecord::Relation.scope_for_create()\n\n
scoping ActiveRecord::Relation.scoping()\nScope all queries to the current scope.\n\n==== Example\n\n  Comment.where(:post_id => 1).scoping do\n    Comment.first # SELECT * FROM comments WHERE post_id = 1\n  end\n\nPlease check unscoped if you want to remove all previous scopes (including\nthe default_scope) during the execution of a block.\n
size ActiveRecord::Relation.size()\nReturns size of the records.\n
tables_in_string ActiveRecord::Relation.tables_in_string(string)\n\n
to_a ActiveRecord::Relation.to_a()\n\n
to_sql ActiveRecord::Relation.to_sql()\n\n
update ActiveRecord::Relation.update(id, attributes)\nUpdates an object (or multiple objects) and saves it to the database, if\nvalidations pass.\nThe resulting object is returned whether the object was saved successfully\nto the database or not.\n\n==== Parameters\n\n* +id+ - This should be the id or an array of ids to be updated.\n* +attributes+ - This should be a hash of attributes or an array of hashes.\n\n==== Examples\n Updates one record\n  Person.update(15, :user_name => 'Samuel', :group => 'expert')\n Updates multiple records\n  people = { 1 => { "first_name" => "David" }, 2 => { "first_name" =>\n  "Jeremy" } }\n  Person.update(people.keys, people.values)\n
update_all ActiveRecord::Relation.update_all(updates, conditions = nil, options = {})\nUpdates all records with details given if they match a set of conditions\nsupplied, limits and order can\nalso be supplied. This method constructs a single SQL UPDATE statement and\nsends it straight to the\ndatabase. It does not instantiate the involved models and it does not trigger\nActive Record callbacks\nor validations.\n\n==== Parameters\n\n* +updates+ - A string, array, or hash representing the SET part of an\nSQL statement.\n* +conditions+ - A string, array, or hash representing the WHERE part of an\nSQL statement.\n  See conditions in the intro.\n* +options+ - Additional options are <tt>:limit</tt> and <tt>:order</tt>,\nsee the examples for usage.\n\n==== Examples\n Update all customers with the given attributes\n  Customer.update_all :wants_email => true\n Update all books with 'Rails' in their title\n  Book.update_all "author = 'David'", "title LIKE '%Rails%'"\n Update all avatars migrated more than a week ago\n  Avatar.update_all ['migrated_at = ?', Time.now.utc], ['migrated_at >\n  ?', 1.week.ago]\n Update all books that match conditions, but limit it to 5 ordered by date\n  Book.update_all "author = 'David'", "title LIKE '%Rails%'", :order =>\n  'created_at', :limit => 5\n
where_values_hash ActiveRecord::Relation.where_values_hash()\n\n
requests ActiveResource::HttpMock.requests()\nReturns an array of all request objects that have been sent to the mock.\nYou can use this to check\nif your model actually sent an HTTP request.\n\n==== Example\n  def setup\n    @matz  = { :id => 1, :name => "Matz" }.to_xml(:root => "person")\n    ActiveResource::HttpMock.respond_to do |mock|\n      mock.get "/people/1.xml", {}, @matz\n    end\n  end\n\n  def test_should_request_remote_service\n    person = Person.find(1)  # Call the remote service\n This request object has the same HTTP method and path as declared by the mock\n    expected_request = ActiveResource::Request.new(:get, "/people/1.xml")\n Assert that the mock received, and responded to, the expected request from\n the model\n    assert ActiveResource::HttpMock.requests.include?(expected_request)\n  end\n
reset! ActiveResource::HttpMock.reset!()\nDeletes all logged requests and responses.\n
respond_to ActiveResource::HttpMock.respond_to(*args)\nAccepts a block which declares a set of requests and responses for the\nHttpMock to respond to in\nthe following format:\n\n  mock.http_method(path, request_headers = {}, body = nil, status = 200,\n  response_headers = {})\n\n=== Example\n\n  @matz  = { :id => 1, :name => "Matz" }.to_xml(:root => "person")\n  ActiveResource::HttpMock.respond_to do |mock|\n    mock.post   "/people.xml",   {}, @matz, 201, "Location" => "/people/1.xml"\n    mock.get    "/people/1.xml", {}, @matz\n    mock.put    "/people/1.xml", {}, nil, 204\n    mock.delete "/people/1.xml", {}, nil, 200\n  end\n\nAlternatively, accepts a hash of <tt>{Request => Response}</tt> pairs allowing\nyou to generate\nthese the following format:\n\n  ActiveResource::Request.new(method, path, body, request_headers)\n  ActiveResource::Response.new(body, status, response_headers)\n\n=== Example\n\nRequest.new(:#{method}, path, nil, request_headers)\n\n  @matz  = { :id => 1, :name => "Matz" }.to_xml(:root => "person")\n\n  create_matz      = ActiveResource::Request.new(:post, '/people.xml',\n  @matz, {})\n  created_response = ActiveResource::Response.new("", 201, {"Location" =>\n  "/people/1.xml"})\n  get_matz         = ActiveResource::Request.new(:get, '/people/1.xml', nil)\n  ok_response      = ActiveResource::Response.new("", 200, {})\n\n  pairs = {create_matz => created_response, get_matz => ok_response}\n\n  ActiveResource::HttpMock.respond_to(pairs)\n\nNote, by default, every time you call +respond_to+, any previous request\nand response pairs stored\nin HttpMock will be deleted giving you a clean slate to work on.\n\nIf you want to override this behaviour, pass in +false+ as the last argument\nto +respond_to+\n\n=== Example\n\n  ActiveResource::HttpMock.respond_to do |mock|\n    mock.send(:get, "/people/1", {}, "XML1")\n  end\n  ActiveResource::HttpMock.responses.length #=> 1\n\n  ActiveResource::HttpMock.respond_to(false) do |mock|\n    mock.send(:get, "/people/2", {}, "XML2")\n  end\n  ActiveResource::HttpMock.responses.length #=> 2\n\nThis also works with passing in generated pairs of requests and responses,\nagain, just pass in false\nas the last argument:\n\n=== Example\n\n  ActiveResource::HttpMock.respond_to do |mock|\n    mock.send(:get, "/people/1", {}, "XML1")\n  end\n  ActiveResource::HttpMock.responses.length #=> 1\n\n  get_matz         = ActiveResource::Request.new(:get, '/people/1.xml', nil)\n  ok_response      = ActiveResource::Response.new("", 200, {})\n\n  pairs = {get_matz => ok_response}\n\n  ActiveResource::HttpMock.respond_to(pairs, false)\n  ActiveResource::HttpMock.responses.length #=> 2\n
responses ActiveResource::HttpMock.responses()\nReturns the list of requests and their mocked responses. Look up a\nresponse for a request using responses.assoc(request).\n
new ActiveResource::Request.new(method, path, body = nil, headers = {})\n\n
headers_match? ActiveResource::Request.headers_match?(req)\n\n
to_s ActiveResource::Request.to_s()\n\n
new ActiveResource::Response.new(body, message = 200, headers = {})\n\n
success? ActiveResource::Response.success?()\n\n
new ActiveResource::Connection.new(site, format =\nActiveResource::Formats::XmlFormat)\nThe +site+ parameter is required and will set the +site+\nattribute to the URI for the remote resource service.\n
requests ActiveResource::Connection.requests()\n\n
apply_ssl_options ActiveResource::Connection.apply_ssl_options(http)\n\n
auth_attributes_for ActiveResource::Connection.auth_attributes_for(uri, request_digest, params)\n\n
auth_type= ActiveResource::Connection.auth_type=(auth_type)\nSets the auth type for remote service.\n
authorization_header ActiveResource::Connection.authorization_header(http_method, uri)\n\n
build_request_headers ActiveResource::Connection.build_request_headers(headers, http_method, uri)\nBuilds headers for request to remote service.\n
client_nonce ActiveResource::Connection.client_nonce()\n\n
configure_http ActiveResource::Connection.configure_http(http)\n\n
default_header ActiveResource::Connection.default_header()\n\n
delete ActiveResource::Connection.delete(path, headers = {})\nExecutes a DELETE request (see HTTP protocol documentation if unfamiliar).\nUsed to delete resources.\n
digest_auth_header ActiveResource::Connection.digest_auth_header(http_method, uri)\n\n
extract_params_from_response ActiveResource::Connection.extract_params_from_response()\n\n
get ActiveResource::Connection.get(path, headers = {})\nExecutes a GET request.\nUsed to get (find) resources.\n
handle_response ActiveResource::Connection.handle_response(response)\nHandles response and error codes from the remote service.\n
head ActiveResource::Connection.head(path, headers = {})\nExecutes a HEAD request.\nUsed to obtain meta-information about resources, such as whether they exist\nand their size (via response headers).\n
http ActiveResource::Connection.http()\n\n
http ActiveResource::Connection.http()\nCreates new Net::HTTP instance for communication with the\nremote service and resources.\n
http_format_header ActiveResource::Connection.http_format_header(http_method)\n\n
legitimize_auth_type ActiveResource::Connection.legitimize_auth_type(auth_type)\n\n
new_http ActiveResource::Connection.new_http()\n\n
password= ActiveResource::Connection.password=(password)\nSets the password for remote service.\n
post ActiveResource::Connection.post(path, body = '', headers = {})\nExecutes a POST request.\nUsed to create new resources.\n
proxy= ActiveResource::Connection.proxy=(proxy)\nSet the proxy for remote service.\n
put ActiveResource::Connection.put(path, body = '', headers = {})\nExecutes a PUT request (see HTTP protocol documentation if unfamiliar).\nUsed to update resources.\n
request ActiveResource::Connection.request(method, path, *arguments)\nMakes a request to the remote service.\n
response_auth_header ActiveResource::Connection.response_auth_header()\n\n
site= ActiveResource::Connection.site=(site)\nSet URI for remote service.\n
ssl_options= ActiveResource::Connection.ssl_options=(opts={})\nHash of options applied to Net::HTTP instance when +site+ protocol is 'https'.\n
timeout= ActiveResource::Connection.timeout=(timeout)\nSets the number of seconds after which HTTP requests to the remote service\nshould time out.\n
user= ActiveResource::Connection.user=(user)\nSets the user for remote service.\n
with_auth ActiveResource::Connection.with_auth()\n\n
from_array ActiveResource::Errors.from_array(messages, save_cache = false)\nGrabs errors from an array of messages (like ActiveRecord::Validations)\nThe second parameter directs the errors cache to be cleared (default)\nor not (by passing true)\n
from_json ActiveResource::Errors.from_json(json, save_cache = false)\nGrabs errors from a json response.\n
from_xml ActiveResource::Errors.from_xml(xml, save_cache = false)\nGrabs errors from an XML response.\n
logger ActiveResource::LogSubscriber.logger()\n\n
request ActiveResource::LogSubscriber.request(event)\n\n
all ActiveResource::Base.all(*args)\nThis is an alias for find(:all).  You can pass in all the same\narguments to this method as you can to <tt>find(:all)</tt>\n
auth_type ActiveResource::Base.auth_type()\n\n
auth_type= ActiveResource::Base.auth_type=(auth_type)\n\n
build ActiveResource::Base.build(attributes = {})\nBuilds a new, unsaved record using the default values from the remote server so\nthat it can be used with RESTful forms.\n\n==== Options\n* +attributes+ - A hash that overrides the default values from the server.\n\nReturns the new resource instance.\n
collection_path ActiveResource::Base.collection_path(prefix_options = {}, query_options = nil)\nGets the collection path for the REST resources.  If the +query_options+\nparameter is omitted, Rails\nwill split from the +prefix_options+.\n\n==== Options\n* +prefix_options+ - A hash to add a prefix to the request for nested URLs\n(e.g., <tt>:account_id => 19</tt>\n  would yield a URL like <tt>/accounts/19/purchases.xml</tt>).\n* +query_options+ - A hash to add items to the query string for the request.\n\n==== Examples\n  Post.collection_path\n => /posts.xml\n\n  Comment.collection_path(:post_id => 5)\n => /posts/5/comments.xml\n\n  Comment.collection_path(:post_id => 5, :active => 1)\n => /posts/5/comments.xml?active=1\n\n  Comment.collection_path({:post_id => 5}, {:active => 1})\n => /posts/5/comments.xml?active=1\n
connection ActiveResource::Base.connection(refresh = false)\nAn instance of ActiveResource::Connection that is the base \connection to\nthe remote service.\nThe +refresh+ parameter toggles whether or not the \connection is refreshed\nat every request\nor not (defaults to <tt>false</tt>).\n
create ActiveResource::Base.create(attributes = {})\nCreates a new resource instance and makes a request to the remote service\nthat it be saved, making it equivalent to the following simultaneous calls:\n\n  ryan = Person.new(:first => 'ryan')\n  ryan.save\n\nReturns the newly created resource.  If a failure has occurred an\nexception will be raised (see <tt>save</tt>).  If the resource is invalid and\nhas not been saved then <tt>valid?</tt> will return <tt>false</tt>,\nwhile <tt>new?</tt> will still return <tt>true</tt>.\n\n==== Examples\n  Person.create(:name => 'Jeremy', :email => 'myname@nospam.com', :enabled\n  => true)\n  my_person = Person.find(:first)\n  my_person.email # => myname@nospam.com\n\n  dhh = Person.create(:name => 'David', :email => 'dhh@nospam.com', :enabled\n  => true)\n  dhh.valid? # => true\n  dhh.new?   # => false\n We'll assume that there's a validation that requires the name attribute\n  that_guy = Person.create(:name => '', :email => 'thatguy@nospam.com',\n  :enabled => true)\n  that_guy.valid? # => false\n  that_guy.new?   # => true\n
create_proxy_uri_from ActiveResource::Base.create_proxy_uri_from(proxy)\nAccepts a URI and creates the proxy URI from that.\n
create_site_uri_from ActiveResource::Base.create_site_uri_from(site)\nAccepts a URI and creates the site URI from that.\n
delete ActiveResource::Base.delete(id, options = {})\nDeletes the resources with the ID in the +id+ parameter.\n\n==== Options\nAll options specify \prefix and query parameters.\n\n==== Examples\n  Event.delete(2) # sends DELETE /events/2\n\n  Event.create(:name => 'Free Concert', :location => 'Community Center')\n  my_event = Event.find(:first) # let's assume this is event with ID 7\n  Event.delete(my_event.id) # sends DELETE /events/7\n Let's assume a request to events/5/cancel.xml\n  Event.delete(params[:id]) # sends DELETE /events/5\n
element_path ActiveResource::Base.element_path(id, prefix_options = {}, query_options = nil)\nGets the element path for the given ID in +id+.  If the +query_options+\nparameter is omitted, Rails\nwill split from the \prefix options.\n\n==== Options\n+prefix_options+ - A \hash to add a \prefix to the request for nested URLs\n(e.g., <tt>:account_id => 19</tt>\n                   would yield a URL like <tt>/accounts/19/purchases.xml</tt>).\n+query_options+ - A \hash to add items to the query string for the request.\n\n==== Examples\n  Post.element_path(1)\n => /posts/1.xml\n\n  Comment.element_path(1, :post_id => 5)\n => /posts/5/comments/1.xml\n\n  Comment.element_path(1, :post_id => 5, :active => 1)\n => /posts/5/comments/1.xml?active=1\n\n  Comment.element_path(1, {:post_id => 5}, {:active => 1})\n => /posts/5/comments/1.xml?active=1\n
exists? ActiveResource::Base.exists?(id, options = {})\nAsserts the existence of a resource, returning <tt>true</tt> if the resource\nis found.\n\n==== Examples\n  Note.create(:title => 'Hello, world.', :body => 'Nothing more for now...')\n  Note.exists?(1) # => true\n\n  Note.exists(1349) # => false\n
find ActiveResource::Base.find(*arguments)\nCore method for finding resources.  Used similarly to Active Record's +find+\nmethod.\n\n==== Arguments\nThe first argument is considered to be the scope of the query.  That is,\nhow many\nresources are returned from the request.  It can be one of the following.\n\n* <tt>:one</tt> - Returns a single resource.\n* <tt>:first</tt> - Returns the first resource found.\n* <tt>:last</tt> - Returns the last resource found.\n* <tt>:all</tt> - Returns every resource that matches the request.\n\n==== Options\n\n* <tt>:from</tt> - Sets the path or custom method that resources will be\nfetched from.\n* <tt>:params</tt> - Sets query and \prefix (nested URL) parameters.\n\n==== Examples\n  Person.find(1)\n => GET /people/1.xml\n\n  Person.find(:all)\n => GET /people.xml\n\n  Person.find(:all, :params => { :title => "CEO" })\n => GET /people.xml?title=CEO\n\n  Person.find(:first, :from => :managers)\n => GET /people/managers.xml\n\n  Person.find(:last, :from => :managers)\n => GET /people/managers.xml\n\n  Person.find(:all, :from => "/companies/1/people.xml")\n => GET /companies/1/people.xml\n\n  Person.find(:one, :from => :leader)\n => GET /people/leader.xml\n\n  Person.find(:all, :from => :developers, :params => { :language => 'ruby' })\n => GET /people/developers.xml?language=ruby\n\n  Person.find(:one, :from => "/companies/1/manager.xml")\n => GET /companies/1/manager.xml\n\n  StreetAddress.find(1, :params => { :person_id => 1 })\n => GET /people/1/street_addresses/1.xml\n\n== Failure or missing data\n  A failure to find the requested object raises a ResourceNotFound\n  exception if the find was called with an id.\n  With any other scope, find returns nil when no data is returned.\n\n  Person.find(1)\n => raises ResourceNotFound\n\n  Person.find(:all)\n  Person.find(:first)\n  Person.find(:last)\n => nil\n
find_every ActiveResource::Base.find_every(options)\nFind every resource\n
find_one ActiveResource::Base.find_one(options)\nFind a single resource from a one-off URL\n
find_single ActiveResource::Base.find_single(scope, options)\nFind a single resource from the default URL\n
first ActiveResource::Base.first(*args)\nA convenience wrapper for <tt>find(:first, *args)</tt>. You can pass\nin all the same arguments to this method as you can to\n<tt>find(:first)</tt>.\n
format ActiveResource::Base.format()\nReturns the current format, default is ActiveResource::Formats::XmlFormat.\n
format= ActiveResource::Base.format=(mime_type_reference_or_format)\nSets the format that attributes are sent and received in from a mime type\nreference:\n\n  Person.format = :json\n  Person.find(1) # => GET /people/1.json\n\n  Person.format = ActiveResource::Formats::XmlFormat\n  Person.find(1) # => GET /people/1.xml\n\nDefault format is <tt>:xml</tt>.\n
headers ActiveResource::Base.headers()\n\n
instantiate_collection ActiveResource::Base.instantiate_collection(collection, prefix_options = {})\n\n
instantiate_record ActiveResource::Base.instantiate_record(record, prefix_options = {})\n\n
known_attributes ActiveResource::Base.known_attributes()\nReturns the list of known attributes for this resource, gathered\nfrom the provided <tt>schema</tt>\nAttributes that are known will cause your resource to return 'true'\nwhen <tt>respond_to?</tt> is called on them. A known attribute will\nreturn nil if not set (rather than <t>MethodNotFound</tt>); thus\nknown attributes can be used with <tt>validates_presence_of</tt>\nwithout a getter-method.\n
last ActiveResource::Base.last(*args)\nA convenience wrapper for <tt>find(:last, *args)</tt>. You can pass\nin all the same arguments to this method as you can to\n<tt>find(:last)</tt>.\n
logger ActiveResource::Base.logger\nThe logger for diagnosing and tracing Active Resource calls.\n
new ActiveResource::Base.new(attributes = {})\nConstructor method for \\new resources; the optional +attributes+ parameter\ntakes a \hash\nof attributes for the \\new resource.\n\n==== Examples\n  my_course = Course.new\n  my_course.name = "Western Civilization"\n  my_course.lecturer = "Don Trotter"\n  my_course.save\n\n  my_other_course = Course.new(:name => "Philosophy: Reason and Being",\n  :lecturer => "Ralph Cling")\n  my_other_course.save\n
new_element_path ActiveResource::Base.new_element_path(prefix_options = {})\nGets the new element path for REST resources.\n\n==== Options\n* +prefix_options+ - A hash to add a prefix to the request for nested URLs\n(e.g., <tt>:account_id => 19</tt>\n  would yield a URL like <tt>/accounts/19/purchases/new.xml</tt>).\n\n==== Examples\n  Post.new_element_path\n => /posts/new.xml\n\n  Comment.collection_path(:post_id => 5)\n => /posts/5/comments/new.xml\n
password ActiveResource::Base.password()\nGets the \password for REST HTTP authentication.\n
password= ActiveResource::Base.password=(password)\nSets the \password for REST HTTP authentication.\n
prefix ActiveResource::Base.prefix(options={})\nGets the \prefix for a resource's nested URL (e.g.,\n<tt>prefix/collectionname/1.xml</tt>)\nThis method is regenerated at runtime based on what the \prefix is set to.\n
prefix= ActiveResource::Base.prefix=(value = '/')\nSets the \prefix for a resource's nested URL (e.g.,\n<tt>prefix/collectionname/1.xml</tt>).\nDefault value is <tt>site.path</tt>.\n
prefix_parameters ActiveResource::Base.prefix_parameters()\ncontains a set of the current prefix parameters.\n
prefix_source ActiveResource::Base.prefix_source()\nAn attribute reader for the source string for the resource path \prefix.  This\nmethod is regenerated at runtime based on what the \prefix is set to.\n
proxy ActiveResource::Base.proxy()\nGets the \proxy variable if a proxy is required\n
proxy= ActiveResource::Base.proxy=(proxy)\nSets the URI of the http proxy to the value in the +proxy+ argument.\n
query_string ActiveResource::Base.query_string(options)\nBuilds the query string for the request.\n
schema ActiveResource::Base.schema(&block)\nCreates a schema for this resource - setting the attributes that are\nknown prior to fetching an instance from the remote system.\n\nThe schema helps define the set of <tt>known_attributes</tt> of the\ncurrent resource.\n\nThere is no need to specify a schema for your Active Resource. If\nyou do not, the <tt>known_attributes</tt> will be guessed from the\ninstance attributes returned when an instance is fetched from the\nremote system.\n\nexample:\nclass Person < ActiveResource::Base\n  schema do\n define each attribute separately\n    attribute 'name', :string\n or use the convenience methods and pass >=1 attribute names\n    string  'eye_colour', 'hair_colour'\n    integer 'age'\n    float   'height', 'weight'\n unsupported types should be left as strings\n overload the accessor methods if you need to convert them\n    attribute 'created_at', 'string'\n  end\nend\n\np = Person.new\np.respond_to? :name   # => true\np.respond_to? :age    # => true\np.name                # => nil\np.age                 # => nil\n\nj = Person.find_by_name('John') #\n<person><name>John</name><age>34</age><num_children>3</num_children></person>\nj.respond_to? :name   # => true\nj.respond_to? :age    # => true\nj.name                # => 'John'\nj.age                 # => '34'  # note this is a string!\nj.num_children        # => '3'  # note this is a string!\n\np.num_children        # => NoMethodError\n\nAttribute-types must be one of:\n string, integer, float\n\nNote: at present the attribute-type doesn't do anything, but stay\ntuned...\nShortly it will also *cast* the value of the returned attribute.\nie:\nj.age                 # => 34   # cast to an integer\nj.weight              # => '65' # still a string!\n
schema= ActiveResource::Base.schema=(the_schema)\nAlternative, direct way to specify a <tt>schema</tt> for this\nResource. <tt>schema</tt> is more flexible, but this is quick\nfor a very simple schema.\n\nPass the schema as a hash with the keys being the attribute-names\nand the value being one of the accepted attribute types (as defined\nin <tt>schema</tt>)\n\nexample:\n\nclass Person < ActiveResource::Base\n  schema = {'name' => :string, 'age' => :integer }\nend\n\nThe keys/values can be strings or symbols. They will be converted to\nstrings.\n
site ActiveResource::Base.site()\nGets the URI of the REST resources to map for this class.  The site variable\nis required for\nActive Resource's mapping to work.\n
site= ActiveResource::Base.site=(site)\nSets the URI of the REST resources to map for this class to the value in\nthe +site+ argument.\nThe site variable is required for Active Resource's mapping to work.\n
split_options ActiveResource::Base.split_options(options = {})\nsplit an option hash into two hashes, one containing the prefix options,\nand the other containing the leftovers.\n
ssl_options ActiveResource::Base.ssl_options()\nReturns the SSL options hash.\n
ssl_options= ActiveResource::Base.ssl_options=(opts={})\nOptions that will get applied to an SSL connection.\n\n* <tt>:key</tt> - An OpenSSL::PKey::RSA or OpenSSL::PKey::DSA object.\n* <tt>:cert</tt> - An OpenSSL::X509::Certificate object as client certificate\n* <tt>:ca_file</tt> - Path to a CA certification file in PEM format. The\nfile can contrain several CA certificates.\n* <tt>:ca_path</tt> - Path of a CA certification directory containing\ncertifications in PEM format.\n* <tt>:verify_mode</tt> - Flags for server the certification verification\nat begining of SSL/TLS session. (OpenSSL::SSL::VERIFY_NONE or\nOpenSSL::SSL::VERIFY_PEER is acceptable)\n* <tt>:verify_callback</tt> - The verify callback for the server certification\nverification.\n* <tt>:verify_depth</tt> - The maximum depth for the certificate chain\nverification.\n* <tt>:cert_store</tt> - OpenSSL::X509::Store to verify peer certificate.\n* <tt>:ssl_timeout</tt> -The SSL timeout in seconds.\n
timeout ActiveResource::Base.timeout()\nGets the number of seconds after which requests to the REST API should\ntime out.\n
timeout= ActiveResource::Base.timeout=(timeout)\nSets the number of seconds after which requests to the REST API should\ntime out.\n
uri_parser ActiveResource::Base.uri_parser()\n\n
user ActiveResource::Base.user()\nGets the \user for REST HTTP authentication.\n
user= ActiveResource::Base.user=(user)\nSets the \user for REST HTTP authentication.\n
clone ActiveResource::Base.clone()\nReturns a \clone of the resource that hasn't been assigned an +id+ yet and\nis treated as a \\new resource.\n\n  ryan = Person.find(1)\n  not_ryan = ryan.clone\n  not_ryan.new?  # => true\n\nAny active resource member attributes will NOT be cloned, though all other\nattributes are.  This is to prevent the conflict between any +prefix_options+\nthat refer to the original parent resource and the newly cloned parent\nresource that does not exist.\n\n  ryan = Person.find(1)\n  ryan.address = StreetAddress.find(1, :person_id => ryan.id)\n  ryan.hash = {:not => "an ARes instance"}\n\n  not_ryan = ryan.clone\n  not_ryan.new?            # => true\n  not_ryan.address         # => NoMethodError\n  not_ryan.hash            # => {:not => "an ARes instance"}\n
collection_path ActiveResource::Base.collection_path(options = nil)\n\n
connection ActiveResource::Base.connection(refresh = false)\n\n
create ActiveResource::Base.create()\nCreate (i.e., \save to the remote service) the \\new resource.\n
destroy ActiveResource::Base.destroy()\nDeletes the resource from the remote service.\n\n==== Examples\n  my_id = 3\n  my_person = Person.find(my_id)\n  my_person.destroy\n  Person.find(my_id) # 404 (Resource Not Found)\n\n  new_person = Person.create(:name => 'James')\n  new_id = new_person.id # => 7\n  new_person.destroy\n  Person.find(new_id) # 404 (Resource Not Found)\n
dup ActiveResource::Base.dup()\nDuplicates the current resource without saving it.\n\n==== Examples\n  my_invoice = Invoice.create(:customer => 'That Company')\n  next_invoice = my_invoice.dup\n  next_invoice.new? # => true\n\n  next_invoice.save\n  next_invoice == my_invoice # => false (different id attributes)\n\n  my_invoice.customer   # => That Company\n  next_invoice.customer # => That Company\n
element_path ActiveResource::Base.element_path(options = nil)\n\n
encode ActiveResource::Base.encode(options={})\nReturns the serialized string representation of the resource in the configured\nserialization format specified in ActiveResource::Base.format. The options\napplicable depend on the configured encoding format.\n
eql? ActiveResource::Base.eql?(other)\nTests for equality (delegates to ==).\n
exists? ActiveResource::Base.exists?()\nEvaluates to <tt>true</tt> if this resource is not <tt>new?</tt> and is\nfound on the remote service.  Using this method, you can check for\nresources that may have been deleted between the object's instantiation\nand actions on it.\n\n==== Examples\n  Person.create(:name => 'Theodore Roosevelt')\n  that_guy = Person.find(:first)\n  that_guy.exists? # => true\n\n  that_lady = Person.new(:name => 'Paul Bean')\n  that_lady.exists? # => false\n\n  guys_id = that_guy.id\n  Person.delete(guys_id)\n  that_guy.exists? # => false\n
find_or_create_resource_for ActiveResource::Base.find_or_create_resource_for(name)\nTries to find a resource for a given name; if it fails, then the resource\nis created\n
find_or_create_resource_for_collection ActiveResource::Base.find_or_create_resource_for_collection(name)\nTries to find a resource for a given collection name; if it fails, then the\nresource is created\n
find_resource_in_modules ActiveResource::Base.find_resource_in_modules(resource_name, module_names)\nTries to find a resource in a non empty list of nested modules\nRaises a NameError if it was not found in any of the given nested modules\n
hash ActiveResource::Base.hash()\nDelegates to id in order to allow two resources of the same type and \id to\nwork with something like:\n  [Person.find(1), Person.find(2)] & [Person.find(1), Person.find(4)] # =>\n  [Person.find(1)]\n
id ActiveResource::Base.id()\nGets the <tt>\id</tt> attribute of the resource.\n
id= ActiveResource::Base.id=(id)\nSets the <tt>\id</tt> attribute of the resource.\n
id_from_response ActiveResource::Base.id_from_response(response)\nTakes a response from a typical create post and pulls the ID out\n
known_attributes ActiveResource::Base.known_attributes()\nThis is a list of known attributes for this resource. Either\ngathered from the provided <tt>schema</tt>, or from the attributes\nset on this instance after it has been fetched from the remote system.\n
load ActiveResource::Base.load(attributes)\nA method to manually load attributes from a \hash. Recursively loads\ncollections of\nresources.  This method is called in +initialize+ and +create+ when a \hash\nof attributes\nis provided.\n\n==== Examples\n  my_attrs = {:name => 'J&J Textiles', :industry => 'Cloth and textiles'}\n  my_attrs = {:name => 'Marty', :colors => ["red", "green", "blue"]}\n\n  the_supplier = Supplier.find(:first)\n  the_supplier.name # => 'J&M Textiles'\n  the_supplier.load(my_attrs)\n  the_supplier.name('J&J Textiles')\n These two calls are the same as Supplier.new(my_attrs)\n  my_supplier = Supplier.new\n  my_supplier.load(my_attrs)\n These three calls are the same as Supplier.create(my_attrs)\n  your_supplier = Supplier.new\n  your_supplier.load(my_attrs)\n  your_supplier.save\n
load_attributes_from_response ActiveResource::Base.load_attributes_from_response(response)\n\n
new? ActiveResource::Base.new?()\nReturns +true+ if this object hasn't yet been saved, otherwise, returns\n+false+.\n\n==== Examples\n  not_new = Computer.create(:brand => 'Apple', :make => 'MacBook', :vendor =>\n  'MacMall')\n  not_new.new? # => false\n\n  is_new = Computer.new(:brand => 'IBM', :make => 'Thinkpad', :vendor => 'IBM')\n  is_new.new? # => true\n\n  is_new.save\n  is_new.new? # => false\n
new_element_path ActiveResource::Base.new_element_path()\n\n
new_record? ActiveResource::Base.new_record?()\n\n
persisted? ActiveResource::Base.persisted?()\nReturns +true+ if this object has been saved, otherwise returns +false+.\n\n==== Examples\n  persisted = Computer.create(:brand => 'Apple', :make => 'MacBook', :vendor =>\n  'MacMall')\n  persisted.persisted? # => true\n\n  not_persisted = Computer.new(:brand => 'IBM', :make => 'Thinkpad', :vendor =>\n  'IBM')\n  not_persisted.persisted? # => false\n\n  not_persisted.save\n  not_persisted.persisted? # => true\n
reload ActiveResource::Base.reload()\nA method to \reload the attributes of this object from the remote web service.\n\n==== Examples\n  my_branch = Branch.find(:first)\n  my_branch.name # => "Wislon Raod"\n Another client fixes the typo...\n\n  my_branch.name # => "Wislon Raod"\n  my_branch.reload\n  my_branch.name # => "Wilson Road"\n
respond_to? ActiveResource::Base.respond_to?(method, include_priv = false)\nA method to determine if an object responds to a message (e.g., a method\ncall). In Active Resource, a Person object with a\n+name+ attribute can answer <tt>true</tt> to\n<tt>my_person.respond_to?(:name)</tt>, <tt>my_person.respond_to?(:name=)</tt>,\nand\n<tt>my_person.respond_to?(:name?)</tt>.\n
respond_to_without_attributes? ActiveResource::Base.respond_to_without_attributes?(method, include_priv\n= false)\nFor checking <tt>respond_to?</tt> without searching the attributes (which\nis faster).\n
save ActiveResource::Base.save()\nSaves (+POST+) or \updates (+PUT+) a resource.  Delegates to +create+ if\nthe object is \\new,\n+update+ if it exists. If the response to the \save includes a body, it will\nbe assumed that this body\nis XML for the final object as it looked after the \save (which would include\nattributes like +created_at+\nthat weren't part of the original submit).\n\n==== Examples\n  my_company = Company.new(:name => 'RoleModel Software', :owner => 'Ken\n  Auer', :size => 2)\n  my_company.new? # => true\n  my_company.save # sends POST /companies/ (create)\n\n  my_company.new? # => false\n  my_company.size = 10\n  my_company.save # sends PUT /companies/1 (update)\n
save! ActiveResource::Base.save!()\nSaves the resource.\n\nIf the resource is new, it is created via +POST+, otherwise the\nexisting resource is updated via +PUT+.\n\nWith <tt>save!</tt> validations always run. If any of them fail\nActiveResource::ResourceInvalid gets raised, and nothing is POSTed to\nthe remote system.\nSee ActiveResource::Validations for more information.\n\nThere's a series of callbacks associated with <tt>save!</tt>. If any\nof the <tt>before_*</tt> callbacks return +false+ the action is\ncancelled and <tt>save!</tt> raises ActiveResource::ResourceInvalid.\n
schema ActiveResource::Base.schema()\nIf no schema has been defined for the class (see\n<tt>ActiveResource::schema=</tt>), the default automatic schema is\ngenerated from the current instance's attributes\n
split_options ActiveResource::Base.split_options(options = {})\n\n
to_json ActiveResource::Base.to_json(options={})\n\n
to_xml ActiveResource::Base.to_xml(options={})\n\n
update ActiveResource::Base.update()\nUpdate the resource on the remote service.\n
update_attribute ActiveResource::Base.update_attribute(name, value)\nUpdates a single attribute and then saves the object.\n\nNote: Unlike ActiveRecord::Base.update_attribute, this method <b>is</b>\nsubject to normal validation routines as an update sends the whole body\nof the resource in the request.  (See Validations).\n\nAs such, this method is equivalent to calling update_attributes with a single\nattribute/value pair.\n\nIf the saving fails because of a connection or remote service error, an\nexception will be raised.  If saving fails because the resource is\ninvalid then <tt>false</tt> will be returned.\n
update_attributes ActiveResource::Base.update_attributes(attributes)\nUpdates this resource with all the attributes from the passed-in Hash\nand requests that the record be saved.\n\nIf the saving fails because of a connection or remote service error, an\nexception will be raised.  If saving fails because the resource is\ninvalid then <tt>false</tt> will be returned.\n\nNote: Though this request can be made with a partial set of the\nresource's attributes, the full body of the request will still be sent\nin the save request to the remote service.\n
new ActiveResource::TimeoutError.new(message)\n\n
to_s ActiveResource::TimeoutError.to_s()\n\n
new ActiveResource::SSLError.new(message)\n\n
to_s ActiveResource::SSLError.to_s()\n\n
new ActiveSupport::HashWithIndifferentAccess.new(constructor = {})\n\n
new_from_hash_copying_default ActiveSupport::HashWithIndifferentAccess.new_from_hash_copying_default(hash)\n\n
convert_key ActiveSupport::HashWithIndifferentAccess.convert_key(key)\n\n
convert_value ActiveSupport::HashWithIndifferentAccess.convert_value(value)\n\n
default ActiveSupport::HashWithIndifferentAccess.default(key = nil)\n\n
delete ActiveSupport::HashWithIndifferentAccess.delete(key)\nRemoves a specified key from the hash.\n
dup ActiveSupport::HashWithIndifferentAccess.dup()\nReturns an exact copy of the hash.\n
extractable_options? ActiveSupport::HashWithIndifferentAccess.extractable_options?()\n\n
fetch ActiveSupport::HashWithIndifferentAccess.fetch(key, *extras)\nFetches the value for the specified key, same as doing hash[key]\n
has_key? ActiveSupport::HashWithIndifferentAccess.has_key?(key)\n\n
include? ActiveSupport::HashWithIndifferentAccess.include?(key)\n\n
key? ActiveSupport::HashWithIndifferentAccess.key?(key)\nChecks the hash for a key matching the argument passed in:\n\n  hash = HashWithIndifferentAccess.new\n  hash["key"] = "value"\n  hash.key? :key  # => true\n  hash.key? "key" # => true\n
member? ActiveSupport::HashWithIndifferentAccess.member?(key)\n\n
merge ActiveSupport::HashWithIndifferentAccess.merge(hash)\nMerges the instantized and the specified hashes together, giving precedence\nto the values from the second hash\nDoes not overwrite the existing hash.\n
merge! ActiveSupport::HashWithIndifferentAccess.merge!(other_hash)\n\n
regular_update ActiveSupport::HashWithIndifferentAccess.regular_update(other_hash)\n\n
regular_writer ActiveSupport::HashWithIndifferentAccess.regular_writer(key, value)\n\n
reverse_merge ActiveSupport::HashWithIndifferentAccess.reverse_merge(other_hash)\nPerforms the opposite of merge, with the keys and values from the first hash\ntaking precedence over the second.\nThis overloaded definition prevents returning a regular hash, if reverse_merge\nis called on a HashWithDifferentAccess.\n
reverse_merge! ActiveSupport::HashWithIndifferentAccess.reverse_merge!(other_hash)\n\n
store ActiveSupport::HashWithIndifferentAccess.store(key, value)\n\n
stringify_keys ActiveSupport::HashWithIndifferentAccess.stringify_keys()\n\n
stringify_keys! ActiveSupport::HashWithIndifferentAccess.stringify_keys!()\n\n
symbolize_keys ActiveSupport::HashWithIndifferentAccess.symbolize_keys()\n\n
to_hash ActiveSupport::HashWithIndifferentAccess.to_hash()\nConvert to a Hash with String keys.\n
to_options! ActiveSupport::HashWithIndifferentAccess.to_options!()\n\n
update ActiveSupport::HashWithIndifferentAccess.update(other_hash)\nUpdates the instantized hash with values from the second:\n\n  hash_1 = HashWithIndifferentAccess.new\n  hash_1[:key] = "value"\n\n  hash_2 = HashWithIndifferentAccess.new\n  hash_2[:key] = "New Value!"\n\n  hash_1.update(hash_2) # => {"key"=>"New Value!"}\n
values_at ActiveSupport::HashWithIndifferentAccess.values_at(*indices)\nReturns an array of the values at the specified indices:\n\n  hash = HashWithIndifferentAccess.new\n  hash[:a] = "x"\n  hash[:b] = "y"\n  hash.values_at("a", "b") # => ["x", "y"]\n
new ActiveSupport::HashWithIndifferentAccess.new(constructor = {})\n\n
new_from_hash_copying_default ActiveSupport::HashWithIndifferentAccess.new_from_hash_copying_default(hash)\n\n
convert_key ActiveSupport::HashWithIndifferentAccess.convert_key(key)\n\n
convert_value ActiveSupport::HashWithIndifferentAccess.convert_value(value)\n\n
default ActiveSupport::HashWithIndifferentAccess.default(key = nil)\n\n
delete ActiveSupport::HashWithIndifferentAccess.delete(key)\nRemoves a specified key from the hash.\n
dup ActiveSupport::HashWithIndifferentAccess.dup()\nReturns an exact copy of the hash.\n
extractable_options? ActiveSupport::HashWithIndifferentAccess.extractable_options?()\n\n
fetch ActiveSupport::HashWithIndifferentAccess.fetch(key, *extras)\nFetches the value for the specified key, same as doing hash[key]\n
has_key? ActiveSupport::HashWithIndifferentAccess.has_key?(key)\n\n
include? ActiveSupport::HashWithIndifferentAccess.include?(key)\n\n
key? ActiveSupport::HashWithIndifferentAccess.key?(key)\nChecks the hash for a key matching the argument passed in:\n\n  hash = HashWithIndifferentAccess.new\n  hash["key"] = "value"\n  hash.key? :key  # => true\n  hash.key? "key" # => true\n
member? ActiveSupport::HashWithIndifferentAccess.member?(key)\n\n
merge ActiveSupport::HashWithIndifferentAccess.merge(hash)\nMerges the instantized and the specified hashes together, giving precedence\nto the values from the second hash\nDoes not overwrite the existing hash.\n
merge! ActiveSupport::HashWithIndifferentAccess.merge!(other_hash)\n\n
regular_update ActiveSupport::HashWithIndifferentAccess.regular_update(other_hash)\n\n
regular_writer ActiveSupport::HashWithIndifferentAccess.regular_writer(key, value)\n\n
reverse_merge ActiveSupport::HashWithIndifferentAccess.reverse_merge(other_hash)\nPerforms the opposite of merge, with the keys and values from the first hash\ntaking precedence over the second.\nThis overloaded definition prevents returning a regular hash, if reverse_merge\nis called on a HashWithDifferentAccess.\n
reverse_merge! ActiveSupport::HashWithIndifferentAccess.reverse_merge!(other_hash)\n\n
store ActiveSupport::HashWithIndifferentAccess.store(key, value)\n\n
stringify_keys ActiveSupport::HashWithIndifferentAccess.stringify_keys()\n\n
stringify_keys! ActiveSupport::HashWithIndifferentAccess.stringify_keys!()\n\n
symbolize_keys ActiveSupport::HashWithIndifferentAccess.symbolize_keys()\n\n
to_hash ActiveSupport::HashWithIndifferentAccess.to_hash()\nConvert to a Hash with String keys.\n
to_options! ActiveSupport::HashWithIndifferentAccess.to_options!()\n\n
update ActiveSupport::HashWithIndifferentAccess.update(other_hash)\nUpdates the instantized hash with values from the second:\n\n  hash_1 = HashWithIndifferentAccess.new\n  hash_1[:key] = "value"\n\n  hash_2 = HashWithIndifferentAccess.new\n  hash_2[:key] = "New Value!"\n\n  hash_1.update(hash_2) # => {"key"=>"New Value!"}\n
values_at ActiveSupport::HashWithIndifferentAccess.values_at(*indices)\nReturns an array of the values at the specified indices:\n\n  hash = HashWithIndifferentAccess.new\n  hash[:a] = "x"\n  hash[:b] = "y"\n  hash.values_at("a", "b") # => ["x", "y"]\n
new ActiveSupport::Callbacks::Callback.new(chain, filter, kind, options, klass)\n\n
_compile_filter ActiveSupport::Callbacks::Callback._compile_filter(filter)\nFilters support:\n\n  Arrays::  Used in conditions. This is used to specify\n            multiple conditions. Used internally to\n            merge conditions from skip_* filters\n  Symbols:: A method to call\n  Strings:: Some content to evaluate\n  Procs::   A proc to call with the object\n  Objects:: An object with a before_foo method on it to call\n\nAll of these objects are compiled into methods and handled\nthe same after this point:\n\n  Arrays::  Merged together into a single filter\n  Symbols:: Already methods\n  Strings:: class_eval'ed into methods\n  Procs::   define_method'ed into methods\n  Objects::\n    a method is created that calls the before_foo method\n    on the object.\n
_compile_options ActiveSupport::Callbacks::Callback._compile_options(options)\nOptions support the same options as filters themselves (and support\nsymbols, string, procs, and objects), so compile a conditional\nexpression based on the options\n
_compile_per_key_options ActiveSupport::Callbacks::Callback._compile_per_key_options()\n\n
_normalize_legacy_filter ActiveSupport::Callbacks::Callback._normalize_legacy_filter(kind, filter)\n\n
_update_filter ActiveSupport::Callbacks::Callback._update_filter(filter_options, new_options)\n\n
clone ActiveSupport::Callbacks::Callback.clone(chain, klass)\n\n
end ActiveSupport::Callbacks::Callback.end(key=nil, object=nil)\nThis will supply contents for around and after filters, but not\nbefore filters (for the backward pass).\n
matches? ActiveSupport::Callbacks::Callback.matches?(_kind, _filter)\n\n
name ActiveSupport::Callbacks::Callback.name()\n\n
next_id ActiveSupport::Callbacks::Callback.next_id()\n\n
normalize_options! ActiveSupport::Callbacks::Callback.normalize_options!(options)\n\n
recompile! ActiveSupport::Callbacks::Callback.recompile!(_options, _per_key)\n\n
start ActiveSupport::Callbacks::Callback.start(key=nil, object=nil)\nThis will supply contents for before and around filters, and no\ncontents for after filters (for the forward pass).\n
new ActiveSupport::Callbacks::CallbackChain.new(name, config)\n\n
compile ActiveSupport::Callbacks::CallbackChain.compile(key=nil, object=nil)\n\n
new ActiveSupport::MessageEncryptor.new(secret, cipher = 'aes-256-cbc')\n\n
decrypt ActiveSupport::MessageEncryptor.decrypt(encrypted_message)\n\n
decrypt_and_verify ActiveSupport::MessageEncryptor.decrypt_and_verify(value)\n\n
encrypt ActiveSupport::MessageEncryptor.encrypt(value)\n\n
encrypt_and_sign ActiveSupport::MessageEncryptor.encrypt_and_sign(value)\n\n
new_cipher ActiveSupport::MessageEncryptor.new_cipher()\n\n
verifier ActiveSupport::MessageEncryptor.verifier()\n\n
call Logger::SimpleFormatter.call(severity, timestamp, progname, msg)\nThis method is invoked when a log event occurs\n
_original_to_s BigDecimal._original_to_s(format = DEFAULT_STRING_FORMAT)\n\n
as_json BigDecimal.as_json(options = nil)\nA BigDecimal would be naturally represented as a JSON number. Most libraries,\nhowever, parse non-integer JSON numbers directly as floats. Clients using\nthose libraries would get in general a wrong number and no way to recover\nother than manually inspecting the string with the JSON code itself.\n\nThat's why a JSON string is returned. The JSON literal is not numeric, but if\nthe other end knows by contract that the data is supposed to be a BigDecimal,\nit still has the chance to post-process the string and get the real value.\n
to_d BigDecimal.to_d()\n\n
to_formatted_s BigDecimal.to_formatted_s(format = DEFAULT_STRING_FORMAT)\n\n
to_s BigDecimal.to_s(format = DEFAULT_STRING_FORMAT)\n\n
to_yaml BigDecimal.to_yaml(opts = {})\nThis emits the number without any scientific notation.\nThis is better than self.to_f.to_s since it doesn't lose precision.\n\nNote that reconstituting YAML floats to native floats may lose precision.\n
precisionless_round Float.precisionless_round(precision = nil)\n\n
round Float.round(precision = nil)\nRounds the float with the specified precision.\n\n  x = 1.337\n  x.round    # => 1\n  x.round(1) # => 1.3\n  x.round(2) # => 1.34\n
civil_from_format DateTime.civil_from_format(utc_or_local, year, month=1, day=1, hour=0,\nmin=0, sec=0)\n\n
current DateTime.current()\n\n
local_offset DateTime.local_offset()\nDateTimes aren't aware of DST rules, so use a consistent non-DST offset when\ncreating a DateTime with an offset in the local zone\n
acts_like_date? DateTime.acts_like_date?()\nDuck-types as a Date-like class. See Object#acts_like?.\n
acts_like_time? DateTime.acts_like_time?()\nDuck-types as a Time-like class. See Object#acts_like?.\n
advance DateTime.advance(options)\nUses Date to provide precise Time calculations for years, months, and days.\nThe +options+ parameter takes a hash with any of these keys: <tt>:years</tt>,\n<tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>, <tt>:hours</tt>,\n<tt>:minutes</tt>, <tt>:seconds</tt>.\n
ago DateTime.ago(seconds)\nReturns a new DateTime representing the time a number of seconds ago\nDo not use this method in combination with x.months, use months_ago instead!\n
at_beginning_of_day DateTime.at_beginning_of_day()\n\n
at_midnight DateTime.at_midnight()\n\n
beginning_of_day DateTime.beginning_of_day()\nReturns a new DateTime representing the start of the day (0:00)\n
change DateTime.change(options)\nReturns a new DateTime where one or more of the elements have been changed\naccording to the +options+ parameter. The time options\n(hour, minute, sec) reset cascadingly, so if only the hour is passed, then\nminute and sec is set to 0. If the hour and\nminute is passed, then sec is set to 0.\n
compare_with_coercion DateTime.compare_with_coercion(other)\nLayers additional behavior on DateTime#<=> so that Time and\nActiveSupport::TimeWithZone instances can be compared with a DateTime\n
compare_without_coercion DateTime.compare_without_coercion(other)\n\n
default_inspect DateTime.default_inspect()\n\n
end_of_day DateTime.end_of_day()\nReturns a new DateTime representing the end of the day (23:59:59)\n
formatted_offset DateTime.formatted_offset(colon = true, alternate_utc_string = nil)\nReturns the +utc_offset+ as an +HH:MM formatted string. Examples:\n\n  datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24))\n  datetime.formatted_offset         # => "-06:00"\n  datetime.formatted_offset(false)  # => "-0600"\n
future? DateTime.future?()\nTells whether the DateTime object's datetime lies in the future\n
getutc DateTime.getutc()\n\n
in DateTime.in(seconds)\n\n
in_time_zone DateTime.in_time_zone(zone = ::Time.zone)\nReturns the simultaneous time in <tt>Time.zone</tt>.\n\n  Time.zone = 'Hawaii'             # => 'Hawaii'\n  DateTime.new(2000).in_time_zone  # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n\nThis method is similar to Time#localtime, except that it uses\n<tt>Time.zone</tt> as the local zone\ninstead of the operating system's time zone.\n\nYou can also pass in a TimeZone instance or string that identifies a TimeZone\nas an argument,\nand the conversion will be based on that zone instead of <tt>Time.zone</tt>.\n\n  DateTime.new(2000).in_time_zone('Alaska')  # => Fri, 31 Dec 1999 15:00:00\n  AKST -09:00\n
inspect DateTime.inspect()\n\n
midnight DateTime.midnight()\n\n
past? DateTime.past?()\nTells whether the DateTime object's datetime lies in the past\n
readable_inspect DateTime.readable_inspect()\nOverrides the default inspect method with a human readable one, e.g., "Mon,\n21 Feb 2005 14:30:00 +0000"\n
seconds_since_midnight DateTime.seconds_since_midnight()\nSeconds since midnight: DateTime.now.seconds_since_midnight\n
seconds_since_unix_epoch DateTime.seconds_since_unix_epoch()\n\n
since DateTime.since(seconds)\nReturns a new DateTime representing the time a number of seconds since the\ninstance time\nDo not use this method in combination with x.months, use months_since instead!\n
to_date DateTime.to_date()\nConverts self to a Ruby Date object; time portion is discarded\n
to_datetime DateTime.to_datetime()\nTo be able to keep Times, Dates and DateTimes interchangeable on conversions\n
to_default_s DateTime.to_default_s(format = :default)\n\n
to_f DateTime.to_f()\nConverts self to a floating-point number of seconds since the Unix epoch\n
to_formatted_s DateTime.to_formatted_s(format = :default)\nConvert to a formatted string. See Time::DATE_FORMATS for predefined formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n=== Examples\n  datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # => Tue, 04 Dec 2007\n  00:00:00 +0000\n\n  datetime.to_formatted_s(:db)            # => "2007-12-04 00:00:00"\n  datetime.to_s(:db)                      # => "2007-12-04 00:00:00"\n  datetime.to_s(:number)                  # => "20071204000000"\n  datetime.to_formatted_s(:short)         # => "04 Dec 00:00"\n  datetime.to_formatted_s(:long)          # => "December 04, 2007 00:00"\n  datetime.to_formatted_s(:long_ordinal)  # => "December 4th, 2007 00:00"\n  datetime.to_formatted_s(:rfc822)        # => "Tue, 04 Dec 2007 00:00:00\n  +0000"\n\n== Adding your own datetime formats to to_formatted_s\nDateTime formats are shared with Time. You can add your own to the\nTime::DATE_FORMATS hash. Use the format name as the hash key and\neither a strftime string or Proc instance that takes a time or\ndatetime argument as the value.\n config/initializers/time_formats.rb\n  Time::DATE_FORMATS[:month_and_year] = "%B %Y"\n  Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime("%B\n  #{time.day.ordinalize}") }\n
to_i DateTime.to_i()\nConverts self to an integer number of seconds since the Unix epoch\n
to_s DateTime.to_s(format = :default)\n\n
to_time DateTime.to_time()\nAttempts to convert self to a Ruby Time object; returns self if out of range\nof Ruby Time class\nIf self has an offset other than 0, self will just be returned unaltered,\nsince there's no clean way to map it to a Time\n
utc DateTime.utc()\nAdjusts DateTime to UTC by adding its offset value; offset is set to 0\n\nExample:\n\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24))       # => Mon,\n  21 Feb 2005 10:11:12 -0600\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc   # => Mon,\n  21 Feb 2005 16:11:12 +0000\n
utc? DateTime.utc?()\nReturns true if offset == 0\n
utc_offset DateTime.utc_offset()\nReturns the offset value in seconds\n
xmlschema DateTime.xmlschema()\nConverts datetime to an appropriate format for use in XML\n
is_missing? LoadError.is_missing?(location)\n\n
path LoadError.path()\n\n
is_missing? LoadError.is_missing?(location)\n\n
path LoadError.path()\n\n
month Integer.month()\n\n
months Integer.months()\nEnables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n\nThese methods use Time#advance for precise date calculations when using\nfrom_now, ago, etc.\nas well as adding or subtracting their results from a Time object. For example:\n equivalent to Time.now.advance(:months => 1)\n  1.month.from_now\n equivalent to Time.now.advance(:years => 2)\n  2.years.from_now\n equivalent to Time.now.advance(:months => 4, :years => 5)\n  (4.months + 5.years).from_now\n\nWhile these methods provide precise calculation when used as in the examples\nabove, care\nshould be taken to note that this is not true if the result of `months',\n`years', etc is\nconverted before use:\n equivalent to 30.days.to_i.from_now\n  1.month.to_i.from_now\n equivalent to 365.25.days.to_f.from_now\n  1.year.to_f.from_now\n\nIn such cases, Ruby's core\nDate[http://stdlib.rubyonrails.org/libdoc/date/rdoc/index.html] and\nTime[http://stdlib.rubyonrails.org/libdoc/time/rdoc/index.html] should be\nused for precision\ndate and time arithmetic\n
multiple_of? Integer.multiple_of?(number)\nCheck whether the integer is evenly divisible by the argument.\n
ordinalize Integer.ordinalize()\nOrdinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such as 1st, 2nd, 3rd, 4th.\n\n  1.ordinalize    # => "1st"\n  2.ordinalize    # => "2nd"\n  1002.ordinalize # => "1002nd"\n  1003.ordinalize # => "1003rd"\n
year Integer.year()\n\n
years Integer.years()\n\n
atomic_write File.atomic_write(file_name, temp_dir = Dir.tmpdir)\nWrite to a file atomically.  Useful for situations where you don't\nwant other processes or threads to see half-written files.\n\n  File.atomic_write("important.file") do |file|\n    file.write("hello")\n  end\n\nIf your temp directory is not on the same filesystem as the file you're\ntrying to write, you can provide a different temporary directory.\n\n  File.atomic_write("/data/something.important", "/data/tmp") do |file|\n    file.write("hello")\n  end\n
missing_name NameError.missing_name()\nExtract the name of the missing constant from the exception message.\n
missing_name? NameError.missing_name?(name)\nWas this exception raised because the given name was missing?\n
acts_like? Object.acts_like?(duck)\nA duck-type assistant method. For example, Active Support extends Date\nto define an acts_like_date? method, and extends Time to define\nacts_like_time?. As a result, we can do "x.acts_like?(:time)" and\n"x.acts_like?(:date)" to do duck-type-safe comparisons, since classes that\nwe want to act like Time simply need to define an acts_like_time? method.\n
app Object.app(create=false)\nreference the global "app" instance, created on demand. To recreate the\ninstance, pass a non-false value as the parameter.\n
blank? Object.blank?()\nAn object is blank if it's false, empty, or a whitespace string.\nFor example, "", "   ", +nil+, [], and {} are blank.\n\nThis simplifies:\n\n  if !address.nil? && !address.empty?\n\n...to:\n\n  if !address.blank?\n
controller Object.controller()\n\n
create_fixtures Object.create_fixtures(*table_names, &block)\n\n
duplicable? Object.duplicable?()\nCan you safely .dup this object?\nFalse for nil, false, true, symbols, numbers, class and module objects;\ntrue otherwise.\n
helper Object.helper()\n\n
html_safe? Object.html_safe?()\n\n
instance_variable_names Object.instance_variable_names()\n\n
new_session Object.new_session()\ncreate a new session. If a block is given, the new session will be yielded\nto the block before being returned.\n
presence Object.presence()\nReturns object if it's #present? otherwise returns nil.\nobject.presence is equivalent to object.present? ? object : nil.\n\nThis is handy for any representation of objects where blank is the same\nas not present at all.  For example, this simplifies a common check for\nHTTP POST/query parameters:\n\n  state   = params[:state]   if params[:state].present?\n  country = params[:country] if params[:country].present?\n  region  = state || country || 'US'\n\n...becomes:\n\n  region = params[:state].presence || params[:country].presence || 'US'\n
present? Object.present?()\nAn object is present if it's not blank.\n
reload! Object.reload!(print=true)\nreloads the environment\n
returning Object.returning(value)\nReturns +value+ after yielding +value+ to the block. This simplifies the\nprocess of constructing an object, performing work on the object, and then\nreturning the object from a method. It is a Ruby-ized realization of the K\ncombinator, courtesy of Mikael Brockman.\n\n==== Examples\n Without returning\n def foo\n   values = []\n   values << "bar"\n   values << "baz"\n   return values\n end\n\n foo # => ['bar', 'baz']\n returning with a local variable\n def foo\n   returning values = [] do\n     values << 'bar'\n     values << 'baz'\n   end\n end\n\n foo # => ['bar', 'baz']\n returning with a block argument\n def foo\n   returning [] do |values|\n     values << 'bar'\n     values << 'baz'\n   end\n end\n\n foo # => ['bar', 'baz']\n
to_param Object.to_param()\nAlias of <tt>to_s</tt>.\n
to_query Object.to_query(key)\nConverts an object into a string suitable for use as a URL query string,\nusing the given <tt>key</tt> as the\nparam name.\n\nNote: This method is defined as a default implementation for all Objects\nfor Hash#to_query to work.\n
try Object.try(method, *args, &block)\nInvokes the method identified by the symbol +method+, passing it any arguments\nand/or the block specified, just like the regular Ruby <tt>Object#send</tt>\ndoes.\n\n*Unlike* that method however, a +NoMethodError+ exception will *not* be raised\nand +nil+ will be returned instead, if the receiving object is a +nil+\nobject or NilClass.\n\n==== Examples\n\nWithout try\n  @person && @person.name\nor\n  @person ? @person.name : nil\n\nWith try\n  @person.try(:name)\n\n+try+ also accepts arguments and/or a block, for the method it is trying\n  Person.try(:find, 1)\n  @people.try(:collect) {|p| p.name}\n
unescape Object.unescape(str, escaped = /%[a-fA-F\d]{2}/)\n\n
with_options Object.with_options(options)\nAn elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called in the block, with the block variable as\nthe receiver, will have its options merged with the default +options+ hash\nprovided. Each method called on the block variable must take an options\nhash as its final argument.\n\n  with_options :order => 'created_at', :class_name => 'Comment' do |post|\n    post.has_many :comments, :conditions => ['approved = ?', true], :dependent\n    => :delete_all\n    post.has_many :unapproved_comments, :conditions => ['approved = ?', false]\n    post.has_many :all_comments\n  end\n\nCan also be used with an explicit receiver:\n\n  map.with_options :controller => "people" do |people|\n    people.connect "/people",     :action => "index"\n    people.connect "/people/:id", :action => "show"\n  end\n
html_safe? Fixnum.html_safe?()\n\n
concat ActiveSupport::SafeBuffer.concat(value)\n\n
html_safe ActiveSupport::SafeBuffer.html_safe()\n\n
html_safe? ActiveSupport::SafeBuffer.html_safe?()\n\n
safe_concat ActiveSupport::SafeBuffer.safe_concat(value)\n\n
to_s ActiveSupport::SafeBuffer.to_s()\n\n
to_yaml ActiveSupport::SafeBuffer.to_yaml(*args)\n\n
_load Time._load(marshaled_time)\n\n
_load Time._load(marshaled_time)\n\n
_load_without_utc_flag Time._load_without_utc_flag(marshaled_time)\n\n
_load_without_zone Time._load_without_zone(marshaled_time)\n\n
current Time.current()\nReturns <tt>Time.zone.now</tt> when <tt>config.time_zone</tt> is set,\notherwise just returns <tt>Time.now</tt>.\n
days_in_month Time.days_in_month(month, year = now.year)\nReturn the number of days in the given month.\nIf no year is specified, it will use the current year.\n
get_zone Time.get_zone(time_zone)\n\n
local_time Time.local_time(*args)\nWraps class method +time_with_datetime_fallback+ with +utc_or_local+ set\nto <tt>:local</tt>.\n
time_with_datetime_fallback Time.time_with_datetime_fallback(utc_or_local, year, month=1, day=1, hour=0,\nmin=0, sec=0, usec=0)\nReturns a new Time if requested year can be accommodated by Ruby's Time class\n(i.e., if year is within either 1970..2038 or 1902..2038, depending on\nsystem architecture);\notherwise returns a DateTime\n
use_zone Time.use_zone(time_zone)\nAllows override of <tt>Time.zone</tt> locally inside supplied block; resets\n<tt>Time.zone</tt> to existing value when done.\n
utc_time Time.utc_time(*args)\nWraps class method +time_with_datetime_fallback+ with +utc_or_local+ set\nto <tt>:utc</tt>.\n
zone Time.zone()\nReturns the TimeZone for the current request, if this has been set (via\nTime.zone=).\nIf <tt>Time.zone</tt> has not been set for the current request, returns the\nTimeZone specified in <tt>config.time_zone</tt>.\n
zone= Time.zone=(time_zone)\nSets <tt>Time.zone</tt> to a TimeZone object for the current request/thread.\n\nThis method accepts any of the following:\n\n* A Rails TimeZone object.\n* An identifier for a Rails TimeZone object (e.g., "Eastern Time (US &\nCanada)", <tt>-5.hours</tt>).\n* A TZInfo::Timezone object.\n* An identifier for a TZInfo::Timezone object (e.g., "America/New_York").\n\nHere's an example of how you might set <tt>Time.zone</tt> on a per request\nbasis -- <tt>current_user.time_zone</tt>\njust needs to return a string identifying the user's preferred TimeZone:\n\n  class ApplicationController < ActionController::Base\n    before_filter :set_time_zone\n\n    def set_time_zone\n      Time.zone = current_user.time_zone\n    end\n  end\n
_dump Time._dump(*args)\n\n
_dump Time._dump(*args)\n\n
_dump_without_utc_flag Time._dump_without_utc_flag(*args)\n\n
_dump_without_zone Time._dump_without_zone(*args)\n\n
acts_like_time? Time.acts_like_time?()\nDuck-types as a Time-like class. See Object#acts_like?.\n
advance Time.advance(options)\nUses Date to provide precise Time calculations for years, months, and days.\nThe +options+ parameter takes a hash with any of these keys: <tt>:years</tt>,\n<tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>, <tt>:hours</tt>,\n<tt>:minutes</tt>, <tt>:seconds</tt>.\n
ago Time.ago(seconds)\nReturns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around the Numeric extension\n
at_beginning_of_day Time.at_beginning_of_day()\n\n
at_beginning_of_month Time.at_beginning_of_month()\n\n
at_beginning_of_quarter Time.at_beginning_of_quarter()\n\n
at_beginning_of_week Time.at_beginning_of_week()\n\n
at_beginning_of_year Time.at_beginning_of_year()\n\n
at_end_of_month Time.at_end_of_month()\n\n
at_end_of_quarter Time.at_end_of_quarter()\n\n
at_end_of_week Time.at_end_of_week()\n\n
at_end_of_year Time.at_end_of_year()\n\n
at_midnight Time.at_midnight()\n\n
beginning_of_day Time.beginning_of_day()\nReturns a new Time representing the start of the day (0:00)\n
beginning_of_month Time.beginning_of_month()\nReturns a new Time representing the start of the month (1st of the month, 0:00)\n
beginning_of_quarter Time.beginning_of_quarter()\nReturns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00)\n
beginning_of_week Time.beginning_of_week()\nReturns a new Time representing the "start" of this week (Monday, 0:00)\n
beginning_of_year Time.beginning_of_year()\nReturns  a new Time representing the start of the year (1st of january, 0:00)\n
change Time.change(options)\nReturns a new Time where one or more of the elements have been changed\naccording to the +options+ parameter. The time options\n(hour, minute, sec, usec) reset cascadingly, so if only the hour is passed,\nthen minute, sec, and usec is set to 0. If the hour and\nminute is passed, then sec and usec is set to 0.\n
compare_with_coercion Time.compare_with_coercion(other)\nLayers additional behavior on Time#<=> so that DateTime and\nActiveSupport::TimeWithZone instances\ncan be chronologically compared with a Time\n
compare_without_coercion Time.compare_without_coercion(other)\n\n
end_of_day Time.end_of_day()\nReturns a new Time representing the end of the day, 23:59:59.999999 (.999999999\nin ruby1.9)\n
end_of_month Time.end_of_month()\nReturns a new Time representing the end of the month (end of the last day\nof the month)\n
end_of_quarter Time.end_of_quarter()\nReturns a new Time representing the end of the quarter (end of the last day\nof march, june, september, december)\n
end_of_week Time.end_of_week()\nReturns a new Time representing the end of this week, (end of Sunday)\n
end_of_year Time.end_of_year()\nReturns a new Time representing the end of the year (end of the 31st of\ndecember)\n
formatted_offset Time.formatted_offset(colon = true, alternate_utc_string = nil)\nReturns the UTC offset as an +HH:MM formatted string.\n\n  Time.local(2000).formatted_offset         # => "-06:00"\n  Time.local(2000).formatted_offset(false)  # => "-0600"\n
future? Time.future?()\nTells whether the Time object's time lies in the future\n
in Time.in(seconds)\n\n
in_time_zone Time.in_time_zone(zone = ::Time.zone)\nReturns the simultaneous time in <tt>Time.zone</tt>.\n\n  Time.zone = 'Hawaii'         # => 'Hawaii'\n  Time.utc(2000).in_time_zone  # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n\nThis method is similar to Time#localtime, except that it uses\n<tt>Time.zone</tt> as the local zone\ninstead of the operating system's time zone.\n\nYou can also pass in a TimeZone instance or string that identifies a TimeZone\nas an argument,\nand the conversion will be based on that zone instead of <tt>Time.zone</tt>.\n\n  Time.utc(2000).in_time_zone('Alaska')  # => Fri, 31 Dec 1999 15:00:00\n  AKST -09:00\n
midnight Time.midnight()\n\n
minus_with_coercion Time.minus_with_coercion(other)\nTime#- can also be used to determine the number of seconds between two\nTime instances.\nWe're layering on additional behavior so that ActiveSupport::TimeWithZone\ninstances\nare coerced into values that Time#- will recognize\n
minus_without_coercion Time.minus_without_coercion(other)\n\n
minus_without_duration Time.minus_without_duration(other)\n\n
monday Time.monday()\n\n
months_ago Time.months_ago(months)\nReturns a new Time representing the time a number of specified months ago\n
months_since Time.months_since(months)\nReturns a new Time representing the time a number of specified months in\nthe future\n
next_month Time.next_month()\nShort-hand for months_since(1)\n
next_week Time.next_week(day = :monday)\nReturns a new Time representing the start of the given day in next week\n(default is Monday).\n
next_year Time.next_year()\nShort-hand for years_since(1)\n
past? Time.past?()\nTells whether the Time object's time lies in the past\n
prev_month Time.prev_month()\nShort-hand for months_ago(1)\n
prev_year Time.prev_year()\nShort-hand for years_ago(1)\n
seconds_since_midnight Time.seconds_since_midnight()\nSeconds since midnight: Time.now.seconds_since_midnight\n
since Time.since(seconds)\nReturns a new Time representing the time a number of seconds since the\ninstance time\n
to_date Time.to_date()\nConverts a Time object to a Date, dropping hour, minute, and second precision.\n\n  my_time = Time.now  # => Mon Nov 12 22:59:51 -0500 2007\n  my_time.to_date     # => Mon, 12 Nov 2007\n\n  your_time = Time.parse("1/13/2009 1:13:03 P.M.")  # => Tue Jan 13 13:13:03\n  -0500 2009\n  your_time.to_date                                 # => Tue, 13 Jan 2009\n
to_datetime Time.to_datetime()\nConverts a Time instance to a Ruby DateTime instance, preserving UTC offset.\n\n  my_time = Time.now    # => Mon Nov 12 23:04:21 -0500 2007\n  my_time.to_datetime   # => Mon, 12 Nov 2007 23:04:21 -0500\n\n  your_time = Time.parse("1/13/2009 1:13:03 P.M.")  # => Tue Jan 13 13:13:03\n  -0500 2009\n  your_time.to_datetime                             # => Tue, 13 Jan 2009\n  13:13:03 -0500\n
to_default_s Time.to_default_s(format = :default)\n\n
to_formatted_s Time.to_formatted_s(format = :default)\nConverts to a formatted string. See DATE_FORMATS for builtin formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n  time = Time.now                     # => Thu Jan 18 06:10:17 CST 2007\n\n  time.to_formatted_s(:time)          # => "06:10:17"\n  time.to_s(:time)                    # => "06:10:17"\n\n  time.to_formatted_s(:db)            # => "2007-01-18 06:10:17"\n  time.to_formatted_s(:number)        # => "20070118061017"\n  time.to_formatted_s(:short)         # => "18 Jan 06:10"\n  time.to_formatted_s(:long)          # => "January 18, 2007 06:10"\n  time.to_formatted_s(:long_ordinal)  # => "January 18th, 2007 06:10"\n  time.to_formatted_s(:rfc822)        # => "Thu, 18 Jan 2007 06:10:17 -0600"\n\n== Adding your own time formats to +to_formatted_s+\nYou can add your own formats to the Time::DATE_FORMATS hash.\nUse the format name as the hash key and either a strftime string\nor Proc instance that takes a time argument as the value.\n config/initializers/time_formats.rb\n  Time::DATE_FORMATS[:month_and_year] = "%B %Y"\n  Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime("%B\n  #{time.day.ordinalize}") }\n
to_s Time.to_s(format = :default)\n\n
to_time Time.to_time()\nA method to keep Time, Date and DateTime instances interchangeable on\nconversions.\nIn this case, it simply returns +self+.\n
today? Time.today?()\nTells whether the Time object's time is today\n
tomorrow Time.tomorrow()\nConvenience method which returns a new Time representing the time 1 day\nsince the instance time\n
years_ago Time.years_ago(years)\nReturns a new Time representing the time a number of specified years ago\n
years_since Time.years_since(years)\nReturns a new Time representing the time a number of specified years in\nthe future\n
yesterday Time.yesterday()\nConvenience method which returns a new Time representing the time 1 day ago\n
attach_to ActiveSupport::LogSubscriber.attach_to(namespace, log_subscriber=new,\nnotifier=ActiveSupport::Notifications)\n\n
flush_all! ActiveSupport::LogSubscriber.flush_all!()\nFlush all log_subscribers' logger.\n
flushable_loggers ActiveSupport::LogSubscriber.flushable_loggers()\n\n
log_subscribers ActiveSupport::LogSubscriber.log_subscribers()\n\n
logger ActiveSupport::LogSubscriber.logger()\n\n
call ActiveSupport::LogSubscriber.call(message, *args)\n\n
color ActiveSupport::LogSubscriber.color(text, color, bold=false)\nSet color by using a string or one of the defined constants. If a third\noption is set to true, it also adds bold to the string. This is based\non Highline implementation and it automatically appends CLEAR to the end\nof the returned String.\n
new ActiveSupport::LogSubscriber::TestHelper::MockLogger.new(level = DEBUG)\n\n
flush ActiveSupport::LogSubscriber::TestHelper::MockLogger.flush()\n\n
logged ActiveSupport::LogSubscriber::TestHelper::MockLogger.logged(level)\n\n
method_missing ActiveSupport::LogSubscriber::TestHelper::MockLogger.method_missing(level,\nmessage)\n\n
new ActiveSupport::Notifications::Instrumenter.new(notifier)\n\n
instrument ActiveSupport::Notifications::Instrumenter.instrument(name, payload={})\nInstrument the given block by measuring the time taken to execute it\nand publish it. Notice that events get sent even if an error occurs\nin the passed-in block\n
unique_id ActiveSupport::Notifications::Instrumenter.unique_id()\n\n
new ActiveSupport::Notifications::Event.new(name, start, ending, transaction_id,\npayload)\n\n
parent_of? ActiveSupport::Notifications::Event.parent_of?(event)\n\n
new ActiveSupport::Notifications::Fanout.new()\n\n
listeners_for ActiveSupport::Notifications::Fanout.listeners_for(name)\n\n
listening? ActiveSupport::Notifications::Fanout.listening?(name)\n\n
publish ActiveSupport::Notifications::Fanout.publish(name, *args)\n\n
subscribe ActiveSupport::Notifications::Fanout.subscribe(pattern = nil, block = Proc.new)\n\n
unsubscribe ActiveSupport::Notifications::Fanout.unsubscribe(subscriber)\n\n
wait ActiveSupport::Notifications::Fanout.wait()\nThis is a sync queue, so there is not waiting.\n
method_missing ActiveSupport::OrderedOptions.method_missing(name, *args)\n\n
new ActiveSupport::InheritableOptions.new(parent)\n\n
name ActiveSupport::TimeWithZone.name()\n\n
new ActiveSupport::TimeWithZone.new(utc_time, time_zone, local_time = nil,\nperiod = nil)\n\n
acts_like_time? ActiveSupport::TimeWithZone.acts_like_time?()\nSo that +self+ <tt>acts_like?(:time)</tt>.\n
advance ActiveSupport::TimeWithZone.advance(options)\n\n
ago ActiveSupport::TimeWithZone.ago(other)\n\n
as_json ActiveSupport::TimeWithZone.as_json(options = nil)\nCoerces time to a string for JSON encoding. The default format is ISO\n8601. You can get\n%Y/%m/%d %H:%M:%S +offset style by setting\n<tt>ActiveSupport::JSON::Encoding.use_standard_json_time_format</tt>\nto false.\n\n==== Examples\n With ActiveSupport::JSON::Encoding.use_standard_json_time_format = true\n  Time.utc(2005,2,1,15,15,10).in_time_zone.to_json\n => "2005-02-01T15:15:10Z"\n With ActiveSupport::JSON::Encoding.use_standard_json_time_format = false\n  Time.utc(2005,2,1,15,15,10).in_time_zone.to_json\n => "2005/02/01 15:15:10 +0000"\n
between? ActiveSupport::TimeWithZone.between?(min, max)\n\n
comparable_time ActiveSupport::TimeWithZone.comparable_time()\n\n
dst? ActiveSupport::TimeWithZone.dst?()\n\n
duration_of_variable_length? ActiveSupport::TimeWithZone.duration_of_variable_length?(obj)\n\n
eql? ActiveSupport::TimeWithZone.eql?(other)\n\n
formatted_offset ActiveSupport::TimeWithZone.formatted_offset(colon = true, alternate_utc_string\n= nil)\n\n
freeze ActiveSupport::TimeWithZone.freeze()\n\n
future? ActiveSupport::TimeWithZone.future?()\n\n
get_period_and_ensure_valid_local_time ActiveSupport::TimeWithZone.get_period_and_ensure_valid_local_time()\n\n
getgm ActiveSupport::TimeWithZone.getgm()\n\n
getlocal ActiveSupport::TimeWithZone.getlocal()\n\n
getutc ActiveSupport::TimeWithZone.getutc()\n\n
gmt? ActiveSupport::TimeWithZone.gmt?()\n\n
gmt_offset ActiveSupport::TimeWithZone.gmt_offset()\n\n
gmtime ActiveSupport::TimeWithZone.gmtime()\n\n
gmtoff ActiveSupport::TimeWithZone.gmtoff()\n\n
hash ActiveSupport::TimeWithZone.hash()\n\n
httpdate ActiveSupport::TimeWithZone.httpdate()\n\n
in_time_zone ActiveSupport::TimeWithZone.in_time_zone(new_zone = ::Time.zone)\nReturns the simultaneous time in <tt>Time.zone</tt>, or the specified zone.\n
inspect ActiveSupport::TimeWithZone.inspect()\n\n
is_a? ActiveSupport::TimeWithZone.is_a?(klass)\nSay we're a Time to thwart type checking.\n
isdst ActiveSupport::TimeWithZone.isdst()\n\n
iso8601 ActiveSupport::TimeWithZone.iso8601(fraction_digits = 0)\n\n
kind_of? ActiveSupport::TimeWithZone.kind_of?(klass)\n\n
localtime ActiveSupport::TimeWithZone.localtime()\nReturns a <tt>Time.local()</tt> instance of the simultaneous time in your\nsystem's <tt>ENV['TZ']</tt> zone\n
marshal_dump ActiveSupport::TimeWithZone.marshal_dump()\n\n
marshal_load ActiveSupport::TimeWithZone.marshal_load(variables)\n\n
method_missing ActiveSupport::TimeWithZone.method_missing(sym, *args, &block)\nSend the missing method to +time+ instance, and wrap result in a new\nTimeWithZone with the existing +time_zone+.\n
past? ActiveSupport::TimeWithZone.past?()\n\n
period ActiveSupport::TimeWithZone.period()\nReturns the underlying TZInfo::TimezonePeriod.\n
respond_to? ActiveSupport::TimeWithZone.respond_to?(sym, include_priv = false)\nEnsure proxy class responds to all methods that underlying time instance\nresponds to.\n
rfc2822 ActiveSupport::TimeWithZone.rfc2822()\n\n
rfc822 ActiveSupport::TimeWithZone.rfc822()\n\n
since ActiveSupport::TimeWithZone.since(other)\n\n
strftime ActiveSupport::TimeWithZone.strftime(format)\nReplaces <tt>%Z</tt> and <tt>%z</tt> directives with +zone+ and\n+formatted_offset+, respectively, before passing to\nTime#strftime, so that zone information is correct\n
time ActiveSupport::TimeWithZone.time()\nReturns a Time or DateTime instance that represents the time in +time_zone+.\n
to_a ActiveSupport::TimeWithZone.to_a()\n\n
to_datetime ActiveSupport::TimeWithZone.to_datetime()\n\n
to_f ActiveSupport::TimeWithZone.to_f()\n\n
to_formatted_s ActiveSupport::TimeWithZone.to_formatted_s(format = :default)\n\n
to_i ActiveSupport::TimeWithZone.to_i()\n\n
to_s ActiveSupport::TimeWithZone.to_s(format = :default)\n<tt>:db</tt> format outputs time in UTC; all others output time in local.\nUses TimeWithZone's +strftime+, so <tt>%Z</tt> and <tt>%z</tt> work correctly.\n
to_time ActiveSupport::TimeWithZone.to_time()\nA TimeWithZone acts like a Time, so just return +self+.\n
to_yaml ActiveSupport::TimeWithZone.to_yaml(options = {})\n\n
today? ActiveSupport::TimeWithZone.today?()\n\n
transfer_time_values_to_utc_constructor ActiveSupport::TimeWithZone.transfer_time_values_to_utc_constructor(time)\n\n
tv_sec ActiveSupport::TimeWithZone.tv_sec()\n\n
usec ActiveSupport::TimeWithZone.usec()\n\n
utc ActiveSupport::TimeWithZone.utc()\nReturns a Time or DateTime instance that represents the time in UTC.\n
utc? ActiveSupport::TimeWithZone.utc?()\n\n
utc_offset ActiveSupport::TimeWithZone.utc_offset()\n\n
xmlschema ActiveSupport::TimeWithZone.xmlschema(fraction_digits = 0)\n\n
zone ActiveSupport::TimeWithZone.zone()\nTime uses +zone+ to display the time zone abbreviation, so we're duck-typing\nit.\n
new ActiveSupport::Cache::CompressedMemCacheStore.new(*args)\n\n
new ActiveSupport::Cache::Strategy::LocalCache::LocalStore.new()\n\n
clear ActiveSupport::Cache::Strategy::LocalCache::LocalStore.clear(options = nil)\n\n
delete_entry ActiveSupport::Cache::Strategy::LocalCache::LocalStore.delete_entry(key,\noptions)\n\n
read_entry ActiveSupport::Cache::Strategy::LocalCache::LocalStore.read_entry(key, options)\n\n
write_entry ActiveSupport::Cache::Strategy::LocalCache::LocalStore.write_entry(key,\nvalue, options)\n\n
new ActiveSupport::Cache::FileStore.new(cache_path, options = nil)\n\n
cleanup ActiveSupport::Cache::FileStore.cleanup(options = nil)\n\n
clear ActiveSupport::Cache::FileStore.clear(options = nil)\n\n
decrement ActiveSupport::Cache::FileStore.decrement(name, amount = 1, options = nil)\n\n
delete_empty_directories ActiveSupport::Cache::FileStore.delete_empty_directories(dir)\nDelete empty directories in the cache.\n
delete_entry ActiveSupport::Cache::FileStore.delete_entry(key, options)\n\n
delete_matched ActiveSupport::Cache::FileStore.delete_matched(matcher, options = nil)\n\n
ensure_cache_path ActiveSupport::Cache::FileStore.ensure_cache_path(path)\nMake sure a file path's directories exist.\n
file_path_key ActiveSupport::Cache::FileStore.file_path_key(path)\nTranslate a file path into a key.\n
increment ActiveSupport::Cache::FileStore.increment(name, amount = 1, options = nil)\n\n
key_file_path ActiveSupport::Cache::FileStore.key_file_path(key)\nTranslate a key into a file path.\n
read_entry ActiveSupport::Cache::FileStore.read_entry(key, options)\n\n
search_dir ActiveSupport::Cache::FileStore.search_dir(dir, &callback)\n\n
write_entry ActiveSupport::Cache::FileStore.write_entry(key, entry, options)\n\n
new ActiveSupport::Cache::MemoryStore.new(options = nil)\n\n
cleanup ActiveSupport::Cache::MemoryStore.cleanup(options = nil)\n\n
clear ActiveSupport::Cache::MemoryStore.clear(options = nil)\n\n
decrement ActiveSupport::Cache::MemoryStore.decrement(name, amount = 1, options = nil)\nDecrement an integer value in the cache.\n
delete_matched ActiveSupport::Cache::MemoryStore.delete_matched(matcher, options = nil)\n\n
increment ActiveSupport::Cache::MemoryStore.increment(name, amount = 1, options = nil)\nIncrement an integer value in the cache.\n
prune ActiveSupport::Cache::MemoryStore.prune(target_size, max_time = nil)\nTo ensure entries fit within the specified memory prune the cache by removing\nthe least\nrecently accessed entries.\n
pruning? ActiveSupport::Cache::MemoryStore.pruning?()\nReturns true if the cache is currently being pruned.\n
new ActiveSupport::Cache::SynchronizedMemoryStore.new(*args)\n\n
build_mem_cache ActiveSupport::Cache::MemCacheStore.build_mem_cache(*addresses)\n\n
new ActiveSupport::Cache::MemCacheStore.new(*addresses)\nCreates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either a host name, or a host-with-port string\nin the form of "host_name:port". For example:\n\n  ActiveSupport::Cache::MemCacheStore.new("localhost",\n  "server-downstairs.localnetwork:8229")\n\nIf no addresses are specified, then MemCacheStore will connect to\nlocalhost port 11211 (the default memcached port).\n\nInstead of addresses one can pass in a MemCache-like object. For example:\n\n  require 'memcached' # gem install memcached; uses C bindings to libmemcached\n  ActiveSupport::Cache::MemCacheStore.new(Memcached::Rails.new("localhost:11211"))\n
clear ActiveSupport::Cache::MemCacheStore.clear(options = nil)\nClear the entire cache on all memcached servers. This method should\nbe used with care when shared cache is being used.\n
deserialize_entry ActiveSupport::Cache::MemCacheStore.deserialize_entry(raw_value)\n\n
escape_key ActiveSupport::Cache::MemCacheStore.escape_key(key)\n\n
read_multi ActiveSupport::Cache::MemCacheStore.read_multi(*names)\nReads multiple values from the cache using a single call to the\nservers for all keys. Options can be passed in the last argument.\n
stats ActiveSupport::Cache::MemCacheStore.stats()\nGet the statistics from the memcached servers.\n
ago ActiveSupport::Duration.ago(time = ::Time.current)\nCalculates a new Time or Date that is as far in the past\nas this Duration represents.\n
from_now ActiveSupport::Duration.from_now(time = ::Time.current)\n\n
since ActiveSupport::Duration.since(time = ::Time.current)\nCalculates a new Time or Date that is as far in the future\nas this Duration represents.\n
until ActiveSupport::Duration.until(time = ::Time.current)\n\n
method_missing ActiveSupport::StringInquirer.method_missing(method_name, *arguments)\n\n
include_fallbacks_module I18n::Railtie.include_fallbacks_module()\n\n
init_fallbacks I18n::Railtie.init_fallbacks(fallbacks)\n\n
reloader I18n::Railtie.reloader()\n\n
validate_fallbacks I18n::Railtie.validate_fallbacks(fallbacks)\n\n
all ActiveSupport::TimeZone.all()\nReturn an array of all TimeZone objects. There are multiple\nTimeZone objects per time zone, in many cases, to make it easier\nfor users to find their own time zone.\n
create ActiveSupport::TimeZone.create(name)\n\n
find_tzinfo ActiveSupport::TimeZone.find_tzinfo(name)\nTODO: Preload instead of lazy load for thread safety\n
lookup ActiveSupport::TimeZone.lookup(name)\n\n
new ActiveSupport::TimeZone.new(name)\nReturn a TimeZone instance with the given name, or +nil+ if no\nsuch TimeZone instance exists. (This exists to support the use of\nthis class with the +composed_of+ macro.)\n
new ActiveSupport::TimeZone.new(name, utc_offset = nil, tzinfo = nil)\nCreate a new TimeZone object with the given name and offset. The\noffset is the number of seconds that this time zone is offset from UTC\n(GMT). Seconds were chosen as the offset unit because that is the unit that\nRuby uses to represent time zone offsets (see Time#utc_offset).\n
seconds_to_utc_offset ActiveSupport::TimeZone.seconds_to_utc_offset(seconds, colon = true)\nAssumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset)\nand turns this into an +HH:MM formatted string. Example:\n\n  TimeZone.seconds_to_utc_offset(-21_600) # => "-06:00"\n
us_zones ActiveSupport::TimeZone.us_zones()\nA convenience method for returning a collection of TimeZone objects\nfor time zones in the USA.\n
zones_map ActiveSupport::TimeZone.zones_map()\n\n
at ActiveSupport::TimeZone.at(secs)\nMethod for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from number of seconds since the Unix epoch. Example:\n\n  Time.zone = "Hawaii"        # => "Hawaii"\n  Time.utc(2000).to_f         # => 946684800.0\n  Time.zone.at(946684800.0)   # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n
formatted_offset ActiveSupport::TimeZone.formatted_offset(colon=true, alternate_utc_string\n= nil)\nReturns the offset of this time zone as a formatted string, of the\nformat "+HH:MM".\n
local ActiveSupport::TimeZone.local(*args)\nMethod for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from given values. Example:\n\n  Time.zone = "Hawaii"                      # => "Hawaii"\n  Time.zone.local(2007, 2, 1, 15, 30, 45)   # => Thu, 01 Feb 2007 15:30:45\n  HST -10:00\n
local_to_utc ActiveSupport::TimeZone.local_to_utc(time, dst=true)\nAdjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n
now ActiveSupport::TimeZone.now()\nReturns an ActiveSupport::TimeWithZone instance representing the current time\nin the time zone represented by +self+. Example:\n\n  Time.zone = 'Hawaii'  # => "Hawaii"\n  Time.zone.now         # => Wed, 23 Jan 2008 20:24:27 HST -10:00\n
parse ActiveSupport::TimeZone.parse(str, now=now)\nMethod for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from parsed string. Example:\n\n  Time.zone = "Hawaii"                      # => "Hawaii"\n  Time.zone.parse('1999-12-31 14:00:00')    # => Fri, 31 Dec 1999 14:00:00\n  HST -10:00\n\nIf upper components are missing from the string, they are supplied from\nTimeZone#now:\n\n  Time.zone.now                 # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n  Time.zone.parse('22:30:00')   # => Fri, 31 Dec 1999 22:30:00 HST -10:00\n
period_for_local ActiveSupport::TimeZone.period_for_local(time, dst=true)\nAvailable so that TimeZone instances respond like TZInfo::Timezone instances\n
period_for_utc ActiveSupport::TimeZone.period_for_utc(time)\nAvailable so that TimeZone instances respond like TZInfo::Timezone instances\n
to_s ActiveSupport::TimeZone.to_s()\nReturns a textual representation of this time zone.\n
today ActiveSupport::TimeZone.today()\nReturn the current date in this time zone.\n
utc_offset ActiveSupport::TimeZone.utc_offset()\n\n
utc_to_local ActiveSupport::TimeZone.utc_to_local(time)\nAdjust the given time to the simultaneous time in the time zone represented\nby +self+. Returns a\nTime.utc() instance -- if you want an ActiveSupport::TimeWithZone instance,\nuse Time#in_time_zone() instead.\n
dirname ActiveSupport::Multibyte::Unicode::UnicodeDatabase.dirname()\nReturns the directory in which the data files are stored\n
filename ActiveSupport::Multibyte::Unicode::UnicodeDatabase.filename()\nReturns the filename for the data file for this version\n
new ActiveSupport::Multibyte::Unicode::UnicodeDatabase.new()\n\n
load ActiveSupport::Multibyte::Unicode::UnicodeDatabase.load()\nLoads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n
consumes? ActiveSupport::Multibyte::Chars.consumes?(string)\nReturns +true+ when the proxy class can handle the string. Returns +false+\notherwise.\n
new ActiveSupport::Multibyte::Chars.new(string)\nCreates a new Chars instance by wrapping _string_.\n
wants? ActiveSupport::Multibyte::Chars.wants?(string)\nReturns +true+ if the Chars class can and should act as a proxy for the\nstring _string_. Returns\n+false+ otherwise.\n
acts_like_string? ActiveSupport::Multibyte::Chars.acts_like_string?()\nEnable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n
capitalize ActiveSupport::Multibyte::Chars.capitalize()\nConverts the first character to uppercase and the remainder to lowercase.\n\nExample:\n 'über'.mb_chars.capitalize.to_s # => "Über"\n
center ActiveSupport::Multibyte::Chars.center(integer, padstr=' ')\nWorks just like <tt>String#center</tt>, only integer specifies characters\ninstead of bytes.\n\nExample:\n\n  "¾ cup".mb_chars.center(8).to_s\n => " ¾ cup  "\n\n  "¾ cup".mb_chars.center(8, " ").to_s # Use non-breaking whitespace\n => " ¾ cup  "\n
compose ActiveSupport::Multibyte::Chars.compose()\nPerforms composition on all the characters.\n\nExample:\n  'é'.length                       # => 3\n  'é'.mb_chars.compose.to_s.length # => 2\n
decompose ActiveSupport::Multibyte::Chars.decompose()\nPerforms canonical decomposition on all the characters.\n\nExample:\n  'é'.length                         # => 2\n  'é'.mb_chars.decompose.to_s.length # => 3\n
downcase ActiveSupport::Multibyte::Chars.downcase()\nConvert characters in the string to lowercase.\n\nExample:\n  'VĚDA A VÝZKUM'.mb_chars.downcase.to_s # => "věda a výzkum"\n
g_length ActiveSupport::Multibyte::Chars.g_length()\nReturns the number of grapheme clusters in the string.\n\nExample:\n  'क्षि'.mb_chars.length   # => 4\n  'क्षि'.mb_chars.g_length # => 3\n
include? ActiveSupport::Multibyte::Chars.include?(other)\nReturns +true+ if contained string contains _other_. Returns +false+ otherwise.\n\nExample:\n  'Café'.mb_chars.include?('é') # => true\n
index ActiveSupport::Multibyte::Chars.index(needle, offset=0)\nReturns the position _needle_ in the string, counting in codepoints. Returns\n+nil+ if _needle_ isn't found.\n\nExample:\n  'Café périferôl'.mb_chars.index('ô')   # => 12\n  'Café périferôl'.mb_chars.index(/\w/u) # => 0\n
insert ActiveSupport::Multibyte::Chars.insert(offset, fragment)\nInserts the passed string at specified codepoint offsets.\n\nExample:\n  'Café'.mb_chars.insert(4, ' périferôl').to_s # => "Café périferôl"\n
limit ActiveSupport::Multibyte::Chars.limit(limit)\nLimit the byte size of the string to a number of bytes without breaking\ncharacters. Usable\nwhen the storage for a string is limited for some reason.\n\nExample:\n  s = 'こんにちは'\n  s.mb_chars.limit(7) # => "こに"\n
ljust ActiveSupport::Multibyte::Chars.ljust(integer, padstr=' ')\nWorks just like <tt>String#ljust</tt>, only integer specifies characters\ninstead of bytes.\n\nExample:\n\n  "¾ cup".mb_chars.rjust(8).to_s\n => "¾ cup   "\n\n  "¾ cup".mb_chars.rjust(8, " ").to_s # Use non-breaking whitespace\n => "¾ cup   "\n
lstrip ActiveSupport::Multibyte::Chars.lstrip()\nStrips entire range of Unicode whitespace from the left of the string.\n
method_missing ActiveSupport::Multibyte::Chars.method_missing(method, *args, &block)\nForward all undefined methods to the wrapped string.\n
normalize ActiveSupport::Multibyte::Chars.normalize(form = nil)\nReturns the KC normalization of the string by default. NFKC is considered\nthe best normalization form for\npassing strings to databases and validations.\n\n* <tt>form</tt> - The form you want to normalize in. Should be one of the\nfollowing:\n  <tt>:c</tt>, <tt>:kc</tt>, <tt>:d</tt>, or <tt>:kd</tt>. Default is\n  ActiveSupport::Multibyte::Unicode.default_normalization_form\n
ord ActiveSupport::Multibyte::Chars.ord()\nReturns the codepoint of the first character in the string.\n\nExample:\n  'こんにちは'.mb_chars.ord # => 12371\n
respond_to? ActiveSupport::Multibyte::Chars.respond_to?(method, include_private=false)\nReturns +true+ if _obj_ responds to the given method. Private methods are\nincluded in the search\nonly if the optional second parameter evaluates to +true+.\n
reverse ActiveSupport::Multibyte::Chars.reverse()\nReverses all characters in the string.\n\nExample:\n  'Café'.mb_chars.reverse.to_s # => 'éfaC'\n
rindex ActiveSupport::Multibyte::Chars.rindex(needle, offset=nil)\nReturns the position _needle_ in the string, counting in\ncodepoints, searching backward from _offset_ or the end of the\nstring. Returns +nil+ if _needle_ isn't found.\n\nExample:\n  'Café périferôl'.mb_chars.rindex('é')   # => 6\n  'Café périferôl'.mb_chars.rindex(/\w/u) # => 13\n
rjust ActiveSupport::Multibyte::Chars.rjust(integer, padstr=' ')\nWorks just like <tt>String#rjust</tt>, only integer specifies characters\ninstead of bytes.\n\nExample:\n\n  "¾ cup".mb_chars.rjust(8).to_s\n => "   ¾ cup"\n\n  "¾ cup".mb_chars.rjust(8, " ").to_s # Use non-breaking whitespace\n => "   ¾ cup"\n
rstrip ActiveSupport::Multibyte::Chars.rstrip()\nStrips entire range of Unicode whitespace from the right of the string.\n
size ActiveSupport::Multibyte::Chars.size()\nReturns the number of codepoints in the string\n
slice ActiveSupport::Multibyte::Chars.slice(*args)\nImplements Unicode-aware slice with codepoints. Slicing on one point returns\nthe codepoints for that\ncharacter.\n\nExample:\n  'こんにちは'.mb_chars.slice(2..3).to_s # => "にち"\n
split ActiveSupport::Multibyte::Chars.split(*args)\nWorks just like <tt>String#split</tt>, with the exception that the items in\nthe resulting list are Chars\ninstances instead of String. This makes chaining methods easier.\n\nExample:\n  'Café périferôl'.mb_chars.split(/é/).map { |part| part.upcase.to_s }\n  # => ["CAF", " P", "RIFERÔL"]\n
strip ActiveSupport::Multibyte::Chars.strip()\nStrips entire range of Unicode whitespace from the right and left of the\nstring.\n
tidy_bytes ActiveSupport::Multibyte::Chars.tidy_bytes(force = false)\nReplaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string.\n\nPassing +true+ will forcibly tidy all bytes, assuming that the string's\nencoding is entirely CP1252 or ISO-8859-1.\n
titlecase ActiveSupport::Multibyte::Chars.titlecase()\n\n
titleize ActiveSupport::Multibyte::Chars.titleize()\nCapitalizes the first letter of every word, when possible.\n\nExample:\n  "ÉL QUE SE ENTERÓ".mb_chars.titleize    # => "Él Que Se Enteró"\n  "日本語".mb_chars.titleize                 # => "日本語"\n
upcase ActiveSupport::Multibyte::Chars.upcase()\nConvert characters in the string to uppercase.\n\nExample:\n  'Laurent, où sont les tests ?'.mb_chars.upcase.to_s # => "LAURENT, OÙ\n  SONT LES TESTS ?"\n
current_hash ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.current_hash()\n\n
on_cdata_block ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_cdata_block(string)\n\n
on_characters ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_characters(string)\n\n
on_end_document ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_end_document()\n\n
on_end_element ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_end_element(name)\n\n
on_start_document ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_start_document()\n\n
on_start_element ActiveSupport::XmlMini_LibXMLSAX::HashBuilder.on_start_element(name, attrs\n= {})\n\n
cdata_block ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.cdata_block(string)\n\n
characters ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.characters(string)\n\n
current_hash ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.current_hash()\n\n
end_document ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.end_document()\n\n
end_element ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.end_element(name)\n\n
error ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.error(error_message)\n\n
start_document ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.start_document()\n\n
start_element ActiveSupport::XmlMini_NokogiriSAX::HashBuilder.start_element(name, attrs = [])\n\n
as_json ActiveSupport::JSON::Variable.as_json(options = nil)\n\n
encode_json ActiveSupport::JSON::Variable.encode_json(encoder)\n\n
new ActiveSupport::JSON::Encoding::Encoder.new(options = nil)\n\n
as_json ActiveSupport::JSON::Encoding::Encoder.as_json(value)\nlike encode, but only calls as_json, without encoding to string\n
check_for_circular_references ActiveSupport::JSON::Encoding::Encoder.check_for_circular_references(value)\n\n
encode ActiveSupport::JSON::Encoding::Encoder.encode(value, use_options = true)\n\n
escape ActiveSupport::JSON::Encoding::Encoder.escape(string)\n\n
options_for ActiveSupport::JSON::Encoding::Encoder.options_for(value)\n\n
new ActiveSupport::MessageVerifier.new(secret, digest = 'SHA1')\n\n
generate ActiveSupport::MessageVerifier.generate(value)\n\n
generate_digest ActiveSupport::MessageVerifier.generate_digest(data)\n\n
secure_compare ActiveSupport::MessageVerifier.secure_compare(a, b)\nconstant-time comparison algorithm to prevent timing attacks\n
verify ActiveSupport::MessageVerifier.verify(signed_message)\n\n
instrument ActiveSupport::Cache::Store.instrument()\n\n
instrument= ActiveSupport::Cache::Store.instrument=(boolean)\nSet to true if cache stores should be instrumented. Default is false.\n
new ActiveSupport::Cache::Store.new(options = nil)\nCreate a new cache. The options will be passed to any write method calls except\nfor :namespace which can be used to set the global namespace for the cache.\n
cleanup ActiveSupport::Cache::Store.cleanup(options = nil)\nCleanup the cache by removing expired entries.\n\nOptions are passed to the underlying cache implementation.\n\nAll implementations may not support this method.\n
clear ActiveSupport::Cache::Store.clear(options = nil)\nClear the entire cache. Be careful with this method since it could\naffect other processes if shared cache is being used.\n\nOptions are passed to the underlying cache implementation.\n\nAll implementations may not support this method.\n
decrement ActiveSupport::Cache::Store.decrement(name, amount = 1, options = nil)\nIncrement an integer value in the cache.\n\nOptions are passed to the underlying cache implementation.\n\nAll implementations may not support this method.\n
delete ActiveSupport::Cache::Store.delete(name, options = nil)\nDeletes an entry in the cache. Returns +true+ if an entry is deleted.\n\nOptions are passed to the underlying cache implementation.\n
delete_matched ActiveSupport::Cache::Store.delete_matched(matcher, options = nil)\nDelete all entries with keys matching the pattern.\n\nOptions are passed to the underlying cache implementation.\n\nAll implementations may not support this method.\n
exist? ActiveSupport::Cache::Store.exist?(name, options = nil)\nReturn true if the cache contains an entry for the given key.\n\nOptions are passed to the underlying cache implementation.\n
fetch ActiveSupport::Cache::Store.fetch(name, options = nil)\nFetches data from the cache, using the given key. If there is data in\nthe cache with the given key, then that data is returned.\n\nIf there is no such data in the cache (a cache miss occurred),\nthen nil will be returned. However, if a block has been passed, then\nthat block will be run in the event of a cache miss. The return value\nof the block will be written to the cache under the given cache key,\nand that return value will be returned.\n\n  cache.write("today", "Monday")\n  cache.fetch("today")  # => "Monday"\n\n  cache.fetch("city")   # => nil\n  cache.fetch("city") do\n    "Duckburgh"\n  end\n  cache.fetch("city")   # => "Duckburgh"\n\nYou may also specify additional options via the +options+ argument.\nSetting <tt>:force => true</tt> will force a cache miss:\n\n  cache.write("today", "Monday")\n  cache.fetch("today", :force => true)  # => nil\n\nSetting <tt>:compress</tt> will store a large cache entry set by the call\nin a compressed format.\n\n\nSetting <tt>:expires_in</tt> will set an expiration time on the cache. All\ncaches\nsupport auto expiring content after a specified number of seconds. This\nvalue can\nbe specified as an option to the construction in which call all entries will be\naffected. Or it can be supplied to the +fetch+ or +write+ method for just\none entry.\n\n  cache = ActiveSupport::Cache::MemoryStore.new(:expires_in => 5.minutes)\n  cache.write(key, value, :expires_in => 1.minute)  # Set a lower value for\n  one entry\n\nSetting <tt>:race_condition_ttl</tt> is very useful in situations where a\ncache entry\nis used very frequently and is under heavy load. If a cache expires and due\nto heavy load\nseven different processes will try to read data natively and then they all\nwill try to\nwrite to cache. To avoid that case the first process to find an expired\ncache entry will\nbump the cache expiration time by the value set in\n<tt>:race_condition_ttl</tt>. Yes\nthis process is extending the time for a stale value by another few\nseconds. Because\nof extended life of the previous cache, other processes will continue to\nuse slightly\nstale data for a just a big longer. In the meantime that first process will\ngo ahead\nand will write into cache the new value. After that all the processes\nwill start\ngetting new value. The key is to keep <tt>:race_condition_ttl</tt> small.\n\nIf the process regenerating the entry errors out, the entry will be regenerated\nafter the specified number of seconds. Also note that the life of stale\ncache is\nextended only if it expired recently. Otherwise a new value is generated and\n<tt>:race_condition_ttl</tt> does not play any role.\n Set all values to expire after one minute.\n  cache = ActiveSupport::Cache::MemoryCache.new(:expires_in => 1.minute)\n\n  cache.write("foo", "original value")\n  val_1 = nil\n  val_2 = nil\n  sleep 60\n\n  Thread.new do\n    val_1 = cache.fetch("foo", :race_condition_ttl => 10) do\n      sleep 1\n      "new value 1"\n    end\n  end\n\n  Thread.new do\n    val_2 = cache.fetch("foo", :race_condition_ttl => 10) do\n      "new value 2"\n    end\n  end\n val_1 => "new value 1"\n val_2 => "original value"\n sleep 10 # First thread extend the life of cache by another 10 seconds\n cache.fetch("foo") => "new value 1"\n\nOther options will be handled by the specific cache store implementation.\nInternally, #fetch calls #read_entry, and calls #write_entry on a cache miss.\n+options+ will be passed to the #read and #write calls.\n\nFor example, MemCacheStore's #write method supports the +:raw+\noption, which tells the memcached server to store all values as strings.\nWe can use this option with #fetch too:\n\n  cache = ActiveSupport::Cache::MemCacheStore.new\n  cache.fetch("foo", :force => true, :raw => true) do\n    :bar\n  end\n  cache.fetch("foo")  # => "bar"\n
increment ActiveSupport::Cache::Store.increment(name, amount = 1, options = nil)\nIncrement an integer value in the cache.\n\nOptions are passed to the underlying cache implementation.\n\nAll implementations may not support this method.\n
instrument ActiveSupport::Cache::Store.instrument(operation, key, options = nil)\n\n
key_matcher ActiveSupport::Cache::Store.key_matcher(pattern, options)\nAdd the namespace defined in the options to a pattern designed to match keys.\nImplementations that support delete_matched should call this method to\ntranslate\na pattern that matches names into one that matches namespaced keys.\n
log ActiveSupport::Cache::Store.log(operation, key, options = nil)\n\n
mute ActiveSupport::Cache::Store.mute()\nSilence the logger within a block.\n
namespaced_key ActiveSupport::Cache::Store.namespaced_key(key, options)\nPrefix a key with the namespace. Namespace and key will be delimited with\na colon.\n
read ActiveSupport::Cache::Store.read(name, options = nil)\nFetches data from the cache, using the given key. If there is data in\nthe cache with the given key, then that data is returned. Otherwise,\nnil is returned.\n\nOptions are passed to the underlying cache implementation.\n
read_multi ActiveSupport::Cache::Store.read_multi(*names)\nRead multiple values at once from the cache. Options can be passed\nin the last argument.\n\nSome cache implementation may optimize this method.\n\nReturns a hash mapping the names provided to the values found.\n
silence! ActiveSupport::Cache::Store.silence!()\nSilence the logger.\n
write ActiveSupport::Cache::Store.write(name, value, options = nil)\nWrites the value to the cache, with the key.\n\nOptions are passed to the underlying cache implementation.\n
create ActiveSupport::Cache::Entry.create(raw_value, created_at, options = {})\nCreate an entry with internal attributes set. This method is intended to be\nused by implementations that store cache entries in a native format instead\nof as serialized Ruby objects.\n
new ActiveSupport::Cache::Entry.new(value, options = {})\nCreate a new cache entry for the specified value. Options supported are\n+:compress+, +:compress_threshold+, and +:expires_in+.\n
compressed? ActiveSupport::Cache::Entry.compressed?()\n\n
expired? ActiveSupport::Cache::Entry.expired?()\nCheck if the entry is expired. The +expires_in+ parameter can override the\nvalue set when the entry was created.\n
expires_at ActiveSupport::Cache::Entry.expires_at()\nSeconds since the epoch when the entry will expire.\n
expires_at= ActiveSupport::Cache::Entry.expires_at=(time)\nSet a new time when the entry will expire.\n
raw_value ActiveSupport::Cache::Entry.raw_value()\nGet the raw value. This value may be serialized and compressed.\n
should_compress? ActiveSupport::Cache::Entry.should_compress?(value, options)\n\n
size ActiveSupport::Cache::Entry.size()\nReturns the size of the cached value. This could be less than value.size\nif the data is compressed.\n
value ActiveSupport::Cache::Entry.value()\nGet the value stored in the cache.\n
new ActiveSupport::BufferedLogger.new(log, level = DEBUG)\n\n
silencer ActiveSupport::BufferedLogger.silencer\nSet to false to disable the silencer\n
add ActiveSupport::BufferedLogger.add(severity, message = nil, progname =\nnil, &block)\n\n
auto_flush ActiveSupport::BufferedLogger.auto_flush()\n\n
auto_flushing= ActiveSupport::BufferedLogger.auto_flushing=(period)\nSet the auto-flush period. Set to true to flush after every log message,\nto an integer to flush every N messages, or to false, nil, or zero to\nnever auto-flush. If you turn auto-flushing off, be sure to regularly\nflush the log yourself -- it will eat up memory until you do.\n
buffer ActiveSupport::BufferedLogger.buffer()\n\n
clear_buffer ActiveSupport::BufferedLogger.clear_buffer()\n\n
close ActiveSupport::BufferedLogger.close()\n\n
flush ActiveSupport::BufferedLogger.flush()\n\n
silence ActiveSupport::BufferedLogger.silence(temporary_level = ERROR)\nSilences the logger for the duration of the block.\n
new ActiveSupport::Testing::RemoteError.new(exception)\n\n
new ActiveSupport::Testing::ProxyTestResult.new()\n\n
__replay__ ActiveSupport::Testing::ProxyTestResult.__replay__(result)\n\n
add_error ActiveSupport::Testing::ProxyTestResult.add_error(e)\n\n
method_missing ActiveSupport::Testing::ProxyTestResult.method_missing(name, *args)\n\n
include? Test::Unit::Collector::ObjectSpace.include?(test)\n\n
new ActiveSupport::Testing::Performance::Performer.new(harness, metric)\n\n
output_filename ActiveSupport::Testing::Performance::Performer.output_filename()\n\n
report ActiveSupport::Testing::Performance::Performer.report()\n\n
environment ActiveSupport::Testing::Performance::Benchmarker.environment()\n\n
output_filename ActiveSupport::Testing::Performance::Benchmarker.output_filename()\n\n
record ActiveSupport::Testing::Performance::Benchmarker.record()\n\n
run ActiveSupport::Testing::Performance::Benchmarker.run()\n\n
with_output_file ActiveSupport::Testing::Performance::Benchmarker.with_output_file()\n\n
new ActiveSupport::Testing::Performance::Profiler.new(*args)\n\n
output_filename ActiveSupport::Testing::Performance::Profiler.output_filename(printer_class)\n\n
record ActiveSupport::Testing::Performance::Profiler.record()\n\n
report ActiveSupport::Testing::Performance::Profiler.report()\n\n
run ActiveSupport::Testing::Performance::Profiler.run()\n\n
new ActiveSupport::Testing::Performance::Metrics::Base.new()\n\n
benchmark ActiveSupport::Testing::Performance::Metrics::Base.benchmark()\n\n
measure ActiveSupport::Testing::Performance::Metrics::Base.measure()\n\n
measure_mode ActiveSupport::Testing::Performance::Metrics::Base.measure_mode()\n\n
name ActiveSupport::Testing::Performance::Metrics::Base.name()\n\n
profile ActiveSupport::Testing::Performance::Metrics::Base.profile()\n\n
with_gc_stats ActiveSupport::Testing::Performance::Metrics::Base.with_gc_stats()\n\n
with_gc_stats ActiveSupport::Testing::Performance::Metrics::Base.with_gc_stats()\n\n
with_gc_stats ActiveSupport::Testing::Performance::Metrics::Base.with_gc_stats()\n\n
format ActiveSupport::Testing::Performance::Metrics::Time.format(measurement)\n\n
measure ActiveSupport::Testing::Performance::Metrics::Time.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::ProcessTime.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::WallTime.measure()\n\n
new ActiveSupport::Testing::Performance::Metrics::CpuTime.new(*args)\n\n
measure ActiveSupport::Testing::Performance::Metrics::CpuTime.measure()\n\n
format ActiveSupport::Testing::Performance::Metrics::Memory.format(measurement)\n\n
measure ActiveSupport::Testing::Performance::Metrics::Memory.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::Memory.measure()\n\n
format ActiveSupport::Testing::Performance::Metrics::Objects.format(measurement)\n\n
measure ActiveSupport::Testing::Performance::Metrics::Objects.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::Objects.measure()\n\n
format ActiveSupport::Testing::Performance::Metrics::GcRuns.format(measurement)\n\n
measure ActiveSupport::Testing::Performance::Metrics::GcRuns.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::GcRuns.measure()\n\n
format ActiveSupport::Testing::Performance::Metrics::GcTime.format(measurement)\n\n
measure ActiveSupport::Testing::Performance::Metrics::GcTime.measure()\n\n
measure ActiveSupport::Testing::Performance::Metrics::GcTime.measure()\n\n
new ActiveSupport::BacktraceCleaner.new()\n\n
add_filter ActiveSupport::BacktraceCleaner.add_filter(&block)\nAdds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter.\n\nExample:\n Will turn "/my/rails/root/app/models/person.rb" into "/app/models/person.rb"\n  backtrace_cleaner.add_filter { |line| line.gsub(Rails.root, '') }\n
add_silencer ActiveSupport::BacktraceCleaner.add_silencer(&block)\nAdds a silencer from the block provided. If the silencer returns true for\na given line, it'll be excluded from the\nclean backtrace.\n\nExample:\n Will reject all lines that include the word "mongrel", like\n "/gems/mongrel/server.rb" or "/app/my_mongrel_server/rb"\n  backtrace_cleaner.add_silencer { |line| line =~ /mongrel/ }\n
clean ActiveSupport::BacktraceCleaner.clean(backtrace, kind = :silent)\nReturns the backtrace after all filters and silencers has been run against\nit. Filters run first, then silencers.\n
filter ActiveSupport::BacktraceCleaner.filter(backtrace)\n\n
noise ActiveSupport::BacktraceCleaner.noise(backtrace)\n\n
remove_filters! ActiveSupport::BacktraceCleaner.remove_filters!()\n\n
remove_silencers! ActiveSupport::BacktraceCleaner.remove_silencers!()\nWill remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly expands as\nyou suspect a bug in the libraries you use.\n
silence ActiveSupport::BacktraceCleaner.silence(backtrace)\n\n
new ActiveSupport::FileUpdateChecker.new(paths, calculate=false, &block)\n\n
execute_if_updated ActiveSupport::FileUpdateChecker.execute_if_updated()\n\n
updated_at ActiveSupport::FileUpdateChecker.updated_at()\n\n
new ActiveSupport::Dependencies::WatchStack.new()\n@watching is a stack of lists of constants being watched. For instance,\nif parent.rb is autoloaded, the stack will look like [[Object]]. If parent.rb\nthen requires namespace/child.rb, the stack will look like [[Object],\n[Namespace]].\n
new_constants ActiveSupport::Dependencies::WatchStack.new_constants()\nreturn a list of new constants found since the last call to watch_modules\n
pop_modules ActiveSupport::Dependencies::WatchStack.pop_modules(modules)\n\n
watch_namespaces ActiveSupport::Dependencies::WatchStack.watch_namespaces(namespaces)\nAdd a set of modules to the watch stack, remembering the initial constants\n
clear! ActiveSupport::Dependencies::Reference.clear!()\n\n
new ActiveSupport::Dependencies::Reference.new(name)\n\n
get ActiveSupport::Dependencies::Reference.get()\n\n
close ActiveSupport::Gzip::Stream.close()\n\n
instance ActiveSupport::Inflector::Inflections.instance()\n\n
new ActiveSupport::Inflector::Inflections.new()\n\n
clear ActiveSupport::Inflector::Inflections.clear(scope = :all)\nClears the loaded inflections within a given scope (default is <tt>:all</tt>).\nGive the scope as a symbol of the inflection type, the options are:\n<tt>:plurals</tt>,\n<tt>:singulars</tt>, <tt>:uncountables</tt>, <tt>:humans</tt>.\n\nExamples:\n  clear :all\n  clear :plurals\n
human ActiveSupport::Inflector::Inflections.human(rule, replacement)\nSpecifies a humanized form of a string by a regular expression rule or by\na string mapping.\nWhen using a regular expression based replacement, the normal humanize\nformatting is called after the replacement.\nWhen a string is used, the human form should be specified as desired (example:\n'The name', not 'the_name')\n\nExamples:\n  human /_cnt$/i, '\1_count'\n  human "legacy_col_person_name", "Name"\n
irregular ActiveSupport::Inflector::Inflections.irregular(singular, plural)\nSpecifies a new irregular that applies to both pluralization and\nsingularization at the same time. This can only be used\nfor strings, not regular expressions. You simply pass the irregular in\nsingular and plural form.\n\nExamples:\n  irregular 'octopus', 'octopi'\n  irregular 'person', 'people'\n
plural ActiveSupport::Inflector::Inflections.plural(rule, replacement)\nSpecifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular expression.\nThe replacement should always be a string that may include references to\nthe matched data from the rule.\n
singular ActiveSupport::Inflector::Inflections.singular(rule, replacement)\nSpecifies a new singularization rule and its replacement. The rule can either\nbe a string or a regular expression.\nThe replacement should always be a string that may include references to\nthe matched data from the rule.\n
uncountable ActiveSupport::Inflector::Inflections.uncountable(*words)\nAdd uncountable words that shouldn't be attempted inflected.\n\nExamples:\n  uncountable "money"\n  uncountable "money", "information"\n  uncountable %w( money information rice )\n
for_tag ActiveSupport::TestCase.for_tag(tag)\n\n
all Rails::Plugin.all(list, paths)\n\n
inherited Rails::Plugin.inherited(base)\n\n
new Rails::Plugin.new(root)\n\n
config Rails::Plugin.config()\n\n
load_deprecated_tasks Rails::Plugin.load_deprecated_tasks()\n\n
load_tasks Rails::Plugin.load_tasks()\n\n
new Rails::Rack::Logger.new(app)\n\n
after_dispatch Rails::Rack::Logger.after_dispatch(env)\n\n
before_dispatch Rails::Rack::Logger.before_dispatch(env)\n\n
call Rails::Rack::Logger.call(env)\n\n
new Rails::Rack::Debugger.new(app)\n\n
call Rails::Rack::Debugger.call(env)\n\n
new Rails::Rack::LogTailer.new(app, log = nil)\n\n
call Rails::Rack::LogTailer.call(env)\n\n
tail! Rails::Rack::LogTailer.tail!()\n\n
configure Rails::Application.configure(&block)\n\n
inherited Rails::Application.inherited(base)\n\n
instance Rails::Application.instance()\n\n
method_missing Rails::Application.method_missing(*args, &block)\n\n
respond_to? Rails::Application.respond_to?(*args)\n\n
app Rails::Application.app()\n\n
build_middleware_stack Rails::Application.build_middleware_stack()\n\n
call Rails::Application.call(env)\n\n
default_middleware_stack Rails::Application.default_middleware_stack()\n\n
env_defaults Rails::Application.env_defaults()\n\n
initialize! Rails::Application.initialize!()\n\n
initialize_console Rails::Application.initialize_console(sandbox=false)\n\n
initialize_generators Rails::Application.initialize_generators()\n\n
initialize_tasks Rails::Application.initialize_tasks()\n\n
initializers Rails::Application.initializers()\n\n
load_console Rails::Application.load_console(sandbox=false)\n\n
load_generators Rails::Application.load_generators()\n\n
load_tasks Rails::Application.load_tasks()\n\n
railties Rails::Application.railties()\n\n
reload_routes! Rails::Application.reload_routes!()\n\n
routes Rails::Application.routes()\n\n
routes_reloader Rails::Application.routes_reloader()\n\n
find_root_with_flag Rails::Engine.find_root_with_flag(flag, default=nil)\n\n
inherited Rails::Engine.inherited(base)\n\n
_all_autoload_paths Rails::Engine._all_autoload_paths()\n\n
_all_load_paths Rails::Engine._all_load_paths()\n\n
eager_load! Rails::Engine.eager_load!()\n\n
load_tasks Rails::Engine.load_tasks()\n\n
default RailsEnvironment.default()\n\n
default= RailsEnvironment.default=(rails_env)\n\n
find RailsEnvironment.find(dir=nil)\n\n
new RailsEnvironment.new(dir)\n\n
best_install_method RailsEnvironment.best_install_method()\n\n
externals RailsEnvironment.externals()\n\n
externals= RailsEnvironment.externals=(items)\n\n
install RailsEnvironment.install(name_uri_or_plugin)\n\n
use_checkout? RailsEnvironment.use_checkout?()\n\n
use_externals? RailsEnvironment.use_externals?()\n\n
use_svn? RailsEnvironment.use_svn?()\n\n
find Plugin.find(name)\n\n
new Plugin.new(uri, name = nil)\n\n
git_url? Plugin.git_url?()\n\n
guess_name Plugin.guess_name(url)\n\n
info Plugin.info()\n\n
install Plugin.install(method=nil, options = {})\n\n
install_using_checkout Plugin.install_using_checkout(options = {})\n\n
install_using_export Plugin.install_using_export(options = {})\n\n
install_using_externals Plugin.install_using_externals(options = {})\n\n
install_using_git Plugin.install_using_git(options = {})\n\n
install_using_http Plugin.install_using_http(options = {})\n\n
installed? Plugin.installed?()\n\n
rails_env Plugin.rails_env()\n\n
run_install_hook Plugin.run_install_hook()\n\n
run_uninstall_hook Plugin.run_uninstall_hook()\n\n
svn_command Plugin.svn_command(cmd, options = {})\n\n
svn_url? Plugin.svn_url?()\n\n
to_s Plugin.to_s()\n\n
uninstall Plugin.uninstall()\n\n
new Commands::Plugin.new()\n\n
parse! Commands::Plugin.parse!(args=ARGV)\n\n
environment= Commands::Plugin.environment=(value)\n\n
options Commands::Plugin.options()\n\n
parse! Commands::Plugin.parse!(args=ARGV)\n\n
split_args Commands::Plugin.split_args(args)\n\n
new Commands::Install.new(base_command)\n\n
determine_install_method Commands::Install.determine_install_method()\n\n
options Commands::Install.options()\n\n
parse! Commands::Install.parse!(args)\n\n
new Commands::Remove.new(base_command)\n\n
options Commands::Remove.options()\n\n
parse! Commands::Remove.parse!(args)\n\n
new Commands::Info.new(base_command)\n\n
options Commands::Info.options()\n\n
parse! Commands::Info.parse!(args)\n\n
new RecursiveHTTPFetcher.new(urls_to_fetch, level = 1, cwd = ".")\n\n
download RecursiveHTTPFetcher.download(link)\n\n
fetch RecursiveHTTPFetcher.fetch(links = @urls_to_fetch)\n\n
fetch_dir RecursiveHTTPFetcher.fetch_dir(url)\n\n
links RecursiveHTTPFetcher.links(base_url, contents)\n\n
ls RecursiveHTTPFetcher.ls()\n\n
pop_d RecursiveHTTPFetcher.pop_d()\n\n
push_d RecursiveHTTPFetcher.push_d(dir)\n\n
new Rails::DBConsole.new(app)\n\n
start Rails::DBConsole.start(app)\n\n
find_cmd Rails::DBConsole.find_cmd(*commands)\n\n
start Rails::DBConsole.start()\n\n
new Rails::Server.new(*)\n\n
default_options Rails::Server.default_options()\n\n
log_path Rails::Server.log_path()\n\n
middleware Rails::Server.middleware()\n\n
opt_parser Rails::Server.opt_parser()\n\n
set_environment Rails::Server.set_environment()\n\n
start Rails::Server.start()\n\n
parse! Rails::Server::Options.parse!(args)\n\n
new Rails::Console.new(app)\n\n
start Rails::Console.start(app)\n\n
start Rails::Console.start()\n\n
new Rails::Engine::Configuration.new(root=nil)\n\n
autoload_once_paths Rails::Engine::Configuration.autoload_once_paths()\n\n
autoload_paths Rails::Engine::Configuration.autoload_paths()\n\n
eager_load_paths Rails::Engine::Configuration.eager_load_paths()\n\n
gem Rails::Engine::Configuration.gem(name, options = {})\nRails 3, by default, uses bundler, which shims the Kernel#gem method so that\nit should\nbehave correctly for this deprecation.\n
load_paths Rails::Engine::Configuration.load_paths()\n\n
load_paths= Rails::Engine::Configuration.load_paths=(paths)\n\n
paths Rails::Engine::Configuration.paths()\n\n
root= Rails::Engine::Configuration.root=(value)\n\n
abstract_railtie? Rails::Railtie.abstract_railtie?()\n\n
console Rails::Railtie.console(&blk)\n\n
generators Rails::Railtie.generators(&blk)\n\n
inherited Rails::Railtie.inherited(base)\n\n
log_subscriber Rails::Railtie.log_subscriber(*)\n\n
railtie_name Rails::Railtie.railtie_name(*)\n\n
rake_tasks Rails::Railtie.rake_tasks(&blk)\n\n
subclasses Rails::Railtie.subclasses()\n\n
eager_load! Rails::Railtie.eager_load!()\n\n
load_console Rails::Railtie.load_console()\n\n
load_generators Rails::Railtie.load_generators()\n\n
load_tasks Rails::Railtie.load_tasks()\n\n
new Rails::Railtie::Configuration.new()\n\n
after_initialize Rails::Railtie::Configuration.after_initialize(&block)\n\n
app_generators Rails::Railtie::Configuration.app_generators()\nHolds generators configuration:\n\n  config.app_generators do |g|\n    g.orm             :datamapper, :migration => true\n    g.template_engine :haml\n    g.test_framework  :rspec\n  end\n\nIf you want to disable color in console, do:\n\n  config.app_generators.colorize_logging = false\n
app_middleware Rails::Railtie::Configuration.app_middleware()\nThis allows you to modify the application's middlewares from Engines.\n\nAll operations you run on the app_middleware will be replayed on the\napplication once it is defined and the default_middlewares are\ncreated\n
before_configuration Rails::Railtie::Configuration.before_configuration(&block)\n\n
before_eager_load Rails::Railtie::Configuration.before_eager_load(&block)\n\n
before_initialize Rails::Railtie::Configuration.before_initialize(&block)\n\n
generators Rails::Railtie::Configuration.generators()\n\n
method_missing Rails::Railtie::Configuration.method_missing(name, *args, &blk)\n\n
respond_to? Rails::Railtie::Configuration.respond_to?(name)\n\n
to_prepare Rails::Railtie::Configuration.to_prepare(&blk)\n\n
to_prepare_blocks Rails::Railtie::Configuration.to_prepare_blocks()\n\n
new Rails::Initializable::Initializer.new(name, context, options, &block)\n\n
after Rails::Initializable::Initializer.after()\n\n
before Rails::Initializable::Initializer.before()\n\n
bind Rails::Initializable::Initializer.bind(context)\n\n
run Rails::Initializable::Initializer.run(*args)\n\n
tsort_each_child Rails::Initializable::Collection.tsort_each_child(initializer, &block)\n\n
deprecate Rails::DeprecatedConstant.deprecate(old, new)\n\n
new Rails::DeprecatedConstant.new(old, new)\n\n
method_missing Rails::DeprecatedConstant.method_missing(meth, *args, &block)\n\n
new Rails::Paths::Root.new(path)\n\n
all_paths Rails::Paths::Root.all_paths()\n\n
autoload_once Rails::Paths::Root.autoload_once()\n\n
autoload_paths Rails::Paths::Root.autoload_paths()\n\n
concat Rails::Paths::Root.concat(*)\n\n
eager_load Rails::Paths::Root.eager_load()\n\n
filter_by Rails::Paths::Root.filter_by(constraint)\n\n
load_paths Rails::Paths::Root.load_paths()\n\n
push Rails::Paths::Root.push(*)\n\n
unshift Rails::Paths::Root.unshift(*)\n\n
new Rails::Paths::Path.new(root, *paths)\n\n
concat Rails::Paths::Path.concat(paths)\n\n
each Rails::Paths::Path.each()\n\n
paths Rails::Paths::Path.paths()\n\n
push Rails::Paths::Path.push(path)\n\n
to_a Rails::Paths::Path.to_a()\n\n
unshift Rails::Paths::Path.unshift(path)\n\n
enumerate SourceAnnotationExtractor.enumerate(tag, options={})\nPrints all annotations with tag +tag+ under the root directories +app+, +lib+,\nand +test+ (recursively). Only filenames with extension +.builder+, +.rb+,\n+.rxml+, +.rjs+, +.rhtml+, or +.erb+ are taken into account. The +options+\nhash is passed to each annotation's +to_s+.\n\nThis class method is the single entry point for the rake tasks.\n
new SourceAnnotationExtractor.new(tag)\n\n
display SourceAnnotationExtractor.display(results, options={})\nPrints the mapping from filenames to annotations in +results+ ordered by\nfilename.\nThe +options+ hash is passed to each annotation's +to_s+.\n
extract_annotations_from SourceAnnotationExtractor.extract_annotations_from(file, pattern)\nIf +file+ is the filename of a file that contains annotations this method\nreturns\na hash with a single entry that maps +file+ to an array of its annotations.\nOtherwise it returns an empty hash.\n
find SourceAnnotationExtractor.find(dirs=%w(app lib test))\nReturns a hash that maps filenames under +dirs+ (recursively) to arrays\nwith their annotations. Only files with annotations are included, and only\nthose with extension +.builder+, +.rb+, +.rxml+, +.rjs+, +.rhtml+, and +.erb+\nare taken into account.\n
find_in SourceAnnotationExtractor.find_in(dir)\nReturns a hash that maps filenames under +dir+ (recursively) to arrays\nwith their annotations. Only files with annotations are included, and only\nthose with extension +.builder+, +.rb+, +.rxml+, +.rjs+, +.rhtml+, and +.erb+\nare taken into account.\n
to_s SourceAnnotationExtractor::Annotation.to_s(options={})\nReturns a representation of the annotation that looks like this:\n\n  [126] [TODO] This algorithm is simple and clearly correct, make it faster.\n\nIf +options+ has a flag <tt>:tag</tt> the tag is shown as in the example above.\nOtherwise the string contains just line and text.\n
consider_all_requests_local? Rails::InfoController.consider_all_requests_local?()\n\n
properties Rails::InfoController.properties()\n\n
app Rails::AppBuilder.app()\n\n
config Rails::AppBuilder.config()\n\n
configru Rails::AppBuilder.configru()\n\n
database_yml Rails::AppBuilder.database_yml()\n\n
db Rails::AppBuilder.db()\n\n
doc Rails::AppBuilder.doc()\n\n
gemfile Rails::AppBuilder.gemfile()\n\n
gitignore Rails::AppBuilder.gitignore()\n\n
images Rails::AppBuilder.images()\n\n
javascripts Rails::AppBuilder.javascripts()\n\n
lib Rails::AppBuilder.lib()\n\n
log Rails::AppBuilder.log()\n\n
public_directory Rails::AppBuilder.public_directory()\n\n
rakefile Rails::AppBuilder.rakefile()\n\n
readme Rails::AppBuilder.readme()\n\n
script Rails::AppBuilder.script()\n\n
stylesheets Rails::AppBuilder.stylesheets()\n\n
test Rails::AppBuilder.test()\n\n
tmp Rails::AppBuilder.tmp()\n\n
vendor_plugins Rails::AppBuilder.vendor_plugins()\n\n
banner Rails::Generators::AppGenerator.banner()\n\n
new Rails::Generators::AppGenerator.new(*args)\n\n
app_const Rails::Generators::AppGenerator.app_const()\n\n
app_const_base Rails::Generators::AppGenerator.app_const_base()\n\n
app_name Rails::Generators::AppGenerator.app_name()\n\n
app_secret Rails::Generators::AppGenerator.app_secret()\n\n
apply_rails_template Rails::Generators::AppGenerator.apply_rails_template()\n\n
build Rails::Generators::AppGenerator.build(meth, *args)\n\n
builder Rails::Generators::AppGenerator.builder()\n\n
bundle_if_dev_or_edge Rails::Generators::AppGenerator.bundle_if_dev_or_edge()\n\n
create_active_record_files Rails::Generators::AppGenerator.create_active_record_files()\n\n
create_app_files Rails::Generators::AppGenerator.create_app_files()\n\n
create_boot_file Rails::Generators::AppGenerator.create_boot_file()\n\n
create_config_files Rails::Generators::AppGenerator.create_config_files()\n\n
create_db_files Rails::Generators::AppGenerator.create_db_files()\n\n
create_doc_files Rails::Generators::AppGenerator.create_doc_files()\n\n
create_lib_files Rails::Generators::AppGenerator.create_lib_files()\n\n
create_log_files Rails::Generators::AppGenerator.create_log_files()\n\n
create_prototype_files Rails::Generators::AppGenerator.create_prototype_files()\n\n
create_public_files Rails::Generators::AppGenerator.create_public_files()\n\n
create_public_image_files Rails::Generators::AppGenerator.create_public_image_files()\n\n
create_public_stylesheets_files Rails::Generators::AppGenerator.create_public_stylesheets_files()\n\n
create_root Rails::Generators::AppGenerator.create_root()\n\n
create_root_files Rails::Generators::AppGenerator.create_root_files()\n\n
create_script_files Rails::Generators::AppGenerator.create_script_files()\n\n
create_test_files Rails::Generators::AppGenerator.create_test_files()\n\n
create_tmp_files Rails::Generators::AppGenerator.create_tmp_files()\n\n
create_vendor_files Rails::Generators::AppGenerator.create_vendor_files()\n\n
defined_app_const_base Rails::Generators::AppGenerator.defined_app_const_base()\n\n
defined_app_const_base? Rails::Generators::AppGenerator.defined_app_const_base?()\n\n
defined_app_name Rails::Generators::AppGenerator.defined_app_name()\n\n
dev_or_edge? Rails::Generators::AppGenerator.dev_or_edge?()\n\n
empty_directory_with_gitkeep Rails::Generators::AppGenerator.empty_directory_with_gitkeep(destination,\nconfig = {})\n\n
file Rails::Generators::AppGenerator.file(*args, &block)\nDefine file as an alias to create_file for backwards compatibility.\n
finish_template Rails::Generators::AppGenerator.finish_template()\n\n
gem_for_database Rails::Generators::AppGenerator.gem_for_database()\n\n
mysql_socket Rails::Generators::AppGenerator.mysql_socket()\n\n
set_default_accessors! Rails::Generators::AppGenerator.set_default_accessors!()\n\n
valid_app_const? Rails::Generators::AppGenerator.valid_app_const?()\n\n
test_homepage BrowsingTest.test_homepage()\n\n
create_helper_files Rails::Generators::HelperGenerator.create_helper_files()\n\n
copy_stylesheets_file Rails::Generators::StylesheetsGenerator.copy_stylesheets_file()\n\n
create_lib_files Rails::Generators::PluginGenerator.create_lib_files()\n\n
create_root_files Rails::Generators::PluginGenerator.create_root_files()\n\n
create_tasks_files Rails::Generators::PluginGenerator.create_tasks_files()\n\n
plugin_dir Rails::Generators::PluginGenerator.plugin_dir(join=nil)\n\n
create_generator_files Rails::Generators::GeneratorGenerator.create_generator_files()\n\n
generator_dir Rails::Generators::GeneratorGenerator.generator_dir()\n\n
add_routes Rails::Generators::ControllerGenerator.add_routes()\n\n
create_controller_files Rails::Generators::ControllerGenerator.create_controller_files()\n\n
add_resource_route Rails::Generators::ResourceGenerator.add_resource_route()\n\n
create_controller_files Rails::Generators::ScaffoldControllerGenerator.create_controller_files()\n\n
create_test_files TestUnit::Generators::MailerGenerator.create_test_files()\n\n
create_test_files TestUnit::Generators::PerformanceGenerator.create_test_files()\n\n
create_test_files TestUnit::Generators::ObserverGenerator.create_test_files()\n\n
create_test_files TestUnit::Generators::IntegrationGenerator.create_test_files()\n\n
create_helper_files TestUnit::Generators::HelperGenerator.create_helper_files()\n\n
create_fixture_file TestUnit::Generators::ModelGenerator.create_fixture_file()\n\n
create_test_file TestUnit::Generators::ModelGenerator.create_test_file()\n\n
create_test_files TestUnit::Generators::PluginGenerator.create_test_files()\n\n
create_test_files TestUnit::Generators::ControllerGenerator.create_test_files()\n\n
create_test_files TestUnit::Generators::ScaffoldGenerator.create_test_files()\n\n
new Rails::Generators::GeneratedAttribute.new(name, type)\n\n
default Rails::Generators::GeneratedAttribute.default()\n\n
field_type Rails::Generators::GeneratedAttribute.field_type()\n\n
human_name Rails::Generators::GeneratedAttribute.human_name()\n\n
reference? Rails::Generators::GeneratedAttribute.reference?()\n\n
add_shebang_option! Rails::Generators::Base.add_shebang_option!()\nSmall macro to add ruby as an option to the generator with proper\ndefault value plus an instance helper method called shebang.\n
banner Rails::Generators::Base.banner()\nUse Rails default banner.\n
base_name Rails::Generators::Base.base_name()\nSets the base_name taking into account the current class namespace.\n
base_root Rails::Generators::Base.base_root()\nReturns the base root for a common set of generators. This is used to\ndynamically\nguess the default source root.\n
default_aliases_for_option Rails::Generators::Base.default_aliases_for_option(name, options)\nReturn default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n
default_for_option Rails::Generators::Base.default_for_option(config, name, options, default)\nReturn default for the option name given doing a lookup in config.\n
default_source_root Rails::Generators::Base.default_source_root()\nReturns the default source root for a given generator. This is used internally\nby rails to set its generators source root. If you want to customize your\nsource\nroot, you should use source_root.\n
default_value_for_option Rails::Generators::Base.default_value_for_option(name, options)\nReturn the default value for the option name given doing a lookup in\nRails::Generators.options.\n
desc Rails::Generators::Base.desc(description=nil)\nTries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default description.\n
generator_name Rails::Generators::Base.generator_name()\nRemoves the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will return "model" as generator name.\n
hook_for Rails::Generators::Base.hook_for(*names, &block)\nInvoke a generator based on the value supplied by the user to the\ngiven option named "name". A class option is created when this method\nis invoked and you can set a hash to customize it.\n\n==== Examples\n\n  module Rails::Generators\n    class ControllerGenerator < Base\n      hook_for :test_framework, :aliases => "-t"\n    end\n  end\n\nThe example above will create a test framework option and will invoke\na generator based on the user supplied value.\n\nFor example, if the user invoke the controller generator as:\n\n  rails generate controller Account --test-framework=test_unit\n\nThe controller generator will then try to invoke the following generators:\n\n  "rails:test_unit", "test_unit:controller", "test_unit"\n\nNotice that "rails:generators:test_unit" could be loaded as well, what\nRails looks for is the first and last parts of the namespace. This is what\nallows any test framework to hook into Rails as long as it provides any\nof the hooks above.\n\n==== Options\n\nThe first and last part used to find the generator to be invoked are\nguessed based on class invokes hook_for, as noticed in the example above.\nThis can be customized with two options: :base and :as.\n\nLet's suppose you are creating a generator that needs to invoke the\ncontroller generator from test unit. Your first attempt is:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework\n  end\n\nThe lookup in this case for test_unit as input is:\n\n  "test_unit:awesome", "test_unit"\n\nWhich is not the desired the lookup. You can change it by providing the\n:as option:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework, :as => :controller\n  end\n\nAnd now it will lookup at:\n\n  "test_unit:controller", "test_unit"\n\nSimilarly, if you want it to also lookup in the rails namespace, you just\nneed to provide the :base value:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework, :in => :rails, :as => :controller\n  end\n\nAnd the lookup is exactly the same as previously:\n\n  "rails:test_unit", "test_unit:controller", "test_unit"\n\n==== Switches\n\nAll hooks come with switches for user interface. If the user don't want\nto use any test framework, he can do:\n\n  rails generate controller Account --skip-test-framework\n\nOr similarly:\n\n  rails generate controller Account --no-test-framework\n\n==== Boolean hooks\n\nIn some cases, you want to provide a boolean hook. For example, webrat\ndevelopers might want to have webrat available on controller generator.\nThis can be achieved as:\n\n  Rails::Generators::ControllerGenerator.hook_for :webrat, :type => :boolean\n\nThen, if you want, webrat to be invoked, just supply:\n\n  rails generate controller Account --webrat\n\nThe hooks lookup is similar as above:\n\n  "rails:generators:webrat", "webrat:generators:controller", "webrat"\n\n==== Custom invocations\n\nYou can also supply a block to hook_for to customize how the hook is\ngoing to be invoked. The block receives two arguments, an instance\nof the current class and the klass to be invoked.\n\nFor example, in the resource generator, the controller should be invoked\nwith a pluralized class name. But by default it is invoked with the same\nname as the resource generator, which is singular. To change this, we\ncan give a block to customize how the controller can be invoked.\n\n  hook_for :resource_controller do |instance, controller|\n    instance.invoke controller, [ instance.name.pluralize ]\n  end\n
namespace Rails::Generators::Base.namespace(name=nil)\nConvenience method to get the namespace from the class name. It's the\nsame as Thor default except that the Generator at the end of the class\nis removed.\n
remove_hook_for Rails::Generators::Base.remove_hook_for(*names)\nRemove a previously added hook.\n\n==== Examples\n\n  remove_hook_for :orm\n
source_root Rails::Generators::Base.source_root(path=nil)\nReturns the source root for this generator using default_source_root as\ndefault.\n
all Rails::Generators::ActiveModel.all(klass)\nGET index\n
build Rails::Generators::ActiveModel.build(klass, params=nil)\nGET new\nPOST create\n
find Rails::Generators::ActiveModel.find(klass, params=nil)\nGET show\nGET edit\nPUT update\nDELETE destroy\n
new Rails::Generators::ActiveModel.new(name)\n\n
destroy Rails::Generators::ActiveModel.destroy()\nDELETE destroy\n
errors Rails::Generators::ActiveModel.errors()\nPOST create\nPUT update\n
save Rails::Generators::ActiveModel.save()\nPOST create\n
update_attributes Rails::Generators::ActiveModel.update_attributes(params=nil)\nPUT update\n
check_class_collision Rails::Generators::NamedBase.check_class_collision(options={})\nAdd a class collisions name to be checked on class initialization. You\ncan supply a hash with a :prefix or :suffix to be tested.\n\n==== Examples\n\n  check_class_collision :suffix => "Observer"\n\nIf the generator is invoked with class name Admin, it will check for\nthe presence of "AdminObserver".\n
application_name Rails::Generators::NamedBase.application_name()\nTries to retrieve the application name or simple return application.\n
class_name Rails::Generators::NamedBase.class_name()\n\n
file_path Rails::Generators::NamedBase.file_path()\n\n
human_name Rails::Generators::NamedBase.human_name()\n\n
i18n_scope Rails::Generators::NamedBase.i18n_scope()\n\n
index_helper Rails::Generators::NamedBase.index_helper()\n\n
plural_file_name Rails::Generators::NamedBase.plural_file_name()\n\n
plural_name Rails::Generators::NamedBase.plural_name()\n\n
plural_table_name Rails::Generators::NamedBase.plural_table_name()\n\n
pluralize_table_names? Rails::Generators::NamedBase.pluralize_table_names?()\n\n
route_url Rails::Generators::NamedBase.route_url()\n\n
singular_table_name Rails::Generators::NamedBase.singular_table_name()\n\n
table_name Rails::Generators::NamedBase.table_name()\n\n
uncountable? Rails::Generators::NamedBase.uncountable?()\n\n
arguments Rails::Generators::TestCase.arguments(array)\nSets default arguments on generator invocation. This can be overwritten when\ninvoking it.\n\n  arguments %w(app_name --skip-active-record)\n
destination Rails::Generators::TestCase.destination(path)\nSets the destination of generator files:\n\n  destination File.expand_path("../tmp", File.dirname(__FILE__))\n
tests Rails::Generators::TestCase.tests(klass)\nSets which generator should be tested:\n\n  tests AppGenerator\n
assert_class_method Rails::Generators::TestCase.assert_class_method(method, content, &block)\nAsserts the given class method exists in the given content. This method does\nnot detect\nclass methods inside (class << self), only class methods which starts with\n"self.".\nWhen a block is given, it yields the content of the method.\n\n  assert_migration "db/migrate/create_products.rb" do |migration|\n    assert_class_method :up, migration do |up|\n      assert_match /create_table/, up\n    end\n  end\n
assert_directory Rails::Generators::TestCase.assert_directory(relative, *contents)\n\n
assert_field_default_value Rails::Generators::TestCase.assert_field_default_value(attribute_type, value)\nAsserts the given attribute type gets a proper default value:\n\n  assert_field_type :string, "MyString"\n
assert_field_type Rails::Generators::TestCase.assert_field_type(attribute_type, field_type)\nAsserts the given attribute type gets translated to a field type\nproperly:\n\n  assert_field_type :date, :date_select\n
assert_file Rails::Generators::TestCase.assert_file(relative, *contents)\nAsserts a given file exists. You need to supply an absolute path or a path\nrelative\nto the configured destination:\n\n  assert_file "config/environment.rb"\n\nYou can also give extra arguments. If the argument is a regexp, it will\ncheck if the\nregular expression matches the given file content. If it's a string, it\ncompares the\nfile with the given string:\n\n  assert_file "config/environment.rb", /initialize/\n\nFinally, when a block is given, it yields the file content:\n\n  assert_file "app/controller/products_controller.rb" do |controller|\n    assert_instance_method :index, content do |index|\n      assert_match /Product\.all/, index\n    end\n  end\n
assert_instance_method Rails::Generators::TestCase.assert_instance_method(method, content)\nAsserts the given method exists in the given content. When a block is given,\nit yields the content of the method.\n\n  assert_file "app/controller/products_controller.rb" do |controller|\n    assert_instance_method :index, content do |index|\n      assert_match /Product\.all/, index\n    end\n  end\n
assert_method Rails::Generators::TestCase.assert_method(method, content)\n\n
assert_migration Rails::Generators::TestCase.assert_migration(relative, *contents, &block)\nAsserts a given file does not exist. You need to supply an absolute path or a\npath relative to the configured destination:\n\n  assert_migration "db/migrate/create_products.rb"\n\nThis method manipulates the given path and tries to find any migration which\nmatches the migration name. For example, the call above is converted to:\n\n  assert_file "db/migrate/003_create_products.rb"\n\nConsequently, assert_migration accepts the same arguments has assert_file.\n
assert_no_directory Rails::Generators::TestCase.assert_no_directory(relative)\n\n
assert_no_file Rails::Generators::TestCase.assert_no_file(relative)\nAsserts a given file does not exist. You need to supply an absolute path or a\npath relative to the configured destination:\n\n  assert_no_file "config/random.rb"\n
assert_no_migration Rails::Generators::TestCase.assert_no_migration(relative)\nAsserts a given migration does not exist. You need to supply an absolute\npath or a\npath relative to the configured destination:\n\n  assert_no_file "config/random.rb"\n
capture Rails::Generators::TestCase.capture(stream)\nCaptures the given stream and returns it:\n\n  stream = capture(:stdout){ puts "Cool" }\n  stream # => "Cool\\n"\n
create_generated_attribute Rails::Generators::TestCase.create_generated_attribute(attribute_type, name =\n'test')\nCreate a Rails::Generators::GeneratedAttribute by supplying the\nattribute type and, optionally, the attribute name:\n\n  create_generated_attribute(:string, 'name')\n
generator Rails::Generators::TestCase.generator(args=self.default_arguments, options={},\nconfig={})\nInstantiate the generator.\n
prepare_destination Rails::Generators::TestCase.prepare_destination()\n\n
run_generator Rails::Generators::TestCase.run_generator(args=self.default_arguments,\nconfig={})\nRuns the generator configured for this class. The first argument is an\narray like\ncommand line arguments:\n\n  class AppGeneratorTest < Rails::Generators::TestCase\n    tests AppGenerator\n    destination File.expand_path("../tmp", File.dirname(__FILE__))\n    teardown :cleanup_destination_root\n\n    test "database.yml is not created when skipping Active Record" do\n      run_generator %w(myapp --skip-active-record)\n      assert_no_file "config/database.yml"\n    end\n  end\n\nYou can provide a configuration hash as second argument. This method returns\nthe output\nprinted by the generator.\n
silence Rails::Generators::TestCase.silence(stream)\n\n
format Erb::Generators::MailerGenerator.format()\n\n
copy_view_files Erb::Generators::ControllerGenerator.copy_view_files()\n\n
available_views Erb::Generators::ScaffoldGenerator.available_views()\n\n
copy_view_files Erb::Generators::ScaffoldGenerator.copy_view_files()\n\n
create_root_folder Erb::Generators::ScaffoldGenerator.create_root_folder()\n\n
new Rails::BacktraceCleaner.new()\n\n
add_gem_filters Rails::BacktraceCleaner.add_gem_filters()\n\n
new Rails::Application::Railties.new(config)\nTODO Write tests for this behavior extracted from Application\n
all Rails::Application::Railties.all(&block)\n\n
engines Rails::Application::Railties.engines()\n\n
plugins Rails::Application::Railties.plugins()\n\n
railties Rails::Application::Railties.railties()\n\n
new Rails::Application::Configuration.new(*)\n\n
builtin_controller Rails::Application::Configuration.builtin_controller()\n\n
cache_store Rails::Application::Configuration.cache_store()\n\n
colorize_logging Rails::Application::Configuration.colorize_logging()\n\n
colorize_logging= Rails::Application::Configuration.colorize_logging=(val)\n\n
database_configuration Rails::Application::Configuration.database_configuration()\nLoads and returns the contents of the #database_configuration_file. The\ncontents of the file are processed via ERB before being sent through\nYAML::load.\n
encoding= Rails::Application::Configuration.encoding=(value)\n\n
log_level Rails::Application::Configuration.log_level()\n\n
paths Rails::Application::Configuration.paths()\n\n
session_store Rails::Application::Configuration.session_store(*args)\n\n
threadsafe! Rails::Application::Configuration.threadsafe!()\nEnable threaded mode. Allows concurrent requests to controller actions and\nmultiple database connections. Also disables automatic dependency loading\nafter boot, and disables reloading code on every request, as these are\nfundamentally incompatible with thread safety.\n
application Rails.application()\n\n
application= Rails.application=(application)\n\n
backtrace_cleaner Rails.backtrace_cleaner()\n\n
cache Rails.cache()\n\n
configuration Rails.configuration()\nThe Configuration instance used to configure the Rails environment\n
env Rails.env()\n\n
env= Rails.env=(environment)\n\n
framework_version Rails.framework_version(framework)\n\n
frameworks Rails.frameworks()\n\n
initialize! Rails.initialize!()\n\n
initialized= Rails.initialized=(initialized)\n\n
initialized? Rails.initialized?()\n\n
logger Rails.logger()\n\n
logger= Rails.logger=(logger)\n\n
property Rails.property(name, value = nil)\n\n
public_path Rails.public_path()\n\n
public_path= Rails.public_path=(path)\n\n
root Rails.root()\n\n
to_html Rails.to_html()\n\n
to_s Rails.to_s()\n\n
version Rails.version()\n\n
fallbacks Rails::Generators.fallbacks()\nHold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another group in case of missing generators,\nthey can add a fallback.\n\nFor example, shoulda is considered a test_framework and is an extension\nof test_unit. However, most part of shoulda generators are similar to\ntest_unit ones.\n\nShoulda then can tell generators to search for test_unit generators when\nsome of them are not available by adding a fallback:\n\n  Rails::Generators.fallbacks[:shoulda] = :test_unit\n
help Rails::Generators.help(command = 'generate')\nShow help message with available generators.\n
hidden_namespaces Rails::Generators.hidden_namespaces()\n\n
hide_namespaces Rails::Generators.hide_namespaces(*namespaces)\n\n
invoke Rails::Generators.invoke(namespace, args=ARGV, config={})\nReceives a namespace, arguments and the behavior to invoke the generator.\nIt's used as the default entry point for generate, destroy and update\ncommands.\n
no_color! Rails::Generators.no_color!()\nRemove the color from output.\n
subclasses Rails::Generators.subclasses()\nTrack all generators subclasses.\n
templates_path Rails::Generators.templates_path()\n\n
add_delivery_method ActionMailer::DeliveryMethods::ClassMethods.add_delivery_method(symbol,\nklass, default_options={})\nAdds a new delivery method through the given class using the given symbol\nas alias and the default options supplied:\n\nExample:\n\n  add_delivery_method :sendmail, Mail::Sendmail,\n    :location   => '/usr/sbin/sendmail',\n    :arguments  => '-i -t'\n
deliver ActionMailer::DeprecatedApi::ClassMethods.deliver(mail, show_warning=true)\nDeliver the given mail object directly. This can be used to deliver\na preconstructed mail object, like:\n\n  email = MyMailer.create_some_mail(parameters)\n  email.set_some_obscure_header "frobnicate"\n  MyMailer.deliver(email)\n
matches_dynamic_method? ActionMailer::DeprecatedApi::ClassMethods.matches_dynamic_method?(method_name)\n\n
method_missing ActionMailer::DeprecatedApi::ClassMethods.method_missing(method_symbol,\n*parameters)\n\n
respond_to? ActionMailer::DeprecatedApi::ClassMethods.respond_to?(method_symbol,\ninclude_private = false)\n\n
template_root ActionMailer::DeprecatedApi::ClassMethods.template_root()\n\n
template_root= ActionMailer::DeprecatedApi::ClassMethods.template_root=(root)\n\n
attachments ActionMailer::MailHelper.attachments()\nAccess the message attachments list.\n
block_format ActionMailer::MailHelper.block_format(text)\nUses Text::Format to take the text and format it, indented two spaces for\neach line, and wrapped at 72 columns.\n
mailer ActionMailer::MailHelper.mailer()\nAccess the mailer instance.\n
message ActionMailer::MailHelper.message()\nAccess the message instance.\n
assert_emails ActionMailer::TestHelper.assert_emails(number)\nAsserts that the number of emails sent matches the given number.\n\n  def test_emails\n    assert_emails 0\n    ContactMailer.deliver_contact\n    assert_emails 1\n    ContactMailer.deliver_contact\n    assert_emails 2\n  end\n\nIf a block is passed, that block should cause the specified number of emails\nto be sent.\n\n  def test_emails_again\n    assert_emails 1 do\n      ContactMailer.deliver_contact\n    end\n\n    assert_emails 2 do\n      ContactMailer.deliver_contact\n      ContactMailer.deliver_contact\n    end\n  end\n
assert_no_emails ActionMailer::TestHelper.assert_no_emails(&block)\nAssert that no emails have been sent.\n\n  def test_emails\n    assert_no_emails\n    ContactMailer.deliver_contact\n    assert_emails 1\n  end\n\nIf a block is passed, that block should not cause any emails to be sent.\n\n  def test_emails_again\n    assert_no_emails do\n No emails should be sent from this block\n    end\n  end\n\nNote: This assertion is simply a shortcut for:\n\n  assert_emails 0\n
default_url_options ActionMailer::Base::DeprecatedUrlOptions.default_url_options()\n\n
default_url_options= ActionMailer::Base::DeprecatedUrlOptions.default_url_options=(val)\n\n
deprecated_url_options ActionMailer::Base::DeprecatedUrlOptions.deprecated_url_options()\n\n
determine_default_mailer ActionMailer::TestCase::Behavior::ClassMethods.determine_default_mailer(name)\n\n
mailer_class ActionMailer::TestCase::Behavior::ClassMethods.mailer_class()\n\n
tests ActionMailer::TestCase::Behavior::ClassMethods.tests(mailer)\n\n
charset ActionMailer::TestCase::Behavior::InstanceMethods.charset()\n\n
encode ActionMailer::TestCase::Behavior::InstanceMethods.encode(subject)\n\n
initialize_test_deliveries ActionMailer::TestCase::Behavior::InstanceMethods.initialize_test_deliveries()\n\n
read_fixture ActionMailer::TestCase::Behavior::InstanceMethods.read_fixture(action)\n\n
set_expected_mail ActionMailer::TestCase::Behavior::InstanceMethods.set_expected_mail()\n\n
exists? ActionView::LookupContext::ViewPaths.exists?(name, prefix = nil, partial\n= false)\n\n
find ActionView::LookupContext::ViewPaths.find(name, prefix = nil, partial = false)\n\n
find_all ActionView::LookupContext::ViewPaths.find_all(name, prefix = nil, partial\n= false)\n\n
find_template ActionView::LookupContext::ViewPaths.find_template(name, prefix = nil,\npartial = false)\n\n
template_exists? ActionView::LookupContext::ViewPaths.template_exists?(name, prefix = nil,\npartial = false)\n\n
view_paths= ActionView::LookupContext::ViewPaths.view_paths=(paths)\nWhenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n
with_fallbacks ActionView::LookupContext::ViewPaths.with_fallbacks()\nAdd fallbacks to the view paths. Useful in cases you are rendering a :file.\n
_set_detail ActionView::LookupContext::Details._set_detail(key, value)\n\n
formats= ActionView::LookupContext::Details.formats=(values)\nOverload formats= to reject ["*/*"] values.\n
locale ActionView::LookupContext::Details.locale()\nOverload locale to return a symbol instead of array.\n
locale= ActionView::LookupContext::Details.locale=(value)\nOverload locale= to also set the I18n.locale. If the current I18n.config\nobject responds\nto original_config, it means that it's has a copy of the original I18n\nconfiguration and it's\nacting as proxy, which we need to skip.\n
skip_default_locale! ActionView::LookupContext::Details.skip_default_locale!()\nDo not use the default locale on template lookup.\n
update_details ActionView::LookupContext::Details.update_details(new_details)\nUpdate the details keys by merging the given hash into the current\ndetails hash. If a block is given, the details are modified just during\nthe execution of the block and reverted to the previous value after.\n
with_layout_format ActionView::LookupContext::Details.with_layout_format()\nA method which only uses the first format in the formats array for layout\nlookup.\nThis method plays straight with instance variables for performance reasons.\n
included ActionView::Template::Handlers::Compilable.included(base)\n\n
compile ActionView::Template::Handlers::Compilable.compile(template)\n\n
call ActionView::Template::Handlers::Compilable::ClassMethods.call(template)\n\n
render ActionView::Rendering.render(options = {}, locals = {}, &block)\nReturns the result of a render that's dictated by the options hash. The\nprimary options are:\n\n* <tt>:partial</tt> - See ActionView::Partials.\n* <tt>:update</tt> - Calls update_page with the block given.\n* <tt>:file</tt> - Renders an explicit template file (this used to be the\nold default), add :locals to pass in those.\n* <tt>:inline</tt> - Renders an inline template similar to how it's done in\nthe controller.\n* <tt>:text</tt> - Renders the text passed in out.\n\nIf no options hash is passed or :update specified, the default is to render\na partial and use the second parameter\nas the locals hash.\n
cdata_section ActionView::Helpers::TagHelper.cdata_section(content)\nReturns a CDATA section with the given +content+.  CDATA sections\nare used to escape blocks of text containing characters which would\notherwise be recognized as markup. CDATA sections begin with the string\n<tt><![CDATA[</tt> and end with (and may not contain) the string <tt>]]></tt>.\n\n==== Examples\n  cdata_section("<hello world>")\n => <![CDATA[<hello world>]]>\n\n  cdata_section(File.read("hello_world.txt"))\n => <![CDATA[<hello from a text file]]>\n
content_tag ActionView::Helpers::TagHelper.content_tag(name, content_or_options_with_block\n= nil, options = nil, escape = true, &block)\nReturns an HTML block tag of type +name+ surrounding the +content+. Add\nHTML attributes by passing an attributes hash to +options+.\nInstead of passing the content as an argument, you can also use a block\nin which case, you pass your +options+ as the second parameter.\nSet escape to false to disable attribute value escaping.\n\n==== Options\nThe +options+ hash is used with attributes with no value like\n(<tt>disabled</tt> and\n<tt>readonly</tt>), which you can give a value of true in the +options+\nhash. You can use\nsymbols or strings for the attribute names.\n\n==== Examples\n  content_tag(:p, "Hello world!")\n => <p>Hello world!</p>\n  content_tag(:div, content_tag(:p, "Hello world!"), :class => "strong")\n => <div class="strong"><p>Hello world!</p></div>\n  content_tag("select", options, :multiple => true)\n => <select multiple="multiple">...options...</select>\n\n  <%= content_tag :div, :class => "strong" do -%>\n    Hello world!\n  <% end -%>\n => <div class="strong">Hello world!</div>\n
content_tag_string ActionView::Helpers::TagHelper.content_tag_string(name, content, options,\nescape = true)\n\n
escape_once ActionView::Helpers::TagHelper.escape_once(html)\nReturns an escaped version of +html+ without affecting existing escaped\nentities.\n\n==== Examples\n  escape_once("1 < 2 &amp; 3")\n => "1 &lt; 2 &amp; 3"\n\n  escape_once("&lt;&lt; Accept & Checkout")\n => "&lt;&lt; Accept &amp; Checkout"\n
tag ActionView::Helpers::TagHelper.tag(name, options = nil, open = false, escape\n= true)\nReturns an empty HTML tag of type +name+ which by default is XHTML\ncompliant. Set +open+ to true to create an open tag compatible\nwith HTML 4.0 and below. Add HTML attributes by passing an attributes\nhash to +options+. Set +escape+ to false to disable attribute value\nescaping.\n\n==== Options\nThe +options+ hash is used with attributes with no value like\n(<tt>disabled</tt> and\n<tt>readonly</tt>), which you can give a value of true in the +options+\nhash. You can use\nsymbols or strings for the attribute names.\n\n==== Examples\n  tag("br")\n => <br />\n\n  tag("br", nil, true)\n => <br>\n\n  tag("input", { :type => 'text', :disabled => true })\n => <input type="text" disabled="disabled" />\n\n  tag("img", { :src => "open & shut.png" })\n => <img src="open &amp; shut.png" />\n\n  tag("img", { :src => "open &amp; shut.png" }, false, false)\n => <img src="open &amp; shut.png" />\n
tag_options ActionView::Helpers::TagHelper.tag_options(options, escape = true)\n\n
sanitize ActionView::Helpers::SanitizeHelper.sanitize(html, options = {})\nThis +sanitize+ helper will html encode all tags and strip all attributes that\naren't specifically allowed.\n\nIt also strips href/src tags with invalid protocols, like javascript:\nespecially.\nIt does its best to counter any  tricks that hackers may use, like throwing in\nunicode/ascii/hex values to get past the javascript: filters.  Check out\nthe extensive test suite.\n\n  <%= sanitize @article.body %>\n\nYou can add or remove tags/attributes if you want to customize it a bit.\nSee ActionView::Base for full docs on the available options.  You can add\ntags/attributes for single uses of +sanitize+ by passing either the\n<tt>:attributes</tt> or <tt>:tags</tt> options:\n\nNormal Use\n\n  <%= sanitize @article.body %>\n\nCustom Use (only the mentioned tags and attributes are allowed, nothing else)\n\n  <%= sanitize @article.body, :tags => %w(table tr td), :attributes =>\n  %w(id class style) %>\n\nAdd table tags to the default allowed tags\n\n  class Application < Rails::Application\n    config.action_view.sanitized_allowed_tags = 'table', 'tr', 'td'\n  end\n\nRemove tags to the default allowed tags\n\n  class Application < Rails::Application\n    config.after_initialize do\n      ActionView::Base.sanitized_allowed_tags.delete 'div'\n    end\n  end\n\nChange allowed default attributes\n\n  class Application < Rails::Application\n    config.action_view.sanitized_allowed_attributes = 'id', 'class', 'style'\n  end\n\nPlease note that sanitizing user-provided text does not guarantee that the\nresulting markup is valid (conforming to a document type) or even well-formed.\nThe output may still contain e.g. unescaped '<', '>', '&' characters and\nconfuse browsers.\n
sanitize_css ActionView::Helpers::SanitizeHelper.sanitize_css(style)\nSanitizes a block of CSS code. Used by +sanitize+ when it comes across a\nstyle attribute.\n
strip_links ActionView::Helpers::SanitizeHelper.strip_links(html)\nStrips all link tags from +text+ leaving just the link text.\n\n==== Examples\n  strip_links('<a href="http://www.rubyonrails.org">Ruby on Rails</a>')\n => Ruby on Rails\n\n  strip_links('Please e-mail me at <a\n  href="mailto:me@email.com">me@email.com</a>.')\n => Please e-mail me at me@email.com.\n\n  strip_links('Blog: <a href="http://www.myblog.com/" class="nav"\n  target=\"_blank\">Visit</a>.')\n => Blog: Visit\n
strip_tags ActionView::Helpers::SanitizeHelper.strip_tags(html)\nStrips all HTML tags from the +html+, including comments.  This uses the\nhtml-scanner tokenizer and so its HTML parsing ability is limited by\nthat of html-scanner.\n\n==== Examples\n\n  strip_tags("Strip <i>these</i> tags!")\n => Strip these tags!\n\n  strip_tags("<b>Bold</b> no more!  <a href='more.html'>See more here</a>...")\n => Bold no more!  See more here...\n\n  strip_tags("<div id='top-bar'>Welcome to my website!</div>")\n => Welcome to my website!\n
build_callbacks ActionView::Helpers::PrototypeHelper.build_callbacks(options)\n\n
method_option_to_s ActionView::Helpers::PrototypeHelper.method_option_to_s(method)\n\n
options_for_ajax ActionView::Helpers::PrototypeHelper.options_for_ajax(options)\n\n
options_for_javascript ActionView::Helpers::PrototypeHelper.options_for_javascript(options)\n\n
remote_function ActionView::Helpers::PrototypeHelper.remote_function(options)\nReturns the JavaScript needed for a remote function.\nSee the link_to_remote documentation at\nhttp://github.com/rails/prototype_legacy_helper as it takes the same arguments.\n\nExample:\n Generates: <select id="options" onchange="new Ajax.Updater('options',\n '/testing/update_options', {asynchronous:true, evalScripts:true})">\n  <select id="options" onchange="<%= remote_function(:update => "options",\n      :url => { :action => :update_options }) %>">\n    <option value="0">Hello</option>\n    <option value="1">World</option>\n  </select>\n
update_page ActionView::Helpers::PrototypeHelper.update_page(&block)\nYields a JavaScriptGenerator and returns the generated JavaScript code.\nUse this to update multiple elements on a page in an Ajax response.\nSee JavaScriptGenerator for more information.\n\nExample:\n\n  update_page do |page|\n    page.hide 'spinner'\n  end\n
update_page_tag ActionView::Helpers::PrototypeHelper.update_page_tag(html_options = {}, &block)\nWorks like update_page but wraps the generated JavaScript in a\n<tt>\<script></tt>\ntag. Use this to include generated JavaScript in an ERb template.\nSee JavaScriptGenerator for more information.\n\n+html_options+ may be a hash of <tt>\<script></tt> attributes to be passed\nto ActionView::Helpers::JavaScriptHelper#javascript_tag.\n
alert ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.alert(message)\nDisplays an alert dialog with the given +message+.\n\nExample:\n Generates: alert('This message is from Rails!')\n  page.alert('This message is from Rails!')\n
arguments_for_call ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.arguments_for_call(arguments,\nblock = nil)\n\n
assign ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.assign(variable,\nvalue)\nAssigns the JavaScript +variable+ the given +value+.\n\nExamples:\n Generates: my_string = "This is mine!";\n page.assign 'my_string', 'This is mine!'\n Generates: record_count = 33;\n page.assign 'record_count', 33\n Generates: tabulated_total = 47\n page.assign 'tabulated_total', @total_from_cart\n
block_to_function ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.block_to_function(block)\n\n
call ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.call(function,\n*arguments, &block)\nCalls the JavaScript +function+, optionally with the given +arguments+.\n\nIf a block is given, the block will be passed to a new JavaScriptGenerator;\nthe resulting JavaScript code will then be wrapped inside <tt>function() {\n... }</tt>\nand passed as the called function's final argument.\n\nExamples:\n Generates: Element.replace(my_element, "My content to replace with.")\n  page.call 'Element.replace', 'my_element', "My content to replace with."\n Generates: alert('My message!')\n  page.call 'alert', 'My message!'\n Generates:\n     my_method(function() {\n       $("one").show();\n       $("two").hide();\n    });\n  page.call(:my_method) do |p|\n     p[:one].show\n     p[:two].hide\n  end\n
delay ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.delay(seconds\n= 1)\nExecutes the content of the block after a delay of +seconds+. Example:\n Generates:\n     setTimeout(function() {\n     ;\n     new Effect.Fade("notice",{});\n     }, 20000);\n  page.delay(20) do\n    page.visual_effect :fade, 'notice'\n  end\n
draggable ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.draggable(id,\noptions = {})\nCreates a script.aculo.us draggable element.\nSee ActionView::Helpers::ScriptaculousHelper for more information.\n
drop_receiving ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.drop_receiving(id,\noptions = {})\nCreates a script.aculo.us drop receiving element.\nSee ActionView::Helpers::ScriptaculousHelper for more information.\n
hide ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.hide(*ids)\nHides the visible DOM elements with the given +ids+.\n\nExample:\n Hide a few people\n Generates: ["person_29", "person_9", "person_0"].each(Element.hide);\n page.hide 'person_29', 'person_9', 'person_0'\n
insert_html ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.insert_html(position,\nid, *options_for_render)\nInserts HTML at the specified +position+ relative to the DOM element\nidentified by the given +id+.\n\n+position+ may be one of:\n\n<tt>:top</tt>::    HTML is inserted inside the element, before the\n                   element's existing content.\n<tt>:bottom</tt>:: HTML is inserted inside the element, after the\n                   element's existing content.\n<tt>:before</tt>:: HTML is inserted immediately preceding the element.\n<tt>:after</tt>::  HTML is inserted immediately following the element.\n\n+options_for_render+ may be either a string of HTML to insert, or a hash\nof options to be passed to ActionView::Base#render.  For example:\n Insert the rendered 'navigation' partial just before the DOM\n element with ID 'content'.\n Generates: Element.insert("content", { before: "-- Contents of 'navigation'\n partial --" });\n  page.insert_html :before, 'content', :partial => 'navigation'\n Add a list item to the bottom of the <ul> with ID 'list'.\n Generates: Element.insert("list", { bottom: "<li>Last item</li>" });\n  page.insert_html :bottom, 'list', '<li>Last item</li>'\n
javascript_object_for ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.javascript_object_for(object)\n\n
literal ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.literal(code)\nReturns an object whose <tt>to_json</tt> evaluates to +code+. Use this to\npass a literal JavaScript\nexpression as an argument to another JavaScriptGenerator method.\n
loop_on_multiple_args ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.loop_on_multiple_args(method,\nids)\n\n
method_missing ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.method_missing(method,\n*arguments)\n\n
page ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.page()\n\n
record ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.record(line)\n\n
redirect_to ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.redirect_to(location)\nRedirects the browser to the given +location+ using JavaScript, in the same\nform as +url_for+.\n\nExamples:\n Generates: window.location.href = "/mycontroller";\n page.redirect_to(:action => 'index')\n Generates: window.location.href = "/account/signup";\n page.redirect_to(:controller => 'account', :action => 'signup')\n
reload ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.reload()\nReloads the browser's current +location+ using JavaScript\n\nExamples:\n Generates: window.location.reload();\n page.reload\n
remove ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.remove(*ids)\nRemoves the DOM elements with the given +ids+ from the page.\n\nExample:\n Remove a few people\n Generates: ["person_23", "person_9", "person_2"].each(Element.remove);\n page.remove 'person_23', 'person_9', 'person_2'\n
render ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.render(*options)\n\n
replace ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.replace(id,\n*options_for_render)\nReplaces the "outer HTML" (i.e., the entire element, not just its\ncontents) of the DOM element with the given +id+.\n\n+options_for_render+ may be either a string of HTML to insert, or a hash\nof options to be passed to ActionView::Base#render.  For example:\n Replace the DOM element having ID 'person-45' with the\n 'person' partial for the appropriate object.\n  page.replace 'person-45', :partial => 'person', :object => @person\n\nThis allows the same partial that is used for the +insert_html+ to\nbe also used for the input to +replace+ without resorting to\nthe use of wrapper elements.\n\nExamples:\n\n  <div id="people">\n    <%= render :partial => 'person', :collection => @people %>\n  </div>\n Insert a new person\n\n Generates: new Insertion.Bottom({object: "Matz", partial: "person"}, "");\n  page.insert_html :bottom, :partial => 'person', :object => @person\n Replace an existing person\n Generates: Element.replace("person_45", "-- Contents of partial --");\n  page.replace 'person_45', :partial => 'person', :object => @person\n
replace_html ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.replace_html(id,\n*options_for_render)\nReplaces the inner HTML of the DOM element with the given +id+.\n\n+options_for_render+ may be either a string of HTML to insert, or a hash\nof options to be passed to ActionView::Base#render.  For example:\n Replace the HTML of the DOM element having ID 'person-45' with the\n 'person' partial for the appropriate object.\n Generates:  Element.update("person-45", "-- Contents of 'person' partial --");\n  page.replace_html 'person-45', :partial => 'person', :object => @person\n
select ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.select(pattern)\nReturns a collection reference by finding it through a CSS +pattern+ in the\nDOM. This collection can then be\nused for further method calls. Examples:\n\n  page.select('p')                      # => $$('p');\n  page.select('p.welcome b').first      # => $$('p.welcome b').first();\n  page.select('p.welcome b').first.hide # => $$('p.welcome b').first().hide();\n\nYou can also use prototype enumerations with the collection.  Observe:\n Generates: $$('#items li').each(function(value) { value.hide(); });\n  page.select('#items li').each do |value|\n    value.hide\n  end\n\nThough you can call the block param anything you want, they are always\nrendered in the\njavascript as 'value, index.'  Other enumerations, like collect() return\nthe last statement:\n Generates: var hidden = $$('#items li').collect(function(value, index) {\n return value.hide(); });\n  page.select('#items li').collect('hidden') do |item|\n    item.hide\n  end\n
show ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.show(*ids)\nShows hidden DOM elements with the given +ids+.\n\nExample:\n Show a few people\n Generates: ["person_6", "person_13", "person_223"].each(Element.show);\n page.show 'person_6', 'person_13', 'person_223'\n
sortable ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.sortable(id,\noptions = {})\nCreates a script.aculo.us sortable element. Useful\nto recreate sortable elements after items get added\nor deleted.\nSee ActionView::Helpers::ScriptaculousHelper for more information.\n
toggle ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.toggle(*ids)\nToggles the visibility of the DOM elements with the given +ids+.\nExample:\n Show a few people\n Generates: ["person_14", "person_12", "person_23"].each(Element.toggle);\n page.toggle 'person_14', 'person_12', 'person_23'      # Hides the elements\n page.toggle 'person_14', 'person_12', 'person_23'      # Shows the previously\n hidden elements\n
visual_effect ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.visual_effect(name,\nid = nil, options = {})\nStarts a script.aculo.us visual effect. See\nActionView::Helpers::ScriptaculousHelper for more information.\n
with_formats ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods.with_formats(*args)\n\n
number_to_currency ActionView::Helpers::NumberHelper.number_to_currency(number, options = {})\nFormats a +number+ into a currency string (e.g., $13.65). You can customize\nthe format\nin the +options+ hash.\n\n==== Options\n* <tt>:locale</tt>           - Sets the locale to be used for formatting\n(defaults to current locale).\n* <tt>:precision</tt>        - Sets the level of precision (defaults to 2).\n* <tt>:unit</tt>             - Sets the denomination of the currency (defaults\nto "$").\n* <tt>:separator</tt>        - Sets the separator between the units (defaults\nto ".").\n* <tt>:delimiter</tt>        - Sets the thousands delimiter (defaults to ",").\n* <tt>:format</tt>           - Sets the format for non-negative numbers\n(defaults to "%u%n").\n                               Fields are <tt>%u</tt> for the currency,\n                               and <tt>%n</tt>\n                               for the number.\n* <tt>:negative_format</tt>  - Sets the format for negative numbers (defaults\nto prepending\n                               an hyphen to the formatted number given by\n                               <tt>:format</tt>).\n                               Accepts the same fields than <tt>:format</tt>,\n                               except\n                               <tt>%n</tt> is here the absolute value of\n                               the number.\n\n==== Examples\n number_to_currency(1234567890.50)                    # => $1,234,567,890.50\n number_to_currency(1234567890.506)                   # => $1,234,567,890.51\n number_to_currency(1234567890.506, :precision => 3)  # => $1,234,567,890.506\n number_to_currency(1234567890.506, :locale => :fr)   # => 1 234 567\n 890,506 €\n\n number_to_currency(1234567890.50, :negative_format => "(%u%n)")\n => ($1,234,567,890.51)\n number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",",\n :delimiter => "")\n => &pound;1234567890,50\n number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",",\n :delimiter => "", :format => "%n %u")\n => 1234567890,50 &pound;\n
number_to_human ActionView::Helpers::NumberHelper.number_to_human(number, options = {})\nPretty prints (formats and approximates) a number in a way it is more readable\nby humans\n(eg.: 1200000000 becomes "1.2 Billion"). This is useful for numbers that\ncan get very large (and too hard to read).\n\nSee <tt>number_to_human_size</tt> if you want to print a file size.\n\nYou can also define you own unit-quantifier names if you want to use other\ndecimal units\n(eg.: 1500 becomes "1.5 kilometers", 0.150 becomes "150 mililiters", etc). You\nmay define\na wide range of unit quantifiers, even fractional ones (centi, deci, mili,\netc).\n\n==== Options\n* <tt>:locale</tt>     - Sets the locale to be used for formatting (defaults\nto current locale).\n* <tt>:precision</tt>  - Sets the precision of the number (defaults to 3).\n* <tt>:significant</tt>  - If +true+, precision will be the # of\nsignificant_digits. If +false+, the # of fractional digits (defaults to +true+)\n* <tt>:separator</tt>  - Sets the separator between the fractional and\ninteger digits (defaults to ".").\n* <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to "").\n* <tt>:strip_insignificant_zeros</tt>  - If +true+ removes insignificant\nzeros after the decimal separator (defaults to +true+)\n* <tt>:units</tt> - A Hash of unit quantifier names. Or a string containing\nan i18n scope where to find this hash. It might have the following keys:\n  * *integers*: <tt>:unit</tt>, <tt>:ten</tt>, <tt>:hundred</tt>,\n  <tt>:thousand</tt>,  <tt>:million</tt>,  <tt>:billion</tt>,\n  <tt>:trillion</tt>, <tt>:quadrillion</tt>\n  * *fractionals*: <tt>:deci</tt>, <tt>:centi</tt>, <tt>:mili</tt>,\n  <tt>:micro</tt>, <tt>:nano</tt>, <tt>:pico</tt>, <tt>:femto</tt>\n* <tt>:format</tt> - Sets the format of the output string (defaults to\n"%n %u"). The field types are:\n\n    %u  The quantifier (ex.: 'thousand')\n    %n  The number\n\n==== Examples\n number_to_human(123)                                          # => "123"\n number_to_human(1234)                                         # =>\n "1.23 Thousand"\n number_to_human(12345)                                        # =>\n "12.3 Thousand"\n number_to_human(1234567)                                      # =>\n "1.23 Million"\n number_to_human(1234567890)                                   # =>\n "1.23 Billion"\n number_to_human(1234567890123)                                # =>\n "1.23 Trillion"\n number_to_human(1234567890123456)                             # =>\n "1.23 Quadrillion"\n number_to_human(1234567890123456789)                          # =>\n "1230 Quadrillion"\n number_to_human(489939, :precision => 2)                      # =>\n "490 Thousand"\n number_to_human(489939, :precision => 4)                      # =>\n "489.9 Thousand"\n number_to_human(1234567, :precision => 4,\n                          :significant => false)               # =>\n                          "1.2346 Million"\n number_to_human(1234567, :precision => 1,\n                          :separator => ',',\n                          :significant => false)               # =>\n                          "1,2 Million"\n\nUnsignificant zeros after the decimal separator are stripped out by default\n(set\n<tt>:strip_insignificant_zeros</tt> to +false+ to change that):\n number_to_human(12345012345, :significant_digits => 6)       # => "12.345\n Billion"\n number_to_human(500000000, :precision=>5)                    # => "500\n Million"\n\n==== Custom Unit Quantifiers\n\nYou can also use your own custom unit quantifiers:\n number_to_human(500000, :units => {:unit => "ml", :thousand => "lt"})  # =>\n "500 lt"\n\nIf in your I18n locale you have:\n  distance:\n    centi:\n      one: "centimeter"\n      other: "centimeters"\n    unit:\n      one: "meter"\n      other: "meters"\n    thousand:\n      one: "kilometer"\n      other: "kilometers"\n    billion: "gazilion-distance"\n\nThen you could do:\n\n number_to_human(543934, :units => :distance)                              #\n => "544 kilometers"\n number_to_human(54393498, :units => :distance)                            #\n => "54400 kilometers"\n number_to_human(54393498000, :units => :distance)                         #\n => "54.4 gazilion-distance"\n number_to_human(343, :units => :distance, :precision => 1)                #\n => "300 meters"\n number_to_human(1, :units => :distance)                                   #\n => "1 meter"\n number_to_human(0.34, :units => :distance)                                #\n => "34 centimeters"\n
number_to_human_size ActionView::Helpers::NumberHelper.number_to_human_size(number, options = {})\nFormats the bytes in +number+ into a more understandable representation\n(e.g., giving it 1500 yields 1.5 KB). This method is useful for\nreporting file sizes to users. You can customize the\nformat in the +options+ hash.\n\nSee <tt>number_to_human</tt> if you want to pretty-print a generic number.\n\n==== Options\n* <tt>:locale</tt>     - Sets the locale to be used for formatting (defaults\nto current locale).\n* <tt>:precision</tt>  - Sets the precision of the number (defaults to 3).\n* <tt>:significant</tt>  - If +true+, precision will be the # of\nsignificant_digits. If +false+, the # of fractional digits (defaults to +true+)\n* <tt>:separator</tt>  - Sets the separator between the fractional and\ninteger digits (defaults to ".").\n* <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to "").\n* <tt>:strip_insignificant_zeros</tt>  - If +true+ removes insignificant\nzeros after the decimal separator (defaults to +true+)\n==== Examples\n number_to_human_size(123)                                          # =>\n 123 Bytes\n number_to_human_size(1234)                                         # =>\n 1.21 KB\n number_to_human_size(12345)                                        # =>\n 12.1 KB\n number_to_human_size(1234567)                                      # =>\n 1.18 MB\n number_to_human_size(1234567890)                                   # =>\n 1.15 GB\n number_to_human_size(1234567890123)                                # =>\n 1.12 TB\n number_to_human_size(1234567, :precision => 2)                     # => 1.2 MB\n number_to_human_size(483989, :precision => 2)                      # => 470 KB\n number_to_human_size(1234567, :precision => 2, :separator => ',')  # => 1,2 MB\n\nNon-significant zeros after the fractional separator are stripped out by\ndefault (set\n<tt>:strip_insignificant_zeros</tt> to +false+ to change that):\n number_to_human_size(1234567890123, :precision => 5)        # => "1.1229 TB"\n number_to_human_size(524288000, :precision=>5)              # => "500 MB"\n
number_to_percentage ActionView::Helpers::NumberHelper.number_to_percentage(number, options = {})\nFormats a +number+ as a percentage string (e.g., 65%). You can customize the\nformat in the +options+ hash.\n\n==== Options\n* <tt>:locale</tt>     - Sets the locale to be used for formatting (defaults\nto current locale).\n* <tt>:precision</tt>  - Sets the precision of the number (defaults to 3).\n* <tt>:significant</tt>  - If +true+, precision will be the # of\nsignificant_digits. If +false+, the # of fractional digits (defaults to\n+false+)\n* <tt>:separator</tt>  - Sets the separator between the fractional and\ninteger digits (defaults to ".").\n* <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to "").\n* <tt>:strip_insignificant_zeros</tt>  - If +true+ removes insignificant\nzeros after the decimal separator (defaults to +false+)\n\n==== Examples\n number_to_percentage(100)                                        # => 100.000%\n number_to_percentage(100, :precision => 0)                       # => 100%\n number_to_percentage(1000, :delimiter => '.', :separator => ',') # =>\n 1.000,000%\n number_to_percentage(302.24398923423, :precision => 5)           # =>\n 302.24399%\n number_to_percentage(1000, :locale => :fr)                       # =>\n 1 000,000%\n
number_to_phone ActionView::Helpers::NumberHelper.number_to_phone(number, options = {})\nFormats a +number+ into a US phone number (e.g., (555) 123-9876). You can\ncustomize the format\nin the +options+ hash.\n\n==== Options\n* <tt>:area_code</tt>  - Adds parentheses around the area code.\n* <tt>:delimiter</tt>  - Specifies the delimiter to use (defaults to "-").\n* <tt>:extension</tt>  - Specifies an extension to add to the end of the\n  generated number.\n* <tt>:country_code</tt>  - Sets the country code for the phone number.\n\n==== Examples\n number_to_phone(5551234)                                           #\n => 555-1234\n number_to_phone(1235551234)                                        # =>\n 123-555-1234\n number_to_phone(1235551234, :area_code => true)                    # =>\n (123) 555-1234\n number_to_phone(1235551234, :delimiter => " ")                     # =>\n 123 555 1234\n number_to_phone(1235551234, :area_code => true, :extension => 555) # =>\n (123) 555-1234 x 555\n number_to_phone(1235551234, :country_code => 1)                    # =>\n +1-123-555-1234\n\n number_to_phone(1235551234, :country_code => 1, :extension => 1343,\n :delimiter => ".")\n => +1.123.555.1234 x 1343\n
number_with_delimiter ActionView::Helpers::NumberHelper.number_with_delimiter(number, options = {})\nFormats a +number+ with grouped thousands using +delimiter+ (e.g.,\n12,324). You can\ncustomize the format in the +options+ hash.\n\n==== Options\n* <tt>:locale</tt>     - Sets the locale to be used for formatting (defaults\nto current locale).\n* <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to ",").\n* <tt>:separator</tt>  - Sets the separator between the fractional and\ninteger digits (defaults to ".").\n\n==== Examples\n number_with_delimiter(12345678)                        # => 12,345,678\n number_with_delimiter(12345678.05)                     # => 12,345,678.05\n number_with_delimiter(12345678, :delimiter => ".")     # => 12.345.678\n number_with_delimiter(12345678, :separator => ",")     # => 12,345,678\n number_with_delimiter(12345678.05, :locale => :fr)     # => 12 345 678,05\n number_with_delimiter(98765432.98, :delimiter => " ", :separator => ",")\n => 98 765 432,98\n
number_with_precision ActionView::Helpers::NumberHelper.number_with_precision(number, options = {})\nFormats a +number+ with the specified level of <tt>:precision</tt> (e.g.,\n112.32 has a precision\nof 2 if +:significant+ is +false+, and 5 if +:significant+ is +true+).\nYou can customize the format in the +options+ hash.\n\n==== Options\n* <tt>:locale</tt>     - Sets the locale to be used for formatting (defaults\nto current locale).\n* <tt>:precision</tt>  - Sets the precision of the number (defaults to 3).\n* <tt>:significant</tt>  - If +true+, precision will be the # of\nsignificant_digits. If +false+, the # of fractional digits (defaults to\n+false+)\n* <tt>:separator</tt>  - Sets the separator between the fractional and\ninteger digits (defaults to ".").\n* <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to "").\n* <tt>:strip_insignificant_zeros</tt>  - If +true+ removes insignificant\nzeros after the decimal separator (defaults to +false+)\n\n==== Examples\n number_with_precision(111.2345)                                            #\n => 111.235\n number_with_precision(111.2345, :precision => 2)                           #\n => 111.23\n number_with_precision(13, :precision => 5)                                 #\n => 13.00000\n number_with_precision(389.32314, :precision => 0)                          #\n => 389\n number_with_precision(111.2345, :significant => true)                      #\n => 111\n number_with_precision(111.2345, :precision => 1, :significant => true)\n # => 100\n number_with_precision(13, :precision => 5, :significant => true)           #\n => 13.000\n number_with_precision(111.234, :locale => :fr)                             #\n => 111,234\n number_with_precision(13, :precision => 5, :significant => true,\n strip_insignificant_zeros => true)\n => 13\n number_with_precision(389.32314, :precision => 4, :significant => true)\n # => 389.3\n number_with_precision(1111.2345, :precision => 2, :separator => ',',\n :delimiter => '.')\n => 1.111,23\n
check_box ActionView::Helpers::FormHelper.check_box(object_name, method, options =\n{}, checked_value = "1", unchecked_value = "0")\nReturns a checkbox tag tailored for accessing a specified attribute (identified\nby +method+) on an object\nassigned to the template (identified by +object+). This object must be an\ninstance object (@object) and not a local object.\nIt's intended that +method+ returns an integer and if that integer is above\nzero, then the checkbox is checked.\nAdditional options on the input tag can be passed as a hash with +options+. The\n+checked_value+ defaults to 1\nwhile the default +unchecked_value+ is set to 0 which is convenient for\nboolean values.\n\n==== Gotcha\n\nThe HTML specification says unchecked check boxes are not successful, and\nthus web browsers do not send them. Unfortunately this introduces a gotcha:\nif an +Invoice+ model has a +paid+ flag, and in the form that edits a paid\ninvoice the user unchecks its check box, no +paid+ parameter is sent. So,\nany mass-assignment idiom like\n\n  @invoice.update_attributes(params[:invoice])\n\nwouldn't update the flag.\n\nTo prevent this the helper generates an auxiliary hidden field before\nthe very check box. The hidden field has the same name and its\nattributes mimic an unchecked check box.\n\nThis way, the client either sends only the hidden field (representing\nthe check box is unchecked), or both fields. Since the HTML specification\nsays key/value pairs have to be sent in the same order they appear in the\nform, and parameters extraction gets the last occurrence of any repeated\nkey in the query string, that works for ordinary forms.\n\nUnfortunately that workaround does not work when the check box goes\nwithin an array-like parameter, as in\n\n  <%= fields_for "project[invoice_attributes][]", invoice, :index => nil do\n  |form| %>\n    <%= form.check_box :paid %>\n    ...\n  <% end %>\n\nbecause parameter name repetition is precisely what Rails seeks to distinguish\nthe elements of the array. For each item with a checked check box you\nget an extra ghost item with only that attribute, assigned to "0".\n\nIn that case it is preferable to either use +check_box_tag+ or to use\nhashes instead of arrays.\n\n==== Examples\n Let's say that @post.validated? is 1:\n  check_box("post", "validated")\n => <input name="post[validated]" type="hidden" value="0" />\n    <input type="checkbox" id="post_validated" name="post[validated]"\n    value="1" />\n Let's say that @puppy.gooddog is "no":\n  check_box("puppy", "gooddog", {}, "yes", "no")\n => <input name="puppy[gooddog]" type="hidden" value="no" />\n    <input type="checkbox" id="puppy_gooddog" name="puppy[gooddog]"\n    value="yes" />\n\n  check_box("eula", "accepted", { :class => 'eula_check' }, "yes", "no")\n => <input name="eula[accepted]" type="hidden" value="no" />\n    <input type="checkbox" class="eula_check" id="eula_accepted"\n    name="eula[accepted]" value="yes" />\n
email_field ActionView::Helpers::FormHelper.email_field(object_name, method, options = {})\nReturns a text_field of type "email".\n
fields_for ActionView::Helpers::FormHelper.fields_for(record_or_name_or_array, *args,\n&block)\nCreates a scope around a specific model object like form_for, but\ndoesn't create the form tags themselves. This makes fields_for suitable\nfor specifying additional model objects in the same form.\n\n=== Generic Examples\n\n  <%= form_for @person do |person_form| %>\n    First name: <%= person_form.text_field :first_name %>\n    Last name : <%= person_form.text_field :last_name %>\n\n    <%= fields_for @person.permission do |permission_fields| %>\n      Admin?  : <%= permission_fields.check_box :admin %>\n    <% end %>\n  <% end %>\n\n...or if you have an object that needs to be represented as a different\nparameter, like a Client that acts as a Person:\n\n  <%= fields_for :person, @client do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\n...or if you don't have an object, just a name of the parameter:\n\n  <%= fields_for :person do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\nNote: This also works for the methods in FormOptionHelper and\nDateHelper that are designed to work with an object as base, like\nFormOptionHelper#collection_select and DateHelper#datetime_select.\n\n=== Nested Attributes Examples\n\nWhen the object belonging to the current scope has a nested attribute\nwriter for a certain attribute, fields_for will yield a new scope\nfor that attribute. This allows you to create forms that set or change\nthe attributes of a parent object and its associations in one go.\n\nNested attribute writers are normal setter methods named after an\nassociation. The most common way of defining these writers is either\nwith +accepts_nested_attributes_for+ in a model definition or by\ndefining a method with the proper name. For example: the attribute\nwriter for the association <tt>:address</tt> is called\n<tt>address_attributes=</tt>.\n\nWhether a one-to-one or one-to-many style form builder will be yielded\ndepends on whether the normal reader method returns a _single_ object\nor an _array_ of objects.\n\n==== One-to-one\n\nConsider a Person class which returns a _single_ Address from the\n<tt>address</tt> reader method and responds to the\n<tt>address_attributes=</tt> writer method:\n\n  class Person\n    def address\n      @address\n    end\n\n    def address_attributes=(attributes)\n Process the attributes hash\n    end\n  end\n\nThis model can now be used with a nested fields_for, like so:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :address do |address_fields| %>\n      Street  : <%= address_fields.text_field :street %>\n      Zip code: <%= address_fields.text_field :zip_code %>\n    <% end %>\n  <% end %>\n\nWhen address is already an association on a Person you can use\n+accepts_nested_attributes_for+ to define the writer method for you:\n\n  class Person < ActiveRecord::Base\n    has_one :address\n    accepts_nested_attributes_for :address\n  end\n\nIf you want to destroy the associated model through the form, you have\nto enable it first using the <tt>:allow_destroy</tt> option for\n+accepts_nested_attributes_for+:\n\n  class Person < ActiveRecord::Base\n    has_one :address\n    accepts_nested_attributes_for :address, :allow_destroy => true\n  end\n\nNow, when you use a form element with the <tt>_destroy</tt> parameter,\nwith a value that evaluates to +true+, you will destroy the associated\nmodel (eg. 1, '1', true, or 'true'):\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :address do |address_fields| %>\n      ...\n      Delete: <%= address_fields.check_box :_destroy %>\n    <% end %>\n  <% end %>\n\n==== One-to-many\n\nConsider a Person class which returns an _array_ of Project instances\nfrom the <tt>projects</tt> reader method and responds to the\n<tt>projects_attributes=</tt> writer method:\n\n  class Person\n    def projects\n      [@project1, @project2]\n    end\n\n    def projects_attributes=(attributes)\n Process the attributes hash\n    end\n  end\n\nThis model can now be used with a nested fields_for. The block given to\nthe nested fields_for call will be repeated for each instance in the\ncollection:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects do |project_fields| %>\n      <% if project_fields.object.active? %>\n        Name: <%= project_fields.text_field :name %>\n      <% end %>\n    <% end %>\n  <% end %>\n\nIt's also possible to specify the instance to be used:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <% @person.projects.each do |project| %>\n      <% if project.active? %>\n        <%= person_form.fields_for :projects, project do |project_fields| %>\n          Name: <%= project_fields.text_field :name %>\n        <% end %>\n      <% end %>\n    <% end %>\n  <% end %>\n\nOr a collection to be used:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects, @active_projects do |project_fields|\n    %>\n      Name: <%= project_fields.text_field :name %>\n    <% end %>\n  <% end %>\n\nWhen projects is already an association on Person you can use\n+accepts_nested_attributes_for+ to define the writer method for you:\n\n  class Person < ActiveRecord::Base\n    has_many :projects\n    accepts_nested_attributes_for :projects\n  end\n\nIf you want to destroy any of the associated models through the\nform, you have to enable it first using the <tt>:allow_destroy</tt>\noption for +accepts_nested_attributes_for+:\n\n  class Person < ActiveRecord::Base\n    has_many :projects\n    accepts_nested_attributes_for :projects, :allow_destroy => true\n  end\n\nThis will allow you to specify which models to destroy in the\nattributes hash by adding a form element for the <tt>_destroy</tt>\nparameter with a value that evaluates to +true+\n(eg. 1, '1', true, or 'true'):\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects do |project_fields| %>\n      Delete: <%= project_fields.check_box :_destroy %>\n    <% end %>\n  <% end %>\n
file_field ActionView::Helpers::FormHelper.file_field(object_name, method, options = {})\nReturns an file upload input tag tailored for accessing a specified attribute\n(identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on\nthe input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML\nelement attribute as in the example\nshown.\n\n==== Examples\n  file_field(:user, :avatar)\n => <input type="file" id="user_avatar" name="user[avatar]" />\n\n  file_field(:post, :attached, :accept => 'text/html')\n => <input type="file" id="post_attached" name="post[attached]" />\n\n  file_field(:attachment, :file, :class => 'file_input')\n => <input type="file" id="attachment_file" name="attachment[file]"\n class="file_input" />\n
form_for ActionView::Helpers::FormHelper.form_for(record_or_name_or_array, *args, &proc)\nCreates a form and a scope around a specific model object that is used\nas a base for questioning about values for the fields.\n\nRails provides succinct resource-oriented form generation with +form_for+\nlike this:\n\n  <%= form_for @offer do |f| %>\n    <%= f.label :version, 'Version' %>:\n    <%= f.text_field :version %><br />\n    <%= f.label :author, 'Author' %>:\n    <%= f.text_field :author %><br />\n  <% end %>\n\nThere, +form_for+ is able to generate the rest of RESTful form\nparameters based on introspection on the record, but to understand what\nit does we need to dig first into the alternative generic usage it is\nbased upon.\n\n=== Generic form_for\n\nThe generic way to call +form_for+ yields a form builder around a\nmodel:\n\n  <%= form_for :person do |f| %>\n    First name: <%= f.text_field :first_name %><br />\n    Last name : <%= f.text_field :last_name %><br />\n    Biography : <%= f.text_area :biography %><br />\n    Admin?    : <%= f.check_box :admin %><br />\n  <% end %>\n\nThere, the argument is a symbol or string with the name of the\nobject the form is about.\n\nThe form builder acts as a regular form helper that somehow carries the\nmodel. Thus, the idea is that\n\n  <%= f.text_field :first_name %>\n\ngets expanded to\n\n  <%= text_field :person, :first_name %>\n\nThe rightmost argument to +form_for+ is an\noptional hash of options:\n\n* <tt>:url</tt> - The URL the form is submitted to. It takes the same\n  fields you pass to +url_for+ or +link_to+. In particular you may pass\n  here a named route directly as well. Defaults to the current action.\n* <tt>:html</tt> - Optional HTML attributes for the form tag.\n\nAlso note that +form_for+ doesn't create an exclusive scope. It's still\npossible to use both the stand-alone FormHelper methods and methods\nfrom FormTagHelper. For example:\n\n  <%= form_for @person do |f| %>\n    First name: <%= f.text_field :first_name %>\n    Last name : <%= f.text_field :last_name %>\n    Biography : <%= text_area :person, :biography %>\n    Admin?    : <%= check_box_tag "person[admin]", @person.company.admin? %>\n  <% end %>\n\nThis also works for the methods in FormOptionHelper and DateHelper that\nare designed to work with an object as base, like\nFormOptionHelper#collection_select and DateHelper#datetime_select.\n\n=== Resource-oriented style\n\nAs we said above, in addition to manually configuring the +form_for+\ncall, you can rely on automated resource identification, which will use\nthe conventions and named routes of that approach. This is the\npreferred way to use +form_for+ nowadays.\n\nFor example, if <tt>@post</tt> is an existing record you want to edit\n\n  <%= form_for @post do |f| %>\n    ...\n  <% end %>\n\nis equivalent to something like:\n\n  <%= form_for @post, :as => :post, :url => post_path(@post), :html => {\n  :method => :put, :class => "edit_post", :id => "edit_post_45" } do |f| %>\n    ...\n  <% end %>\n\nAnd for new records\n\n  <%= form_for(Post.new) do |f| %>\n    ...\n  <% end %>\n\nis equivalent to something like:\n\n  <%= form_for @post, :as => :post, :url => post_path(@post), :html => {\n  :class => "new_post", :id => "new_post" } do |f| %>\n    ...\n  <% end %>\n\nYou can also overwrite the individual conventions, like this:\n\n  <%= form_for(@post, :url => super_post_path(@post)) do |f| %>\n    ...\n  <% end %>\n\nYou can also set the answer format, like this:\n\n  <%= form_for(@post, :format => :json) do |f| %>\n    ...\n  <% end %>\n\nIf you have an object that needs to be represented as a different\nparameter, like a Client that acts as a Person:\n\n  <%= form_for(@post, :as => :client do |f| %>\n    ...\n  <% end %>\n\nFor namespaced routes, like +admin_post_url+:\n\n  <%= form_for([:admin, @post]) do |f| %>\n   ...\n  <% end %>\n\nIf your resource has associations defined, for example, you want to add\ncomments\nto the post given that the routes are set correctly:\n\n  <%= form_for([@document, @comment]) do |f| %>\n   ...\n  <% end %>\n\nWhere +@document = Document.find(params[:id])+ and\n+@comment = Comment.new+.\n\n=== Unobtrusive JavaScript\n\nSpecifying:\n\n   :remote => true\n\nin the options hash creates a form that will allow the unobtrusive JavaScript\ndrivers to modify its\nbehaviour. The expected default behaviour is an XMLHttpRequest in the\nbackground instead of the regular\nPOST arrangement, but ultimately the behaviour is the choice of the JavaScript\ndriver implementor.\nEven though it's using JavaScript to serialize the form elements, the form\nsubmission will work just like\na regular submission as viewed by the receiving side (all elements available\nin <tt>params</tt>).\n\nExample:\n\n  <%= form_for(@post, :remote => true) do |f| %>\n    ...\n  <% end %>\n\nThe HTML generated for this would be:\n\n  <form action='http://www.example.com' method='post' data-remote='true'>\n    <div style='margin:0;padding:0;display:inline'>\n      <input name='_method' type='hidden' value='put' />\n    </div>\n    ...\n  </form>\n\n=== Customized form builders\n\nYou can also build forms using a customized FormBuilder class. Subclass\nFormBuilder and override or define some more helpers, then use your\ncustom builder. For example, let's say you made a helper to\nautomatically add labels to form inputs.\n\n  <%= form_for @person, :url => { :action => "create" }, :builder =>\n  LabellingFormBuilder do |f| %>\n    <%= f.text_field :first_name %>\n    <%= f.text_field :last_name %>\n    <%= text_area :person, :biography %>\n    <%= check_box_tag "person[admin]", @person.company.admin? %>\n  <% end %>\n\nIn this case, if you use this:\n\n  <%= render :partial => f %>\n\nThe rendered template is <tt>people/_labelling_form</tt> and the local\nvariable referencing the form builder is called\n<tt>labelling_form</tt>.\n\nThe custom FormBuilder class is automatically merged with the options\nof a nested fields_for call, unless it's explicitly set.\n\nIn many cases you will want to wrap the above in another helper, so you\ncould do something like the following:\n\n  def labelled_form_for(record_or_name_or_array, *args, &proc)\n    options = args.extract_options!\n    form_for(record_or_name_or_array, *(args << options.merge(:builder =>\n    LabellingFormBuilder)), &proc)\n  end\n\nIf you don't need to attach a form to a model instance, then check out\nFormTagHelper#form_tag.\n
hidden_field ActionView::Helpers::FormHelper.hidden_field(object_name, method, options = {})\nReturns a hidden input tag tailored for accessing a specified attribute\n(identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on\nthe input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML\nelement attribute as in the example\nshown.\n\n==== Examples\n  hidden_field(:signup, :pass_confirm)\n => <input type="hidden" id="signup_pass_confirm" name="signup[pass_confirm]"\n value="#{@signup.pass_confirm}" />\n\n  hidden_field(:post, :tag_list)\n => <input type="hidden" id="post_tag_list" name="post[tag_list]"\n value="#{@post.tag_list}" />\n\n  hidden_field(:user, :token)\n => <input type="hidden" id="user_token" name="user[token]"\n value="#{@user.token}" />\n
label ActionView::Helpers::FormHelper.label(object_name, method, content_or_options\n= nil, options = nil, &block)\nReturns a label tag tailored for labelling an input field for a specified\nattribute (identified by +method+) on an object\nassigned to the template (identified by +object+). The text of label will\ndefault to the attribute name unless a translation\nis found in the current I18n locale (through\nhelpers.label.<modelname>.<attribute>) or you specify it explicitly.\nAdditional options on the label tag can be passed as a hash with\n+options+. These options will be tagged\nonto the HTML as an HTML element attribute as in the example shown, except\nfor the <tt>:value</tt> option, which is designed to\ntarget labels for radio_button tags (where the value is used in the ID of\nthe input tag).\n\n==== Examples\n  label(:post, :title)\n => <label for="post_title">Title</label>\n\n  You can localize your labels based on model and attribute names.\n  For example you can define the following in your locale (e.g. en.yml)\n\n  helpers:\n    label:\n      post:\n        body: "Write your entire text here"\n\n  Which then will result in\n\n  label(:post, :body)\n => <label for="post_body">Write your entire text here</label>\n\n  Localization can also be based purely on the translation of the\n  attribute-name like this:\n\n  activemodel:\n    attribute:\n      post:\n        cost: "Total cost"\n\n  label(:post, :cost)\n => <label for="post_cost">Total cost</label>\n\n  label(:post, :title, "A short title")\n => <label for="post_title">A short title</label>\n\n  label(:post, :title, "A short title", :class => "title_label")\n => <label for="post_title" class="title_label">A short title</label>\n\n  label(:post, :privacy, "Public Post", :value => "public")\n => <label for="post_privacy_public">Public Post</label>\n\n  label(:post, :terms) do\n    'Accept <a href="/terms">Terms</a>.'\n  end\n
number_field ActionView::Helpers::FormHelper.number_field(object_name, method, options = {})\nReturns an input tag of type "number".\n\n==== Options\n* Accepts same options as number_field_tag\n
password_field ActionView::Helpers::FormHelper.password_field(object_name, method, options\n= {})\nReturns an input tag of the "password" type tailored for accessing a specified\nattribute (identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on\nthe input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML\nelement attribute as in the example\nshown.\n\n==== Examples\n  password_field(:login, :pass, :size => 20)\n => <input type="password" id="login_pass" name="login[pass]" size="20"\n value="#{@login.pass}" />\n\n  password_field(:account, :secret, :class => "form_input")\n => <input type="password" id="account_secret" name="account[secret]"\n value="#{@account.secret}" class="form_input" />\n\n  password_field(:user, :password, :onchange => "if $('user[password]').length\n  > 30 { alert('Your password needs to be shorter!'); }")\n => <input type="password" id="user_password" name="user[password]"\n value="#{@user.password}" onchange = "if $('user[password]').length > 30 {\n alert('Your password needs to be shorter!'); }"/>\n\n  password_field(:account, :pin, :size => 20, :class => 'form_input')\n => <input type="password" id="account_pin" name="account[pin]" size="20"\n value="#{@account.pin}" class="form_input" />\n
phone_field ActionView::Helpers::FormHelper.phone_field(object_name, method, options = {})\n\n
radio_button ActionView::Helpers::FormHelper.radio_button(object_name, method, tag_value,\noptions = {})\nReturns a radio button tag for accessing a specified attribute (identified\nby +method+) on an object\nassigned to the template (identified by +object+). If the current value of\n+method+ is +tag_value+ the\nradio button will be checked.\n\nTo force the radio button to be checked pass <tt>:checked => true</tt> in the\n+options+ hash. You may pass HTML options there as well.\n\n==== Examples\n Let's say that @post.category returns "rails":\n  radio_button("post", "category", "rails")\n  radio_button("post", "category", "java")\n => <input type="radio" id="post_category_rails" name="post[category]"\n value="rails" checked="checked" />\n    <input type="radio" id="post_category_java" name="post[category]"\n    value="java" />\n\n  radio_button("user", "receive_newsletter", "yes")\n  radio_button("user", "receive_newsletter", "no")\n => <input type="radio" id="user_receive_newsletter_yes"\n name="user[receive_newsletter]" value="yes" />\n    <input type="radio" id="user_receive_newsletter_no"\n    name="user[receive_newsletter]" value="no" checked="checked" />\n
range_field ActionView::Helpers::FormHelper.range_field(object_name, method, options = {})\nReturns an input tag of type "range".\n\n==== Options\n* Accepts same options as range_field_tag\n
search_field ActionView::Helpers::FormHelper.search_field(object_name, method, options = {})\nReturns a text_field of type "search".\n
telephone_field ActionView::Helpers::FormHelper.telephone_field(object_name, method, options\n= {})\nReturns a text_field of type "tel".\n
text_area ActionView::Helpers::FormHelper.text_area(object_name, method, options = {})\nReturns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified by +method+)\non an object assigned to the template (identified by +object+). Additional\noptions on the input tag can be passed as a\nhash with +options+.\n\n==== Examples\n  text_area(:post, :body, :cols => 20, :rows => 40)\n => <textarea cols="20" rows="40" id="post_body" name="post[body]">\n      #{@post.body}\n    </textarea>\n\n  text_area(:comment, :text, :size => "20x30")\n => <textarea cols="20" rows="30" id="comment_text" name="comment[text]">\n      #{@comment.text}\n    </textarea>\n\n  text_area(:application, :notes, :cols => 40, :rows => 15, :class =>\n  'app_input')\n => <textarea cols="40" rows="15" id="application_notes"\n name="application[notes]" class="app_input">\n      #{@application.notes}\n    </textarea>\n\n  text_area(:entry, :body, :size => "20x20", :disabled => 'disabled')\n => <textarea cols="20" rows="20" id="entry_body" name="entry[body]"\n disabled="disabled">\n      #{@entry.body}\n    </textarea>\n
text_field ActionView::Helpers::FormHelper.text_field(object_name, method, options = {})\nReturns an input tag of the "text" type tailored for accessing a specified\nattribute (identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on\nthe input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML\nelement attribute as in the example\nshown.\n\n==== Examples\n  text_field(:post, :title, :size => 20)\n => <input type="text" id="post_title" name="post[title]" size="20"\n value="#{@post.title}" />\n\n  text_field(:post, :title, :class => "create_input")\n => <input type="text" id="post_title" name="post[title]"\n value="#{@post.title}" class="create_input" />\n\n  text_field(:session, :user, :onchange => "if $('session[user]').value ==\n  'admin' { alert('Your login can not be admin!'); }")\n => <input type="text" id="session_user" name="session[user]"\n value="#{@session.user}" onchange = "if $('session[user]').value == 'admin'\n { alert('Your login can not be admin!'); }"/>\n\n  text_field(:snippet, :code, :size => 20, :class => 'code_input')\n => <input type="text" id="snippet_code" name="snippet[code]" size="20"\n value="#{@snippet.code}" class="code_input" />\n
url_field ActionView::Helpers::FormHelper.url_field(object_name, method, options = {})\nReturns a text_field of type "url".\n
check_box_checked? ActionView::Helpers::InstanceTagMethods::ClassMethods.check_box_checked?(value,\nchecked_value)\n\n
radio_button_checked? ActionView::Helpers::InstanceTagMethods::ClassMethods.radio_button_checked?(value,\nchecked_value)\n\n
value ActionView::Helpers::InstanceTagMethods::ClassMethods.value(object,\nmethod_name)\n\n
value_before_type_cast ActionView::Helpers::InstanceTagMethods::ClassMethods.value_before_type_cast(object,\nmethod_name)\n\n
csrf_meta_tag ActionView::Helpers::CsrfHelper.csrf_meta_tag()\nReturns a meta tag with the cross-site request forgery protection token\nfor forms to use. Place this in your head.\n
date_select ActionView::Helpers::DateHelper.date_select(object_name, method, options =\n{}, html_options = {})\nReturns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based\nattribute (identified by +method+) on an object assigned to the template\n(identified by +object+).\n\n\n==== Options\n* <tt>:use_month_numbers</tt> - Set to true if you want to use month numbers\nrather than month names (e.g.\n  "2" instead of "February").\n* <tt>:use_short_month</tt>   - Set to true if you want to use abbreviated\nmonth names instead of full\n  month names (e.g. "Feb" instead of "February").\n* <tt>:add_month_numbers</tt>  - Set to true if you want to use both month\nnumbers and month names (e.g.\n  "2 - February" instead of "February").\n* <tt>:use_month_names</tt>   - Set to an array with 12 month names if you\nwant to customize month names.\n  Note: You can also use Rails' i18n functionality for this.\n* <tt>:date_separator</tt>    - Specifies a string to separate the date\nfields. Default is "" (i.e. nothing).\n* <tt>:start_year</tt>        - Set the start year for the year select. Default\nis <tt>Time.now.year - 5</tt>.\n* <tt>:end_year</tt>          - Set the end year for the year select. Default\nis <tt>Time.now.year + 5</tt>.\n* <tt>:discard_day</tt>       - Set to true if you don't want to show a day\nselect. This includes the day\n  as a hidden field instead of showing a select field. Also note that this\n  implicitly sets the day to be the\n  first of the given month in order to not create invalid dates like 31\n  February.\n* <tt>:discard_month</tt>     - Set to true if you don't want to show a\nmonth select. This includes the month\n  as a hidden field instead of showing a select field. Also note that this\n  implicitly sets :discard_day to true.\n* <tt>:discard_year</tt>      - Set to true if you don't want to show a year\nselect. This includes the year\n  as a hidden field instead of showing a select field.\n* <tt>:order</tt>             - Set to an array containing <tt>:day</tt>,\n<tt>:month</tt> and <tt>:year</tt> to\n  customize the order in which the select fields are shown. If you leave\n  out any of the symbols, the respective\n  select will not be shown (like when you set <tt>:discard_xxx =>\n  true</tt>. Defaults to the order defined in\n  the respective locale (e.g. [:year, :month, :day] in the en locale that\n  ships with Rails).\n* <tt>:include_blank</tt>     - Include a blank option in every select field\nso it's possible to set empty\n  dates.\n* <tt>:default</tt>           - Set a default date if the affected date\nisn't set or is nil.\n* <tt>:disabled</tt>          - Set to true if you want show the select\nfields as disabled.\n* <tt>:prompt</tt>            - Set to true (for a generic prompt), a prompt\nstring or a hash of prompt strings\n  for <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>, <tt>:hour</tt>,\n  <tt>:minute</tt> and <tt>:second</tt>.\n  Setting this option prepends a select option with a generic prompt  (Day,\n  Month, Year, Hour, Minute, Seconds)\n  or the given prompt string.\n\nIf anything is passed in the +html_options+ hash it will be applied to every\nselect tag in the set.\n\nNOTE: Discarded selects will default to 1. So if no month select is available,\nJanuary will be assumed.\n\n==== Examples\n Generates a date select that when POSTed is stored in the post variable,\n in the written_on attribute\n  date_select("post", "written_on")\n Generates a date select that when POSTed is stored in the post variable,\n in the written_on attribute,\n with the year in the year drop down box starting at 1995.\n  date_select("post", "written_on", :start_year => 1995)\n Generates a date select that when POSTed is stored in the post variable,\n in the written_on attribute,\n with the year in the year drop down box starting at 1995, numbers used for\n months instead of words,\n and without a day select box.\n  date_select("post", "written_on", :start_year => 1995, :use_month_numbers\n  => true,\n                                    :discard_day => true, :include_blank\n                                    => true)\n Generates a date select that when POSTed is stored in the post variable,\n in the written_on attribute\n with the fields ordered as day, month, year rather than month, day, year.\n  date_select("post", "written_on", :order => [:day, :month, :year])\n Generates a date select that when POSTed is stored in the user variable,\n in the birthday attribute\n lacking a year field.\n  date_select("user", "birthday", :order => [:month, :day])\n Generates a date select that when POSTed is stored in the user variable,\n in the birthday attribute\n which is initially set to the date 3 days from the current date\n  date_select("post", "written_on", :default => 3.days.from_now)\n Generates a date select that when POSTed is stored in the credit_card\n variable, in the bill_due attribute\n that will have a default day of 20.\n  date_select("credit_card", "bill_due", :default => { :day => 20 })\n Generates a date select with custom prompts\n  date_select("post", "written_on", :prompt => { :day => 'Select day',\n  :month => 'Select month', :year => 'Select year' })\n\nThe selects are prepared for multi-parameter assignment to an Active Record\nobject.\n\nNote: If the day is not included as an option but the month is, the day will\nbe set to the 1st to ensure that\nall month choices are valid.\n
datetime_select ActionView::Helpers::DateHelper.datetime_select(object_name, method, options =\n{}, html_options = {})\nReturns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing a\nspecified datetime-based attribute (identified by +method+) on an object\nassigned to the template (identified\nby +object+).\n\nIf anything is passed in the html_options hash it will be applied to every\nselect tag in the set.\n\n==== Examples\n Generates a datetime select that, when POSTed, will be stored in the post\n variable in the written_on\n attribute\n  datetime_select("post", "written_on")\n Generates a datetime select with a year select that starts at 1995 that,\n when POSTed, will be stored in the\n post variable in the written_on attribute.\n  datetime_select("post", "written_on", :start_year => 1995)\n Generates a datetime select with a default value of 3 days from the current\n time that, when POSTed, will\n be stored in the trip variable in the departing attribute.\n  datetime_select("trip", "departing", :default => 3.days.from_now)\n Generates a datetime select that discards the type that, when POSTed,\n will be stored in the post variable\n as the written_on attribute.\n  datetime_select("post", "written_on", :discard_type => true)\n Generates a datetime select with a custom prompt. Use :prompt=>true for\n generic prompts.\n  datetime_select("post", "written_on", :prompt => {:day => 'Choose day',\n  :month => 'Choose month', :year => 'Choose year'})\n  datetime_select("post", "written_on", :prompt => {:hour => true}) #\n  generic prompt for hours\n  datetime_select("post", "written_on", :prompt => true) # generic prompts\n  for all\n\nThe selects are prepared for multi-parameter assignment to an Active Record\nobject.\n
distance_of_time_in_words ActionView::Helpers::DateHelper.distance_of_time_in_words(from_time, to_time =\n0, include_seconds = false, options = {})\nReports the approximate distance in time between two Time or Date objects\nor integers as seconds.\nSet <tt>include_seconds</tt> to true if you want more detailed approximations\nwhen distance < 1 min, 29 secs\nDistances are reported based on the following table:\n\n  0 <-> 29 secs                                                             #\n  => less than a minute\n  30 secs <-> 1 min, 29 secs                                                #\n  => 1 minute\n  1 min, 30 secs <-> 44 mins, 29 secs                                       #\n  => [2..44] minutes\n  44 mins, 30 secs <-> 89 mins, 29 secs                                     #\n  => about 1 hour\n  89 mins, 29 secs <-> 23 hrs, 59 mins, 29 secs                             #\n  => about [2..24] hours\n  23 hrs, 59 mins, 29 secs <-> 47 hrs, 59 mins, 29 secs                     #\n  => 1 day\n  47 hrs, 59 mins, 29 secs <-> 29 days, 23 hrs, 59 mins, 29 secs            #\n  => [2..29] days\n  29 days, 23 hrs, 59 mins, 30 secs <-> 59 days, 23 hrs, 59 mins, 29 secs   #\n  => about 1 month\n  59 days, 23 hrs, 59 mins, 30 secs <-> 1 yr minus 1 sec                    #\n  => [2..12] months\n  1 yr <-> 1 yr, 3 months                                                   #\n  => about 1 year\n  1 yr, 3 months <-> 1 yr, 9 months                                         #\n  => over 1 year\n  1 yr, 9 months <-> 2 yr minus 1 sec                                       #\n  => almost 2 years\n  2 yrs <-> max time or date                                                #\n  => (same rules as 1 yr)\n\nWith <tt>include_seconds</tt> = true and the difference < 1 minute 29 seconds:\n  0-4   secs      # => less than 5 seconds\n  5-9   secs      # => less than 10 seconds\n  10-19 secs      # => less than 20 seconds\n  20-39 secs      # => half a minute\n  40-59 secs      # => less than a minute\n  60-89 secs      # => 1 minute\n\n==== Examples\n  from_time = Time.now\n  distance_of_time_in_words(from_time, from_time + 50.minutes)        # =>\n  about 1 hour\n  distance_of_time_in_words(from_time, 50.minutes.from_now)           # =>\n  about 1 hour\n  distance_of_time_in_words(from_time, from_time + 15.seconds)        # =>\n  less than a minute\n  distance_of_time_in_words(from_time, from_time + 15.seconds, true)  # =>\n  less than 20 seconds\n  distance_of_time_in_words(from_time, 3.years.from_now)              # =>\n  about 3 years\n  distance_of_time_in_words(from_time, from_time + 60.hours)          # =>\n  about 3 days\n  distance_of_time_in_words(from_time, from_time + 45.seconds, true)  # =>\n  less than a minute\n  distance_of_time_in_words(from_time, from_time - 45.seconds, true)  # =>\n  less than a minute\n  distance_of_time_in_words(from_time, 76.seconds.from_now)           # =>\n  1 minute\n  distance_of_time_in_words(from_time, from_time + 1.year + 3.days)   # =>\n  about 1 year\n  distance_of_time_in_words(from_time, from_time + 3.years + 6.months) # =>\n  over 3 years\n  distance_of_time_in_words(from_time, from_time + 4.years + 9.days +\n  30.minutes + 5.seconds) # => about 4 years\n\n  to_time = Time.now + 6.years + 19.days\n  distance_of_time_in_words(from_time, to_time, true)     # => about 6 years\n  distance_of_time_in_words(to_time, from_time, true)     # => about 6 years\n  distance_of_time_in_words(Time.now, Time.now)           # => less than\n  a minute\n
distance_of_time_in_words_to_now ActionView::Helpers::DateHelper.distance_of_time_in_words_to_now(from_time,\ninclude_seconds = false)\n\n
select_date ActionView::Helpers::DateHelper.select_date(date = Date.current, options =\n{}, html_options = {})\nReturns a set of html select-tags (one for year, month, and day) pre-selected\nwith the +date+.\nIt's possible to explicitly set the order of the tags using the <tt>:order</tt>\noption with an array of\nsymbols <tt>:year</tt>, <tt>:month</tt> and <tt>:day</tt> in the desired\norder. If you do not supply a Symbol,\nit will be appended onto the <tt>:order</tt> passed in.\n\nIf anything is passed in the html_options hash it will be applied to every\nselect tag in the set.\n\n==== Examples\n  my_date = Time.today + 6.days\n Generates a date select that defaults to the date in my_date (six days\n after today)\n  select_date(my_date)\n Generates a date select that defaults to today (no specified date)\n  select_date()\n Generates a date select that defaults to the date in my_date (six days\n after today)\n with the fields ordered year, month, day rather than month, day, year.\n  select_date(my_date, :order => [:year, :month, :day])\n Generates a date select that discards the type of the field and defaults\n to the date in\n my_date (six days after today)\n  select_date(my_date, :discard_type => true)\n Generates a date select that defaults to the date in my_date,\n which has fields separated by '/'\n  select_date(my_date, :date_separator => '/')\n Generates a date select that defaults to the datetime in my_date (six days\n after today)\n prefixed with 'payday' rather than 'date'\n  select_date(my_date, :prefix => 'payday')\n Generates a date select with a custom prompt. Use :prompt=>true for generic\n prompts.\n  select_date(my_date, :prompt => {:day => 'Choose day', :month => 'Choose\n  month', :year => 'Choose year'})\n  select_date(my_date, :prompt => {:hour => true}) # generic prompt for hours\n  select_date(my_date, :prompt => true) # generic prompts for all\n
select_datetime ActionView::Helpers::DateHelper.select_datetime(datetime = Time.current,\noptions = {}, html_options = {})\nReturns a set of html select-tags (one for year, month, day, hour, and minute)\npre-selected with the\n+datetime+. It's also possible to explicitly set the order of the tags using\nthe <tt>:order</tt> option with\nan array of symbols <tt>:year</tt>, <tt>:month</tt> and <tt>:day</tt> in\nthe desired order. If you do not\nsupply a Symbol, it will be appended onto the <tt>:order</tt> passed in. You\ncan also add\n<tt>:date_separator</tt>, <tt>:datetime_separator</tt> and\n<tt>:time_separator</tt> keys to the +options+ to\ncontrol visual display of the elements.\n\nIf anything is passed in the html_options hash it will be applied to every\nselect tag in the set.\n\n==== Examples\n  my_date_time = Time.now + 4.days\n Generates a datetime select that defaults to the datetime in my_date_time\n (four days after today)\n  select_datetime(my_date_time)\n Generates a datetime select that defaults to today (no specified datetime)\n  select_datetime()\n Generates a datetime select that defaults to the datetime in my_date_time\n (four days after today)\n with the fields ordered year, month, day rather than month, day, year.\n  select_datetime(my_date_time, :order => [:year, :month, :day])\n Generates a datetime select that defaults to the datetime in my_date_time\n (four days after today)\n with a '/' between each date field.\n  select_datetime(my_date_time, :date_separator => '/')\n Generates a datetime select that defaults to the datetime in my_date_time\n (four days after today)\n with a date fields separated by '/', time fields separated by '' and the\n date and time fields\n separated by a comma (',').\n  select_datetime(my_date_time, :date_separator => '/', :time_separator =>\n  '', :datetime_separator => ',')\n Generates a datetime select that discards the type of the field and defaults\n to the datetime in\n my_date_time (four days after today)\n  select_datetime(my_date_time, :discard_type => true)\n Generates a datetime select that defaults to the datetime in my_date_time\n (four days after today)\n prefixed with 'payday' rather than 'date'\n  select_datetime(my_date_time, :prefix => 'payday')\n Generates a datetime select with a custom prompt. Use :prompt=>true for\n generic prompts.\n  select_datetime(my_date_time, :prompt => {:day => 'Choose day', :month =>\n  'Choose month', :year => 'Choose year'})\n  select_datetime(my_date_time, :prompt => {:hour => true}) # generic prompt\n  for hours\n  select_datetime(my_date_time, :prompt => true) # generic prompts for all\n
select_day ActionView::Helpers::DateHelper.select_day(date, options = {}, html_options\n= {})\nReturns a select tag with options for each of the days 1 through 31 with\nthe current day selected.\nThe <tt>date</tt> can also be substituted for a hour number.\nOverride the field name using the <tt>:field_name</tt> option, 'day'\nby default.\n\n==== Examples\n  my_date = Time.today + 2.days\n Generates a select field for days that defaults to the day for the date\n in my_date\n  select_day(my_time)\n Generates a select field for days that defaults to the number given\n  select_day(5)\n Generates a select field for days that defaults to the day for the date\n in my_date\n that is named 'due' rather than 'day'\n  select_day(my_time, :field_name => 'due')\n Generates a select field for days with a custom prompt.  Use :prompt =>\n true for a\n generic prompt.\n  select_day(5, :prompt => 'Choose day')\n
select_hour ActionView::Helpers::DateHelper.select_hour(datetime, options = {},\nhtml_options = {})\nReturns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected.\nThe <tt>hour</tt> can also be substituted for a hour number.\nOverride the field name using the <tt>:field_name</tt> option, 'hour'\nby default.\n\n==== Examples\n  my_time = Time.now + 6.hours\n Generates a select field for hours that defaults to the hour for the time\n in my_time\n  select_hour(my_time)\n Generates a select field for hours that defaults to the number given\n  select_hour(13)\n Generates a select field for hours that defaults to the minutes for the\n time in my_time\n that is named 'stride' rather than 'second'\n  select_hour(my_time, :field_name => 'stride')\n Generates a select field for hours with a custom prompt.  Use :prompt =>\n true for a\n generic prompt.\n  select_hour(13, :prompt =>'Choose hour')\n
select_minute ActionView::Helpers::DateHelper.select_minute(datetime, options = {},\nhtml_options = {})\nReturns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected.\nAlso can return a select tag with options by <tt>minute_step</tt> from 0\nthrough 59 with the 00 minute\nselected. The <tt>minute</tt> can also be substituted for a minute number.\nOverride the field name using the <tt>:field_name</tt> option, 'minute'\nby default.\n\n==== Examples\n  my_time = Time.now + 6.hours\n Generates a select field for minutes that defaults to the minutes for the\n time in my_time\n  select_minute(my_time)\n Generates a select field for minutes that defaults to the number given\n  select_minute(14)\n Generates a select field for minutes that defaults to the minutes for the\n time in my_time\n that is named 'stride' rather than 'second'\n  select_minute(my_time, :field_name => 'stride')\n Generates a select field for minutes with a custom prompt.  Use :prompt=>true\n for a\n generic prompt.\n  select_minute(14, :prompt => 'Choose minutes')\n
select_month ActionView::Helpers::DateHelper.select_month(date, options = {}, html_options\n= {})\nReturns a select tag with options for each of the months January through\nDecember with the current month\nselected. The month names are presented as keys (what's shown to the user)\nand the month numbers (1-12) are\nused as values (what's submitted to the server). It's also possible to use\nmonth numbers for the presentation\ninstead of names -- set the <tt>:use_month_numbers</tt> key in +options+\nto true for this to happen. If you\nwant both numbers and names, set the <tt>:add_month_numbers</tt> key in\n+options+ to true. If you would prefer\nto show month names as abbreviations, set the <tt>:use_short_month</tt>\nkey in +options+ to true. If you want\nto use your own month names, set the <tt>:use_month_names</tt> key in +options+\nto an array of 12 month names.\nOverride the field name using the <tt>:field_name</tt> option, 'month'\nby default.\n\n==== Examples\n Generates a select field for months that defaults to the current month that\n will use keys like "January", "March".\n  select_month(Date.today)\n Generates a select field for months that defaults to the current month that\n is named "start" rather than "month"\n  select_month(Date.today, :field_name => 'start')\n Generates a select field for months that defaults to the current month that\n will use keys like "1", "3".\n  select_month(Date.today, :use_month_numbers => true)\n Generates a select field for months that defaults to the current month that\n will use keys like "1 - January", "3 - March".\n  select_month(Date.today, :add_month_numbers => true)\n Generates a select field for months that defaults to the current month that\n will use keys like "Jan", "Mar".\n  select_month(Date.today, :use_short_month => true)\n Generates a select field for months that defaults to the current month that\n will use keys like "Januar", "Marts."\n  select_month(Date.today, :use_month_names => %w(Januar Februar Marts ...))\n Generates a select field for months with a custom prompt.  Use :prompt =>\n true for a\n generic prompt.\n  select_month(14, :prompt => 'Choose month')\n
select_second ActionView::Helpers::DateHelper.select_second(datetime, options = {},\nhtml_options = {})\nReturns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected.\nThe <tt>second</tt> can also be substituted for a second number.\nOverride the field name using the <tt>:field_name</tt> option, 'second'\nby default.\n\n==== Examples\n  my_time = Time.now + 16.minutes\n Generates a select field for seconds that defaults to the seconds for the\n time in my_time\n  select_second(my_time)\n Generates a select field for seconds that defaults to the number given\n  select_second(33)\n Generates a select field for seconds that defaults to the seconds for the\n time in my_time\n that is named 'interval' rather than 'second'\n  select_second(my_time, :field_name => 'interval')\n Generates a select field for seconds with a custom prompt.  Use :prompt=>true\n for a\n generic prompt.\n  select_minute(14, :prompt => 'Choose seconds')\n
select_time ActionView::Helpers::DateHelper.select_time(datetime = Time.current, options =\n{}, html_options = {})\nReturns a set of html select-tags (one for hour and minute)\nYou can set <tt>:time_separator</tt> key to format the output, and\nthe <tt>:include_seconds</tt> option to include an input for seconds.\n\nIf anything is passed in the html_options hash it will be applied to every\nselect tag in the set.\n\n==== Examples\n  my_time = Time.now + 5.days + 7.hours + 3.minutes + 14.seconds\n Generates a time select that defaults to the time in my_time\n  select_time(my_time)\n Generates a time select that defaults to the current time (no specified time)\n  select_time()\n Generates a time select that defaults to the time in my_time,\n which has fields separated by ':'\n  select_time(my_time, :time_separator => ':')\n Generates a time select that defaults to the time in my_time,\n that also includes an input for seconds\n  select_time(my_time, :include_seconds => true)\n Generates a time select that defaults to the time in my_time, that has fields\n separated by ':' and includes an input for seconds\n  select_time(my_time, :time_separator => ':', :include_seconds => true)\n Generates a time select with a custom prompt. Use :prompt=>true for generic\n prompts.\n  select_time(my_time, :prompt => {:day => 'Choose day', :month => 'Choose\n  month', :year => 'Choose year'})\n  select_time(my_time, :prompt => {:hour => true}) # generic prompt for hours\n  select_time(my_time, :prompt => true) # generic prompts for all\n
select_year ActionView::Helpers::DateHelper.select_year(date, options = {}, html_options\n= {})\nReturns a select tag with options for each of the five years on each side\nof the current, which is selected.\nThe five year radius can be changed using the <tt>:start_year</tt> and\n<tt>:end_year</tt> keys in the\n+options+. Both ascending and descending year lists are supported by making\n<tt>:start_year</tt> less than or\ngreater than <tt>:end_year</tt>. The <tt>date</tt> can also be substituted\nfor a year given as a number.\nOverride the field name using the <tt>:field_name</tt> option, 'year'\nby default.\n\n==== Examples\n Generates a select field for years that defaults to the current year that\n has ascending year values\n  select_year(Date.today, :start_year => 1992, :end_year => 2007)\n Generates a select field for years that defaults to the current year that\n is named 'birth' rather than 'year'\n  select_year(Date.today, :field_name => 'birth')\n Generates a select field for years that defaults to the current year that\n has descending year values\n  select_year(Date.today, :start_year => 2005, :end_year => 1900)\n Generates a select field for years that defaults to the year 2006 that\n has ascending year values\n  select_year(2006, :start_year => 2000, :end_year => 2010)\n Generates a select field for years with a custom prompt.  Use :prompt =>\n true for a\n generic prompt.\n  select_year(14, :prompt => 'Choose year')\n
time_ago_in_words ActionView::Helpers::DateHelper.time_ago_in_words(from_time, include_seconds\n= false)\nLike distance_of_time_in_words, but where <tt>to_time</tt> is fixed to\n<tt>Time.now</tt>.\n\n==== Examples\n  time_ago_in_words(3.minutes.from_now)       # => 3 minutes\n  time_ago_in_words(Time.now - 15.hours)      # => 15 hours\n  time_ago_in_words(Time.now)                 # => less than a minute\n\n  from_time = Time.now - 3.days - 14.minutes - 25.seconds     # => 3 days\n
time_select ActionView::Helpers::DateHelper.time_select(object_name, method, options =\n{}, html_options = {})\nReturns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing a\nspecified time-based attribute (identified by +method+) on an object assigned\nto the template (identified by\n+object+). You can include the seconds with <tt>:include_seconds</tt>.\n\nThis method will also generate 3 input hidden tags, for the actual year,\nmonth and day unless the option\n<tt>:ignore_date</tt> is set to +true+.\n\nIf anything is passed in the html_options hash it will be applied to every\nselect tag in the set.\n\n==== Examples\n Creates a time select tag that, when POSTed, will be stored in the post\n variable in the sunrise attribute\n  time_select("post", "sunrise")\n Creates a time select tag that, when POSTed, will be stored in the order\n variable in the submitted\n attribute\n  time_select("order", "submitted")\n Creates a time select tag that, when POSTed, will be stored in the mail\n variable in the sent_at attribute\n  time_select("mail", "sent_at")\n Creates a time select tag with a seconds field that, when POSTed, will be\n stored in the post variables in\n the sunrise attribute.\n  time_select("post", "start_time", :include_seconds => true)\n Creates a time select tag with a seconds field that, when POSTed, will be\n stored in the entry variables in\n the submission_time attribute.\n  time_select("entry", "submission_time", :include_seconds => true)\n You can set the :minute_step to 15 which will give you: 00, 15, 30 and 45.\n  time_select 'game', 'game_time', {:minute_step => 15}\n Creates a time select tag with a custom prompt. Use :prompt => true for\n generic prompts.\n  time_select("post", "written_on", :prompt => {:hour => 'Choose hour',\n  :minute => 'Choose minute', :second => 'Choose seconds'})\n  time_select("post", "written_on", :prompt => {:hour => true}) # generic\n  prompt for hours\n  time_select("post", "written_on", :prompt => true) # generic prompts for all\n\nThe selects are prepared for multi-parameter assignment to an Active Record\nobject.\n\nNote: If the day is not included as an option but the month is, the day will\nbe set to the 1st to ensure that\nall month choices are valid.\n
auto_link ActionView::Helpers::TextHelper.auto_link(text, *args, &block)\nTurns all URLs and e-mail addresses into clickable links. The <tt>:link</tt>\noption\nwill limit what should be linked. You can add HTML attributes to the links\nusing\n<tt>:html</tt>. Possible values for <tt>:link</tt> are <tt>:all</tt> (default),\n<tt>:email_addresses</tt>, and <tt>:urls</tt>. If a block is given, each\nURL and\ne-mail address is yielded and the result is used as the link text.\n\n==== Examples\n  auto_link("Go to http://www.rubyonrails.org and say hello to\n  david@loudthinking.com")\n => "Go to <a\n href=\"http://www.rubyonrails.org\">http://www.rubyonrails.org</a> and\n     say hello to <a\n     href=\"mailto:david@loudthinking.com\">david@loudthinking.com</a>"\n\n  auto_link("Visit http://www.loudthinking.com/ or e-mail\n  david@loudthinking.com", :link => :urls)\n => "Visit <a\n href=\"http://www.loudthinking.com/\">http://www.loudthinking.com/</a>\n     or e-mail david@loudthinking.com"\n\n  auto_link("Visit http://www.loudthinking.com/ or e-mail\n  david@loudthinking.com", :link => :email_addresses)\n => "Visit http://www.loudthinking.com/ or e-mail <a\n href=\"mailto:david@loudthinking.com\">david@loudthinking.com</a>"\n\n  post_body = "Welcome to my new blog at http://www.myblog.com/.  Please e-mail\n  me at me@email.com."\n  auto_link(post_body, :html => { :target => '_blank' }) do |text|\n    truncate(text, 15)\n  end\n => "Welcome to my new blog at <a href=\"http://www.myblog.com/\"\n target=\"_blank\">http://www.m...</a>.\n        Please e-mail me at <a href=\"mailto:me@email.com\">me@email.com</a>."\n\n\nYou can still use <tt>auto_link</tt> with the old API that accepts the\n+link+ as its optional second parameter and the +html_options+ hash\nas its optional third parameter:\n  post_body = "Welcome to my new blog at http://www.myblog.com/. Please\n  e-mail me at me@email.com."\n  auto_link(post_body, :urls)     # => Once upon\\na time\n => "Welcome to my new blog at <a\n href=\"http://www.myblog.com/\">http://www.myblog.com</a>.\n        Please e-mail me at me@email.com."\n\n  auto_link(post_body, :all, :target => "_blank")     # => Once upon\\na time\n => "Welcome to my new blog at <a href=\"http://www.myblog.com/\"\n target=\"_blank\">http://www.myblog.com</a>.\n        Please e-mail me at <a href=\"mailto:me@email.com\">me@email.com</a>."\n
auto_link_email_addresses ActionView::Helpers::TextHelper.auto_link_email_addresses(text, html_options =\n{}, options = {})\nTurns all email addresses into clickable links.  If a block is given,\neach email is yielded and the result is used as the link text.\n
auto_link_urls ActionView::Helpers::TextHelper.auto_link_urls(text, html_options = {},\noptions = {})\nTurns all urls into clickable links.  If a block is given, each url\nis yielded and the result is used as the link text.\n
auto_linked? ActionView::Helpers::TextHelper.auto_linked?(left, right)\nDetects already linked context or position in the middle of a tag\n
concat ActionView::Helpers::TextHelper.concat(string)\nThe preferred method of outputting text in your views is to use the\n<%= "text" %> eRuby syntax. The regular _puts_ and _print_ methods\ndo not operate as expected in an eRuby code block. If you absolutely must\noutput text within a non-output code block (i.e., <% %>), you can use the\nconcat method.\n\n==== Examples\n  <%\n      concat "hello"\n is the equivalent of <%= "hello" %>\n\n      if logged_in\n        concat "Logged in!"\n      else\n        concat link_to('login', :action => login)\n      end\n will either display "Logged in!" or a login link\n  %>\n
current_cycle ActionView::Helpers::TextHelper.current_cycle(name = "default")\nReturns the current cycle string after a cycle has been started. Useful\nfor complex table highlighting or any other design need which requires\nthe current cycle string in more than one place.\n\n==== Example\n Alternate background colors\n  @items = [1,2,3,4]\n  <% @items.each do |item| %>\n    <div style="background-color:<%= cycle("red","white","blue") %>">\n      <span style="background-color:<%= current_cycle %>"><%= item %></span>\n    </div>\n  <% end %>\n
cycle ActionView::Helpers::TextHelper.cycle(first_value, *values)\nCreates a Cycle object whose _to_s_ method cycles through elements of an\narray every time it is called. This can be used for example, to alternate\nclasses for table rows.  You can use named cycles to allow nesting in loops.\nPassing a Hash as the last parameter with a <tt>:name</tt> key will create a\nnamed cycle. The default name for a cycle without a +:name+ key is\n<tt>"default"</tt>. You can manually reset a cycle by calling reset_cycle\nand passing the name of the cycle. The current cycle string can be obtained\nanytime using the current_cycle method.\n\n==== Examples\n Alternate CSS classes for even and odd numbers...\n  @items = [1,2,3,4]\n  <table>\n  <% @items.each do |item| %>\n    <tr class="<%= cycle("even", "odd") -%>">\n      <td>item</td>\n    </tr>\n  <% end %>\n  </table>\n Cycle CSS classes for rows, and text colors for values within each row\n  @items = x = [{:first => 'Robert', :middle => 'Daniel', :last => 'James'},\n               {:first => 'Emily', :middle => 'Shannon', :maiden => 'Pike',\n               :last => 'Hicks'},\n              {:first => 'June', :middle => 'Dae', :last => 'Jones'}]\n  <% @items.each do |item| %>\n    <tr class="<%= cycle("odd", "even", :name => "row_class") -%>">\n      <td>\n        <% item.values.each do |value| %>\n          <%# Create a named cycle "colors" %>\n          <span style="color:<%= cycle("red", "green", "blue", :name =>\n          "colors") -%>">\n            <%= value %>\n          </span>\n        <% end %>\n        <% reset_cycle("colors") %>\n      </td>\n   </tr>\n <% end %>\n
excerpt ActionView::Helpers::TextHelper.excerpt(text, phrase, *args)\nExtracts an excerpt from +text+ that matches the first instance of +phrase+.\nThe <tt>:radius</tt> option expands the excerpt on each side of the first\noccurrence of +phrase+ by the number of characters\ndefined in <tt>:radius</tt> (which defaults to 100). If the excerpt radius\noverflows the beginning or end of the +text+,\nthen the <tt>:omission</tt> option (which defaults to "...") will be\nprepended/appended accordingly. The resulting string\nwill be stripped in any case. If the +phrase+ isn't found, nil is returned.\n\n==== Examples\n  excerpt('This is an example', 'an', :radius => 5)\n => ...s is an exam...\n\n  excerpt('This is an example', 'is', :radius => 5)\n => This is a...\n\n  excerpt('This is an example', 'is')\n => This is an example\n\n  excerpt('This next thing is an example', 'ex', :radius => 2)\n => ...next...\n\n  excerpt('This is also an example', 'an', :radius => 8, :omission => '<chop>\n  ')\n => <chop> is also an example\n\nYou can still use <tt>excerpt</tt> with the old API that accepts the\n+radius+ as its optional third and the +ellipsis+ as its\noptional forth parameter:\n  excerpt('This is an example', 'an', 5)                   # => ...s is\n  an exam...\n  excerpt('This is also an example', 'an', 8, '<chop> ')   # => <chop>\n  is also an example\n
get_cycle ActionView::Helpers::TextHelper.get_cycle(name)\nThe cycle helpers need to store the cycles in a place that is\nguaranteed to be reset every time a page is rendered, so it\nuses an instance variable of ActionView::Base.\n
highlight ActionView::Helpers::TextHelper.highlight(text, phrases, *args)\nHighlights one or more +phrases+ everywhere in +text+ by inserting it into\na <tt>:highlighter</tt> string. The highlighter can be specialized by passing\n<tt>:highlighter</tt>\nas a single-quoted string with \1 where the phrase is to be inserted\n(defaults to\n'<strong class="highlight">\1</strong>')\n\n==== Examples\n  highlight('You searched for: rails', 'rails')\n => You searched for: <strong class="highlight">rails</strong>\n\n  highlight('You searched for: ruby, rails, dhh', 'actionpack')\n => You searched for: ruby, rails, dhh\n\n  highlight('You searched for: rails', ['for', 'rails'], :highlighter =>\n  '<em>\1</em>')\n => You searched <em>for</em>: <em>rails</em>\n\n  highlight('You searched for: rails', 'rails', :highlighter => '<a\n  href="search?q=\1">\1</a>')\n => You searched for: <a href="search?q=rails">rails</a>\n\nYou can still use <tt>highlight</tt> with the old API that accepts the\n+highlighter+ as its optional third parameter:\n  highlight('You searched for: rails', 'rails', '<a href="search?q=\1">\1</a>')\n  # => You searched for: <a href="search?q=rails">rails</a>\n
pluralize ActionView::Helpers::TextHelper.pluralize(count, singular, plural = nil)\nAttempts to pluralize the +singular+ word unless +count+ is 1. If\n+plural+ is supplied, it will use that when count is > 1, otherwise\nit will use the Inflector to determine the plural form\n\n==== Examples\n  pluralize(1, 'person')\n => 1 person\n\n  pluralize(2, 'person')\n => 2 people\n\n  pluralize(3, 'person', 'users')\n => 3 users\n\n  pluralize(0, 'person')\n => 0 people\n
reset_cycle ActionView::Helpers::TextHelper.reset_cycle(name = "default")\nResets a cycle so that it starts from the first element the next time\nit is called. Pass in +name+ to reset a named cycle.\n\n==== Example\n Alternate CSS classes for even and odd numbers...\n  @items = [[1,2,3,4], [5,6,3], [3,4,5,6,7,4]]\n  <table>\n  <% @items.each do |item| %>\n    <tr class="<%= cycle("even", "odd") -%>">\n        <% item.each do |value| %>\n          <span style="color:<%= cycle("#333", "#666", "#999", :name =>\n          "colors") -%>">\n            <%= value %>\n          </span>\n        <% end %>\n\n        <% reset_cycle("colors") %>\n    </tr>\n  <% end %>\n  </table>\n
safe_concat ActionView::Helpers::TextHelper.safe_concat(string)\n\n
set_cycle ActionView::Helpers::TextHelper.set_cycle(name, cycle_object)\n\n
simple_format ActionView::Helpers::TextHelper.simple_format(text, html_options={},\noptions={})\nReturns +text+ transformed into HTML using simple formatting rules.\nTwo or more consecutive newlines(<tt>\\n\\n</tt>) are considered as a\nparagraph and wrapped in <tt><p></tt> tags. One newline (<tt>\\n</tt>) is\nconsidered as a linebreak and a <tt><br /></tt> tag is appended. This\nmethod does not remove the newlines from the +text+.\n\nYou can pass any HTML attributes into <tt>html_options</tt>.  These\nwill be added to all created paragraphs.\n==== Examples\n  my_text = "Here is some basic text...\\n...with a line break."\n\n  simple_format(my_text)\n => "<p>Here is some basic text...\\n<br />...with a line break.</p>"\n\n  more_text = "We want to put a paragraph...\\n\\n...right there."\n\n  simple_format(more_text)\n => "<p>We want to put a paragraph...</p>\\n\\n<p>...right there.</p>"\n\n  simple_format("Look ma! A class!", :class => 'description')\n => "<p class='description'>Look ma! A class!</p>"\n
truncate ActionView::Helpers::TextHelper.truncate(text, options = {})\nTruncates a given +text+ after a given <tt>:length</tt> if +text+ is longer\nthan <tt>:length</tt>\n(defaults to 30). The last characters will be replaced with the\n<tt>:omission</tt> (defaults to "...")\nfor a total length not exceeding <tt>:length</tt>.\n\nPass a <tt>:separator</tt> to truncate +text+ at a natural break.\n\nThe result is not marked as HTML-safe, so will be subject to the default\nescaping when\nused in views, unless wrapped by <tt>raw()</tt>. Care should be taken if\n+text+ contains HTML tags\nor entities, because truncation may produce invalid HTML (such as unbalanced\nor incomplete tags).\n\n==== Examples\n\n  truncate("Once upon a time in a world far far away")\n => "Once upon a time in a world..."\n\n  truncate("Once upon a time in a world far far away", :length => 17)\n => "Once upon a ti..."\n\n  truncate("Once upon a time in a world far far away", :length => 17,\n  :separator => ' ')\n => "Once upon a..."\n\n  truncate("And they found that many people were sleeping better.", :length =>\n  25, :omission => '... (continued)')\n => "And they f... (continued)"\n\n  truncate("<p>Once upon a time in a world far far away</p>")\n => "<p>Once upon a time in a wo..."\n
word_wrap ActionView::Helpers::TextHelper.word_wrap(text, *args)\nWraps the +text+ into lines no longer than +line_width+ width. This method\nbreaks on the first whitespace character that does not exceed +line_width+\n(which is 80 by default).\n\n==== Examples\n\n  word_wrap('Once upon a time')\n => Once upon a time\n\n  word_wrap('Once upon a time, in a kingdom called Far Far Away, a king fell\n  ill, and finding a successor to the throne turned out to be more trouble\n  than anyone could have imagined...')\n => Once upon a time, in a kingdom called Far Far Away, a king fell ill,\n and finding\\n a successor to the throne turned out to be more trouble than\n anyone could have\\n imagined...\n\n  word_wrap('Once upon a time', :line_width => 8)\n => Once upon\\na time\n\n  word_wrap('Once upon a time', :line_width => 1)\n => Once\\nupon\\na\\ntime\n\nYou can still use <tt>word_wrap</tt> with the old API that accepts the\n+line_width+ as its optional second parameter:\n  word_wrap('Once upon a time', 8)     # => Once upon\\na time\n
debug ActionView::Helpers::DebugHelper.debug(object)\nReturns a YAML representation of +object+ wrapped with <pre> and </pre>.\nIf the object cannot be converted to YAML using +to_yaml+, +inspect+ will\nbe called instead.\nUseful for inspecting an object at the time of rendering.\n\n==== Example\n\n  @user = User.new({ :username => 'testing', :password => 'xyz', :age =>\n  42}) %>\n  debug(@user)\n =>\n  <pre class='debug_dump'>--- !ruby/object:User\n  attributes:\n  &nbsp; updated_at:\n  &nbsp; username: testing\n\n  &nbsp; age: 42\n  &nbsp; password: xyz\n  &nbsp; created_at:\n  attributes_cache: {}\n\n  new_record: true\n  </pre>\n
button_to_function ActionView::Helpers::JavaScriptHelper.button_to_function(name, *args, &block)\nReturns a button with the given +name+ text that'll trigger a JavaScript\n+function+ using the\nonclick handler.\n\nThe first argument +name+ is used as the button's value or display text.\n\nThe next arguments are optional and may include the javascript function\ndefinition and a hash of html_options.\n\nThe +function+ argument can be omitted in favor of an +update_page+\nblock, which evaluates to a string when the template is rendered\n(instead of making an Ajax request first).\n\nThe +html_options+ will accept a hash of html attributes for the link\ntag. Some examples are :class => "nav_button", :id => "articles_nav_button"\n\nNote: if you choose to specify the javascript function in a block, but would\nlike to pass html_options, set the +function+ parameter to nil\n\nExamples:\n  button_to_function "Greeting", "alert('Hello world!')"\n  button_to_function "Delete", "if (confirm('Really?')) do_delete()"\n  button_to_function "Details" do |page|\n    page[:details].visual_effect :toggle_slide\n  end\n  button_to_function "Details", :class => "details_button" do |page|\n    page[:details].visual_effect :toggle_slide\n  end\n
escape_javascript ActionView::Helpers::JavaScriptHelper.escape_javascript(javascript)\nEscape carrier returns and single and double quotes for JavaScript segments.\n
javascript_tag ActionView::Helpers::JavaScriptHelper.javascript_tag(content_or_options_with_block\n= nil, html_options = {}, &block)\nReturns a JavaScript tag with the +content+ inside. Example:\n  javascript_tag "alert('All is good')"\n\nReturns:\n  <script type="text/javascript">\n  //<![CDATA[\n  alert('All is good')\n  //]]>\n  </script>\n\n+html_options+ may be a hash of attributes for the <tt>\<script></tt> tag.\nExample:\n  javascript_tag "alert('All is good')", :defer => 'defer'\n => <script defer="defer" type="text/javascript">alert('All is good')</script>\n\nInstead of passing the content as an argument, you can also use a block\nin which case, you pass your +html_options+ as the first parameter.\n  <%= javascript_tag :defer => 'defer' do -%>\n    alert('All is good')\n  <% end -%>\n
link_to_function ActionView::Helpers::JavaScriptHelper.link_to_function(name, *args, &block)\nReturns a link of the given +name+ that will trigger a JavaScript +function+\nusing the\nonclick handler and return false after the fact.\n\nThe first argument +name+ is used as the link text.\n\nThe next arguments are optional and may include the javascript function\ndefinition and a hash of html_options.\n\nThe +function+ argument can be omitted in favor of an +update_page+\nblock, which evaluates to a string when the template is rendered\n(instead of making an Ajax request first).\n\nThe +html_options+ will accept a hash of html attributes for the link\ntag. Some examples are :class => "nav_button", :id => "articles_nav_button"\n\nNote: if you choose to specify the javascript function in a block, but would\nlike to pass html_options, set the +function+ parameter to nil\n\n\nExamples:\n  link_to_function "Greeting", "alert('Hello world!')"\n    Produces:\n      <a onclick="alert('Hello world!'); return false;" href="#">Greeting</a>\n\n  link_to_function(image_tag("delete"), "if (confirm('Really?')) do_delete()")\n    Produces:\n      <a onclick="if (confirm('Really?')) do_delete(); return false;" href="#">\n        <img src="/images/delete.png?" alt="Delete"/>\n      </a>\n\n  link_to_function("Show me more", nil, :id => "more_link") do |page|\n    page[:details].visual_effect  :toggle_blind\n    page[:more_link].replace_html "Show me less"\n  end\n    Produces:\n      <a href="#" id="more_link" onclick="try {\n        $(&quot;details&quot;).visualEffect(&quot;toggle_blind&quot;);\n        $(&quot;more_link&quot;).update(&quot;Show me less&quot;);\n      }\n      catch (e) {\n        alert('RJS error:\\n\\n' + e.toString());\n        alert('$(\&quot;details\&quot;).visualEffect(\&quot;toggle_blind\&quot;);\n        \\n$(\&quot;more_link\&quot;).update(\&quot;Show me less\&quot;);');\n        throw e\n      };\n      return false;">Show me more</a>\n
html_safe_translation_key? ActionView::Helpers::TranslationHelper.html_safe_translation_key?(key)\n\n
l ActionView::Helpers::TranslationHelper.l(*args)\n\n
localize ActionView::Helpers::TranslationHelper.localize(*args)\nDelegates to I18n.localize with no additional functionality.\n
scope_key_by_partial ActionView::Helpers::TranslationHelper.scope_key_by_partial(key)\n\n
t ActionView::Helpers::TranslationHelper.t(key, options = {})\n\n
translate ActionView::Helpers::TranslationHelper.translate(key, options = {})\nDelegates to I18n#translate but also performs three additional functions.\nFirst, it'll catch MissingTranslationData exceptions and turn them into\ninline spans that contains the missing key, such that you can see in a\nview what is missing where.\n\nSecond, it'll scope the key by the current partial if the key starts\nwith a period. So if you call <tt>translate(".foo")</tt> from the\n<tt>people/index.html.erb</tt> template, you'll actually be calling\n<tt>I18n.translate("people.index.foo")</tt>. This makes it less repetitive\nto translate many keys within the same partials and gives you a simple\nframework\nfor scoping them consistently. If you don't prepend the key with a period,\nnothing is converted.\n\nThird, it'll mark the translation as safe HTML if the key has the suffix\n"_html" or the last element of the key is the word "html". For example,\ncalling translate("footer_html") or translate("footer.html") will return\na safe HTML string that won't be escaped by other HTML helper methods. This\nnaming convention helps to identify translations that include HTML tags so that\nyou know what kind of output to expect when you call translate in a template.\n
atom_feed ActionView::Helpers::AtomFeedHelper.atom_feed(options = {}, &block)\nAdds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERb or any other\ntemplate languages).\n\nFull usage example:\n\n  config/routes.rb:\n    Basecamp::Application.routes.draw do\n      resources :posts\n      root :to => "posts#index"\n    end\n\n  app/controllers/posts_controller.rb:\n    class PostsController < ApplicationController::Base\n GET /posts.html\n GET /posts.atom\n      def index\n        @posts = Post.find(:all)\n\n        respond_to do |format|\n          format.html\n          format.atom\n        end\n      end\n    end\n\n  app/views/posts/index.atom.builder:\n    atom_feed do |feed|\n      feed.title("My great blog!")\n      feed.updated(@posts.first.created_at)\n\n      for post in @posts\n        feed.entry(post) do |entry|\n          entry.title(post.title)\n          entry.content(post.body, :type => 'html')\n\n          entry.author do |author|\n            author.name("DHH")\n          end\n        end\n      end\n    end\n\nThe options for atom_feed are:\n\n* <tt>:language</tt>: Defaults to "en-US".\n* <tt>:root_url</tt>: The HTML alternative that this feed is doubling\nfor. Defaults to / on the current host.\n* <tt>:url</tt>: The URL for this feed. Defaults to the current URL.\n* <tt>:id</tt>: The id for this feed. Defaults to\n"tag:#{request.host},#{options[:schema_date]}:#{request.request_uri.split(".")[0]}"\n* <tt>:schema_date</tt>: The date at which the tag scheme for the feed was\nfirst used. A good default is the year you\n  created the feed. See http://feedvalidator.org/docs/error/InvalidTAG.html\n  for more information. If not specified,\n  2005 is used (as an "I don't care" value).\n* <tt>:instruct</tt>: Hash of XML processing instructions in the form {target\n=> {attribute => value, }} or {target => [{attribute => value, }, ]}\n\nOther namespaces can be added to the root element:\n\n  app/views/posts/index.atom.builder:\n    atom_feed({'xmlns:app' => 'http://www.w3.org/2007/app',\n        'xmlns:openSearch' => 'http://a9.com/-/spec/opensearch/1.1/'})\n        do |feed|\n      feed.title("My great blog!")\n      feed.updated((@posts.first.created_at))\n      feed.tag!(openSearch:totalResults, 10)\n\n      for post in @posts\n        feed.entry(post) do |entry|\n          entry.title(post.title)\n          entry.content(post.body, :type => 'html')\n          entry.tag!('app:edited', Time.now)\n\n          entry.author do |author|\n            author.name("DHH")\n          end\n        end\n      end\n    end\n\nThe Atom spec defines five elements (content rights title subtitle\nsummary) which may directly contain xhtml content if :type => 'xhtml'\nis specified as an attribute.  If so, this helper will take care of\nthe enclosing div and xhtml namespace declaration.  Example usage:\n\n   entry.summary :type => 'xhtml' do |xhtml|\n     xhtml.p pluralize(order.line_items.count, "line item")\n     xhtml.p "Shipped to #{order.address}"\n     xhtml.p "Paid by #{order.pay_type}"\n   end\n\n\natom_feed yields an AtomFeedBuilder instance.  Nested elements yield\nan AtomBuilder instance.\n
array_or_string_for_javascript ActionView::Helpers::ScriptaculousHelper.array_or_string_for_javascript(option)\n\n
draggable_element ActionView::Helpers::ScriptaculousHelper.draggable_element(element_id,\noptions = {})\nMakes the element with the DOM ID specified by +element_id+ draggable.\n\nExample:\n  <%= draggable_element("my_image", :revert => true)\n\nYou can change the behaviour with various options, see\nhttp://script.aculo.us for more documentation.\n
drop_receiving_element ActionView::Helpers::ScriptaculousHelper.drop_receiving_element(element_id,\noptions = {})\nMakes the element with the DOM ID specified by +element_id+ receive\ndropped draggable elements (created by +draggable_element+).\nand make an AJAX call. By default, the action called gets the DOM ID\nof the element as parameter.\n\nExample:\n  <%= drop_receiving_element("my_cart", :url =>\n    { :controller => "cart", :action => "add" }) %>\n\nYou can change the behaviour with various options, see\nhttp://script.aculo.us for more documentation.\n\nSome of these +options+ include:\n* <tt>:accept</tt> - Set this to a string or an array of strings describing the\n  allowable CSS classes that the +draggable_element+ must have in order\n  to be accepted by this +drop_receiving_element+.\n\n* <tt>:confirm</tt> - Adds a confirmation dialog. Example:\n\n    :confirm => "Are you sure you want to do this?"\n\n* <tt>:hoverclass</tt> - If set, the +drop_receiving_element+ will have\n  this additional CSS class when an accepted +draggable_element+ is\n  hovered over it.\n\n* <tt>:onDrop</tt> - Called when a +draggable_element+ is dropped onto\n  this element. Override this callback with a JavaScript expression to\n  change the default drop behaviour. Example:\n\n    :onDrop => "function(draggable_element, droppable_element, event) {\n    alert('I like bananas') }"\n\n  This callback gets three parameters: The Draggable element, the Droppable\n  element and the Event object. You can extract additional information about\n  the drop - like if the Ctrl or Shift keys were pressed - from the Event\n  object.\n\n* <tt>:with</tt> - A JavaScript expression specifying the parameters for\n  the XMLHttpRequest. Any expressions should return a valid URL query string.\n
sortable_element ActionView::Helpers::ScriptaculousHelper.sortable_element(element_id,\noptions = {})\nMakes the element with the DOM ID specified by +element_id+ sortable\nby drag-and-drop and make an Ajax call whenever the sort order has\nchanged. By default, the action called gets the serialized sortable\nelement as parameters.\n\nExample:\n\n  <%= sortable_element("my_list", :url => { :action => "order" }) %>\n\nIn the example, the action gets a "my_list" array parameter\ncontaining the values of the ids of elements the sortable consists\nof, in the current order.\n\nImportant: For this to work, the sortable elements must have id\nattributes in the form "string_identifier". For example, "item_1". Only\nthe identifier part of the id attribute will be serialized.\n\nAdditional +options+ are:\n\n* <tt>:format</tt> - A regular expression to determine what to send as the\n  serialized id to the server (the default is <tt>/^[^_]*_(.*)$/</tt>).\n\n* <tt>:constraint</tt> - Whether to constrain the dragging to either\n  <tt>:horizontal</tt> or <tt>:vertical</tt> (or false to make it\n  unconstrained).\n\n* <tt>:overlap</tt> - Calculate the item overlap in the <tt>:horizontal</tt>\n  or <tt>:vertical</tt> direction.\n\n* <tt>:tag</tt> - Which children of the container element to treat as\n  sortable (default is <tt>li</tt>).\n\n* <tt>:containment</tt> - Takes an element or array of elements to treat as\n  potential drop targets (defaults to the original target element).\n\n* <tt>:only</tt> - A CSS class name or array of class names used to filter\n  out child elements as candidates.\n\n* <tt>:scroll</tt> - Determines whether to scroll the list during drag\n  operations if the list runs past the visual border.\n\n* <tt>:tree</tt> - Determines whether to treat nested lists as part of the\n  main sortable list. This means that you can create multi-layer lists,\n  and not only sort items at the same level, but drag and sort items\n  between levels.\n\n* <tt>:hoverclass</tt> - If set, the Droppable will have this additional\nCSS class\n  when an accepted Draggable is hovered over it.\n\n* <tt>:handle</tt> - Sets whether the element should only be draggable by an\n  embedded handle. The value may be a string referencing a CSS class value\n  (as of script.aculo.us V1.5). The first child/grandchild/etc. element\n  found within the element that has this CSS class value will be used as\n  the handle.\n\n* <tt>:ghosting</tt> - Clones the element and drags the clone, leaving\n  the original in place until the clone is dropped (default is <tt>false</tt>).\n\n* <tt>:dropOnEmpty</tt> - If true the Sortable container will be made into\n  a Droppable, that can receive a Draggable (as according to the containment\n  rules) as a child element when there are no more elements inside (default\n  is <tt>false</tt>).\n\n* <tt>:onChange</tt> - Called whenever the sort order changes while\ndragging. When\n  dragging from one Sortable to another, the callback is called once on each\n  Sortable. Gets the affected element as its parameter.\n\n* <tt>:onUpdate</tt> - Called when the drag ends and the Sortable's order is\n  changed in any way. When dragging from one Sortable to another, the callback\n  is called once on each Sortable. Gets the container as its parameter.\n\nSee http://script.aculo.us for more documentation.\n
visual_effect ActionView::Helpers::ScriptaculousHelper.visual_effect(name, element_id =\nfalse, js_options = {})\nReturns a JavaScript snippet to be used on the Ajax callbacks for\nstarting visual effects.\n\nIf no +element_id+ is given, it assumes "element" which should be a local\nvariable in the generated JavaScript execution context. This can be\nused for example with +drop_receiving_element+:\n\n  <%= drop_receiving_element (...), :loading => visual_effect(:fade) %>\n\nThis would fade the element that was dropped on the drop receiving\nelement.\n\nFor toggling visual effects, you can use <tt>:toggle_appear</tt>,\n<tt>:toggle_slide</tt>, and\n<tt>:toggle_blind</tt> which will alternate between appear/fade,\nslidedown/slideup, and\nblinddown/blindup respectively.\n\nYou can change the behaviour with various options, see\nhttp://script.aculo.us for more documentation.\n
add_confirm_to_attributes! ActionView::Helpers::UrlHelper.add_confirm_to_attributes!(html_options,\nconfirm)\n\n
add_disable_with_to_attributes! ActionView::Helpers::UrlHelper.add_disable_with_to_attributes!(html_options,\ndisable_with)\n\n
add_method_to_attributes! ActionView::Helpers::UrlHelper.add_method_to_attributes!(html_options, method)\n\n
array_or_string_for_javascript ActionView::Helpers::UrlHelper.array_or_string_for_javascript(option)\n\n
button_to ActionView::Helpers::UrlHelper.button_to(name, options = {}, html_options = {})\nGenerates a form containing a single button that submits to the URL created\nby the set of +options+. This is the safest method to ensure links that\ncause changes to your data are not triggered by search bots or accelerators.\nIf the HTML button does not work with your layout, you can also consider\nusing the +link_to+ method with the <tt>:method</tt> modifier as described in\nthe +link_to+ documentation.\n\nThe generated form element has a class name of <tt>button_to</tt>\nto allow styling of the form itself and its children. You can control\nthe form submission and input element behavior using +html_options+.\nThis method accepts the <tt>:method</tt> and <tt>:confirm</tt> modifiers\ndescribed in the +link_to+ documentation. If no <tt>:method</tt> modifier\nis given, it will default to performing a POST operation. You can also\ndisable the button by passing <tt>:disabled => true</tt> in +html_options+.\nIf you are using RESTful routes, you can pass the <tt>:method</tt>\nto change the HTTP verb used to submit the form.\n\n==== Options\nThe +options+ hash accepts the same options as url_for.\n\nThere are a few special +html_options+:\n* <tt>:method</tt> - Symbol of HTTP verb. Supported verbs are <tt>:post</tt>,\n<tt>:get</tt>,\n  <tt>:delete</tt> and <tt>:put</tt>. By default it will be <tt>:post</tt>.\n* <tt>:disabled</tt> - If set to true, it will generate a disabled button.\n* <tt>:confirm</tt> - This will use the unobtrusive JavaScript driver to\n  prompt with the question specified. If the user accepts, the link is\n  processed normally, otherwise no action is taken.\n* <tt>:remote</tt> -  If set to true, will allow the Unobtrusive JavaScript\ndrivers to control the\n  submit behaviour. By default this behaviour is an ajax submit.\n\n==== Examples\n  <%= button_to "New", :action => "new" %>\n => "<form method="post" action="/controller/new" class="button_to">\n      <div><input value="New" type="submit" /></div>\n    </form>"\n\n\n  <%= button_to "Delete Image", { :action => "delete", :id => @image.id },\n            :confirm => "Are you sure?", :method => :delete %>\n => "<form method="post" action="/images/delete/1" class="button_to">\n      <div>\n        <input type="hidden" name="_method" value="delete" />\n        <input data-confirm='Are you sure?' value="Delete" type="submit" />\n      </div>\n    </form>"\n\n\n  <%= button_to('Destroy', 'http://www.example.com', :confirm => 'Are\n  you sure?',\n            :method => "delete", :remote => true, :disable_with =>\n            'loading...') %>\n => "<form class='button_to' method='post' action='http://www.example.com'\n data-remote='true'>\n       <div>\n         <input name='_method' value='delete' type='hidden' />\n         <input value='Destroy' type='submit'\n         disable_with='loading...' data-confirm='Are you sure?' />\n       </div>\n     </form>"\n\n
convert_boolean_attributes! ActionView::Helpers::UrlHelper.convert_boolean_attributes!(html_options,\nbool_attrs)\nProcesses the +html_options+ hash, converting the boolean\nattributes from true/false form into the form required by\nHTML/XHTML.  (An attribute is considered to be boolean if\nits name is listed in the given +bool_attrs+ array.)\n\nMore specifically, for each boolean attribute in +html_options+\ngiven as:\n\n  "attr" => bool_value\n\nif the associated +bool_value+ evaluates to true, it is\nreplaced with the attribute's name; otherwise the attribute is\nremoved from the +html_options+ hash.  (See the XHTML 1.0 spec,\nsection 4.5 "Attribute Minimization" for more:\nhttp://www.w3.org/TR/xhtml1/#h-4.5)\n\nReturns the updated +html_options+ hash, which is also modified\nin place.\n\nExample:\n\n  convert_boolean_attributes!( html_options,\n                               %w( checked disabled readonly ) )\n
convert_options_to_data_attributes ActionView::Helpers::UrlHelper.convert_options_to_data_attributes(options,\nhtml_options)\n\n
current_page? ActionView::Helpers::UrlHelper.current_page?(options)\nTrue if the current request URI was generated by the given +options+.\n\n==== Examples\nLet's say we're in the <tt>/shop/checkout?order=desc</tt> action.\n\n  current_page?(:action => 'process')\n => false\n\n  current_page?(:controller => 'shop', :action => 'checkout')\n => true\n\n  current_page?(:controller => 'shop', :action => 'checkout', :order => 'asc')\n => false\n\n  current_page?(:action => 'checkout')\n => true\n\n  current_page?(:controller => 'library', :action => 'checkout')\n => false\n\nLet's say we're in the <tt>/shop/checkout?order=desc&page=1</tt> action.\n\n  current_page?(:action => 'process')\n => false\n\n  current_page?(:controller => 'shop', :action => 'checkout')\n => true\n\n  current_page?(:controller => 'shop', :action => 'checkout', :order =>\n  'desc', :page=>'1')\n => true\n\n  current_page?(:controller => 'shop', :action => 'checkout', :order =>\n  'desc', :page=>'2')\n => false\n\n  current_page?(:controller => 'shop', :action => 'checkout', :order => 'desc')\n => false\n\n  current_page?(:action => 'checkout')\n => true\n\n  current_page?(:controller => 'library', :action => 'checkout')\n => false\n
link_to ActionView::Helpers::UrlHelper.link_to(*args, &block)\nCreates a link tag of the given +name+ using a URL created by the set\nof +options+. See the valid options in the documentation for\n+url_for+. It's also possible to pass a string instead\nof an options hash to get a link tag that uses the value of the string as the\nhref for the link, or use <tt>:back</tt> to link to the referrer - a\nJavaScript back\nlink will be used in place of a referrer if none exists. If +nil+ is passed as\na name, the link itself will become the name.\n\n==== Signatures\n\n  link_to(body, url, html_options = {})\n url is a String; you can use URL helpers like\n posts_path\n\n  link_to(body, url_options = {}, html_options = {})\n url_options, except :confirm or :method,\n is passed to url_for\n\n  link_to(options = {}, html_options = {}) do\n name\n  end\n\n  link_to(url, html_options = {}) do\n name\n  end\n\n==== Options\n* <tt>:confirm => 'question?'</tt> - This will allow the unobtrusive JavaScript\n  driver to prompt with the question specified. If the user accepts, the\n  link is\n  processed normally, otherwise no action is taken.\n* <tt>:method => symbol of HTTP verb</tt> - This modifier will dynamically\n  create an HTML form and immediately submit the form for processing using\n  the HTTP verb specified. Useful for having links perform a POST operation\n  in dangerous actions like deleting a record (which search bots can follow\n  while spidering your site). Supported verbs are <tt>:post</tt>,\n  <tt>:delete</tt> and <tt>:put</tt>.\n  Note that if the user has JavaScript disabled, the request will fall back\n  to using GET. If <tt>:href => '#'</tt> is used and the user has JavaScript\n  disabled clicking the link will have no effect. If you are relying on the\n  POST behavior, you should check for it in your controller's action by using\n  the request object's methods for <tt>post?</tt>, <tt>delete?</tt> or\n  <tt>put?</tt>.\n* <tt>:remote => true</tt> - This will allow the unobtrusive JavaScript\n  driver to make an Ajax request to the URL in question instead of following\n  the link. The drivers each provide mechanisms for listening for the\n  completion of the Ajax request and performing JavaScript operations once\n  they're complete\n\n==== Examples\nBecause it relies on +url_for+, +link_to+ supports both older-style\ncontroller/action/id arguments\nand newer RESTful routes.  Current Rails style favors RESTful routes whenever\npossible, so base\nyour application on resources and use\n\n  link_to "Profile", profile_path(@profile)\n => <a href="/profiles/1">Profile</a>\n\nor the even pithier\n\n  link_to "Profile", @profile\n => <a href="/profiles/1">Profile</a>\n\nin place of the older more verbose, non-resource-oriented\n\n  link_to "Profile", :controller => "profiles", :action => "show", :id =>\n  @profile\n => <a href="/profiles/show/1">Profile</a>\n\nSimilarly,\n\n  link_to "Profiles", profiles_path\n => <a href="/profiles">Profiles</a>\n\nis better than\n\n  link_to "Profiles", :controller => "profiles"\n => <a href="/profiles">Profiles</a>\n\nYou can use a block as well if your link target is hard to fit into the name\nparameter. ERb example:\n\n  <%= link_to(@profile) do %>\n    <strong><%= @profile.name %></strong> -- <span>Check it out!</span>\n  <% end %>\n => <a href="/profiles/1">\n         <strong>David</strong> -- <span>Check it out!</span>\n       </a>\n\nClasses and ids for CSS are easy to produce:\n\n  link_to "Articles", articles_path, :id => "news", :class => "article"\n => <a href="/articles" class="article" id="news">Articles</a>\n\nBe careful when using the older argument style, as an extra literal hash\nis needed:\n\n  link_to "Articles", { :controller => "articles" }, :id => "news", :class =>\n  "article"\n => <a href="/articles" class="article" id="news">Articles</a>\n\nLeaving the hash off gives the wrong link:\n\n  link_to "WRONG!", :controller => "articles", :id => "news", :class =>\n  "article"\n => <a href="/articles/index/news?class=article">WRONG!</a>\n\n+link_to+ can also produce links with anchors or query strings:\n\n  link_to "Comment wall", profile_path(@profile, :anchor => "wall")\n => <a href="/profiles/1#wall">Comment wall</a>\n\n  link_to "Ruby on Rails search", :controller => "searches", :query =>\n  "ruby on rails"\n => <a href="/searches?query=ruby+on+rails">Ruby on Rails search</a>\n\n  link_to "Nonsense search", searches_path(:foo => "bar", :baz => "quux")\n => <a href="/searches?foo=bar&amp;baz=quux">Nonsense search</a>\n\nThe two options specific to +link_to+ (<tt>:confirm</tt> and <tt>:method</tt>)\nare used as follows:\n\n  link_to "Visit Other Site", "http://www.rubyonrails.org/", :confirm =>\n  "Are you sure?"\n => <a href="http://www.rubyonrails.org/" data-confirm="Are you sure?"">Visit\n Other Site</a>\n\n  link_to("Destroy", "http://www.example.com", :method => :delete, :confirm =>\n  "Are you sure?")\n => <a href='http://www.example.com' rel="nofollow" data-method="delete"\n data-confirm="Are you sure?">Destroy</a>\n
link_to_if ActionView::Helpers::UrlHelper.link_to_if(condition, name, options = {},\nhtml_options = {}, &block)\nCreates a link tag of the given +name+ using a URL created by the set of\n+options+ if +condition+ is true, in which case only the name is\nreturned. To specialize the default behavior, you can pass a block that\naccepts the name or the full argument list for +link_to_unless+ (see the\nexamples\nin +link_to_unless+).\n\n==== Examples\n  <%= link_to_if(@current_user.nil?, "Login", { :controller => "sessions",\n  :action => "new" }) %>\n If the user isn't logged in...\n => <a href="/sessions/new/">Login</a>\n\n  <%=\n     link_to_if(@current_user.nil?, "Login", { :controller => "sessions",\n     :action => "new" }) do\n       link_to(@current_user.login, { :controller => "accounts", :action =>\n       "show", :id => @current_user })\n     end\n  %>\n If the user isn't logged in...\n => <a href="/sessions/new/">Login</a>\n If they are logged in...\n => <a href="/accounts/show/3">my_username</a>\n
link_to_unless ActionView::Helpers::UrlHelper.link_to_unless(condition, name, options =\n{}, html_options = {}, &block)\nCreates a link tag of the given +name+ using a URL created by the set of\n+options+ unless +condition+ is true, in which case only the name is\nreturned. To specialize the default behavior (i.e., show a login link rather\nthan just the plaintext link text), you can pass a block that\naccepts the name or the full argument list for +link_to_unless+.\n\n==== Examples\n  <%= link_to_unless(@current_user.nil?, "Reply", { :action => "reply" }) %>\n If the user is logged in...\n => <a href="/controller/reply/">Reply</a>\n\n  <%=\n     link_to_unless(@current_user.nil?, "Reply", { :action => "reply" })\n     do |name|\n       link_to(name, { :controller => "accounts", :action => "signup" })\n     end\n  %>\n If the user is logged in...\n => <a href="/controller/reply/">Reply</a>\n If not...\n => <a href="/accounts/signup">Reply</a>\n
link_to_unless_current ActionView::Helpers::UrlHelper.link_to_unless_current(name, options = {},\nhtml_options = {}, &block)\nCreates a link tag of the given +name+ using a URL created by the set of\n+options+ unless the current request URI is the same as the links, in\nwhich case only the name is returned (or the given block is yielded, if\none exists).  You can give +link_to_unless_current+ a block which will\nspecialize the default behavior (e.g., show a "Start Here" link rather\nthan the link's text).\n\n==== Examples\nLet's say you have a navigation menu...\n\n  <ul id="navbar">\n    <li><%= link_to_unless_current("Home", { :action => "index" }) %></li>\n    <li><%= link_to_unless_current("About Us", { :action => "about" }) %></li>\n  </ul>\n\nIf in the "about" action, it will render...\n\n  <ul id="navbar">\n    <li><a href="/controller/index">Home</a></li>\n    <li>About Us</li>\n  </ul>\n\n...but if in the "index" action, it will render:\n\n  <ul id="navbar">\n    <li>Home</li>\n    <li><a href="/controller/about">About Us</a></li>\n  </ul>\n\nThe implicit block given to +link_to_unless_current+ is evaluated if the\ncurrent\naction is the action given.  So, if we had a comments page and wanted to\nrender a\n"Go Back" link instead of a link to the comments page, we could do something\nlike this...\n\n   <%=\n       link_to_unless_current("Comment", { :controller => "comments",\n       :action => "new" }) do\n          link_to("Go back", { :controller => "posts", :action => "index" })\n       end\n    %>\n
mail_to ActionView::Helpers::UrlHelper.mail_to(email_address, name = nil, html_options\n= {})\nCreates a mailto link tag to the specified +email_address+, which is\nalso used as the name of the link unless +name+ is specified. Additional\nHTML attributes for the link can be passed in +html_options+.\n\n+mail_to+ has several methods for hindering email harvesters and customizing\nthe email itself by passing special keys to +html_options+.\n\n==== Options\n* <tt>:encode</tt> - This key will accept the strings "javascript" or "hex".\n  Passing "javascript" will dynamically create and encode the mailto link then\n  eval it into the DOM of the page. This method will not show the link on\n  the page if the user has JavaScript disabled. Passing "hex" will hex\n  encode the +email_address+ before outputting the mailto link.\n* <tt>:replace_at</tt> - When the link +name+ isn't provided, the\n  +email_address+ is used for the link label. You can use this option to\n  obfuscate the +email_address+ by substituting the @ sign with the string\n  given as the value.\n* <tt>:replace_dot</tt> - When the link +name+ isn't provided, the\n  +email_address+ is used for the link label. You can use this option to\n  obfuscate the +email_address+ by substituting the . in the email with the\n  string given as the value.\n* <tt>:subject</tt> - Preset the subject line of the email.\n* <tt>:body</tt> - Preset the body of the email.\n* <tt>:cc</tt> - Carbon Copy addition recipients on the email.\n* <tt>:bcc</tt> - Blind Carbon Copy additional recipients on the email.\n\n==== Examples\n  mail_to "me@domain.com"\n => <a href="mailto:me@domain.com">me@domain.com</a>\n\n  mail_to "me@domain.com", "My email", :encode => "javascript"\n => <script\n type="text/javascript">eval(decodeURIComponent('%64%6f%63...%27%29%3b'))</script>\n\n  mail_to "me@domain.com", "My email", :encode => "hex"\n => <a href="mailto:%6d%65@%64%6f%6d%61%69%6e.%63%6f%6d">My email</a>\n\n  mail_to "me@domain.com", nil, :replace_at => "_at_", :replace_dot =>\n  "_dot_", :class => "email"\n => <a href="mailto:me@domain.com" class="email">me_at_domain_dot_com</a>\n\n  mail_to "me@domain.com", "My email", :cc => "ccaddress@domain.com",\n           :subject => "This is an example email"\n => <a\n href="mailto:me@domain.com?cc=ccaddress@domain.com&subject=This%20is%20an%20example%20email">My\n email</a>\n
options_for_javascript ActionView::Helpers::UrlHelper.options_for_javascript(options)\n\n
url_for ActionView::Helpers::UrlHelper.url_for(options = {})\nReturns the URL for the set of +options+ provided. This takes the\nsame options as +url_for+ in Action Controller (see the\ndocumentation for <tt>ActionController::Base#url_for</tt>). Note that\nby default\n<tt>:only_path</tt> is <tt>true</tt> so you'll get the relative\n"/controller/action"\ninstead of the fully qualified URL like "http://example.com/controller/action".\n\n==== Options\n* <tt>:anchor</tt> - Specifies the anchor name to be appended to the path.\n* <tt>:only_path</tt> - If true, returns the relative URL (omitting the\nprotocol, host name, and port) (<tt>true</tt> by default unless <tt>:host</tt>\nis specified).\n* <tt>:trailing_slash</tt> - If true, adds a trailing slash, as in\n"/archive/2005/". Note that this\n  is currently not recommended since it breaks caching.\n* <tt>:host</tt> - Overrides the default (current) host if provided.\n* <tt>:protocol</tt> - Overrides the default (current) protocol if provided.\n* <tt>:user</tt> - Inline HTTP authentication (only plucked out if\n<tt>:password</tt> is also present).\n* <tt>:password</tt> - Inline HTTP authentication (only plucked out if\n<tt>:user</tt> is also present).\n\n==== Relying on named routes\n\nIf you instead of a hash pass a record (like an Active Record or Active\nResource) as the options parameter,\nyou'll trigger the named route for that record. The lookup will happen on\nthe name of the class. So passing\na Workshop object will attempt to use the +workshop_path+ route. If you have\na nested route, such as\n+admin_workshop_path+ you'll have to call that explicitly (it's impossible\nfor +url_for+ to guess that route).\n\n==== Examples\n  <%= url_for(:action => 'index') %>\n => /blog/\n\n  <%= url_for(:action => 'find', :controller => 'books') %>\n => /books/find\n\n  <%= url_for(:action => 'login', :controller => 'members', :only_path =>\n  false, :protocol => 'https') %>\n => https://www.railsapplication.com/members/login/\n\n  <%= url_for(:action => 'play', :anchor => 'player') %>\n => /messages/play/#player\n\n  <%= url_for(:action => 'jump', :anchor => 'tax&ship') %>\n => /testing/jump/#tax&ship\n\n  <%= url_for(Workshop.new) %>\n relies on Workshop answering a persisted? call (and in this case returning\n false)\n => /workshops\n\n  <%= url_for(@workshop) %>\n calls @workshop.to_s\n => /workshops/5\n\n  <%= url_for("http://www.example.com") %>\n => http://www.example.com\n\n  <%= url_for(:back) %>\n if request.env["HTTP_REFERER"] is set to "http://www.example.com"\n => http://www.example.com\n\n  <%= url_for(:back) %>\n if request.env["HTTP_REFERER"] is not set or is blank\n => javascript:history.back()\n
url_options ActionView::Helpers::UrlHelper.url_options()\nNeed to map default url options to controller one.\ndef default_url_options(*args) #:nodoc:\n  controller.send(:default_url_options, *args)\nend\n
error_message ActionView::Helpers::ActiveModelInstanceTag.error_message()\n\n
error_wrapping ActionView::Helpers::ActiveModelInstanceTag.error_wrapping(html_tag)\n\n
object ActionView::Helpers::ActiveModelInstanceTag.object()\n\n
object_has_errors? ActionView::Helpers::ActiveModelInstanceTag.object_has_errors?()\n\n
tag ActionView::Helpers::ActiveModelInstanceTag.tag(type, options, *)\n\n
tag_generate_errors? ActionView::Helpers::ActiveModelInstanceTag.tag_generate_errors?(options)\n\n
register_javascript_expansion ActionView::Helpers::AssetTagHelper.register_javascript_expansion(expansions)\nRegister one or more javascript files to be included when <tt>symbol</tt>\nis passed to <tt>javascript_include_tag</tt>. This method is typically intended\nto be called from plugin initialization to register javascript files\nthat the plugin installed in <tt>public/javascripts</tt>.\n\n  ActionView::Helpers::AssetTagHelper.register_javascript_expansion :monkey =>\n  ["head", "body", "tail"]\n\n  javascript_include_tag :monkey # =>\n    <script type="text/javascript" src="/javascripts/head.js"></script>\n    <script type="text/javascript" src="/javascripts/body.js"></script>\n    <script type="text/javascript" src="/javascripts/tail.js"></script>\n
register_javascript_include_default ActionView::Helpers::AssetTagHelper.register_javascript_include_default(*args)\n\n
register_stylesheet_expansion ActionView::Helpers::AssetTagHelper.register_stylesheet_expansion(expansions)\nRegister one or more stylesheet files to be included when <tt>symbol</tt>\nis passed to <tt>stylesheet_link_tag</tt>. This method is typically intended\nto be called from plugin initialization to register stylesheet files\nthat the plugin installed in <tt>public/stylesheets</tt>.\n\n  ActionView::Helpers::AssetTagHelper.register_stylesheet_expansion :monkey =>\n  ["head", "body", "tail"]\n\n  stylesheet_link_tag :monkey # =>\n    <link href="/stylesheets/head.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/body.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/tail.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n
reset_javascript_include_default ActionView::Helpers::AssetTagHelper.reset_javascript_include_default()\n\n
asset_file_path ActionView::Helpers::AssetTagHelper.asset_file_path(path)\n\n
asset_file_path! ActionView::Helpers::AssetTagHelper.asset_file_path!(path)\n\n
audio_path ActionView::Helpers::AssetTagHelper.audio_path(source)\nComputes the path to an audio asset in the public audios directory.\nFull paths from the document root will be passed through.\nUsed internally by +audio_tag+ to build the audio path.\n\n==== Examples\n  audio_path("horse")                                            # =>\n  /audios/horse\n  audio_path("horse.wav")                                        # =>\n  /audios/horse.avi\n  audio_path("sounds/horse.wav")                                 # =>\n  /audios/sounds/horse.avi\n  audio_path("/sounds/horse.wav")                                # =>\n  /sounds/horse.avi\n  audio_path("http://www.railsapplication.com/sounds/horse.wav") # =>\n  http://www.railsapplication.com/sounds/horse.wav\n
audio_tag ActionView::Helpers::AssetTagHelper.audio_tag(source, options = {})\nReturns an html audio tag for the +source+.\nThe +source+ can be full path or file that exists in\nyour public audios directory.\n\n==== Examples\n audio_tag("sound")  # =>\n   <audio src="/audios/sound" />\n audio_tag("sound.wav")  # =>\n   <audio src="/audios/sound.wav" />\n audio_tag("sound.wav", :autoplay => true, :controls => true)  # =>\n   <audio autoplay="autoplay" controls="controls" src="/audios/sound.wav" />\n
auto_discovery_link_tag ActionView::Helpers::AssetTagHelper.auto_discovery_link_tag(type = :rss,\nurl_options = {}, tag_options = {})\nReturns a link tag that browsers and news readers can use to auto-detect\nan RSS or ATOM feed. The +type+ can either be <tt>:rss</tt> (default) or\n<tt>:atom</tt>. Control the link options in url_for format using the\n+url_options+. You can modify the LINK tag itself in +tag_options+.\n\n==== Options\n* <tt>:rel</tt>  - Specify the relation of this link, defaults to "alternate"\n* <tt>:type</tt>  - Override the auto-generated mime type\n* <tt>:title</tt>  - Specify the title of the link, defaults to the +type+\n\n==== Examples\n auto_discovery_link_tag # =>\n    <link rel="alternate" type="application/rss+xml" title="RSS"\n    href="http://www.currenthost.com/controller/action" />\n auto_discovery_link_tag(:atom) # =>\n    <link rel="alternate" type="application/atom+xml" title="ATOM"\n    href="http://www.currenthost.com/controller/action" />\n auto_discovery_link_tag(:rss, {:action => "feed"}) # =>\n    <link rel="alternate" type="application/rss+xml" title="RSS"\n    href="http://www.currenthost.com/controller/feed" />\n auto_discovery_link_tag(:rss, {:action => "feed"}, {:title => "My RSS"}) # =>\n    <link rel="alternate" type="application/rss+xml" title="My RSS"\n    href="http://www.currenthost.com/controller/feed" />\n auto_discovery_link_tag(:rss, {:controller => "news", :action => "feed"}) # =>\n    <link rel="alternate" type="application/rss+xml" title="RSS"\n    href="http://www.currenthost.com/news/feed" />\n auto_discovery_link_tag(:rss, "http://www.example.com/feed.rss", {:title =>\n "Example RSS"}) # =>\n    <link rel="alternate" type="application/rss+xml" title="Example RSS"\n    href="http://www.example.com/feed" />\n
collect_asset_files ActionView::Helpers::AssetTagHelper.collect_asset_files(*path)\n\n
compute_asset_host ActionView::Helpers::AssetTagHelper.compute_asset_host(source)\nPick an asset host for this source. Returns +nil+ if no host is set,\nthe host if no wildcard is set, the host interpolated with the\nnumbers 0-3 if it contains <tt>%d</tt> (the number is the source hash mod 4),\nor the value returned from invoking the proc if it's a proc or the value from\ninvoking call if it's an object responding to call.\n
compute_javascript_paths ActionView::Helpers::AssetTagHelper.compute_javascript_paths(*args)\n\n
compute_public_path ActionView::Helpers::AssetTagHelper.compute_public_path(source, dir, ext =\nnil, include_host = true)\nAdd the the extension +ext+ if not present. Return full URLs otherwise\nuntouched.\nPrefix with <tt>/dir/</tt> if lacking a leading +/+. Account for relative URL\nroots. Rewrite the asset path for cache-busting asset ids. Include\nasset host, if configured, with the correct request protocol.\n
compute_stylesheet_paths ActionView::Helpers::AssetTagHelper.compute_stylesheet_paths(*args)\n\n
determine_source ActionView::Helpers::AssetTagHelper.determine_source(source, collection)\n\n
ensure_javascript_sources! ActionView::Helpers::AssetTagHelper.ensure_javascript_sources!(sources)\n\n
ensure_stylesheet_sources! ActionView::Helpers::AssetTagHelper.ensure_stylesheet_sources!(sources)\n\n
expand_javascript_sources ActionView::Helpers::AssetTagHelper.expand_javascript_sources(sources,\nrecursive = false)\n\n
expand_stylesheet_sources ActionView::Helpers::AssetTagHelper.expand_stylesheet_sources(sources,\nrecursive)\n\n
favicon_link_tag ActionView::Helpers::AssetTagHelper.favicon_link_tag(source='/favicon.ico',\noptions={})\nWeb browsers cache favicons. If you just throw a <tt>favicon.ico</tt> into\nthe document\nroot of your application and it changes later, clients that have it in\ntheir cache\nwon't see the update. Using this helper prevents that because it appends an\nasset ID:\n\n  <%= favicon_link_tag %>\n\ngenerates\n\n  <link href="/favicon.ico?4649789979" rel="shortcut icon"\n  type="image/vnd.microsoft.icon" />\n\nYou may specify a different file in the first argument:\n\n  <%= favicon_link_tag 'favicon.ico' %>\n\nThat's passed to +path_to_image+ as is, so it gives\n\n  <link href="/images/favicon.ico?4649789979" rel="shortcut icon"\n  type="image/vnd.microsoft.icon" />\n\nThe helper accepts an additional options hash where you can override "rel"\nand "type".\n\nFor example, Mobile Safari looks for a different LINK tag, pointing to an\nimage that\nwill be used if you add the page to the home screen of an iPod Touch, iPhone,\nor iPad.\nThe following call would generate such a tag:\n\n  <%= favicon_link_tag 'mb-icon.png', :rel => 'apple-touch-icon', :type =>\n  'image/png' %>\n
image_path ActionView::Helpers::AssetTagHelper.image_path(source)\nComputes the path to an image asset in the public images directory.\nFull paths from the document root will be passed through.\nUsed internally by +image_tag+ to build the image path:\n\n  image_path("edit")                                         # =>\n  "/images/edit"\n  image_path("edit.png")                                     # =>\n  "/images/edit.png"\n  image_path("icons/edit.png")                               # =>\n  "/images/icons/edit.png"\n  image_path("/icons/edit.png")                              # =>\n  "/icons/edit.png"\n  image_path("http://www.railsapplication.com/img/edit.png") # =>\n  "http://www.railsapplication.com/img/edit.png"\n\nIf you have images as application resources this method may conflict with\ntheir named routes.\nThe alias +path_to_image+ is provided to avoid that. Rails uses the alias\ninternally, and\nplugin authors are encouraged to do so.\n
image_tag ActionView::Helpers::AssetTagHelper.image_tag(source, options = {})\nReturns an html image tag for the +source+. The +source+ can be a full\npath or a file that exists in your public images directory.\n\n==== Options\nYou can add HTML attributes using the +options+. The +options+ supports\nthree additional keys for convenience and conformance:\n\n* <tt>:alt</tt>  - If no alt text is given, the file name part of the\n  +source+ is used (capitalized and without the extension)\n* <tt>:size</tt> - Supplied as "{Width}x{Height}", so "30x45" becomes\n  width="30" and height="45". <tt>:size</tt> will be ignored if the\n  value is not in the correct format.\n* <tt>:mouseover</tt> - Set an alternate image to be used when the onmouseover\n  event is fired, and sets the original image to be replaced onmouseout.\n  This can be used to implement an easy image toggle that fires on onmouseover.\n\n==== Examples\n image_tag("icon")  # =>\n   <img src="/images/icon" alt="Icon" />\n image_tag("icon.png")  # =>\n   <img src="/images/icon.png" alt="Icon" />\n image_tag("icon.png", :size => "16x10", :alt => "Edit Entry")  # =>\n   <img src="/images/icon.png" width="16" height="10" alt="Edit Entry" />\n image_tag("/icons/icon.gif", :size => "16x16")  # =>\n   <img src="/icons/icon.gif" width="16" height="16" alt="Icon" />\n image_tag("/icons/icon.gif", :height => '32', :width => '32') # =>\n   <img alt="Icon" height="32" src="/icons/icon.gif" width="32" />\n image_tag("/icons/icon.gif", :class => "menu_icon") # =>\n   <img alt="Icon" class="menu_icon" src="/icons/icon.gif" />\n image_tag("mouse.png", :mouseover => "/images/mouse_over.png") # =>\n   <img src="/images/mouse.png" onmouseover="this.src='/images/mouse_over.png'"\n   onmouseout="this.src='/images/mouse.png'" alt="Mouse" />\n image_tag("mouse.png", :mouseover => image_path("mouse_over.png")) # =>\n   <img src="/images/mouse.png" onmouseover="this.src='/images/mouse_over.png'"\n   onmouseout="this.src='/images/mouse.png'" alt="Mouse" />\n
is_uri? ActionView::Helpers::AssetTagHelper.is_uri?(path)\n\n
javascript_include_tag ActionView::Helpers::AssetTagHelper.javascript_include_tag(*sources)\nReturns an html script tag for each of the +sources+ provided. You\ncan pass in the filename (.js extension is optional) of javascript files\nthat exist in your public/javascripts directory for inclusion into the\ncurrent page or you can pass the full path relative to your document\nroot. To include the Prototype and Scriptaculous javascript libraries in\nyour application, pass <tt>:defaults</tt> as the source. When using\n<tt>:defaults</tt>, if an application.js file exists in your public\njavascripts directory, it will be included as well. You can modify the\nhtml attributes of the script tag by passing a hash as the last argument.\n\n==== Examples\n  javascript_include_tag "xmlhr" # =>\n    <script type="text/javascript" src="/javascripts/xmlhr.js"></script>\n\n  javascript_include_tag "xmlhr.js" # =>\n    <script type="text/javascript" src="/javascripts/xmlhr.js"></script>\n\n  javascript_include_tag "common.javascript", "/elsewhere/cools" # =>\n    <script type="text/javascript"\n    src="/javascripts/common.javascript"></script>\n    <script type="text/javascript" src="/elsewhere/cools.js"></script>\n\n  javascript_include_tag "http://www.railsapplication.com/xmlhr" # =>\n    <script type="text/javascript"\n    src="http://www.railsapplication.com/xmlhr.js"></script>\n\n  javascript_include_tag "http://www.railsapplication.com/xmlhr.js" # =>\n    <script type="text/javascript"\n    src="http://www.railsapplication.com/xmlhr.js"></script>\n\n  javascript_include_tag :defaults # =>\n    <script type="text/javascript" src="/javascripts/prototype.js"></script>\n    <script type="text/javascript" src="/javascripts/effects.js"></script>\n    ...\n    <script type="text/javascript" src="/javascripts/application.js"></script>\n\n* = The application.js file is only referenced if it exists\n\nThough it's not really recommended practice, if you need to extend the\ndefault JavaScript set for any reason\n(e.g., you're going to be using a certain .js file in every action), then\ntake a look at the register_javascript_include_default method.\n\nYou can also include all javascripts in the javascripts directory using\n<tt>:all</tt> as the source:\n\n  javascript_include_tag :all # =>\n    <script type="text/javascript" src="/javascripts/prototype.js"></script>\n    <script type="text/javascript" src="/javascripts/effects.js"></script>\n    ...\n    <script type="text/javascript" src="/javascripts/application.js"></script>\n    <script type="text/javascript" src="/javascripts/shop.js"></script>\n    <script type="text/javascript" src="/javascripts/checkout.js"></script>\n\nNote that the default javascript files will be included first. So Prototype\nand Scriptaculous are available to\nall subsequently included files.\n\nIf you want Rails to search in all the subdirectories under javascripts,\nyou should explicitly set <tt>:recursive</tt>:\n\n  javascript_include_tag :all, :recursive => true\n\n== Caching multiple javascripts into one\n\nYou can also cache multiple javascripts into one file, which requires less\nHTTP connections to download and can better be\ncompressed by gzip (leading to faster transfers). Caching will only happen\nif config.perform_caching\nis set to <tt>true</tt> (which is the case by default for the Rails production\nenvironment, but not for the development\nenvironment).\n\n==== Examples\n  javascript_include_tag :all, :cache => true # when config.perform_caching\n  is false =>\n    <script type="text/javascript" src="/javascripts/prototype.js"></script>\n    <script type="text/javascript" src="/javascripts/effects.js"></script>\n    ...\n    <script type="text/javascript" src="/javascripts/application.js"></script>\n    <script type="text/javascript" src="/javascripts/shop.js"></script>\n    <script type="text/javascript" src="/javascripts/checkout.js"></script>\n\n  javascript_include_tag :all, :cache => true # when config.perform_caching\n  is true =>\n    <script type="text/javascript" src="/javascripts/all.js"></script>\n\n  javascript_include_tag "prototype", "cart", "checkout", :cache => "shop"\n  # when config.perform_caching is false =>\n    <script type="text/javascript" src="/javascripts/prototype.js"></script>\n    <script type="text/javascript" src="/javascripts/cart.js"></script>\n    <script type="text/javascript" src="/javascripts/checkout.js"></script>\n\n  javascript_include_tag "prototype", "cart", "checkout", :cache => "shop"\n  # when config.perform_caching is true =>\n    <script type="text/javascript" src="/javascripts/shop.js"></script>\n\nThe <tt>:recursive</tt> option is also available for caching:\n\n  javascript_include_tag :all, :cache => true, :recursive => true\n
javascript_path ActionView::Helpers::AssetTagHelper.javascript_path(source)\nComputes the path to a javascript asset in the public javascripts directory.\nIf the +source+ filename has no extension, .js will be appended (except for\nexplicit URIs)\nFull paths from the document root will be passed through.\nUsed internally by javascript_include_tag to build the script path.\n\n==== Examples\n  javascript_path "xmlhr" # => /javascripts/xmlhr.js\n  javascript_path "dir/xmlhr.js" # => /javascripts/dir/xmlhr.js\n  javascript_path "/dir/xmlhr" # => /dir/xmlhr.js\n  javascript_path "http://www.railsapplication.com/js/xmlhr" # =>\n  http://www.railsapplication.com/js/xmlhr\n  javascript_path "http://www.railsapplication.com/js/xmlhr.js" # =>\n  http://www.railsapplication.com/js/xmlhr.js\n
javascript_src_tag ActionView::Helpers::AssetTagHelper.javascript_src_tag(source, options)\n\n
join_asset_file_contents ActionView::Helpers::AssetTagHelper.join_asset_file_contents(paths)\n\n
path_to_audio ActionView::Helpers::AssetTagHelper.path_to_audio(source)\n\n
path_to_image ActionView::Helpers::AssetTagHelper.path_to_image(source)\n\n
path_to_javascript ActionView::Helpers::AssetTagHelper.path_to_javascript(source)\n\n
path_to_stylesheet ActionView::Helpers::AssetTagHelper.path_to_stylesheet(source)\n\n
path_to_video ActionView::Helpers::AssetTagHelper.path_to_video(source)\n\n
rails_asset_id ActionView::Helpers::AssetTagHelper.rails_asset_id(source)\nUse the RAILS_ASSET_ID environment variable or the source's\nmodification time as its cache-busting asset id.\n
rewrite_asset_path ActionView::Helpers::AssetTagHelper.rewrite_asset_path(source, path = nil)\nBreak out the asset path rewrite in case plugins wish to put the asset id\nsomeplace other than the query string.\n
rewrite_extension? ActionView::Helpers::AssetTagHelper.rewrite_extension?(source, dir, ext)\n\n
rewrite_host_and_protocol ActionView::Helpers::AssetTagHelper.rewrite_host_and_protocol(source,\nhas_request)\n\n
stylesheet_link_tag ActionView::Helpers::AssetTagHelper.stylesheet_link_tag(*sources)\nReturns a stylesheet link tag for the sources specified as arguments. If\nyou don't specify an extension, <tt>.css</tt> will be appended automatically.\nYou can modify the link attributes by passing a hash as the last argument.\n\n==== Examples\n  stylesheet_link_tag "style" # =>\n    <link href="/stylesheets/style.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "style.css" # =>\n    <link href="/stylesheets/style.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "http://www.railsapplication.com/style.css" # =>\n    <link href="http://www.railsapplication.com/style.css" media="screen"\n    rel="stylesheet" type="text/css" />\n\n  stylesheet_link_tag "style", :media => "all" # =>\n    <link href="/stylesheets/style.css" media="all" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "style", :media => "print" # =>\n    <link href="/stylesheets/style.css" media="print" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "random.styles", "/css/stylish" # =>\n    <link href="/stylesheets/random.styles" media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/css/stylish.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\nYou can also include all styles in the stylesheets directory using\n<tt>:all</tt> as the source:\n\n  stylesheet_link_tag :all # =>\n    <link href="/stylesheets/style1.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/styleB.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/styleX2.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\nIf you want Rails to search in all the subdirectories under stylesheets,\nyou should explicitly set <tt>:recursive</tt>:\n\n  stylesheet_link_tag :all, :recursive => true\n\n== Caching multiple stylesheets into one\n\nYou can also cache multiple stylesheets into one file, which requires less\nHTTP connections and can better be\ncompressed by gzip (leading to faster transfers). Caching will only happen\nif config.perform_caching\nis set to true (which is the case by default for the Rails production\nenvironment, but not for the development\nenvironment). Examples:\n\n==== Examples\n  stylesheet_link_tag :all, :cache => true # when config.perform_caching is\n  false =>\n    <link href="/stylesheets/style1.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/styleB.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/styleX2.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag :all, :cache => true # when config.perform_caching is\n  true =>\n    <link href="/stylesheets/all.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "shop", "cart", "checkout", :cache => "payment" #\n  when config.perform_caching is false =>\n    <link href="/stylesheets/shop.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/cart.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n    <link href="/stylesheets/checkout.css" media="screen" rel="stylesheet"\n    type="text/css" />\n\n  stylesheet_link_tag "shop", "cart", "checkout", :cache => "payment" #\n  when config.perform_caching is true =>\n    <link href="/stylesheets/payment.css"  media="screen" rel="stylesheet"\n    type="text/css" />\n\nThe <tt>:recursive</tt> option is also available for caching:\n\n  stylesheet_link_tag :all, :cache => true, :recursive => true\n\nTo force concatenation (even in development mode) set <tt>:concat</tt>\nto true. This is useful if\nyou have too many stylesheets for IE to load.\n\n  stylesheet_link_tag :all, :concat => true\n
stylesheet_path ActionView::Helpers::AssetTagHelper.stylesheet_path(source)\nComputes the path to a stylesheet asset in the public stylesheets directory.\nIf the +source+ filename has no extension, <tt>.css</tt> will be appended\n(except for explicit URIs).\nFull paths from the document root will be passed through.\nUsed internally by +stylesheet_link_tag+ to build the stylesheet path.\n\n==== Examples\n  stylesheet_path "style" # => /stylesheets/style.css\n  stylesheet_path "dir/style.css" # => /stylesheets/dir/style.css\n  stylesheet_path "/dir/style.css" # => /dir/style.css\n  stylesheet_path "http://www.railsapplication.com/css/style" # =>\n  http://www.railsapplication.com/css/style\n  stylesheet_path "http://www.railsapplication.com/css/style.css" # =>\n  http://www.railsapplication.com/css/style.css\n
stylesheet_tag ActionView::Helpers::AssetTagHelper.stylesheet_tag(source, options)\n\n
video_path ActionView::Helpers::AssetTagHelper.video_path(source)\nComputes the path to a video asset in the public videos directory.\nFull paths from the document root will be passed through.\nUsed internally by +video_tag+ to build the video path.\n\n==== Examples\n  video_path("hd")                                            # => /videos/hd\n  video_path("hd.avi")                                        # =>\n  /videos/hd.avi\n  video_path("trailers/hd.avi")                               # =>\n  /videos/trailers/hd.avi\n  video_path("/trailers/hd.avi")                              # =>\n  /trailers/hd.avi\n  video_path("http://www.railsapplication.com/vid/hd.avi") # =>\n  http://www.railsapplication.com/vid/hd.avi\n
video_tag ActionView::Helpers::AssetTagHelper.video_tag(sources, options = {})\nReturns an html video tag for the +sources+. If +sources+ is a string,\na single video tag will be returned. If +sources+ is an array, a video\ntag with nested source tags for each source will be returned. The\n+sources+ can be full paths or files that exists in your public videos\ndirectory.\n\n==== Options\nYou can add HTML attributes using the +options+. The +options+ supports\ntwo additional keys for convenience and conformance:\n\n* <tt>:poster</tt> - Set an image (like a screenshot) to be shown\n  before the video loads. The path is calculated like the +src+ of +image_tag+.\n* <tt>:size</tt> - Supplied as "{Width}x{Height}", so "30x45" becomes\n  width="30" and height="45". <tt>:size</tt> will be ignored if the\n  value is not in the correct format.\n\n==== Examples\n video_tag("trailer")  # =>\n   <video src="/videos/trailer" />\n video_tag("trailer.ogg")  # =>\n   <video src="/videos/trailer.ogg" />\n video_tag("trailer.ogg", :controls => true, :autobuffer => true)  # =>\n   <video autobuffer="autobuffer" controls="controls" src="/videos/trailer.ogg"\n   />\n video_tag("trailer.m4v", :size => "16x10", :poster => "screenshot.png")  # =>\n   <video src="/videos/trailer.m4v" width="16" height="10"\n   poster="/images/screenshot.png" />\n video_tag("/trailers/hd.avi", :size => "16x16")  # =>\n   <video src="/trailers/hd.avi" width="16" height="16" />\n video_tag("/trailers/hd.avi", :height => '32', :width => '32') # =>\n   <video height="32" src="/trailers/hd.avi" width="32" />\n video_tag(["trailer.ogg", "trailer.flv"]) # =>\n   <video><source src="trailer.ogg" /><source src="trailer.ogg" /><source\n   src="trailer.flv" /></video>\n video_tag(["trailer.ogg", "trailer.flv"] :size => "160x120") # =>\n   <video height="120" width="160"><source src="trailer.ogg" /><source\n   src="trailer.flv" /></video>\n
write_asset_file_contents ActionView::Helpers::AssetTagHelper.write_asset_file_contents(joined_asset_path,\nasset_paths)\n\n
raw ActionView::Helpers::RawOutputHelper.raw(stringish)\nThis method outputs without escaping a string. Since escaping tags is\nnow default, this can be used when you don't want Rails to automatically\nescape tags. This is not recommended if the data is coming from the user's\ninput.\n\nFor example:\n\n<%=raw @user.name %>\n
check_box_tag ActionView::Helpers::FormTagHelper.check_box_tag(name, value = "1", checked =\nfalse, options = {})\nCreates a check box form input tag.\n\n==== Options\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* Any other key creates standard HTML options for the tag.\n\n==== Examples\n  check_box_tag 'accept'\n => <input id="accept" name="accept" type="checkbox" value="1" />\n\n  check_box_tag 'rock', 'rock music'\n => <input id="rock" name="rock" type="checkbox" value="rock music" />\n\n  check_box_tag 'receive_email', 'yes', true\n => <input checked="checked" id="receive_email" name="receive_email"\n type="checkbox" value="yes" />\n\n  check_box_tag 'tos', 'yes', false, :class => 'accept_tos'\n => <input class="accept_tos" id="tos" name="tos" type="checkbox" value="yes"\n />\n\n  check_box_tag 'eula', 'accepted', false, :disabled => true\n => <input disabled="disabled" id="eula" name="eula" type="checkbox"\n value="accepted" />\n
email_field_tag ActionView::Helpers::FormTagHelper.email_field_tag(name, value = nil,\noptions = {})\nCreates a text field of type "email".\n\n==== Options\n* Accepts the same options as text_field_tag.\n
extra_tags_for_form ActionView::Helpers::FormTagHelper.extra_tags_for_form(html_options)\n\n
field_set_tag ActionView::Helpers::FormTagHelper.field_set_tag(legend = nil, options =\nnil, &block)\nCreates a field set for grouping HTML form elements.\n\n<tt>legend</tt> will become the fieldset's title (optional as per W3C).\n<tt>options</tt> accept the same values as tag.\n\n==== Examples\n  <%= field_set_tag do %>\n    <p><%= text_field_tag 'name' %></p>\n  <% end %>\n => <fieldset><p><input id="name" name="name" type="text" /></p></fieldset>\n\n  <%= field_set_tag 'Your details' do %>\n    <p><%= text_field_tag 'name' %></p>\n  <% end %>\n => <fieldset><legend>Your details</legend><p><input id="name" name="name"\n type="text" /></p></fieldset>\n\n  <%= field_set_tag nil, :class => 'format' do %>\n    <p><%= text_field_tag 'name' %></p>\n  <% end %>\n => <fieldset class="format"><p><input id="name" name="name" type="text"\n /></p></fieldset>\n
file_field_tag ActionView::Helpers::FormTagHelper.file_field_tag(name, options = {})\nCreates a file upload field.  If you are using file uploads then you will\nalso need\nto set the multipart option for the form tag:\n\n  <%= form_tag '/upload', :multipart => true do %>\n    <label for="file">File to Upload</label> <%= file_field_tag "file" %>\n    <%= submit_tag %>\n  <% end %>\n\nThe specified URL will then be passed a File object containing the selected\nfile, or if the field\nwas left blank, a StringIO object.\n\n==== Options\n* Creates standard HTML attributes for the tag.\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n\n==== Examples\n  file_field_tag 'attachment'\n => <input id="attachment" name="attachment" type="file" />\n\n  file_field_tag 'avatar', :class => 'profile_input'\n => <input class="profile_input" id="avatar" name="avatar" type="file" />\n\n  file_field_tag 'picture', :disabled => true\n => <input disabled="disabled" id="picture" name="picture" type="file" />\n\n  file_field_tag 'resume', :value => '~/resume.doc'\n => <input id="resume" name="resume" type="file" value="~/resume.doc" />\n\n  file_field_tag 'user_pic', :accept => 'image/png,image/gif,image/jpeg'\n => <input accept="image/png,image/gif,image/jpeg" id="user_pic"\n name="user_pic" type="file" />\n\n  file_field_tag 'file', :accept => 'text/html', :class => 'upload', :value =>\n  'index.html'\n => <input accept="text/html" class="upload" id="file" name="file" type="file"\n value="index.html" />\n
form_tag ActionView::Helpers::FormTagHelper.form_tag(url_for_options = {}, options =\n{}, *parameters_for_url, &block)\nStarts a form tag that points the action to an url configured with\n<tt>url_for_options</tt> just like\nActionController::Base#url_for. The method for the form defaults to POST.\n\n==== Options\n* <tt>:multipart</tt> - If set to true, the enctype is set to\n"multipart/form-data".\n* <tt>:method</tt> - The method to use when submitting the form, usually\neither "get" or "post".\n  If "put", "delete", or another verb is used, a hidden input with name\n  <tt>_method</tt>\n  is added to simulate the verb over post.\n* A list of parameters to feed to the URL the form will be posted to.\n* <tt>:remote</tt> - If set to true, will allow the Unobtrusive JavaScript\ndrivers to control the\n  submit behaviour. By default this behaviour is an ajax submit.\n\n==== Examples\n  form_tag('/posts')\n => <form action="/posts" method="post">\n\n  form_tag('/posts/1', :method => :put)\n => <form action="/posts/1" method="put">\n\n  form_tag('/upload', :multipart => true)\n => <form action="/upload" method="post" enctype="multipart/form-data">\n\n  <%= form_tag('/posts') do -%>\n    <div><%= submit_tag 'Save' %></div>\n  <% end -%>\n => <form action="/posts" method="post"><div><input type="submit" name="submit"\n value="Save" /></div></form>\n\n <%= form_tag('/posts', :remote => true) %>\n => <form action="/posts" method="post" data-remote="true">\n
form_tag_html ActionView::Helpers::FormTagHelper.form_tag_html(html_options)\n\n
form_tag_in_block ActionView::Helpers::FormTagHelper.form_tag_in_block(html_options, &block)\n\n
hidden_field_tag ActionView::Helpers::FormTagHelper.hidden_field_tag(name, value = nil,\noptions = {})\nCreates a hidden form input field used to transmit data that would be lost\ndue to HTTP's statelessness or\ndata that should be hidden from the user.\n\n==== Options\n* Creates standard HTML attributes for the tag.\n\n==== Examples\n  hidden_field_tag 'tags_list'\n => <input id="tags_list" name="tags_list" type="hidden" />\n\n  hidden_field_tag 'token', 'VUBJKB23UIVI1UU1VOBVI@'\n => <input id="token" name="token" type="hidden" value="VUBJKB23UIVI1UU1VOBVI@"\n />\n\n  hidden_field_tag 'collected_input', '', :onchange => "alert('Input\n  collected!')"\n => <input id="collected_input" name="collected_input" onchange="alert('Input\n collected!')"\n    type="hidden" value="" />\n
html_options_for_form ActionView::Helpers::FormTagHelper.html_options_for_form(url_for_options,\noptions, *parameters_for_url)\n\n
image_submit_tag ActionView::Helpers::FormTagHelper.image_submit_tag(source, options = {})\nDisplays an image which when clicked will submit the form.\n\n<tt>source</tt> is passed to AssetTagHelper#path_to_image\n\n==== Options\n* <tt>:confirm => 'question?'</tt> - This will add a JavaScript confirm\n  prompt with the question specified. If the user accepts, the form is\n  processed normally, otherwise no action is taken.\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* Any other key creates standard HTML options for the tag.\n\n==== Examples\n  image_submit_tag("login.png")\n => <input src="/images/login.png" type="image" />\n\n  image_submit_tag("purchase.png", :disabled => true)\n => <input disabled="disabled" src="/images/purchase.png" type="image" />\n\n  image_submit_tag("search.png", :class => 'search_button')\n => <input class="search_button" src="/images/search.png" type="image" />\n\n  image_submit_tag("agree.png", :disabled => true, :class =>\n  "agree_disagree_button")\n => <input class="agree_disagree_button" disabled="disabled"\n src="/images/agree.png" type="image" />\n
label_tag ActionView::Helpers::FormTagHelper.label_tag(name = nil, content_or_options =\nnil, options = nil, &block)\nCreates a label element. Accepts a block.\n\n==== Options\n* Creates standard HTML attributes for the tag.\n\n==== Examples\n  label_tag 'name'\n => <label for="name">Name</label>\n\n  label_tag 'name', 'Your name'\n => <label for="name">Your Name</label>\n\n  label_tag 'name', nil, :class => 'small_label'\n => <label for="name" class="small_label">Name</label>\n
number_field_tag ActionView::Helpers::FormTagHelper.number_field_tag(name, value = nil,\noptions = {})\nCreates a number field.\n\n==== Options\n* <tt>:min</tt> - The minimum acceptable value.\n* <tt>:max</tt> - The maximum acceptable value.\n* <tt>:in</tt> - A range specifying the <tt>:min</tt> and\n  <tt>:max</tt> values.\n* <tt>:step</tt> - The acceptable value granularity.\n* Otherwise accepts the same options as text_field_tag.\n\n==== Examples\n  number_field_tag 'quantity', nil, :in => 1...10\n  => <input id="quantity" name="quantity" min="1" max="9" />\n
password_field_tag ActionView::Helpers::FormTagHelper.password_field_tag(name = "password",\nvalue = nil, options = {})\nCreates a password field, a masked text field that will hide the users input\nbehind a mask character.\n\n==== Options\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* <tt>:size</tt> - The number of visible characters that will fit in the input.\n* <tt>:maxlength</tt> - The maximum number of characters that the browser\nwill allow the user to enter.\n* Any other key creates standard HTML attributes for the tag.\n\n==== Examples\n  password_field_tag 'pass'\n => <input id="pass" name="pass" type="password" />\n\n  password_field_tag 'secret', 'Your secret here'\n => <input id="secret" name="secret" type="password" value="Your secret\n here" />\n\n  password_field_tag 'masked', nil, :class => 'masked_input_field'\n => <input class="masked_input_field" id="masked" name="masked" type="password"\n />\n\n  password_field_tag 'token', '', :size => 15\n => <input id="token" name="token" size="15" type="password" value="" />\n\n  password_field_tag 'key', nil, :maxlength => 16\n => <input id="key" maxlength="16" name="key" type="password" />\n\n  password_field_tag 'confirm_pass', nil, :disabled => true\n => <input disabled="disabled" id="confirm_pass" name="confirm_pass"\n type="password" />\n\n  password_field_tag 'pin', '1234', :maxlength => 4, :size => 6, :class =>\n  "pin_input"\n => <input class="pin_input" id="pin" maxlength="4" name="pin" size="6"\n type="password" value="1234" />\n
phone_field_tag ActionView::Helpers::FormTagHelper.phone_field_tag(name, value = nil,\noptions = {})\n\n
radio_button_tag ActionView::Helpers::FormTagHelper.radio_button_tag(name, value, checked =\nfalse, options = {})\nCreates a radio button; use groups of radio buttons named the same to allow\nusers to\nselect from a group of options.\n\n==== Options\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* Any other key creates standard HTML options for the tag.\n\n==== Examples\n  radio_button_tag 'gender', 'male'\n => <input id="gender_male" name="gender" type="radio" value="male" />\n\n  radio_button_tag 'receive_updates', 'no', true\n => <input checked="checked" id="receive_updates_no" name="receive_updates"\n type="radio" value="no" />\n\n  radio_button_tag 'time_slot', "3:00 p.m.", false, :disabled => true\n => <input disabled="disabled" id="time_slot_300_pm" name="time_slot"\n type="radio" value="3:00 p.m." />\n\n  radio_button_tag 'color', "green", true, :class => "color_input"\n => <input checked="checked" class="color_input" id="color_green" name="color"\n type="radio" value="green" />\n
range_field_tag ActionView::Helpers::FormTagHelper.range_field_tag(name, value = nil,\noptions = {})\nCreates a range form element.\n\n==== Options\n* Accepts the same options as number_field_tag.\n
sanitize_to_id ActionView::Helpers::FormTagHelper.sanitize_to_id(name)\nsee http://www.w3.org/TR/html4/types.html#type-name\n
search_field_tag ActionView::Helpers::FormTagHelper.search_field_tag(name, value = nil,\noptions = {})\nCreates a text field of type "search".\n\n==== Options\n* Accepts the same options as text_field_tag.\n
select_tag ActionView::Helpers::FormTagHelper.select_tag(name, option_tags = nil,\noptions = {})\nCreates a dropdown selection box, or if the <tt>:multiple</tt> option is\nset to true, a multiple\nchoice selection box.\n\nHelpers::FormOptions can be used to create common select boxes such as\ncountries, time zones, or\nassociated records. <tt>option_tags</tt> is a string containing the option\ntags for the select box.\n\n==== Options\n* <tt>:multiple</tt> - If set to true the selection will allow multiple\nchoices.\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* Any other key creates standard HTML attributes for the tag.\n\n==== Examples\n  select_tag "people", options_from_collection_for_select(@people, "id",\n  "name")\n <select id="people" name="people"><option value="1">David</option></select>\n\n  select_tag "people", "<option>David</option>"\n => <select id="people" name="people"><option>David</option></select>\n\n  select_tag "count",\n  "<option>1</option><option>2</option><option>3</option><option>4</option>"\n => <select id="count" name="count"><option>1</option><option>2</option>\n    <option>3</option><option>4</option></select>\n\n  select_tag "colors",\n  "<option>Red</option><option>Green</option><option>Blue</option>", :multiple\n  => true\n => <select id="colors" multiple="multiple"\n name="colors[]"><option>Red</option>\n    <option>Green</option><option>Blue</option></select>\n\n  select_tag "locations", "<option>Home</option><option\n  selected="selected">Work</option><option>Out</option>"\n => <select id="locations" name="locations"><option>Home</option><option\n selected='selected'>Work</option>\n    <option>Out</option></select>\n\n  select_tag "access", "<option>Read</option><option>Write</option>",\n  :multiple => true, :class => 'form_input'\n => <select class="form_input" id="access" multiple="multiple"\n name="access[]"><option>Read</option>\n    <option>Write</option></select>\n\n  select_tag "destination",\n  "<option>NYC</option><option>Paris</option><option>Rome</option>", :disabled\n  => true\n => <select disabled="disabled" id="destination"\n name="destination"><option>NYC</option>\n    <option>Paris</option><option>Rome</option></select>\n
submit_tag ActionView::Helpers::FormTagHelper.submit_tag(value = "Save changes",\noptions = {})\nCreates a submit button with the text <tt>value</tt> as the caption.\n\n==== Options\n* <tt>:confirm => 'question?'</tt> - If present the unobtrusive JavaScript\n  drivers will provide a prompt with the question specified. If the user\n  accepts,\n  the form is processed normally, otherwise no action is taken.\n* <tt>:disabled</tt> - If true, the user will not be able to use this input.\n* <tt>:disable_with</tt> - Value of this parameter will be used as the value\nfor a\n  disabled version of the submit button when the form is submitted. This\n  feature is\n  provided by the unobtrusive JavaScript driver.\n* Any other key creates standard HTML options for the tag.\n\n==== Examples\n  submit_tag\n => <input name="commit" type="submit" value="Save changes" />\n\n  submit_tag "Edit this article"\n => <input name="commit" type="submit" value="Edit this article" />\n\n  submit_tag "Save edits", :disabled => true\n => <input disabled="disabled" name="commit" type="submit" value="Save\n edits" />\n\n\n  submit_tag "Complete sale", :disable_with => "Please wait..."\n => <input name="commit" data-disable-with="Please wait..."\n    type="submit" value="Complete sale" />\n\n  submit_tag nil, :class => "form_submit"\n => <input class="form_submit" name="commit" type="submit" />\n\n  submit_tag "Edit", :disable_with => "Editing...", :class => "edit_button"\n => <input class="edit_button" data-disable_with="Editing..."\n    name="commit" type="submit" value="Edit" />\n\n  submit_tag "Save", :confirm => "Are you sure?"\n => <input name='commit' type='submit' value='Save'\n        data-confirm="Are you sure?" />\n
telephone_field_tag ActionView::Helpers::FormTagHelper.telephone_field_tag(name, value = nil,\noptions = {})\nCreates a text field of type "tel".\n\n==== Options\n* Accepts the same options as text_field_tag.\n
text_area_tag ActionView::Helpers::FormTagHelper.text_area_tag(name, content = nil,\noptions = {})\nCreates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions.\n\n==== Options\n* <tt>:size</tt> - A string specifying the dimensions (columns by rows)\nof the textarea (e.g., "25x10").\n* <tt>:rows</tt> - Specify the number of rows in the textarea\n* <tt>:cols</tt> - Specify the number of columns in the textarea\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* <tt>:escape</tt> - By default, the contents of the text input are HTML\nescaped.\n  If you need unescaped contents, set this to false.\n* Any other key creates standard HTML attributes for the tag.\n\n==== Examples\n  text_area_tag 'post'\n => <textarea id="post" name="post"></textarea>\n\n  text_area_tag 'bio', @user.bio\n => <textarea id="bio" name="bio">This is my biography.</textarea>\n\n  text_area_tag 'body', nil, :rows => 10, :cols => 25\n => <textarea cols="25" id="body" name="body" rows="10"></textarea>\n\n  text_area_tag 'body', nil, :size => "25x10"\n => <textarea name="body" id="body" cols="25" rows="10"></textarea>\n\n  text_area_tag 'description', "Description goes here.", :disabled => true\n => <textarea disabled="disabled" id="description"\n name="description">Description goes here.</textarea>\n\n  text_area_tag 'comment', nil, :class => 'comment_input'\n => <textarea class="comment_input" id="comment" name="comment"></textarea>\n
text_field_tag ActionView::Helpers::FormTagHelper.text_field_tag(name, value = nil, options\n= {})\nCreates a standard text field; use these text fields to input smaller chunks\nof text like a username\nor a search query.\n\n==== Options\n* <tt>:disabled</tt> - If set to true, the user will not be able to use\nthis input.\n* <tt>:size</tt> - The number of visible characters that will fit in the input.\n* <tt>:maxlength</tt> - The maximum number of characters that the browser\nwill allow the user to enter.\n* <tt>:placeholder</tt> - The text contained in the field by default which\nis removed when the field receives focus.\n* Any other key creates standard HTML attributes for the tag.\n\n==== Examples\n  text_field_tag 'name'\n => <input id="name" name="name" type="text" />\n\n  text_field_tag 'query', 'Enter your search query here'\n => <input id="query" name="query" type="text" value="Enter your search\n query here" />\n\n  text_field_tag 'search', nil, :placeholder => 'Enter search term...'\n => <input id="search" name="search" placeholder="Enter search\n term..." type="text" />\n\n  text_field_tag 'request', nil, :class => 'special_input'\n => <input class="special_input" id="request" name="request" type="text" />\n\n  text_field_tag 'address', '', :size => 75\n => <input id="address" name="address" size="75" type="text" value="" />\n\n  text_field_tag 'zip', nil, :maxlength => 5\n => <input id="zip" maxlength="5" name="zip" type="text" />\n\n  text_field_tag 'payment_amount', '$0.00', :disabled => true\n => <input disabled="disabled" id="payment_amount" name="payment_amount"\n type="text" value="$0.00" />\n\n  text_field_tag 'ip', '0.0.0.0', :maxlength => 15, :size => 20, :class =>\n  "ip-input"\n => <input class="ip-input" id="ip" maxlength="15" name="ip" size="20"\n type="text" value="0.0.0.0" />\n
token_tag ActionView::Helpers::FormTagHelper.token_tag()\n\n
url_field_tag ActionView::Helpers::FormTagHelper.url_field_tag(name, value = nil, options\n= {})\nCreates a text field of type "url".\n\n==== Options\n* Accepts the same options as text_field_tag.\n
collection_select ActionView::Helpers::FormOptionsHelper.collection_select(object, method,\ncollection, value_method, text_method, options = {}, html_options = {})\nReturns <tt><select></tt> and <tt><option></tt> tags for the collection of\nexisting return values of\n+method+ for +object+'s class. The value returned from calling +method+\non the instance +object+ will\nbe selected. If calling +method+ returns +nil+, no selection is made without\nincluding <tt>:prompt</tt>\nor <tt>:include_blank</tt> in the +options+ hash.\n\nThe <tt>:value_method</tt> and <tt>:text_method</tt> parameters are methods\nto be called on each member\nof +collection+. The return values are used as the +value+ attribute and\ncontents of each\n<tt><option></tt> tag, respectively.\n\nExample object structure for use with this method:\n  class Post < ActiveRecord::Base\n    belongs_to :author\n  end\n  class Author < ActiveRecord::Base\n    has_many :posts\n    def name_with_initial\n      "#{first_name.first}. #{last_name}"\n    end\n  end\n\nSample usage (selecting the associated Author for an instance of Post,\n<tt>@post</tt>):\n  collection_select(:post, :author_id, Author.all, :id, :name_with_initial,\n  :prompt => true)\n\nIf <tt>@post.author_id</tt> is already <tt>1</tt>, this would return:\n  <select name="post[author_id]">\n    <option value="">Please select</option>\n    <option value="1" selected="selected">D. Heinemeier Hansson</option>\n    <option value="2">D. Thomas</option>\n    <option value="3">M. Clark</option>\n  </select>\n
extract_selected_and_disabled ActionView::Helpers::FormOptionsHelper.extract_selected_and_disabled(selected)\n\n
extract_values_from_collection ActionView::Helpers::FormOptionsHelper.extract_values_from_collection(collection,\nvalue_method, selected)\n\n
grouped_collection_select ActionView::Helpers::FormOptionsHelper.grouped_collection_select(object,\nmethod, collection, group_method, group_label_method, option_key_method,\noption_value_method, options = {}, html_options = {})\nReturns <tt><select></tt>, <tt><optgroup></tt> and <tt><option></tt> tags\nfor the collection of existing return values of\n+method+ for +object+'s class. The value returned from calling +method+\non the instance +object+ will\nbe selected. If calling +method+ returns +nil+, no selection is made without\nincluding <tt>:prompt</tt>\nor <tt>:include_blank</tt> in the +options+ hash.\n\nParameters:\n* +object+ - The instance of the class to be used for the select tag\n* +method+ - The attribute of +object+ corresponding to the select tag\n* +collection+ - An array of objects representing the <tt><optgroup></tt> tags.\n* +group_method+ - The name of a method which, when called on a member of\n+collection+, returns an\n  array of child objects representing the <tt><option></tt> tags.\n* +group_label_method+ - The name of a method which, when called on a member\nof +collection+, returns a\n  string to be used as the +label+ attribute for its <tt><optgroup></tt> tag.\n* +option_key_method+ - The name of a method which, when called on a child\nobject of a member of\n  +collection+, returns a value to be used as the +value+ attribute for its\n  <tt><option></tt> tag.\n* +option_value_method+ - The name of a method which, when called on a child\nobject of a member of\n  +collection+, returns a value to be used as the contents of its\n  <tt><option></tt> tag.\n\nExample object structure for use with this method:\n  class Continent < ActiveRecord::Base\n    has_many :countries\n attribs: id, name\n  end\n  class Country < ActiveRecord::Base\n    belongs_to :continent\n attribs: id, name, continent_id\n  end\n  class City < ActiveRecord::Base\n    belongs_to :country\n attribs: id, name, country_id\n  end\n\nSample usage:\n  grouped_collection_select(:city, :country_id, @continents, :countries,\n  :name, :id, :name)\n\nPossible output:\n  <select name="city[country_id]">\n    <optgroup label="Africa">\n      <option value="1">South Africa</option>\n      <option value="3">Somalia</option>\n    </optgroup>\n    <optgroup label="Europe">\n      <option value="7" selected="selected">Denmark</option>\n      <option value="2">Ireland</option>\n    </optgroup>\n  </select>\n
grouped_options_for_select ActionView::Helpers::FormOptionsHelper.grouped_options_for_select(grouped_options,\nselected_key = nil, prompt = nil)\nReturns a string of <tt><option></tt> tags, like <tt>options_for_select</tt>,\nbut\nwraps them with <tt><optgroup></tt> tags.\n\nParameters:\n* +grouped_options+ - Accepts a nested array or hash of strings.  The first\nvalue serves as the\n  <tt><optgroup></tt> label while the second value must be an array of\n  options. The second value can be a\n  nested array of text-value pairs. See <tt>options_for_select</tt> for\n  more info.\n   Ex. ["North America",[["United States","US"],["Canada","CA"]]]\n* +selected_key+ - A value equal to the +value+ attribute for one of the\n<tt><option></tt> tags,\n  which will have the +selected+ attribute set. Note: It is possible for\n  this value to match multiple options\n  as you might have the same option in multiple groups.  Each will then get\n  <tt>selected="selected"</tt>.\n* +prompt+ - set to true or a prompt string. When the select element doesn't\nhave a value yet, this\n  prepends an option with a generic prompt - "Please select" - or the given\n  prompt string.\n\nSample usage (Array):\n  grouped_options = [\n   ['North America',\n     [['United States','US'],'Canada']],\n   ['Europe',\n     ['Denmark','Germany','France']]\n  ]\n  grouped_options_for_select(grouped_options)\n\nSample usage (Hash):\n  grouped_options = {\n   'North America' => [['United States','US], 'Canada'],\n   'Europe' => ['Denmark','Germany','France']\n  }\n  grouped_options_for_select(grouped_options)\n\nPossible output:\n  <optgroup label="Europe">\n    <option value="Denmark">Denmark</option>\n    <option value="Germany">Germany</option>\n    <option value="France">France</option>\n  </optgroup>\n  <optgroup label="North America">\n    <option value="US">United States</option>\n    <option value="Canada">Canada</option>\n  </optgroup>\n\n<b>Note:</b> Only the <tt><optgroup></tt> and <tt><option></tt> tags are\nreturned, so you still have to\nwrap the output in an appropriate <tt><select></tt> tag.\n
option_groups_from_collection_for_select ActionView::Helpers::FormOptionsHelper.option_groups_from_collection_for_select(collection,\ngroup_method, group_label_method, option_key_method, option_value_method,\nselected_key = nil)\nReturns a string of <tt><option></tt> tags, like\n<tt>options_from_collection_for_select</tt>, but\ngroups them by <tt><optgroup></tt> tags based on the object relationships\nof the arguments.\n\nParameters:\n* +collection+ - An array of objects representing the <tt><optgroup></tt> tags.\n* +group_method+ - The name of a method which, when called on a member of\n+collection+, returns an\n  array of child objects representing the <tt><option></tt> tags.\n* group_label_method+ - The name of a method which, when called on a member\nof +collection+, returns a\n  string to be used as the +label+ attribute for its <tt><optgroup></tt> tag.\n* +option_key_method+ - The name of a method which, when called on a child\nobject of a member of\n  +collection+, returns a value to be used as the +value+ attribute for its\n  <tt><option></tt> tag.\n* +option_value_method+ - The name of a method which, when called on a child\nobject of a member of\n  +collection+, returns a value to be used as the contents of its\n  <tt><option></tt> tag.\n* +selected_key+ - A value equal to the +value+ attribute for one of the\n<tt><option></tt> tags,\n  which will have the +selected+ attribute set. Corresponds to the return\n  value of one of the calls\n  to +option_key_method+. If +nil+, no selection is made. Can also be a hash\n  if disabled values are\n  to be specified.\n\nExample object structure for use with this method:\n  class Continent < ActiveRecord::Base\n    has_many :countries\n attribs: id, name\n  end\n  class Country < ActiveRecord::Base\n    belongs_to :continent\n attribs: id, name, continent_id\n  end\n\nSample usage:\n  option_groups_from_collection_for_select(@continents, :countries, :name,\n  :id, :name, 3)\n\nPossible output:\n  <optgroup label="Africa">\n    <option value="1">Egypt</option>\n    <option value="4">Rwanda</option>\n    ...\n  </optgroup>\n  <optgroup label="Asia">\n    <option value="3" selected="selected">China</option>\n    <option value="12">India</option>\n    <option value="5">Japan</option>\n    ...\n  </optgroup>\n\n<b>Note:</b> Only the <tt><optgroup></tt> and <tt><option></tt> tags are\nreturned, so you still have to\nwrap the output in an appropriate <tt><select></tt> tag.\n
option_html_attributes ActionView::Helpers::FormOptionsHelper.option_html_attributes(element)\n\n
option_text_and_value ActionView::Helpers::FormOptionsHelper.option_text_and_value(option)\n\n
option_value_selected? ActionView::Helpers::FormOptionsHelper.option_value_selected?(value, selected)\n\n
options_for_select ActionView::Helpers::FormOptionsHelper.options_for_select(container, selected\n= nil)\nAccepts a container (hash, array, enumerable, your type) and returns a string\nof option tags. Given a container\nwhere the elements respond to first and last (such as a two-element array),\nthe "lasts" serve as option values and\nthe "firsts" as option text. Hashes are turned into this form automatically,\nso the keys become "firsts" and values\nbecome lasts. If +selected+ is specified, the matching "last" or element\nwill get the selected option-tag.  +selected+\nmay also be an array of values to be selected when using a multiple select.\n\nExamples (call, result):\n  options_for_select([["Dollar", "$"], ["Kroner", "DKK"]])\n    <option value="$">Dollar</option>\\n<option value="DKK">Kroner</option>\n\n  options_for_select([ "VISA", "MasterCard" ], "MasterCard")\n    <option>VISA</option>\\n<option selected="selected">MasterCard</option>\n\n  options_for_select({ "Basic" => "$20", "Plus" => "$40" }, "$40")\n    <option value="$20">Basic</option>\\n<option value="$40"\n    selected="selected">Plus</option>\n\n  options_for_select([ "VISA", "MasterCard", "Discover" ], ["VISA",\n  "Discover"])\n    <option\n    selected="selected">VISA</option>\\n<option>MasterCard</option>\\n<option\n    selected="selected">Discover</option>\n\nYou can optionally provide html attributes as the last element of the array.\n\nExamples:\n  options_for_select([ "Denmark", ["USA", {:class=>'bold'}], "Sweden" ],\n  ["USA", "Sweden"])\n    <option value="Denmark">Denmark</option>\\n<option value="USA"\n    class="bold" selected="selected">USA</option>\\n<option value="Sweden"\n    selected="selected">Sweden</option>\n\n  options_for_select([["Dollar", "$", {:class=>"bold"}], ["Kroner", "DKK",\n  {:onclick => "alert('HI');"}]])\n    <option value="$" class="bold">Dollar</option>\\n<option value="DKK"\n    onclick="alert('HI');">Kroner</option>\n\nIf you wish to specify disabled option tags, set +selected+ to be a hash,\nwith <tt>:disabled</tt> being either a value\nor array of values to be disabled. In this case, you can use <tt>:selected</tt>\nto specify selected option tags.\n\nExamples:\n  options_for_select(["Free", "Basic", "Advanced", "Super Platinum"],\n  :disabled => "Super Platinum")\n    <option value="Free">Free</option>\\n<option\n    value="Basic">Basic</option>\\n<option\n    value="Advanced">Advanced</option>\\n<option value="Super Platinum"\n    disabled="disabled">Super Platinum</option>\n\n  options_for_select(["Free", "Basic", "Advanced", "Super Platinum"],\n  :disabled => ["Advanced", "Super Platinum"])\n    <option value="Free">Free</option>\\n<option\n    value="Basic">Basic</option>\\n<option value="Advanced"\n    disabled="disabled">Advanced</option>\\n<option value="Super Platinum"\n    disabled="disabled">Super Platinum</option>\n\n  options_for_select(["Free", "Basic", "Advanced", "Super Platinum"],\n  :selected => "Free", :disabled => "Super Platinum")\n    <option value="Free" selected="selected">Free</option>\\n<option\n    value="Basic">Basic</option>\\n<option\n    value="Advanced">Advanced</option>\\n<option value="Super Platinum"\n    disabled="disabled">Super Platinum</option>\n\nNOTE: Only the option tags are returned, you have to wrap this call in a\nregular HTML select tag.\n
options_from_collection_for_select ActionView::Helpers::FormOptionsHelper.options_from_collection_for_select(collection,\nvalue_method, text_method, selected = nil)\nReturns a string of option tags that have been compiled by iterating over\nthe +collection+ and assigning the\nthe result of a call to the +value_method+ as the option value and the\n+text_method+ as the option text.\nExample:\n  options_from_collection_for_select(@people, 'id', 'name')\nThis will output the same HTML as if you did this:\n  <option value="#{person.id}">#{person.name}</option>\n\nThis is more often than not used inside a #select_tag like this example:\n  select_tag 'person', options_from_collection_for_select(@people, 'id',\n  'name')\n\nIf +selected+ is specified as a value or array of values, the element(s)\nreturning a match on +value_method+\nwill be selected option tag(s).\n\nIf +selected+ is specified as a Proc, those members of the collection that\nreturn true for the anonymous\nfunction are the selected values.\n\n+selected+ can also be a hash, specifying both <tt>:selected</tt> and/or\n<tt>:disabled</tt> values as required.\n\nBe sure to specify the same class as the +value_method+ when specifying\nselected or disabled options.\nFailure to do this will produce undesired results. Example:\n  options_from_collection_for_select(@people, 'id', 'name', '1')\nWill not select a person with the id of 1 because 1 (an Integer) is not the\nsame as '1' (a string)\n  options_from_collection_for_select(@people, 'id', 'name', 1)\nshould produce the desired results.\n
select ActionView::Helpers::FormOptionsHelper.select(object, method, choices,\noptions = {}, html_options = {})\nCreate a select tag and a series of contained option tags for the provided\nobject and method.\nThe option currently held by the object will be selected, provided that the\nobject is available.\nSee options_for_select for the required format of the choices parameter.\n\nExample with @post.person_id => 1:\n  select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] },\n  { :include_blank => true })\n\ncould become:\n\n  <select name="post[person_id]">\n    <option value=""></option>\n    <option value="1" selected="selected">David</option>\n    <option value="2">Sam</option>\n    <option value="3">Tobias</option>\n  </select>\n\nThis can be used to provide a default set of options in the standard way:\nbefore rendering the create form, a\nnew model instance is assigned the default options and bound to\n@model_name. Usually this model is not saved\nto the database. Instead, a second model object is created when the create\nrequest is received.\nThis allows the user to submit a form page more than once with the expected\nresults of creating multiple records.\nIn addition, this allows a single partial to be used to generate form inputs\nfor both edit and create forms.\n\nBy default, <tt>post.person_id</tt> is the selected option.  Specify\n<tt>:selected => value</tt> to use a different selection\nor <tt>:selected => nil</tt> to leave all options unselected. Similarly,\nyou can specify values to be disabled in the option\ntags by specifying the <tt>:disabled</tt> option. This can either be a single\nvalue or an array of values to be disabled.\n
time_zone_options_for_select ActionView::Helpers::FormOptionsHelper.time_zone_options_for_select(selected =\nnil, priority_zones = nil, model = ::ActiveSupport::TimeZone)\nReturns a string of option tags for pretty much any time zone in the\nworld. Supply a ActiveSupport::TimeZone name as +selected+ to have it\nmarked as the selected option tag. You can also supply an array of\nActiveSupport::TimeZone objects as +priority_zones+, so that they will\nbe listed above the rest of the (long) list. (You can use\nActiveSupport::TimeZone.us_zones as a convenience for obtaining a list\nof the US time zones, or a Regexp to select the zones of your choice)\n\nThe +selected+ parameter must be either +nil+, or a string that names\na ActiveSupport::TimeZone.\n\nBy default, +model+ is the ActiveSupport::TimeZone constant (which can\nbe obtained in Active Record as a value object). The only requirement\nis that the +model+ parameter be an object that responds to +all+, and\nreturns an array of objects that represent time zones.\n\nNOTE: Only the option tags are returned, you have to wrap this call in\na regular HTML select tag.\n
time_zone_select ActionView::Helpers::FormOptionsHelper.time_zone_select(object, method,\npriority_zones = nil, options = {}, html_options = {})\nReturn select and option tags for the given object and method, using\ntime_zone_options_for_select to generate the list of option tags.\n\nIn addition to the <tt>:include_blank</tt> option documented above,\nthis method also supports a <tt>:model</tt> option, which defaults\nto ActiveSupport::TimeZone. This may be used by users to specify a\ndifferent time zone model object. (See +time_zone_options_for_select+\nfor more information.)\n\nYou can also supply an array of ActiveSupport::TimeZone objects\nas +priority_zones+, so that they will be listed above the rest of the\n(long) list. (You can use ActiveSupport::TimeZone.us_zones as a convenience\nfor obtaining a list of the US time zones, or a Regexp to select the zones\nof your choice)\n\nFinally, this method supports a <tt>:default</tt> option, which selects\na default ActiveSupport::TimeZone if the object's time zone is +nil+.\n\nExamples:\n  time_zone_select( "user", "time_zone", nil, :include_blank => true)\n\n  time_zone_select( "user", "time_zone", nil, :default => "Pacific Time\n  (US & Canada)" )\n\n  time_zone_select( "user", 'time_zone', ActiveSupport::TimeZone.us_zones,\n  :default => "Pacific Time (US & Canada)")\n\n  time_zone_select( "user", 'time_zone', [ ActiveSupport::TimeZone['Alaska'],\n  ActiveSupport::TimeZone['Hawaii'] ])\n\n  time_zone_select( "user", 'time_zone', /Australia/)\n\n  time_zone_select( "user", "time_zone", ActiveSupport::Timezone.all.sort,\n  :model => ActiveSupport::Timezone)\n
convert_to_model ActionView::Context.convert_to_model(object)\n\n
_assigns ActionView::TestCase::Behavior._assigns()\n\n
_routes ActionView::TestCase::Behavior._routes()\n\n
_user_defined_ivars ActionView::TestCase::Behavior._user_defined_ivars()\n\n
_view ActionView::TestCase::Behavior._view()\n\n
config ActionView::TestCase::Behavior.config()\n\n
locals ActionView::TestCase::Behavior.locals()\n\n
make_test_case_available_to_view! ActionView::TestCase::Behavior.make_test_case_available_to_view!()\n\n
method_missing ActionView::TestCase::Behavior.method_missing(selector, *args)\n\n
protect_against_forgery? ActionView::TestCase::Behavior.protect_against_forgery?()\n\n
render ActionView::TestCase::Behavior.render(options = {}, local_assigns = {}, &block)\n\n
response_from_page_or_rjs ActionView::TestCase::Behavior.response_from_page_or_rjs()\nSupport the selector assertions\n\nNeed to experiment if this priority is the best one: rendered => output_buffer\n
say_no_to_protect_against_forgery! ActionView::TestCase::Behavior.say_no_to_protect_against_forgery!()\n\n
setup_with_controller ActionView::TestCase::Behavior.setup_with_controller()\n\n
view ActionView::TestCase::Behavior.view()\nThe instance of ActionView::Base that is used by +render+.\n
view_assigns ActionView::TestCase::Behavior.view_assigns()\nReturns a Hash of instance variables and their values, as defined by\nthe user in the test case, which are then assigned to the view being\nrendered. This is generally intended for internal use and extension\nframeworks.\n
determine_default_helper_class ActionView::TestCase::Behavior::ClassMethods.determine_default_helper_class(name)\n\n
helper_class ActionView::TestCase::Behavior::ClassMethods.helper_class()\n\n
helper_method ActionView::TestCase::Behavior::ClassMethods.helper_method(*methods)\n\n
include_helper_modules! ActionView::TestCase::Behavior::ClassMethods.include_helper_modules!()\n\n
new ActionView::TestCase::Behavior::ClassMethods.new(*)\n\n
tests ActionView::TestCase::Behavior::ClassMethods.tests(helper_class)\n\n
_render_partial ActionView::TestCase::Behavior::Locals._render_partial(options)\n\n
default_url_options ActionDispatch::Routing::Mapper::Base.default_url_options(options)\n\n
default_url_options= ActionDispatch::Routing::Mapper::Base.default_url_options=(options)\n\n
match ActionDispatch::Routing::Mapper::Base.match(path, options=nil)\nWhen you set up a regular route, you supply a series of symbols that\nRails maps to parts of an incoming HTTP request.\n\n  match ':controller/:action/:id/:user_id'\n\nTwo of these symbols are special: :controller maps to the name of a\ncontroller in your application, and :action maps to the name of an\naction within that controller. Anything other than :controller or\n:action will be available to the action as part of params.\n
mount ActionDispatch::Routing::Mapper::Base.mount(app, options = nil)\nMount a Rack-based application to be used within the application.\n\n  mount SomeRackApp, :at => "some_route"\n\nAlternatively:\n\n  mount(SomeRackApp => "some_route")\n\nAll mounted applications come with routing helpers to access them.\nThese are named after the class specified, so for the above example\nthe helper is either +some_rack_app_path+ or +some_rack_app_url+.\nTo customize this helper's name, use the +:as+ option:\n\n  mount(SomeRackApp => "some_route", :as => "exciting")\n\nThis will generate the +exciting_path+ and +exciting_url+ helpers\nwhich can be used to navigate to this mounted app.\n
root ActionDispatch::Routing::Mapper::Base.root(options = {})\nYou can specify what Rails should route "/" to with the root method:\n\n  root :to => 'pages#main'\n\nFor options, see the +match+ method's documentation, as +root+ uses it\ninternally.\n\nYou should put the root route at the top of <tt>config/routes.rb</tt>,\nbecause this means it will be matched first. As this is the most popular route\nof most Rails applications, this is beneficial.\n
delete ActionDispatch::Routing::Mapper::HttpHelpers.delete(*args, &block)\nDefine a route that only recognizes HTTP PUT.\nFor supported arguments, see +match+.\n\nExample:\n\ndelete 'broccoli', :to => 'food#broccoli'\n
get ActionDispatch::Routing::Mapper::HttpHelpers.get(*args, &block)\nDefine a route that only recognizes HTTP GET.\nFor supported arguments, see +match+.\n\nExample:\n\nget 'bacon', :to => 'food#bacon'\n
map_method ActionDispatch::Routing::Mapper::HttpHelpers.map_method(method, *args, &block)\n\n
post ActionDispatch::Routing::Mapper::HttpHelpers.post(*args, &block)\nDefine a route that only recognizes HTTP POST.\nFor supported arguments, see +match+.\n\nExample:\n\npost 'bacon', :to => 'food#bacon'\n
put ActionDispatch::Routing::Mapper::HttpHelpers.put(*args, &block)\nDefine a route that only recognizes HTTP PUT.\nFor supported arguments, see +match+.\n\nExample:\n\nput 'bacon', :to => 'food#bacon'\n
redirect ActionDispatch::Routing::Mapper::HttpHelpers.redirect(*args, &block)\nRedirect any path to another path:\n\n  match "/stories" => redirect("/posts")\n
constraints ActionDispatch::Routing::Mapper::Scoping.constraints(constraints = {})\n=== Parameter Restriction\nAllows you to constrain the nested routes based on a set of rules.\nFor instance, in order to change the routes to allow for a dot character in\nthe +id+ parameter:\n\n  constraints(:id => /\d+\.\d+) do\n    resources :posts\n  end\n\nNow routes such as +/posts/1+ will no longer be valid, but +/posts/1.1+\nwill be.\nThe +id+ parameter must match the constraint passed in for this example.\n\nYou may use this to also resrict other parameters:\n\n  resources :posts do\n    constraints(:post_id => /\d+\.\d+) do\n      resources :comments\n    end\n\n=== Restricting based on IP\n\nRoutes can also be constrained to an IP or a certain range of IP addresses:\n\n  constraints(:ip => /192.168.\d+.\d+/) do\n    resources :posts\n  end\n\nAny user connecting from the 192.168.* range will be able to see this resource,\nwhere as any user connecting outside of this range will be told there is no\nsuch route.\n\n=== Dynamic request matching\n\nRequests to routes can be constrained based on specific critera:\n\n   constraints(lambda { |req| req.env["HTTP_USER_AGENT"] =~ /iPhone/ }) do\n     resources :iphones\n   end\n\nYou are able to move this logic out into a class if it is too complex\nfor routes.\nThis class must have a +matches?+ method defined on it which either returns\n+true+\nif the user should be given access to that route, or +false+ if the user\nshould not.\n\n   class Iphone\n     def self.matches(request)\n       request.env["HTTP_USER_AGENT"] =~ /iPhone/\n     end\n   end\n\nAn expected place for this code would be +lib/constraints+.\n\nThis class is then used like this:\n\n   constraints(Iphone) do\n     resources :iphones\n   end\n
controller ActionDispatch::Routing::Mapper::Scoping.controller(controller, options={})\nScopes routes to a specific controller\n\nExample:\n  controller "food" do\n    match "bacon", :action => "bacon"\n  end\n
defaults ActionDispatch::Routing::Mapper::Scoping.defaults(defaults = {})\nAllows you to set default parameters for a route, such as this:\ndefaults :id => 'home' do\n  match 'scoped_pages/(:id)', :to => 'pages#show'\nend\nUsing this, the +:id+ parameter here will default to 'home'.\n
merge_as_scope ActionDispatch::Routing::Mapper::Scoping.merge_as_scope(parent, child)\n\n
merge_blocks_scope ActionDispatch::Routing::Mapper::Scoping.merge_blocks_scope(parent, child)\n\n
merge_constraints_scope ActionDispatch::Routing::Mapper::Scoping.merge_constraints_scope(parent, child)\n\n
merge_controller_scope ActionDispatch::Routing::Mapper::Scoping.merge_controller_scope(parent, child)\n\n
merge_defaults_scope ActionDispatch::Routing::Mapper::Scoping.merge_defaults_scope(parent, child)\n\n
merge_module_scope ActionDispatch::Routing::Mapper::Scoping.merge_module_scope(parent, child)\n\n
merge_options_scope ActionDispatch::Routing::Mapper::Scoping.merge_options_scope(parent, child)\n\n
merge_path_names_scope ActionDispatch::Routing::Mapper::Scoping.merge_path_names_scope(parent, child)\n\n
merge_path_scope ActionDispatch::Routing::Mapper::Scoping.merge_path_scope(parent, child)\n\n
merge_shallow_path_scope ActionDispatch::Routing::Mapper::Scoping.merge_shallow_path_scope(parent,\nchild)\n\n
merge_shallow_prefix_scope ActionDispatch::Routing::Mapper::Scoping.merge_shallow_prefix_scope(parent,\nchild)\n\n
merge_shallow_scope ActionDispatch::Routing::Mapper::Scoping.merge_shallow_scope(parent, child)\n\n
namespace ActionDispatch::Routing::Mapper::Scoping.namespace(path, options = {})\nScopes routes to a specific namespace. For example:\n\n  namespace :admin do\n    resources :posts\n  end\n\nThis generates the following routes:\n\n      admin_posts GET    /admin/posts(.:format)          {:action=>"index",\n      :controller=>"admin/posts"}\n      admin_posts POST   /admin/posts(.:format)          {:action=>"create",\n      :controller=>"admin/posts"}\n   new_admin_post GET    /admin/posts/new(.:format)      {:action=>"new",\n   :controller=>"admin/posts"}\n  edit_admin_post GET    /admin/posts/:id/edit(.:format) {:action=>"edit",\n  :controller=>"admin/posts"}\n       admin_post GET    /admin/posts/:id(.:format)      {:action=>"show",\n       :controller=>"admin/posts"}\n       admin_post PUT    /admin/posts/:id(.:format)      {:action=>"update",\n       :controller=>"admin/posts"}\n       admin_post DELETE /admin/posts/:id(.:format)      {:action=>"destroy",\n       :controller=>"admin/posts"}\n=== Supported options\n\nThe +:path+, +:as+, +:module+, +:shallow_path+ and +:shallow_prefix+ options\nall default to the name of the namespace.\n\n[:path]\n  The path prefix for the routes.\n\n    namespace :admin, :path => "sekret" do\n      resources :posts\n    end\n\n  All routes for the above +resources+ will be accessible through\n  +/sekret/posts+, rather than +/admin/posts+\n\n[:module]\n  The namespace for the controllers.\n\n    namespace :admin, :module => "sekret" do\n      resources :posts\n    end\n\n  The +PostsController+ here should go in the +Sekret+ namespace and so it\n  should be defined like this:\n\n    class Sekret::PostsController < ApplicationController\n code go here\n    end\n\n[:as]\n  Changes the name used in routing helpers for this namespace.\n\n    namespace :admin, :as => "sekret" do\n      resources :posts\n    end\n\nRouting helpers such as +admin_posts_path+ will now be +sekret_posts_path+.\n\n[:shallow_path]\n  See the +scope+ method.\n
override_keys ActionDispatch::Routing::Mapper::Scoping.override_keys(child)\n\n
scope ActionDispatch::Routing::Mapper::Scoping.scope(*args)\nUsed to scope a set of routes to particular constraints.\n\nTake the following route definition as an example:\n\n  scope :path => ":account_id", :as => "account" do\n    resources :projects\n  end\n\nThis generates helpers such as +account_projects_path+, just like +resources+\ndoes.\nThe difference here being that the routes generated are like /rails/projects/2,\nrather than /accounts/rails/projects/2.\n\n=== Supported options\n[:module]\n  If you want to route /posts (without the prefix /admin) to\n  Admin::PostsController, you could use\n\n    scope :module => "admin" do\n      resources :posts\n    end\n\n[:path]\n  If you want to prefix the route, you could use\n\n    scope :path => "/admin" do\n      resources :posts\n    end\n\n  This will prefix all of the +posts+ resource's requests with '/admin'\n\n[:as]\n Prefixes the routing helpers in this scope with the specified label.\n\n   scope :as => "sekret" do\n     resources :posts\n   end\n\nHelpers such as +posts_path+ will now be +sekret_posts_path+\n\n[:shallow_path]\n\n  Prefixes nested shallow routes with the specified path.\n\n  scope :shallow_path => "sekret" do\n    resources :posts do\n      resources :comments, :shallow => true\n    end\n\n  The +comments+ resource here will have the following routes generated for it:\n\n    post_comments    GET    /sekret/posts/:post_id/comments(.:format)\n    post_comments    POST   /sekret/posts/:post_id/comments(.:format)\n    new_post_comment GET    /sekret/posts/:post_id/comments/new(.:format)\n    edit_comment     GET    /sekret/comments/:id/edit(.:format)\n    comment          GET    /sekret/comments/:id(.:format)\n    comment          PUT    /sekret/comments/:id(.:format)\n    comment          DELETE /sekret/comments/:id(.:format)\n
scope_options ActionDispatch::Routing::Mapper::Scoping.scope_options()\n\n
action_options? ActionDispatch::Routing::Mapper::Resources.action_options?(options)\n\n
action_path ActionDispatch::Routing::Mapper::Resources.action_path(name, path = nil)\n\n
apply_common_behavior_for ActionDispatch::Routing::Mapper::Resources.apply_common_behavior_for(method,\nresources, options, &block)\n\n
canonical_action? ActionDispatch::Routing::Mapper::Resources.canonical_action?(action, flag)\n\n
collection ActionDispatch::Routing::Mapper::Resources.collection()\nTo add a route to the collection:\n\n  resources :photos do\n    collection do\n      get 'search'\n    end\n  end\n\nThis will enable Rails to recognize paths such as <tt>/photos/search</tt>\nwith GET, and route to the search action of PhotosController. It will also\ncreate the <tt>search_photos_url</tt> and <tt>search_photos_path</tt>\nroute helpers.\n
id_constraint ActionDispatch::Routing::Mapper::Resources.id_constraint()\n\n
id_constraint? ActionDispatch::Routing::Mapper::Resources.id_constraint?()\n\n
match ActionDispatch::Routing::Mapper::Resources.match(*args)\n\n
member ActionDispatch::Routing::Mapper::Resources.member()\nTo add a member route, add a member block into the resource block:\n\n  resources :photos do\n    member do\n      get 'preview'\n    end\n  end\n\nThis will recognize <tt>/photos/1/preview</tt> with GET, and route to the\npreview action of PhotosController. It will also create the\n<tt>preview_photo_url</tt> and <tt>preview_photo_path</tt> helpers.\n
name_for_action ActionDispatch::Routing::Mapper::Resources.name_for_action(as, action)\n\n
namespace ActionDispatch::Routing::Mapper::Resources.namespace(path, options = {})\nSee ActionDispatch::Routing::Mapper::Scoping#namespace\n
nested ActionDispatch::Routing::Mapper::Resources.nested()\n\n
nested_options ActionDispatch::Routing::Mapper::Resources.nested_options()\n\n
new ActionDispatch::Routing::Mapper::Resources.new()\n\n
path_for_action ActionDispatch::Routing::Mapper::Resources.path_for_action(action, path)\n\n
prefix_name_for_action ActionDispatch::Routing::Mapper::Resources.prefix_name_for_action(as, action)\n\n
resource ActionDispatch::Routing::Mapper::Resources.resource(*resources, &block)\nSometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, /profile always shows the\nprofile of the currently logged in user. In this case, you can use\na singular resource to map /profile (rather than /profile/:id) to\nthe show action:\n\n  resource :geocoder\n\ncreates six different routes in your application, all mapping to\nthe GeoCoders controller (note that the controller is named after\nthe plural):\n\n  GET     /geocoder/new\n  POST    /geocoder\n  GET     /geocoder\n  GET     /geocoder/edit\n  PUT     /geocoder\n  DELETE  /geocoder\n
resource_method_scope? ActionDispatch::Routing::Mapper::Resources.resource_method_scope?()\n\n
resource_scope ActionDispatch::Routing::Mapper::Resources.resource_scope(resource)\n\n
resource_scope? ActionDispatch::Routing::Mapper::Resources.resource_scope?()\n\n
resources ActionDispatch::Routing::Mapper::Resources.resources(*resources, &block)\nIn Rails, a resourceful route provides a mapping between HTTP verbs\nand URLs and controller actions. By convention, each action also maps\nto particular CRUD operations in a database. A single entry in the\nrouting file, such as\n\n  resources :photos\n\ncreates seven different routes in your application, all mapping to\nthe Photos controller:\n\n  GET     /photos/new\n  POST    /photos\n  GET     /photos/:id\n  GET     /photos/:id/edit\n  PUT     /photos/:id\n  DELETE  /photos/:id\n\nResources can also be nested infinitely by using this block syntax:\n\n  resources :photos do\n    resources :comments\n  end\n\nThis generates the following comments routes:\n\n  GET     /photos/:id/comments/new\n  POST    /photos/:id/comments\n  GET     /photos/:id/comments/:id\n  GET     /photos/:id/comments/:id/edit\n  PUT     /photos/:id/comments/:id\n  DELETE  /photos/:id/comments/:id\n\n=== Supported options\n[:path_names]\n  Allows you to change the paths of the seven default actions.\n  Paths not specified are not changed.\n\n    resources :posts, :path_names => { :new => "brand_new" }\n\n  The above example will now change /posts/new to /posts/brand_new\n\n[:module]\n  Set the module where the controller can be found. Defaults to nothing.\n\n    resources :posts, :module => "admin"\n\n  All requests to the posts resources will now go to +Admin::PostsController+.\n\n[:path]\n\n Set a path prefix for this resource.\n\n    resources :posts, :path => "admin"\n\n All actions for this resource will now be at +/admin/posts+.\n
resources_path_names ActionDispatch::Routing::Mapper::Resources.resources_path_names(options)\n\n
root ActionDispatch::Routing::Mapper::Resources.root(options={})\n\n
scope_action_options ActionDispatch::Routing::Mapper::Resources.scope_action_options()\n\n
scope_action_options? ActionDispatch::Routing::Mapper::Resources.scope_action_options?()\n\n
shallow ActionDispatch::Routing::Mapper::Resources.shallow()\n\n
shallow? ActionDispatch::Routing::Mapper::Resources.shallow?()\n\n
shallow_scoping? ActionDispatch::Routing::Mapper::Resources.shallow_scoping?()\n\n
with_exclusive_scope ActionDispatch::Routing::Mapper::Resources.with_exclusive_scope()\n\n
with_scope_level ActionDispatch::Routing::Mapper::Resources.with_scope_level(kind, resource\n= parent_resource)\n\n
match ActionDispatch::Routing::Mapper::Shorthand.match(*args)\n\n
action_prefix ActionDispatch::Routing::PolymorphicRoutes.action_prefix(options)\n\n
build_named_route_call ActionDispatch::Routing::PolymorphicRoutes.build_named_route_call(records,\ninflection, options = {})\n\n
extract_record ActionDispatch::Routing::PolymorphicRoutes.extract_record(record_or_hash_or_array)\n\n
polymorphic_path ActionDispatch::Routing::PolymorphicRoutes.polymorphic_path(record_or_hash_or_array,\noptions = {})\nReturns the path component of a URL for the given record. It uses\n<tt>polymorphic_url</tt> with <tt>:routing_type => :path</tt>.\n
polymorphic_url ActionDispatch::Routing::PolymorphicRoutes.polymorphic_url(record_or_hash_or_array,\noptions = {})\nConstructs a call to a named RESTful route for the given record and returns the\nresulting URL string. For example:\n calls post_url(post)\n  polymorphic_url(post) # => "http://example.com/posts/1"\n  polymorphic_url([blog, post]) # => "http://example.com/blogs/1/posts/1"\n  polymorphic_url([:admin, blog, post]) # =>\n  "http://example.com/admin/blogs/1/posts/1"\n  polymorphic_url([user, :blog, post]) # =>\n  "http://example.com/users/1/blog/posts/1"\n  polymorphic_url(Comment) # => "http://example.com/comments"\n\n==== Options\n\n* <tt>:action</tt> - Specifies the action prefix for the named route:\n  <tt>:new</tt> or <tt>:edit</tt>. Default is no prefix.\n* <tt>:routing_type</tt> - Allowed values are <tt>:path</tt> or <tt>:url</tt>.\n  Default is <tt>:url</tt>.\n\n==== Examples\n an Article record\n  polymorphic_url(record)  # same as article_url(record)\n a Comment record\n  polymorphic_url(record)  # same as comment_url(record)\n it recognizes new records and maps to the collection\n  record = Comment.new\n  polymorphic_url(record)  # same as comments_url()\n the class of a record will also map to the collection\n  polymorphic_url(Comment) # same as comments_url()\n
routing_type ActionDispatch::Routing::PolymorphicRoutes.routing_type(options)\n\n
url_for ActionDispatch::Routing::UrlFor.url_for(options = nil)\nGenerate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb.  The following options are supported:\n\n* <tt>:only_path</tt> - If true, the relative url is returned. Defaults\nto +false+.\n* <tt>:protocol</tt> - The protocol to connect to. Defaults to 'http'.\n* <tt>:host</tt> - Specifies the host the link should be targeted at.\n  If <tt>:only_path</tt> is false, this option must be\n  provided either explicitly, or via +default_url_options+.\n* <tt>:port</tt> - Optionally specify the port to connect to.\n* <tt>:anchor</tt> - An anchor name to be appended to the path.\n* <tt>:trailing_slash</tt> - If true, adds a trailing slash, as in\n"/archive/2009/"\n\nAny other key (<tt>:controller</tt>, <tt>:action</tt>, etc.) given to\n+url_for+ is forwarded to the Routes module.\n\nExamples:\n\n   url_for :controller => 'tasks', :action => 'testing', :host=>'somehost.org',\n   :port=>'8080'    # => 'http://somehost.org:8080/tasks/testing'\n   url_for :controller => 'tasks', :action => 'testing', :host=>'somehost.org',\n   :anchor => 'ok', :only_path => true    # => '/tasks/testing#ok'\n   url_for :controller => 'tasks', :action => 'testing', :trailing_slash=>true\n   # => 'http://somehost.org/tasks/testing/'\n   url_for :controller => 'tasks', :action => 'testing', :host=>'somehost.org',\n   :number => '33'  # => 'http://somehost.org/tasks/testing?number=33'\n
url_options ActionDispatch::Routing::UrlFor.url_options()\n\n
assigns ActionDispatch::TestProcess.assigns(key = nil)\n\n
cookies ActionDispatch::TestProcess.cookies()\n\n
fixture_file_upload ActionDispatch::TestProcess.fixture_file_upload(path, mime_type = nil,\nbinary = false)\nShortcut for\n<tt>ARack::Test::UploadedFile.new(ActionController::TestCase.fixture_path +\npath, type)</tt>:\n\n  post :change_avatar, :avatar => fixture_file_upload('/files/spongebob.png',\n  'image/png')\n\nTo upload binary files on Windows, pass <tt>:binary</tt> as the last parameter.\nThis will not affect other platforms:\n\n  post :change_avatar, :avatar => fixture_file_upload('/files/spongebob.png',\n  'image/png', :binary)\n
flash ActionDispatch::TestProcess.flash()\n\n
redirect_to_url ActionDispatch::TestProcess.redirect_to_url()\n\n
session ActionDispatch::TestProcess.session()\n\n
delete ActionDispatch::Integration::RequestHelpers.delete(path, parameters = nil,\nheaders = nil)\nPerforms a DELETE request with the given parameters. See get() for\nmore details.\n
delete_via_redirect ActionDispatch::Integration::RequestHelpers.delete_via_redirect(path,\nparameters = nil, headers = nil)\nPerforms a DELETE request, following any subsequent redirect.\nSee +request_via_redirect+ for more information.\n
follow_redirect! ActionDispatch::Integration::RequestHelpers.follow_redirect!()\nFollow a single redirect response. If the last response was not a\nredirect, an exception will be raised. Otherwise, the redirect is\nperformed on the location header.\n
get ActionDispatch::Integration::RequestHelpers.get(path, parameters = nil,\nheaders = nil)\nPerforms a GET request with the given parameters.\n\n- +path+: The URI (as a String) on which you want to perform a GET\n  request.\n- +parameters+: The HTTP parameters that you want to pass. This may\n  be +nil+,\n  a Hash, or a String that is appropriately encoded\n  (<tt>application/x-www-form-urlencoded</tt> or\n  <tt>multipart/form-data</tt>).\n- +headers+: Additional HTTP headers to pass, as a Hash. The keys will\n  automatically be upcased, with the prefix 'HTTP_' added if needed.\n\nThis method returns an Response object, which one can use to\ninspect the details of the response. Furthermore, if this method was\ncalled from an ActionDispatch::IntegrationTest object, then that\nobject's <tt>@response</tt> instance variable will point to the same\nresponse object.\n\nYou can also perform POST, PUT, DELETE, and HEAD requests with +post+,\n+put+, +delete+, and +head+.\n
get_via_redirect ActionDispatch::Integration::RequestHelpers.get_via_redirect(path, parameters\n= nil, headers = nil)\nPerforms a GET request, following any subsequent redirect.\nSee +request_via_redirect+ for more information.\n
head ActionDispatch::Integration::RequestHelpers.head(path, parameters = nil,\nheaders = nil)\nPerforms a HEAD request with the given parameters. See get() for more\ndetails.\n
post ActionDispatch::Integration::RequestHelpers.post(path, parameters = nil,\nheaders = nil)\nPerforms a POST request with the given parameters. See get() for more\ndetails.\n
post_via_redirect ActionDispatch::Integration::RequestHelpers.post_via_redirect(path, parameters\n= nil, headers = nil)\nPerforms a POST request, following any subsequent redirect.\nSee +request_via_redirect+ for more information.\n
put ActionDispatch::Integration::RequestHelpers.put(path, parameters = nil,\nheaders = nil)\nPerforms a PUT request with the given parameters. See get() for more\ndetails.\n
put_via_redirect ActionDispatch::Integration::RequestHelpers.put_via_redirect(path, parameters\n= nil, headers = nil)\nPerforms a PUT request, following any subsequent redirect.\nSee +request_via_redirect+ for more information.\n
request_via_redirect ActionDispatch::Integration::RequestHelpers.request_via_redirect(http_method,\npath, parameters = nil, headers = nil)\nPerforms a request using the specified method, following any subsequent\nredirect. Note that the redirects are followed until the response is\nnot a redirect--this means you may run into an infinite loop if your\nredirect loops back to itself.\n
xhr ActionDispatch::Integration::RequestHelpers.xhr(request_method, path,\nparameters = nil, headers = nil)\n\n
xml_http_request ActionDispatch::Integration::RequestHelpers.xml_http_request(request_method,\npath, parameters = nil, headers = nil)\nPerforms an XMLHttpRequest request with the given parameters, mirroring\na request from the Prototype library.\n\nThe request_method is :get, :post, :put, :delete or :head; the\nparameters are +nil+, a hash, or a url-encoded or multipart string;\nthe headers are a hash.  Keys are automatically upcased and prefixed\nwith 'HTTP_' if not already.\n
app ActionDispatch::Integration::Runner.app()\n\n
method_missing ActionDispatch::Integration::Runner.method_missing(sym, *args, &block)\nDelegate unhandled messages to the current session instance.\n
open_session ActionDispatch::Integration::Runner.open_session(app = nil)\nOpen a new session instance. If a block is given, the new session is\nyielded to the block before being returned.\n\n  session = open_session do |sess|\n    sess.extend(CustomAssertions)\n  end\n\nBy default, a single session is automatically created for you, but you\ncan use this method to open multiple sessions that ought to be tested\nsimultaneously.\n
reset! ActionDispatch::Integration::Runner.reset!()\nReset the current session. This is useful for testing multiple sessions\nin a single test case.\n
url_options ActionDispatch::Integration::Runner.url_options()\n\n
assigns ActionDispatch::TestResponse::DeprecatedHelpers.assigns()\n\n
binary_content ActionDispatch::TestResponse::DeprecatedHelpers.binary_content()\nReturns binary content (downloadable file), converted to a String\n
flash ActionDispatch::TestResponse::DeprecatedHelpers.flash()\nA shortcut to the flash. Returns an empty hash if no session flash exists.\n
has_flash? ActionDispatch::TestResponse::DeprecatedHelpers.has_flash?()\nDo we have a flash?\n
has_flash_object? ActionDispatch::TestResponse::DeprecatedHelpers.has_flash_object?(name=nil)\nDoes the specified flash object exist?\n
has_flash_with_contents? ActionDispatch::TestResponse::DeprecatedHelpers.has_flash_with_contents?()\nDo we have a flash that has contents?\n
has_session_object? ActionDispatch::TestResponse::DeprecatedHelpers.has_session_object?(name=nil)\nDoes the specified object exist in the session?\n
has_template_object? ActionDispatch::TestResponse::DeprecatedHelpers.has_template_object?(name=nil)\nDoes the specified template object exist?\n
layout ActionDispatch::TestResponse::DeprecatedHelpers.layout()\n\n
redirect_url_match? ActionDispatch::TestResponse::DeprecatedHelpers.redirect_url_match?(pattern)\n\n
redirected_to ActionDispatch::TestResponse::DeprecatedHelpers.redirected_to()\n\n
rendered ActionDispatch::TestResponse::DeprecatedHelpers.rendered()\nReturns the template of the file which was used to\nrender this response (or nil)\n
session ActionDispatch::TestResponse::DeprecatedHelpers.session()\n\n
template ActionDispatch::TestResponse::DeprecatedHelpers.template()\n\n
template_objects ActionDispatch::TestResponse::DeprecatedHelpers.template_objects()\nA shortcut to the template.assigns\n
assert_generates ActionDispatch::Assertions::RoutingAssertions.assert_generates(expected_path,\noptions, defaults={}, extras = {}, message=nil)\nAsserts that the provided options can be used to generate the provided path.\nThis is the inverse of +assert_recognizes+.\nThe +extras+ parameter is used to tell the request the names and values of\nadditional request parameters that would be in\na query string. The +message+ parameter allows you to specify a custom error\nmessage for assertion failures.\n\nThe +defaults+ parameter is unused.\n\n==== Examples\n Asserts that the default action is generated for a route with no action\n  assert_generates "/items", :controller => "items", :action => "index"\n Tests that the list action is properly routed\n  assert_generates "/items/list", :controller => "items", :action => "list"\n Tests the generation of a route with a parameter\n  assert_generates "/items/list/1", { :controller => "items", :action =>\n  "list", :id => "1" }\n Asserts that the generated route gives us our custom route\n  assert_generates "changesets/12", { :controller => 'scm', :action =>\n  'show_diff', :revision => "12" }\n
assert_recognizes ActionDispatch::Assertions::RoutingAssertions.assert_recognizes(expected_options,\npath, extras={}, message=nil)\nAsserts that the routing of the given +path+ was handled correctly and that\nthe parsed options (given in the +expected_options+ hash)\nmatch +path+.  Basically, it asserts that \Rails recognizes the route given\nby +expected_options+.\n\nPass a hash in the second argument (+path+) to specify the request method.\nThis is useful for routes\nrequiring a specific HTTP method.  The hash should contain a :path with the\nincoming request path\nand a :method containing the required HTTP verb.\n assert that POSTing to /items will call the create action on ItemsController\n  assert_recognizes({:controller => 'items', :action => 'create'}, {:path =>\n  'items', :method => :post})\n\nYou can also pass in +extras+ with a hash containing URL parameters that\nwould normally be in the query string.  This can be used\nto assert that values in the query string string will end up in the params\nhash correctly.  To test query strings you must use the\nextras argument, appending the query string on the path directly will not work.\nFor example:\n assert that a path of '/items/list/1?view=print' returns the correct options\n  assert_recognizes({:controller => 'items', :action => 'list', :id =>\n  '1', :view => 'print'}, 'items/list/1', { :view => "print" })\n\nThe +message+ parameter allows you to pass in an error message that is\ndisplayed upon failure.\n\n==== Examples\n Check the default route (i.e., the index action)\n  assert_recognizes({:controller => 'items', :action => 'index'}, 'items')\n Test a specific action\n  assert_recognizes({:controller => 'items', :action => 'list'}, 'items/list')\n Test an action with a parameter\n  assert_recognizes({:controller => 'items', :action => 'destroy', :id =>\n  '1'}, 'items/destroy/1')\n Test a custom route\n  assert_recognizes({:controller => 'items', :action => 'show', :id => '1'},\n  'view/item1')\n Check a Simply RESTful generated route\n  assert_recognizes list_items_url, 'items/list'\n
assert_routing ActionDispatch::Assertions::RoutingAssertions.assert_routing(path, options,\ndefaults={}, extras={}, message=nil)\nAsserts that path and options match both ways; in other words, it verifies\nthat <tt>path</tt> generates\n<tt>options</tt> and then that <tt>options</tt> generates <tt>path</tt>.\nThis essentially combines +assert_recognizes+\nand +assert_generates+ into one step.\n\nThe +extras+ hash allows you to specify options that would normally be\nprovided as a query string to the action.  The\n+message+ parameter allows you to specify a custom error message to display\nupon failure.\n\n==== Examples\n Assert a basic route: a controller with the default action (index)\n assert_routing '/home', :controller => 'home', :action => 'index'\n Test a route generated with a specific controller, action, and parameter (id)\n assert_routing '/entries/show/23', :controller => 'entries', :action =>\n 'show', :id => 23\n Assert a basic route (controller + default action), with an error message\n if it fails\n assert_routing '/store', { :controller => 'store', :action => 'index' },\n {}, {}, 'Route for store index not generated properly'\n Tests a route, providing a defaults hash\n assert_routing 'controller/action/9', {:id => "9", :item => "square"},\n {:controller => "controller", :action => "action"}, {}, {:item => "square"}\n Tests a route with a HTTP method\n assert_routing({ :method => 'put', :path => '/product/321' }, { :controller =>\n "product", :action => "update", :id => "321" })\n
method_missing ActionDispatch::Assertions::RoutingAssertions.method_missing(selector,\n*args, &block)\nROUTES TODO: These assertions should really work in an integration context\n
recognized_request_for ActionDispatch::Assertions::RoutingAssertions.recognized_request_for(path)\nRecognizes the route for a given path.\n
with_routing ActionDispatch::Assertions::RoutingAssertions.with_routing()\nA helper to make it easier to test different route configurations.\nThis method temporarily replaces @routes\nwith a new RouteSet instance.\n\nThe new instance is yielded to the passed block. Typically the block\nwill create some routes using <tt>map.draw { map.connect ... }</tt>:\n\n  with_routing do |set|\n    set.draw do |map|\n      map.connect ':controller/:action/:id'\n        assert_equal(\n          ['/content/10/show', {}],\n          map.generate(:controller => 'content', :id => 10, :action => 'show')\n      end\n    end\n  end\n
assert_dom_equal ActionDispatch::Assertions::DomAssertions.assert_dom_equal(expected, actual,\nmessage = "")\n\Test two HTML strings for equivalency (e.g., identical up to reordering\nof attributes)\n\n==== Examples\n assert that the referenced method generates the appropriate HTML string\n  assert_dom_equal '<a href="http://www.example.com">Apples</a>',\n  link_to("Apples", "http://www.example.com")\n
assert_dom_not_equal ActionDispatch::Assertions::DomAssertions.assert_dom_not_equal(expected,\nactual, message = "")\nThe negated form of +assert_dom_equivalent+.\n\n==== Examples\n assert that the referenced method does not generate the specified HTML string\n  assert_dom_not_equal '<a href="http://www.example.com">Apples</a>',\n  link_to("Oranges", "http://www.example.com")\n
assert_no_tag ActionDispatch::Assertions::TagAssertions.assert_no_tag(*opts)\nIdentical to +assert_tag+, but asserts that a matching tag does _not_\nexist. (See +assert_tag+ for a full discussion of the syntax.)\n\n=== Examples\n Assert that there is not a "div" containing a "p"\n  assert_no_tag :tag => "div", :descendant => { :tag => "p" }\n Assert that an unordered list is empty\n  assert_no_tag :tag => "ul", :descendant => { :tag => "li" }\n Assert that there is not a "p" tag with between 1 to 3 "img" tags\n as immediate children\n  assert_no_tag :tag => "p",\n             :children => { :count => 1..3, :only => { :tag => "img" } }\n
assert_tag ActionDispatch::Assertions::TagAssertions.assert_tag(*opts)\nAsserts that there is a tag/node/element in the body of the response\nthat meets all of the given conditions. The +conditions+ parameter must\nbe a hash of any of the following keys (all are optional):\n\n* <tt>:tag</tt>: the node type must match the corresponding value\n* <tt>:attributes</tt>: a hash. The node's attributes must match the\n  corresponding values in the hash.\n* <tt>:parent</tt>: a hash. The node's parent must match the\n  corresponding hash.\n* <tt>:child</tt>: a hash. At least one of the node's immediate children\n  must meet the criteria described by the hash.\n* <tt>:ancestor</tt>: a hash. At least one of the node's ancestors must\n  meet the criteria described by the hash.\n* <tt>:descendant</tt>: a hash. At least one of the node's descendants\n  must meet the criteria described by the hash.\n* <tt>:sibling</tt>: a hash. At least one of the node's siblings must\n  meet the criteria described by the hash.\n* <tt>:after</tt>: a hash. The node must be after any sibling meeting\n  the criteria described by the hash, and at least one sibling must match.\n* <tt>:before</tt>: a hash. The node must be before any sibling meeting\n  the criteria described by the hash, and at least one sibling must match.\n* <tt>:children</tt>: a hash, for counting children of a node. Accepts\n  the keys:\n  * <tt>:count</tt>: either a number or a range which must equal (or\n    include) the number of children that match.\n  * <tt>:less_than</tt>: the number of matching children must be less\n    than this number.\n  * <tt>:greater_than</tt>: the number of matching children must be\n    greater than this number.\n  * <tt>:only</tt>: another hash consisting of the keys to use\n    to match on the children, and only matching children will be\n    counted.\n* <tt>:content</tt>: the textual content of the node must match the\n  given value. This will not match HTML tags in the body of a\n  tag--only text.\n\nConditions are matched using the following algorithm:\n\n* if the condition is a string, it must be a substring of the value.\n* if the condition is a regexp, it must match the value.\n* if the condition is a number, the value must match number.to_s.\n* if the condition is +true+, the value must not be +nil+.\n* if the condition is +false+ or +nil+, the value must be +nil+.\n\n=== Examples\n Assert that there is a "span" tag\n  assert_tag :tag => "span"\n Assert that there is a "span" tag with id="x"\n  assert_tag :tag => "span", :attributes => { :id => "x" }\n Assert that there is a "span" tag using the short-hand\n  assert_tag :span\n Assert that there is a "span" tag with id="x" using the short-hand\n  assert_tag :span, :attributes => { :id => "x" }\n Assert that there is a "span" inside of a "div"\n  assert_tag :tag => "span", :parent => { :tag => "div" }\n Assert that there is a "span" somewhere inside a table\n  assert_tag :tag => "span", :ancestor => { :tag => "table" }\n Assert that there is a "span" with at least one "em" child\n  assert_tag :tag => "span", :child => { :tag => "em" }\n Assert that there is a "span" containing a (possibly nested)\n "strong" tag.\n  assert_tag :tag => "span", :descendant => { :tag => "strong" }\n Assert that there is a "span" containing between 2 and 4 "em" tags\n as immediate children\n  assert_tag :tag => "span",\n             :children => { :count => 2..4, :only => { :tag => "em" } }\n Get funky: assert that there is a "div", with an "ul" ancestor\n and an "li" parent (with "class" = "enum"), and containing a\n "span" descendant that contains text matching /hello world/\n  assert_tag :tag => "div",\n             :ancestor => { :tag => "ul" },\n             :parent => { :tag => "li",\n                          :attributes => { :class => "enum" } },\n             :descendant => { :tag => "span",\n                              :child => /hello world/ }\n\n<b>Please note</b>: +assert_tag+ and +assert_no_tag+ only work\nwith well-formed XHTML. They recognize a few tags as implicitly self-closing\n(like br and hr and such) but will not work correctly with tags\nthat allow optional closing tags (p, li, td). <em>You must explicitly\nclose all of your tags to use these assertions.</em>\n
find_all_tag ActionDispatch::Assertions::TagAssertions.find_all_tag(conditions)\n\n
find_tag ActionDispatch::Assertions::TagAssertions.find_tag(conditions)\n\n
html_document ActionDispatch::Assertions::TagAssertions.html_document()\n\n
assert_select ActionDispatch::Assertions::SelectorAssertions.assert_select(*args, &block)\nAn assertion that selects elements and makes one or more equality tests.\n\nIf the first argument is an element, selects all matching elements\nstarting from (and including) that element and all its children in\ndepth-first order.\n\nIf no element if specified, calling +assert_select+ selects from the\nresponse HTML unless +assert_select+ is called from within an +assert_select+\nblock.\n\nWhen called with a block +assert_select+ passes an array of selected elements\nto the block. Calling +assert_select+ from the block, with no element\nspecified,\nruns the assertion on the complete set of elements selected by the enclosing\nassertion.\nAlternatively the array may be iterated through so that +assert_select+\ncan be called\nseparately for each element.\n\n\n==== Example\nIf the response contains two ordered lists, each with four list elements then:\n  assert_select "ol" do |elements|\n    elements.each do |element|\n      assert_select element, "li", 4\n    end\n  end\n\nwill pass, as will:\n  assert_select "ol" do\n    assert_select "li", 8\n  end\n\nThe selector may be a CSS selector expression (String), an expression\nwith substitution values, or an HTML::Selector object.\n\n=== Equality Tests\n\nThe equality test may be one of the following:\n* <tt>true</tt> - Assertion is true if at least one element selected.\n* <tt>false</tt> - Assertion is true if no element selected.\n* <tt>String/Regexp</tt> - Assertion is true if the text value of at least\n  one element matches the string or regular expression.\n* <tt>Integer</tt> - Assertion is true if exactly that number of\n  elements are selected.\n* <tt>Range</tt> - Assertion is true if the number of selected\n  elements fit the range.\nIf no equality test specified, the assertion is true if at least one\nelement selected.\n\nTo perform more than one equality tests, use a hash with the following keys:\n* <tt>:text</tt> - Narrow the selection to elements that have this text\n  value (string or regexp).\n* <tt>:html</tt> - Narrow the selection to elements that have this HTML\n  content (string or regexp).\n* <tt>:count</tt> - Assertion is true if the number of selected elements\n  is equal to this value.\n* <tt>:minimum</tt> - Assertion is true if the number of selected\n  elements is at least this value.\n* <tt>:maximum</tt> - Assertion is true if the number of selected\n  elements is at most this value.\n\nIf the method is called with a block, once all equality tests are\nevaluated the block is called with an array of all matched elements.\n\n==== Examples\n At least one form element\n  assert_select "form"\n Form element includes four input fields\n  assert_select "form input", 4\n Page title is "Welcome"\n  assert_select "title", "Welcome"\n Page title is "Welcome" and there is only one title element\n  assert_select "title", {:count=>1, :text=>"Welcome"},\n      "Wrong title or more than one title element"\n Page contains no forms\n  assert_select "form", false, "This page must contain no forms"\n Test the content and style\n  assert_select "body div.header ul.menu"\n Use substitution values\n  assert_select "ol>li#?", /item-\d+/\n All input fields in the form have a name\n  assert_select "form input" do\n    assert_select "[name=?]", /.+/  # Not empty\n  end\n
assert_select_email ActionDispatch::Assertions::SelectorAssertions.assert_select_email(&block)\nExtracts the body of an email and runs nested assertions on it.\n\nYou must enable deliveries for this assertion to work, use:\n  ActionMailer::Base.perform_deliveries = true\n\n==== Examples\n\n assert_select_email do\n   assert_select "h1", "Email alert"\n end\n\n assert_select_email do\n   items = assert_select "ol>li"\n   items.each do\n Work with items here...\n   end\n end\n
assert_select_encoded ActionDispatch::Assertions::SelectorAssertions.assert_select_encoded(element =\nnil, &block)\nExtracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n\nYou typically call this method within another assertion to operate on\nall currently selected elements. You can also pass an element or array\nof elements.\n\nThe content of each element is un-encoded, and wrapped in the root\nelement +encoded+. It then calls the block with all un-encoded elements.\n\n==== Examples\n Selects all bold tags from within the title of an ATOM feed's entries\n (perhaps to nab a section name prefix)\n  assert_select_feed :atom, 1.0 do\n Select each entry item and then the title item\n    assert_select "entry>title" do\n Run assertions on the encoded title elements\n      assert_select_encoded do\n        assert_select "b"\n      end\n    end\n  end\n Selects all paragraph tags from within the description of an RSS feed\n  assert_select_feed :rss, 2.0 do\n Select description element of each feed item.\n    assert_select "channel>item>description" do\n Run assertions on the encoded elements.\n      assert_select_encoded do\n        assert_select "p"\n      end\n    end\n  end\n
assert_select_rjs ActionDispatch::Assertions::SelectorAssertions.assert_select_rjs(*args, &block)\nSelects content from the RJS response.\n\n=== Narrowing down\n\nWith no arguments, asserts that one or more elements are updated or\ninserted by RJS statements.\n\nUse the +id+ argument to narrow down the assertion to only statements\nthat update or insert an element with that identifier.\n\nUse the first argument to narrow down assertions to only statements\nof that type. Possible values are <tt>:replace</tt>, <tt>:replace_html</tt>,\n<tt>:show</tt>, <tt>:hide</tt>, <tt>:toggle</tt>, <tt>:remove</tta>,\n<tt>:insert_html</tt> and <tt>:redirect</tt>.\n\nUse the argument <tt>:insert</tt> followed by an insertion position to narrow\ndown the assertion to only statements that insert elements in that\nposition. Possible values are <tt>:top</tt>, <tt>:bottom</tt>, <tt>:before</tt>\nand <tt>:after</tt>.\n\nUse the argument <tt>:redirect</tt> followed by a path to check that an\nstatement\nwhich redirects to the specified path is generated.\n\nUsing the <tt>:remove</tt> statement, you will be able to pass a block,\nbut it will\nbe ignored as there is no HTML passed for this statement.\n\n=== Using blocks\n\nWithout a block, +assert_select_rjs+ merely asserts that the response\ncontains one or more RJS statements that replace or update content.\n\nWith a block, +assert_select_rjs+ also selects all elements used in\nthese statements and passes them to the block. Nested assertions are\nsupported.\n\nCalling +assert_select_rjs+ with no arguments and using nested asserts\nasserts that the HTML content is returned by one or more RJS statements.\nUsing +assert_select+ directly makes the same assertion on the content,\nbut without distinguishing whether the content is returned in an HTML\nor JavaScript.\n\n==== Examples\n Replacing the element foo.\n page.replace 'foo', ...\n  assert_select_rjs :replace, "foo"\n Replacing with the chained RJS proxy.\n page[:foo].replace ...\n  assert_select_rjs :chained_replace, 'foo'\n Inserting into the element bar, top position.\n  assert_select_rjs :insert, :top, "bar"\n Remove the element bar\n  assert_select_rjs :remove, "bar"\n Changing the element foo, with an image.\n  assert_select_rjs "foo" do\n    assert_select "img[src=/images/logo.gif""\n  end\n RJS inserts or updates a list with four items.\n  assert_select_rjs do\n    assert_select "ol>li", 4\n  end\n The same, but shorter.\n  assert_select "ol>li", 4\n Checking for a redirect.\n  assert_select_rjs :redirect, root_path\n
css_select ActionDispatch::Assertions::SelectorAssertions.css_select(*args)\nSelect and return all matching elements.\n\nIf called with a single argument, uses that argument as a selector\nto match all elements of the current page. Returns an empty array\nif no match is found.\n\nIf called with two arguments, uses the first argument as the base\nelement and the second argument as the selector. Attempts to match the\nbase element and any of its children. Returns an empty array if no\nmatch is found.\n\nThe selector may be a CSS selector expression (String), an expression\nwith substitution values (Array) or an HTML::Selector object.\n\n==== Examples\n Selects all div tags\n  divs = css_select("div")\n Selects all paragraph tags and does something interesting\n  pars = css_select("p")\n  pars.each do |par|\n Do something fun with paragraphs here...\n  end\n Selects all list items in unordered lists\n  items = css_select("ul>li")\n Selects all form tags and then all inputs inside the form\n  forms = css_select("form")\n  forms.each do |form|\n    inputs = css_select(form, "input")\n    ...\n  end\n
response_from_page_or_rjs ActionDispatch::Assertions::SelectorAssertions.response_from_page_or_rjs()\n+assert_select+ and +css_select+ call this to obtain the content in the HTML\npage, or from all the RJS statements, depending on the type of response.\n
unescape_rjs ActionDispatch::Assertions::SelectorAssertions.unescape_rjs(rjs_string)\nUnescapes a RJS string.\n
assert_redirected_to ActionDispatch::Assertions::ResponseAssertions.assert_redirected_to(options =\n{}, message=nil)\nAssert that the redirection options passed in match those of the redirect\ncalled in the latest action.\nThis match can be partial, such that <tt>assert_redirected_to(:controller =>\n"weblog")</tt> will also\nmatch the redirection of <tt>redirect_to(:controller => "weblog", :action =>\n"show")</tt> and so on.\n\n==== Examples\n assert that the redirection was to the "index" action on the WeblogController\n  assert_redirected_to :controller => "weblog", :action => "index"\n assert that the redirection was to the named route login_url\n  assert_redirected_to login_url\n assert that the redirection was to the url for @customer\n  assert_redirected_to @customer\n
assert_response ActionDispatch::Assertions::ResponseAssertions.assert_response(type, message\n= nil)\nAsserts that the response is one of the following types:\n\n* <tt>:success</tt>   - Status code was 200\n* <tt>:redirect</tt>  - Status code was in the 300-399 range\n* <tt>:missing</tt>   - Status code was 404\n* <tt>:error</tt>     - Status code was in the 500-599 range\n\nYou can also pass an explicit status number like <tt>assert_response(501)</tt>\nor its symbolic equivalent <tt>assert_response(:not_implemented)</tt>.\nSee ActionDispatch::StatusCodes for a full list.\n\n==== Examples\n assert that the response was a redirection\n  assert_response :redirect\n assert that the response code was status code 401 (unauthorized)\n  assert_response 401\n
normalize_argument_to_redirection ActionDispatch::Assertions::ResponseAssertions.normalize_argument_to_redirection(fragment)\n\n
parameterize ActionDispatch::Assertions::ResponseAssertions.parameterize(value)\nProxy to to_param if the object will respond to it.\n
validate_request! ActionDispatch::Assertions::ResponseAssertions.validate_request!()\n\n
env_filter ActionDispatch::Http::FilterParameters.env_filter()\n\n
filtered_env ActionDispatch::Http::FilterParameters.filtered_env()\nReturn a hash of request.env with all sensitive data replaced.\n
filtered_parameters ActionDispatch::Http::FilterParameters.filtered_parameters()\nReturn a hash of parameters with all sensitive data replaced.\n
parameter_filter ActionDispatch::Http::FilterParameters.parameter_filter()\n\n
parameter_filter_for ActionDispatch::Http::FilterParameters.parameter_filter_for(filters)\n\n
encode_params ActionDispatch::Http::Parameters.encode_params(params)\nTODO: Validate that the characters are UTF-8. If they aren't,\nyou'll get a weird error down the road, but our form handling\nshould really prevent that from happening\n
normalize_parameters ActionDispatch::Http::Parameters.normalize_parameters(value)\nConvert nested Hash to HashWithIndifferentAccess\n
parameters ActionDispatch::Http::Parameters.parameters()\nReturns both GET and POST \parameters in a single hash.\n
params ActionDispatch::Http::Parameters.params()\n\n
path_parameters ActionDispatch::Http::Parameters.path_parameters()\nReturns a hash with the \parameters used to form the \path of the request.\nReturned hash keys are strings:\n\n  {'action' => 'my_action', 'controller' => 'my_controller'}\n\nSee <tt>symbolized_path_parameters</tt> for symbolized keys.\n
symbolized_path_parameters ActionDispatch::Http::Parameters.symbolized_path_parameters()\nThe same as <tt>path_parameters</tt> with explicitly symbolized keys.\n
accepts ActionDispatch::Http::MimeNegotiation.accepts()\nReturns the accepted MIME type for the request.\n
content_mime_type ActionDispatch::Http::MimeNegotiation.content_mime_type()\nThe MIME type of the HTTP request, such as Mime::XML.\n\nFor backward compatibility, the post \format is extracted from the\nX-Post-Data-Format HTTP header if present.\n
content_type ActionDispatch::Http::MimeNegotiation.content_type()\n\n
format ActionDispatch::Http::MimeNegotiation.format(view_path = [])\nReturns the MIME type for the \format used in the request.\n\n  GET /posts/5.xml   | request.format => Mime::XML\n  GET /posts/5.xhtml | request.format => Mime::HTML\n  GET /posts/5       | request.format => Mime::HTML or MIME::JS, or\n  request.accepts.first\n
format= ActionDispatch::Http::MimeNegotiation.format=(extension)\nSets the \format by string extension, which can be used to force custom formats\nthat are not controlled by the extension.\n\n  class ApplicationController < ActionController::Base\n    before_filter :adjust_format_for_iphone\n\n    private\n      def adjust_format_for_iphone\n        request.format = :iphone if request.env["HTTP_USER_AGENT"][/iPhone/]\n      end\n  end\n
formats ActionDispatch::Http::MimeNegotiation.formats()\n\n
negotiate_mime ActionDispatch::Http::MimeNegotiation.negotiate_mime(order)\nReceives an array of mimes and return the first user sent mime that\nmatches the order array.\n
etag_matches? ActionDispatch::Http::Cache::Request.etag_matches?(etag)\n\n
fresh? ActionDispatch::Http::Cache::Request.fresh?(response)\nCheck response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match conditions. If both headers are\nsupplied, both must match, or the request is not considered fresh.\n
if_modified_since ActionDispatch::Http::Cache::Request.if_modified_since()\n\n
if_none_match ActionDispatch::Http::Cache::Request.if_none_match()\n\n
not_modified? ActionDispatch::Http::Cache::Request.not_modified?(modified_at)\n\n
new ActionDispatch::Http::Cache::Response.new(*)\n\n
etag ActionDispatch::Http::Cache::Response.etag()\n\n
etag= ActionDispatch::Http::Cache::Response.etag=(etag)\n\n
etag? ActionDispatch::Http::Cache::Response.etag?()\n\n
handle_conditional_get! ActionDispatch::Http::Cache::Response.handle_conditional_get!()\n\n
last_modified ActionDispatch::Http::Cache::Response.last_modified()\n\n
last_modified= ActionDispatch::Http::Cache::Response.last_modified=(utc_time)\n\n
last_modified? ActionDispatch::Http::Cache::Response.last_modified?()\n\n
nonempty_ok_response? ActionDispatch::Http::Cache::Response.nonempty_ok_response?()\n\n
set_conditional_cache_control! ActionDispatch::Http::Cache::Response.set_conditional_cache_control!()\n\n
string_body? ActionDispatch::Http::Cache::Response.string_body?()\n\n
new ActionDispatch::Response::Setup.new(status = 200, header = {}, body = [])\n\n
normalize_parameters ActionDispatch::Http::Upload.normalize_parameters(value)\nConvert nested Hash to HashWithIndifferentAccess and replace\nfile upload hash with UploadedFile objects\n
domain ActionDispatch::Http::URL.domain(tld_length = 1)\nReturns the \domain part of a \host, such as "rubyonrails.org" in\n"www.rubyonrails.org". You can specify\na different <tt>tld_length</tt>, such as 2 to catch rubyonrails.co.uk in\n"www.rubyonrails.co.uk".\n
host ActionDispatch::Http::URL.host()\nReturns the host for this request, such as example.com.\n
host_with_port ActionDispatch::Http::URL.host_with_port()\nReturns a \host:\port string for this request, such as "example.com" or\n"example.com:8080".\n
named_host? ActionDispatch::Http::URL.named_host?(host)\n\n
port ActionDispatch::Http::URL.port()\nReturns the port number of this request as an integer.\n
port_string ActionDispatch::Http::URL.port_string()\nReturns a \port suffix like ":8080" if the \port number of this request\nis not the default HTTP \port 80 or HTTPS \port 443.\n
protocol ActionDispatch::Http::URL.protocol()\nReturns 'https://' if this is an SSL request and 'http://' otherwise.\n
raw_host_with_port ActionDispatch::Http::URL.raw_host_with_port()\nReturns the \host for this request, such as "example.com".\n
request_uri ActionDispatch::Http::URL.request_uri()\nReturns the request URI, accounting for server idiosyncrasies.\nWEBrick includes the full \URL. IIS leaves REQUEST_URI blank.\n
scheme ActionDispatch::Http::URL.scheme()\nReturns 'https' if this is an SSL request and 'http' otherwise.\n
server_port ActionDispatch::Http::URL.server_port()\n\n
ssl? ActionDispatch::Http::URL.ssl?()\nIs this an SSL request?\n
standard_port ActionDispatch::Http::URL.standard_port()\nReturns the standard \port number for this request's protocol.\n
standard_port? ActionDispatch::Http::URL.standard_port?()\nReturns whether this request is using the standard port\n
subdomain ActionDispatch::Http::URL.subdomain(tld_length = 1)\n\n
subdomains ActionDispatch::Http::URL.subdomains(tld_length = 1)\nReturns all the \subdomains as an array, so <tt>["dev", "www"]</tt> would be\nreturned for "dev.www.rubyonrails.org". You can specify a different\n<tt>tld_length</tt>,\nsuch as 2 to catch <tt>["www"]</tt> instead of <tt>["www", "rubyonrails"]</tt>\nin "www.rubyonrails.co.uk".\n
url ActionDispatch::Http::URL.url()\nReturns the complete \URL used for this request.\n
included ActionController::UrlWriter.included(klass)\n\n
redirect_to ActionController::Flash.redirect_to(options = {}, response_status_and_flash\n= {})\n\n
head ActionController::Head.head(status, options = {})\nReturn a response that has no content (merely headers). The options\nargument is interpreted to be a hash of header names and values.\nThis allows you to easily return a response that consists only of\nsignificant headers:\n\n  head :created, :location => person_path(@person)\n\nIt can also be used to return exceptional conditions:\n\n  return head(:method_not_allowed) unless request.post?\n  return head(:bad_request) unless valid_request?\n  render\n
process_action ActionController::Rescue.process_action(*args)\n\n
rescue_with_handler ActionController::Rescue.rescue_with_handler(exception)\n\n
authenticate ActionController::HttpAuthentication::Basic.authenticate(request,\n&login_procedure)\n\n
authentication_request ActionController::HttpAuthentication::Basic.authentication_request(controller,\nrealm)\n\n
decode_credentials ActionController::HttpAuthentication::Basic.decode_credentials(request)\n\n
encode_credentials ActionController::HttpAuthentication::Basic.encode_credentials(user_name,\npassword)\n\n
user_name_and_password ActionController::HttpAuthentication::Basic.user_name_and_password(request)\n\n
authenticate_or_request_with_http_basic ActionController::HttpAuthentication::Basic::ControllerMethods.authenticate_or_request_with_http_basic(realm\n= "Application", &login_procedure)\n\n
authenticate_with_http_basic ActionController::HttpAuthentication::Basic::ControllerMethods.authenticate_with_http_basic(&login_procedure)\n\n
request_http_basic_authentication ActionController::HttpAuthentication::Basic::ControllerMethods.request_http_basic_authentication(realm\n= "Application")\n\n
authenticate ActionController::HttpAuthentication::Digest.authenticate(request, realm,\n&password_procedure)\nReturns false on a valid response, true otherwise\n
authentication_header ActionController::HttpAuthentication::Digest.authentication_header(controller,\nrealm)\n\n
authentication_request ActionController::HttpAuthentication::Digest.authentication_request(controller,\nrealm, message = nil)\n\n
decode_credentials ActionController::HttpAuthentication::Digest.decode_credentials(header)\n\n
decode_credentials_header ActionController::HttpAuthentication::Digest.decode_credentials_header(request)\n\n
encode_credentials ActionController::HttpAuthentication::Digest.encode_credentials(http_method,\ncredentials, password, password_is_ha1)\n\n
expected_response ActionController::HttpAuthentication::Digest.expected_response(http_method,\nuri, credentials, password, password_is_ha1=true)\nReturns the expected response for a request of +http_method+ to +uri+ with\nthe decoded +credentials+ and the expected +password+\nOptional parameter +password_is_ha1+ is set to +true+ by default, since best\npractice is to store ha1 digest instead\nof a plain-text password.\n
ha1 ActionController::HttpAuthentication::Digest.ha1(credentials, password)\n\n
nonce ActionController::HttpAuthentication::Digest.nonce(secret_key, time = Time.now)\nUses an MD5 digest based on time to generate a value to be used only once.\n\nA server-specified data string which should be uniquely generated each time\na 401 response is made.\nIt is recommended that this string be base64 or hexadecimal data.\nSpecifically, since the string is passed in the header lines as a quoted\nstring, the double-quote character is not allowed.\n\nThe contents of the nonce are implementation dependent.\nThe quality of the implementation depends on a good choice.\nA nonce might, for example, be constructed as the base 64 encoding of\n\n=> time-stamp H(time-stamp ":" ETag ":" private-key)\n\nwhere time-stamp is a server-generated time or other non-repeating value,\nETag is the value of the HTTP ETag header associated with the requested entity,\nand private-key is data known only to the server.\nWith a nonce of this form a server would recalculate the hash portion after\nreceiving the client authentication header and\nreject the request if it did not match the nonce from that header or\nif the time-stamp value is not recent enough. In this way the server can\nlimit the time of the nonce's validity.\nThe inclusion of the ETag prevents a replay request for an updated version\nof the resource.\n(Note: including the IP address of the client in the nonce would appear to\noffer the server the ability\nto limit the reuse of the nonce to the same client that originally got it.\nHowever, that would break proxy farms, where requests from a single user\noften go through different proxies in the farm.\nAlso, IP address spoofing is not that hard.)\n\nAn implementation might choose not to accept a previously used nonce or a\npreviously used digest, in order to\nprotect against a replay attack. Or, an implementation might choose to use\none-time nonces or digests for\nPOST or PUT requests and a time-stamp for GET requests. For more details on\nthe issues involved see Section 4\nof this document.\n\nThe nonce is opaque to the client. Composed of Time, and hash of Time\nwith secret\nkey from the Rails session secret generated upon creation of project. Ensures\nthe time cannot be modified by client.\n
opaque ActionController::HttpAuthentication::Digest.opaque(secret_key)\nOpaque based on random generation - but changing each request?\n
secret_token ActionController::HttpAuthentication::Digest.secret_token(request)\n\n
validate_digest_response ActionController::HttpAuthentication::Digest.validate_digest_response(request,\nrealm, &password_procedure)\nReturns false unless the request credentials response value matches the\nexpected value.\nFirst try the password as a ha1 digest password. If this fails, then try it\nas a plain\ntext password.\n
validate_nonce ActionController::HttpAuthentication::Digest.validate_nonce(secret_key,\nrequest, value, seconds_to_timeout=5*60)\nMight want a shorter timeout depending on whether the request\nis a PUT or POST, and if client is browser or web service.\nCan be much shorter if the Stale directive is implemented. This would\nallow a user to use new nonce without prompting user again for their\nusername and password.\n
authenticate_or_request_with_http_digest ActionController::HttpAuthentication::Digest::ControllerMethods.authenticate_or_request_with_http_digest(realm\n= "Application", &password_procedure)\n\n
authenticate_with_http_digest ActionController::HttpAuthentication::Digest::ControllerMethods.authenticate_with_http_digest(realm\n= "Application", &password_procedure)\nAuthenticate with HTTP Digest, returns true or false\n
request_http_digest_authentication ActionController::HttpAuthentication::Digest::ControllerMethods.request_http_digest_authentication(realm\n= "Application", message = nil)\nRender output including the HTTP Digest authentication header\n
authenticate ActionController::HttpAuthentication::Token.authenticate(controller,\n&login_procedure)\nIf token Authorization header is present, call the login procedure with\nthe present token and options.\n\ncontroller      - ActionController::Base instance for the current request.\nlogin_procedure - Proc to call if a token is present.  The Proc should\n                  take 2 arguments:\n                    authenticate(controller) { |token, options| ... }\n\nReturns the return value of `&login_procedure` if a token is found.\nReturns nil if no token is found.\n
authentication_request ActionController::HttpAuthentication::Token.authentication_request(controller,\nrealm)\nSets a WWW-Authenticate to let the client know a token is desired.\n\ncontroller - ActionController::Base instance for the outgoing response.\nrealm      - String realm to use in the header.\n\nReturns nothing.\n
encode_credentials ActionController::HttpAuthentication::Token.encode_credentials(token,\noptions = {})\nEncodes the given token and options into an Authorization header value.\n\ntoken   - String token.\noptions - optional Hash of the options.\n\nReturns String.\n
token_and_options ActionController::HttpAuthentication::Token.token_and_options(request)\nParses the token and options out of the token authorization header.  If\nthe header looks like this:\n  Authorization: Token token="abc", nonce="def"\nThen the returned token is "abc", and the options is {:nonce => "def"}\n\nrequest - ActionController::Request instance with the current headers.\n\nReturns an Array of [String, Hash] if a token is present.\nReturns nil if no token is found.\n
authenticate_or_request_with_http_token ActionController::HttpAuthentication::Token::ControllerMethods.authenticate_or_request_with_http_token(realm\n= "Application", &login_procedure)\n\n
authenticate_with_http_token ActionController::HttpAuthentication::Token::ControllerMethods.authenticate_with_http_token(&login_procedure)\n\n
request_http_token_authentication ActionController::HttpAuthentication::Token::ControllerMethods.request_http_token_authentication(realm\n= "Application")\n\n
dispatch ActionController::RackDelegation.dispatch(action, request, response =\nActionDispatch::Response.new)\n\n
reset_session ActionController::RackDelegation.reset_session()\n\n
response_body= ActionController::RackDelegation.response_body=(body)\n\n
form_authenticity_param ActionController::RequestForgeryProtection.form_authenticity_param()\nThe form's authenticity parameter. Override to provide your own.\n
form_authenticity_token ActionController::RequestForgeryProtection.form_authenticity_token()\nSets the token value for the current session.\n
handle_unverified_request ActionController::RequestForgeryProtection.handle_unverified_request()\n\n
protect_against_forgery? ActionController::RequestForgeryProtection.protect_against_forgery?()\n\n
verified_request? ActionController::RequestForgeryProtection.verified_request?()\nReturns true or false if a request is verified.  Checks:\n\n* is it a GET request?  Gets should be safe and idempotent\n* Does the form_authenticity_token match the given token value from the params?\n* Does the X-CSRF-Token header match the form_authenticity_token\n
verify_authenticity_token ActionController::RequestForgeryProtection.verify_authenticity_token()\nThe actual before_filter that is used.  Modify this to change how you handle\nunverified requests.\n
protect_from_forgery ActionController::RequestForgeryProtection::ClassMethods.protect_from_forgery(options\n= {})\nTurn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked.\n\nExample:\n\n  class FooController < ApplicationController\n    protect_from_forgery :except => :index\n\nYou can disable csrf protection on controller-by-controller basis:\n\n  skip_before_filter :verify_authenticity_token\n\nIt can also be disabled for specific controller actions:\n\n  skip_before_filter :verify_authenticity_token, :except => [:create]\n\nValid Options:\n\n* <tt>:only/:except</tt> - Passed to the <tt>before_filter</tt> call.\nSet which actions are verified.\n
_compute_redirect_to_location ActionController::Redirecting._compute_redirect_to_location(options)\n\n
_extract_redirect_to_status ActionController::Redirecting._extract_redirect_to_status(options,\nresponse_status)\n\n
redirect_to ActionController::Redirecting.redirect_to(options = {}, response_status = {})\nRedirects the browser to the target specified in +options+. This parameter\ncan take one of three forms:\n\n* <tt>Hash</tt> - The URL will be generated by calling url_for with the\n+options+.\n* <tt>Record</tt> - The URL will be generated by calling url_for with the\n+options+, which will reference a named URL for that record.\n* <tt>String</tt> starting with <tt>protocol://</tt> (like <tt>http://</tt>)\n- Is passed straight through as the target for redirection.\n* <tt>String</tt> not containing a protocol - The current protocol and host\nis prepended to the string.\n* <tt>:back</tt> - Back to the page that issued the request. Useful for\nforms that are triggered from multiple places.\n  Short-hand for <tt>redirect_to(request.env["HTTP_REFERER"])</tt>\n\nExamples:\n  redirect_to :action => "show", :id => 5\n  redirect_to post\n  redirect_to "http://www.rubyonrails.org"\n  redirect_to "/images/screenshot.jpg"\n  redirect_to articles_url\n  redirect_to :back\n\nThe redirection happens as a "302 Moved" header unless otherwise specified.\n\nExamples:\n  redirect_to post_url(@post), :status => :found\n  redirect_to :action=>'atom', :status => :moved_permanently\n  redirect_to post_url(@post), :status => 301\n  redirect_to :action=>'atom', :status => 302\n\nThe status code can either be a standard {HTTP Status\ncode}[http://www.iana.org/assignments/http-status-codes] as an\ninteger, or a symbol representing the downcased, underscored and symbolized\ndescription.\n\nIt is also possible to assign a flash message as part of the redirection. There\nare two special accessors for commonly used the flash names\n+alert+ and +notice+ as well as a general purpose +flash+ bucket.\n\nExamples:\n  redirect_to post_url(@post), :alert => "Watch it, mister!"\n  redirect_to post_url(@post), :status=> :found, :notice => "Pay attention\n  to the road"\n  redirect_to post_url(@post), :status => 301, :flash => { :updated_post_id =>\n  @post.id }\n  redirect_to { :action=>'atom' }, :alert => "Something serious happened"\n\nWhen using <tt>redirect_to :back</tt>, if there is no referrer,\nRedirectBackError will be raised. You may specify some fallback\nbehavior for this case by rescuing RedirectBackError.\n
default_render ActionController::ImplicitRender.default_render()\n\n
method_for_action ActionController::ImplicitRender.method_for_action(action_name)\n\n
send_action ActionController::ImplicitRender.send_action(*)\n\n
clear_respond_to ActionController::MimeResponds::ClassMethods.clear_respond_to()\nClear all mime types in <tt>respond_to</tt>.\n
respond_to ActionController::MimeResponds::ClassMethods.respond_to(*mimes)\nDefines mime types that are rendered by default when invoking\n<tt>respond_with</tt>.\n\nExamples:\n\n  respond_to :html, :xml, :json\n\nSpecifies that all actions in the controller respond to requests\nfor <tt>:html</tt>, <tt>:xml</tt> and <tt>:json</tt>.\n\nTo specify on per-action basis, use <tt>:only</tt> and\n<tt>:except</tt> with an array of actions or a single action:\n\n  respond_to :html\n  respond_to :xml, :json, :except => [ :edit ]\n\nThis specifies that all actions respond to <tt>:html</tt>\nand all actions except <tt>:edit</tt> respond to <tt>:xml</tt> and\n<tt>:json</tt>.\n\n  respond_to :rjs, :only => :create\n\nThis specifies that the <tt>:create</tt> action and no other responds\nto <tt>:rjs</tt>.\n
expires_in ActionController::ConditionalGet.expires_in(seconds, options = {})\nSets a HTTP 1.1 Cache-Control header. Defaults to issuing a "private"\ninstruction, so that\nintermediate caches shouldn't cache the response.\n\nExamples:\n  expires_in 20.minutes\n  expires_in 3.hours, :public => true\n  expires in 3.hours, 'max-stale' => 5.hours, :public => true\n\nThis method will overwrite an existing Cache-Control header.\nSee http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html for more\npossibilities.\n
expires_now ActionController::ConditionalGet.expires_now()\nSets a HTTP 1.1 Cache-Control header of "no-cache" so no caching should\noccur by the browser or\nintermediate caches (like caching proxy servers).\n
fresh_when ActionController::ConditionalGet.fresh_when(options)\nSets the etag, last_modified, or both on the response and renders a\n"304 Not Modified" response if the request is already fresh.\n\nParameters:\n* <tt>:etag</tt>\n* <tt>:last_modified</tt>\n* <tt>:public</tt> By default the Cache-Control header is private, set\nthis to true if you want your application to be cachable by other devices\n(proxy caches).\n\nExample:\n\n  def show\n    @article = Article.find(params[:id])\n    fresh_when(:etag => @article, :last_modified => @article.created_at.utc,\n    :public => true)\n  end\n\nThis will render the show template if the request isn't sending a matching\netag or\nIf-Modified-Since header and just a "304 Not Modified" response if there's\na match.\n
stale? ActionController::ConditionalGet.stale?(options)\nSets the etag and/or last_modified on the response and checks it against\nthe client request. If the request doesn't match the options provided, the\nrequest is considered stale and should be generated from scratch. Otherwise,\nit's fresh and we don't need to generate anything and a reply of "304 Not\nModified" is sent.\n\nParameters:\n* <tt>:etag</tt>\n* <tt>:last_modified</tt>\n* <tt>:public</tt> By default the Cache-Control header is private, set\nthis to true if you want your application to be cachable by other devices\n(proxy caches).\n\nExample:\n\n  def show\n    @article = Article.find(params[:id])\n\n    if stale?(:etag => @article, :last_modified => @article.created_at.utc)\n      @statistics = @article.really_expensive_call\n      respond_to do |format|\n all the supported formats\n      end\n    end\n  end\n
send_data ActionController::Streaming.send_data(data, options = {})\nSends the given binary data to the browser. This method is similar to\n<tt>render :text => data</tt>, but also allows you to specify whether\nthe browser should display the response as a file attachment (i.e. in a\ndownload dialog) or as inline data. You may also set the content type,\nthe apparent file name, and other things.\n\nOptions:\n* <tt>:filename</tt> - suggests a filename for the browser to use.\n* <tt>:type</tt> - specifies an HTTP content type. Defaults to\n'application/octet-stream'. You can specify\n  either a string or a symbol for a registered type register with\n  <tt>Mime::Type.register</tt>, for example :json\n* <tt>:disposition</tt> - specifies whether the file will be shown inline\nor downloaded.\n  Valid values are 'inline' and 'attachment' (default).\n* <tt>:status</tt> - specifies the status code to send with the\nresponse. Defaults to '200 OK'.\n\nGeneric data download:\n\n  send_data buffer\n\nDownload a dynamically-generated tarball:\n\n  send_data generate_tgz('dir'), :filename => 'dir.tgz'\n\nDisplay an image Active Record in the browser:\n\n  send_data image.data, :type => image.content_type, :disposition => 'inline'\n\nSee +send_file+ for more information on HTTP Content-* headers and caching.\n\n<b>Tip:</b> if you want to stream large amounts of on-the-fly generated\ndata to the browser, then use <tt>render :text => proc { ... }</tt>\ninstead. See ActionController::Base#render for more information.\n
send_file ActionController::Streaming.send_file(path, options = {})\nSends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. The header to use is set via\nconfig.action_dispatch.x_sendfile_header, and defaults to "X-Sendfile".\nYour server can also configure this for you by setting the X-Sendfile-Type\nheader.\n\nBe careful to sanitize the path parameter if it is coming from a web\npage. <tt>send_file(params[:path])</tt> allows a malicious user to\ndownload any file on your server.\n\nOptions:\n* <tt>:filename</tt> - suggests a filename for the browser to use.\n  Defaults to <tt>File.basename(path)</tt>.\n* <tt>:type</tt> - specifies an HTTP content type. Defaults to\n'application/octet-stream'. You can specify\n  either a string or a symbol for a registered type register with\n  <tt>Mime::Type.register</tt>, for example :json\n* <tt>:disposition</tt> - specifies whether the file will be shown inline\nor downloaded.\n  Valid values are 'inline' and 'attachment' (default).\n* <tt>:status</tt> - specifies the status code to send with the\nresponse. Defaults to '200 OK'.\n* <tt>:url_based_filename</tt> - set to +true+ if you want the browser guess\nthe filename from\n  the URL, which is necessary for i18n filenames on certain browsers\n  (setting <tt>:filename</tt> overrides this option).\n\nThe default Content-Type and Content-Disposition headers are\nset to download arbitrary binary files in as many browsers as\npossible.  IE versions 4, 5, 5.5, and 6 are all known to have\na variety of quirks (especially when downloading over SSL).\n\nSimple download:\n\n  send_file '/path/to.zip'\n\nShow a JPEG in the browser:\n\n  send_file '/path/to.jpeg', :type => 'image/jpeg', :disposition => 'inline'\n\nShow a 404 page in the browser:\n\n  send_file '/path/to/404.html', :type => 'text/html; charset=utf-8',\n  :status => 404\n\nRead about the other Content-* HTTP headers if you'd like to\nprovide the user with more information (such as Content-Description) in\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11.\n\nAlso be aware that the document may be cached by proxies and browsers.\nThe Pragma and Cache-Control headers declare how the file may be cached\nby intermediaries.  They default to require clients to validate with\nthe server before releasing cached responses.  See\nhttp://www.mnot.net/cache_docs/ for an overview of web caching and\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\nfor the Cache-Control header spec.\n
send_file_headers! ActionController::Streaming.send_file_headers!(options)\n\n
all_application_helpers ActionController::Helpers::ClassMethods.all_application_helpers()\nExtract helper names from files in app/helpers/**/*_helper.rb\n
helper_attr ActionController::Helpers::ClassMethods.helper_attr(*attrs)\nDeclares helper accessors for controller attributes. For example, the\nfollowing adds new +name+ and <tt>name=</tt> instance methods to a\ncontroller and makes them available to the view:\n  helper_attr :name\n  attr_accessor :name\n\n==== Parameters\n*attrs<Array[String, Symbol]>:: Names of attributes to be converted\n  into helpers.\n
helpers ActionController::Helpers::ClassMethods.helpers()\nProvides a proxy to access helpers methods from outside the view.\n
helpers_dir ActionController::Helpers::ClassMethods.helpers_dir()\n\n
helpers_dir= ActionController::Helpers::ClassMethods.helpers_dir=(value)\n\n
modules_for_helpers ActionController::Helpers::ClassMethods.modules_for_helpers(args)\nOverwrite modules_for_helpers to accept :all as argument, which loads\nall helpers in helpers_dir.\n\n==== Parameters\nargs<Array[String, Symbol, Module, all]>:: A list of helpers\n\n==== Returns\nArray[Module]:: A normalized list of modules for the list of\n  helpers provided.\n
_routes ActionController::UrlFor._routes()\n\n
url_options ActionController::UrlFor.url_options()\n\n
action_methods ActionController::UrlFor::ClassMethods.action_methods()\n\n
method_for_action ActionController::HideActions.method_for_action(action_name)\nOverrides AbstractController::Base#action_method? to return false if the\naction name is in the list of hidden actions.\n
action_methods ActionController::HideActions::ClassMethods.action_methods()\nOverrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods.\n
hide_action ActionController::HideActions::ClassMethods.hide_action(*args)\nSets all of the actions passed in as hidden actions.\n\n==== Parameters\n*args<#to_s>:: A list of actions\n
inherited ActionController::HideActions::ClassMethods.inherited(klass)\n\n
visible_action? ActionController::HideActions::ClassMethods.visible_action?(action_name)\n\n
add ActionController::Renderers.add(key, &block)\n\n
render_to_body ActionController::Renderers.render_to_body(options)\n\n
_write_render_options ActionController::Renderers::ClassMethods._write_render_options()\n\n
use_renderer ActionController::Renderers::ClassMethods.use_renderer(*args)\n\n
use_renderers ActionController::Renderers::ClassMethods.use_renderers(*args)\n\n
_write_render_options ActionController::Renderers::All._write_render_options()\n\n
cookies ActionController::Cookies.cookies()\n\n
process_action ActionController::Instrumentation.process_action(action, *args)\n\n
redirect_to ActionController::Instrumentation.redirect_to(*args)\n\n
render ActionController::Instrumentation.render(*args)\n\n
send_data ActionController::Instrumentation.send_data(data, options = {})\n\n
send_file ActionController::Instrumentation.send_file(path, options={})\n\n
headers= ActionController::Testing.headers=(new_headers)\nTODO : Rewrite tests using controller.headers= to use Rack env\n
process_with_new_base_test ActionController::Testing.process_with_new_base_test(request, response)\nTODO: Clean this up\n
set_test_assigns ActionController::Testing.set_test_assigns()\n\n
before_filters ActionController::Testing::ClassMethods.before_filters()\n\n
_handle_method_missing ActionController::Compatibility._handle_method_missing()\n\n
_normalize_options ActionController::Compatibility._normalize_options(options)\n\n
assign_shortcuts ActionController::Compatibility.assign_shortcuts(*)\n\n
initialize_template_class ActionController::Compatibility.initialize_template_class(*)\nFor old tests\n
method_for_action ActionController::Compatibility.method_for_action(action_name)\n\n
performed? ActionController::Compatibility.performed?()\n\n
render_to_body ActionController::Compatibility.render_to_body(options)\n\n
rescue_action ActionController::Compatibility.rescue_action(env)\n\n
cache ActionController::Caching.cache(key, options = {}, &block)\nConvenience accessor\n
caching_allowed? ActionController::Caching.caching_allowed?()\n\n
cache_configured? ActionController::Caching::ConfigMethods.cache_configured?()\n\n
cache_store ActionController::Caching::ConfigMethods.cache_store()\n\n
cache_store= ActionController::Caching::ConfigMethods.cache_store=(store)\n\n
_save_fragment ActionController::Caching::Actions._save_fragment(name, options)\n\n
expire_action ActionController::Caching::Actions.expire_action(options = {})\n\n
caches_action ActionController::Caching::Actions::ClassMethods.caches_action(*actions)\nDeclares that +actions+ should be cached.\nSee ActionController::Caching::Actions for details.\n
cache_page ActionController::Caching::Pages.cache_page(content = nil, options = nil)\nManually cache the +content+ in the key determined by +options+. If no\ncontent is provided, the contents of response.body is used\nIf no options are provided, the requested url is used. Example:\n  cache_page "I'm the cached content", :controller => "lists", :action =>\n  "show"\n
caching_allowed ActionController::Caching::Pages.caching_allowed()\n\n
expire_page ActionController::Caching::Pages.expire_page(options = {})\nExpires the page that was cached with the +options+ as a key. Example:\n  expire_page :controller => "lists", :action => "show"\n
cache_page ActionController::Caching::Pages::ClassMethods.cache_page(content, path,\nextension = nil)\nManually cache the +content+ in the key determined by +path+. Example:\n  cache_page "I'm the cached content", "/lists/show"\n
caches_page ActionController::Caching::Pages::ClassMethods.caches_page(*actions)\nCaches the +actions+ using the page-caching approach that'll store the cache\nin a path within the page_cache_directory that\nmatches the triggering url.\n\nUsage:\n cache the index action\n  caches_page :index\n cache the index action except for JSON requests\n  caches_page :index, :if => Proc.new { |c| !c.request.format.json? }\n
expire_page ActionController::Caching::Pages::ClassMethods.expire_page(path)\nExpires the page that was cached with the +path+ as a key. Example:\n  expire_page "/lists/show"\n
instrument_page_cache ActionController::Caching::Pages::ClassMethods.instrument_page_cache(name,\npath)\n\n
page_cache_file ActionController::Caching::Pages::ClassMethods.page_cache_file(path, extension)\n\n
page_cache_path ActionController::Caching::Pages::ClassMethods.page_cache_path(path, extension\n= nil)\n\n
assert_template ActionController::TemplateAssertions.assert_template(options = {}, message\n= nil)\nAsserts that the request was rendered with the appropriate template file\nor partials.\n\n==== Examples\n assert that the "new" view template was rendered\n  assert_template "new"\n assert that the "_customer" partial was rendered twice\n  assert_template :partial => '_customer', :count => 2\n assert that no partials were rendered\n  assert_template :partial => false\n\nIn a view test case, you can also assert that specific locals are passed\nto partials:\n assert that the "_customer" partial was rendered with a specific object\n  assert_template :partial => '_customer', :locals => { :customer =>\n  @customer }\n
process ActionController::TemplateAssertions.process(*args)\n\n
setup_subscriptions ActionController::TemplateAssertions.setup_subscriptions()\n\n
teardown_subscriptions ActionController::TemplateAssertions.teardown_subscriptions()\n\n
build_request_uri ActionController::TestCase::Behavior.build_request_uri(action, parameters)\n\n
delete ActionController::TestCase::Behavior.delete(action, parameters = nil,\nsession = nil, flash = nil)\nExecutes a request simulating DELETE HTTP method and set/volley the response\n
get ActionController::TestCase::Behavior.get(action, parameters = nil, session =\nnil, flash = nil)\nExecutes a request simulating GET HTTP method and set/volley the response\n
head ActionController::TestCase::Behavior.head(action, parameters = nil, session =\nnil, flash = nil)\nExecutes a request simulating HEAD HTTP method and set/volley the response\n
post ActionController::TestCase::Behavior.post(action, parameters = nil, session =\nnil, flash = nil)\nExecutes a request simulating POST HTTP method and set/volley the response\n
process ActionController::TestCase::Behavior.process(action, parameters = nil,\nsession = nil, flash = nil, http_method = 'GET')\n\n
put ActionController::TestCase::Behavior.put(action, parameters = nil, session =\nnil, flash = nil)\nExecutes a request simulating PUT HTTP method and set/volley the response\n
rescue_action_in_public! ActionController::TestCase::Behavior.rescue_action_in_public!()\nCause the action to be rescued according to the regular rules for rescue_action\nwhen the visitor is not local\n
setup_controller_request_and_response ActionController::TestCase::Behavior.setup_controller_request_and_response()\n\n
xhr ActionController::TestCase::Behavior.xhr(request_method, action, parameters =\nnil, session = nil, flash = nil)\n\n
xml_http_request ActionController::TestCase::Behavior.xml_http_request(request_method, action,\nparameters = nil, session = nil, flash = nil)\n\n
controller_class ActionController::TestCase::Behavior::ClassMethods.controller_class()\n\n
controller_class= ActionController::TestCase::Behavior::ClassMethods.controller_class=(new_class)\n\n
determine_default_controller_class ActionController::TestCase::Behavior::ClassMethods.determine_default_controller_class(name)\n\n
prepare_controller_class ActionController::TestCase::Behavior::ClassMethods.prepare_controller_class(new_class)\n\n
tests ActionController::TestCase::Behavior::ClassMethods.tests(controller_class)\nSets the controller class name. Useful if the name can't be inferred from\ntest class.\nExpects +controller_class+ as a constant. Example: <tt>tests\nWidgetController</tt>.\n
included ActionController::TestCase::RaiseActionExceptions.included(base)\n\n
rescue_action_without_handler ActionController::TestCase::RaiseActionExceptions.rescue_action_without_handler(e)\n\n
process_action AbstractController::Callbacks.process_action(method_name, *args)\nOverride AbstractController::Base's process_action to run the\nprocess_action callbacks around the normal behavior.\n
_insert_callbacks AbstractController::Callbacks::ClassMethods._insert_callbacks(callbacks, block)\nTake callback names and an optional callback proc, normalize them,\nthen call the block with each callback. This allows us to abstract\nthe normalization across several methods that use it.\n\n==== Parameters\n* <tt>callbacks</tt> - An array of callbacks, with an optional\n  options hash as the last parameter.\n* <tt>block</tt>    - A proc that should be added to the callbacks.\n\n==== Block Parameters\n* <tt>name</tt>     - The callback to be added\n* <tt>options</tt>  - A hash of options to be used when adding the callback\n
_normalize_callback_options AbstractController::Callbacks::ClassMethods._normalize_callback_options(options)\nIf :only or :except are used, convert the options into the\nprimitive form (:per_key) used by ActiveSupport::Callbacks.\nThe basic idea is that :only => :index gets converted to\n:if => proc {|c| c.action_name == "index" }, but that the\nproc is only evaluated once per action for the lifetime of\na Rails process.\n\n==== Options\n* <tt>only</tt>   - The callback should be run only for this action\n* <tt>except<tt>  - The callback should be run for all actions except\nthis action\n
skip_filter AbstractController::Callbacks::ClassMethods.skip_filter(*names, &blk)\nSkip before, after, and around filters matching any of the names\n\n==== Parameters\n* <tt>names</tt> - A list of valid names that could be used for\n  callbacks. Note that skipping uses Ruby equality, so it's\n  impossible to skip a callback defined using an anonymous proc\n  using #skip_filter\n
new AbstractController::Rendering.new(*)\n\n
_normalize_args AbstractController::Rendering._normalize_args(action=nil, options={})\nNormalize options by converting render "foo" to render :action => "foo" and\nrender "foo/bar" to render :file => "foo/bar".\n
_normalize_options AbstractController::Rendering._normalize_options(options)\n\n
_prefix AbstractController::Rendering._prefix()\nThe prefix used in render "foo" shortcuts.\n
_process_options AbstractController::Rendering._process_options(options)\n\n
render AbstractController::Rendering.render(*args, &block)\nNormalize arguments, options and then delegates render_to_body and\nsticks the result in self.response_body.\n
render_to_body AbstractController::Rendering.render_to_body(options = {})\nRaw rendering of a template to a Rack-compatible body.\n:api: plugin\n
render_to_string AbstractController::Rendering.render_to_string(*args, &block)\nRaw rendering of a template to a string. Just convert the results of\nrender_to_body into a String.\n:api: plugin\n
view_assigns AbstractController::Rendering.view_assigns()\nThis method should return a hash with assigns.\nYou can overwrite this configuration per controller.\n:api: public\n
view_context AbstractController::Rendering.view_context()\nAn instance of a view class. The default view class is ActionView::Base\n\nThe view class must have the following methods:\nView.new[lookup_context, assigns, controller]\n  Create a new ActionView instance for a controller\nView#render[options]\n  Returns String with the rendered template\n\nOverride this method in a module to change the default behavior.\n
view_context_class AbstractController::Rendering.view_context_class()\n\n
view_context_class AbstractController::Rendering::ClassMethods.view_context_class()\n\n
l AbstractController::Translation.l(*args)\n\n
localize AbstractController::Translation.localize(*args)\n\n
t AbstractController::Translation.t(*args)\n\n
translate AbstractController::Translation.translate(*args)\n\n
generate_method_for_mime AbstractController::Collector.generate_method_for_mime(mime)\n\n
method_missing AbstractController::Collector.method_missing(symbol, &block)\n\n
add_template_helper AbstractController::Helpers::ClassMethods.add_template_helper(mod)\nMakes all the (instance) methods in the helper module available to templates\nrendered through this controller.\n\n==== Parameters\n* <tt>module</tt> - The module to include into the current helper module\n  for the class\n
clear_helpers AbstractController::Helpers::ClassMethods.clear_helpers()\nClears up all existing helpers in this class, only keeping the helper\nwith the same name as this class.\n
default_helper_module! AbstractController::Helpers::ClassMethods.default_helper_module!()\n\n
helper AbstractController::Helpers::ClassMethods.helper(*args, &block)\nThe +helper+ class method can take a series of helper module names, a block,\nor both.\n\n==== Parameters\n* <tt>*args</tt> - Module, Symbol, String, :all\n* <tt>block</tt> - A block defining helper methods\n\n==== Examples\nWhen the argument is a module it will be included directly in the template\nclass.\n  helper FooHelper # => includes FooHelper\n\nWhen the argument is a string or symbol, the method will provide the "_helper"\nsuffix, require the file\nand include the module in the template class.  The second form illustrates\nhow to include custom helpers\nwhen working with namespaced controllers, or other cases where the file\ncontaining the helper definition is not\nin one of Rails' standard load paths:\n  helper :foo             # => requires 'foo_helper' and includes FooHelper\n  helper 'resources/foo'  # => requires 'resources/foo_helper' and includes\n  Resources::FooHelper\n\nAdditionally, the +helper+ class method can receive and evaluate a block,\nmaking the methods defined available\nto the template.\n One line\n  helper { def hello() "Hello, world!" end }\n Multi-line\n  helper do\n    def foo(bar)\n      "#{bar} is the very best"\n    end\n  end\n\nFinally, all the above styles can be mixed together, and the +helper+ method\ncan be invoked with a mix of\n+symbols+, +strings+, +modules+ and blocks.\n\n  helper(:three, BlindHelper) { def mice() 'mice' end }\n
helper_method AbstractController::Helpers::ClassMethods.helper_method(*meths)\nDeclare a controller method as a helper. For example, the following\nmakes the +current_user+ controller method available to the view:\n  class ApplicationController < ActionController::Base\n    helper_method :current_user, :logged_in?\n\n    def current_user\n      @current_user ||= User.find_by_id(session[:user])\n    end\n\n     def logged_in?\n       current_user != nil\n     end\n  end\n\nIn a view:\n <% if logged_in? -%>Welcome, <%= current_user.name %><% end -%>\n\n==== Parameters\n* <tt>method[, method]</tt> - A name or names of a method on the controller\n  to be made available on the view.\n
inherited AbstractController::Helpers::ClassMethods.inherited(klass)\nWhen a class is inherited, wrap its helper module in a new module.\nThis ensures that the parent class's module can be changed\nindependently of the child class's.\n
modules_for_helpers AbstractController::Helpers::ClassMethods.modules_for_helpers(args)\nReturns a list of modules, normalized from the acceptable kinds of\nhelpers with the following behavior:\n\nString or Symbol:: :FooBar or "FooBar" becomes "foo_bar_helper",\n  and "foo_bar_helper.rb" is loaded using require_dependency.\n\nModule:: No further processing\n\nAfter loading the appropriate files, the corresponding modules\nare returned.\n\n==== Parameters\n* <tt>args</tt> - An array of helpers\n\n==== Returns\n* <tt>Array</tt> - A normalized list of modules for the list of\n  helpers provided.\n
append_view_path AbstractController::ViewPaths.append_view_path(path)\n\n
details_for_lookup AbstractController::ViewPaths.details_for_lookup()\n\n
lookup_context AbstractController::ViewPaths.lookup_context()\nLookupContext is the object responsible to hold all information required\nto lookup\ntemplates, i.e. view paths and details. Check ActionView::LookupContext\nfor more\ninformation.\n
prepend_view_path AbstractController::ViewPaths.prepend_view_path(path)\n\n
append_view_path AbstractController::ViewPaths::ClassMethods.append_view_path(path)\nAppend a path to the list of view paths for this controller.\n\n==== Parameters\n* <tt>path</tt> - If a String is provided, it gets converted into\n  the default view path. You may also provide a custom view path\n  (see ActionView::ViewPathSet for more information)\n
prepend_view_path AbstractController::ViewPaths::ClassMethods.prepend_view_path(path)\nPrepend a path to the list of view paths for this controller.\n\n==== Parameters\n* <tt>path</tt> - If a String is provided, it gets converted into\n  the default view path. You may also provide a custom view path\n  (see ActionView::ViewPathSet for more information)\n
view_paths AbstractController::ViewPaths::ClassMethods.view_paths()\nA list of all of the default view paths for this controller.\n
view_paths= AbstractController::ViewPaths::ClassMethods.view_paths=(paths)\nSet the view paths.\n\n==== Parameters\n* <tt>paths</tt> - If a ViewPathSet is provided, use that;\n  otherwise, process the parameter into a ViewPathSet.\n
as_json ActiveModel::Serializers::JSON.as_json(options = nil)\nReturns a JSON string representing the model. Some configuration can be\npassed through +options+.\n\nThe option <tt>ActiveModel::Base.include_root_in_json</tt> controls the\ntop-level behavior of <tt>to_json</tt>. It is <tt>true</tt> by default. When\nit is <tt>true</tt>,\n<tt>to_json</tt> will emit a single root node named after the object's\ntype. For example:\n\n  konata = User.find(1)\n  konata.to_json\n => { "user": {"id": 1, "name": "Konata Izumi", "age": 16,\n                  "created_at": "2006/08/01", "awesome": true} }\n\n  ActiveRecord::Base.include_root_in_json = false\n  konata.to_json\n => {"id": 1, "name": "Konata Izumi", "age": 16,\n        "created_at": "2006/08/01", "awesome": true}\n\nThe remainder of the examples in this section assume include_root_in_json\nis set to\n<tt>false</tt>.\n\nWithout any +options+, the returned JSON string will include all\nthe model's attributes. For example:\n\n  konata = User.find(1)\n  konata.to_json\n => {"id": 1, "name": "Konata Izumi", "age": 16,\n        "created_at": "2006/08/01", "awesome": true}\n\nThe <tt>:only</tt> and <tt>:except</tt> options can be used to limit the\nattributes\nincluded, and work similar to the +attributes+ method. For example:\n\n  konata.to_json(:only => [ :id, :name ])\n => {"id": 1, "name": "Konata Izumi"}\n\n  konata.to_json(:except => [ :id, :created_at, :age ])\n => {"name": "Konata Izumi", "awesome": true}\n\nTo include any methods on the model, use <tt>:methods</tt>.\n\n  konata.to_json(:methods => :permalink)\n => {"id": 1, "name": "Konata Izumi", "age": 16,\n        "created_at": "2006/08/01", "awesome": true,\n        "permalink": "1-konata-izumi"}\n\nTo include associations, use <tt>:include</tt>.\n\n  konata.to_json(:include => :posts)\n => {"id": 1, "name": "Konata Izumi", "age": 16,\n        "created_at": "2006/08/01", "awesome": true,\n        "posts": [{"id": 1, "author_id": 1, "title": "Welcome to the weblog"},\n                  {"id": 2, author_id: 1, "title": "So I was thinking"}]}\n\n2nd level and higher order associations work as well:\n\n  konata.to_json(:include => { :posts => {\n                                 :include => { :comments => {\n                                               :only => :body } },\n                                 :only => :title } })\n => {"id": 1, "name": "Konata Izumi", "age": 16,\n        "created_at": "2006/08/01", "awesome": true,\n        "posts": [{"comments": [{"body": "1st post!"}, {"body": "Second!"}],\n                   "title": "Welcome to the weblog"},\n                  {"comments": [{"body": "Don't think too hard"}],\n                   "title": "So I was thinking"}]}\n
from_json ActiveModel::Serializers::JSON.from_json(json)\n\n
from_xml ActiveModel::Serializers::Xml.from_xml(xml)\n\n
to_xml ActiveModel::Serializers::Xml.to_xml(options = {}, &block)\nReturns XML representing the model. Configuration can be\npassed through +options+.\n
extended ActiveModel::Callbacks.extended(base)\n\n
define_model_callbacks ActiveModel::Callbacks.define_model_callbacks(*callbacks)\ndefine_model_callbacks accepts the same options define_callbacks does, in case\nyou want to overwrite a default. Besides that, it also accepts an :only option,\nwhere you can choose if you want all types (before, around or after) or\njust some.\n\n  define_model_callbacks :initializer, :only => :after\n\nNote, the <tt>:only => <type></tt> hash will apply to all callbacks defined on\nthat method call.  To get around this you can call the define_model_callbacks\nmethod as many times as you need.\n\n  define_model_callbacks :create, :only => :after\n  define_model_callbacks :update, :only => :before\n  define_model_callbacks :destroy, :only => :around\n\nWould create +after_create+, +before_update+ and +around_destroy+ methods only.\n\nYou can pass in a class to before_<type>, after_<type> and around_<type>,\nin which\ncase the callback will call that class's <action>_<type> method passing\nthe object\nthat the callback is being called on.\n\n  class MyModel\n    extend ActiveModel::Callbacks\n    define_model_callbacks :create\n\n    before_create AnotherClass\n  end\n\n  class AnotherClass\n    def self.before_create( obj )\n obj is the MyModel instance that the callback is being called on\n    end\n  end\n
mass_assignment_authorizer ActiveModel::MassAssignmentSecurity.mass_assignment_authorizer()\n\n
sanitize_for_mass_assignment ActiveModel::MassAssignmentSecurity.sanitize_for_mass_assignment(attributes)\n\n
accessible_attributes ActiveModel::MassAssignmentSecurity::ClassMethods.accessible_attributes()\n\n
active_authorizer ActiveModel::MassAssignmentSecurity::ClassMethods.active_authorizer()\n\n
attr_accessible ActiveModel::MassAssignmentSecurity::ClassMethods.attr_accessible(*names)\nSpecifies a white list of model attributes that can be set via\nmass-assignment.\n\nThis is the opposite of the +attr_protected+ macro: Mass-assignment\nwill only set attributes in this list, to assign to the rest of\nattributes you can use direct writer methods. This is meant to protect\nsensitive attributes from being overwritten by malicious users\ntampering with URLs or forms. If you'd rather start from an all-open\ndefault and restrict attributes as needed, have a look at\n+attr_protected+.\n\n  class Customer\n    include ActiveModel::MassAssignmentSecurity\n\n    attr_accessor :name, :credit_rating\n    attr_accessible :name\n\n    def attributes=(values)\n      sanitize_for_mass_assignment(values).each do |k, v|\n        send("#{k}=", v)\n      end\n    end\n  end\n\n  customer = Customer.new\n  customer.attributes = { :name => "David", :credit_rating => "Excellent" }\n  customer.name          # => "David"\n  customer.credit_rating # => nil\n\n  customer.credit_rating = "Average"\n  customer.credit_rating # => "Average"\n\nNote that using <tt>Hash#except</tt> or <tt>Hash#slice</tt> in place of\n+attr_accessible+\nto sanitize attributes won't provide sufficient protection.\n
attr_protected ActiveModel::MassAssignmentSecurity::ClassMethods.attr_protected(*names)\nAttributes named in this macro are protected from mass-assignment\nwhenever attributes are sanitized before assignment.\n\nMass-assignment to these attributes will simply be ignored, to assign\nto them you can use direct writer methods. This is meant to protect\nsensitive attributes from being overwritten by malicious users\ntampering with URLs or forms.\n\n== Example\n\n  class Customer\n    include ActiveModel::MassAssignmentSecurity\n\n    attr_accessor :name, :credit_rating\n    attr_protected :credit_rating\n\n    def attributes=(values)\n      sanitize_for_mass_assignment(values).each do |k, v|\n        send("#{k}=", v)\n      end\n    end\n  end\n\n  customer = Customer.new\n  customer.attributes = { "name" => "David", "credit_rating" => "Excellent" }\n  customer.name          # => "David"\n  customer.credit_rating # => nil\n\n  customer.credit_rating = "Average"\n  customer.credit_rating # => "Average"\n\nTo start from an all-closed default and enable attributes as needed,\nhave a look at +attr_accessible+.\n\nNote that using <tt>Hash#except</tt> or <tt>Hash#slice</tt> in place of\n+attr_protected+\nto sanitize attributes won't provide sufficient protection.\n
attributes_protected_by_default ActiveModel::MassAssignmentSecurity::ClassMethods.attributes_protected_by_default()\n\n
protected_attributes ActiveModel::MassAssignmentSecurity::ClassMethods.protected_attributes()\n\n
errors ActiveModel::Validations.errors()\nReturns the Errors object that holds all information about attribute error\nmessages.\n
invalid? ActiveModel::Validations.invalid?(context = nil)\nPerforms the opposite of <tt>valid?</tt>. Returns true if errors were added,\nfalse otherwise.\n
run_validations! ActiveModel::Validations.run_validations!()\n\n
valid? ActiveModel::Validations.valid?(context = nil)\nRuns all the specified validations and returns true if no errors were added\notherwise false. Context can optionally be supplied to define which callbacks\nto test against (the context is defined on the validations using :on).\n
validates_with ActiveModel::Validations.validates_with(*args, &block)\nPasses the record off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n  class Person\n    include ActiveModel::Validations\n\n    validates :instance_validations\n\n    def instance_validations\n      validates_with MyValidator\n    end\n  end\n\nPlease consult the class method documentation for more information on\ncreating your own validator.\n\nYou may also pass it multiple classes, like so:\n\n  class Person\n    include ActiveModel::Validations\n\n    validates :instance_validations, :on => :create\n\n    def instance_validations\n      validates_with MyValidator, MyOtherValidator\n    end\n  end\n\nStandard configuration options (:on, :if and :unless), which are\navailable on the class version of validates_with, should instead be\nplaced on the <tt>validates</tt> method as these are applied and tested\nin the callback\n\nIf you pass any additional configuration options, they will be passed\nto the class and available as <tt>options</tt>, please refer to the\nclass version of this method for more information\n
run_validations! ActiveModel::Validations::Callbacks.run_validations!()\nOverwrite run validations to include callbacks.\n
after_validation ActiveModel::Validations::Callbacks::ClassMethods.after_validation(*args,\n&block)\n\n
before_validation ActiveModel::Validations::Callbacks::ClassMethods.before_validation(*args,\n&block)\n\n
_merge_attributes ActiveModel::Validations::HelperMethods._merge_attributes(attr_names)\n\n
validates_acceptance_of ActiveModel::Validations::HelperMethods.validates_acceptance_of(*attr_names)\nEncapsulates the pattern of wanting to validate the acceptance of a\nterms of service check box (or similar agreement). Example:\n\n  class Person < ActiveRecord::Base\n    validates_acceptance_of :terms_of_service\n    validates_acceptance_of :eula, :message => "must be abided"\n  end\n\nIf the database column does not exist, the +terms_of_service+ attribute\nis entirely virtual. This check is performed only if +terms_of_service+\nis not +nil+ and by default on save.\n\nConfiguration options:\n* <tt>:message</tt> - A custom error message (default is: "must be\n  accepted").\n* <tt>:on</tt> - Specifies when this validation is active (default is\n  <tt>:save</tt>, other options are <tt>:create</tt> and\n  <tt>:update</tt>).\n* <tt>:allow_nil</tt> - Skip validation if attribute is +nil+ (default\n  is true).\n* <tt>:accept</tt> - Specifies value that is considered accepted.\n  The default value is a string "1", which makes it easy to relate to\n  an HTML checkbox. This should be set to +true+ if you are validating\n  a database column, since the attribute is typecast from "1" to +true+\n  before validation.\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine\n  if the validation should occur (e.g. <tt>:if => :allow_validation</tt>,\n  or <tt>:if => Proc.new { |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false\n  value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to\n  determine if the validation should not occur (for example,\n  <tt>:unless => :skip_validation</tt>, or\n  <tt>:unless => Proc.new { |user| user.signup_step <= 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or\n  false value.\n
validates_confirmation_of ActiveModel::Validations::HelperMethods.validates_confirmation_of(*attr_names)\nEncapsulates the pattern of wanting to validate a password or email\naddress field with a confirmation. For example:\n\n  Model:\n    class Person < ActiveRecord::Base\n      validates_confirmation_of :user_name, :password\n      validates_confirmation_of :email_address,\n                                :message => "should match confirmation"\n    end\n\n  View:\n    <%= password_field "person", "password" %>\n    <%= password_field "person", "password_confirmation" %>\n\nThe added +password_confirmation+ attribute is virtual; it exists only\nas an in-memory attribute for validating the password. To achieve this,\nthe validation adds accessors to the model for the confirmation\nattribute.\n\nNOTE: This check is performed only if +password_confirmation+ is not\n+nil+, and by default only on save. To require confirmation, make sure\nto add a presence check for the confirmation attribute:\n\n  validates_presence_of :password_confirmation, :if => :password_changed?\n\nConfiguration options:\n* <tt>:message</tt> - A custom error message (default is: "doesn't match\n  confirmation").\n* <tt>:on</tt> - Specifies when this validation is active (default is\n  <tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine\n  if the validation should occur (e.g. <tt>:if => :allow_validation</tt>,\n  or <tt>:if => Proc.new { |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false\n  value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to\n  determine if the validation should not occur (e.g.\n  <tt>:unless => :skip_validation</tt>, or\n  <tt>:unless => Proc.new { |user| user.signup_step <= 2 }</tt>). The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_exclusion_of ActiveModel::Validations::HelperMethods.validates_exclusion_of(*attr_names)\nValidates that the value of the specified attribute is not in a particular\nenumerable object.\n\n  class Person < ActiveRecord::Base\n    validates_exclusion_of :username, :in => %w( admin superuser ), :message =>\n    "You don't belong here"\n    validates_exclusion_of :age, :in => 30..60, :message => "This site is\n    only for under 30 and over 60"\n    validates_exclusion_of :format, :in => %w( mov avi ), :message =>\n    "extension %{value} is not allowed"\n  end\n\nConfiguration options:\n* <tt>:in</tt> - An enumerable object of items that the value shouldn't be\npart of.\n* <tt>:message</tt> - Specifies a custom error message (default is:\n"is reserved").\n* <tt>:allow_nil</tt> - If set to true, skips this validation if the attribute\nis +nil+ (default is +false+).\n* <tt>:allow_blank</tt> - If set to true, skips this validation if the\nattribute is blank (default is +false+).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_format_of ActiveModel::Validations::HelperMethods.validates_format_of(*attr_names)\nValidates whether the value of the specified attribute is of the correct form,\ngoing by the regular expression provided.\nYou can require that the attribute matches the regular expression:\n\n  class Person < ActiveRecord::Base\n    validates_format_of :email, :with =>\n    /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i, :on => :create\n  end\n\nAlternatively, you can require that the specified attribute does _not_\nmatch the regular expression:\n\n  class Person < ActiveRecord::Base\n    validates_format_of :email, :without => /NOSPAM/\n  end\n\nNote: use <tt>\A</tt> and <tt>\Z</tt> to match the start and end of the\nstring, <tt>^</tt> and <tt>$</tt> match the start/end of a line.\n\nYou must pass either <tt>:with</tt> or <tt>:without</tt> as an option. In\naddition, both must be a regular expression,\nor else an exception will be raised.\n\nConfiguration options:\n* <tt>:message</tt> - A custom error message (default is: "is invalid").\n* <tt>:allow_nil</tt> - If set to true, skips this validation if the attribute\nis +nil+ (default is +false+).\n* <tt>:allow_blank</tt> - If set to true, skips this validation if the\nattribute is blank (default is +false+).\n* <tt>:with</tt> - Regular expression that if the attribute matches will\nresult in a successful validation.\n* <tt>:without</tt> - Regular expression that if the attribute does not\nmatch will result in a successful validation.\n* <tt>:on</tt> - Specifies when this validation is active (default is\n<tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_inclusion_of ActiveModel::Validations::HelperMethods.validates_inclusion_of(*attr_names)\nValidates whether the value of the specified attribute is available in a\nparticular enumerable object.\n\n  class Person < ActiveRecord::Base\n    validates_inclusion_of :gender, :in => %w( m f )\n    validates_inclusion_of :age, :in => 0..99\n    validates_inclusion_of :format, :in => %w( jpg gif png ), :message =>\n    "extension %{value} is not included in the list"\n  end\n\nConfiguration options:\n* <tt>:in</tt> - An enumerable object of available items.\n* <tt>:message</tt> - Specifies a custom error message (default is: "is not\nincluded in the list").\n* <tt>:allow_nil</tt> - If set to true, skips this validation if the attribute\nis +nil+ (default is +false+).\n* <tt>:allow_blank</tt> - If set to true, skips this validation if the\nattribute is blank (default is +false+).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_length_of ActiveModel::Validations::HelperMethods.validates_length_of(*attr_names)\nValidates that the specified attribute matches the length restrictions\nsupplied. Only one option can be used at a time:\n\n  class Person < ActiveRecord::Base\n    validates_length_of :first_name, :maximum=>30\n    validates_length_of :last_name, :maximum=>30, :message=>"less than 30\n    if you don't mind"\n    validates_length_of :fax, :in => 7..32, :allow_nil => true\n    validates_length_of :phone, :in => 7..32, :allow_blank => true\n    validates_length_of :user_name, :within => 6..20, :too_long => "pick a\n    shorter name", :too_short => "pick a longer name"\n    validates_length_of :zip_code, :minimum => 5, :too_short => "please\n    enter at least 5 characters"\n    validates_length_of :smurf_leader, :is => 4, :message => "papa is spelled\n    with 4 characters... don't play me."\n    validates_length_of :essay, :minimum => 100, :too_short => "Your essay must\n    be at least 100 words."), :tokenizer => lambda {|str| str.scan(/\w+/) }\n  end\n\nConfiguration options:\n* <tt>:minimum</tt> - The minimum size of the attribute.\n* <tt>:maximum</tt> - The maximum size of the attribute.\n* <tt>:is</tt> - The exact size of the attribute.\n* <tt>:within</tt> - A range specifying the minimum and maximum size of\nthe attribute.\n* <tt>:in</tt> - A synonym(or alias) for <tt>:within</tt>.\n* <tt>:allow_nil</tt> - Attribute may be +nil+; skip validation.\n* <tt>:allow_blank</tt> - Attribute may be blank; skip validation.\n* <tt>:too_long</tt> - The error message if the attribute goes over the\nmaximum (default is: "is too long (maximum is %{count} characters)").\n* <tt>:too_short</tt> - The error message if the attribute goes under the\nminimum (default is: "is too short (min is %{count} characters)").\n* <tt>:wrong_length</tt> - The error message if using the <tt>:is</tt>\nmethod and the attribute is the wrong size (default is: "is the wrong length\n(should be %{count} characters)").\n* <tt>:message</tt> - The error message to use for a <tt>:minimum</tt>,\n<tt>:maximum</tt>, or <tt>:is</tt> violation.  An alias of the appropriate\n<tt>too_long</tt>/<tt>too_short</tt>/<tt>wrong_length</tt> message.\n* <tt>:on</tt> - Specifies when this validation is active (default is\n<tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:tokenizer</tt> - Specifies how to split up the attribute\nstring. (e.g. <tt>:tokenizer => lambda {|str| str.scan(/\w+/)}</tt> to\n  count words as in above example.)\n  Defaults to <tt>lambda{ |value| value.split(//) }</tt> which counts\n  individual characters.\n
validates_numericality_of ActiveModel::Validations::HelperMethods.validates_numericality_of(*attr_names)\nValidates whether the value of the specified attribute is numeric by trying\nto convert it to\na float with Kernel.Float (if <tt>only_integer</tt> is false) or applying\nit to the regular expression\n<tt>/\A[\+\-]?\d+\Z/</tt> (if <tt>only_integer</tt> is set to true).\n\n  class Person < ActiveRecord::Base\n    validates_numericality_of :value, :on => :create\n  end\n\nConfiguration options:\n* <tt>:message</tt> - A custom error message (default is: "is not a number").\n* <tt>:on</tt> - Specifies when this validation is active (default is\n<tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:only_integer</tt> - Specifies whether the value has to be an integer,\ne.g. an integral value (default is +false+).\n* <tt>:allow_nil</tt> - Skip validation if attribute is +nil+ (default\nis +false+). Notice that for fixnum and float columns empty strings are\nconverted to +nil+.\n* <tt>:greater_than</tt> - Specifies the value must be greater than the\nsupplied value.\n* <tt>:greater_than_or_equal_to</tt> - Specifies the value must be greater\nthan or equal the supplied value.\n* <tt>:equal_to</tt> - Specifies the value must be equal to the supplied value.\n* <tt>:less_than</tt> - Specifies the value must be less than the supplied\nvalue.\n* <tt>:less_than_or_equal_to</tt> - Specifies the value must be less than\nor equal the supplied value.\n* <tt>:odd</tt> - Specifies the value must be an odd number.\n* <tt>:even</tt> - Specifies the value must be an even number.\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n\nThe following checks can also be supplied with a proc or a symbol which\ncorresponds to a method:\n* <tt>:greater_than</tt>\n* <tt>:greater_than_or_equal_to</tt>\n* <tt>:equal_to</tt>\n* <tt>:less_than</tt>\n* <tt>:less_than_or_equal_to</tt>\n\n  class Person < ActiveRecord::Base\n    validates_numericality_of :width, :less_than => Proc.new { |person|\n    person.height }\n    validates_numericality_of :width, :greater_than => :minimum_weight\n  end\n
validates_presence_of ActiveModel::Validations::HelperMethods.validates_presence_of(*attr_names)\nValidates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default on save. Example:\n\n  class Person < ActiveRecord::Base\n    validates_presence_of :first_name\n  end\n\nThe first_name attribute must be in the object and it cannot be blank.\n\nIf you want to validate the presence of a boolean field (where the real\nvalues are true and false),\nyou will want to use <tt>validates_inclusion_of :field_name, :in => [true,\nfalse]</tt>.\n\nThis is due to the way Object#blank? handles boolean values: <tt>false.blank? #\n=> true</tt>.\n\nConfiguration options:\n* <tt>message</tt> - A custom error message (default is: "can't be blank").\n* <tt>on</tt> - Specifies when this validation is active (default is\n<tt>:save</tt>, other options <tt>:create</tt>,\n  <tt>:update</tt>).\n* <tt>if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or false\n  value.\n* <tt>unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or false\n  value.\n
validates_size_of ActiveModel::Validations::HelperMethods.validates_size_of(*attr_names)\n\n
attribute_method? ActiveModel::Validations::ClassMethods.attribute_method?(attribute)\nCheck if method is an attribute method or not.\n
inherited ActiveModel::Validations::ClassMethods.inherited(base)\nCopy validators on inheritance.\n
validate ActiveModel::Validations::ClassMethods.validate(*args, &block)\nAdds a validation method or block to the class. This is useful when\noverriding the +validate+ instance method becomes too unwieldy and\nyou're looking for more descriptive declaration of your validations.\n\nThis can be done with a symbol pointing to a method:\n\n  class Comment\n    include ActiveModel::Validations\n\n    validate :must_be_friends\n\n    def must_be_friends\n      errors.add(:base, "Must be friends to leave a comment") unless\n      commenter.friend_of?(commentee)\n    end\n  end\n\nOr with a block which is passed with the current record to be validated:\n\n  class Comment\n    include ActiveModel::Validations\n\n    validate do |comment|\n      comment.must_be_friends\n    end\n\n    def must_be_friends\n      errors.add(:base, ("Must be friends to leave a comment") unless\n      commenter.friend_of?(commentee)\n    end\n  end\n
validates ActiveModel::Validations::ClassMethods.validates(*attributes)\nThis method is a shortcut to all default validators and any custom\nvalidator classes ending in 'Validator'. Note that Rails default\nvalidators can be overridden inside specific classes by creating\ncustom validator classes in their place such as PresenceValidator.\n\nExamples of using the default rails validators:\n\n  validates :terms, :acceptance => true\n  validates :password, :confirmation => true\n  validates :username, :exclusion => { :in => %w(admin superuser) }\n  validates :email, :format => { :with =>\n  /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i, :on => :create }\n  validates :age, :inclusion => { :in => 0..9 }\n  validates :first_name, :length => { :maximum => 30 }\n  validates :age, :numericality => true\n  validates :username, :presence => true\n  validates :username, :uniqueness => true\n\nThe power of the +validates+ method comes when using custom validators\nand default validators in one call for a given attribute e.g.\n\n  class EmailValidator < ActiveModel::EachValidator\n    def validate_each(record, attribute, value)\n      record.errors[attribute] << (options[:message] || "is not an email")\n      unless\n        value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i\n    end\n  end\n\n  class Person\n    include ActiveModel::Validations\n    attr_accessor :name, :email\n\n    validates :name, :presence => true, :uniqueness => true, :length => {\n    :maximum => 100 }\n    validates :email, :presence => true, :email => true\n  end\n\nValidator classes may also exist within the class being validated\nallowing custom modules of validators to be included as needed e.g.\n\n  class Film\n    include ActiveModel::Validations\n\n    class TitleValidator < ActiveModel::EachValidator\n      def validate_each(record, attribute, value)\n        record.errors[attribute] << "must start with 'the'" unless value\n        =~ /\Athe/i\n      end\n    end\n\n    validates :name, :title => true\n  end\n\nThe validators hash can also handle regular expressions, ranges and arrays:\n\n  validates :email, :format => /@/\n  validates :gender, :inclusion => %w(male female)\n  validates :password, :length => 6..20\n\nFinally, the options :if, :unless, :on, :allow_blank and :allow_nil can\nbe given\nto one specific validator:\n\n  validates :password, :presence => { :if => :password_required? },\n  :confirmation => true\n\nOr to all at the same time:\n\n  validates :password, :presence => true, :confirmation => true, :if =>\n  :password_required?\n
validates_each ActiveModel::Validations::ClassMethods.validates_each(*attr_names, &block)\nValidates each attribute against a block.\n\n  class Person\n    include ActiveModel::Validations\n\n    attr_accessor :first_name, :last_name\n\n    validates_each :first_name, :last_name do |record, attr, value|\n      record.errors.add attr, 'starts with z.' if value.to_s[0] == ?z\n    end\n  end\n\nOptions:\n* <tt>:on</tt> - Specifies when this validation is active (default is\n  <tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.\n* <tt>:allow_blank</tt> - Skip validation if attribute is blank.\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine\n  if the validation should occur (e.g. <tt>:if => :allow_validation</tt>,\n  or <tt>:if => Proc.new { |user| user.signup_step > 2 }</tt>). The method,\n  proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or\n  <tt>:unless => Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_with ActiveModel::Validations::ClassMethods.validates_with(*args, &block)\nPasses the record off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n  class Person\n    include ActiveModel::Validations\n    validates_with MyValidator\n  end\n\n  class MyValidator < ActiveModel::Validator\n    def validate(record)\n      if some_complex_logic\n        record.errors[:base] << "This record is invalid"\n      end\n    end\n\n    private\n      def some_complex_logic\n ...\n      end\n  end\n\nYou may also pass it multiple classes, like so:\n\n  class Person\n    include ActiveModel::Validations\n    validates_with MyValidator, MyOtherValidator, :on => :create\n  end\n\nConfiguration options:\n* <tt>on</tt> - Specifies when this validation is active\n  (<tt>:create</tt> or <tt>:update</tt>\n* <tt>if</tt> - Specifies a method, proc or string to call to determine\n  if the validation should occur (e.g. <tt>:if => :allow_validation</tt>,\n  or <tt>:if => Proc.new { |user| user.signup_step > 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or false\n  value.\n* <tt>unless</tt> - Specifies a method, proc or string to call to\n  determine if the validation should not occur\n  (e.g. <tt>:unless => :skip_validation</tt>, or\n  <tt>:unless => Proc.new { |user| user.signup_step <= 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or false\n  value.\n\nIf you pass any additional configuration options, they will be passed\nto the class and available as <tt>options</tt>:\n\n  class Person\n    include ActiveModel::Validations\n    validates_with MyValidator, :my_custom_key => "my custom value"\n  end\n\n  class MyValidator < ActiveModel::Validator\n    def validate(record)\n      options[:my_custom_key] # => "my custom value"\n    end\n  end\n
validators ActiveModel::Validations::ClassMethods.validators()\nList all validators that are being used to validate the model using\n+validates_with+ method.\n
validators_on ActiveModel::Validations::ClassMethods.validators_on(attribute)\nList all validators that being used to validate a specific attribute.\n
notify_observers ActiveModel::Observing.notify_observers(method)\nFires notifications to model's observers\n\ndef save\n  notify_observers(:before_save)\n  ...\n  notify_observers(:after_save)\nend\n
add_observer ActiveModel::Observing::ClassMethods.add_observer(observer)\n\n
count_observers ActiveModel::Observing::ClassMethods.count_observers()\n\n
inherited ActiveModel::Observing::ClassMethods.inherited(subclass)\nNotify observers when the observed class is subclassed.\n
instantiate_observers ActiveModel::Observing::ClassMethods.instantiate_observers()\nInstantiate the global Active Record observers.\n
notify_observers ActiveModel::Observing::ClassMethods.notify_observers(*arg)\n\n
observers ActiveModel::Observing::ClassMethods.observers()\nGets the current observers.\n
observers= ActiveModel::Observing::ClassMethods.observers=(*values)\n== Active Model Observers Activation\n\nActivates the observers assigned. Examples:\n Calls PersonObserver.instance\n  ActiveRecord::Base.observers = :person_observer\n Calls Cacher.instance and GarbageCollector.instance\n  ActiveRecord::Base.observers = :cacher, :garbage_collector\n Same as above, just using explicit class references\n  ActiveRecord::Base.observers = Cacher, GarbageCollector\n\nNote: Setting this does not instantiate the observers yet.\n+instantiate_observers+ is called during startup, and before\neach development request.\n
model_name_from_record_or_class ActiveModel::Naming.model_name_from_record_or_class(record_or_class)\n\n
plural ActiveModel::Naming.plural(record_or_class)\nReturns the plural class name of a record or class. Examples:\n\n  ActiveModel::Naming.plural(post)             # => "posts"\n  ActiveModel::Naming.plural(Highrise::Person) # => "highrise_people"\n
singular ActiveModel::Naming.singular(record_or_class)\nReturns the singular class name of a record or class. Examples:\n\n  ActiveModel::Naming.singular(post)             # => "post"\n  ActiveModel::Naming.singular(Highrise::Person) # => "highrise_person"\n
uncountable? ActiveModel::Naming.uncountable?(record_or_class)\nIdentifies whether the class name of a record or class is\nuncountable. Examples:\n\n  ActiveModel::Naming.uncountable?(Sheep) # => true\n  ActiveModel::Naming.uncountable?(Post) => false\n
model_name ActiveModel::Naming.model_name()\nReturns an ActiveModel::Name object for module. It can be\nused to retrieve all kinds of naming-related information.\n
human_attribute_name ActiveModel::Translation.human_attribute_name(attribute, options = {})\nTransforms attribute names into a more human format, such as "First name"\ninstead of "first_name".\n\n  Person.human_attribute_name("first_name") # => "First name"\n\nSpecify +options+ with additional translating options.\n
human_name ActiveModel::Translation.human_name(*args)\nModel.human_name is deprecated. Use Model.model_name.human instead.\n
i18n_scope ActiveModel::Translation.i18n_scope()\nReturns the i18n_scope for the class. Overwrite if you want custom lookup.\n
lookup_ancestors ActiveModel::Translation.lookup_ancestors()\nWhen localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human,\nActiveModel::Errors#full_messages and\nActiveModel::Translation#human_attribute_name.\n
attribute_method? ActiveModel::AttributeMethods.attribute_method?(attr_name)\n\n
guard_private_attribute_method! ActiveModel::AttributeMethods.guard_private_attribute_method!(method_name,\nargs)\nprevent method_missing from calling private methods with #send\n
match_attribute_method? ActiveModel::AttributeMethods.match_attribute_method?(method_name)\nReturns a struct representing the matching attribute method.\nThe struct's attributes are prefix, base and suffix.\n
method_missing ActiveModel::AttributeMethods.method_missing(method_id, *args, &block)\nAllows access to the object attributes, which are held in the\n<tt>@attributes</tt> hash, as though they were first-class methods. So a\nPerson class with a name attribute can use Person#name and Person#name=\nand never directly use the attributes hash -- except for multiple assigns\nwith ActiveRecord#attributes=. A Milestone class can also ask\nMilestone#completed? to test that the completed attribute is not +nil+\nor 0.\n\nIt's also possible to instantiate related objects, so a Client class\nbelonging to the clients table with a +master_id+ foreign key can\ninstantiate master through Client#master.\n
missing_attribute ActiveModel::AttributeMethods.missing_attribute(attr_name, stack)\n\n
respond_to? ActiveModel::AttributeMethods.respond_to?(method, include_private_methods\n= false)\n\n
respond_to_without_attributes? ActiveModel::AttributeMethods.respond_to_without_attributes?(method,\ninclude_private_methods = false)\nA Person object with a name attribute can ask\n<tt>person.respond_to?(:name)</tt>,\n<tt>person.respond_to?(:name=)</tt>, and <tt>person.respond_to?(:name?)</tt>\nwhich will all return +true+.\n
alias_attribute ActiveModel::AttributeMethods::ClassMethods.alias_attribute(new_name, old_name)\n\n
attribute_method_affix ActiveModel::AttributeMethods::ClassMethods.attribute_method_affix(*affixes)\nDeclares a method available for all attributes with the given prefix\nand suffix. Uses +method_missing+ and <tt>respond_to?</tt> to rewrite\nthe method.\n{prefix}#{attr}#{suffix}(*args, &block)\n\nto\n{prefix}attribute#{suffix}(#{attr}, *args, &block)\n\nAn <tt>#{prefix}attribute#{suffix}</tt> instance method must exist and\naccept at least the +attr+ argument.\n\nFor example:\n\n  class Person\n\n    include ActiveModel::AttributeMethods\n    attr_accessor :name\n    attribute_method_affix :prefix => 'reset_', :suffix => '_to_default!'\n    define_attribute_methods [:name]\n\n    private\n\n    def reset_attribute_to_default!(attr)\n      ...\n    end\n  end\n\n  person = Person.new\n  person.name                         # => 'Gem'\n  person.reset_name_to_default!\n  person.name                         # => 'Gemma'\n
attribute_method_prefix ActiveModel::AttributeMethods::ClassMethods.attribute_method_prefix(*prefixes)\nDeclares a method available for all attributes with the given prefix.\nUses +method_missing+ and <tt>respond_to?</tt> to rewrite the method.\n{prefix}#{attr}(*args, &block)\n\nto\n{prefix}attribute(#{attr}, *args, &block)\n\nAn instance method <tt>#{prefix}attribute</tt> must exist and accept\nat least the +attr+ argument.\n\nFor example:\n\n  class Person\n\n    include ActiveModel::AttributeMethods\n    attr_accessor :name\n    attribute_method_prefix 'clear_'\n    define_attribute_methods [:name]\n\n    private\n\n    def clear_attribute(attr)\n      send("#{attr}=", nil)\n    end\n  end\n\n  person = Person.new\n  person.name = "Bob"\n  person.name          # => "Bob"\n  person.clear_name\n  person.name          # => nil\n
attribute_method_suffix ActiveModel::AttributeMethods::ClassMethods.attribute_method_suffix(*suffixes)\nDeclares a method available for all attributes with the given suffix.\nUses +method_missing+ and <tt>respond_to?</tt> to rewrite the method.\n{attr}#{suffix}(*args, &block)\n\nto\n\n  attribute#{suffix}(#{attr}, *args, &block)\n\nAn <tt>attribute#{suffix}</tt> instance method must exist and accept at least\nthe +attr+ argument.\n\nFor example:\n\n  class Person\n\n    include ActiveModel::AttributeMethods\n    attr_accessor :name\n    attribute_method_suffix '_short?'\n    define_attribute_methods [:name]\n\n    private\n\n    def attribute_short?(attr)\n      send(attr).length < 5\n    end\n  end\n\n  person = Person.new\n  person.name = "Bob"\n  person.name          # => "Bob"\n  person.name_short?   # => true\n
attribute_methods_generated? ActiveModel::AttributeMethods::ClassMethods.attribute_methods_generated?()\nReturns true if the attribute methods defined have been generated.\n
define_attr_method ActiveModel::AttributeMethods::ClassMethods.define_attr_method(name,\nvalue=nil, &block)\nDefines an "attribute" method (like +inheritance_column+ or +table_name+).\nA new (class) method will be created with the given name. If a value is\nspecified, the new method will return that value (as a string).\nOtherwise, the given block will be used to compute the value of the\nmethod.\n\nThe original method will be aliased, with the new name being prefixed\nwith "original_". This allows the new method to access the original\nvalue.\n\nExample:\n\n  class Person\n\n    include ActiveModel::AttributeMethods\n\n    cattr_accessor :primary_key\n    cattr_accessor :inheritance_column\n\n    define_attr_method :primary_key, "sysid"\n    define_attr_method( :inheritance_column ) do\n      original_inheritance_column + "_id"\n    end\n\n  end\n\nProvides you with:\n\n  AttributePerson.primary_key\n => "sysid"\n  AttributePerson.inheritance_column = 'address'\n  AttributePerson.inheritance_column\n => 'address_id'\n
define_attribute_methods ActiveModel::AttributeMethods::ClassMethods.define_attribute_methods(attr_names)\nDeclares a the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n\nTo use, pass in an array of attribute names (as strings or symbols),\nbe sure to declare +define_attribute_methods+ after you define any\nprefix, suffix or affix methods, or they will not hook in.\n\n  class Person\n\n    include ActiveModel::AttributeMethods\n    attr_accessor :name, :age, :address\n    attribute_method_prefix 'clear_'\n Call to define_attribute_methods must appear after the\n attribute_method_prefix, attribute_method_suffix or\n attribute_method_affix declares.\n    define_attribute_methods [:name, :age, :address]\n\n    private\n\n    def clear_attribute(attr)\n      ...\n    end\n  end\n
instance_method_already_implemented? ActiveModel::AttributeMethods::ClassMethods.instance_method_already_implemented?(method_name)\n\n
undefine_attribute_methods ActiveModel::AttributeMethods::ClassMethods.undefine_attribute_methods()\nRemoves all the previously dynamically defined methods from the class\n
attribute_change ActiveModel::Dirty.attribute_change(attr)\nHandle <tt>*_change</tt> for +method_missing+.\n
attribute_changed? ActiveModel::Dirty.attribute_changed?(attr)\nHandle <tt>*_changed?</tt> for +method_missing+.\n
attribute_was ActiveModel::Dirty.attribute_was(attr)\nHandle <tt>*_was</tt> for +method_missing+.\n
attribute_will_change! ActiveModel::Dirty.attribute_will_change!(attr)\nHandle <tt>*_will_change!</tt> for +method_missing+.\n
changed ActiveModel::Dirty.changed()\nList of attributes with unsaved changes.\n  person.changed # => []\n  person.name = 'bob'\n  person.changed # => ['name']\n
changed? ActiveModel::Dirty.changed?()\nDo any attributes have unsaved changes?\n  person.changed? # => false\n  person.name = 'bob'\n  person.changed? # => true\n
changed_attributes ActiveModel::Dirty.changed_attributes()\nMap of change <tt>attr => original value</tt>.\n
changes ActiveModel::Dirty.changes()\nMap of changed attrs => [original value, new value].\n  person.changes # => {}\n  person.name = 'bob'\n  person.changes # => { 'name' => ['bill', 'bob'] }\n
previous_changes ActiveModel::Dirty.previous_changes()\nMap of attributes that were changed when the model was saved.\n  person.name # => 'bob'\n  person.name = 'robert'\n  person.save\n  person.previous_changes # => {'name' => ['bob, 'robert']}\n
reset_attribute! ActiveModel::Dirty.reset_attribute!(attr)\nHandle <tt>reset_*!</tt> for +method_missing+.\n
add_to_base ActiveModel::DeprecatedErrorMethods.add_to_base(msg)\n\n
each_full ActiveModel::DeprecatedErrorMethods.each_full()\n\n
invalid? ActiveModel::DeprecatedErrorMethods.invalid?(attribute)\n\n
on ActiveModel::DeprecatedErrorMethods.on(attribute)\n\n
on_base ActiveModel::DeprecatedErrorMethods.on_base()\n\n
assert_boolean ActiveModel::Lint::Tests.assert_boolean(result, name)\n\n
model ActiveModel::Lint::Tests.model()\n\n
test_errors_aref ActiveModel::Lint::Tests.test_errors_aref()\n== Errors Testing\n\nReturns an object that has :[] and :full_messages defined on it. See below\nfor more details.\n\nReturns an Array of Strings that are the errors for the attribute in\nquestion. If localization is used, the Strings should be localized\nfor the current locale. If no error is present, this method should\nreturn an empty Array.\n
test_errors_full_messages ActiveModel::Lint::Tests.test_errors_full_messages()\nReturns an Array of all error messages for the object. Each message\nshould contain information about the field, if applicable.\n
test_model_naming ActiveModel::Lint::Tests.test_model_naming()\n== Naming\n\nModel.model_name must return a string with some convenience methods as\n:human and :partial_path. Check ActiveModel::Naming for more information.\n
test_persisted? ActiveModel::Lint::Tests.test_persisted?()\n== Responds to <tt>persisted?</tt>\n\nReturns a boolean that specifies whether the object has been persisted yet.\nThis is used when calculating the URL for an object. If the object is\nnot persisted, a form for that object, for instance, will be POSTed to the\ncollection. If it is persisted, a form for the object will be PUT to the\nURL for the object.\n
test_to_key ActiveModel::Lint::Tests.test_to_key()\n== Responds to <tt>to_key</tt>\n\nReturns an Enumerable of all (primary) key attributes\nor nil if model.persisted? is false\n
test_to_param ActiveModel::Lint::Tests.test_to_param()\n== Responds to <tt>to_param</tt>\n\nReturns a string representing the object's key suitable for use in URLs\nor nil if model.persisted? is false.\n\nImplementers can decide to either raise an exception or provide a default\nin case the record uses a composite primary key. There are no tests for this\nbehavior in lint because it doesn't make sense to force any of the possible\nimplementation strategies on the implementer. However, if the resource is\nnot persisted?, then to_param should always return nil.\n
test_valid? ActiveModel::Lint::Tests.test_valid?()\n== Responds to <tt>valid?</tt>\n\nReturns a boolean that specifies whether the object is in a valid or invalid\nstate.\n
serializable_hash ActiveModel::Serialization.serializable_hash(options = nil)\n\n
to_key ActiveModel::Conversion.to_key()\nReturns an Enumerable of all key attributes if any is set, regardless\nif the object is persisted or not.\n\nNote the default implementation uses persisted? just because all objects\nin Ruby 1.8.x responds to :id.\n
to_model ActiveModel::Conversion.to_model()\nIf your object is already designed to implement all of the Active Model\nyou can use the default to_model implementation, which simply returns\nself.\n\nIf your model does not act like an Active Model object, then you should\ndefine <tt>:to_model</tt> yourself returning a proxy object that wraps\nyour object with Active Model compliant methods.\n
to_param ActiveModel::Conversion.to_param()\nReturns a string representing the object's key suitable for use in URLs,\nor nil if persisted? is false\n
debug_protected_attribute_removal ActiveModel::MassAssignmentSecurity::Sanitizer.debug_protected_attribute_removal(attributes,\nsanitized_attributes)\n\n
sanitize ActiveModel::MassAssignmentSecurity::Sanitizer.sanitize(attributes)\nReturns all attributes not denied by the authorizer.\n
warn! ActiveModel::MassAssignmentSecurity::Sanitizer.warn!(attrs)\n\n
serializable_add_includes ActiveRecord::Serialization.serializable_add_includes(options = {})\nAdd associations specified via the <tt>:includes</tt> option.\n\nExpects a block that takes as arguments:\n  +association+ - name of the association\n  +records+     - the association record(s) to be serialized\n  +opts+        - options for the association records\n
serializable_hash ActiveRecord::Serialization.serializable_hash(options = nil)\n\n
to_xml ActiveRecord::Serialization.to_xml(options = {}, &block)\nBuilds an XML document to represent the model. Some configuration is\navailable through +options+. However more complicated cases should\noverride ActiveRecord::Base#to_xml.\n\nBy default the generated XML document will include the processing\ninstruction and all the object's attributes. For example:\n\n  <?xml version="1.0" encoding="UTF-8"?>\n  <topic>\n    <title>The First Topic</title>\n    <author-name>David</author-name>\n    <id type="integer">1</id>\n    <approved type="boolean">false</approved>\n    <replies-count type="integer">0</replies-count>\n    <bonus-time type="datetime">2000-01-01T08:28:00+12:00</bonus-time>\n    <written-on type="datetime">2003-07-16T09:28:00+1200</written-on>\n    <content>Have a nice day</content>\n    <author-email-address>david@loudthinking.com</author-email-address>\n    <parent-id></parent-id>\n    <last-read type="date">2004-04-15</last-read>\n  </topic>\n\nThis behavior can be controlled with <tt>:only</tt>, <tt>:except</tt>,\n<tt>:skip_instruct</tt>, <tt>:skip_types</tt>, <tt>:dasherize</tt> and\n<tt>:camelize</tt> .\nThe <tt>:only</tt> and <tt>:except</tt> options are the same as for the\n+attributes+ method. The default is to dasherize all column names, but you\ncan disable this setting <tt>:dasherize</tt> to +false+. Setting\n<tt>:camelize</tt>\nto +true+ will camelize all column names - this also overrides\n<tt>:dasherize</tt>.\nTo not have the column type included in the XML output set <tt>:skip_types</tt>\nto +true+.\n\nFor instance:\n\n  topic.to_xml(:skip_instruct => true, :except => [ :id, :bonus_time,\n  :written_on, :replies_count ])\n\n  <topic>\n    <title>The First Topic</title>\n    <author-name>David</author-name>\n    <approved type="boolean">false</approved>\n    <content>Have a nice day</content>\n    <author-email-address>david@loudthinking.com</author-email-address>\n    <parent-id></parent-id>\n    <last-read type="date">2004-04-15</last-read>\n  </topic>\n\nTo include first level associations use <tt>:include</tt>:\n\n  firm.to_xml :include => [ :account, :clients ]\n\n  <?xml version="1.0" encoding="UTF-8"?>\n  <firm>\n    <id type="integer">1</id>\n    <rating type="integer">1</rating>\n    <name>37signals</name>\n    <clients type="array">\n      <client>\n        <rating type="integer">1</rating>\n        <name>Summit</name>\n      </client>\n      <client>\n        <rating type="integer">1</rating>\n        <name>Microsoft</name>\n      </client>\n    </clients>\n    <account>\n      <id type="integer">1</id>\n      <credit-limit type="integer">50</credit-limit>\n    </account>\n  </firm>\n\nAdditionally, the record being serialized will be passed to a Proc's second\nparameter.  This allows for ad hoc additions to the resultant document that\nincorporate the context of the record being serialized. And by leveraging the\nclosure created by a Proc, to_xml can be used to add elements that normally\nfall\noutside of the scope of the model -- for example, generating and appending URLs\nassociated with models.\n\n  proc = Proc.new { |options, record| options[:builder].tag!('name-reverse',\n  record.name.reverse) }\n  firm.to_xml :procs => [ proc ]\n\n  <firm>\n ... normal attributes as shown above ...\n    <name-reverse>slangis73</name-reverse>\n  </firm>\n\nTo include deeper levels of associations pass a hash like this:\n\n  firm.to_xml :include => {:account => {}, :clients => {:include => :address}}\n  <?xml version="1.0" encoding="UTF-8"?>\n  <firm>\n    <id type="integer">1</id>\n    <rating type="integer">1</rating>\n    <name>37signals</name>\n    <clients type="array">\n      <client>\n        <rating type="integer">1</rating>\n        <name>Summit</name>\n        <address>\n          ...\n        </address>\n      </client>\n      <client>\n        <rating type="integer">1</rating>\n        <name>Microsoft</name>\n        <address>\n          ...\n        </address>\n      </client>\n    </clients>\n    <account>\n      <id type="integer">1</id>\n      <credit-limit type="integer">50</credit-limit>\n    </account>\n  </firm>\n\nTo include any methods on the model being called use <tt>:methods</tt>:\n\n  firm.to_xml :methods => [ :calculated_earnings, :real_earnings ]\n\n  <firm>\n ... normal attributes as shown above ...\n    <calculated-earnings>100000000000000000</calculated-earnings>\n    <real-earnings>5</real-earnings>\n  </firm>\n\nTo call any additional Procs use <tt>:procs</tt>. The Procs are passed a\nmodified version of the options hash that was given to +to_xml+:\n\n  proc = Proc.new { |options| options[:builder].tag!('abc', 'def') }\n  firm.to_xml :procs => [ proc ]\n\n  <firm>\n ... normal attributes as shown above ...\n    <abc>def</abc>\n  </firm>\n\nAlternatively, you can yield the builder object as part of the +to_xml+ call:\n\n  firm.to_xml do |xml|\n    xml.creator do\n      xml.first_name "David"\n      xml.last_name "Heinemeier Hansson"\n    end\n  end\n\n  <firm>\n ... normal attributes as shown above ...\n    <creator>\n      <first_name>David</first_name>\n      <last_name>Heinemeier Hansson</last_name>\n    </creator>\n  </firm>\n\nAs noted above, you may override +to_xml+ in your ActiveRecord::Base\nsubclasses to have complete control about what's generated. The general\nform of doing this is:\n\n  class IHaveMyOwnXML < ActiveRecord::Base\n    def to_xml(options = {})\n      options[:indent] ||= 2\n      xml = options[:builder] ||= Builder::XmlMarkup.new(:indent =>\n      options[:indent])\n      xml.instruct! unless options[:skip_instruct]\n      xml.level_one do\n        xml.tag!(:second_level, 'content')\n      end\n    end\n  end\n
method_added ActiveRecord::Callbacks::ClassMethods.method_added(meth)\n\n
perform_validations ActiveRecord::Validations.perform_validations(options={})\n\n
save ActiveRecord::Validations.save(options={})\nThe validation process on save can be skipped by passing false. The regular\nBase#save method is\nreplaced with this when the validations module is mixed in, which it is\nby default.\n
save! ActiveRecord::Validations.save!(options={})\nAttempts to save the record just like Base#save but will raise a RecordInvalid\nexception instead of returning false\nif the record is not valid.\n
valid? ActiveRecord::Validations.valid?(context = nil)\nRuns all the specified validations and returns true if no errors were added\notherwise false.\n
create! ActiveRecord::Validations::ClassMethods.create!(attributes = nil, &block)\nCreates an object just like Base.create but calls save! instead of save\nso an exception is raised if the record is invalid.\n
validates_associated ActiveRecord::Validations::ClassMethods.validates_associated(*attr_names)\nValidates whether the associated object or objects are all valid\nthemselves. Works with any kind of association.\n\n  class Book < ActiveRecord::Base\n    has_many :pages\n    belongs_to :library\n\n    validates_associated :pages, :library\n  end\n\nWarning: If, after the above definition, you then wrote:\n\n  class Page < ActiveRecord::Base\n    belongs_to :book\n\n    validates_associated :book\n  end\n\nthis would specify a circular dependency and cause infinite recursion.\n\nNOTE: This validation will not fail if the association hasn't been assigned. If\nyou want to\nensure that the association is both present and guaranteed to be valid,\nyou also need to\nuse +validates_presence_of+.\n\nConfiguration options:\n* <tt>:message</tt> - A custom error message (default is: "is invalid")\n* <tt>:on</tt> - Specifies when this validation is active (default is\n<tt>:save</tt>, other options <tt>:create</tt>, <tt>:update</tt>).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or <tt>:unless =>\n  Proc.new { |user| user.signup_step <= 2 }</tt>).  The\n  method, proc or string should return or evaluate to a true or false value.\n
validates_uniqueness_of ActiveRecord::Validations::ClassMethods.validates_uniqueness_of(*attr_names)\nValidates whether the value of the specified attributes are unique across\nthe system.\nUseful for making sure that only one user\ncan be named "davidhh".\n\n  class Person < ActiveRecord::Base\n    validates_uniqueness_of :user_name, :scope => :account_id\n  end\n\nIt can also validate whether the value of the specified attributes are unique\nbased on multiple\nscope parameters.  For example, making sure that a teacher can only be on\nthe schedule once\nper semester for a particular class.\n\n  class TeacherSchedule < ActiveRecord::Base\n    validates_uniqueness_of :teacher_id, :scope => [:semester_id, :class_id]\n  end\n\nWhen the record is created, a check is performed to make sure that no record\nexists in the database\nwith the given value for the specified attribute (that maps to a column). When\nthe record is updated,\nthe same check is made but disregarding the record itself.\n\nConfiguration options:\n* <tt>:message</tt> - Specifies a custom error message (default is: "has\nalready been taken").\n* <tt>:scope</tt> - One or more columns by which to limit the scope of the\nuniqueness constraint.\n* <tt>:case_sensitive</tt> - Looks for an exact match. Ignored by non-text\ncolumns (+true+ by default).\n* <tt>:allow_nil</tt> - If set to true, skips this validation if the attribute\nis +nil+ (default is +false+).\n* <tt>:allow_blank</tt> - If set to true, skips this validation if the\nattribute is blank (default is +false+).\n* <tt>:if</tt> - Specifies a method, proc or string to call to determine if\nthe validation should\n  occur (e.g. <tt>:if => :allow_validation</tt>, or <tt>:if => Proc.new {\n  |user| user.signup_step > 2 }</tt>).\n  The method, proc or string should return or evaluate to a true or false\n  value.\n* <tt>:unless</tt> - Specifies a method, proc or string to call to determine\nif the validation should\n  not occur (e.g. <tt>:unless => :skip_validation</tt>, or\n  <tt>:unless => Proc.new { |user| user.signup_step <= 2 }</tt>).  The method,\n  proc or string should\n  return or evaluate to a true or false value.\n\n=== Concurrency and integrity\n\nUsing this validation method in conjunction with ActiveRecord::Base#save\ndoes not guarantee the absence of duplicate record insertions, because\nuniqueness checks on the application level are inherently prone to race\nconditions. For example, suppose that two users try to post a Comment at\nthe same time, and a Comment's title must be unique. At the database-level,\nthe actions performed by these users could be interleaved in the following\nmanner:\n\n              User 1                 |               User 2\n ------------------------------------+--------------------------------------\n User 1 checks whether there's     |\n already a comment with the title  |\n 'My Post'. This is not the case.  |\n SELECT * FROM comments              |\n WHERE title = 'My Post'             |\n                                     |\n                                     | # User 2 does the same thing and also\n                                     | # infers that his title is unique.\n                                     | SELECT * FROM comments\n                                     | WHERE title = 'My Post'\n                                     |\n User 1 inserts his comment.       |\n INSERT INTO comments                |\n (title, content) VALUES             |\n ('My Post', 'hi!')                  |\n                                     |\n                                     | # User 2 does the same thing.\n                                     | INSERT INTO comments\n                                     | (title, content) VALUES\n                                     | ('My Post', 'hello!')\n                                     |\n                                     | # ^^^^^^\n                                     | # Boom! We now have a duplicate\n                                     | # title!\n\nThis could even happen if you use transactions with the 'serializable'\nisolation level. There are several ways to get around this problem:\n\n- By locking the database table before validating, and unlocking it after\n  saving. However, table locking is very expensive, and thus not\n  recommended.\n- By locking a lock file before validating, and unlocking it after saving.\n  This does not work if you've scaled your Rails application across\n  multiple web servers (because they cannot share lock files, or cannot\n  do that efficiently), and thus not recommended.\n- Creating a unique index on the field, by using\n  ActiveRecord::ConnectionAdapters::SchemaStatements#add_index. In the\n  rare case that a race condition occurs, the database will guarantee\n  the field's uniqueness.\n\n  When the database catches such a duplicate insertion,\n  ActiveRecord::Base#save will raise an ActiveRecord::StatementInvalid\n  exception. You can either choose to let this error propagate (which\n  will result in the default Rails exception page being shown), or you\n  can catch it and restart the transaction (e.g. by telling the user\n  that the title already exists, and asking him to re-enter the title).\n  This technique is also known as optimistic concurrency control:\n  http://en.wikipedia.org/wiki/Optimistic_concurrency_control\n\n  Active Record currently provides no way to distinguish unique\n  index constraint errors from other types of database errors, so you\n  will have to parse the (database-specific) exception message to detect\n  such a case.\n
create_reflection ActiveRecord::Reflection::ClassMethods.create_reflection(macro, name,\noptions, active_record)\n\n
reflect_on_aggregation ActiveRecord::Reflection::ClassMethods.reflect_on_aggregation(aggregation)\nReturns the AggregateReflection object for the named +aggregation+ (use\nthe symbol).\n\n  Account.reflect_on_aggregation(:balance) # => the balance AggregateReflection\n
reflect_on_all_aggregations ActiveRecord::Reflection::ClassMethods.reflect_on_all_aggregations()\nReturns an array of AggregateReflection objects for all the aggregations in\nthe class.\n
reflect_on_all_associations ActiveRecord::Reflection::ClassMethods.reflect_on_all_associations(macro = nil)\nReturns an array of AssociationReflection objects for all the\nassociations in the class. If you only want to reflect on a certain\nassociation type, pass in the symbol (<tt>:has_many</tt>, <tt>:has_one</tt>,\n<tt>:belongs_to</tt>) as the first parameter.\n\nExample:\n\n  Account.reflect_on_all_associations             # returns an array of\n  all associations\n  Account.reflect_on_all_associations(:has_many)  # returns an array of all\n  has_many associations\n
reflect_on_all_autosave_associations ActiveRecord::Reflection::ClassMethods.reflect_on_all_autosave_associations()\nReturns an array of AssociationReflection objects for all associations which\nhave <tt>:autosave</tt> enabled.\n
reflect_on_association ActiveRecord::Reflection::ClassMethods.reflect_on_association(association)\nReturns the AssociationReflection object for the +association+ (use the\nsymbol).\n\n  Account.reflect_on_association(:owner)             # returns the owner\n  AssociationReflection\n  Invoice.reflect_on_association(:line_items).macro  # returns :has_many\n
reflections ActiveRecord::Reflection::ClassMethods.reflections()\nReturns a hash containing all AssociationReflection objects for the current\nclass.\nExample:\n\n  Invoice.reflections\n  Account.reflections\n
apply_modules ActiveRecord::QueryMethods.apply_modules(modules)\n\n
arel ActiveRecord::QueryMethods.arel()\n\n
array_of_strings? ActiveRecord::QueryMethods.array_of_strings?(o)\n\n
build_arel ActiveRecord::QueryMethods.build_arel()\n\n
build_joins ActiveRecord::QueryMethods.build_joins(relation, joins)\n\n
build_select ActiveRecord::QueryMethods.build_select(arel, selects)\n\n
build_where ActiveRecord::QueryMethods.build_where(opts, other = [])\n\n
collapse_wheres ActiveRecord::QueryMethods.collapse_wheres(arel, wheres)\n\n
create_with ActiveRecord::QueryMethods.create_with(value)\n\n
custom_join_sql ActiveRecord::QueryMethods.custom_join_sql(*joins)\n\n
eager_load ActiveRecord::QueryMethods.eager_load(*args)\n\n
extending ActiveRecord::QueryMethods.extending(*modules, &block)\n\n
from ActiveRecord::QueryMethods.from(value)\n\n
group ActiveRecord::QueryMethods.group(*args)\n\n
having ActiveRecord::QueryMethods.having(*args)\n\n
includes ActiveRecord::QueryMethods.includes(*args)\n\n
joins ActiveRecord::QueryMethods.joins(*args)\n\n
limit ActiveRecord::QueryMethods.limit(value)\n\n
lock ActiveRecord::QueryMethods.lock(locks = true)\n\n
offset ActiveRecord::QueryMethods.offset(value)\n\n
order ActiveRecord::QueryMethods.order(*args)\n\n
preload ActiveRecord::QueryMethods.preload(*args)\n\n
readonly ActiveRecord::QueryMethods.readonly(value = true)\n\n
reorder ActiveRecord::QueryMethods.reorder(*args)\n\n
reverse_order ActiveRecord::QueryMethods.reverse_order()\n\n
reverse_sql_order ActiveRecord::QueryMethods.reverse_sql_order(order_query)\n\n
select ActiveRecord::QueryMethods.select(value = Proc.new)\n\n
where ActiveRecord::QueryMethods.where(opts, *rest)\n\n
apply_finder_options ActiveRecord::SpawnMethods.apply_finder_options(options)\n\n
except ActiveRecord::SpawnMethods.except(*skips)\n\n
merge ActiveRecord::SpawnMethods.merge(r)\n\n
only ActiveRecord::SpawnMethods.only(*onlies)\n\n
aggregate_column ActiveRecord::Calculations.aggregate_column(column_name)\n\n
average ActiveRecord::Calculations.average(column_name, options = {})\nCalculates the average value on a given column. Returns +nil+ if there's\nno row. See +calculate+ for examples with options.\n\n  Person.average('age') # => 35.8\n
calculate ActiveRecord::Calculations.calculate(operation, column_name, options = {})\nThis calculates aggregate values in the given column.  Methods for count,\nsum, average,\nminimum, and maximum have been added as shortcuts. Options such as\n<tt>:conditions</tt>,\n<tt>:order</tt>, <tt>:group</tt>, <tt>:having</tt>, and <tt>:joins</tt>\ncan be passed to customize the query.\n\nThere are two basic forms of output:\n  * Single aggregate value: The single value is type cast to Fixnum for\n  COUNT, Float\n    for AVG, and the given column's type for everything else.\n  * Grouped values: This returns an ordered hash of the values and groups\n  them by the\n    <tt>:group</tt> option.  It takes either a column name, or the name of\n    a belongs_to association.\n\n      values = Person.maximum(:age, :group => 'last_name')\n      puts values["Drake"]\n      => 43\n\n      drake  = Family.find_by_last_name('Drake')\n      values = Person.maximum(:age, :group => :family) # Person belongs_to\n      :family\n      puts values[drake]\n      => 43\n\n      values.each do |family, max_age|\n      ...\n      end\n\nOptions:\n* <tt>:conditions</tt> - An SQL fragment like "administrator = 1" or [\n"user_name = ?", username ].\n  See conditions in the intro to ActiveRecord::Base.\n* <tt>:include</tt>: Eager loading, see Associations for details.\nSince calculations don't load anything,\n  the purpose of this is to access fields on joined tables in your conditions,\n  order, or group clauses.\n* <tt>:joins</tt> - An SQL fragment for additional joins like "LEFT JOIN\ncomments ON comments.post_id = id".\n  (Rarely needed).\n  The records will be returned read-only since they will have attributes\n  that do not correspond to the\n  table's columns.\n* <tt>:order</tt> - An SQL fragment like "created_at DESC, name" (really\nonly used with GROUP BY calculations).\n* <tt>:group</tt> - An attribute name by which the result should be\ngrouped. Uses the GROUP BY SQL-clause.\n* <tt>:select</tt> - By default, this is * as in SELECT * FROM, but can be\nchanged if you for example\n  want to do a join, but not include the joined columns.\n* <tt>:distinct</tt> - Set this to true to make this a distinct calculation,\nsuch as\n  SELECT COUNT(DISTINCT posts.id) ...\n\nExamples:\n  Person.calculate(:count, :all) # The same as Person.count\n  Person.average(:age) # SELECT AVG(age) FROM people...\n  Person.minimum(:age, :conditions => ['last_name != ?', 'Drake']) # Selects\n  the minimum age for\n everyone with a last name other than 'Drake'\n Selects the minimum age for any family without any minors\n  Person.minimum(:age, :having => 'min(age) > 17', :group => :last_name)\n\n  Person.sum("2 * age")\n
column_alias_for ActiveRecord::Calculations.column_alias_for(*keys)\nConverts the given keys to the value that the database adapter returns as\na usable column name:\n\n  column_alias_for("users.id")                 # => "users_id"\n  column_alias_for("sum(id)")                  # => "sum_id"\n  column_alias_for("count(distinct users.id)") # => "count_distinct_users_id"\n  column_alias_for("count(*)")                 # => "count_all"\n  column_alias_for("count", "id")              # => "count_id"\n
column_for ActiveRecord::Calculations.column_for(field)\n\n
count ActiveRecord::Calculations.count(column_name = nil, options = {})\nCount operates using three different approaches.\n\n* Count all: By not passing any parameters to count, it will return a count\nof all the rows for the model.\n* Count using column: By passing a column name to count, it will return a\ncount of all the\n  rows for the model with supplied column present.\n* Count using options will find the row count matched by the options used.\n\nThe third approach, count using options, accepts an option hash as the only\nparameter. The options are:\n\n* <tt>:conditions</tt>: An SQL fragment like "administrator = 1" or [\n"user_name = ?", username ].\n  See conditions in the intro to ActiveRecord::Base.\n* <tt>:joins</tt>: Either an SQL fragment for additional joins like "LEFT\nJOIN comments ON comments.post_id = id"\n  (rarely needed) or named associations in the same form used for the\n  <tt>:include</tt> option, which will\n  perform an INNER JOIN on the associated table(s). If the value is a string,\n  then the records\n  will be returned read-only since they will have attributes that do not\n  correspond to the table's columns.\n  Pass <tt>:readonly => false</tt> to override.\n* <tt>:include</tt>: Named associations that should be loaded alongside\nusing LEFT OUTER JOINs.\n  The symbols named refer to already defined associations. When using named\n  associations, count\n  returns the number of DISTINCT items for the model you're counting.\n  See eager loading under Associations.\n* <tt>:order</tt>: An SQL fragment like "created_at DESC, name" (really only\nused with GROUP BY calculations).\n* <tt>:group</tt>: An attribute name by which the result should be\ngrouped. Uses the GROUP BY SQL-clause.\n* <tt>:select</tt>: By default, this is * as in SELECT * FROM, but can be\nchanged if you, for example,\n  want to do a join but not include the joined columns.\n* <tt>:distinct</tt>: Set this to true to make this a distinct calculation,\nsuch as\n  SELECT COUNT(DISTINCT posts.id) ...\n* <tt>:from</tt> - By default, this is the table name of the class, but can\nbe changed to an\n  alternate table name (or even the name of a database view).\n\nExamples for counting all:\n  Person.count         # returns the total count of all people\n\nExamples for counting by column:\n  Person.count(:age)  # returns the total count of all people whose age is\n  present in database\n\nExamples for count with options:\n  Person.count(:conditions => "age > 26")\n because of the named association, it finds the DISTINCT count using LEFT\n OUTER JOIN.\n  Person.count(:conditions => "age > 26 AND job.salary > 60000", :include\n  => :job)\n finds the number of rows matching the conditions and joins.\n  Person.count(:conditions => "age > 26 AND job.salary > 60000",\n               :joins => "LEFT JOIN jobs on jobs.person_id = person.id")\n\n  Person.count('id', :conditions => "age > 26") # Performs a COUNT(id)\n  Person.count(:all, :conditions => "age > 26") # Performs a COUNT(*)\n  (:all is an alias for '*')\n\nNote: <tt>Person.count(:all)</tt> will not work because it will use\n<tt>:all</tt> as the condition.\nUse Person.count instead.\n
maximum ActiveRecord::Calculations.maximum(column_name, options = {})\nCalculates the maximum value on a given column. The value is returned\nwith the same data type of the column, or +nil+ if there's no row. See\n+calculate+ for examples with options.\n\n  Person.maximum('age') # => 93\n
minimum ActiveRecord::Calculations.minimum(column_name, options = {})\nCalculates the minimum value on a given column.  The value is returned\nwith the same data type of the column, or +nil+ if there's no row. See\n+calculate+ for examples with options.\n\n  Person.minimum('age') # => 7\n
operation_over_aggregate_column ActiveRecord::Calculations.operation_over_aggregate_column(column, operation,\ndistinct)\n\n
perform_calculation ActiveRecord::Calculations.perform_calculation(operation, column_name,\noptions = {})\n\n
select_for_count ActiveRecord::Calculations.select_for_count()\n\n
sum ActiveRecord::Calculations.sum(column_name, options = {})\nCalculates the sum of values on a given column. The value is returned\nwith the same data type of the column, 0 if there's no row. See\n+calculate+ for examples with options.\n\n  Person.sum('age') # => 4562\n
type_cast_calculated_value ActiveRecord::Calculations.type_cast_calculated_value(value, column, operation\n= nil)\n\n
type_cast_using_column ActiveRecord::Calculations.type_cast_using_column(value, column)\n\n
all ActiveRecord::FinderMethods.all(*args)\nA convenience wrapper for <tt>find(:all, *args)</tt>. You can pass in all the\nsame arguments to this method as you can to <tt>find(:all)</tt>.\n
apply_join_dependency ActiveRecord::FinderMethods.apply_join_dependency(relation, join_dependency)\n\n
column_aliases ActiveRecord::FinderMethods.column_aliases(join_dependency)\n\n
construct_limited_ids_condition ActiveRecord::FinderMethods.construct_limited_ids_condition(relation)\n\n
construct_relation_for_association_calculations ActiveRecord::FinderMethods.construct_relation_for_association_calculations()\n\n
construct_relation_for_association_find ActiveRecord::FinderMethods.construct_relation_for_association_find(join_dependency)\n\n
exists? ActiveRecord::FinderMethods.exists?(id = nil)\nReturns true if a record exists in the table that matches the +id+ or\nconditions given, or false otherwise. The argument can take five forms:\n\n* Integer - Finds the record with this primary key.\n* String - Finds the record with a primary key corresponding to this\n  string (such as <tt>'5'</tt>).\n* Array - Finds the record that matches these +find+-style conditions\n  (such as <tt>['color = ?', 'red']</tt>).\n* Hash - Finds the record that matches these +find+-style conditions\n  (such as <tt>{:color => 'red'}</tt>).\n* No args - Returns false if the table is empty, true otherwise.\n\nFor more information about specifying conditions as a Hash or Array,\nsee the Conditions section in the introduction to ActiveRecord::Base.\n\nNote: You can't pass in a condition as a string (like <tt>name =\n'Jamie'</tt>), since it would be sanitized and then queried against\nthe primary key column, like <tt>id = 'name = \'Jamie\''</tt>.\n\n==== Examples\n  Person.exists?(5)\n  Person.exists?('5')\n  Person.exists?(:name => "David")\n  Person.exists?(['name LIKE ?', "%#{query}%"])\n  Person.exists?\n
find ActiveRecord::FinderMethods.find(*args)\nFind operates with four different retrieval approaches:\n\n* Find by id - This can either be a specific id (1), a list of ids (1, 5,\n6), or an array of ids ([5, 6, 10]).\n  If no record can be found for all of the listed ids, then RecordNotFound\n  will be raised.\n* Find first - This will return the first record matched by the options\nused. These options can either be specific\n  conditions or merely an order. If no record can be matched, +nil+ is\n  returned. Use\n  <tt>Model.find(:first, *args)</tt> or its shortcut\n  <tt>Model.first(*args)</tt>.\n* Find last - This will return the last record matched by the options\nused. These options can either be specific\n  conditions or merely an order. If no record can be matched, +nil+ is\n  returned. Use\n  <tt>Model.find(:last, *args)</tt> or its shortcut <tt>Model.last(*args)</tt>.\n* Find all - This will return all the records matched by the options used.\n  If no records are found, an empty array is returned. Use\n  <tt>Model.find(:all, *args)</tt> or its shortcut <tt>Model.all(*args)</tt>.\n\nAll approaches accept an options hash as their last parameter.\n\n==== Parameters\n\n* <tt>:conditions</tt> - An SQL fragment like "administrator = 1",\n<tt>["user_name = ?", username]</tt>,\n  or <tt>["user_name = :user_name", { :user_name => user_name }]</tt>. See\n  conditions in the intro.\n* <tt>:order</tt> - An SQL fragment like "created_at DESC, name".\n* <tt>:group</tt> - An attribute name by which the result should be\ngrouped. Uses the <tt>GROUP BY</tt> SQL-clause.\n* <tt>:having</tt> - Combined with +:group+ this can be used to filter the\nrecords that a\n  <tt>GROUP BY</tt> returns. Uses the <tt>HAVING</tt> SQL-clause.\n* <tt>:limit</tt> - An integer determining the limit on the number of rows\nthat should be returned.\n* <tt>:offset</tt> - An integer determining the offset from where the rows\nshould be fetched. So at 5,\n  it would skip rows 0 through 4.\n* <tt>:joins</tt> - Either an SQL fragment for additional joins like "LEFT\nJOIN comments ON comments.post_id = id" (rarely needed),\n  named associations in the same form used for the <tt>:include</tt> option,\n  which will perform an\n  <tt>INNER JOIN</tt> on the associated table(s),\n  or an array containing a mixture of both strings and named associations.\n  If the value is a string, then the records will be returned read-only\n  since they will\n  have attributes that do not correspond to the table's columns.\n  Pass <tt>:readonly => false</tt> to override.\n* <tt>:include</tt> - Names associations that should be loaded alongside. The\nsymbols named refer\n  to already defined associations. See eager loading under Associations.\n* <tt>:select</tt> - By default, this is "*" as in "SELECT * FROM", but can\nbe changed if you,\n  for example, want to do a join but not include the joined columns. Takes\n  a string with the SELECT SQL fragment (e.g. "id, name").\n* <tt>:from</tt> - By default, this is the table name of the class, but can\nbe changed\n  to an alternate table name (or even the name of a database view).\n* <tt>:readonly</tt> - Mark the returned records read-only so they cannot\nbe saved or updated.\n* <tt>:lock</tt> - An SQL fragment like "FOR UPDATE" or "LOCK IN SHARE MODE".\n  <tt>:lock => true</tt> gives connection's default exclusive lock, usually\n  "FOR UPDATE".\n\n==== Examples\n find by id\n  Person.find(1)       # returns the object for ID = 1\n  Person.find(1, 2, 6) # returns an array for objects with IDs in (1, 2, 6)\n  Person.find([7, 17]) # returns an array for objects with IDs in (7, 17)\n  Person.find([1])     # returns an array for the object with ID = 1\n  Person.where("administrator = 1").order("created_on DESC").find(1)\n\nNote that returned records may not be in the same order as the ids you\nprovide since database rows are unordered. Give an explicit <tt>:order</tt>\nto ensure the results are sorted.\n\n==== Examples\n find first\n  Person.first # returns the first object fetched by SELECT * FROM people\n  Person.where(["user_name = ?", user_name]).first\n  Person.where(["user_name = :u", { :u => user_name }]).first\n  Person.order("created_on DESC").offset(5).first\n find last\n  Person.last # returns the last object fetched by SELECT * FROM people\n  Person.where(["user_name = ?", user_name]).last\n  Person.order("created_on DESC").offset(5).last\n find all\n  Person.all # returns an array of objects for all the rows fetched by SELECT\n  * FROM people\n  Person.where(["category IN (?)", categories]).limit(50).all\n  Person.where({ :friends => ["Bob", "Steve", "Fred"] }).all\n  Person.offset(10).limit(10).all\n  Person.includes([:account, :friends]).all\n  Person.group("category").all\n\nExample for find with a lock: Imagine two concurrent transactions:\neach will read <tt>person.visits == 2</tt>, add 1 to it, and save, resulting\nin two saves of <tt>person.visits = 3</tt>.  By locking the row, the second\ntransaction has to wait until the first is finished; we get the\nexpected <tt>person.visits == 4</tt>.\n\n  Person.transaction do\n    person = Person.lock(true).find(1)\n    person.visits += 1\n    person.save!\n  end\n
find_by_attributes ActiveRecord::FinderMethods.find_by_attributes(match, attributes, *args)\n\n
find_first ActiveRecord::FinderMethods.find_first()\n\n
find_last ActiveRecord::FinderMethods.find_last()\n\n
find_one ActiveRecord::FinderMethods.find_one(id)\n\n
find_or_instantiator_by_attributes ActiveRecord::FinderMethods.find_or_instantiator_by_attributes(match,\nattributes, *args)\n\n
find_some ActiveRecord::FinderMethods.find_some(ids)\n\n
find_with_associations ActiveRecord::FinderMethods.find_with_associations()\n\n
find_with_ids ActiveRecord::FinderMethods.find_with_ids(*ids)\n\n
first ActiveRecord::FinderMethods.first(*args)\nA convenience wrapper for <tt>find(:first, *args)</tt>. You can pass in all the\nsame arguments to this method as you can to <tt>find(:first)</tt>.\n
last ActiveRecord::FinderMethods.last(*args)\nA convenience wrapper for <tt>find(:last, *args)</tt>. You can pass in all the\nsame arguments to this method as you can to <tt>find(:last)</tt>.\n
using_limitable_reflections? ActiveRecord::FinderMethods.using_limitable_reflections?(reflections)\n\n
attribute_before_type_cast ActiveRecord::AttributeMethods::BeforeTypeCast.attribute_before_type_cast(attribute_name)\nHandle *_before_type_cast for method_missing.\n
attributes_before_type_cast ActiveRecord::AttributeMethods::BeforeTypeCast.attributes_before_type_cast()\nReturns a hash of attributes before typecasting and deserialization.\n
read_attribute_before_type_cast ActiveRecord::AttributeMethods::BeforeTypeCast.read_attribute_before_type_cast(attr_name)\n\n
to_key ActiveRecord::AttributeMethods::PrimaryKey.to_key()\nReturns this record's primary key value wrapped in an Array\nor nil if the record is a new_record?\n
primary_key ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods.primary_key()\nDefines the primary key field -- can be overridden in subclasses. Overwriting\nwill negate any effect of the\nprimary_key_prefix_type setting, though.\n
primary_key= ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods.primary_key=(value =\nnil, &block)\n\n
set_primary_key ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods.set_primary_key(value\n= nil, &block)\nSets the name of the primary key column to use to the given value,\nor (if the value is nil or false) to the value returned by the given\nblock.\n\n  class Project < ActiveRecord::Base\n    set_primary_key "sysid"\n  end\n
attribute ActiveRecord::AttributeMethods::Read.attribute(attribute_name)\n\n
read_attribute ActiveRecord::AttributeMethods::Read.read_attribute(attr_name)\nReturns the value of the attribute identified by <tt>attr_name</tt> after\nit has been typecast (for example,\n"2004-12-12" in a data column is cast to a date object, like Date.new(2004,\n12, 12)).\n
unserializable_attribute? ActiveRecord::AttributeMethods::Read.unserializable_attribute?(attr_name,\ncolumn)\nReturns true if the attribute is of a text column and marked for serialization.\n
unserialize_attribute ActiveRecord::AttributeMethods::Read.unserialize_attribute(attr_name)\nReturns the unserialized object of the attribute.\n
cache_attribute? ActiveRecord::AttributeMethods::Read::ClassMethods.cache_attribute?(attr_name)\nReturns +true+ if the provided attribute is being cached.\n
cache_attributes ActiveRecord::AttributeMethods::Read::ClassMethods.cache_attributes(*attribute_names)\n+cache_attributes+ allows you to declare which converted attribute values\nshould\nbe cached. Usually caching only pays off for attributes with expensive\nconversion\nmethods, like time related columns (e.g. +created_at+, +updated_at+).\n
cached_attributes ActiveRecord::AttributeMethods::Read::ClassMethods.cached_attributes()\nReturns the attributes which are cached. By default time related columns\nwith datatype <tt>:datetime, :timestamp, :time, :date</tt> are cached.\n
define_method_attribute ActiveRecord::AttributeMethods::Read::ClassMethods.define_method_attribute(attr_name)\n\n
define_read_method ActiveRecord::AttributeMethods::Read::ClassMethods.define_read_method(symbol,\nattr_name, column)\nDefine an attribute reader method.  Cope with nil column.\n
define_read_method_for_serialized_attribute ActiveRecord::AttributeMethods::Read::ClassMethods.define_read_method_for_serialized_attribute(attr_name)\nDefine read method for serialized attribute.\n
attribute= ActiveRecord::AttributeMethods::Write.attribute=(attribute_name, value)\nHandle *= for method_missing.\n
write_attribute ActiveRecord::AttributeMethods::Write.write_attribute(attr_name, value)\nUpdates the attribute identified by <tt>attr_name</tt> with the specified\n+value+. Empty strings\nfor fixnum and float columns are turned into +nil+.\n
define_method_attribute= ActiveRecord::AttributeMethods::Write::ClassMethods.define_method_attribute=(attr_name)\n\n
clone_with_time_zone_conversion_attribute? ActiveRecord::AttributeMethods::Dirty.clone_with_time_zone_conversion_attribute?(attr,\nold)\n\n
field_changed? ActiveRecord::AttributeMethods::Dirty.field_changed?(attr, old, value)\n\n
update ActiveRecord::AttributeMethods::Dirty.update(*)\n\n
write_attribute ActiveRecord::AttributeMethods::Dirty.write_attribute(attr, value)\nWrap write_attribute to remember original attribute value.\n
attribute? ActiveRecord::AttributeMethods::Query.attribute?(attribute_name)\nHandle *? for method_missing.\n
query_attribute ActiveRecord::AttributeMethods::Query.query_attribute(attr_name)\n\n
create_time_zone_conversion_attribute? ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods.create_time_zone_conversion_attribute?(name,\ncolumn)\n\n
define_method_attribute ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods.define_method_attribute(attr_name)\nDefined for all +datetime+ and +timestamp+ attributes when\n+time_zone_aware_attributes+ are enabled.\nThis enhanced read method automatically converts the UTC time stored in the\ndatabase to the time\nzone stored in Time.zone.\n
define_method_attribute= ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods.define_method_attribute=(attr_name)\nDefined for all +datetime+ and +timestamp+ attributes when\n+time_zone_aware_attributes+ are enabled.\nThis enhanced write method will automatically convert the time passed to it\nto the zone stored in Time.zone.\n
define_attribute_methods ActiveRecord::AttributeMethods::ClassMethods.define_attribute_methods()\nGenerates all the attribute related methods for columns in the database\naccessors, mutators and query methods.\n
defined_activerecord_methods ActiveRecord::AttributeMethods::ClassMethods.defined_activerecord_methods()\n\n
instance_method_already_implemented? ActiveRecord::AttributeMethods::ClassMethods.instance_method_already_implemented?(method_name)\nChecks whether the method is defined in the model or any of its subclasses\nthat also derive from Active Record. Raises DangerousAttributeError if the\nmethod is defined by Active Record though.\n
named_scope ActiveRecord::NamedScope::ClassMethods.named_scope(*args, &block)\n\n
scope ActiveRecord::NamedScope::ClassMethods.scope(name, scope_options = {}, &block)\nAdds a class method for retrieving and querying objects. A \scope represents\na narrowing of a database query,\nsuch as <tt>where(:color =>\n:red).select('shirts.*').includes(:washing_instructions)</tt>.\n\n  class Shirt < ActiveRecord::Base\n    scope :red, where(:color => 'red')\n    scope :dry_clean_only,\n    joins(:washing_instructions).where('washing_instructions.dry_clean_only =\n    ?', true)\n  end\n\nThe above calls to <tt>scope</tt> define class methods Shirt.red and\nShirt.dry_clean_only. Shirt.red,\nin effect, represents the query <tt>Shirt.where(:color => 'red')</tt>.\n\nUnlike <tt>Shirt.find(...)</tt>, however, the object returned by Shirt.red\nis not an Array; it\nresembles the association object constructed by a <tt>has_many</tt>\ndeclaration. For instance,\nyou can invoke <tt>Shirt.red.first</tt>, <tt>Shirt.red.count</tt>,\n<tt>Shirt.red.where(:size => 'small')</tt>.\nAlso, just as with the association objects, named \scopes act like an Array,\nimplementing Enumerable;\n<tt>Shirt.red.each(&block)</tt>, <tt>Shirt.red.first</tt>, and\n<tt>Shirt.red.inject(memo, &block)</tt>\nall behave as if Shirt.red really was an Array.\n\nThese named \scopes are composable. For instance,\n<tt>Shirt.red.dry_clean_only</tt> will produce\nall shirts that are both red and dry clean only.\nNested finds and calculations also work with these compositions:\n<tt>Shirt.red.dry_clean_only.count</tt>\nreturns the number of garments for which these criteria obtain. Similarly with\n<tt>Shirt.red.dry_clean_only.average(:thread_count)</tt>.\n\nAll \scopes are available as class methods on the ActiveRecord::Base descendant\nupon which\nthe \scopes were defined. But they are also available to <tt>has_many</tt>\nassociations. If,\n\n  class Person < ActiveRecord::Base\n    has_many :shirts\n  end\n\nthen <tt>elton.shirts.red.dry_clean_only</tt> will return all of Elton's red,\ndry clean\nonly shirts.\n\nNamed \scopes can also be procedural:\n\n  class Shirt < ActiveRecord::Base\n    scope :colored, lambda {|color| where(:color => color) }\n  end\n\nIn this example, <tt>Shirt.colored('puce')</tt> finds all puce shirts.\n\nNamed \scopes can also have extensions, just as with <tt>has_many</tt>\ndeclarations:\n\n  class Shirt < ActiveRecord::Base\n    scope :red, where(:color => 'red') do\n      def dom_id\n        'red_shirts'\n      end\n    end\n  end\n\nScopes can also be used while creating/building a record.\n\n  class Article < ActiveRecord::Base\n    scope :published, where(:published => true)\n  end\n\n  Article.published.new.published    # => true\n  Article.published.create.published # => true\n
scoped ActiveRecord::NamedScope::ClassMethods.scoped(options = nil)\nReturns an anonymous \scope.\n\n  posts = Post.scoped\n  posts.size # Fires "select count(*) from  posts" and returns the count\n  posts.each {|p| puts p.name } # Fires "select * from posts" and loads\n  post objects\n\n  fruits = Fruit.scoped\n  fruits = fruits.where(:colour => 'red') if options[:red_only]\n  fruits = fruits.limit(10) if limited?\n\nAnonymous \scopes tend to be useful when procedurally generating complex\nqueries, where passing intermediate values (\scopes) around as first-class\nobjects is convenient.\n\nYou can define a \scope that applies to all finders using\nActiveRecord::Base.default_scope.\n
scopes ActiveRecord::NamedScope::ClassMethods.scopes()\n\n
valid_scope_name? ActiveRecord::NamedScope::ClassMethods.valid_scope_name?(name)\n\n
associated_records_to_validate_or_save ActiveRecord::AutosaveAssociation.associated_records_to_validate_or_save(association,\nnew_record, autosave)\nReturns the record for an association collection that should be validated\nor saved. If +autosave+ is +false+ only new records will be returned,\nunless the parent is/was a new record itself.\n
association_valid? ActiveRecord::AutosaveAssociation.association_valid?(reflection, association)\nReturns whether or not the association is valid and applies any errors to\nthe parent, <tt>self</tt>, if it wasn't. Skips any <tt>:autosave</tt>\nenabled records if they're marked_for_destruction? or destroyed.\n
before_save_collection_association ActiveRecord::AutosaveAssociation.before_save_collection_association()\nIs used as a before_save callback to check while saving a collection\nassociation whether or not the parent was a new record before saving.\n
changed_for_autosave? ActiveRecord::AutosaveAssociation.changed_for_autosave?()\nReturns whether or not this record has been changed in any way (including\nwhether\nany of its nested autosave associations are likewise changed)\n
mark_for_destruction ActiveRecord::AutosaveAssociation.mark_for_destruction()\nMarks this record to be destroyed as part of the parents save transaction.\nThis does _not_ actually destroy the record instantly, rather child record\nwill be destroyed\nwhen <tt>parent.save</tt> is called.\n\nOnly useful if the <tt>:autosave</tt> option on the parent is enabled for\nthis associated model.\n
marked_for_destruction? ActiveRecord::AutosaveAssociation.marked_for_destruction?()\nReturns whether or not this record will be destroyed as part of the parents\nsave transaction.\n\nOnly useful if the <tt>:autosave</tt> option on the parent is enabled for\nthis associated model.\n
nested_records_changed_for_autosave? ActiveRecord::AutosaveAssociation.nested_records_changed_for_autosave?()\ngo through nested autosave associations that are loaded in memory (without\nloading\nany new ones), and return true if is changed for autosave\n
reload ActiveRecord::AutosaveAssociation.reload(options = nil)\nReloads the attributes of the object as usual and clears\n<tt>marked_for_destruction</tt> flag.\n
save_belongs_to_association ActiveRecord::AutosaveAssociation.save_belongs_to_association(reflection)\nSaves the associated record if it's new or <tt>:autosave</tt> is enabled.\n\nIn addition, it will destroy the association if it was marked for destruction.\n
save_collection_association ActiveRecord::AutosaveAssociation.save_collection_association(reflection)\nSaves any new associated records, or all loaded autosave associations if\n<tt>:autosave</tt> is enabled on the association.\n\nIn addition, it destroys all children that were marked for destruction\nwith mark_for_destruction.\n\nThis all happens inside a transaction, _if_ the Transactions module is\nincluded into\nActiveRecord::Base after the AutosaveAssociation module, which it does\nby default.\n
save_has_one_association ActiveRecord::AutosaveAssociation.save_has_one_association(reflection)\nSaves the associated record if it's new or <tt>:autosave</tt> is enabled\non the association.\n\nIn addition, it will destroy the association if it was marked for\ndestruction with mark_for_destruction.\n\nThis all happens inside a transaction, _if_ the Transactions module is\nincluded into\nActiveRecord::Base after the AutosaveAssociation module, which it does\nby default.\n
validate_collection_association ActiveRecord::AutosaveAssociation.validate_collection_association(reflection)\nValidate the associated records if <tt>:validate</tt> or\n<tt>:autosave</tt> is turned on for the association specified by\n+reflection+.\n
validate_single_association ActiveRecord::AutosaveAssociation.validate_single_association(reflection)\nValidate the association if <tt>:validate</tt> or <tt>:autosave</tt> is\nturned on for the association.\n
add_autosave_association_callbacks ActiveRecord::AutosaveAssociation::ClassMethods.add_autosave_association_callbacks(reflection)\nAdds validation and save callbacks for the association as specified by\nthe +reflection+.\n\nFor performance reasons, we don't check whether to validate at runtime.\nHowever the validation and callback methods are lazy and those methods\nget created when they are invoked for the very first time.  However,\nthis can change, for instance, when using nested attributes, which is\ncalled _after_ the association has been defined. Since we don't want\nthe callbacks to get defined multiple times, there are guards that\ncheck if the save or validation methods have already been defined\nbefore actually defining them.\n
decrement_counter ActiveRecord::CounterCache.decrement_counter(counter_name, id)\nDecrement a number field by one, usually representing a count.\n\nThis works the same as increment_counter but reduces the column value by 1\ninstead of increasing it.\n\n==== Parameters\n\n* +counter_name+ - The name of the field that should be decremented.\n* +id+ - The id of the object that should be decremented.\n\n==== Examples\n Decrement the post_count column for the record with an id of 5\n  DiscussionBoard.decrement_counter(:post_count, 5)\n
increment_counter ActiveRecord::CounterCache.increment_counter(counter_name, id)\nIncrement a number field by one, usually representing a count.\n\nThis is used for caching aggregate values, so that they don't need to be\ncomputed every time.\nFor example, a DiscussionBoard may cache post_count and comment_count\notherwise every time the board is\nshown it would have to run an SQL query to find how many posts and comments\nthere are.\n\n==== Parameters\n\n* +counter_name+ - The name of the field that should be incremented.\n* +id+ - The id of the object that should be incremented.\n\n==== Examples\n Increment the post_count column for the record with an id of 5\n  DiscussionBoard.increment_counter(:post_count, 5)\n
reset_counters ActiveRecord::CounterCache.reset_counters(id, *counters)\nResets one or more counter caches to their correct value using an SQL\ncount query.  This is useful when adding new counter caches, or if the\ncounter has been corrupted or modified directly by SQL.\n\n==== Parameters\n\n* +id+ - The id of the object you wish to reset a counter on.\n* +counters+ - One or more counter names to reset\n\n==== Examples\n For Post with id #1 records reset the comments_count\n  Post.reset_counters(1, :comments)\n
update_counters ActiveRecord::CounterCache.update_counters(id, counters)\nA generic "counter updater" implementation, intended primarily to be\nused by increment_counter and decrement_counter, but which may also\nbe useful on its own. It simply does a direct SQL update for the record\nwith the given ID, altering the given hash of counters by the amount\ngiven by the corresponding value:\n\n==== Parameters\n\n* +id+ - The id of the object you wish to update a counter on or an Array\nof ids.\n* +counters+ - An Array of Hashes containing the names of the fields\n  to update as keys and the amount to update the field by as values.\n\n==== Examples\n For the Post with id of 5, decrement the comment_count by 1, and\n increment the action_count by 1\n  Post.update_counters 5, :comment_count => -1, :action_count => 1\n Executes the following SQL:\n UPDATE posts\n    SET comment_count = comment_count - 1,\n        action_count = action_count + 1\n  WHERE id = 5\n For the Posts with id of 10 and 15, increment the comment_count by 1\n  Post.update_counters [10, 15], :comment_count => 1\n Executes the following SQL:\n UPDATE posts\n    SET comment_count = comment_count + 1,\n  WHERE id IN (10, 15)\n
add_to_transaction ActiveRecord::Transactions.add_to_transaction()\nAdd the record to the current transaction so that the :after_rollback and\n:after_commit callbacks\ncan be called.\n
clear_transaction_record_state ActiveRecord::Transactions.clear_transaction_record_state()\nClear the new record state and id of a record.\n
remember_transaction_record_state ActiveRecord::Transactions.remember_transaction_record_state()\nSave the new record state and id of a record so it can be restored later if\na transaction fails.\n
restore_transaction_record_state ActiveRecord::Transactions.restore_transaction_record_state(force = false)\nRestore the new record state and id of a record that was previously saved\nby a call to save_record_state.\n
rollback_active_record_state! ActiveRecord::Transactions.rollback_active_record_state!()\nReset id and @new_record if the transaction rolls back.\n
transaction ActiveRecord::Transactions.transaction(&block)\nSee ActiveRecord::Transactions::ClassMethods for detailed documentation.\n
transaction_include_action? ActiveRecord::Transactions.transaction_include_action?(action)\nDetermine if a transaction included an action for :create, :update, or\n:destroy. Used in filtering callbacks.\n
transaction_record_state ActiveRecord::Transactions.transaction_record_state(state)\nDetermine if a record was created or destroyed in a transaction. State should\nbe one of :new_record or :destroyed.\n
with_transaction_returning_status ActiveRecord::Transactions.with_transaction_returning_status()\nExecutes +method+ within a transaction and captures its return value as a\nstatus flag. If the status is true the transaction is committed, otherwise\na ROLLBACK is issued. In any case the status flag is returned.\n\nThis method is available within the context of an ActiveRecord::Base\ninstance.\n
after_commit ActiveRecord::Transactions::ClassMethods.after_commit(*args, &block)\n\n
after_rollback ActiveRecord::Transactions::ClassMethods.after_rollback(*args, &block)\n\n
transaction ActiveRecord::Transactions::ClassMethods.transaction(options = {}, &block)\nSee ActiveRecord::Transactions::ClassMethods for detailed documentation.\n
accepts_nested_attributes_for ActiveRecord::NestedAttributes::ClassMethods.accepts_nested_attributes_for(*attr_names)\nDefines an attributes writer for the specified association(s). If you\nare using <tt>attr_protected</tt> or <tt>attr_accessible</tt>, then you\nwill need to add the attribute writer to the allowed list.\n\nSupported options:\n[:allow_destroy]\n  If true, destroys any members from the attributes hash with a\n  <tt>_destroy</tt> key and a value that evaluates to +true+\n  (eg. 1, '1', true, or 'true'). This option is off by default.\n[:reject_if]\n  Allows you to specify a Proc or a Symbol pointing to a method\n  that checks whether a record should be built for a certain attribute\n  hash. The hash is passed to the supplied Proc or the method\n  and it should return either +true+ or +false+. When no :reject_if\n  is specified, a record will be built for all attribute hashes that\n  do not have a <tt>_destroy</tt> value that evaluates to true.\n  Passing <tt>:all_blank</tt> instead of a Proc will create a proc\n  that will reject a record where all the attributes are blank.\n[:limit]\n  Allows you to specify the maximum number of the associated records that\n  can be processed with the nested attributes. If the size of the\n  nested attributes array exceeds the specified limit,\n  NestedAttributes::TooManyRecords\n  exception is raised. If omitted, any number associations can be processed.\n  Note that the :limit option is only applicable to one-to-many associations.\n[:update_only]\n  Allows you to specify that an existing record may only be updated.\n  A new record may only be created when there is no existing record.\n  This option only works for one-to-one associations and is ignored for\n  collection associations. This option is off by default.\n\nExamples:\n creates avatar_attributes=\n  accepts_nested_attributes_for :avatar, :reject_if => proc { |attributes|\n  attributes['name'].blank? }\n creates avatar_attributes=\n  accepts_nested_attributes_for :avatar, :reject_if => :all_blank\n creates avatar_attributes= and posts_attributes=\n  accepts_nested_attributes_for :avatar, :posts, :allow_destroy => true\n
add_counter_cache_callbacks ActiveRecord::Associations::ClassMethods.add_counter_cache_callbacks(reflection)\n\n
add_touch_callbacks ActiveRecord::Associations::ClassMethods.add_touch_callbacks(reflection,\ntouch_attribute)\n\n
association_accessor_methods ActiveRecord::Associations::ClassMethods.association_accessor_methods(reflection,\nassociation_proxy_class)\n\n
association_constructor_method ActiveRecord::Associations::ClassMethods.association_constructor_method(constructor,\nreflection, association_proxy_class)\n\n
belongs_to ActiveRecord::Associations::ClassMethods.belongs_to(association_id, options\n= {})\nSpecifies a one-to-one association with another class. This method should\nonly be used\nif this class contains the foreign key. If the other class contains the\nforeign key,\nthen you should use +has_one+ instead. See also\nActiveRecord::Associations::ClassMethods's overview\non when to use +has_one+ and when to use +belongs_to+.\n\nMethods will be added for retrieval and query for a single associated object,\nfor which\nthis object holds an id:\n\n[association(force_reload = false)]\n  Returns the associated object. +nil+ is returned if none is found.\n[association=(associate)]\n  Assigns the associate object, extracts the primary key, and sets it as\n  the foreign key.\n[build_association(attributes = {})]\n  Returns a new object of the associated type that has been instantiated\n  with +attributes+ and linked to this object through a foreign key, but\n  has not yet been saved.\n[create_association(attributes = {})]\n  Returns a new object of the associated type that has been instantiated\n  with +attributes+, linked to this object through a foreign key, and that\n  has already been saved (if it passed the validation).\n\n(+association+ is replaced with the symbol passed as the first argument, so\n<tt>belongs_to :author</tt> would add among others <tt>author.nil?</tt>.)\n\n=== Example\n\nA Post class declares <tt>belongs_to :author</tt>, which will add:\n* <tt>Post#author</tt> (similar to <tt>Author.find(author_id)</tt>)\n* <tt>Post#author=(author)</tt> (similar to <tt>post.author_id =\nauthor.id</tt>)\n* <tt>Post#build_author</tt> (similar to <tt>post.author = Author.new</tt>)\n* <tt>Post#create_author</tt> (similar to <tt>post.author = Author.new;\npost.author.save; post.author</tt>)\nThe declaration can also include an options hash to specialize the behavior\nof the association.\n\n=== Options\n\n[:class_name]\n  Specify the class name of the association. Use it only if that name can't\n  be inferred\n  from the association name. So <tt>has_one :author</tt> will by default be\n  linked to the Author class, but\n  if the real class name is Person, you'll have to specify it with this option.\n[:conditions]\n  Specify the conditions that the associated object must meet in order to\n  be included as a +WHERE+\n  SQL fragment, such as <tt>authorized = 1</tt>.\n[:select]\n  By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can\n  be changed\n  if, for example, you want to do a join but not include the joined\n  columns. Do not\n  forget to include the primary and foreign keys, otherwise it will raise\n  an error.\n[:foreign_key]\n  Specify the foreign key used for the association. By default this is\n  guessed to be the name\n  of the association with an "_id" suffix. So a class that defines a\n  <tt>belongs_to :person</tt>\n  association will use "person_id" as the default\n  <tt>:foreign_key</tt>. Similarly,\n  <tt>belongs_to :favorite_person, :class_name => "Person"</tt> will use a\n  foreign key\n  of "favorite_person_id".\n[:primary_key]\n  Specify the method that returns the primary key of associated object used\n  for the association.\n  By default this is id.\n[:dependent]\n  If set to <tt>:destroy</tt>, the associated object is destroyed when this\n  object is. If set to\n  <tt>:delete</tt>, the associated object is deleted *without* calling its\n  destroy method.\n  This option should not be specified when <tt>belongs_to</tt> is used in\n  conjunction with\n  a <tt>has_many</tt> relationship on another class because of the potential\n  to leave\n  orphaned records behind.\n[:counter_cache]\n  Caches the number of belonging objects on the associate class through the\n  use of +increment_counter+\n  and +decrement_counter+. The counter cache is incremented when an object\n  of this\n  class is created and decremented when it's destroyed. This requires that\n  a column\n  named <tt>#{table_name}_count</tt> (such as +comments_count+ for a belonging\n  Comment class)\n  is used on the associate class (such as a Post class). You can also specify\n  a custom counter\n  cache column by providing a column name instead of a +true+/+false+ value\n  to this\n  option (e.g., <tt>:counter_cache => :my_custom_counter</tt>.)\n  Note: Specifying a counter cache will add it to that model's list of\n  readonly attributes\n  using +attr_readonly+.\n[:include]\n  Specify second-order associations that should be eager loaded when this\n  object is loaded.\n[:polymorphic]\n  Specify this association is a polymorphic association by passing +true+.\n  Note: If you've enabled the counter cache, then you may want to add the\n  counter cache attribute\n  to the +attr_readonly+ list in the associated classes (e.g. <tt>class Post;\n  attr_readonly :comments_count; end</tt>).\n[:readonly]\n  If true, the associated object is readonly through the association.\n[:validate]\n  If +false+, don't validate the associated objects when saving the parent\n  object. +false+ by default.\n[:autosave]\n  If true, always save the associated object or destroy it if marked for\n  destruction, when\n  saving the parent object.\n  If false, never save or destroy the associated object.\n  By default, only save the associated object if it's a new record.\n[:touch]\n  If true, the associated object will be touched (the updated_at/on attributes\n  set to now)\n  when this record is either saved or destroyed. If you specify a symbol,\n  that attribute\n  will be updated with the current time instead of the updated_at/on attribute.\n[:inverse_of]\n  Specifies the name of the <tt>has_one</tt> or <tt>has_many</tt> association\n  on the associated\n  object that is the inverse of this <tt>belongs_to</tt> association.\n  Does not work in\n  combination with the <tt>:polymorphic</tt> options.\n  See ActiveRecord::Associations::ClassMethods's overview on Bi-directional\n  associations for more detail.\n\nOption examples:\n  belongs_to :firm, :foreign_key => "client_of"\n  belongs_to :person, :primary_key => "name", :foreign_key => "person_name"\n  belongs_to :author, :class_name => "Person", :foreign_key => "author_id"\n  belongs_to :valid_coupon, :class_name => "Coupon", :foreign_key =>\n  "coupon_id",\n             :conditions => 'discounts > #{payments_count}'\n  belongs_to :attachable, :polymorphic => true\n  belongs_to :project, :readonly => true\n  belongs_to :post, :counter_cache => true\n  belongs_to :company, :touch => true\n  belongs_to :company, :touch => :employees_last_updated_at\n
collection_accessor_methods ActiveRecord::Associations::ClassMethods.collection_accessor_methods(reflection,\nassociation_proxy_class, writer = true)\n\n
collection_reader_method ActiveRecord::Associations::ClassMethods.collection_reader_method(reflection,\nassociation_proxy_class)\n\n
configure_dependency_for_has_many ActiveRecord::Associations::ClassMethods.configure_dependency_for_has_many(reflection,\nextra_conditions = nil)\nCreates before_destroy callback methods that nullify, delete or destroy\nhas_many associated objects, according to the defined :dependent rule.\nIf the association is marked as :dependent => :restrict, create a callback\nthat prevents deleting entirely.\n\nSee HasManyAssociation#delete_records.  Dependent associations\ndelete children, otherwise foreign key is set to NULL.\nSee HasManyAssociation#delete_records. Dependent associations\ndelete children if the option is set to :destroy or :delete_all, set the\nforeign key to NULL if the option is set to :nullify, and do not touch the\nchild records if the option is set to :restrict.\n\nThe +extra_conditions+ parameter, which is not used within the main\nActive Record codebase, is meant to allow plugins to define extra\nfinder conditions.\n
has_and_belongs_to_many ActiveRecord::Associations::ClassMethods.has_and_belongs_to_many(association_id,\noptions = {}, &extension)\nSpecifies a many-to-many relationship with another class. This associates\ntwo classes via an\nintermediate join table.  Unless the join table is explicitly specified as\nan option, it is\nguessed using the lexical order of the class names. So a join between\nDeveloper and Project\nwill give the default join table name of "developers_projects" because "D"\noutranks "P".\nNote that this precedence is calculated using the <tt><</tt> operator\nfor String.  This\nmeans that if the strings are of different lengths, and the strings are\nequal when compared\nup to the shortest length, then the longer string is considered of higher\nlexical precedence than the shorter one.  For example, one would expect the\ntables "paper_boxes" and "papers"\nto generate a join table name of "papers_paper_boxes" because of the length\nof the name "paper_boxes",\nbut it in fact generates a join table name of "paper_boxes_papers".  Be aware\nof this caveat, and use the\ncustom <tt>:join_table</tt> option if you need to.\n\nThe join table should not have a primary key or a model associated with\nit. You must manually generate the\njoin table with a migration such as this:\n\n  class CreateDevelopersProjectsJoinTable < ActiveRecord::Migration\n    def self.up\n      create_table :developers_projects, :id => false do |t|\n        t.integer :developer_id\n        t.integer :project_id\n      end\n    end\n\n    def self.down\n      drop_table :developers_projects\n    end\n  end\n\nDeprecated: Any additional fields added to the join table will be placed as\nattributes when\npulling records out through +has_and_belongs_to_many+ associations. Records\nreturned from join\ntables with additional attributes will be marked as readonly (because we\ncan't save changes\nto the additional attributes). It's strongly recommended that you upgrade any\nassociations with attributes to a real join model (see introduction).\n\nAdds the following methods for retrieval and query:\n\n[collection(force_reload = false)]\n  Returns an array of all the associated objects.\n  An empty array is returned if none are found.\n[collection<<(object, ...)]\n  Adds one or more objects to the collection by creating associations in\n  the join table\n  (<tt>collection.push</tt> and <tt>collection.concat</tt> are aliases to\n  this method).\n  Note that this operation instantly fires update sql without waiting for\n  the save or update call on the\n  parent object.\n[collection.delete(object, ...)]\n  Removes one or more objects from the collection by removing their\n  associations from the join table.\n  This does not destroy the objects.\n[collection=objects]\n  Replaces the collection's content by deleting and adding objects as\n  appropriate.\n[collection_singular_ids]\n  Returns an array of the associated objects' ids.\n[collection_singular_ids=ids]\n  Replace the collection by the objects identified by the primary keys\n  in +ids+.\n[collection.clear]\n  Removes every object from the collection. This does not destroy the objects.\n[collection.empty?]\n  Returns +true+ if there are no associated objects.\n[collection.size]\n  Returns the number of associated objects.\n[collection.find(id)]\n  Finds an associated object responding to the +id+ and that\n  meets the condition that it has to be associated with this object.\n  Uses the same rules as ActiveRecord::Base.find.\n[collection.exists?(...)]\n  Checks whether an associated object with the given conditions exists.\n  Uses the same rules as ActiveRecord::Base.exists?.\n[collection.build(attributes = {})]\n  Returns a new object of the collection type that has been instantiated\n  with +attributes+ and linked to this object through the join table, but\n  has not yet been saved.\n[collection.create(attributes = {})]\n  Returns a new object of the collection type that has been instantiated\n  with +attributes+, linked to this object through the join table, and that\n  has already been\n  saved (if it passed the validation).\n\n(+collection+ is replaced with the symbol passed as the first argument, so\n<tt>has_and_belongs_to_many :categories</tt> would add among others\n<tt>categories.empty?</tt>.)\n\n=== Example\n\nA Developer class declares <tt>has_and_belongs_to_many :projects</tt>,\nwhich will add:\n* <tt>Developer#projects</tt>\n* <tt>Developer#projects<<</tt>\n* <tt>Developer#projects.delete</tt>\n* <tt>Developer#projects=</tt>\n* <tt>Developer#project_ids</tt>\n* <tt>Developer#project_ids=</tt>\n* <tt>Developer#projects.clear</tt>\n* <tt>Developer#projects.empty?</tt>\n* <tt>Developer#projects.size</tt>\n* <tt>Developer#projects.find(id)</tt>\n* <tt>Developer#projects.exists?(...)</tt>\n* <tt>Developer#projects.build</tt> (similar to <tt>Project.new("project_id"\n=> id)</tt>)\n* <tt>Developer#projects.create</tt> (similar to <tt>c =\nProject.new("project_id" => id); c.save; c</tt>)\nThe declaration may include an options hash to specialize the behavior of\nthe association.\n\n=== Options\n\n[:class_name]\n  Specify the class name of the association. Use it only if that name can't\n  be inferred\n  from the association name. So <tt>has_and_belongs_to_many :projects</tt>\n  will by default be linked to the\n  Project class, but if the real class name is SuperProject, you'll have to\n  specify it with this option.\n[:join_table]\n  Specify the name of the join table if the default based on lexical order\n  isn't what you want.\n  <b>WARNING:</b> If you're overwriting the table name of either class,\n  the +table_name+ method\n  MUST be declared underneath any +has_and_belongs_to_many+ declaration in\n  order to work.\n[:foreign_key]\n  Specify the foreign key used for the association. By default this is\n  guessed to be the name\n  of this class in lower-case and "_id" suffixed. So a Person class that makes\n  a +has_and_belongs_to_many+ association to Project will use "person_id"\n  as the\n  default <tt>:foreign_key</tt>.\n[:association_foreign_key]\n  Specify the foreign key used for the association on the receiving side of\n  the association.\n  By default this is guessed to be the name of the associated class in\n  lower-case and "_id" suffixed.\n  So if a Person class makes a +has_and_belongs_to_many+ association to\n  Project,\n  the association will use "project_id" as the default\n  <tt>:association_foreign_key</tt>.\n[:conditions]\n  Specify the conditions that the associated object must meet in order to\n  be included as a +WHERE+\n  SQL fragment, such as <tt>authorized = 1</tt>.  Record creations from the\n  association are\n  scoped if a hash is used.\n  <tt>has_many :posts, :conditions => {:published => true}</tt> will create\n  published posts with <tt>@blog.posts.create</tt>\n  or <tt>@blog.posts.build</tt>.\n[:order]\n  Specify the order in which the associated objects are returned as an\n  <tt>ORDER BY</tt> SQL fragment,\n  such as <tt>last_name, first_name DESC</tt>\n[:uniq]\n  If true, duplicate associated objects will be ignored by accessors and\n  query methods.\n[:finder_sql]\n  Overwrite the default generated SQL statement used to fetch the association\n  with a manual statement\n[:counter_sql]\n  Specify a complete SQL statement to fetch the size of the association. If\n  <tt>:finder_sql</tt> is\n  specified but not <tt>:counter_sql</tt>, <tt>:counter_sql</tt> will be\n  generated by\n  replacing <tt>SELECT ... FROM</tt> with <tt>SELECT COUNT(*) FROM</tt>.\n[:delete_sql]\n  Overwrite the default generated SQL statement used to remove links between\n  the associated\n  classes with a manual statement.\n[:insert_sql]\n  Overwrite the default generated SQL statement used to add links between\n  the associated classes\n  with a manual statement.\n[:extend]\n  Anonymous module for extending the proxy, see "Association extensions".\n[:include]\n  Specify second-order associations that should be eager loaded when the\n  collection is loaded.\n[:group]\n  An attribute name by which the result should be grouped. Uses the <tt>GROUP\n  BY</tt> SQL-clause.\n[:having]\n  Combined with +:group+ this can be used to filter the records that a\n  <tt>GROUP BY</tt> returns.\n  Uses the <tt>HAVING</tt> SQL-clause.\n[:limit]\n  An integer determining the limit on the number of rows that should be\n  returned.\n[:offset]\n  An integer determining the offset from where the rows should be fetched. So\n  at 5,\n  it would skip the first 4 rows.\n[:select]\n  By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can be\n  changed if, for example,\n  you want to do a join but not include the joined columns. Do not forget\n  to include the primary\n  and foreign keys, otherwise it will raise an error.\n[:readonly]\n  If true, all the associated objects are readonly through the association.\n[:validate]\n  If +false+, don't validate the associated objects when saving the parent\n  object. +true+ by default.\n[:autosave]\n  If true, always save the associated objects or destroy them if marked for\n  destruction, when\n  saving the parent object.\n  If false, never save or destroy the associated objects.\n  By default, only save associated objects that are new records.\n\nOption examples:\n  has_and_belongs_to_many :projects\n  has_and_belongs_to_many :projects, :include => [ :milestones, :manager ]\n  has_and_belongs_to_many :nations, :class_name => "Country"\n  has_and_belongs_to_many :categories, :join_table => "prods_cats"\n  has_and_belongs_to_many :categories, :readonly => true\n  has_and_belongs_to_many :active_projects, :join_table =>\n  'developers_projects', :delete_sql =>\n  'DELETE FROM developers_projects WHERE active=1 AND developer_id = #{id}\n  AND project_id = #{record.id}'\n
has_many ActiveRecord::Associations::ClassMethods.has_many(association_id, options =\n{}, &extension)\nSpecifies a one-to-many association. The following methods for retrieval\nand query of\ncollections of associated objects will be added:\n\n[collection(force_reload = false)]\n  Returns an array of all the associated objects.\n  An empty array is returned if none are found.\n[collection<<(object, ...)]\n  Adds one or more objects to the collection by setting their foreign keys\n  to the collection's primary key.\n  Note that this operation instantly fires update sql without waiting for\n  the save or update call on the\n  parent object.\n[collection.delete(object, ...)]\n  Removes one or more objects from the collection by setting their foreign\n  keys to +NULL+.\n  Objects will be in addition destroyed if they're associated with\n  <tt>:dependent => :destroy</tt>,\n  and deleted if they're associated with <tt>:dependent => :delete_all</tt>.\n[collection=objects]\n  Replaces the collections content by deleting and adding objects as\n  appropriate. If the <tt>:through</tt>\n  option is true callbacks in the join models are triggered except destroy\n  callbacks, since deletion is\n  direct.\n[collection_singular_ids]\n  Returns an array of the associated objects' ids\n[collection_singular_ids=ids]\n  Replace the collection with the objects identified by the primary keys in\n  +ids+. This\n  method loads the models and calls <tt>collection=</tt>. See above.\n[collection.clear]\n  Removes every object from the collection. This destroys the associated\n  objects if they\n  are associated with <tt>:dependent => :destroy</tt>, deletes them directly\n  from the\n  database if <tt>:dependent => :delete_all</tt>, otherwise sets their\n  foreign keys to +NULL+.\n  If the <tt>:through</tt> option is true no destroy callbacks are invoked\n  on the join models.\n  Join models are directly deleted.\n[collection.empty?]\n  Returns +true+ if there are no associated objects.\n[collection.size]\n  Returns the number of associated objects.\n[collection.find(...)]\n  Finds an associated object according to the same rules as\n  ActiveRecord::Base.find.\n[collection.exists?(...)]\n  Checks whether an associated object with the given conditions exists.\n  Uses the same rules as ActiveRecord::Base.exists?.\n[collection.build(attributes = {}, ...)]\n  Returns one or more new objects of the collection type that have been\n  instantiated\n  with +attributes+ and linked to this object through a foreign key, but\n  have not yet\n  been saved.\n[collection.create(attributes = {})]\n  Returns a new object of the collection type that has been instantiated\n  with +attributes+, linked to this object through a foreign key, and that\n  has already\n  been saved (if it passed the validation). *Note*: This only works if the\n  base model\n  already exists in the DB, not if it is a new (unsaved) record!\n\n(*Note*: +collection+ is replaced with the symbol passed as the first\nargument, so\n<tt>has_many :clients</tt> would add among others <tt>clients.empty?</tt>.)\n\n=== Example\n\nExample: A Firm class declares <tt>has_many :clients</tt>, which will add:\n* <tt>Firm#clients</tt> (similar to <tt>Clients.find :all, :conditions =>\n["firm_id = ?", id]</tt>)\n* <tt>Firm#clients<<</tt>\n* <tt>Firm#clients.delete</tt>\n* <tt>Firm#clients=</tt>\n* <tt>Firm#client_ids</tt>\n* <tt>Firm#client_ids=</tt>\n* <tt>Firm#clients.clear</tt>\n* <tt>Firm#clients.empty?</tt> (similar to <tt>firm.clients.size == 0</tt>)\n* <tt>Firm#clients.size</tt> (similar to <tt>Client.count "firm_id =\n#{id}"</tt>)\n* <tt>Firm#clients.find</tt> (similar to <tt>Client.find(id, :conditions =>\n"firm_id = #{id}")</tt>)\n* <tt>Firm#clients.exists?(:name => 'ACME')</tt> (similar to\n<tt>Client.exists?(:name => 'ACME', :firm_id => firm.id)</tt>)\n* <tt>Firm#clients.build</tt> (similar to <tt>Client.new("firm_id" => id)</tt>)\n* <tt>Firm#clients.create</tt> (similar to <tt>c = Client.new("firm_id" =>\nid); c.save; c</tt>)\nThe declaration can also include an options hash to specialize the behavior\nof the association.\n\n=== Supported options\n[:class_name]\n  Specify the class name of the association. Use it only if that name can't\n  be inferred\n  from the association name. So <tt>has_many :products</tt> will by default\n  be linked\n  to the Product class, but if the real class name is SpecialProduct, you'll\n  have to\n  specify it with this option.\n[:conditions]\n  Specify the conditions that the associated objects must meet in order to\n  be included as a +WHERE+\n  SQL fragment, such as <tt>price > 5 AND name LIKE 'B%'</tt>.  Record\n  creations from\n  the association are scoped if a hash is used.\n  <tt>has_many :posts, :conditions => {:published => true}</tt> will create\n  published\n  posts with <tt>@blog.posts.create</tt> or <tt>@blog.posts.build</tt>.\n[:order]\n  Specify the order in which the associated objects are returned as an\n  <tt>ORDER BY</tt> SQL fragment,\n  such as <tt>last_name, first_name DESC</tt>.\n[:foreign_key]\n  Specify the foreign key used for the association. By default this is\n  guessed to be the name\n  of this class in lower-case and "_id" suffixed. So a Person class that\n  makes a +has_many+\n  association will use "person_id" as the default <tt>:foreign_key</tt>.\n[:primary_key]\n  Specify the method that returns the primary key used for the association. By\n  default this is +id+.\n[:dependent]\n  If set to <tt>:destroy</tt> all the associated objects are destroyed\n  alongside this object by calling their +destroy+ method.  If set to\n  <tt>:delete_all</tt> all associated\n  objects are deleted *without* calling their +destroy+ method.  If set to\n  <tt>:nullify</tt> all associated\n  objects' foreign keys are set to +NULL+ *without* calling their +save+\n  callbacks. If set to\n  <tt>:restrict</tt> this object cannot be deleted if it has any associated\n  object.\n\n  *Warning:* This option is ignored when used with <tt>:through</tt> option.\n\n[:finder_sql]\n  Specify a complete SQL statement to fetch the association. This is a good\n  way to go for complex\n  associations that depend on multiple tables. Note: When this option is\n  used, +find_in_collection+\n  is _not_ added.\n[:counter_sql]\n  Specify a complete SQL statement to fetch the size of the association. If\n  <tt>:finder_sql</tt> is\n  specified but not <tt>:counter_sql</tt>, <tt>:counter_sql</tt> will be\n  generated by\n  replacing <tt>SELECT ... FROM</tt> with <tt>SELECT COUNT(*) FROM</tt>.\n[:extend]\n  Specify a named module for extending the proxy. See "Association extensions".\n[:include]\n  Specify second-order associations that should be eager loaded when the\n  collection is loaded.\n[:group]\n  An attribute name by which the result should be grouped. Uses the <tt>GROUP\n  BY</tt> SQL-clause.\n[:having]\n  Combined with +:group+ this can be used to filter the records that a\n  <tt>GROUP BY</tt>\n  returns. Uses the <tt>HAVING</tt> SQL-clause.\n[:limit]\n  An integer determining the limit on the number of rows that should be\n  returned.\n[:offset]\n  An integer determining the offset from where the rows should be fetched. So\n  at 5,\n  it would skip the first 4 rows.\n[:select]\n  By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can be\n  changed if\n  you, for example, want to do a join but not include the joined columns. Do\n  not forget\n  to include the primary and foreign keys, otherwise it will raise an error.\n[:as]\n  Specifies a polymorphic interface (See <tt>belongs_to</tt>).\n[:through]\n  Specifies a join model through which to perform the query.  Options for\n  <tt>:class_name</tt>\n  and <tt>:foreign_key</tt> are ignored, as the association uses the source\n  reflection. You\n  can only use a <tt>:through</tt> query through a <tt>belongs_to</tt>,\n  <tt>has_one</tt>\n  or <tt>has_many</tt> association on the join model. The collection of\n  join models\n  can be managed via the collection API. For example, new join models are\n  created for\n  newly associated objects, and if some are gone their rows are deleted\n  (directly,\n  no destroy callbacks are triggered).\n[:source]\n  Specifies the source association name used by <tt>has_many :through</tt>\n  queries.\n  Only use it if the name cannot be inferred from the association.\n  <tt>has_many :subscribers, :through => :subscriptions</tt> will look for\n  either <tt>:subscribers</tt> or\n  <tt>:subscriber</tt> on Subscription, unless a <tt>:source</tt> is given.\n[:source_type]\n  Specifies type of the source association used by <tt>has_many :through</tt>\n  queries where the source\n  association is a polymorphic +belongs_to+.\n[:uniq]\n  If true, duplicates will be omitted from the collection. Useful in\n  conjunction with <tt>:through</tt>.\n[:readonly]\n  If true, all the associated objects are readonly through the association.\n[:validate]\n  If +false+, don't validate the associated objects when saving the parent\n  object. true by default.\n[:autosave]\n  If true, always save the associated objects or destroy them if marked\n  for destruction,\n  when saving the parent object. If false, never save or destroy the\n  associated objects.\n  By default, only save associated objects that are new records.\n[:inverse_of]\n  Specifies the name of the <tt>belongs_to</tt> association on the associated\n  object\n  that is the inverse of this <tt>has_many</tt> association. Does not work\n  in combination\n  with <tt>:through</tt> or <tt>:as</tt> options.\n  See ActiveRecord::Associations::ClassMethods's overview on Bi-directional\n  associations for more detail.\n\nOption examples:\n  has_many :comments, :order => "posted_on"\n  has_many :comments, :include => :author\n  has_many :people, :class_name => "Person", :conditions => "deleted = 0",\n  :order => "name"\n  has_many :tracks, :order => "position", :dependent => :destroy\n  has_many :comments, :dependent => :nullify\n  has_many :tags, :as => :taggable\n  has_many :reports, :readonly => true\n  has_many :subscribers, :through => :subscriptions, :source => :user\n  has_many :subscribers, :class_name => "Person", :finder_sql =>\n      'SELECT DISTINCT people.* ' +\n      'FROM people p, post_subscriptions ps ' +\n      'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' +\n      'ORDER BY p.first_name'\n
has_one ActiveRecord::Associations::ClassMethods.has_one(association_id, options = {})\nSpecifies a one-to-one association with another class. This method should\nonly be used\nif the other class contains the foreign key. If the current class contains\nthe foreign key,\nthen you should use +belongs_to+ instead. See also\nActiveRecord::Associations::ClassMethods's overview\non when to use has_one and when to use belongs_to.\n\nThe following methods for retrieval and query of a single associated object\nwill be added:\n\n[association(force_reload = false)]\n  Returns the associated object. +nil+ is returned if none is found.\n[association=(associate)]\n  Assigns the associate object, extracts the primary key, sets it as the\n  foreign key,\n  and saves the associate object.\n[build_association(attributes = {})]\n  Returns a new object of the associated type that has been instantiated\n  with +attributes+ and linked to this object through a foreign key, but\n  has not\n  yet been saved. <b>Note:</b> This ONLY works if an association already\n  exists.\n  It will NOT work if the association is +nil+.\n[create_association(attributes = {})]\n  Returns a new object of the associated type that has been instantiated\n  with +attributes+, linked to this object through a foreign key, and that\n  has already been saved (if it passed the validation).\n\n(+association+ is replaced with the symbol passed as the first argument, so\n<tt>has_one :manager</tt> would add among others <tt>manager.nil?</tt>.)\n\n=== Example\n\nAn Account class declares <tt>has_one :beneficiary</tt>, which will add:\n* <tt>Account#beneficiary</tt> (similar to <tt>Beneficiary.find(:first,\n:conditions => "account_id = #{id}")</tt>)\n* <tt>Account#beneficiary=(beneficiary)</tt> (similar to\n<tt>beneficiary.account_id = account.id; beneficiary.save</tt>)\n* <tt>Account#build_beneficiary</tt> (similar to\n<tt>Beneficiary.new("account_id" => id)</tt>)\n* <tt>Account#create_beneficiary</tt> (similar to <tt>b =\nBeneficiary.new("account_id" => id); b.save; b</tt>)\n\n=== Options\n\nThe declaration can also include an options hash to specialize the behavior\nof the association.\n\nOptions are:\n[:class_name]\n  Specify the class name of the association. Use it only if that name can't\n  be inferred\n  from the association name. So <tt>has_one :manager</tt> will by default\n  be linked to the Manager class, but\n  if the real class name is Person, you'll have to specify it with this option.\n[:conditions]\n  Specify the conditions that the associated object must meet in order to\n  be included as a +WHERE+\n  SQL fragment, such as <tt>rank = 5</tt>. Record creation from the association\n  is scoped if a hash\n  is used. <tt>has_one :account, :conditions => {:enabled => true}</tt>\n  will create\n  an enabled account with <tt>@company.create_account</tt> or\n  <tt>@company.build_account</tt>.\n[:order]\n  Specify the order in which the associated objects are returned as an\n  <tt>ORDER BY</tt> SQL fragment,\n  such as <tt>last_name, first_name DESC</tt>.\n[:dependent]\n  If set to <tt>:destroy</tt>, the associated object is destroyed when this\n  object is. If set to\n  <tt>:delete</tt>, the associated object is deleted *without* calling its\n  destroy method.\n  If set to <tt>:nullify</tt>, the associated object's foreign key is set\n  to +NULL+.\n  Also, association is assigned.\n[:foreign_key]\n  Specify the foreign key used for the association. By default this is\n  guessed to be the name\n  of this class in lower-case and "_id" suffixed. So a Person class that\n  makes a +has_one+ association\n  will use "person_id" as the default <tt>:foreign_key</tt>.\n[:primary_key]\n  Specify the method that returns the primary key used for the association. By\n  default this is +id+.\n[:include]\n  Specify second-order associations that should be eager loaded when this\n  object is loaded.\n[:as]\n  Specifies a polymorphic interface (See <tt>belongs_to</tt>).\n[:select]\n  By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can be\n  changed if, for example,\n  you want to do a join but not include the joined columns. Do not forget\n  to include the\n  primary and foreign keys, otherwise it will raise an error.\n[:through]\n  Specifies a Join Model through which to perform the query.  Options for\n  <tt>:class_name</tt>\n  and <tt>:foreign_key</tt> are ignored, as the association uses the source\n  reflection. You\n  can only use a <tt>:through</tt> query through a <tt>has_one</tt> or\n  <tt>belongs_to</tt>\n  association on the join model.\n[:source]\n  Specifies the source association name used by <tt>has_one :through</tt>\n  queries.\n  Only use it if the name cannot be inferred from the association.\n  <tt>has_one :favorite, :through => :favorites</tt> will look for a\n  <tt>:favorite</tt> on Favorite, unless a <tt>:source</tt> is given.\n[:source_type]\n  Specifies type of the source association used by <tt>has_one :through</tt>\n  queries where the source\n  association is a polymorphic +belongs_to+.\n[:readonly]\n  If true, the associated object is readonly through the association.\n[:validate]\n  If +false+, don't validate the associated object when saving the parent\n  object. +false+ by default.\n[:autosave]\n  If true, always save the associated object or destroy it if marked for\n  destruction,\n  when saving the parent object. If false, never save or destroy the\n  associated object.\n  By default, only save the associated object if it's a new record.\n[:inverse_of]\n  Specifies the name of the <tt>belongs_to</tt> association on the associated\n  object\n  that is the inverse of this <tt>has_one</tt> association.  Does not work\n  in combination\n  with <tt>:through</tt> or <tt>:as</tt> options.\n  See ActiveRecord::Associations::ClassMethods's overview on Bi-directional\n  associations for more detail.\n\nOption examples:\n  has_one :credit_card, :dependent => :destroy  # destroys the associated\n  credit card\n  has_one :credit_card, :dependent => :nullify  # updates the associated\n  records foreign\n key value to NULL rather than destroying it\n  has_one :last_comment, :class_name => "Comment", :order => "posted_on"\n  has_one :project_manager, :class_name => "Person", :conditions => "role =\n  'project_manager'"\n  has_one :attachment, :as => :attachable\n  has_one :boss, :readonly => :true\n  has_one :club, :through => :membership\n  has_one :primary_address, :through => :addressables, :conditions =>\n  ["addressable.primary = ?", true], :source => :addressable\n
join_table_name ActiveRecord::Associations::ClassMethods.join_table_name(first_table_name,\nsecond_table_name)\nGenerates a join table name from two provided table names.\nThe names in the join table names end up in lexicographic order.\n\n  join_table_name("members", "clubs")         # => "clubs_members"\n  join_table_name("members", "special_clubs") # => "members_special_clubs"\n
instantiate_fixtures ActiveRecord::TestFixtures.instantiate_fixtures()\n\n
load_fixtures ActiveRecord::TestFixtures.load_fixtures()\n\n
load_instances? ActiveRecord::TestFixtures.load_instances?()\n\n
run_in_transaction? ActiveRecord::TestFixtures.run_in_transaction?()\n\n
setup_fixtures ActiveRecord::TestFixtures.setup_fixtures()\n\n
teardown_fixtures ActiveRecord::TestFixtures.teardown_fixtures()\n\n
fixtures ActiveRecord::TestFixtures::ClassMethods.fixtures(*table_names)\n\n
require_fixture_classes ActiveRecord::TestFixtures::ClassMethods.require_fixture_classes(table_names\n= nil)\n\n
set_fixture_class ActiveRecord::TestFixtures::ClassMethods.set_fixture_class(class_names = {})\n\n
setup_fixture_accessors ActiveRecord::TestFixtures::ClassMethods.setup_fixture_accessors(table_names\n= nil)\n\n
try_to_load_dependency ActiveRecord::TestFixtures::ClassMethods.try_to_load_dependency(file_name)\n\n
uses_transaction ActiveRecord::TestFixtures::ClassMethods.uses_transaction(*methods)\n\n
uses_transaction? ActiveRecord::TestFixtures::ClassMethods.uses_transaction?(method)\n\n
composed_of ActiveRecord::Aggregations::ClassMethods.composed_of(part_id, options = {})\nAdds reader and writer methods for manipulating a value object:\n<tt>composed_of :address</tt> adds <tt>address</tt> and\n<tt>address=(new_address)</tt> methods.\n\nOptions are:\n* <tt>:class_name</tt> - Specifies the class name of the association. Use\nit only if that name\n  can't be inferred from the part id. So <tt>composed_of :address</tt>\n  will by default be linked\n  to the Address class, but if the real class name is CompanyAddress, you'll\n  have to specify it\n  with this option.\n* <tt>:mapping</tt> - Specifies the mapping of entity attributes to attributes\nof the value\n  object. Each mapping is represented as an array where the first item is\n  the name of the\n  entity attribute and the second item is the name the attribute in the\n  value object. The\n  order in which mappings are defined determine the order in which attributes\n  are sent to the\n  value class constructor.\n* <tt>:allow_nil</tt> - Specifies that the value object will not be\ninstantiated when all mapped\n  attributes are +nil+.  Setting the value object to +nil+ has the effect\n  of writing +nil+ to all\n  mapped attributes.\n  This defaults to +false+.\n* <tt>:constructor</tt> - A symbol specifying the name of the constructor\nmethod or a Proc that\n  is called to initialize the value object. The constructor is passed all\n  of the mapped attributes,\n  in the order that they are defined in the <tt>:mapping option</tt>, as\n  arguments and uses them\n  to instantiate a <tt>:class_name</tt> object.\n  The default is <tt>:new</tt>.\n* <tt>:converter</tt> - A symbol specifying the name of a class method of\n<tt>:class_name</tt>\n  or a Proc that is called when a new value is assigned to the value\n  object. The converter is\n  passed the single value that is used in the assignment and is only called\n  if the new value is\n  not an instance of <tt>:class_name</tt>.\n\nOption examples:\n  composed_of :temperature, :mapping => %w(reading celsius)\n  composed_of :balance, :class_name => "Money", :mapping => %w(balance amount),\n  :converter => Proc.new { |balance| balance.to_money }\n  composed_of :address, :mapping => [ %w(address_street street),\n  %w(address_city city) ]\n  composed_of :gps_location\n  composed_of :gps_location, :allow_nil => true\n  composed_of :ip_address,\n              :class_name => 'IPAddr',\n              :mapping => %w(ip to_i),\n              :constructor => Proc.new { |ip| IPAddr.new(ip, Socket::AF_INET)\n              },\n              :converter => Proc.new { |ip| ip.is_a?(Integer) ? IPAddr.new(ip,\n              Socket::AF_INET) : IPAddr.new(ip.to_s) }\n
reader_method ActiveRecord::Aggregations::ClassMethods.reader_method(name, class_name,\nmapping, allow_nil, constructor)\n\n
writer_method ActiveRecord::Aggregations::ClassMethods.writer_method(name, class_name,\nmapping, allow_nil, converter)\n\n
cache ActiveRecord::QueryCache::ClassMethods.cache(&block)\nEnable the query cache within the block if Active Record is configured.\n
uncached ActiveRecord::QueryCache::ClassMethods.uncached(&block)\nDisable the query cache within the block if Active Record is configured.\n
append_info_to_payload ActiveRecord::Railties::ControllerRuntime.append_info_to_payload(payload)\n\n
cleanup_view_runtime ActiveRecord::Railties::ControllerRuntime.cleanup_view_runtime()\n\n
log_process_action ActiveRecord::Railties::ControllerRuntime::ClassMethods.log_process_action(payload)\n\n
attributes_from_column_definition ActiveRecord::Persistence.attributes_from_column_definition()\nInitializes the attributes array with keys matching the columns from the\nlinked table and\nthe values matching the corresponding default value of that column, so\nthat a new instance, or one populated from a passed-in Hash, still has all\nthe attributes\nthat instances loaded from the database would.\n
becomes ActiveRecord::Persistence.becomes(klass)\nReturns an instance of the specified +klass+ with the attributes of the\ncurrent record. This is mostly useful in relation to single-table\ninheritance structures where you want a subclass to appear as the\nsuperclass. This can be used along with record identification in\nAction Pack to allow, say, <tt>Client < Company</tt> to do something\nlike render <tt>:partial => @client.becomes(Company)</tt> to render that\ninstance using the companies/company partial instead of clients/client.\n\nNote: The new instance will share a link to the same attributes as the\noriginal class.\nSo any change to the attributes in either instance will affect the other.\n
create ActiveRecord::Persistence.create()\nCreates a record with values matching those of the instance attributes\nand returns its id.\n
create_or_update ActiveRecord::Persistence.create_or_update()\n\n
decrement ActiveRecord::Persistence.decrement(attribute, by = 1)\nInitializes +attribute+ to zero if +nil+ and subtracts the value passed as +by+\n(default is 1).\nThe decrement is performed directly on the underlying attribute, no setter\nis invoked.\nOnly makes sense for number-based attributes. Returns +self+.\n
decrement! ActiveRecord::Persistence.decrement!(attribute, by = 1)\nWrapper around +decrement+ that saves the record. This method differs from\nits non-bang version in that it passes through the attribute setter.\nSaving is not subjected to validation checks. Returns +true+ if the\nrecord could be saved.\n
delete ActiveRecord::Persistence.delete()\nDeletes the record in the database and freezes this instance to\nreflect that no changes should be made (since they can't be\npersisted). Returns the frozen instance.\n\nThe row is simply removed with an SQL +DELETE+ statement on the\nrecord's primary key, and no callbacks are executed.\n\nTo enforce the object's +before_destroy+ and +after_destroy+\ncallbacks, Observer methods, or any <tt>:dependent</tt> association\noptions, use <tt>#destroy</tt>.\n
destroy ActiveRecord::Persistence.destroy()\nDeletes the record in the database and freezes this instance to reflect\nthat no changes should be made (since they can't be persisted).\n
destroyed? ActiveRecord::Persistence.destroyed?()\nReturns true if this object has been destroyed, otherwise returns false.\n
increment ActiveRecord::Persistence.increment(attribute, by = 1)\nInitializes +attribute+ to zero if +nil+ and adds the value passed as +by+\n(default is 1).\nThe increment is performed directly on the underlying attribute, no setter\nis invoked.\nOnly makes sense for number-based attributes. Returns +self+.\n
increment! ActiveRecord::Persistence.increment!(attribute, by = 1)\nWrapper around +increment+ that saves the record. This method differs from\nits non-bang version in that it passes through the attribute setter.\nSaving is not subjected to validation checks. Returns +true+ if the\nrecord could be saved.\n
new_record? ActiveRecord::Persistence.new_record?()\nReturns true if this object hasn't been saved yet -- that is, a record\nfor the object doesn't exist in the data store yet; otherwise, returns false.\n
persisted? ActiveRecord::Persistence.persisted?()\nReturns if the record is persisted, i.e. it's not a new record and it was\nnot destroyed.\n
reload ActiveRecord::Persistence.reload(options = nil)\nReloads the attributes of this object from the database.\nThe optional options argument is passed to find when reloading so you\nmay do e.g. record.reload(:lock => true) to reload the same record with\nan exclusive row lock.\n
save ActiveRecord::Persistence.save(*)\nSaves the model.\n\nIf the model is new a record gets created in the database, otherwise\nthe existing record gets updated.\n\nBy default, save always run validations. If any of them fail the action\nis cancelled and +save+ returns +false+. However, if you supply\n:validate => false, validations are bypassed altogether. See\nActiveRecord::Validations for more information.\n\nThere's a series of callbacks associated with +save+. If any of the\n<tt>before_*</tt> callbacks return +false+ the action is cancelled and\n+save+ returns +false+. See ActiveRecord::Callbacks for further\ndetails.\n
save! ActiveRecord::Persistence.save!(*)\nSaves the model.\n\nIf the model is new a record gets created in the database, otherwise\nthe existing record gets updated.\n\nWith <tt>save!</tt> validations always run. If any of them fail\nActiveRecord::RecordInvalid gets raised. See ActiveRecord::Validations\nfor more information.\n\nThere's a series of callbacks associated with <tt>save!</tt>. If any of\nthe <tt>before_*</tt> callbacks return +false+ the action is cancelled\nand <tt>save!</tt> raises ActiveRecord::RecordNotSaved. See\nActiveRecord::Callbacks for further details.\n
toggle ActiveRecord::Persistence.toggle(attribute)\nAssigns to +attribute+ the boolean opposite of <tt>attribute?</tt>. So\nif the predicate returns +true+ the attribute will become +false+. This\nmethod toggles directly the underlying value without calling any setter.\nReturns +self+.\n
toggle! ActiveRecord::Persistence.toggle!(attribute)\nWrapper around +toggle+ that saves the record. This method differs from\nits non-bang version in that it passes through the attribute setter.\nSaving is not subjected to validation checks. Returns +true+ if the\nrecord could be saved.\n
touch ActiveRecord::Persistence.touch(name = nil)\nSaves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation is performed and no callbacks are executed.\nIf an attribute name is passed, that attribute is updated along with\nupdated_at/on attributes.\n\n  product.touch               # updates updated_at/on\n  product.touch(:designed_at) # updates the designed_at attribute and\n  updated_at/on\n\nIf used along with +belongs_to+ then +touch+ will invoke +touch+ method on\nassociated object.\n\n  class Brake < ActiveRecord::Base\n    belongs_to :car, :touch => true\n  end\n\n  class Car < ActiveRecord::Base\n    belongs_to :corporation, :touch => true\n  end\n triggers @brake.car.touch and @brake.car.corporation.touch\n  @brake.touch\n
update ActiveRecord::Persistence.update(attribute_names = @attributes.keys)\nUpdates the associated record with values matching those of the instance\nattributes.\nReturns the number of affected rows.\n
update_attribute ActiveRecord::Persistence.update_attribute(name, value)\nUpdates a single attribute and saves the record.\nThis is especially useful for boolean flags on existing records. Also note that\n\n* Validation is skipped.\n* Callbacks are invoked.\n* updated_at/updated_on column is updated if that column is available.\n* Updates all the attributes that are dirty in this object.\n
update_attributes ActiveRecord::Persistence.update_attributes(attributes)\nUpdates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. If the object is invalid, the saving\nwill fail and false will be returned.\n
update_attributes! ActiveRecord::Persistence.update_attributes!(attributes)\nUpdates its receiver just like +update_attributes+ but calls <tt>save!</tt>\ninstead\nof +save+, so an exception is raised if the record is invalid.\n
should_record_timestamps? ActiveRecord::Timestamp.should_record_timestamps?()\n\n
timestamp_attributes_for_update_in_model ActiveRecord::Timestamp.timestamp_attributes_for_update_in_model()\n\n
add_preloaded_record_to_collection ActiveRecord::AssociationPreload::ClassMethods.add_preloaded_record_to_collection(parent_records,\nreflection_name, associated_record)\n\n
add_preloaded_records_to_collection ActiveRecord::AssociationPreload::ClassMethods.add_preloaded_records_to_collection(parent_records,\nreflection_name, associated_record)\n\n
append_conditions ActiveRecord::AssociationPreload::ClassMethods.append_conditions(reflection,\npreload_options)\n\n
associated_records ActiveRecord::AssociationPreload::ClassMethods.associated_records(ids)\nSome databases impose a limit on the number of ids in a list (in Oracle\nits 1000)\nMake several smaller queries if necessary or make one query if the adapter\nsupports it\n
construct_id_map ActiveRecord::AssociationPreload::ClassMethods.construct_id_map(records,\nprimary_key=nil)\nGiven a collection of Active Record objects, constructs a Hash which maps\nthe objects' IDs to the relevant objects. Returns a 2-tuple\n<tt>(id_to_record_map, ids)</tt> where +id_to_record_map+ is the Hash,\nand +ids+ is an Array of record IDs.\n
find_associated_records ActiveRecord::AssociationPreload::ClassMethods.find_associated_records(ids,\nreflection, preload_options)\n\n
in_or_equals_for_ids ActiveRecord::AssociationPreload::ClassMethods.in_or_equals_for_ids(ids)\n\n
interpolate_sql_for_preload ActiveRecord::AssociationPreload::ClassMethods.interpolate_sql_for_preload(sql)\n\n
preload_associations ActiveRecord::AssociationPreload::ClassMethods.preload_associations(records,\nassociations, preload_options={})\nEager loads the named associations for the given Active Record record(s).\n\nIn this description, 'association name' shall refer to the name passed\nto an association creation method. For example, a model that specifies\n<tt>belongs_to :author</tt>, <tt>has_many :buyers</tt> has association\nnames +:author+ and +:buyers+.\n\n== Parameters\n+records+ is an array of ActiveRecord::Base. This array needs not be flat,\ni.e. +records+ itself may also contain arrays of records. In any case,\n+preload_associations+ will preload the all associations records by\nflattening +records+.\n\n+associations+ specifies one or more associations that you want to\npreload. It may be:\n- a Symbol or a String which specifies a single association name. For\n  example, specifying +:books+ allows this method to preload all books\n  for an Author.\n- an Array which specifies multiple association names. This array\n  is processed recursively. For example, specifying <tt>[:avatar, :books]</tt>\n  allows this method to preload an author's avatar as well as all of his\n  books.\n- a Hash which specifies multiple association names, as well as\n  association names for the to-be-preloaded association objects. For\n  example, specifying <tt>{ :author => :avatar }</tt> will preload a\n  book's author, as well as that author's avatar.\n\n+:associations+ has the same format as the +:include+ option for\n<tt>ActiveRecord::Base.find</tt>. So +associations+ could look like this:\n\n  :books\n  [ :books, :author ]\n  { :author => :avatar }\n  [ :books, { :author => :avatar } ]\n\n+preload_options+ contains options that will be passed to\nActiveRecord::Base#find\n(which is called under the hood for preloading records). But it is passed\nonly one level deep in the +associations+ argument, i.e. it's not passed\nto the child associations when +associations+ is a Hash.\n
preload_belongs_to_association ActiveRecord::AssociationPreload::ClassMethods.preload_belongs_to_association(records,\nreflection, preload_options={})\n\n
preload_has_and_belongs_to_many_association ActiveRecord::AssociationPreload::ClassMethods.preload_has_and_belongs_to_many_association(records,\nreflection, preload_options={})\n\n
preload_has_many_association ActiveRecord::AssociationPreload::ClassMethods.preload_has_many_association(records,\nreflection, preload_options={})\n\n
preload_has_one_association ActiveRecord::AssociationPreload::ClassMethods.preload_has_one_association(records,\nreflection, preload_options={})\n\n
preload_one_association ActiveRecord::AssociationPreload::ClassMethods.preload_one_association(records,\nassociation, preload_options={})\nPreloads a specific named association for the given records. This is\ncalled by +preload_associations+ as its base case.\n
preload_through_records ActiveRecord::AssociationPreload::ClassMethods.preload_through_records(records,\nreflection, through_association)\n\n
set_association_collection_records ActiveRecord::AssociationPreload::ClassMethods.set_association_collection_records(id_to_record_map,\nreflection_name, associated_records, key)\n\n
set_association_single_records ActiveRecord::AssociationPreload::ClassMethods.set_association_single_records(id_to_record_map,\nreflection_name, associated_records, key)\n\n
lock! ActiveRecord::Locking::Pessimistic.lock!(lock = true)\nObtain a row lock on this record. Reloads the record to obtain the requested\nlock. Pass an SQL locking clause to append the end of the SELECT statement\nor pass true for "FOR UPDATE" (the default, an exclusive row lock).  Returns\nthe locked record.\n
attributes_from_column_definition ActiveRecord::Locking::Optimistic.attributes_from_column_definition()\n\n
locking_column ActiveRecord::Locking::Optimistic::ClassMethods.locking_column()\nThe version column used for optimistic locking. Defaults to +lock_version+.\n
locking_enabled? ActiveRecord::Locking::Optimistic::ClassMethods.locking_enabled?()\nIs optimistic locking enabled for this table? Returns true if the\n+lock_optimistically+ flag is set to true (which it is, by default)\nand the table includes the +locking_column+ column (defaults to\n+lock_version+).\n
quoted_locking_column ActiveRecord::Locking::Optimistic::ClassMethods.quoted_locking_column()\nQuote the column name used for optimistic locking.\n
reset_locking_column ActiveRecord::Locking::Optimistic::ClassMethods.reset_locking_column()\nReset the column used for optimistic locking back to the +lock_version+\ndefault.\n
set_locking_column ActiveRecord::Locking::Optimistic::ClassMethods.set_locking_column(value =\nnil, &block)\nSet the column to use for optimistic locking. Defaults to +lock_version+.\n
update_counters ActiveRecord::Locking::Optimistic::ClassMethods.update_counters(id, counters)\nMake sure the lock version column gets updated when counters are\nupdated.\n
build_conditions ActiveRecord::Associations::ThroughAssociationScope.build_conditions()\n\n
build_sti_condition ActiveRecord::Associations::ThroughAssociationScope.build_sti_condition()\n\n
build_through_conditions ActiveRecord::Associations::ThroughAssociationScope.build_through_conditions()\n\n
conditions ActiveRecord::Associations::ThroughAssociationScope.conditions()\n\n
construct_conditions ActiveRecord::Associations::ThroughAssociationScope.construct_conditions()\nBuild SQL conditions from attributes, qualified by table name.\n
construct_from ActiveRecord::Associations::ThroughAssociationScope.construct_from()\n\n
construct_join_attributes ActiveRecord::Associations::ThroughAssociationScope.construct_join_attributes(associate)\nConstruct attributes for :through pointing to owner and associate.\n
construct_joins ActiveRecord::Associations::ThroughAssociationScope.construct_joins(custom_joins\n= nil)\n\n
construct_owner_attributes ActiveRecord::Associations::ThroughAssociationScope.construct_owner_attributes(reflection)\nConstruct attributes for associate pointing to owner.\n
construct_quoted_owner_attributes ActiveRecord::Associations::ThroughAssociationScope.construct_quoted_owner_attributes(reflection)\nAssociate attributes pointing to owner, quoted.\n
construct_scope ActiveRecord::Associations::ThroughAssociationScope.construct_scope()\n\n
construct_select ActiveRecord::Associations::ThroughAssociationScope.construct_select(custom_select\n= nil)\n\n
sql_conditions ActiveRecord::Associations::ThroughAssociationScope.sql_conditions()\n\n
quote ActiveRecord::ConnectionAdapters::Quoting.quote(value, column = nil)\nQuotes the column value to help prevent\n{SQL injection attacks}[http://en.wikipedia.org/wiki/SQL_injection].\n
quote_column_name ActiveRecord::ConnectionAdapters::Quoting.quote_column_name(column_name)\nQuotes the column name. Defaults to no quoting.\n
quote_string ActiveRecord::ConnectionAdapters::Quoting.quote_string(s)\nQuotes a string, escaping any ' (single quote) and \ (backslash)\ncharacters.\n
quote_table_name ActiveRecord::ConnectionAdapters::Quoting.quote_table_name(table_name)\nQuotes the table name. Defaults to column name quoting.\n
quoted_date ActiveRecord::ConnectionAdapters::Quoting.quoted_date(value)\n\n
quoted_false ActiveRecord::ConnectionAdapters::Quoting.quoted_false()\n\n
quoted_true ActiveRecord::ConnectionAdapters::Quoting.quoted_true()\n\n
add_column ActiveRecord::ConnectionAdapters::SchemaStatements.add_column(table_name,\ncolumn_name, type, options = {})\nAdds a new column to the named table.\nSee TableDefinition#column for details of the options you can use.\n
add_index ActiveRecord::ConnectionAdapters::SchemaStatements.add_index(table_name,\ncolumn_name, options = {})\nAdds a new index to the table.  +column_name+ can be a single Symbol, or\nan Array of Symbols.\n\nThe index will be named after the table and the first column name,\nunless you pass <tt>:name</tt> as an option.\n\nWhen creating an index on multiple columns, the first column is used as a name\nfor the index. For example, when you specify an index on two columns\n[<tt>:first</tt>, <tt>:last</tt>], the DBMS creates an index for both columns\nas well as an\nindex for the first column <tt>:first</tt>. Using just the first name for\nthis index\nmakes sense, because you will never have to create a singular index with this\nname.\n\n===== Examples\n\n====== Creating a simple index\n add_index(:suppliers, :name)\ngenerates\n CREATE INDEX suppliers_name_index ON suppliers(name)\n\n====== Creating a unique index\n add_index(:accounts, [:branch_id, :party_id], :unique => true)\ngenerates\n CREATE UNIQUE INDEX accounts_branch_id_party_id_index ON accounts(branch_id,\n party_id)\n\n====== Creating a named index\n add_index(:accounts, [:branch_id, :party_id], :unique => true, :name =>\n 'by_branch_party')\ngenerates\n CREATE UNIQUE INDEX by_branch_party ON accounts(branch_id, party_id)\n\n====== Creating an index with specific key length\n add_index(:accounts, :name, :name => 'by_name', :length => 10)\ngenerates\n CREATE INDEX by_name ON accounts(name(10))\n\n add_index(:accounts, [:name, :surname], :name => 'by_name_surname', :length\n => {:name => 10, :surname => 15})\ngenerates\n CREATE INDEX by_name_surname ON accounts(name(10), surname(15))\n\nNote: SQLite doesn't support index length\n
add_timestamps ActiveRecord::ConnectionAdapters::SchemaStatements.add_timestamps(table_name)\nAdds timestamps (created_at and updated_at) columns to the named table.\n===== Examples\n add_timestamps(:suppliers)\n
assume_migrated_upto_version ActiveRecord::ConnectionAdapters::SchemaStatements.assume_migrated_upto_version(version,\nmigrations_path = ActiveRecord::Migrator.migrations_path)\n\n
change_column ActiveRecord::ConnectionAdapters::SchemaStatements.change_column(table_name,\ncolumn_name, type, options = {})\nChanges the column's definition according to the new options.\nSee TableDefinition#column for details of the options you can use.\n===== Examples\n change_column(:suppliers, :name, :string, :limit => 80)\n change_column(:accounts, :description, :text)\n
change_column_default ActiveRecord::ConnectionAdapters::SchemaStatements.change_column_default(table_name,\ncolumn_name, default)\nSets a new default value for a column.  If you want to set the default\nvalue to +NULL+, you are out of luck.  You need to\nDatabaseStatements#execute the appropriate SQL statement yourself.\n===== Examples\n change_column_default(:suppliers, :qualification, 'new')\n change_column_default(:accounts, :authorized, 1)\n
change_table ActiveRecord::ConnectionAdapters::SchemaStatements.change_table(table_name)\nA block for changing columns in +table+.\n\n=== Example\n change_table() yields a Table instance\n change_table(:suppliers) do |t|\n   t.column :name, :string, :limit => 60\n Other column alterations here\n end\n\n===== Examples\n====== Add a column\n change_table(:suppliers) do |t|\n   t.column :name, :string, :limit => 60\n end\n\n====== Add 2 integer columns\n change_table(:suppliers) do |t|\n   t.integer :width, :height, :null => false, :default => 0\n end\n\n====== Add created_at/updated_at columns\n change_table(:suppliers) do |t|\n   t.timestamps\n end\n\n====== Add a foreign key column\n change_table(:suppliers) do |t|\n   t.references :company\n end\n\nCreates a <tt>company_id(integer)</tt> column\n\n====== Add a polymorphic foreign key column\n change_table(:suppliers) do |t|\n   t.belongs_to :company, :polymorphic => true\n end\n\nCreates <tt>company_type(varchar)</tt> and <tt>company_id(integer)</tt> columns\n\n====== Remove a column\n change_table(:suppliers) do |t|\n   t.remove :company\n end\n\n====== Remove several columns\n change_table(:suppliers) do |t|\n   t.remove :company_id\n   t.remove :width, :height\n end\n\n====== Remove an index\n change_table(:suppliers) do |t|\n   t.remove_index :company_id\n end\n\nSee also Table for details on\nall of the various column transformation\n
column_exists? ActiveRecord::ConnectionAdapters::SchemaStatements.column_exists?(table_name,\ncolumn_name, type = nil, options = {})\nChecks to see if a column exists in a given table.\n\n=== Examples\n Check a column exists\n column_exists?(:suppliers, :name)\n Check a column exists of a particular type\n column_exists?(:suppliers, :name, :string)\n Check a column exists with a specific definition\n column_exists?(:suppliers, :name, :string, :limit => 100)\n
columns ActiveRecord::ConnectionAdapters::SchemaStatements.columns(table_name,\nname = nil)\nReturns an array of Column objects for the table specified by +table_name+.\nSee the concrete implementation for details on the expected parameter values.\n
create_table ActiveRecord::ConnectionAdapters::SchemaStatements.create_table(table_name,\noptions = {})\nCreates a new table with the name +table_name+. +table_name+ may either\nbe a String or a Symbol.\n\nThere are two ways to work with +create_table+.  You can use the block\nform or the regular form, like this:\n\n=== Block form\n create_table() passes a TableDefinition object to the block.\n This form will not only create the table, but also columns for the\n table.\n\n create_table(:suppliers) do |t|\n   t.column :name, :string, :limit => 60\n Other fields here\n end\n\n=== Block form, with shorthand\n You can also use the column types as method calls, rather than calling the\n column method.\n create_table(:suppliers) do |t|\n   t.string :name, :limit => 60\n Other fields here\n end\n\n=== Regular form\n Creates a table called 'suppliers' with no columns.\n create_table(:suppliers)\n Add a column to 'suppliers'.\n add_column(:suppliers, :name, :string, {:limit => 60})\n\nThe +options+ hash can include the following keys:\n[<tt>:id</tt>]\n  Whether to automatically add a primary key column. Defaults to true.\n  Join tables for +has_and_belongs_to_many+ should set it to false.\n[<tt>:primary_key</tt>]\n  The name of the primary key, if one is to be added automatically.\n  Defaults to +id+. If <tt>:id</tt> is false this option is ignored.\n\n  Also note that this just sets the primary key in the table. You additionally\n  need to configure the primary key in the model via the +set_primary_key+\n  macro.\n  Models do NOT auto-detect the primary key from their table definition.\n\n[<tt>:options</tt>]\n  Any extra options you want appended to the table definition.\n[<tt>:temporary</tt>]\n  Make a temporary table.\n[<tt>:force</tt>]\n  Set to true to drop the table before creating it.\n  Defaults to false.\n\n===== Examples\n====== Add a backend specific option to the generated SQL (MySQL)\n create_table(:suppliers, :options => 'ENGINE=InnoDB DEFAULT CHARSET=utf8')\ngenerates:\n CREATE TABLE suppliers (\n   id int(11) DEFAULT NULL auto_increment PRIMARY KEY\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n====== Rename the primary key column\n create_table(:objects, :primary_key => 'guid') do |t|\n   t.column :name, :string, :limit => 80\n end\ngenerates:\n CREATE TABLE objects (\n   guid int(11) DEFAULT NULL auto_increment PRIMARY KEY,\n   name varchar(80)\n )\n\n====== Do not add a primary key column\n create_table(:categories_suppliers, :id => false) do |t|\n   t.column :category_id, :integer\n   t.column :supplier_id, :integer\n end\ngenerates:\n CREATE TABLE categories_suppliers (\n   category_id int,\n   supplier_id int\n )\n\nSee also TableDefinition#column for details on how to create columns.\n
distinct ActiveRecord::ConnectionAdapters::SchemaStatements.distinct(columns, order_by)\nSELECT DISTINCT clause for a given set of columns and a given ORDER BY clause.\nBoth PostgreSQL and Oracle overrides this for custom DISTINCT syntax.\n\n  distinct("posts.id", "posts.created_at desc")\n
drop_table ActiveRecord::ConnectionAdapters::SchemaStatements.drop_table(table_name,\noptions = {})\nDrops a table from the database.\n
index_exists? ActiveRecord::ConnectionAdapters::SchemaStatements.index_exists?(table_name,\ncolumn_name, options = {})\nChecks to see if an index exists on a table for a given index definition\n\n=== Examples\n Check an index exists\n index_exists?(:suppliers, :company_id)\n Check an index on multiple columns exists\n index_exists?(:suppliers, [:company_id, :company_type])\n Check a unique index exists\n index_exists?(:suppliers, :company_id, :unique => true)\n Check an index with a custom name exists\n index_exists?(:suppliers, :company_id, :name => "idx_company_id"\n
index_name_exists? ActiveRecord::ConnectionAdapters::SchemaStatements.index_name_exists?(table_name,\nindex_name, default)\nVerify the existence of an index with a given name.\n\nThe default argument is returned if the underlying implementation does not\ndefine the indexes method,\nas there's no way to determine the correct answer in that case.\n
initialize_schema_migrations_table ActiveRecord::ConnectionAdapters::SchemaStatements.initialize_schema_migrations_table()\nShould not be called normally, but this operation is non-destructive.\nThe migrations module handles this automatically.\n
native_database_types ActiveRecord::ConnectionAdapters::SchemaStatements.native_database_types()\nReturns a Hash of mappings from the abstract data types to the native\ndatabase types.  See TableDefinition#column for details on the recognized\nabstract data types.\n
options_include_default? ActiveRecord::ConnectionAdapters::SchemaStatements.options_include_default?(options)\n\n
quoted_columns_for_index ActiveRecord::ConnectionAdapters::SchemaStatements.quoted_columns_for_index(column_names,\noptions = {})\nOverridden by the mysql adapter for supporting index lengths\n
remove_column ActiveRecord::ConnectionAdapters::SchemaStatements.remove_column(table_name,\n*column_names)\nRemoves the column(s) from the table definition.\n===== Examples\n remove_column(:suppliers, :qualification)\n remove_columns(:suppliers, :qualification, :experience)\n
remove_columns ActiveRecord::ConnectionAdapters::SchemaStatements.remove_columns(table_name,\n*column_names)\n\n
remove_index ActiveRecord::ConnectionAdapters::SchemaStatements.remove_index(table_name,\noptions = {})\nRemove the given index from the table.\n\nRemove the suppliers_name_index in the suppliers table.\n  remove_index :suppliers, :name\nRemove the index named accounts_branch_id_index in the accounts table.\n  remove_index :accounts, :column => :branch_id\nRemove the index named accounts_branch_id_party_id_index in the accounts table.\n  remove_index :accounts, :column => [:branch_id, :party_id]\nRemove the index named by_branch_party in the accounts table.\n  remove_index :accounts, :name => :by_branch_party\n
remove_timestamps ActiveRecord::ConnectionAdapters::SchemaStatements.remove_timestamps(table_name)\nRemoves the timestamp columns (created_at and updated_at) from the table\ndefinition.\n===== Examples\n remove_timestamps(:suppliers)\n
rename_column ActiveRecord::ConnectionAdapters::SchemaStatements.rename_column(table_name,\ncolumn_name, new_column_name)\nRenames a column.\n===== Example\n rename_column(:suppliers, :description, :name)\n
rename_index ActiveRecord::ConnectionAdapters::SchemaStatements.rename_index(table_name,\nold_name, new_name)\nRename an index.\n\nRename the index_people_on_last_name index to index_users_on_last_name\n  rename_index :people, 'index_people_on_last_name', 'index_users_on_last_name'\n
rename_table ActiveRecord::ConnectionAdapters::SchemaStatements.rename_table(table_name,\nnew_name)\nRenames a table.\n===== Example\n rename_table('octopuses', 'octopi')\n
structure_dump ActiveRecord::ConnectionAdapters::SchemaStatements.structure_dump()\nReturns a string of <tt>CREATE TABLE</tt> SQL statement(s) for recreating the\nentire structure of the database.\n
table_alias_for ActiveRecord::ConnectionAdapters::SchemaStatements.table_alias_for(table_name)\nTruncates a table alias according to the limits of the current adapter.\n
table_exists? ActiveRecord::ConnectionAdapters::SchemaStatements.table_exists?(table_name)\ndef tables(name = nil) end\n
dirties_query_cache ActiveRecord::ConnectionAdapters::QueryCache.dirties_query_cache(base,\n*method_names)\n\n
included ActiveRecord::ConnectionAdapters::QueryCache.included(base)\n\n
cache ActiveRecord::ConnectionAdapters::QueryCache.cache()\nEnable the query cache within the block.\n
cache_sql ActiveRecord::ConnectionAdapters::QueryCache.cache_sql(sql)\n\n
clear_query_cache ActiveRecord::ConnectionAdapters::QueryCache.clear_query_cache()\nClears the query cache.\n\nOne reason you may wish to call this method explicitly is between queries\nthat ask the database to randomize results. Otherwise the cache would see\nthe same SQL query and repeatedly return the same result each time, silently\nundermining the randomness you were expecting.\n
select_all ActiveRecord::ConnectionAdapters::QueryCache.select_all(*args)\n\n
uncached ActiveRecord::ConnectionAdapters::QueryCache.uncached()\nDisable the query cache within the block.\n
column_name_length ActiveRecord::ConnectionAdapters::DatabaseLimits.column_name_length()\nthe maximum length of a column name\n
columns_per_multicolumn_index ActiveRecord::ConnectionAdapters::DatabaseLimits.columns_per_multicolumn_index()\nthe maximum number of columns in a multicolumn index\n
columns_per_table ActiveRecord::ConnectionAdapters::DatabaseLimits.columns_per_table()\nthe maximum number of columns per table\n
in_clause_length ActiveRecord::ConnectionAdapters::DatabaseLimits.in_clause_length()\nthe maximum number of elements in an IN (x,y,z) clause\n
index_name_length ActiveRecord::ConnectionAdapters::DatabaseLimits.index_name_length()\nthe maximum length of an index name\n
indexes_per_table ActiveRecord::ConnectionAdapters::DatabaseLimits.indexes_per_table()\nthe maximum number of indexes per table\n
joins_per_query ActiveRecord::ConnectionAdapters::DatabaseLimits.joins_per_query()\nmaximum number of joins in a single query\n
sql_query_length ActiveRecord::ConnectionAdapters::DatabaseLimits.sql_query_length()\nthe maximum length of an SQL query\n
table_alias_length ActiveRecord::ConnectionAdapters::DatabaseLimits.table_alias_length()\nthe maximum length of a table alias\n
table_name_length ActiveRecord::ConnectionAdapters::DatabaseLimits.table_name_length()\nthe maximum length of a table name\n
add_limit_offset! ActiveRecord::ConnectionAdapters::DatabaseStatements.add_limit_offset!(sql,\noptions)\nAppends +LIMIT+ and +OFFSET+ options to an SQL statement, or some SQL\nfragment that has the same semantics as LIMIT and OFFSET.\n\n+options+ must be a Hash which contains a +:limit+ option\nand an +:offset+ option.\n\nThis method *modifies* the +sql+ parameter.\n\n===== Examples\n add_limit_offset!('SELECT * FROM suppliers', {:limit => 10, :offset => 50})\ngenerates\n SELECT * FROM suppliers LIMIT 10 OFFSET 50\n
add_transaction_record ActiveRecord::ConnectionAdapters::DatabaseStatements.add_transaction_record(record)\nRegister a record with the current transaction so that its after_commit and\nafter_rollback callbacks\ncan be called.\n
begin_db_transaction ActiveRecord::ConnectionAdapters::DatabaseStatements.begin_db_transaction()\nBegins the transaction (and turns off auto-committing).\n
case_sensitive_equality_operator ActiveRecord::ConnectionAdapters::DatabaseStatements.case_sensitive_equality_operator()\n\n
commit_db_transaction ActiveRecord::ConnectionAdapters::DatabaseStatements.commit_db_transaction()\nCommits the transaction (and turns on auto-committing).\n
commit_transaction_records ActiveRecord::ConnectionAdapters::DatabaseStatements.commit_transaction_records()\nSend a commit message to all records after they have been committed.\n
default_sequence_name ActiveRecord::ConnectionAdapters::DatabaseStatements.default_sequence_name(table,\ncolumn)\n\n
delete ActiveRecord::ConnectionAdapters::DatabaseStatements.delete(sql, name = nil)\nExecutes the delete statement and returns the number of rows affected.\n
delete_sql ActiveRecord::ConnectionAdapters::DatabaseStatements.delete_sql(sql, name\n= nil)\nExecutes the delete statement and returns the number of rows affected.\n
empty_insert_statement_value ActiveRecord::ConnectionAdapters::DatabaseStatements.empty_insert_statement_value()\n\n
execute ActiveRecord::ConnectionAdapters::DatabaseStatements.execute(sql, name =\nnil, skip_logging = false)\nExecutes the SQL statement in the context of this connection.\n
insert ActiveRecord::ConnectionAdapters::DatabaseStatements.insert(sql, name = nil,\npk = nil, id_value = nil, sequence_name = nil)\nReturns the last auto-generated ID from the affected table.\n
insert_fixture ActiveRecord::ConnectionAdapters::DatabaseStatements.insert_fixture(fixture,\ntable_name)\nInserts the given fixture into the table. Overridden in adapters that require\nsomething beyond a simple insert (eg. Oracle).\n
insert_sql ActiveRecord::ConnectionAdapters::DatabaseStatements.insert_sql(sql, name =\nnil, pk = nil, id_value = nil, sequence_name = nil)\nReturns the last auto-generated ID from the affected table.\n
limited_update_conditions ActiveRecord::ConnectionAdapters::DatabaseStatements.limited_update_conditions(where_sql,\nquoted_table_name, quoted_primary_key)\n\n
outside_transaction? ActiveRecord::ConnectionAdapters::DatabaseStatements.outside_transaction?()\nChecks whether there is currently no transaction active. This is done\nby querying the database driver, and does not use the transaction\nhouse-keeping information recorded by #increment_open_transactions and\nfriends.\n\nReturns true if there is no transaction active, false if there is a\ntransaction active, and nil if this information is unknown.\n\nNot all adapters supports transaction state introspection. Currently,\nonly the PostgreSQL adapter supports this.\n
reset_sequence! ActiveRecord::ConnectionAdapters::DatabaseStatements.reset_sequence!(table,\ncolumn, sequence = nil)\nSet the sequence to the max value of the table's column.\n
rollback_db_transaction ActiveRecord::ConnectionAdapters::DatabaseStatements.rollback_db_transaction()\nRolls back the transaction (and turns on auto-committing). Must be\ndone if the transaction block raises an exception or returns false.\n
rollback_transaction_records ActiveRecord::ConnectionAdapters::DatabaseStatements.rollback_transaction_records(rollback)\nSend a rollback message to all records after they have been rolled back. If\nrollback\nis false, only rollback records since the last save point.\n
sanitize_limit ActiveRecord::ConnectionAdapters::DatabaseStatements.sanitize_limit(limit)\nSanitizes the given LIMIT parameter in order to prevent SQL injection.\n\n+limit+ may be anything that can evaluate to a string via #to_s. It\nshould look like an integer, or a comma-delimited list of integers.\n\nReturns the sanitized limit parameter, either as an integer, or as a\nstring which contains a comma-delimited list of integers.\n
select ActiveRecord::ConnectionAdapters::DatabaseStatements.select(sql, name = nil)\nReturns an array of record hashes with the column names as keys and\ncolumn values as values.\n
select_all ActiveRecord::ConnectionAdapters::DatabaseStatements.select_all(sql, name\n= nil)\nReturns an array of record hashes with the column names as keys and\ncolumn values as values.\n
select_one ActiveRecord::ConnectionAdapters::DatabaseStatements.select_one(sql, name\n= nil)\nReturns a record hash with the column names as keys and column values\nas values.\n
select_rows ActiveRecord::ConnectionAdapters::DatabaseStatements.select_rows(sql, name\n= nil)\nReturns an array of arrays containing the field values.\nOrder is the same as that returned by +columns+.\n
select_value ActiveRecord::ConnectionAdapters::DatabaseStatements.select_value(sql,\nname = nil)\nReturns a single value from a record\n
select_values ActiveRecord::ConnectionAdapters::DatabaseStatements.select_values(sql,\nname = nil)\nReturns an array of the values of the first column in a select:\n  select_values("SELECT id FROM companies LIMIT 3") => [1,2,3]\n
transaction ActiveRecord::ConnectionAdapters::DatabaseStatements.transaction(options = {})\nRuns the given block in a database transaction, and returns the result\nof the block.\n\n== Nested transactions support\n\nMost databases don't support true nested transactions. At the time of\nwriting, the only database that supports true nested transactions that\nwe're aware of, is MS-SQL.\n\nIn order to get around this problem, #transaction will emulate the effect\nof nested transactions, by using savepoints:\nhttp://dev.mysql.com/doc/refman/5.0/en/savepoints.html\nSavepoints are supported by MySQL and PostgreSQL, but not SQLite3.\n\nIt is safe to call this method if a database transaction is already open,\ni.e. if #transaction is called within another #transaction block. In case\nof a nested call, #transaction will behave as follows:\n\n- The block will be run without doing anything. All database statements\n  that happen within the block are effectively appended to the already\n  open database transaction.\n- However, if +:requires_new+ is set, the block will be wrapped in a\n  database savepoint acting as a sub-transaction.\n\n=== Caveats\n\nMySQL doesn't support DDL transactions. If you perform a DDL operation,\nthen any created savepoints will be automatically released. For example,\nif you've created a savepoint, then you execute a CREATE TABLE statement,\nthen the savepoint that was created will be automatically released.\n\nThis means that, on MySQL, you shouldn't execute DDL operations inside\na #transaction call that you know might create a savepoint. Otherwise,\ntransaction will raise exceptions when it tries to release the\nalready-automatically-released savepoints:\n\n  Model.connection.transaction do  # BEGIN\n    Model.connection.transaction(:requires_new => true) do  # CREATE SAVEPOINT\n    active_record_1\n      Model.connection.create_table(...)\n active_record_1 now automatically released\n    end  # RELEASE SAVEPOINT active_record_1  <--- BOOM! database error!\n  end\n
update ActiveRecord::ConnectionAdapters::DatabaseStatements.update(sql, name = nil)\nExecutes the update statement and returns the number of rows affected.\n
update_sql ActiveRecord::ConnectionAdapters::DatabaseStatements.update_sql(sql, name\n= nil)\nExecutes the update statement and returns the number of rows affected.\n
errors ActiveResource::Validations.errors()\nReturns the Errors object that holds all information about attribute error\nmessages.\n
save_with_validation ActiveResource::Validations.save_with_validation(options=nil)\nValidate a resource and save (POST) it to the remote web service.\nIf any local validations fail - the save (POST) will not be attempted.\n
valid? ActiveResource::Validations.valid?()\nChecks for errors on an object (i.e., is resource.errors empty?).\n\nRuns all the specified local validations and returns true if no errors\nwere added, otherwise false.\nRuns local validations (eg those on your Active Resource model), and\nalso any errors returned from the remote system the last time we\nsaved.\nRemote errors can only be cleared by trying to re-save the resource.\n\n==== Examples\n  my_person = Person.create(params[:person])\n  my_person.valid?\n => true\n\n  my_person.errors.add('login', 'can not be empty') if my_person.login == ''\n  my_person.valid?\n => false\n
decode ActiveResource::Formats::XmlFormat.decode(xml)\n\n
encode ActiveResource::Formats::XmlFormat.encode(hash, options={})\n\n
extension ActiveResource::Formats::XmlFormat.extension()\n\n
from_xml_data ActiveResource::Formats::XmlFormat.from_xml_data(data)\nManipulate from_xml Hash, because xml_simple is not exactly what we\nwant for Active Resource.\n
mime_type ActiveResource::Formats::XmlFormat.mime_type()\n\n
decode ActiveResource::Formats::JsonFormat.decode(json)\n\n
encode ActiveResource::Formats::JsonFormat.encode(hash, options = nil)\n\n
extension ActiveResource::Formats::JsonFormat.extension()\n\n
mime_type ActiveResource::Formats::JsonFormat.mime_type()\n\n
delete ActiveResource::CustomMethods.delete(custom_method_name, options = {})\n\n
get ActiveResource::CustomMethods.get(custom_method_name, options = {})\nInvokes a GET to a given custom REST method. For example:\n\n  Person.get(:active)  # GET /people/active.xml\n => [{:id => 1, :name => 'Ryan'}, {:id => 2, :name => 'Joe'}]\n\n  Person.get(:active, :awesome => true)  # GET /people/active.xml?awesome=true\n => [{:id => 1, :name => 'Ryan'}]\n\nNote: the objects returned from this method are not automatically converted\ninto ActiveResource::Base instances - they are ordinary Hashes. If you\nare expecting\nActiveResource::Base instances, use the <tt>find</tt> class method with the\n<tt>:from</tt> option. For example:\n\n  Person.find(:all, :from => :active)\n
orig_delete ActiveResource::CustomMethods.orig_delete(custom_method_name, options = {})\n\n
post ActiveResource::CustomMethods.post(custom_method_name, options = {}, body = '')\n\n
put ActiveResource::CustomMethods.put(custom_method_name, options = {}, body = '')\n\n
custom_method_collection_url ActiveResource::CustomMethods::ClassMethods.custom_method_collection_url(method_name,\noptions = {})\n\n
custom_method_element_url ActiveResource::CustomMethods::InstanceMethods.custom_method_element_url(method_name,\noptions = {})\n\n
custom_method_new_element_url ActiveResource::CustomMethods::InstanceMethods.custom_method_new_element_url(method_name,\noptions = {})\n\n
delete ActiveResource::CustomMethods::InstanceMethods.delete(method_name, options\n= {})\n\n
get ActiveResource::CustomMethods::InstanceMethods.get(method_name, options = {})\n\n
post ActiveResource::CustomMethods::InstanceMethods.post(method_name, options =\n{}, body = nil)\n\n
put ActiveResource::CustomMethods::InstanceMethods.put(method_name, options =\n{}, body = '')\n\n
decode64 ActiveSupport::Base64.decode64(data)\nDecodes a base 64 encoded string to its original representation.\n\n ActiveSupport::Base64.decode64("T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==")\n => "Original unencoded string"\n
encode64 ActiveSupport::Base64.encode64(data)\nEncodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline character.\n\n ActiveSupport::Base64.encode64("Original unencoded string")\n => "T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==\\n"\n
encode64s ActiveSupport::Base64.encode64s(value)\nEncodes the value as base64 without the newline breaks. This makes the base64\nencoding readily usable as URL parameters\nor memcache keys without further processing.\n\n ActiveSupport::Base64.encode64s("Original unencoded string")\n => "T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw=="\n
callback ActiveSupport::Callbacks.callback(kind)\n\n
run_callbacks ActiveSupport::Callbacks.run_callbacks(kind, *args, &block)\n\n
define_callbacks ActiveSupport::Callbacks::ClassMethods.define_callbacks(*callbacks)\nDefines callbacks types:\n\n  define_callbacks :validate\n\nThis macro accepts the following options:\n\n* <tt>:terminator</tt> - Indicates when a before filter is considered\nto be halted.\n\n  define_callbacks :validate, :terminator => "result == false"\n\nIn the example above, if any before validate callbacks returns +false+,\nother callbacks are not executed. Defaults to "false", meaning no value\nhalts the chain.\n\n* <tt>:rescuable</tt> - By default, after filters are not executed if\nthe given block or a before filter raises an error. Set this option to\ntrue to change this behavior.\n\n* <tt>:scope</tt> - Indicates which methods should be executed when a class\nis given as callback. Defaults to <tt>[:kind]</tt>.\n\n class Audit\n   def before(caller)\n     puts 'Audit: before is called'\n   end\n\n   def before_save(caller)\n     puts 'Audit: before_save is called'\n   end\n end\n\n class Account\n   include ActiveSupport::Callbacks\n\n   define_callbacks :save\n   set_callback :save, :before, Audit.new\n\n   def save\n     run_callbacks :save do\n       puts 'save in main'\n     end\n   end\n end\n\nIn the above case whenever you save an account the method <tt>Audit#before</tt>\nwill\nbe called. On the other hand\n\n  define_callbacks :save, :scope => [:kind, :name]\n\nwould trigger <tt>Audit#before_save</tt> instead. That's constructed by calling\n<tt>"#{kind}_#{name}"</tt> on the given instance. In this case "kind" is\n"before" and\n"name" is "save". In this context ":kind" and ":name" have special meanings:\n":kind"\nrefers to the kind of callback (before/after/around) and ":name" refers to the\nmethod on which callbacks are being defined.\n\nA declaration like\n\n  define_callbacks :save, :scope => [:name]\n\nwould call <tt>Audit#save</tt>.\n
reset_callbacks ActiveSupport::Callbacks::ClassMethods.reset_callbacks(symbol)\nReset callbacks for a given type.\n
set_callback ActiveSupport::Callbacks::ClassMethods.set_callback(name, *filter_list, &block)\nSet callbacks for a previously defined callback.\n\nSyntax:\n  set_callback :save, :before, :before_meth\n  set_callback :save, :after,  :after_meth, :if => :condition\n  set_callback :save, :around, lambda { |r| stuff; yield; stuff }\n\nUse skip_callback to skip any defined one.\n\nWhen creating or skipping callbacks, you can specify conditions that\nare always the same for a given key. For instance, in Action Pack,\nwe convert :only and :except conditions into per-key conditions.\n\n  before_filter :authenticate, :except => "index"\n\nbecomes\n\n  dispatch_callback :before, :authenticate, :per_key => {:unless => proc {|c|\n  c.action_name == "index"}}\n\nPer-Key conditions are evaluated only once per use of a given key.\nIn the case of the above example, you would do:\n\n  run_callbacks(:dispatch, action_name) { ... dispatch stuff ... }\n\nIn that case, each action_name would get its own compiled callback\nmethod that took into consideration the per_key conditions. This\nis a speed improvement for ActionPack.\n
skip_callback ActiveSupport::Callbacks::ClassMethods.skip_callback(name, *filter_list,\n&block)\nSkip a previously defined callback for a given type.\n
handler_for_rescue ActiveSupport::Rescuable.handler_for_rescue(exception)\n\n
rescue_with_handler ActiveSupport::Rescuable.rescue_with_handler(exception)\nTries to rescue the exception by looking up and calling a registered handler.\n
rescue_from ActiveSupport::Rescuable::ClassMethods.rescue_from(*klasses, &block)\nRescue exceptions raised in controller actions.\n\n<tt>rescue_from</tt> receives a series of exception classes or class\nnames, and a trailing <tt>:with</tt> option with the name of a method\nor a Proc object to be called to handle them. Alternatively a block can\nbe given.\n\nHandlers that take one argument will be called with the exception, so\nthat the exception can be inspected when dealing with it.\n\nHandlers are inherited. They are searched from right to left, from\nbottom to top, and up the hierarchy. The handler of the first class for\nwhich <tt>exception.is_a?(klass)</tt> holds true is the one invoked, if\nany.\n\n  class ApplicationController < ActionController::Base\n    rescue_from User::NotAuthorized, :with => :deny_access # self defined\n    exception\n    rescue_from ActiveRecord::RecordInvalid, :with => :show_errors\n\n    rescue_from 'MyAppError::Base' do |exception|\n      render :xml => exception, :status => 500\n    end\n\n    protected\n      def deny_access\n        ...\n      end\n\n      def show_errors(exception)\n        exception.record.new_record? ? ...\n      end\n  end\n
base64 ActiveSupport::SecureRandom.base64(n=nil)\nSecureRandom.base64 generates a random base64 string.\n\nThe argument n specifies the length of the random length.\nThe length of the result string is about 4/3 of n.\n\nIf n is not specified, 16 is assumed.\nIt may be larger in future.\n\nIf secure random number generator is not available,\nNotImplementedError is raised.\n
hex ActiveSupport::SecureRandom.hex(n=nil)\nSecureRandom.hex generates a random hex string.\n\nThe argument n specifies the length of the random length.\nThe length of the result string is twice of n.\n\nIf n is not specified, 16 is assumed.\nIt may be larger in future.\n\nIf secure random number generator is not available,\nNotImplementedError is raised.\n
random_bytes ActiveSupport::SecureRandom.random_bytes(n=nil)\nSecureRandom.random_bytes generates a random binary string.\n\nThe argument n specifies the length of the result string.\n\nIf n is not specified, 16 is assumed.\nIt may be larger in future.\n\nIf secure random number generator is not available,\nNotImplementedError is raised.\n
random_number ActiveSupport::SecureRandom.random_number(n=0)\nSecureRandom.random_number generates a random number.\n\nIf an positive integer is given as n,\nSecureRandom.random_number returns an integer:\n0 <= SecureRandom.random_number(n) < n.\n\nIf 0 is given or an argument is not given,\nSecureRandom.random_number returns an float:\n0.0 <= SecureRandom.random_number() < 1.0.\n
daemon Process.daemon(nochdir = nil, noclose = nil)\n\n
h ERB::Util.h(s)\n\n
html_escape ERB::Util.html_escape(s)\nA utility method for escaping HTML tag characters.\nThis method is also aliased as <tt>h</tt>.\n\nIn your ERb templates, use this method to escape any unsafe content. For\nexample:\n  <%=h @person.name %>\n\n==== Example:\n  puts html_escape("is a > 0 & a < 10?")\n => is a &gt; 0 &amp; a &lt; 10?\n
j ERB::Util.j(s)\n\n
json_escape ERB::Util.json_escape(s)\nA utility method for escaping HTML entities in JSON strings\nusing \uXXXX JavaScript escape sequences for string literals:\n\n  json_escape("is a > 0 & a < 10?")\n => is a \u003E 0 \u0026 a \u003C 10?\n\nNote that after this operation is performed the output is not\nvalid JSON. In particular double quotes are removed:\n\n  json_escape('{"name":"john","created_at":"2010-04-28T01:39:31Z","id":1}')\n => {name:john,created_at:2010-04-28T01:39:31Z,id:1}\n\nThis method is also aliased as +j+, and available as a helper\nin Rails templates:\n\n  <%=j @person.to_json %>\n
h ERB::Util.h(s)\n\n
html_escape ERB::Util.html_escape(s)\nA utility method for escaping HTML tag characters.\nThis method is also aliased as <tt>h</tt>.\n\nIn your ERb templates, use this method to escape any unsafe content. For\nexample:\n  <%=h @person.name %>\n\n==== Example:\n  puts html_escape("is a > 0 & a < 10?")\n => is a &gt; 0 &amp; a &lt; 10?\n
j ERB::Util.j(s)\n\n
json_escape ERB::Util.json_escape(s)\nA utility method for escaping HTML entities in JSON strings\nusing \uXXXX JavaScript escape sequences for string literals:\n\n  json_escape("is a > 0 & a < 10?")\n => is a \u003E 0 \u0026 a \u003C 10?\n\nNote that after this operation is performed the output is not\nvalid JSON. In particular double quotes are removed:\n\n  json_escape('{"name":"john","created_at":"2010-04-28T01:39:31Z","id":1}')\n => {name:john,created_at:2010-04-28T01:39:31Z,id:1}\n\nThis method is also aliased as +j+, and available as a helper\nin Rails templates:\n\n  <%=j @person.to_json %>\n
breakpoint Kernel.breakpoint()\n\n
class_eval Kernel.class_eval(*args, &block)\nclass_eval on an object acts like singleton_class.class_eval.\n
debugger Kernel.debugger()\nStarts a debugging session if ruby-debug has been loaded (call rails server\n--debugger to do load it).\n
enable_warnings Kernel.enable_warnings()\nSets $VERBOSE to true for the duration of the block and back to its original\nvalue afterwards.\n
require_library_or_gem Kernel.require_library_or_gem(library_name)\nRequire a library with fallback to RubyGems.  Warnings during library\nloading are silenced to increase signal/noise for application warnings.\n
silence_stream Kernel.silence_stream(stream)\nSilences any stream for the duration of the block.\n\n  silence_stream(STDOUT) do\n    puts 'This will never be seen'\n  end\n\n  puts 'But this will'\n
silence_warnings Kernel.silence_warnings()\nSets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n  silence_warnings do\n    value = noisy_call # no warning voiced\n  end\n\n  noisy_call # warning voiced\n
singleton_class Kernel.singleton_class()\nReturns the object's singleton class.\n
suppress Kernel.suppress(*exception_classes)\nBlocks and ignores any exception passed as argument if raised within the block.\n\n  suppress(ZeroDivisionError) do\n    1/0\n    puts "This code is NOT reached"\n  end\n\n  puts "This code gets executed and nothing related to ZeroDivisionError\n  was seen"\n
with_warnings Kernel.with_warnings(flag)\nSets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n
as_json Enumerable.as_json(options = nil)\n\n
each_with_object Enumerable.each_with_object(memo, &block)\nIterates over a collection, passing the current element *and* the\n+memo+ to the block. Handy for building up hashes or\nreducing collections down to one object. Examples:\n\n  %w(foo bar).each_with_object({}) { |str, hsh| hsh[str] = str.upcase }\n => {'foo' => 'FOO', 'bar' => 'BAR'}\n\n*Note* that you can't use immutable objects like numbers, true or false as\nthe memo. You would think the following returns 120, but since the memo is\nnever changed, it does not.\n\n  (1..5).each_with_object(1) { |value, memo| memo *= value } # => 1\n
exclude? Enumerable.exclude?(object)\nThe negative of the Enumerable#include?. Returns true if the collection does\nnot include the object.\n
group_by Enumerable.group_by()\nCollect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping records by date.\n\nExample:\n\n  latest_transcripts.group_by(&:day).each do |day, transcripts|\n    p "#{day} -> #{transcripts.map(&:class).join(', ')}"\n  end\n  "2006-03-01 -> Transcript"\n  "2006-02-28 -> Transcript"\n  "2006-02-27 -> Transcript, Transcript"\n  "2006-02-26 -> Transcript, Transcript"\n  "2006-02-25 -> Transcript"\n  "2006-02-24 -> Transcript, Transcript"\n  "2006-02-23 -> Transcript"\n
index_by Enumerable.index_by()\nConvert an enumerable to a hash. Examples:\n\n  people.index_by(&:login)\n    => { "nextangle" => <Person ...>, "chade-" => <Person ...>, ...}\n  people.index_by { |person| "#{person.first_name} #{person.last_name}" }\n    => { "Chade- Fowlersburg-e" => <Person ...>, "David Heinemeier Hansson"\n    => <Person ...>, ...}\n
many? Enumerable.many?(&block)\nReturns true if the collection has more than 1 element. Functionally equivalent\nto collection.size > 1.\nWorks with a block too ala any?, so people.many? { |p| p.age > 26 } # =>\nreturns true if more than 1 person is over 26.\n
sum Enumerable.sum(identity = 0, &block)\nCalculates a sum from the elements. Examples:\n\n payments.sum { |p| p.price * p.tax_rate }\n payments.sum(&:price)\n\nThe latter is a shortcut for:\n\n payments.inject(0) { |sum, p| sum + p.price }\n\nIt can also calculate the sum without the use of a block.\n\n [5, 15, 10].sum # => 30\n ["foo", "bar"].sum # => "foobar"\n [[1, 2], [3, 1, 5]].sum => [1, 2, 3, 1, 5]\n\nThe default sum of an empty list is zero. You can override this default:\n\n [].sum(Payment.new(0)) { |i| i.amount } # => Payment.new(0)\n
ms Benchmark.ms()\n\n
set_logger ActiveSupport::LogSubscriber::TestHelper.set_logger(logger)\nOverwrite if you use another logger in your log subscriber:\n\n  def logger\n    ActiveRecord::Base.logger = @logger\n  end\n
setup ActiveSupport::LogSubscriber::TestHelper.setup()\n\n
teardown ActiveSupport::LogSubscriber::TestHelper.teardown()\n\n
wait ActiveSupport::LogSubscriber::TestHelper.wait()\nWait notifications to be published.\n
instrument ActiveSupport::Notifications.instrument(name, payload = {})\n\n
instrumenter ActiveSupport::Notifications.instrumenter()\n\n
notifier ActiveSupport::Notifications.notifier()\n\n
subscribe ActiveSupport::Notifications.subscribe(*args, &block)\n\n
unsubscribe ActiveSupport::Notifications.unsubscribe(*args)\n\n
expand_cache_key ActiveSupport::Cache.expand_cache_key(key, namespace = nil)\n\n
lookup_store ActiveSupport::Cache.lookup_store(*store_option)\nCreates a new CacheStore object according to the given options.\n\nIf no arguments are passed to this method, then a new\nActiveSupport::Cache::MemoryStore object will be returned.\n\nIf you pass a Symbol as the first argument, then a corresponding cache\nstore class under the ActiveSupport::Cache namespace will be created.\nFor example:\n\n  ActiveSupport::Cache.lookup_store(:memory_store)\n => returns a new ActiveSupport::Cache::MemoryStore object\n\n  ActiveSupport::Cache.lookup_store(:mem_cache_store)\n => returns a new ActiveSupport::Cache::MemCacheStore object\n\nAny additional arguments will be passed to the corresponding cache store\nclass's constructor:\n\n  ActiveSupport::Cache.lookup_store(:file_store, "/tmp/cache")\n => same as: ActiveSupport::Cache::FileStore.new("/tmp/cache")\n\nIf the first argument is not a Symbol, then it will simply be returned:\n\n  ActiveSupport::Cache.lookup_store(MyOwnCacheStore.new)\n => returns MyOwnCacheStore.new\n
bypass_local_cache ActiveSupport::Cache::Strategy::LocalCache.bypass_local_cache()\n\n
local_cache ActiveSupport::Cache::Strategy::LocalCache.local_cache()\n\n
middleware ActiveSupport::Cache::Strategy::LocalCache.middleware()\nMiddleware class can be inserted as a Rack handler to be local cache for the\nduration of request.\n
thread_local_key ActiveSupport::Cache::Strategy::LocalCache.thread_local_key()\n\n
with_local_cache ActiveSupport::Cache::Strategy::LocalCache.with_local_cache()\nUse a local cache for the duration of block.\n
memoized_ivar_for ActiveSupport::Memoizable.memoized_ivar_for(symbol)\n\n
memoize ActiveSupport::Memoizable.memoize(*symbols)\n\n
included ActiveSupport::Memoizable::InstanceMethods.included(base)\n\n
flush_cache ActiveSupport::Memoizable::InstanceMethods.flush_cache(*syms)\n\n
freeze_with_memoizable ActiveSupport::Memoizable::InstanceMethods.freeze_with_memoizable()\n\n
memoize_all ActiveSupport::Memoizable::InstanceMethods.memoize_all()\n\n
prime_cache ActiveSupport::Memoizable::InstanceMethods.prime_cache(*syms)\n\n
unmemoize_all ActiveSupport::Memoizable::InstanceMethods.unmemoize_all()\n\n
compose_codepoints ActiveSupport::Multibyte::Unicode.compose_codepoints(codepoints)\nCompose decomposed characters to the composed form.\n
database ActiveSupport::Multibyte::Unicode.database()\n\n
decompose_codepoints ActiveSupport::Multibyte::Unicode.decompose_codepoints(type, codepoints)\nDecompose composed characters to the decomposed form.\n
g_pack ActiveSupport::Multibyte::Unicode.g_pack(unpacked)\nReverse operation of g_unpack.\n\nExample:\n  Unicode.g_pack(Unicode.g_unpack('क्षि')) # => 'क्षि'\n
g_unpack ActiveSupport::Multibyte::Unicode.g_unpack(string)\nUnpack the string at grapheme boundaries. Returns a list of character lists.\n\nExample:\n  Unicode.g_unpack('क्षि') # => [[2325, 2381], [2359], [2367]]\n  Unicode.g_unpack('Café') # => [[67], [97], [102], [233]]\n
in_char_class? ActiveSupport::Multibyte::Unicode.in_char_class?(codepoint, classes)\nDetect whether the codepoint is in a certain character class. Returns +true+\nwhen it's in the specified\ncharacter class and +false+ otherwise. Valid character classes are:\n<tt>:cr</tt>, <tt>:lf</tt>, <tt>:l</tt>,\n<tt>:v</tt>, <tt>:lv</tt>, <tt>:lvt</tt> and <tt>:t</tt>.\n\nPrimarily used by the grapheme cluster support.\n
normalize ActiveSupport::Multibyte::Unicode.normalize(string, form=nil)\nReturns the KC normalization of the string by default. NFKC is considered\nthe best normalization form for\npassing strings to databases and validations.\n\n* <tt>string</tt> - The string to perform normalization on.\n* <tt>form</tt> - The form you want to normalize in. Should be one of the\nfollowing:\n  <tt>:c</tt>, <tt>:kc</tt>, <tt>:d</tt>, or <tt>:kd</tt>. Default is\n  ActiveSupport::Multibyte.default_normalization_form\n
reorder_characters ActiveSupport::Multibyte::Unicode.reorder_characters(codepoints)\nRe-order codepoints so the string becomes canonical.\n
tidy_byte ActiveSupport::Multibyte::Unicode.tidy_byte(byte)\n\n
tidy_bytes ActiveSupport::Multibyte::Unicode.tidy_bytes(string, force = false)\nReplaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string.\n\nPassing +true+ will forcibly tidy all bytes, assuming that the string's\nencoding is entirely CP1252 or ISO-8859-1.\n
u_unpack ActiveSupport::Multibyte::Unicode.u_unpack(string)\nUnpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn't\nvalid UTF-8.\n\nExample:\n  Unicode.u_unpack('Café') # => [67, 97, 102, 233]\n
parse ActiveSupport::XmlMini_LibXMLSAX.parse(data)\n\n
parse ActiveSupport::XmlMini_NokogiriSAX.parse(data)\n\n
backend ActiveSupport::JSON.backend()\n\n
backend= ActiveSupport::JSON.backend=(name)\n\n
encode ActiveSupport::JSON.encode(value, options = nil)\nDumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n
set_default_backend ActiveSupport::JSON.set_default_backend()\n\n
with_backend ActiveSupport::JSON.with_backend(name)\n\n
convert_dates_from ActiveSupport::JSON::Backends::Yajl.convert_dates_from(data)\n\n
decode ActiveSupport::JSON::Backends::Yajl.decode(json)\nParses a JSON string or IO and convert it into an object\n
decode ActiveSupport::JSON::Backends::Yaml.decode(json)\nParses a JSON string or IO and converts it into an object\n
convert_dates_from ActiveSupport::JSON::Backends::JSONGem.convert_dates_from(data)\n\n
decode ActiveSupport::JSON::Backends::JSONGem.decode(json)\nParses a JSON string or IO and convert it into an object\n
eager_autoload! ActiveSupport::Autoload.eager_autoload!()\n\n
autoload ActiveSupport::Autoload.autoload(const_name, path = @@at_path)\n\n
autoload_at ActiveSupport::Autoload.autoload_at(path)\n\n
autoload_under ActiveSupport::Autoload.autoload_under(path)\n\n
autoloads ActiveSupport::Autoload.autoloads()\n\n
eager_autoload ActiveSupport::Autoload.eager_autoload()\n\n
extended ActiveSupport::Concern.extended(base)\n\n
append_features ActiveSupport::Concern.append_features(base)\n\n
included ActiveSupport::Concern.included(base = nil, &block)\n\n
describe ActiveSupport::Testing::Declarative.describe(text)\n\n
extended ActiveSupport::Testing::Declarative.extended(klass)\n\n
test ActiveSupport::Testing::Declarative.test(name, &block)\ntest "verify something" do\n  ...\nend\n
pending ActiveSupport::Testing::Pending.pending(description = "", &block)\n\n
forking_env? ActiveSupport::Testing::Isolation.forking_env?()\n\n
included ActiveSupport::Testing::Isolation.included(base)\n\n
_run_class_setup ActiveSupport::Testing::Isolation._run_class_setup()\n\n
run ActiveSupport::Testing::Isolation::TestUnit.run(result)\n\n
run ActiveSupport::Testing::Isolation::MiniTest.run(runner)\n\n
run_in_isolation ActiveSupport::Testing::Isolation::Forking.run_in_isolation(&blk)\n\n
run_in_isolation ActiveSupport::Testing::Isolation::Subprocess.run_in_isolation(&blk)\nCrazy H4X to get this working in windows / jruby with\nno forking.\n
included ActiveSupport::Testing::Performance.included(base)\n\n
full_test_name ActiveSupport::Testing::Performance.full_test_name()\n\n
run ActiveSupport::Testing::Performance.run(result)\n\n
run_profile ActiveSupport::Testing::Performance.run_profile(metric)\n\n
run_test ActiveSupport::Testing::Performance.run_test(metric, mode)\n\n
run_warmup ActiveSupport::Testing::Performance.run_warmup()\n\n
assert_blank ActiveSupport::Testing::Assertions.assert_blank(object, message=nil)\nTest if an expression is blank. Passes if object.blank? is true.\n\n  assert_blank [] # => true\n
assert_difference ActiveSupport::Testing::Assertions.assert_difference(expression, difference =\n1, message = nil, &block)\nTest numeric difference between the return value of an expression as a result\nof what is evaluated\nin the yielded block.\n\n  assert_difference 'Article.count' do\n    post :create, :article => {...}\n  end\n\nAn arbitrary expression is passed in and evaluated.\n\n  assert_difference 'assigns(:article).comments(:reload).size' do\n    post :create, :comment => {...}\n  end\n\nAn arbitrary positive or negative difference can be specified. The default\nis +1.\n\n  assert_difference 'Article.count', -1 do\n    post :delete, :id => ...\n  end\n\nAn array of expressions can also be passed in and evaluated.\n\n  assert_difference [ 'Article.count', 'Post.count' ], +2 do\n    post :create, :article => {...}\n  end\n\nA error message can be specified.\n\n  assert_difference 'Article.count', -1, "An Article should be destroyed" do\n    post :delete, :id => ...\n  end\n
assert_no_difference ActiveSupport::Testing::Assertions.assert_no_difference(expression, message =\nnil, &block)\nAssertion that the numeric result of evaluating an expression is not changed\nbefore and after\ninvoking the passed in block.\n\n  assert_no_difference 'Article.count' do\n    post :create, :article => invalid_attributes\n  end\n\nA error message can be specified.\n\n  assert_no_difference 'Article.count', "An Article should not be destroyed" do\n    post :create, :article => invalid_attributes\n  end\n
assert_present ActiveSupport::Testing::Assertions.assert_present(object, message=nil)\nTest if an expression is not blank. Passes if object.present? is true.\n\n  assert_present {:data => 'x' } # => true\n
setup ActiveSupport::Testing::SetupAndTeardown::ClassMethods.setup(*args, &block)\n\n
teardown ActiveSupport::Testing::SetupAndTeardown::ClassMethods.teardown(*args, &block)\n\n
run ActiveSupport::Testing::SetupAndTeardown::ForMiniTest.run(runner)\n\n
run ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit.run(result)\nThis redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support Mocha's hax.\n
_dasherize ActiveSupport::XmlMini._dasherize(key)\n\n
_parse_file ActiveSupport::XmlMini._parse_file(file, entity)\n\n
backend= ActiveSupport::XmlMini.backend=(name)\n\n
rename_key ActiveSupport::XmlMini.rename_key(key, options = {})\n\n
to_tag ActiveSupport::XmlMini.to_tag(key, value, options)\n\n
with_backend ActiveSupport::XmlMini.with_backend(name)\n\n
config ActiveSupport::Configurable.config()\n\n
config ActiveSupport::Configurable::ClassMethods.config()\n\n
config_accessor ActiveSupport::Configurable::ClassMethods.config_accessor(*names)\nAllows you to add shortcut so that you don't have to refer to attribute\nthrough config.\nAlso look at the example for config to contrast.\n\n  class User\n    include ActiveSupport::Configurable\n    config_accessor :allowed_access\n  end\n\n  user = User.new\n  user.allowed_access = true\n  user.allowed_access # => true\n
configure ActiveSupport::Configurable::ClassMethods.configure()\n\n
compress ActiveSupport::Gzip.compress(source)\nCompresses a string using gzip.\n
decompress ActiveSupport::Gzip.decompress(source)\nDecompresses a gzipped string.\n
clear ActiveSupport::DescendantsTracker.clear()\n\n
descendants ActiveSupport::DescendantsTracker.descendants(klass)\n\n
direct_descendants ActiveSupport::DescendantsTracker.direct_descendants(klass)\n\n
descendants ActiveSupport::DescendantsTracker.descendants()\n\n
direct_descendants ActiveSupport::DescendantsTracker.direct_descendants()\n\n
inherited ActiveSupport::DescendantsTracker.inherited(base)\n\n
camelize ActiveSupport::Inflector.camelize(lower_case_and_underscored_word,\nfirst_letter_in_uppercase = true)\nBy default, +camelize+ converts strings to UpperCamelCase. If the argument\nto +camelize+\nis set to <tt>:lower</tt> then +camelize+ produces lowerCamelCase.\n\n+camelize+ will also convert '/' to '::' which is useful for converting\npaths to namespaces.\n\nExamples:\n  "active_record".camelize                # => "ActiveRecord"\n  "active_record".camelize(:lower)        # => "activeRecord"\n  "active_record/errors".camelize         # => "ActiveRecord::Errors"\n  "active_record/errors".camelize(:lower) # => "activeRecord::Errors"\n\nAs a rule of thumb you can think of +camelize+ as the inverse of +underscore+,\nthough there are cases where that does not hold:\n\n  "SSLError".underscore.camelize # => "SslError"\n
classify ActiveSupport::Inflector.classify(table_name)\nCreate a class name from a plural table name like Rails does for table names\nto models.\nNote that this returns a string and not a Class. (To convert to an actual class\nfollow +classify+ with +constantize+.)\n\nExamples:\n  "egg_and_hams".classify # => "EggAndHam"\n  "posts".classify        # => "Post"\n\nSingular names are not handled correctly:\n  "business".classify     # => "Busines"\n
constantize ActiveSupport::Inflector.constantize(camel_cased_word)\nTries to find a constant with the name specified in the argument string:\n\n  "Module".constantize     # => Module\n  "Test::Unit".constantize # => Test::Unit\n\nThe name is assumed to be the one of a top-level constant, no matter whether\nit starts with "::" or not. No lexical context is taken into account:\n\n  C = 'outside'\n  module M\n    C = 'inside'\n    C               # => 'inside'\n    "C".constantize # => 'outside', same as ::C\n  end\n\nNameError is raised when the name is not in CamelCase or the constant is\nunknown.\n
dasherize ActiveSupport::Inflector.dasherize(underscored_word)\nReplaces underscores with dashes in the string.\n\nExample:\n  "puni_puni" # => "puni-puni"\n
demodulize ActiveSupport::Inflector.demodulize(class_name_in_module)\nRemoves the module part from the expression in the string.\n\nExamples:\n  "ActiveRecord::CoreExtensions::String::Inflections".demodulize # =>\n  "Inflections"\n  "Inflections".demodulize                                       # =>\n  "Inflections"\n
foreign_key ActiveSupport::Inflector.foreign_key(class_name,\nseparate_class_name_and_id_with_underscore = true)\nCreates a foreign key name from a class name.\n+separate_class_name_and_id_with_underscore+ sets whether\nthe method should put '_' between the name and 'id'.\n\nExamples:\n  "Message".foreign_key        # => "message_id"\n  "Message".foreign_key(false) # => "messageid"\n  "Admin::Post".foreign_key    # => "post_id"\n
humanize ActiveSupport::Inflector.humanize(lower_case_and_underscored_word)\nCapitalizes the first word and turns underscores into spaces and strips a\ntrailing "_id", if any. Like +titleize+, this is meant for creating pretty\noutput.\n\nExamples:\n  "employee_salary" # => "Employee salary"\n  "author_id"       # => "Author"\n
inflections ActiveSupport::Inflector.inflections()\nYields a singleton instance of Inflector::Inflections so you can specify\nadditional\ninflector rules.\n\nExample:\n  ActiveSupport::Inflector.inflections do |inflect|\n    inflect.uncountable "rails"\n  end\n
ordinalize ActiveSupport::Inflector.ordinalize(number)\nTurns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, 2nd, 3rd, 4th.\n\nExamples:\n  ordinalize(1)     # => "1st"\n  ordinalize(2)     # => "2nd"\n  ordinalize(1002)  # => "1002nd"\n  ordinalize(1003)  # => "1003rd"\n
parameterize ActiveSupport::Inflector.parameterize(string, sep = '-')\nReplaces special characters in a string so that it may be used as part of a\n'pretty' URL.\n\n==== Examples\n\n  class Person\n    def to_param\n      "#{id}-#{name.parameterize}"\n    end\n  end\n\n  @person = Person.find(1)\n => #<Person id: 1, name: "Donald E. Knuth">\n\n  <%= link_to(@person.name, person_path(@person)) %>\n => <a href="/person/1-donald-e-knuth">Donald E. Knuth</a>\n
pluralize ActiveSupport::Inflector.pluralize(word)\nReturns the plural form of the word in the string.\n\nExamples:\n  "post".pluralize             # => "posts"\n  "octopus".pluralize          # => "octopi"\n  "sheep".pluralize            # => "sheep"\n  "words".pluralize            # => "words"\n  "CamelOctopus".pluralize     # => "CamelOctopi"\n
singularize ActiveSupport::Inflector.singularize(word)\nThe reverse of +pluralize+, returns the singular form of a word in a string.\n\nExamples:\n  "posts".singularize            # => "post"\n  "octopi".singularize           # => "octopus"\n  "sheep".singularize            # => "sheep"\n  "word".singularize             # => "word"\n  "CamelOctopi".singularize      # => "CamelOctopus"\n
tableize ActiveSupport::Inflector.tableize(class_name)\nCreate the name of a table like Rails does for models to table names. This\nmethod\nuses the +pluralize+ method on the last word in the string.\n\nExamples\n  "RawScaledScorer".tableize # => "raw_scaled_scorers"\n  "egg_and_ham".tableize     # => "egg_and_hams"\n  "fancyCategory".tableize   # => "fancy_categories"\n
titleize ActiveSupport::Inflector.titleize(word)\nCapitalizes all the words and replaces some characters in the string to create\na nicer looking title. +titleize+ is meant for creating pretty output. It\nis not\nused in the Rails internals.\n\n+titleize+ is also aliased as as +titlecase+.\n\nExamples:\n  "man from the boondocks".titleize # => "Man From The Boondocks"\n  "x-men: the last stand".titleize  # => "X Men: The Last Stand"\n
transliterate ActiveSupport::Inflector.transliterate(string, replacement = "?")\nReplaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character which defaults to "?".\n\n   transliterate("Ærøskøbing")\n => "AEroskobing"\n\nDefault approximations are provided for Western/Latin characters,\ne.g, "ø", "ñ", "é", "ß", etc.\n\nThis method is I18n aware, so you can set up custom approximations for a\nlocale. This can be useful, for example, to transliterate German's "ü"\nand "ö" to "ue" and "oe", or to add support for transliterating Russian\nto ASCII.\n\nIn order to make your custom transliterations available, you must set\nthem as the <tt>i18n.transliterate.rule</tt> i18n key:\n Store the transliterations in locales/de.yml\n  i18n:\n    transliterate:\n      rule:\n        ü: "ue"\n        ö: "oe"\n Or set them using Ruby\n  I18n.backend.store_translations(:de, :i18n => {\n    :transliterate => {\n      :rule => {\n        "ü" => "ue",\n        "ö" => "oe"\n      }\n    }\n  })\n\nThe value for <tt>i18n.transliterate.rule</tt> can be a simple Hash that maps\ncharacters to ASCII approximations as shown above, or, for more complex\nrequirements, a Proc:\n\n  I18n.backend.store_translations(:de, :i18n => {\n    :transliterate => {\n      :rule => lambda {|string| MyTransliterator.transliterate(string)}\n    }\n  })\n\nNow you can have different transliterations for each locale:\n\n  I18n.locale = :en\n  transliterate("Jürgen")\n => "Jurgen"\n\n  I18n.locale = :de\n  transliterate("Jürgen")\n => "Juergen"\n
underscore ActiveSupport::Inflector.underscore(camel_cased_word)\nMakes an underscored, lowercase form from the expression in the string.\n\nChanges '::' to '/' to convert namespaces to paths.\n\nExamples:\n  "ActiveRecord".underscore         # => "active_record"\n  "ActiveRecord::Errors".underscore # => active_record/errors\n\nAs a rule of thumb you can think of +underscore+ as the inverse of +camelize+,\nthough there are cases where that does not hold:\n\n  "SSLError".underscore.camelize # => "SslError"\n
included Rails::Engine::Configurable.included(base)\n\n
config Rails::Engine::Configurable.config()\n\n
config Rails::Engine::Configurable::ClassMethods.config()\n\n
inherited Rails::Engine::Configurable::ClassMethods.inherited(base)\n\n
included Rails::Railtie::Configurable.included(base)\n\n
config Rails::Railtie::Configurable.config()\n\n
config Rails::Railtie::Configurable::ClassMethods.config()\n\n
inherited Rails::Railtie::Configurable::ClassMethods.inherited(base)\n\n
included Rails::Initializable.included(base)\n\n
initializers Rails::Initializable.initializers()\n\n
run_initializers Rails::Initializable.run_initializers(*args)\n\n
initializer Rails::Initializable::ClassMethods.initializer(name, opts = {}, &blk)\n\n
initializers Rails::Initializable::ClassMethods.initializers()\n\n
initializers_chain Rails::Initializable::ClassMethods.initializers_chain()\n\n
initializers_for Rails::Initializable::ClassMethods.initializers_for(binding)\n\n
run Rails::Initializer.run(&block)\n\n
exec_script_rails! Rails::ScriptRailsLoader.exec_script_rails!()\n\n
in_rails_application? Rails::ScriptRailsLoader.in_rails_application?()\n\n
in_rails_application_subdirectory? Rails::ScriptRailsLoader.in_rails_application_subdirectory?(path =\nPathname.new(Dir.pwd))\n\n
method_missing Rails::Paths::PathParent.method_missing(id, *args)\n\n
new Rails::ActionMethods.new(generator)\n\n
method_missing Rails::ActionMethods.method_missing(meth, *args, &block)\nTODO: Remove once this is fully in place\n
migration_template Rails::Generators::Migration.migration_template(source, destination=nil,\nconfig={})\nCreates a migration template at the given destination. The difference\nto the default template method is that the migration version is appended\nto the destination file name.\n\nThe migration version, migration file name, migration class name are\navailable as instance variables in the template to be rendered.\n\n==== Examples\n\n  migration_template "migration.rb", "db/migrate/add_foo_to_bar.rb"\n
controller_class_name Rails::Generators::ResourceHelpers.controller_class_name()\n\n
controller_class_path Rails::Generators::ResourceHelpers.controller_class_path()\n\n
controller_file_name Rails::Generators::ResourceHelpers.controller_file_name()\n\n
controller_file_path Rails::Generators::ResourceHelpers.controller_file_path()\n\n
controller_i18n_scope Rails::Generators::ResourceHelpers.controller_i18n_scope()\n\n
orm_class Rails::Generators::ResourceHelpers.orm_class()\nLoads the ORM::Generators::ActiveModel class. This class is responsable\nto tell scaffold entities how to generate an specific method for the\nORM. Check Rails::Generators::ActiveModel for more information.\n
orm_instance Rails::Generators::ResourceHelpers.orm_instance(name=singular_table_name)\nInitialize ORM::Generators::ActiveModel to access instance methods.\n
add_source Rails::Generators::Actions.add_source(source, options={})\nAdd the given source to Gemfile\n\n==== Example\n\n  add_source "http://gems.github.com/"\n
application Rails::Generators::Actions.application(data=nil, options={}, &block)\n\n
capify! Rails::Generators::Actions.capify!()\nJust run the capify command in root\n\n==== Example\n\n  capify!\n
environment Rails::Generators::Actions.environment(data=nil, options={}, &block)\nAdds a line inside the Application class for config/application.rb.\n\nIf options :env is specified, the line is appended to the corresponding\nfile in config/environments.\n
extify Rails::Generators::Actions.extify(name)\nAdd an extension to the given name based on the platform.\n
freeze! Rails::Generators::Actions.freeze!(args={})\nAdd Rails to /vendor/rails\n\n==== Example\n\n  freeze!\n
gem Rails::Generators::Actions.gem(*args)\nAdds an entry into Gemfile for the supplied gem. If env\nis specified, add the gem to the given environment.\n\n==== Example\n\n  gem "rspec", :group => :test\n  gem "technoweenie-restful-authentication", :lib => "restful-authentication",\n  :source => "http://gems.github.com/"\n  gem "rails", "3.0", :git => "git://github.com/rails/rails"\n
generate Rails::Generators::Actions.generate(what, *args)\nGenerate something using a generator from Rails or a plugin.\nThe second parameter is the argument string that is passed to\nthe generator or an Array that is joined.\n\n==== Example\n\n  generate(:authenticated, "user session")\n
git Rails::Generators::Actions.git(command={})\nRun a command in git.\n\n==== Examples\n\n  git :init\n  git :add => "this.file that.rb"\n  git :add => "onefile.rb", :rm => "badfile.cxx"\n
initializer Rails::Generators::Actions.initializer(filename, data=nil, &block)\nCreate a new initializer with the provided code (either in a block or\na string).\n\n==== Examples\n\n  initializer("globals.rb") do\n    data = ""\n\n    ['MY_WORK', 'ADMINS', 'BEST_COMPANY_EVAR'].each do\n      data << "#{const} = :entp"\n    end\n\n    data\n  end\n\n  initializer("api.rb", "API_KEY = '123456'")\n
lib Rails::Generators::Actions.lib(filename, data=nil, &block)\nCreate a new file in the lib/ directory. Code can be specified\nin a block or a data string can be given.\n\n==== Examples\n\n  lib("crypto.rb") do\n    "crypted_special_value = '#{rand}--#{Time.now}--#{rand(1337)}--'"\n  end\n\n  lib("foreign.rb", "# Foreign code is fun")\n
log Rails::Generators::Actions.log(*args)\nDefine log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status.\n
plugin Rails::Generators::Actions.plugin(name, options)\nInstall a plugin. You must provide either a Subversion url or Git url.\n\nFor a Git-hosted plugin, you can specify a branch and\nwhether it should be added as a submodule instead of cloned.\n\nFor a Subversion-hosted plugin you can specify a revision.\n\n==== Examples\n\n  plugin 'restful-authentication', :git =>\n  'git://github.com/technoweenie/restful-authentication.git'\n  plugin 'restful-authentication', :git =>\n  'git://github.com/technoweenie/restful-authentication.git', :branch =>\n  'stable'\n  plugin 'restful-authentication', :git =>\n  'git://github.com/technoweenie/restful-authentication.git', :submodule\n  => true\n  plugin 'restful-authentication', :svn =>\n  'svn://svnhub.com/technoweenie/restful-authentication/trunk'\n  plugin 'restful-authentication', :svn =>\n  'svn://svnhub.com/technoweenie/restful-authentication/trunk', :revision\n  => 1234\n
rake Rails::Generators::Actions.rake(command, options={})\nRuns the supplied rake task\n\n==== Example\n\n  rake("db:migrate")\n  rake("db:migrate", :env => "production")\n  rake("gems:install", :sudo => true)\n
rakefile Rails::Generators::Actions.rakefile(filename, data=nil, &block)\nCreate a new Rakefile with the provided code (either in a block or a string).\n\n==== Examples\n\n  rakefile("bootstrap.rake") do\n    project = ask("What is the UNIX name of your project?")\n\n    <<-TASK\n      namespace :#{project} do\n        task :bootstrap do\n          puts "i like boots!"\n        end\n      end\n    TASK\n  end\n\n  rakefile("seed.rake", "puts 'im plantin ur seedz'")\n
readme Rails::Generators::Actions.readme(path)\nReads the given file at the source root and prints it in the console.\n\n=== Example\n\n  readme "README"\n
route Rails::Generators::Actions.route(routing_code)\nMake an entry in Rails routing file config/routes.rb\n\n=== Example\n\n  route "root :to => 'welcome'"\n
vendor Rails::Generators::Actions.vendor(filename, data=nil, &block)\nCreate a new file in the vendor/ directory. Code can be specified\nin a block or a data string can be given.\n\n==== Examples\n\n  vendor("sekrit.rb") do\n    sekrit_salt = "#{Time.now}--#{3.years.ago}--#{rand}--"\n    "salt = '#{sekrit_salt}'"\n  end\n\n  vendor("foreign.rb", "# Foreign code is fun")\n
names Rails::Info.names()\n\n
value_for Rails::Info.value_for(property_name)\n\n
controller_paths Rails::Configuration::Deprecated.controller_paths()\n\n
controller_paths= Rails::Configuration::Deprecated.controller_paths=(value)\n\n
cookie_secret Rails::Configuration::Deprecated.cookie_secret()\n\n
cookie_secret= Rails::Configuration::Deprecated.cookie_secret=(value)\n\n
database_configuration_file Rails::Configuration::Deprecated.database_configuration_file()\n\n
database_configuration_file= Rails::Configuration::Deprecated.database_configuration_file=(value)\n\n
frameworks Rails::Configuration::Deprecated.frameworks(*args)\n\n
frameworks= Rails::Configuration::Deprecated.frameworks=(*args)\n\n
log_path Rails::Configuration::Deprecated.log_path()\n\n
log_path= Rails::Configuration::Deprecated.log_path=(value)\n\n
routes_configuration_file Rails::Configuration::Deprecated.routes_configuration_file()\n\n
routes_configuration_file= Rails::Configuration::Deprecated.routes_configuration_file=(value)\n\n
view_path Rails::Configuration::Deprecated.view_path()\n\n
view_path= Rails::Configuration::Deprecated.view_path=(value)\n\n
included Rails::Application::Configurable.included(base)\n\n
config Rails::Application::Configurable.config()\n\n
inherited Rails::Application::Configurable::ClassMethods.inherited(base)\n\n
