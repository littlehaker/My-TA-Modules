ANNOTATION_BOXED _SCINTILLA.constants.ANNOTATION_BOXED\n2\n
ANNOTATION_HIDDEN _SCINTILLA.constants.ANNOTATION_HIDDEN\n0\n
ANNOTATION_STANDARD _SCINTILLA.constants.ANNOTATION_STANDARD\n1\n
APPLEEVENT_ODOC events.APPLEEVENT_ODOC\nCalled when Mac OSX tells Textadept to open a document.\n    * `uri`: The URI to open.\n\n
AUTOINDENT _M.textadept.editing.AUTOINDENT [bool]\nMatch the indentation level of the previous line when pressing the Enter\nkey. The default value is `true`.\n
AUTOPAIR _M.textadept.editing.AUTOPAIR [bool]\nOpening `(`, `[`, `[`, `"`, or `'` characters are automatically closed. The\ndefault value is `true`.\n
AUTO_C_CHAR_DELETED events.AUTO_C_CHAR_DELETED\nCalled when the user deleted a character while the autocompletion list\nwas active.\n
AUTO_C_RELEASE events.AUTO_C_RELEASE\nCalled when the user has cancelled the autocompletion list.\n
AUTO_C_SELECTION events.AUTO_C_SELECTION\nCalled when the user has selected an item in an autocompletion list and before\nthe selection is inserted. Automatic insertion can be cancelled by calling\n`buffer:auto_c_cancel()` before returning from the event handler.\n    * `text`: The text of the selection.\n    * `position`: The start position of the word being completed.\n\n
BUFFER_AFTER_SWITCH events.BUFFER_AFTER_SWITCH\nCalled right after a buffer is switched to.\n
BUFFER_BEFORE_SWITCH events.BUFFER_BEFORE_SWITCH\nCalled right before another buffer is switched to.\n
BUFFER_DELETED events.BUFFER_DELETED\nCalled after a buffer was deleted.\n
BUFFER_NEW events.BUFFER_NEW\nCalled when a new buffer is created.\n
C lpeg.C(patt)\nCreates a simple capture, which captures the substring of the subject that\nmatches patt. The captured value is a string. If patt has other captures,\ntheir values are returned after this one.\n
CALL_TIP_CLICK events.CALL_TIP_CLICK\nCalled when the user clicks on a calltip.\n    * `position`: Set to 1 if the click is in an up arrow, 2 if in a down\n      arrow, and 0 if elsewhere.\n\n
CARETSTYLE_BLOCK _SCINTILLA.constants.CARETSTYLE_BLOCK\n2\n
CARETSTYLE_INVISIBLE _SCINTILLA.constants.CARETSTYLE_INVISIBLE\n0\n
CARETSTYLE_LINE _SCINTILLA.constants.CARETSTYLE_LINE\n1\n
CARET_EVEN _SCINTILLA.constants.CARET_EVEN\n8\n
CARET_JUMPS _SCINTILLA.constants.CARET_JUMPS\n16\n
CARET_SLOP _SCINTILLA.constants.CARET_SLOP\n1\n
CARET_STRICT _SCINTILLA.constants.CARET_STRICT\n4\n
CHAR_ADDED events.CHAR_ADDED\nCalled when an ordinary text character is added to the buffer.\n    * `ch`: The text character byte.\n\n
CLASS lexer.CLASS\n\n
CLEAR keys.CLEAR [string]\nThe string representing the key sequence that clears the current keychain. The\ndefault is 'esc' (Escape).\n
COMMAND_ENTRY_COMMAND events.COMMAND_ENTRY_COMMAND\nCalled when a command is entered into the Command Entry.\n    * `command`: The command text.\n\n
COMMAND_ENTRY_KEYPRESS events.COMMAND_ENTRY_KEYPRESS\nCalled when a key is pressed in the Command Entry.\n    * `code`: The key code.\n    * `shift`: The Shift key is held down.\n    * `ctrl`: The Control/Command key is held down.\n    * `alt`: The Alt/option key is held down.\n    * `meta`: The Control key on Mac OSX is held down.\n\n
COMMENT lexer.COMMENT\n\n
COMPILE_OUTPUT events.COMPILE_OUTPUT\nCalled after a compile command is executed. When connecting to this event\n(typically from a language-specific module), connect with an index of `1`\nand return `true` if the event was handled and you want to override the\ndefault handler that prints the output to a new view.\n    * `lexer`: The lexer language.\n    * `output`: The output from the command.\n\n
CONSTANT lexer.CONSTANT\n\n
Carg lpeg.Carg(n)\nCreates an argument capture. This pattern matches the empty string and produces\nthe value given as the nth extra argument given in the call to lpeg.match.\n
Cb lpeg.Cb(name)\nCreates a back capture. This pattern matches the empty string and produces the\nvalues produced by the most recent group capture named name.  Most recent\nmeans the last complete outermost group capture with the given name. A\nComplete capture means that the entire pattern corresponding to the capture\nhas matched. An Outermost capture means that the capture is not inside\nanother complete capture.\n
Cc lpeg.Cc([value, ...])\nCreates a constant capture. This pattern matches the empty string and produces\nall given values as its captured values.\n
Cf lpeg.Cf(patt, func)\nCreates a fold capture. If patt produces a list of captures C1 C2 ... Cn,\nthis capture will produce the value func(...func(func(C1, C2), C3)..., Cn),\nthat is, it will fold (or accumulate, or reduce) the captures from patt using\nfunction func.  This capture assumes that patt should produce at least one\ncapture with at least one value (of any type), which becomes the initial\nvalue of an accumulator. (If you need a specific initial value, you may\nprefix a constant capture to patt.) For each subsequent capture LPeg calls\nfunc with this accumulator as the first argument and all values produced by\nthe capture as extra arguments; the value returned by this call becomes the\nnew value for the accumulator. The final value of the accumulator becomes\nthe captured value.  As an example, the following pattern matches a list\nof numbers separated by commas and returns their addition:  -- matches a\nnumeral and captures its value number = lpeg.R"09"^1 / tonumber -- matches\na list of numbers, captures their values list = number * ("," * number)^0 --\nauxiliary function to add two numbers function add (acc, newvalue) return acc\n+ newvalue end -- folds the list of numbers adding them sum = lpeg.Cf(list,\nadd) -- example of use print(sum:match("10,30,43"))   --> 83\n
Cg lpeg.Cg(patt [, name])\nCreates a group capture. It groups all values returned by patt into a\nsingle capture. The group may be anonymous (if no name is given) or named\nwith the given name.  An anonymous group serves to join values from several\ncaptures into a single capture. A named group has a different behavior. In\nmost situations, a named group returns no values at all. Its values are only\nrelevant for a following back capture or when used inside a table capture.\n
Cmt lpeg.Cmt(patt, function)\nCreates a match-time capture. Unlike all other captures, this one is evaluated\nimmediately when a match occurs. It forces the immediate evaluation of all its\nnested captures and then calls function.  The given function gets as arguments\nthe entire subject, the current position (after the match of patt), plus any\ncapture values produced by patt.  The first value returned by function defines\nhow the match happens. If the call returns a number, the match succeeds and\nthe returned number becomes the new current position. (Assuming a subject s\nand current position i, the returned number must be in the range [i, len(s)\n+ 1].) If the call returns true, the match succeeds without consuming any\ninput. (So, to return true is equivalent to return i.) If the call returns\nfalse, nil, or no value, the match fails.  Any extra values returned by the\nfunction become the values produced by the capture.\n
Cp lpeg.Cp()\nCreates a position capture. It matches the empty string and captures the\nposition in the subject where the match occurs. The captured value is a number.\n
Cs lpeg.Cs(patt)\nCreates a substitution capture, which captures the substring of the subject\nthat matches patt, with substitutions. For any capture inside patt with\na value, the substring that matched the capture is replaced by the capture\nvalue (which should be a string). The final captured value is the string\nresulting from all replacements.\n
Ct lpeg.Ct(patt)\nCreates a table capture. This capture creates a table and puts all values\nfrom all anonymous captures made by patt inside this table in successive\ninteger keys, starting at 1. Moreover, for each named capture group created\nby patt, the first value of the group is put into the table with the group\nname as its key. The captured value is only the table.\n
DEFAULT lexer.DEFAULT\n\n
DEFAULT_DEPTH _M.textadept.snapopen.DEFAULT_DEPTH [number]\nMaximum directory depth to search. The default value is `4`.\n
DEFAULT_SESSION _M.textadept.session.DEFAULT_SESSION [string]\nThe path to the default session file.\n
DOUBLE_CLICK events.DOUBLE_CLICK\nCalled when the mouse button is double-clicked.\n    * `position`: The text position of the double click.\n    * `line`: The line of the double click.\n    * `modifiers`: The key modifiers held down. It is a combination of zero\n      or more of `_SCINTILLA.constants.SCMOD_ALT`,\n      `_SCINTILLA.constants.SCMOD_CTRL`,\n      `_SCINTILLA.constants.SCMOD_SHIFT`, and\n      `_SCINTILLA.constants.SCMOD_META`.\n\n
DWELL_END events.DWELL_END\nCalled after a `DWELL_START` and the mouse is moved or other activity such\nas key press indicates the dwell is over.\n    * `position`: The nearest position in the document to the position\n      where the mouse pointer was lingering.\n    * `x`: Where the pointer lingered.\n    * `y`: Where the pointer lingered.\n\n
DWELL_START events.DWELL_START\nCalled when the user keeps the mouse in one position for the dwell period\n(see `_SCINTILLA.constants.SCI_SETMOUSEDWELLTIME`).\n    * `position`: The nearest position in the document to the position\n      where the mouse pointer was lingering.\n    * `x`: Where the pointer lingered.\n    * `y`: Where the pointer lingered.\n\n
EDGE_BACKGROUND _SCINTILLA.constants.EDGE_BACKGROUND\n2\n
EDGE_LINE _SCINTILLA.constants.EDGE_LINE\n1\n
EDGE_NONE _SCINTILLA.constants.EDGE_NONE\n0\n
ERROR events.ERROR\nCalled when an error occurs.\n    * `text`: The error text.\n\n
ERROR lexer.ERROR\n\n
FIELDS _M.textadept.adeptsense.FIELDS [string]\nXPM image for Adeptsense fields.\n
FILE_AFTER_SAVE events.FILE_AFTER_SAVE\nCalled right after a file is saved to disk. Arguments:\n    * `filename`: The filename encoded in UTF-8.\n\n
FILE_BEFORE_SAVE events.FILE_BEFORE_SAVE\nCalled right before a file is saved to disk. Arguments:\n    * `filename`: The filename encoded in UTF-8.\n\n
FILE_OPENED events.FILE_OPENED\nCalled when a file is opened in a new buffer. Arguments:\n    * `filename`: The filename encoded in UTF-8.\n\n
FILE_SAVED_AS events.FILE_SAVED_AS\nCalled when a file is saved under a different filename. Arguments:\n    * `filename`: The filename encoded in UTF-8.\n\n
FILTER _M.textadept.snapopen.FILTER [table]\nDefault file and directory filters.\n
FIND events.FIND\nCalled when finding text via the Find dialog box.\n    * `text`: The text to search for.\n    * `next`: Search forward.\n\n
FUNCTION lexer.FUNCTION\n\n
FUNCTIONS _M.textadept.adeptsense.FUNCTIONS [string]\nXPM image for Adeptsense functions.\n
HIGHLIGHT_BRACES _M.textadept.editing.HIGHLIGHT_BRACES [bool]\nHighlight matching `()[]{}<>` characters. The default value is `true`.\n
HOTSPOT_CLICK events.HOTSPOT_CLICK\nCalled when the user clicks on text that is in a style with the hotspot\nattribute set.\n    * `position`: The text position of the click.\n    * `modifiers`: The key modifiers held down. It is a combination of zero\n      or more of `_SCINTILLA.constants.SCMOD_ALT`,\n      `_SCINTILLA.constants.SCMOD_CTRL`,\n      `_SCINTILLA.constants.SCMOD_SHIFT`, and\n      `_SCINTILLA.constants.SCMOD_META`.\n\n
HOTSPOT_DOUBLE_CLICK events.HOTSPOT_DOUBLE_CLICK\nCalled when the user double clicks on text that is in a style with the\nhotspot attribute set.\n    * `position`: The text position of the double click.\n    * `modifiers`: The key modifiers held down. It is a combination of zero\n      or more of `_SCINTILLA.constants.SCMOD_ALT`,\n      `_SCINTILLA.constants.SCMOD_CTRL`,\n      `_SCINTILLA.constants.SCMOD_SHIFT`, and\n      `_SCINTILLA.constants.SCMOD_META`.\n\n
HOTSPOT_RELEASE_CLICK events.HOTSPOT_RELEASE_CLICK\nCalled when the user releases the mouse on text that is in a style with the\nhotspot attribute set.\n    * `position`: The text position of the release.\n\n
IDENTIFIER lexer.IDENTIFIER\n\n
INDIC0_MASK _SCINTILLA.constants.INDIC0_MASK\n32\n
INDIC1_MASK _SCINTILLA.constants.INDIC1_MASK\n64\n
INDIC2_MASK _SCINTILLA.constants.INDIC2_MASK\n128\n
INDICATOR_CLICK events.INDICATOR_CLICK\nCalled when the user clicks the mouse on text that has an indicator.\n    * `position`: The text position of the click.\n    * `modifiers`: The key modifiers held down. It is a combination of zero\n      or more of `_SCINTILLA.constants.SCMOD_ALT`,\n      `_SCINTILLA.constants.SCMOD_CTRL`,\n      `_SCINTILLA.constants.SCMOD_SHIFT`, and\n      `_SCINTILLA.constants.SCMOD_META`.\n\n
INDICATOR_RELEASE events.INDICATOR_RELEASE\nCalled when the user releases the mouse on text that has an indicator.\n    * `position`: The text position of the release.\n\n
INDICS_MASK _SCINTILLA.constants.INDICS_MASK\n224\n
INDIC_BOX _SCINTILLA.constants.INDIC_BOX\n6\n
INDIC_CONTAINER _SCINTILLA.constants.INDIC_CONTAINER\n8\n
INDIC_DASH _SCINTILLA.constants.INDIC_DASH\n9\n
INDIC_DIAGONAL _SCINTILLA.constants.INDIC_DIAGONAL\n3\n
INDIC_DOTBOX _SCINTILLA.constants.INDIC_DOTBOX\n12\n
INDIC_DOTS _SCINTILLA.constants.INDIC_DOTS\n10\n
INDIC_HIDDEN _SCINTILLA.constants.INDIC_HIDDEN\n5\n
INDIC_HIGHLIGHT_ALPHA _M.textadept.editing.INDIC_HIGHLIGHT_ALPHA [number]\nThe alpha transparency value between `0` (transparent) and `255` (opaque)\nused for an indicator for a highlighted word. The default value is `100`.\n
INDIC_HIGHLIGHT_BACK _M.textadept.editing.INDIC_HIGHLIGHT_BACK [number]\nThe color used for an indicator for a highlighted word in `0xBBGGRR` format.\n
INDIC_MAX _SCINTILLA.constants.INDIC_MAX\n31\n
INDIC_PLAIN _SCINTILLA.constants.INDIC_PLAIN\n0\n
INDIC_ROUNDBOX _SCINTILLA.constants.INDIC_ROUNDBOX\n7\n
INDIC_SQUIGGLE _SCINTILLA.constants.INDIC_SQUIGGLE\n1\n
INDIC_SQUIGGLELOW _SCINTILLA.constants.INDIC_SQUIGGLELOW\n11\n
INDIC_STRAIGHTBOX _SCINTILLA.constants.INDIC_STRAIGHTBOX\n8\n
INDIC_STRIKE _SCINTILLA.constants.INDIC_STRIKE\n4\n
INDIC_TT _SCINTILLA.constants.INDIC_TT\n2\n
INVALID_POSITION _SCINTILLA.constants.INVALID_POSITION\n-1\n
KEYPRESS events.KEYPRESS\nCalled when a key is pressed.\n    * `code`: The key code.\n    * `shift`: The Shift key is held down.\n    * `ctrl`: The Control/Command key is held down.\n    * `alt`: The Alt/option key is held down.\n    * `meta`: The Control key on Mac OSX is held down.\n\n
KEYSYMS keys.KEYSYMS [table]\nLookup table for key codes higher than 255. If a key code given to `keypress()`\nis higher than 255, this table is used to return a string representation of\nthe key if it exists.\n
KEYWORD lexer.KEYWORD\n\n
KEYWORDSET_MAX _SCINTILLA.constants.KEYWORDSET_MAX\n8\n
LABEL lexer.LABEL\n\n
LANGUAGE_MODULE_LOADED events.LANGUAGE_MODULE_LOADED\nCalled when loading a language-specific module. This is useful for overriding\nits key commands since they are not available when Textadept starts. Arguments:\n    * `lang`: The language lexer name.\n\n
LANGUAGE_MODULE_PREFIX keys.LANGUAGE_MODULE_PREFIX [string]\nThe starting key command of the keychain reserved for language-specific\nmodules. Defaults to Ctrl/Cmd+L.\n
MARGIN_CLICK events.MARGIN_CLICK\nCalled when the mouse is clicked inside a margin.\n    * `margin`: The margin number that was clicked.\n    * `position`: The position of the start of the line in the buffer that\n      corresponds to the margin click.\n    * `modifiers`: The appropriate combination of\n      `_SCINTILLA.constants.SCI_SHIFT`, `_SCINTILLA.constants.SCI_CTRL`,\n      and `_SCINTILLA.constants.SCI_ALT` to indicate the keys that were\n      held down at the time of the margin click.\n\n
MARKER_MAX _SCINTILLA.constants.MARKER_MAX\n31\n
MARK_BOOKMARK_COLOR _M.textadept.bookmarks.MARK_BOOKMARK_COLOR [number]\nThe color used for a bookmarked line in `0xBBGGRR` format.\n
MARK_HIGHLIGHT_BACK _M.textadept.editing.MARK_HIGHLIGHT_BACK [number]\nThe background color used for a line containing a highlighted word in\n`0xBBGGRR` format.\n
MAX _M.textadept.snapopen.MAX [number]\nMaximum number of files to list. The default value is `1000`.\n
MAX_RECENT_FILES _M.textadept.session.MAX_RECENT_FILES [number]\nThe maximum number of files from the recent files list to save to the\nsession. The default is `10`.\n
MENU_CLICKED events.MENU_CLICKED\nCalled when a menu item is selected.\n    * `menu_id`: The numeric ID of the menu item set in `gui.gtkmenu()`.\n\n
NUMBER lexer.NUMBER\n\n
OPERATOR lexer.OPERATOR\n\n
OSX _G.OSX [bool]\nIf Textadept is running on Mac OSX, this flag is `true`.\n
P lpeg.P(value)\nConverts the given value into a proper pattern, according to the following\nrules: * If the argument is a pattern, it is returned unmodified. * If the\nargument is a string, it is translated to a pattern that matches literally\nthe string. * If the argument is a non-negative number n, the result is a\npattern that matches exactly n characters. * If the argument is a negative\nnumber -n, the result is a pattern that succeeds only if the input string\ndoes not have n characters: lpeg.P(-n) is equivalent to -lpeg.P(n) (see\nthe unary minus operation). * If the argument is a boolean, the result is\na pattern that always succeeds or always fails (according to the boolean\nvalue), without consuming any input. * If the argument is a table, it is\ninterpreted as a grammar (see Grammars). * If the argument is a function,\nreturns a pattern equivalent to a match-time capture over the empty string.\n
PATHS _M.textadept.snapopen.PATHS [table]\nTable of default UTF-8 paths to search.\n
PREPROCESSOR lexer.PREPROCESSOR\n\n
QUIT events.QUIT\nCalled when quitting Textadept. When connecting to this event, connect with\nan index of 1 or the handler will be ignored.\n
R lpeg.R({range})\nReturns a pattern that matches any single character belonging to one of\nthe given ranges. Each range is a string xy of length 2, representing all\ncharacters with code between the codes of x and y (both inclusive).  As an\nexample, the pattern lpeg.R("09") matches any digit, and lpeg.R("az", "AZ")\nmatches any ASCII letter.\n
REGEX lexer.REGEX\n\n
REPLACE events.REPLACE\nCalled to replace selected (found) text.\n    * `text`: The text to replace selected text with.\n\n
REPLACE_ALL events.REPLACE_ALL\nCalled to replace all occurances of found text.\n    * `find_text`: The text to search for.\n    * `repl_text`: The text to replace found text with.\n\n
RESETTING _G.RESETTING [bool]\nIf `reset()` has been called, this flag is `true` while the Lua state is\nbeing re-initialized.\n
RESET_AFTER events.RESET_AFTER\nCalled after resetting the Lua state. This is triggered by `reset()`.\n
RESET_BEFORE events.RESET_BEFORE\nCalled before resetting the Lua state. This is triggered by `reset()`.\n
RUN_OUTPUT events.RUN_OUTPUT\nCalled after a run command is executed. When connecting to this event\n(typically from a language-specific module), connect with an index of `1`\nand return `true` if the event was handled and you want to override the\ndefault handler that prints the output to a new view.\n    * `lexer`: The lexer language.\n    * `output`: The output from the command.\n\n
S lpeg.S(string)\nReturns a pattern that matches any single character that appears in the given\nstring. (The S stands for Set.)  As an example, the pattern lpeg.S("+-*/")\nmatches any arithmetic operator.  Note that, if s is a character (that is,\na string of length 1), then lpeg.P(s) is equivalent to lpeg.S(s) which is\nequivalent to lpeg.R(s..s). Note also that both lpeg.S("") and lpeg.R()\nare patterns that always fail.\n
SAVE_ON_QUIT _M.textadept.session.SAVE_ON_QUIT [bool]\nSave the session when quitting. The default value is `true` and can be\ndisabled by passing the command line switch `-n` or `--nosession` to Textadept.\n
SAVE_POINT_LEFT events.SAVE_POINT_LEFT\nCalled when a save point is left.\n
SAVE_POINT_REACHED events.SAVE_POINT_REACHED\nCalled when a save point is entered.\n
SCEN_CHANGE _SCINTILLA.constants.SCEN_CHANGE\n768\n
SCEN_KILLFOCUS _SCINTILLA.constants.SCEN_KILLFOCUS\n256\n
SCEN_SETFOCUS _SCINTILLA.constants.SCEN_SETFOCUS\n512\n
SCFIND_MATCHCASE _SCINTILLA.constants.SCFIND_MATCHCASE\n4\n
SCFIND_POSIX _SCINTILLA.constants.SCFIND_POSIX\n4194304\n
SCFIND_REGEXP _SCINTILLA.constants.SCFIND_REGEXP\n2097152\n
SCFIND_WHOLEWORD _SCINTILLA.constants.SCFIND_WHOLEWORD\n2\n
SCFIND_WORDSTART _SCINTILLA.constants.SCFIND_WORDSTART\n1048576\n
SCI_ANNOTATIONGETLINES _SCINTILLA.constants.SCI_ANNOTATIONGETLINES\n2546\n
SCI_ANNOTATIONGETSTYLE _SCINTILLA.constants.SCI_ANNOTATIONGETSTYLE\n2543\n
SCI_ANNOTATIONGETSTYLEOFFSET _SCINTILLA.constants.SCI_ANNOTATIONGETSTYLEOFFSET\n2551\n
SCI_ANNOTATIONGETVISIBLE _SCINTILLA.constants.SCI_ANNOTATIONGETVISIBLE\n2549\n
SCI_ANNOTATIONSETSTYLE _SCINTILLA.constants.SCI_ANNOTATIONSETSTYLE\n2542\n
SCI_ANNOTATIONSETSTYLEOFFSET _SCINTILLA.constants.SCI_ANNOTATIONSETSTYLEOFFSET\n2550\n
SCI_ANNOTATIONSETVISIBLE _SCINTILLA.constants.SCI_ANNOTATIONSETVISIBLE\n2548\n
SCI_AUTOCGETAUTOHIDE _SCINTILLA.constants.SCI_AUTOCGETAUTOHIDE\n2119\n
SCI_AUTOCGETCANCELATSTART _SCINTILLA.constants.SCI_AUTOCGETCANCELATSTART\n2111\n
SCI_AUTOCGETCHOOSESINGLE _SCINTILLA.constants.SCI_AUTOCGETCHOOSESINGLE\n2114\n
SCI_AUTOCGETDROPRESTOFWORD _SCINTILLA.constants.SCI_AUTOCGETDROPRESTOFWORD\n2271\n
SCI_AUTOCGETIGNORECASE _SCINTILLA.constants.SCI_AUTOCGETIGNORECASE\n2116\n
SCI_AUTOCGETMAXHEIGHT _SCINTILLA.constants.SCI_AUTOCGETMAXHEIGHT\n2211\n
SCI_AUTOCGETMAXWIDTH _SCINTILLA.constants.SCI_AUTOCGETMAXWIDTH\n2209\n
SCI_AUTOCGETSEPARATOR _SCINTILLA.constants.SCI_AUTOCGETSEPARATOR\n2107\n
SCI_AUTOCGETTYPESEPARATOR _SCINTILLA.constants.SCI_AUTOCGETTYPESEPARATOR\n2285\n
SCI_AUTOCSETAUTOHIDE _SCINTILLA.constants.SCI_AUTOCSETAUTOHIDE\n2118\n
SCI_AUTOCSETCANCELATSTART _SCINTILLA.constants.SCI_AUTOCSETCANCELATSTART\n2110\n
SCI_AUTOCSETCHOOSESINGLE _SCINTILLA.constants.SCI_AUTOCSETCHOOSESINGLE\n2113\n
SCI_AUTOCSETDROPRESTOFWORD _SCINTILLA.constants.SCI_AUTOCSETDROPRESTOFWORD\n2270\n
SCI_AUTOCSETFILLUPS _SCINTILLA.constants.SCI_AUTOCSETFILLUPS\n2112\n
SCI_AUTOCSETIGNORECASE _SCINTILLA.constants.SCI_AUTOCSETIGNORECASE\n2115\n
SCI_AUTOCSETMAXHEIGHT _SCINTILLA.constants.SCI_AUTOCSETMAXHEIGHT\n2210\n
SCI_AUTOCSETMAXWIDTH _SCINTILLA.constants.SCI_AUTOCSETMAXWIDTH\n2208\n
SCI_AUTOCSETSEPARATOR _SCINTILLA.constants.SCI_AUTOCSETSEPARATOR\n2106\n
SCI_AUTOCSETTYPESEPARATOR _SCINTILLA.constants.SCI_AUTOCSETTYPESEPARATOR\n2286\n
SCI_CALLTIPSETBACK _SCINTILLA.constants.SCI_CALLTIPSETBACK\n2205\n
SCI_CALLTIPSETFORE _SCINTILLA.constants.SCI_CALLTIPSETFORE\n2206\n
SCI_CALLTIPSETFOREHLT _SCINTILLA.constants.SCI_CALLTIPSETFOREHLT\n2207\n
SCI_CALLTIPSETPOSITION _SCINTILLA.constants.SCI_CALLTIPSETPOSITION\n2213\n
SCI_CALLTIPUSESTYLE _SCINTILLA.constants.SCI_CALLTIPUSESTYLE\n2212\n
SCI_GETADDITIONALCARETFORE _SCINTILLA.constants.SCI_GETADDITIONALCARETFORE\n2605\n
SCI_GETADDITIONALCARETSBLINK _SCINTILLA.constants.SCI_GETADDITIONALCARETSBLINK\n2568\n
SCI_GETADDITIONALCARETSVISIBLE _SCINTILLA.constants.SCI_GETADDITIONALCARETSVISIBLE\n2609\n
SCI_GETADDITIONALSELALPHA _SCINTILLA.constants.SCI_GETADDITIONALSELALPHA\n2603\n
SCI_GETADDITIONALSELECTIONTYPING _SCINTILLA.constants.SCI_GETADDITIONALSELECTIONTYPING\n2566\n
SCI_GETALLLINESVISIBLE _SCINTILLA.constants.SCI_GETALLLINESVISIBLE\n2236\n
SCI_GETANCHOR _SCINTILLA.constants.SCI_GETANCHOR\n2009\n
SCI_GETBACKSPACEUNINDENTS _SCINTILLA.constants.SCI_GETBACKSPACEUNINDENTS\n2263\n
SCI_GETBUFFEREDDRAW _SCINTILLA.constants.SCI_GETBUFFEREDDRAW\n2034\n
SCI_GETCARETFORE _SCINTILLA.constants.SCI_GETCARETFORE\n2138\n
SCI_GETCARETLINEBACK _SCINTILLA.constants.SCI_GETCARETLINEBACK\n2097\n
SCI_GETCARETLINEBACKALPHA _SCINTILLA.constants.SCI_GETCARETLINEBACKALPHA\n2471\n
SCI_GETCARETLINEVISIBLE _SCINTILLA.constants.SCI_GETCARETLINEVISIBLE\n2095\n
SCI_GETCARETPERIOD _SCINTILLA.constants.SCI_GETCARETPERIOD\n2075\n
SCI_GETCARETSTICKY _SCINTILLA.constants.SCI_GETCARETSTICKY\n2457\n
SCI_GETCARETSTYLE _SCINTILLA.constants.SCI_GETCARETSTYLE\n2513\n
SCI_GETCARETWIDTH _SCINTILLA.constants.SCI_GETCARETWIDTH\n2189\n
SCI_GETCHARACTERPOINTER _SCINTILLA.constants.SCI_GETCHARACTERPOINTER\n2520\n
SCI_GETCHARAT _SCINTILLA.constants.SCI_GETCHARAT\n2007\n
SCI_GETCODEPAGE _SCINTILLA.constants.SCI_GETCODEPAGE\n2137\n
SCI_GETCOLUMN _SCINTILLA.constants.SCI_GETCOLUMN\n2129\n
SCI_GETCONTROLCHARSYMBOL _SCINTILLA.constants.SCI_GETCONTROLCHARSYMBOL\n2389\n
SCI_GETCURRENTPOS _SCINTILLA.constants.SCI_GETCURRENTPOS\n2008\n
SCI_GETCURSOR _SCINTILLA.constants.SCI_GETCURSOR\n2387\n
SCI_GETDIRECTFUNCTION _SCINTILLA.constants.SCI_GETDIRECTFUNCTION\n2184\n
SCI_GETDIRECTPOINTER _SCINTILLA.constants.SCI_GETDIRECTPOINTER\n2185\n
SCI_GETDOCPOINTER _SCINTILLA.constants.SCI_GETDOCPOINTER\n2357\n
SCI_GETEDGECOLOUR _SCINTILLA.constants.SCI_GETEDGECOLOUR\n2364\n
SCI_GETEDGECOLUMN _SCINTILLA.constants.SCI_GETEDGECOLUMN\n2360\n
SCI_GETEDGEMODE _SCINTILLA.constants.SCI_GETEDGEMODE\n2362\n
SCI_GETENDATLASTLINE _SCINTILLA.constants.SCI_GETENDATLASTLINE\n2278\n
SCI_GETENDSTYLED _SCINTILLA.constants.SCI_GETENDSTYLED\n2028\n
SCI_GETEOLMODE _SCINTILLA.constants.SCI_GETEOLMODE\n2030\n
SCI_GETEXTRAASCENT _SCINTILLA.constants.SCI_GETEXTRAASCENT\n2526\n
SCI_GETEXTRADESCENT _SCINTILLA.constants.SCI_GETEXTRADESCENT\n2528\n
SCI_GETFIRSTVISIBLELINE _SCINTILLA.constants.SCI_GETFIRSTVISIBLELINE\n2152\n
SCI_GETFOCUS _SCINTILLA.constants.SCI_GETFOCUS\n2381\n
SCI_GETFOLDEXPANDED _SCINTILLA.constants.SCI_GETFOLDEXPANDED\n2230\n
SCI_GETFOLDLEVEL _SCINTILLA.constants.SCI_GETFOLDLEVEL\n2223\n
SCI_GETFOLDPARENT _SCINTILLA.constants.SCI_GETFOLDPARENT\n2225\n
SCI_GETFONTQUALITY _SCINTILLA.constants.SCI_GETFONTQUALITY\n2612\n
SCI_GETHIGHLIGHTGUIDE _SCINTILLA.constants.SCI_GETHIGHLIGHTGUIDE\n2135\n
SCI_GETHOTSPOTACTIVEUNDERLINE _SCINTILLA.constants.SCI_GETHOTSPOTACTIVEUNDERLINE\n2496\n
SCI_GETHOTSPOTSINGLELINE _SCINTILLA.constants.SCI_GETHOTSPOTSINGLELINE\n2497\n
SCI_GETHSCROLLBAR _SCINTILLA.constants.SCI_GETHSCROLLBAR\n2131\n
SCI_GETIDENTIFIER _SCINTILLA.constants.SCI_GETIDENTIFIER\n2623\n
SCI_GETINDENT _SCINTILLA.constants.SCI_GETINDENT\n2123\n
SCI_GETINDENTATIONGUIDES _SCINTILLA.constants.SCI_GETINDENTATIONGUIDES\n2133\n
SCI_GETINDICATORCURRENT _SCINTILLA.constants.SCI_GETINDICATORCURRENT\n2501\n
SCI_GETINDICATORVALUE _SCINTILLA.constants.SCI_GETINDICATORVALUE\n2503\n
SCI_GETKEYSUNICODE _SCINTILLA.constants.SCI_GETKEYSUNICODE\n2522\n
SCI_GETLAYOUTCACHE _SCINTILLA.constants.SCI_GETLAYOUTCACHE\n2273\n
SCI_GETLENGTH _SCINTILLA.constants.SCI_GETLENGTH\n2006\n
SCI_GETLEXER _SCINTILLA.constants.SCI_GETLEXER\n4002\n
SCI_GETLINECOUNT _SCINTILLA.constants.SCI_GETLINECOUNT\n2154\n
SCI_GETLINEENDPOSITION _SCINTILLA.constants.SCI_GETLINEENDPOSITION\n2136\n
SCI_GETLINEINDENTATION _SCINTILLA.constants.SCI_GETLINEINDENTATION\n2127\n
SCI_GETLINEINDENTPOSITION _SCINTILLA.constants.SCI_GETLINEINDENTPOSITION\n2128\n
SCI_GETLINESTATE _SCINTILLA.constants.SCI_GETLINESTATE\n2093\n
SCI_GETLINEVISIBLE _SCINTILLA.constants.SCI_GETLINEVISIBLE\n2228\n
SCI_GETMAINSELECTION _SCINTILLA.constants.SCI_GETMAINSELECTION\n2575\n
SCI_GETMARGINCURSORN _SCINTILLA.constants.SCI_GETMARGINCURSORN\n2249\n
SCI_GETMARGINLEFT _SCINTILLA.constants.SCI_GETMARGINLEFT\n2156\n
SCI_GETMARGINMASKN _SCINTILLA.constants.SCI_GETMARGINMASKN\n2245\n
SCI_GETMARGINOPTIONS _SCINTILLA.constants.SCI_GETMARGINOPTIONS\n2557\n
SCI_GETMARGINRIGHT _SCINTILLA.constants.SCI_GETMARGINRIGHT\n2158\n
SCI_GETMARGINSENSITIVEN _SCINTILLA.constants.SCI_GETMARGINSENSITIVEN\n2247\n
SCI_GETMARGINTYPEN _SCINTILLA.constants.SCI_GETMARGINTYPEN\n2241\n
SCI_GETMARGINWIDTHN _SCINTILLA.constants.SCI_GETMARGINWIDTHN\n2243\n
SCI_GETMAXLINESTATE _SCINTILLA.constants.SCI_GETMAXLINESTATE\n2094\n
SCI_GETMODEVENTMASK _SCINTILLA.constants.SCI_GETMODEVENTMASK\n2378\n
SCI_GETMODIFY _SCINTILLA.constants.SCI_GETMODIFY\n2159\n
SCI_GETMOUSEDOWNCAPTURES _SCINTILLA.constants.SCI_GETMOUSEDOWNCAPTURES\n2385\n
SCI_GETMOUSEDWELLTIME _SCINTILLA.constants.SCI_GETMOUSEDWELLTIME\n2265\n
SCI_GETMULTIPASTE _SCINTILLA.constants.SCI_GETMULTIPASTE\n2615\n
SCI_GETMULTIPLESELECTION _SCINTILLA.constants.SCI_GETMULTIPLESELECTION\n2564\n
SCI_GETOVERTYPE _SCINTILLA.constants.SCI_GETOVERTYPE\n2187\n
SCI_GETPASTECONVERTENDINGS _SCINTILLA.constants.SCI_GETPASTECONVERTENDINGS\n2468\n
SCI_GETPOSITIONCACHE _SCINTILLA.constants.SCI_GETPOSITIONCACHE\n2515\n
SCI_GETPRINTCOLOURMODE _SCINTILLA.constants.SCI_GETPRINTCOLOURMODE\n2149\n
SCI_GETPRINTMAGNIFICATION _SCINTILLA.constants.SCI_GETPRINTMAGNIFICATION\n2147\n
SCI_GETPRINTWRAPMODE _SCINTILLA.constants.SCI_GETPRINTWRAPMODE\n2407\n
SCI_GETPROPERTYINT _SCINTILLA.constants.SCI_GETPROPERTYINT\n4010\n
SCI_GETREADONLY _SCINTILLA.constants.SCI_GETREADONLY\n2140\n
SCI_GETRECTANGULARSELECTIONANCHOR _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONANCHOR\n2591\n
SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE\n2595\n
SCI_GETRECTANGULARSELECTIONCARET _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONCARET\n2589\n
SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE\n2593\n
SCI_GETRECTANGULARSELECTIONMODIFIER _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONMODIFIER\n2599\n
SCI_GETSCROLLWIDTH _SCINTILLA.constants.SCI_GETSCROLLWIDTH\n2275\n
SCI_GETSCROLLWIDTHTRACKING _SCINTILLA.constants.SCI_GETSCROLLWIDTHTRACKING\n2517\n
SCI_GETSEARCHFLAGS _SCINTILLA.constants.SCI_GETSEARCHFLAGS\n2199\n
SCI_GETSELALPHA _SCINTILLA.constants.SCI_GETSELALPHA\n2477\n
SCI_GETSELECTIONEND _SCINTILLA.constants.SCI_GETSELECTIONEND\n2145\n
SCI_GETSELECTIONMODE _SCINTILLA.constants.SCI_GETSELECTIONMODE\n2423\n
SCI_GETSELECTIONNANCHOR _SCINTILLA.constants.SCI_GETSELECTIONNANCHOR\n2579\n
SCI_GETSELECTIONNANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_GETSELECTIONNANCHORVIRTUALSPACE\n2583\n
SCI_GETSELECTIONNCARET _SCINTILLA.constants.SCI_GETSELECTIONNCARET\n2577\n
SCI_GETSELECTIONNCARETVIRTUALSPACE _SCINTILLA.constants.SCI_GETSELECTIONNCARETVIRTUALSPACE\n2581\n
SCI_GETSELECTIONNEND _SCINTILLA.constants.SCI_GETSELECTIONNEND\n2587\n
SCI_GETSELECTIONNSTART _SCINTILLA.constants.SCI_GETSELECTIONNSTART\n2585\n
SCI_GETSELECTIONS _SCINTILLA.constants.SCI_GETSELECTIONS\n2570\n
SCI_GETSELECTIONSTART _SCINTILLA.constants.SCI_GETSELECTIONSTART\n2143\n
SCI_GETSELEOLFILLED _SCINTILLA.constants.SCI_GETSELEOLFILLED\n2479\n
SCI_GETSTATUS _SCINTILLA.constants.SCI_GETSTATUS\n2383\n
SCI_GETSTYLEAT _SCINTILLA.constants.SCI_GETSTYLEAT\n2010\n
SCI_GETSTYLEBITS _SCINTILLA.constants.SCI_GETSTYLEBITS\n2091\n
SCI_GETSTYLEBITSNEEDED _SCINTILLA.constants.SCI_GETSTYLEBITSNEEDED\n4011\n
SCI_GETTABINDENTS _SCINTILLA.constants.SCI_GETTABINDENTS\n2261\n
SCI_GETTABWIDTH _SCINTILLA.constants.SCI_GETTABWIDTH\n2121\n
SCI_GETTARGETEND _SCINTILLA.constants.SCI_GETTARGETEND\n2193\n
SCI_GETTARGETSTART _SCINTILLA.constants.SCI_GETTARGETSTART\n2191\n
SCI_GETTECHNOLOGY _SCINTILLA.constants.SCI_GETTECHNOLOGY\n2631\n
SCI_GETTEXTLENGTH _SCINTILLA.constants.SCI_GETTEXTLENGTH\n2183\n
SCI_GETTWOPHASEDRAW _SCINTILLA.constants.SCI_GETTWOPHASEDRAW\n2283\n
SCI_GETUNDOCOLLECTION _SCINTILLA.constants.SCI_GETUNDOCOLLECTION\n2019\n
SCI_GETUSETABS _SCINTILLA.constants.SCI_GETUSETABS\n2125\n
SCI_GETVIEWEOL _SCINTILLA.constants.SCI_GETVIEWEOL\n2355\n
SCI_GETVIEWWS _SCINTILLA.constants.SCI_GETVIEWWS\n2020\n
SCI_GETVIRTUALSPACEOPTIONS _SCINTILLA.constants.SCI_GETVIRTUALSPACEOPTIONS\n2597\n
SCI_GETVSCROLLBAR _SCINTILLA.constants.SCI_GETVSCROLLBAR\n2281\n
SCI_GETWHITESPACESIZE _SCINTILLA.constants.SCI_GETWHITESPACESIZE\n2087\n
SCI_GETWRAPINDENTMODE _SCINTILLA.constants.SCI_GETWRAPINDENTMODE\n2473\n
SCI_GETWRAPMODE _SCINTILLA.constants.SCI_GETWRAPMODE\n2269\n
SCI_GETWRAPSTARTINDENT _SCINTILLA.constants.SCI_GETWRAPSTARTINDENT\n2465\n
SCI_GETWRAPVISUALFLAGS _SCINTILLA.constants.SCI_GETWRAPVISUALFLAGS\n2461\n
SCI_GETWRAPVISUALFLAGSLOCATION _SCINTILLA.constants.SCI_GETWRAPVISUALFLAGSLOCATION\n2463\n
SCI_GETXOFFSET _SCINTILLA.constants.SCI_GETXOFFSET\n2398\n
SCI_GETZOOM _SCINTILLA.constants.SCI_GETZOOM\n2374\n
SCI_INDICGETALPHA _SCINTILLA.constants.SCI_INDICGETALPHA\n2524\n
SCI_INDICGETFORE _SCINTILLA.constants.SCI_INDICGETFORE\n2083\n
SCI_INDICGETOUTLINEALPHA _SCINTILLA.constants.SCI_INDICGETOUTLINEALPHA\n2559\n
SCI_INDICGETSTYLE _SCINTILLA.constants.SCI_INDICGETSTYLE\n2081\n
SCI_INDICGETUNDER _SCINTILLA.constants.SCI_INDICGETUNDER\n2511\n
SCI_INDICSETALPHA _SCINTILLA.constants.SCI_INDICSETALPHA\n2523\n
SCI_INDICSETFORE _SCINTILLA.constants.SCI_INDICSETFORE\n2082\n
SCI_INDICSETOUTLINEALPHA _SCINTILLA.constants.SCI_INDICSETOUTLINEALPHA\n2558\n
SCI_INDICSETSTYLE _SCINTILLA.constants.SCI_INDICSETSTYLE\n2080\n
SCI_INDICSETUNDER _SCINTILLA.constants.SCI_INDICSETUNDER\n2510\n
SCI_LEXER_START _SCINTILLA.constants.SCI_LEXER_START\n4000\n
SCI_LINESONSCREEN _SCINTILLA.constants.SCI_LINESONSCREEN\n2370\n
SCI_MARGINGETSTYLE _SCINTILLA.constants.SCI_MARGINGETSTYLE\n2533\n
SCI_MARGINGETSTYLEOFFSET _SCINTILLA.constants.SCI_MARGINGETSTYLEOFFSET\n2538\n
SCI_MARGINSETSTYLE _SCINTILLA.constants.SCI_MARGINSETSTYLE\n2532\n
SCI_MARGINSETSTYLEOFFSET _SCINTILLA.constants.SCI_MARGINSETSTYLEOFFSET\n2537\n
SCI_OPTIONAL_START _SCINTILLA.constants.SCI_OPTIONAL_START\n3000\n
SCI_RGBAIMAGESETHEIGHT _SCINTILLA.constants.SCI_RGBAIMAGESETHEIGHT\n2625\n
SCI_RGBAIMAGESETWIDTH _SCINTILLA.constants.SCI_RGBAIMAGESETWIDTH\n2624\n
SCI_SELECTIONISRECTANGLE _SCINTILLA.constants.SCI_SELECTIONISRECTANGLE\n2372\n
SCI_SETADDITIONALCARETFORE _SCINTILLA.constants.SCI_SETADDITIONALCARETFORE\n2604\n
SCI_SETADDITIONALCARETSBLINK _SCINTILLA.constants.SCI_SETADDITIONALCARETSBLINK\n2567\n
SCI_SETADDITIONALCARETSVISIBLE _SCINTILLA.constants.SCI_SETADDITIONALCARETSVISIBLE\n2608\n
SCI_SETADDITIONALSELALPHA _SCINTILLA.constants.SCI_SETADDITIONALSELALPHA\n2602\n
SCI_SETADDITIONALSELBACK _SCINTILLA.constants.SCI_SETADDITIONALSELBACK\n2601\n
SCI_SETADDITIONALSELECTIONTYPING _SCINTILLA.constants.SCI_SETADDITIONALSELECTIONTYPING\n2565\n
SCI_SETADDITIONALSELFORE _SCINTILLA.constants.SCI_SETADDITIONALSELFORE\n2600\n
SCI_SETANCHOR _SCINTILLA.constants.SCI_SETANCHOR\n2026\n
SCI_SETBACKSPACEUNINDENTS _SCINTILLA.constants.SCI_SETBACKSPACEUNINDENTS\n2262\n
SCI_SETBUFFEREDDRAW _SCINTILLA.constants.SCI_SETBUFFEREDDRAW\n2035\n
SCI_SETCARETFORE _SCINTILLA.constants.SCI_SETCARETFORE\n2069\n
SCI_SETCARETLINEBACK _SCINTILLA.constants.SCI_SETCARETLINEBACK\n2098\n
SCI_SETCARETLINEBACKALPHA _SCINTILLA.constants.SCI_SETCARETLINEBACKALPHA\n2470\n
SCI_SETCARETLINEVISIBLE _SCINTILLA.constants.SCI_SETCARETLINEVISIBLE\n2096\n
SCI_SETCARETPERIOD _SCINTILLA.constants.SCI_SETCARETPERIOD\n2076\n
SCI_SETCARETSTICKY _SCINTILLA.constants.SCI_SETCARETSTICKY\n2458\n
SCI_SETCARETSTYLE _SCINTILLA.constants.SCI_SETCARETSTYLE\n2512\n
SCI_SETCARETWIDTH _SCINTILLA.constants.SCI_SETCARETWIDTH\n2188\n
SCI_SETCODEPAGE _SCINTILLA.constants.SCI_SETCODEPAGE\n2037\n
SCI_SETCONTROLCHARSYMBOL _SCINTILLA.constants.SCI_SETCONTROLCHARSYMBOL\n2388\n
SCI_SETCURRENTPOS _SCINTILLA.constants.SCI_SETCURRENTPOS\n2141\n
SCI_SETCURSOR _SCINTILLA.constants.SCI_SETCURSOR\n2386\n
SCI_SETDOCPOINTER _SCINTILLA.constants.SCI_SETDOCPOINTER\n2358\n
SCI_SETEDGECOLOUR _SCINTILLA.constants.SCI_SETEDGECOLOUR\n2365\n
SCI_SETEDGECOLUMN _SCINTILLA.constants.SCI_SETEDGECOLUMN\n2361\n
SCI_SETEDGEMODE _SCINTILLA.constants.SCI_SETEDGEMODE\n2363\n
SCI_SETENDATLASTLINE _SCINTILLA.constants.SCI_SETENDATLASTLINE\n2277\n
SCI_SETEOLMODE _SCINTILLA.constants.SCI_SETEOLMODE\n2031\n
SCI_SETEXTRAASCENT _SCINTILLA.constants.SCI_SETEXTRAASCENT\n2525\n
SCI_SETEXTRADESCENT _SCINTILLA.constants.SCI_SETEXTRADESCENT\n2527\n
SCI_SETFIRSTVISIBLELINE _SCINTILLA.constants.SCI_SETFIRSTVISIBLELINE\n2613\n
SCI_SETFOCUS _SCINTILLA.constants.SCI_SETFOCUS\n2380\n
SCI_SETFOLDEXPANDED _SCINTILLA.constants.SCI_SETFOLDEXPANDED\n2229\n
SCI_SETFOLDLEVEL _SCINTILLA.constants.SCI_SETFOLDLEVEL\n2222\n
SCI_SETFONTQUALITY _SCINTILLA.constants.SCI_SETFONTQUALITY\n2611\n
SCI_SETHIGHLIGHTGUIDE _SCINTILLA.constants.SCI_SETHIGHLIGHTGUIDE\n2134\n
SCI_SETHOTSPOTACTIVEUNDERLINE _SCINTILLA.constants.SCI_SETHOTSPOTACTIVEUNDERLINE\n2412\n
SCI_SETHOTSPOTSINGLELINE _SCINTILLA.constants.SCI_SETHOTSPOTSINGLELINE\n2421\n
SCI_SETHSCROLLBAR _SCINTILLA.constants.SCI_SETHSCROLLBAR\n2130\n
SCI_SETIDENTIFIER _SCINTILLA.constants.SCI_SETIDENTIFIER\n2622\n
SCI_SETINDENT _SCINTILLA.constants.SCI_SETINDENT\n2122\n
SCI_SETINDENTATIONGUIDES _SCINTILLA.constants.SCI_SETINDENTATIONGUIDES\n2132\n
SCI_SETINDICATORCURRENT _SCINTILLA.constants.SCI_SETINDICATORCURRENT\n2500\n
SCI_SETINDICATORVALUE _SCINTILLA.constants.SCI_SETINDICATORVALUE\n2502\n
SCI_SETKEYSUNICODE _SCINTILLA.constants.SCI_SETKEYSUNICODE\n2521\n
SCI_SETKEYWORDS _SCINTILLA.constants.SCI_SETKEYWORDS\n4005\n
SCI_SETLAYOUTCACHE _SCINTILLA.constants.SCI_SETLAYOUTCACHE\n2272\n
SCI_SETLEXER _SCINTILLA.constants.SCI_SETLEXER\n4001\n
SCI_SETLINEINDENTATION _SCINTILLA.constants.SCI_SETLINEINDENTATION\n2126\n
SCI_SETLINESTATE _SCINTILLA.constants.SCI_SETLINESTATE\n2092\n
SCI_SETMAINSELECTION _SCINTILLA.constants.SCI_SETMAINSELECTION\n2574\n
SCI_SETMARGINCURSORN _SCINTILLA.constants.SCI_SETMARGINCURSORN\n2248\n
SCI_SETMARGINLEFT _SCINTILLA.constants.SCI_SETMARGINLEFT\n2155\n
SCI_SETMARGINMASKN _SCINTILLA.constants.SCI_SETMARGINMASKN\n2244\n
SCI_SETMARGINOPTIONS _SCINTILLA.constants.SCI_SETMARGINOPTIONS\n2539\n
SCI_SETMARGINRIGHT _SCINTILLA.constants.SCI_SETMARGINRIGHT\n2157\n
SCI_SETMARGINSENSITIVEN _SCINTILLA.constants.SCI_SETMARGINSENSITIVEN\n2246\n
SCI_SETMARGINTYPEN _SCINTILLA.constants.SCI_SETMARGINTYPEN\n2240\n
SCI_SETMARGINWIDTHN _SCINTILLA.constants.SCI_SETMARGINWIDTHN\n2242\n
SCI_SETMODEVENTMASK _SCINTILLA.constants.SCI_SETMODEVENTMASK\n2359\n
SCI_SETMOUSEDOWNCAPTURES _SCINTILLA.constants.SCI_SETMOUSEDOWNCAPTURES\n2384\n
SCI_SETMOUSEDWELLTIME _SCINTILLA.constants.SCI_SETMOUSEDWELLTIME\n2264\n
SCI_SETMULTIPASTE _SCINTILLA.constants.SCI_SETMULTIPASTE\n2614\n
SCI_SETMULTIPLESELECTION _SCINTILLA.constants.SCI_SETMULTIPLESELECTION\n2563\n
SCI_SETOVERTYPE _SCINTILLA.constants.SCI_SETOVERTYPE\n2186\n
SCI_SETPASTECONVERTENDINGS _SCINTILLA.constants.SCI_SETPASTECONVERTENDINGS\n2467\n
SCI_SETPOSITIONCACHE _SCINTILLA.constants.SCI_SETPOSITIONCACHE\n2514\n
SCI_SETPRINTCOLOURMODE _SCINTILLA.constants.SCI_SETPRINTCOLOURMODE\n2148\n
SCI_SETPRINTMAGNIFICATION _SCINTILLA.constants.SCI_SETPRINTMAGNIFICATION\n2146\n
SCI_SETPRINTWRAPMODE _SCINTILLA.constants.SCI_SETPRINTWRAPMODE\n2406\n
SCI_SETPROPERTY _SCINTILLA.constants.SCI_SETPROPERTY\n4004\n
SCI_SETREADONLY _SCINTILLA.constants.SCI_SETREADONLY\n2171\n
SCI_SETRECTANGULARSELECTIONANCHOR _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONANCHOR\n2590\n
SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE\n2594\n
SCI_SETRECTANGULARSELECTIONCARET _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONCARET\n2588\n
SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE\n2592\n
SCI_SETRECTANGULARSELECTIONMODIFIER _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONMODIFIER\n2598\n
SCI_SETSCROLLWIDTH _SCINTILLA.constants.SCI_SETSCROLLWIDTH\n2274\n
SCI_SETSCROLLWIDTHTRACKING _SCINTILLA.constants.SCI_SETSCROLLWIDTHTRACKING\n2516\n
SCI_SETSEARCHFLAGS _SCINTILLA.constants.SCI_SETSEARCHFLAGS\n2198\n
SCI_SETSELALPHA _SCINTILLA.constants.SCI_SETSELALPHA\n2478\n
SCI_SETSELECTIONEND _SCINTILLA.constants.SCI_SETSELECTIONEND\n2144\n
SCI_SETSELECTIONMODE _SCINTILLA.constants.SCI_SETSELECTIONMODE\n2422\n
SCI_SETSELECTIONNANCHOR _SCINTILLA.constants.SCI_SETSELECTIONNANCHOR\n2578\n
SCI_SETSELECTIONNANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_SETSELECTIONNANCHORVIRTUALSPACE\n2582\n
SCI_SETSELECTIONNCARET _SCINTILLA.constants.SCI_SETSELECTIONNCARET\n2576\n
SCI_SETSELECTIONNCARETVIRTUALSPACE _SCINTILLA.constants.SCI_SETSELECTIONNCARETVIRTUALSPACE\n2580\n
SCI_SETSELECTIONNEND _SCINTILLA.constants.SCI_SETSELECTIONNEND\n2586\n
SCI_SETSELECTIONNSTART _SCINTILLA.constants.SCI_SETSELECTIONNSTART\n2584\n
SCI_SETSELECTIONSTART _SCINTILLA.constants.SCI_SETSELECTIONSTART\n2142\n
SCI_SETSELEOLFILLED _SCINTILLA.constants.SCI_SETSELEOLFILLED\n2480\n
SCI_SETSTATUS _SCINTILLA.constants.SCI_SETSTATUS\n2382\n
SCI_SETSTYLEBITS _SCINTILLA.constants.SCI_SETSTYLEBITS\n2090\n
SCI_SETTABINDENTS _SCINTILLA.constants.SCI_SETTABINDENTS\n2260\n
SCI_SETTABWIDTH _SCINTILLA.constants.SCI_SETTABWIDTH\n2036\n
SCI_SETTARGETEND _SCINTILLA.constants.SCI_SETTARGETEND\n2192\n
SCI_SETTARGETSTART _SCINTILLA.constants.SCI_SETTARGETSTART\n2190\n
SCI_SETTECHNOLOGY _SCINTILLA.constants.SCI_SETTECHNOLOGY\n2630\n
SCI_SETTWOPHASEDRAW _SCINTILLA.constants.SCI_SETTWOPHASEDRAW\n2284\n
SCI_SETUNDOCOLLECTION _SCINTILLA.constants.SCI_SETUNDOCOLLECTION\n2012\n
SCI_SETUSETABS _SCINTILLA.constants.SCI_SETUSETABS\n2124\n
SCI_SETVIEWEOL _SCINTILLA.constants.SCI_SETVIEWEOL\n2356\n
SCI_SETVIEWWS _SCINTILLA.constants.SCI_SETVIEWWS\n2021\n
SCI_SETVIRTUALSPACEOPTIONS _SCINTILLA.constants.SCI_SETVIRTUALSPACEOPTIONS\n2596\n
SCI_SETVSCROLLBAR _SCINTILLA.constants.SCI_SETVSCROLLBAR\n2280\n
SCI_SETWHITESPACECHARS _SCINTILLA.constants.SCI_SETWHITESPACECHARS\n2443\n
SCI_SETWHITESPACESIZE _SCINTILLA.constants.SCI_SETWHITESPACESIZE\n2086\n
SCI_SETWORDCHARS _SCINTILLA.constants.SCI_SETWORDCHARS\n2077\n
SCI_SETWRAPINDENTMODE _SCINTILLA.constants.SCI_SETWRAPINDENTMODE\n2472\n
SCI_SETWRAPMODE _SCINTILLA.constants.SCI_SETWRAPMODE\n2268\n
SCI_SETWRAPSTARTINDENT _SCINTILLA.constants.SCI_SETWRAPSTARTINDENT\n2464\n
SCI_SETWRAPVISUALFLAGS _SCINTILLA.constants.SCI_SETWRAPVISUALFLAGS\n2460\n
SCI_SETWRAPVISUALFLAGSLOCATION _SCINTILLA.constants.SCI_SETWRAPVISUALFLAGSLOCATION\n2462\n
SCI_SETXOFFSET _SCINTILLA.constants.SCI_SETXOFFSET\n2397\n
SCI_SETZOOM _SCINTILLA.constants.SCI_SETZOOM\n2373\n
SCI_START _SCINTILLA.constants.SCI_START\n2000\n
SCI_STYLEGETBACK _SCINTILLA.constants.SCI_STYLEGETBACK\n2482\n
SCI_STYLEGETBOLD _SCINTILLA.constants.SCI_STYLEGETBOLD\n2483\n
SCI_STYLEGETCASE _SCINTILLA.constants.SCI_STYLEGETCASE\n2489\n
SCI_STYLEGETCHANGEABLE _SCINTILLA.constants.SCI_STYLEGETCHANGEABLE\n2492\n
SCI_STYLEGETCHARACTERSET _SCINTILLA.constants.SCI_STYLEGETCHARACTERSET\n2490\n
SCI_STYLEGETEOLFILLED _SCINTILLA.constants.SCI_STYLEGETEOLFILLED\n2487\n
SCI_STYLEGETFORE _SCINTILLA.constants.SCI_STYLEGETFORE\n2481\n
SCI_STYLEGETHOTSPOT _SCINTILLA.constants.SCI_STYLEGETHOTSPOT\n2493\n
SCI_STYLEGETITALIC _SCINTILLA.constants.SCI_STYLEGETITALIC\n2484\n
SCI_STYLEGETSIZE _SCINTILLA.constants.SCI_STYLEGETSIZE\n2485\n
SCI_STYLEGETSIZEFRACTIONAL _SCINTILLA.constants.SCI_STYLEGETSIZEFRACTIONAL\n2062\n
SCI_STYLEGETUNDERLINE _SCINTILLA.constants.SCI_STYLEGETUNDERLINE\n2488\n
SCI_STYLEGETVISIBLE _SCINTILLA.constants.SCI_STYLEGETVISIBLE\n2491\n
SCI_STYLEGETWEIGHT _SCINTILLA.constants.SCI_STYLEGETWEIGHT\n2064\n
SCI_STYLESETBACK _SCINTILLA.constants.SCI_STYLESETBACK\n2052\n
SCI_STYLESETBOLD _SCINTILLA.constants.SCI_STYLESETBOLD\n2053\n
SCI_STYLESETCASE _SCINTILLA.constants.SCI_STYLESETCASE\n2060\n
SCI_STYLESETCHANGEABLE _SCINTILLA.constants.SCI_STYLESETCHANGEABLE\n2099\n
SCI_STYLESETCHARACTERSET _SCINTILLA.constants.SCI_STYLESETCHARACTERSET\n2066\n
SCI_STYLESETEOLFILLED _SCINTILLA.constants.SCI_STYLESETEOLFILLED\n2057\n
SCI_STYLESETFONT _SCINTILLA.constants.SCI_STYLESETFONT\n2056\n
SCI_STYLESETFORE _SCINTILLA.constants.SCI_STYLESETFORE\n2051\n
SCI_STYLESETHOTSPOT _SCINTILLA.constants.SCI_STYLESETHOTSPOT\n2409\n
SCI_STYLESETITALIC _SCINTILLA.constants.SCI_STYLESETITALIC\n2054\n
SCI_STYLESETSIZE _SCINTILLA.constants.SCI_STYLESETSIZE\n2055\n
SCI_STYLESETSIZEFRACTIONAL _SCINTILLA.constants.SCI_STYLESETSIZEFRACTIONAL\n2061\n
SCI_STYLESETUNDERLINE _SCINTILLA.constants.SCI_STYLESETUNDERLINE\n2059\n
SCI_STYLESETVISIBLE _SCINTILLA.constants.SCI_STYLESETVISIBLE\n2074\n
SCI_STYLESETWEIGHT _SCINTILLA.constants.SCI_STYLESETWEIGHT\n2063\n
SCK_ADD _SCINTILLA.constants.SCK_ADD\n310\n
SCK_BACK _SCINTILLA.constants.SCK_BACK\n8\n
SCK_DELETE _SCINTILLA.constants.SCK_DELETE\n308\n
SCK_DIVIDE _SCINTILLA.constants.SCK_DIVIDE\n312\n
SCK_DOWN _SCINTILLA.constants.SCK_DOWN\n300\n
SCK_END _SCINTILLA.constants.SCK_END\n305\n
SCK_ESCAPE _SCINTILLA.constants.SCK_ESCAPE\n7\n
SCK_HOME _SCINTILLA.constants.SCK_HOME\n304\n
SCK_INSERT _SCINTILLA.constants.SCK_INSERT\n309\n
SCK_LEFT _SCINTILLA.constants.SCK_LEFT\n302\n
SCK_MENU _SCINTILLA.constants.SCK_MENU\n315\n
SCK_NEXT _SCINTILLA.constants.SCK_NEXT\n307\n
SCK_PRIOR _SCINTILLA.constants.SCK_PRIOR\n306\n
SCK_RETURN _SCINTILLA.constants.SCK_RETURN\n13\n
SCK_RIGHT _SCINTILLA.constants.SCK_RIGHT\n303\n
SCK_RWIN _SCINTILLA.constants.SCK_RWIN\n314\n
SCK_SUBTRACT _SCINTILLA.constants.SCK_SUBTRACT\n311\n
SCK_TAB _SCINTILLA.constants.SCK_TAB\n9\n
SCK_UP _SCINTILLA.constants.SCK_UP\n301\n
SCK_WIN _SCINTILLA.constants.SCK_WIN\n313\n
SCLEX_AUTOMATIC _SCINTILLA.constants.SCLEX_AUTOMATIC\n1000\n
SCLEX_CONTAINER _SCINTILLA.constants.SCLEX_CONTAINER\n0\n
SCLEX_LPEG _SCINTILLA.constants.SCLEX_LPEG\n999\n
SCMOD_ALT _SCINTILLA.constants.SCMOD_ALT\n4\n
SCMOD_CTRL _SCINTILLA.constants.SCMOD_CTRL\n2\n
SCMOD_META _SCINTILLA.constants.SCMOD_META\n16\n
SCMOD_NORM _SCINTILLA.constants.SCMOD_NORM\n0\n
SCMOD_SHIFT _SCINTILLA.constants.SCMOD_SHIFT\n1\n
SCMOD_SUPER _SCINTILLA.constants.SCMOD_SUPER\n8\n
SCN_AUTOCCANCELLED _SCINTILLA.constants.SCN_AUTOCCANCELLED\n2026\n
SCN_AUTOCCHARDELETED _SCINTILLA.constants.SCN_AUTOCCHARDELETED\n2027\n
SCN_AUTOCSELECTION _SCINTILLA.constants.SCN_AUTOCSELECTION\n2022\n
SCN_CALLTIPCLICK _SCINTILLA.constants.SCN_CALLTIPCLICK\n2021\n
SCN_CHARADDED _SCINTILLA.constants.SCN_CHARADDED\n2001\n
SCN_DOUBLECLICK _SCINTILLA.constants.SCN_DOUBLECLICK\n2006\n
SCN_DWELLEND _SCINTILLA.constants.SCN_DWELLEND\n2017\n
SCN_DWELLSTART _SCINTILLA.constants.SCN_DWELLSTART\n2016\n
SCN_HOTSPOTCLICK _SCINTILLA.constants.SCN_HOTSPOTCLICK\n2019\n
SCN_HOTSPOTDOUBLECLICK _SCINTILLA.constants.SCN_HOTSPOTDOUBLECLICK\n2020\n
SCN_HOTSPOTRELEASECLICK _SCINTILLA.constants.SCN_HOTSPOTRELEASECLICK\n2028\n
SCN_INDICATORCLICK _SCINTILLA.constants.SCN_INDICATORCLICK\n2023\n
SCN_INDICATORRELEASE _SCINTILLA.constants.SCN_INDICATORRELEASE\n2024\n
SCN_KEY _SCINTILLA.constants.SCN_KEY\n2005\n
SCN_MACRORECORD _SCINTILLA.constants.SCN_MACRORECORD\n2009\n
SCN_MARGINCLICK _SCINTILLA.constants.SCN_MARGINCLICK\n2010\n
SCN_MODIFIED _SCINTILLA.constants.SCN_MODIFIED\n2008\n
SCN_MODIFYATTEMPTRO _SCINTILLA.constants.SCN_MODIFYATTEMPTRO\n2004\n
SCN_NEEDSHOWN _SCINTILLA.constants.SCN_NEEDSHOWN\n2011\n
SCN_PAINTED _SCINTILLA.constants.SCN_PAINTED\n2013\n
SCN_SAVEPOINTLEFT _SCINTILLA.constants.SCN_SAVEPOINTLEFT\n2003\n
SCN_SAVEPOINTREACHED _SCINTILLA.constants.SCN_SAVEPOINTREACHED\n2002\n
SCN_STYLENEEDED _SCINTILLA.constants.SCN_STYLENEEDED\n2000\n
SCN_UPDATEUI _SCINTILLA.constants.SCN_UPDATEUI\n2007\n
SCN_URIDROPPED _SCINTILLA.constants.SCN_URIDROPPED\n2015\n
SCN_USERLISTSELECTION _SCINTILLA.constants.SCN_USERLISTSELECTION\n2014\n
SCN_ZOOM _SCINTILLA.constants.SCN_ZOOM\n2018\n
SCVS_NONE _SCINTILLA.constants.SCVS_NONE\n0\n
SCVS_RECTANGULARSELECTION _SCINTILLA.constants.SCVS_RECTANGULARSELECTION\n1\n
SCVS_USERACCESSIBLE _SCINTILLA.constants.SCVS_USERACCESSIBLE\n2\n
SCWS_INVISIBLE _SCINTILLA.constants.SCWS_INVISIBLE\n0\n
SCWS_VISIBLEAFTERINDENT _SCINTILLA.constants.SCWS_VISIBLEAFTERINDENT\n2\n
SCWS_VISIBLEALWAYS _SCINTILLA.constants.SCWS_VISIBLEALWAYS\n1\n
SC_ALPHA_NOALPHA _SCINTILLA.constants.SC_ALPHA_NOALPHA\n256\n
SC_ALPHA_OPAQUE _SCINTILLA.constants.SC_ALPHA_OPAQUE\n255\n
SC_ALPHA_TRANSPARENT _SCINTILLA.constants.SC_ALPHA_TRANSPARENT\n0\n
SC_CACHE_CARET _SCINTILLA.constants.SC_CACHE_CARET\n1\n
SC_CACHE_DOCUMENT _SCINTILLA.constants.SC_CACHE_DOCUMENT\n3\n
SC_CACHE_NONE _SCINTILLA.constants.SC_CACHE_NONE\n0\n
SC_CACHE_PAGE _SCINTILLA.constants.SC_CACHE_PAGE\n2\n
SC_CARETSTICKY_OFF _SCINTILLA.constants.SC_CARETSTICKY_OFF\n0\n
SC_CARETSTICKY_ON _SCINTILLA.constants.SC_CARETSTICKY_ON\n1\n
SC_CARETSTICKY_WHITESPACE _SCINTILLA.constants.SC_CARETSTICKY_WHITESPACE\n2\n
SC_CASE_LOWER _SCINTILLA.constants.SC_CASE_LOWER\n2\n
SC_CASE_MIXED _SCINTILLA.constants.SC_CASE_MIXED\n0\n
SC_CASE_UPPER _SCINTILLA.constants.SC_CASE_UPPER\n1\n
SC_CHARSET_8859_15 _SCINTILLA.constants.SC_CHARSET_8859_15\n1000\n
SC_CHARSET_ANSI _SCINTILLA.constants.SC_CHARSET_ANSI\n0\n
SC_CHARSET_ARABIC _SCINTILLA.constants.SC_CHARSET_ARABIC\n178\n
SC_CHARSET_BALTIC _SCINTILLA.constants.SC_CHARSET_BALTIC\n186\n
SC_CHARSET_CHINESEBIG5 _SCINTILLA.constants.SC_CHARSET_CHINESEBIG5\n136\n
SC_CHARSET_CYRILLIC _SCINTILLA.constants.SC_CHARSET_CYRILLIC\n1251\n
SC_CHARSET_DEFAULT _SCINTILLA.constants.SC_CHARSET_DEFAULT\n1\n
SC_CHARSET_EASTEUROPE _SCINTILLA.constants.SC_CHARSET_EASTEUROPE\n238\n
SC_CHARSET_GB2312 _SCINTILLA.constants.SC_CHARSET_GB2312\n134\n
SC_CHARSET_GREEK _SCINTILLA.constants.SC_CHARSET_GREEK\n161\n
SC_CHARSET_HANGUL _SCINTILLA.constants.SC_CHARSET_HANGUL\n129\n
SC_CHARSET_HEBREW _SCINTILLA.constants.SC_CHARSET_HEBREW\n177\n
SC_CHARSET_JOHAB _SCINTILLA.constants.SC_CHARSET_JOHAB\n130\n
SC_CHARSET_MAC _SCINTILLA.constants.SC_CHARSET_MAC\n77\n
SC_CHARSET_OEM _SCINTILLA.constants.SC_CHARSET_OEM\n255\n
SC_CHARSET_RUSSIAN _SCINTILLA.constants.SC_CHARSET_RUSSIAN\n204\n
SC_CHARSET_SHIFTJIS _SCINTILLA.constants.SC_CHARSET_SHIFTJIS\n128\n
SC_CHARSET_SYMBOL _SCINTILLA.constants.SC_CHARSET_SYMBOL\n2\n
SC_CHARSET_THAI _SCINTILLA.constants.SC_CHARSET_THAI\n222\n
SC_CHARSET_TURKISH _SCINTILLA.constants.SC_CHARSET_TURKISH\n162\n
SC_CHARSET_VIETNAMESE _SCINTILLA.constants.SC_CHARSET_VIETNAMESE\n163\n
SC_CP_UTF8 _SCINTILLA.constants.SC_CP_UTF8\n65001\n
SC_CURSORARROW _SCINTILLA.constants.SC_CURSORARROW\n2\n
SC_CURSORNORMAL _SCINTILLA.constants.SC_CURSORNORMAL\n-1\n
SC_CURSORREVERSEARROW _SCINTILLA.constants.SC_CURSORREVERSEARROW\n7\n
SC_CURSORWAIT _SCINTILLA.constants.SC_CURSORWAIT\n4\n
SC_EFF_QUALITY_ANTIALIASED _SCINTILLA.constants.SC_EFF_QUALITY_ANTIALIASED\n2\n
SC_EFF_QUALITY_DEFAULT _SCINTILLA.constants.SC_EFF_QUALITY_DEFAULT\n0\n
SC_EFF_QUALITY_LCD_OPTIMIZED _SCINTILLA.constants.SC_EFF_QUALITY_LCD_OPTIMIZED\n3\n
SC_EFF_QUALITY_MASK _SCINTILLA.constants.SC_EFF_QUALITY_MASK\n15\n
SC_EFF_QUALITY_NON_ANTIALIASED _SCINTILLA.constants.SC_EFF_QUALITY_NON_ANTIALIASED\n1\n
SC_EOL_CR _SCINTILLA.constants.SC_EOL_CR\n1\n
SC_EOL_CRLF _SCINTILLA.constants.SC_EOL_CRLF\n0\n
SC_EOL_LF _SCINTILLA.constants.SC_EOL_LF\n2\n
SC_FOLDFLAG_LEVELNUMBERS _SCINTILLA.constants.SC_FOLDFLAG_LEVELNUMBERS\n64\n
SC_FOLDFLAG_LINEAFTER_CONTRACTED _SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_CONTRACTED\n16\n
SC_FOLDFLAG_LINEAFTER_EXPANDED _SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_EXPANDED\n8\n
SC_FOLDFLAG_LINEBEFORE_CONTRACTED _SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_CONTRACTED\n4\n
SC_FOLDFLAG_LINEBEFORE_EXPANDED _SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_EXPANDED\n2\n
SC_FOLDLEVELBASE _SCINTILLA.constants.SC_FOLDLEVELBASE\n1024\n
SC_FOLDLEVELBASE lexer.SC_FOLDLEVELBASE\nThe initial (root) fold level.\n
SC_FOLDLEVELHEADERFLAG _SCINTILLA.constants.SC_FOLDLEVELHEADERFLAG\n8192\n
SC_FOLDLEVELHEADERFLAG lexer.SC_FOLDLEVELHEADERFLAG\nFlag indicating the line is fold point.\n
SC_FOLDLEVELNUMBERMASK _SCINTILLA.constants.SC_FOLDLEVELNUMBERMASK\n4095\n
SC_FOLDLEVELNUMBERMASK lexer.SC_FOLDLEVELNUMBERMASK\nFlag used with `SCI_GETFOLDLEVEL(line)` to get the fold level of a line.\n
SC_FOLDLEVELWHITEFLAG _SCINTILLA.constants.SC_FOLDLEVELWHITEFLAG\n4096\n
SC_FOLDLEVELWHITEFLAG lexer.SC_FOLDLEVELWHITEFLAG\nFlag indicating that the line is blank.\n
SC_FONT_SIZE_MULTIPLIER _SCINTILLA.constants.SC_FONT_SIZE_MULTIPLIER\n100\n
SC_IV_LOOKBOTH _SCINTILLA.constants.SC_IV_LOOKBOTH\n3\n
SC_IV_LOOKFORWARD _SCINTILLA.constants.SC_IV_LOOKFORWARD\n2\n
SC_IV_NONE _SCINTILLA.constants.SC_IV_NONE\n0\n
SC_IV_REAL _SCINTILLA.constants.SC_IV_REAL\n1\n
SC_LASTSTEPINUNDOREDO _SCINTILLA.constants.SC_LASTSTEPINUNDOREDO\n256\n
SC_MARGINOPTION_NONE _SCINTILLA.constants.SC_MARGINOPTION_NONE\n0\n
SC_MARGINOPTION_SUBLINESELECT _SCINTILLA.constants.SC_MARGINOPTION_SUBLINESELECT\n1\n
SC_MARGIN_BACK _SCINTILLA.constants.SC_MARGIN_BACK\n2\n
SC_MARGIN_FORE _SCINTILLA.constants.SC_MARGIN_FORE\n3\n
SC_MARGIN_NUMBER _SCINTILLA.constants.SC_MARGIN_NUMBER\n1\n
SC_MARGIN_RTEXT _SCINTILLA.constants.SC_MARGIN_RTEXT\n5\n
SC_MARGIN_SYMBOL _SCINTILLA.constants.SC_MARGIN_SYMBOL\n0\n
SC_MARGIN_TEXT _SCINTILLA.constants.SC_MARGIN_TEXT\n4\n
SC_MARKNUM_FOLDER _SCINTILLA.constants.SC_MARKNUM_FOLDER\n30\n
SC_MARKNUM_FOLDEREND _SCINTILLA.constants.SC_MARKNUM_FOLDEREND\n25\n
SC_MARKNUM_FOLDERMIDTAIL _SCINTILLA.constants.SC_MARKNUM_FOLDERMIDTAIL\n27\n
SC_MARKNUM_FOLDEROPEN _SCINTILLA.constants.SC_MARKNUM_FOLDEROPEN\n31\n
SC_MARKNUM_FOLDEROPENMID _SCINTILLA.constants.SC_MARKNUM_FOLDEROPENMID\n26\n
SC_MARKNUM_FOLDERSUB _SCINTILLA.constants.SC_MARKNUM_FOLDERSUB\n29\n
SC_MARKNUM_FOLDERTAIL _SCINTILLA.constants.SC_MARKNUM_FOLDERTAIL\n28\n
SC_MARK_ARROW _SCINTILLA.constants.SC_MARK_ARROW\n2\n
SC_MARK_ARROWDOWN _SCINTILLA.constants.SC_MARK_ARROWDOWN\n6\n
SC_MARK_ARROWS _SCINTILLA.constants.SC_MARK_ARROWS\n24\n
SC_MARK_AVAILABLE _SCINTILLA.constants.SC_MARK_AVAILABLE\n28\n
SC_MARK_BACKGROUND _SCINTILLA.constants.SC_MARK_BACKGROUND\n22\n
SC_MARK_BOXMINUS _SCINTILLA.constants.SC_MARK_BOXMINUS\n14\n
SC_MARK_BOXMINUSCONNECTED _SCINTILLA.constants.SC_MARK_BOXMINUSCONNECTED\n15\n
SC_MARK_BOXPLUS _SCINTILLA.constants.SC_MARK_BOXPLUS\n12\n
SC_MARK_BOXPLUSCONNECTED _SCINTILLA.constants.SC_MARK_BOXPLUSCONNECTED\n13\n
SC_MARK_CHARACTER _SCINTILLA.constants.SC_MARK_CHARACTER\n10000\n
SC_MARK_CIRCLE _SCINTILLA.constants.SC_MARK_CIRCLE\n0\n
SC_MARK_CIRCLEMINUS _SCINTILLA.constants.SC_MARK_CIRCLEMINUS\n20\n
SC_MARK_CIRCLEMINUSCONNECTED _SCINTILLA.constants.SC_MARK_CIRCLEMINUSCONNECTED\n21\n
SC_MARK_CIRCLEPLUS _SCINTILLA.constants.SC_MARK_CIRCLEPLUS\n18\n
SC_MARK_CIRCLEPLUSCONNECTED _SCINTILLA.constants.SC_MARK_CIRCLEPLUSCONNECTED\n19\n
SC_MARK_DOTDOTDOT _SCINTILLA.constants.SC_MARK_DOTDOTDOT\n23\n
SC_MARK_EMPTY _SCINTILLA.constants.SC_MARK_EMPTY\n5\n
SC_MARK_FULLRECT _SCINTILLA.constants.SC_MARK_FULLRECT\n26\n
SC_MARK_LCORNER _SCINTILLA.constants.SC_MARK_LCORNER\n10\n
SC_MARK_LCORNERCURVE _SCINTILLA.constants.SC_MARK_LCORNERCURVE\n16\n
SC_MARK_LEFTRECT _SCINTILLA.constants.SC_MARK_LEFTRECT\n27\n
SC_MARK_MINUS _SCINTILLA.constants.SC_MARK_MINUS\n7\n
SC_MARK_PIXMAP _SCINTILLA.constants.SC_MARK_PIXMAP\n25\n
SC_MARK_PLUS _SCINTILLA.constants.SC_MARK_PLUS\n8\n
SC_MARK_RGBAIMAGE _SCINTILLA.constants.SC_MARK_RGBAIMAGE\n30\n
SC_MARK_ROUNDRECT _SCINTILLA.constants.SC_MARK_ROUNDRECT\n1\n
SC_MARK_SHORTARROW _SCINTILLA.constants.SC_MARK_SHORTARROW\n4\n
SC_MARK_SMALLRECT _SCINTILLA.constants.SC_MARK_SMALLRECT\n3\n
SC_MARK_TCORNER _SCINTILLA.constants.SC_MARK_TCORNER\n11\n
SC_MARK_TCORNERCURVE _SCINTILLA.constants.SC_MARK_TCORNERCURVE\n17\n
SC_MARK_UNDERLINE _SCINTILLA.constants.SC_MARK_UNDERLINE\n29\n
SC_MARK_VLINE _SCINTILLA.constants.SC_MARK_VLINE\n9\n
SC_MASK_FOLDERS _SCINTILLA.constants.SC_MASK_FOLDERS\n-33554432\n
SC_MODEVENTMASKALL _SCINTILLA.constants.SC_MODEVENTMASKALL\n1048575\n
SC_MOD_BEFOREDELETE _SCINTILLA.constants.SC_MOD_BEFOREDELETE\n2048\n
SC_MOD_BEFOREINSERT _SCINTILLA.constants.SC_MOD_BEFOREINSERT\n1024\n
SC_MOD_CHANGEANNOTATION _SCINTILLA.constants.SC_MOD_CHANGEANNOTATION\n131072\n
SC_MOD_CHANGEFOLD _SCINTILLA.constants.SC_MOD_CHANGEFOLD\n8\n
SC_MOD_CHANGEINDICATOR _SCINTILLA.constants.SC_MOD_CHANGEINDICATOR\n16384\n
SC_MOD_CHANGELINESTATE _SCINTILLA.constants.SC_MOD_CHANGELINESTATE\n32768\n
SC_MOD_CHANGEMARGIN _SCINTILLA.constants.SC_MOD_CHANGEMARGIN\n65536\n
SC_MOD_CHANGEMARKER _SCINTILLA.constants.SC_MOD_CHANGEMARKER\n512\n
SC_MOD_CHANGESTYLE _SCINTILLA.constants.SC_MOD_CHANGESTYLE\n4\n
SC_MOD_CONTAINER _SCINTILLA.constants.SC_MOD_CONTAINER\n262144\n
SC_MOD_DELETETEXT _SCINTILLA.constants.SC_MOD_DELETETEXT\n2\n
SC_MOD_INSERTTEXT _SCINTILLA.constants.SC_MOD_INSERTTEXT\n1\n
SC_MOD_LEXERSTATE _SCINTILLA.constants.SC_MOD_LEXERSTATE\n524288\n
SC_MULTILINEUNDOREDO _SCINTILLA.constants.SC_MULTILINEUNDOREDO\n4096\n
SC_MULTIPASTE_EACH _SCINTILLA.constants.SC_MULTIPASTE_EACH\n1\n
SC_MULTIPASTE_ONCE _SCINTILLA.constants.SC_MULTIPASTE_ONCE\n0\n
SC_MULTISTEPUNDOREDO _SCINTILLA.constants.SC_MULTISTEPUNDOREDO\n128\n
SC_PERFORMED_REDO _SCINTILLA.constants.SC_PERFORMED_REDO\n64\n
SC_PERFORMED_UNDO _SCINTILLA.constants.SC_PERFORMED_UNDO\n32\n
SC_PERFORMED_USER _SCINTILLA.constants.SC_PERFORMED_USER\n16\n
SC_PRINT_BLACKONWHITE _SCINTILLA.constants.SC_PRINT_BLACKONWHITE\n2\n
SC_PRINT_COLOURONWHITE _SCINTILLA.constants.SC_PRINT_COLOURONWHITE\n3\n
SC_PRINT_COLOURONWHITEDEFAULTBG _SCINTILLA.constants.SC_PRINT_COLOURONWHITEDEFAULTBG\n4\n
SC_PRINT_INVERTLIGHT _SCINTILLA.constants.SC_PRINT_INVERTLIGHT\n1\n
SC_PRINT_NORMAL _SCINTILLA.constants.SC_PRINT_NORMAL\n0\n
SC_SEL_LINES _SCINTILLA.constants.SC_SEL_LINES\n2\n
SC_SEL_RECTANGLE _SCINTILLA.constants.SC_SEL_RECTANGLE\n1\n
SC_SEL_STREAM _SCINTILLA.constants.SC_SEL_STREAM\n0\n
SC_SEL_THIN _SCINTILLA.constants.SC_SEL_THIN\n3\n
SC_STARTACTION _SCINTILLA.constants.SC_STARTACTION\n8192\n
SC_STATUS_BADALLOC _SCINTILLA.constants.SC_STATUS_BADALLOC\n2\n
SC_STATUS_FAILURE _SCINTILLA.constants.SC_STATUS_FAILURE\n1\n
SC_STATUS_OK _SCINTILLA.constants.SC_STATUS_OK\n0\n
SC_TECHNOLOGY_DEFAULT _SCINTILLA.constants.SC_TECHNOLOGY_DEFAULT\n0\n
SC_TECHNOLOGY_DIRECTWRITE _SCINTILLA.constants.SC_TECHNOLOGY_DIRECTWRITE\n1\n
SC_TIME_FOREVER _SCINTILLA.constants.SC_TIME_FOREVER\n10000000\n
SC_TYPE_BOOLEAN _SCINTILLA.constants.SC_TYPE_BOOLEAN\n0\n
SC_TYPE_INTEGER _SCINTILLA.constants.SC_TYPE_INTEGER\n1\n
SC_TYPE_STRING _SCINTILLA.constants.SC_TYPE_STRING\n2\n
SC_UPDATE_CONTENT _SCINTILLA.constants.SC_UPDATE_CONTENT\n1\n
SC_UPDATE_H_SCROLL _SCINTILLA.constants.SC_UPDATE_H_SCROLL\n8\n
SC_UPDATE_SELECTION _SCINTILLA.constants.SC_UPDATE_SELECTION\n2\n
SC_UPDATE_V_SCROLL _SCINTILLA.constants.SC_UPDATE_V_SCROLL\n4\n
SC_WEIGHT_BOLD _SCINTILLA.constants.SC_WEIGHT_BOLD\n700\n
SC_WEIGHT_NORMAL _SCINTILLA.constants.SC_WEIGHT_NORMAL\n400\n
SC_WEIGHT_SEMIBOLD _SCINTILLA.constants.SC_WEIGHT_SEMIBOLD\n600\n
SC_WRAPINDENT_FIXED _SCINTILLA.constants.SC_WRAPINDENT_FIXED\n0\n
SC_WRAPINDENT_INDENT _SCINTILLA.constants.SC_WRAPINDENT_INDENT\n2\n
SC_WRAPINDENT_SAME _SCINTILLA.constants.SC_WRAPINDENT_SAME\n1\n
SC_WRAPVISUALFLAGLOC_DEFAULT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_DEFAULT\n0\n
SC_WRAPVISUALFLAGLOC_END_BY_TEXT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_END_BY_TEXT\n1\n
SC_WRAPVISUALFLAGLOC_START_BY_TEXT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_START_BY_TEXT\n2\n
SC_WRAPVISUALFLAG_END _SCINTILLA.constants.SC_WRAPVISUALFLAG_END\n1\n
SC_WRAPVISUALFLAG_NONE _SCINTILLA.constants.SC_WRAPVISUALFLAG_NONE\n0\n
SC_WRAPVISUALFLAG_START _SCINTILLA.constants.SC_WRAPVISUALFLAG_START\n2\n
SC_WRAP_CHAR _SCINTILLA.constants.SC_WRAP_CHAR\n2\n
SC_WRAP_NONE _SCINTILLA.constants.SC_WRAP_NONE\n0\n
SC_WRAP_WORD _SCINTILLA.constants.SC_WRAP_WORD\n1\n
STRING lexer.STRING\n\n
STRIP_WHITESPACE_ON_SAVE _M.textadept.editing.STRIP_WHITESPACE_ON_SAVE [bool]\nStrip trailing whitespace on file save. The default value is `true`.\n
STYLE_BRACEBAD _SCINTILLA.constants.STYLE_BRACEBAD\n35\n
STYLE_BRACELIGHT _SCINTILLA.constants.STYLE_BRACELIGHT\n34\n
STYLE_CALLTIP _SCINTILLA.constants.STYLE_CALLTIP\n38\n
STYLE_CONTROLCHAR _SCINTILLA.constants.STYLE_CONTROLCHAR\n36\n
STYLE_DEFAULT _SCINTILLA.constants.STYLE_DEFAULT\n32\n
STYLE_INDENTGUIDE _SCINTILLA.constants.STYLE_INDENTGUIDE\n37\n
STYLE_LASTPREDEFINED _SCINTILLA.constants.STYLE_LASTPREDEFINED\n39\n
STYLE_LINENUMBER _SCINTILLA.constants.STYLE_LINENUMBER\n33\n
STYLE_MAX _SCINTILLA.constants.STYLE_MAX\n255\n
TYPE lexer.TYPE\n\n
UNDO_MAY_COALESCE _SCINTILLA.constants.UNDO_MAY_COALESCE\n1\n
UPDATE_UI events.UPDATE_UI\nCalled when either the text or styling of the buffer has changed or the\nselection range has changed.\n
URI_DROPPED events.URI_DROPPED\nCalled when the user has dragged a URI such as a file name onto the view.\n    * `text`: The URI text.\n\n
USER_LIST_SELECTION events.USER_LIST_SELECTION\nCalled when the user has selected an item in a user list.\n    * `list_type`: This is set to the list_type parameter from the\n      `buffer:user_list_show()` call that initiated the list.\n    * `text`: The text of the selection.\n    * `position`: The position the list was displayed at.\n\n
V lpeg.V(v)\nThis operation creates a non-terminal (a variable) for a grammar. The created\nnon-terminal refers to the rule indexed by v in the enclosing grammar. (See\nGrammars for details.)\n
VARIABLE lexer.VARIABLE\n\n
VIEW_AFTER_SWITCH events.VIEW_AFTER_SWITCH\nCalled right after another view is switched to.\n
VIEW_BEFORE_SWITCH events.VIEW_BEFORE_SWITCH\nCalled right before another view is switched to.\n
VIEW_NEW events.VIEW_NEW\nCalled when a new view is created.\n
VISIBLE_SLOP _SCINTILLA.constants.VISIBLE_SLOP\n1\n
VISIBLE_STRICT _SCINTILLA.constants.VISIBLE_STRICT\n4\n
WHITESPACE lexer.WHITESPACE\n\n
WIN32 _G.WIN32 [bool]\nIf Textadept is running on Windows, this flag is `true`.\n
_BUFFERS _G._BUFFERS [table]\nTable of all open buffers in Textadept. Numeric keys have buffer values and\nbuffer keys have their associated numeric keys.\n
_CHARSET _G._CHARSET [string]\nThe character set encoding of the filesystem. This is used in File I/O.\n
_EMBEDDEDRULES lexer._EMBEDDEDRULES [table]\nSet of rules for an embedded lexer. For a parent lexer name, contains child's\n`start_rule`, `token_rule`, and `end_rule` patterns.\n
_G _G._G [module]\nLua _G module.\n
_G _G._G\nA global variable (not a function) that holds the global environment (see\n§2.2). Lua itself does not use this variable; changing its value does not\naffect any environment, nor vice-versa.\n
_HOME _G._HOME [string]\nPath to the directory containing Textadept.\n
_L _G._L [module]\nTable of all messages used by Textadept for localization.\n
_LEXERPATH _G._LEXERPATH [string]\nPaths to lexers, formatted like `package.path`.\n
_M _G._M [module]\nA table of loaded modules.\n
_NIL _L._NIL [string]\nString returned when no localization for a given message exists.\n
_RELEASE _G._RELEASE [string]\nThe Textadept release version.\n
_RULES lexer._RULES [table]\nList of rule names with associated LPeg patterns for a specific lexer. It\nis accessible to other lexers for embedded lexer applications.\n
_SCINTILLA _G._SCINTILLA [module]\nScintilla constants, functions, and properties. Do not modify anything in\nthis module. Doing so will result in instability.\n
_USERHOME _G._USERHOME [string]\nPath to the user's `~/.textadept/`.\n
_VERSION _G._VERSION [string]\nA global variable (not a function) that holds a string containing the current\ninterpreter version. The current contents of this variable is "`Lua 5.2`".\n
_VIEWS _G._VIEWS [table]\nTable of all views in Textadept. Numeric keys have view values and view keys\nhave their associated numeric keys.\n
_cancel_current _M.textadept.snippets._cancel_current()\nCancels the active snippet, reverting to the state before its activation,\nand restores the previously running snippet (if any).\n
_insert _M.textadept.snippets._insert(text)\nInserts a snippet.\n@param text Optional snippet text. If none is specified, the snippet text\nis determined from the trigger and lexer.\n@return `false` if no snippet was expanded; `true` otherwise.\n
_previous _M.textadept.snippets._previous()\nGoes back to the previous placeholder, reverting any changes from the\ncurrent one.\n@return `false` if no snippet is active; `nil` otherwise.\n
_print gui._print(buffer_type, ...)\nHelper function for printing messages to buffers. Splits the view and opens a\nnew buffer for printing messages. If the message buffer is already open and a\nview is currently showing it, the message is printed to that view. Otherwise\nthe view is split, goes to the open message buffer, and prints to it.\n@param buffer_type String type of message buffer.\n@param ... Message strings.\n@usage gui._print(_L['[Error Buffer]'], error_message)\n@usage gui._print(_L['[Message Buffer]'], message)\n
_select _M.textadept.snippets._select()\nPrompts the user to select a snippet to insert from a filtered list\ndialog. Global snippets and snippets in the current lexer are shown.\n
abs math.abs(x)\nReturns the absolute value of `x`.\n
acos math.acos(x)\nReturns the arc cosine of `x` (in radians).\n
add _M.textadept.bookmarks.add()\nAdds a bookmark to the current line.\n
add_selection buffer.add_selection(buffer, caret, anchor)\nAdd a selection from anchor to caret as the main selection. Retainings all\nother selections as additional selections. Since there is always at least one\nselection, to set a list of selections, the first selection should be added\nwith `buffer:set_selection()` and later selections added with this function.\n@param buffer The global buffer.\n@param caret The caret.\n@param anchor The anchor.\n
add_text buffer.add_text(buffer, text)\nAdd text to the document at current position. The current position is set\nat the end of the inserted text, but it is not scrolled into view.\n@param buffer The global buffer.\n@param text The text to add.\n
add_trigger _M.textadept.adeptsense.add_trigger(sense, c, only_fields, only_functions)\nSets the trigger for autocompletion.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param c The character(s) that triggers the autocompletion. You can have up\nto two characters.\n@param only_fields If `true`, this trigger only completes fields. Defaults to\n`false`.\n@param only_functions If `true`, this trigger only completes\nfunctions. Defaults to `false`.\n@usage sense:add_trigger('.')\n@usage sense:add_trigger(':', false, true) -- only functions\n@usage sense:add_trigger('->')\n
additional_caret_fore buffer.additional_caret_fore [number]\nThe foreground color of additional carets in `0xBBGGRR` format.\n
additional_carets_blink buffer.additional_carets_blink [bool]\nWhether additional carets will blink.\n
additional_carets_visible buffer.additional_carets_visible [bool]\nWhether additional carets are visible.\n
additional_sel_alpha buffer.additional_sel_alpha [number]\nThe alpha of additional selections. Alpha ranges from `0` (transparent) to\n`255` (opaque) or `256` for no alpha.\n
additional_sel_back buffer.additional_sel_back [number]\nThe background color of additional selections in `0xBBGGRR`\nformat. `buffer:set_sel_back(true, ...)` must have been called previously\nfor this to have an effect.\n
additional_sel_fore buffer.additional_sel_fore [number]\nThe foreground color of additional selections in `0xBBGGRR`\nformat. `buffer:set_sel_fore(true, ...)` must have been called previously\nfor this to have an effect.\n
additional_selection_typing buffer.additional_selection_typing [bool]\nWhether typing can be performed into multiple selections.\n
adeptsense _M.textadept.adeptsense [module]\nLanguage autocompletion support for the textadept module.\n
allocate buffer.allocate(buffer, bytes)\nEnlarge the document to a particular size of text bytes. The document will\nnot be made smaller than its current contents.\n@param buffer The global buffer.\n
alnum lexer.alnum\nMatches any alphanumeric character (`A-Z`, `a-z`, `0-9`).\n
alpha lexer.alpha\nMatches any alphabetic character (`A-Z`, `a-z`).\n
always_show_globals _M.textadept.adeptsense.always_show_globals [bool]\nInclude globals in the list of completions offered. Globals are classes,\nfunctions, and fields that do not belong to another class. They are contained\nin `completions['']`. The default value is `true`.\n
anchor buffer.anchor [number]\nThe position of the opposite end of the selection to the caret.\n
annotation_clear_all buffer.annotation_clear_all(buffer)\nClear the annotations from all lines.\n@param buffer The global buffer.\n
annotation_get_text buffer.annotation_get_text(buffer, line)\nGet the annotation text for a line.\n@param buffer The global buffer.\n@param line The line number.\n@return string\n
annotation_lines buffer.annotation_lines [table]\nTable of the number of annotation lines for lines starting from\nzero. (Read-only)\n
annotation_set_text buffer.annotation_set_text(buffer, line, text)\nSet the annotation text for a line.\n@param buffer The global buffer.\n@param line The line number.\n@param text The text.\n
annotation_style buffer.annotation_style [table]\nTable of style numbers for annotations for lines starting at zero.\n
annotation_style_offset buffer.annotation_style_offset [number]\nThe start of the range of style numbers used for annotations. Annotation\nstyles may be completely separated from standard text styles by setting a\nstyle offset. For example, setting this to `512` would allow the annotation\nstyles to be numbered from `512` upto `767` so they do not overlap styles set\nby lexers (or margins if margins offset is `256`). Each style number set with\n`buffer.annotation_style` has the offset added before looking up the style.\n
annotation_visible buffer.annotation_visible [number]\nThe visibility of annotations.\n    * `_SCINTILLA.constants.ANNOTATION_HIDDEN` (0): Annotations are not\n      displayed.\n    * `_SCINTILLA.constants.ANNOTATION_STANDARD` (1): Annotations are drawn\n      left justified with no adornment.\n    * `_SCINTILLA.constants.ANNOTATION_BOXED` (2): Annotations are indented\n      to match the text and are surrounded by a box.\n\n
any lexer.any\nMatches any single character.\n
api_files _M.textadept.adeptsense.api_files [table]\nContains a list of api files used by `show_apidoc()`. Each line in the api\nfile contains a symbol name (not the full symbol) followed by a space character\nand then the symbol's documentation. Since there may be many duplicate symbol\nnames, it is recommended to put the full symbol and arguments, if any, on the\nfirst line. (e.g. `Class.function(arg1, arg2, ...)`). This allows the correct\ndocumentation to be shown based on the current context. In the documentation,\nnewlines are represented with `\\n`. A `\` before `\\n` escapes the newline.\n
append_text buffer.append_text(buffer, text)\nAppend a string to the end of the document without changing the selection. The\ncurrent selection is not changed and the new text is not scrolled into view.\n@param buffer The global buffer.\n@param text The text.\n
arg _G.arg [table]\nCommand line parameters.\n
args _G.args [module]\nProcesses command line arguments for Textadept.\n
arshift bit32.arshift(x, disp)\nReturns the number `x` shifted `disp` bits to the right. The number `disp`\nmay be any representable integer. Negative displacements shift to the left.\nThis shift operation is what is called arithmetic shift. Vacant bits on the\nleft are filled with copies of the higher bit of `x`; vacant bits on the right\nare filled with zeros. In particular, displacements with absolute values higher\nthan 31 result in zero or `0xFFFFFFFF` (all original bits are shifted out).\n
ascii lexer.ascii\nMatches any ASCII character (`0`..`127`).\n
asin math.asin(x)\nReturns the arc sine of `x` (in radians).\n
assert _G.assert(v [, message])\nIssues an error when the value of its argument `v` is false (i.e., nil or\nfalse); otherwise, returns all its arguments. `message` is an error message;\nwhen absent, it defaults to "assertion failed!"\n
atan math.atan(x)\nReturns the arc tangent of `x` (in radians).\n
atan2 math.atan2(y, x)\nReturns the arc tangent of `y/x` (in radians), but uses the signs of both\nparameters to find the quadrant of the result. (It also handles correctly\nthe case of `x` being zero.)\n
attributes lfs.attributes(filepath [, aname])\nReturns a table with the file attributes corresponding to filepath (or\nnil followed by an error message in case of error). If the second optional\nargument is given, then only the value of the named attribute is returned\n(this use is equivalent to lfs.attributes(filepath).aname, but the table is not\ncreated and only one attribute is retrieved from the O.S.). The attributes are\ndescribed as follows; attribute mode is a string, all the others are numbers,\nand the time related attributes use the same time reference of os.time: dev:\non Unix systems, this represents the device that the inode resides on. On\nWindows systems, represents the drive number of the disk containing the file\nino: on Unix systems, this represents the inode number. On Windows systems\nthis has no meaning mode: string representing the associated protection mode\n(the values could be file, directory, link, socket, named pipe, char device,\nblock device or other) nlink: number of hard links to the file uid: user-id\nof owner (Unix only, always 0 on Windows) gid: group-id of owner (Unix only,\nalways 0 on Windows) rdev: on Unix systems, represents the device type, for\nspecial file inodes. On Windows systems represents the same as dev access:\ntime of last access modification: time of last data modification change:\ntime of last file status change size: file size, in bytes blocks: block\nallocated for file; (Unix only) blksize: optimal file system I/O blocksize;\n(Unix only)  This function uses stat internally thus if the given filepath\nis a symbolic link, it is followed (if it points to another link the chain is\nfollowed recursively) and the information is about the file it refers to. To\nobtain information about the link itself, see function lfs.symlinkattributes.\n
auto_c_active buffer.auto_c_active(buffer)\nIs there an auto-completion list visible?\n@return bool\n
auto_c_auto_hide buffer.auto_c_auto_hide [bool]\nWhether or not autocompletion is hidden automatically when nothing matches. By\ndefault, the list is cancelled if there are no viable matches (the user has\ntyped characters that no longer match a list entry).\n
auto_c_cancel buffer.auto_c_cancel(buffer)\nRemove the auto-completion list from the screen. A set of characters that\nwill cancel autocompletion can be specified with `buffer:auto_c_stops()`.\n@param buffer The global buffer.\n
auto_c_cancel_at_start buffer.auto_c_cancel_at_start [bool]\nWhether auto-completion is cancelled by backspacing to a position before\nwhere the box was created. If `false`, the list is not cancelled until the\ncaret moves before the first character of the word being completed. should\nbe cancelled if the user backspaces to a position before where it was created.\n
auto_c_choose_single buffer.auto_c_choose_single [bool]\nWhether a single item auto-completion list automatically choose the item. The\ndefault is to display the list even if there is only a single item.\n
auto_c_complete buffer.auto_c_complete(buffer)\nUser has selected an item so remove the list and insert the selection. This\nhas the same effect as the tab key.\n@param buffer The global buffer.\n
auto_c_drop_rest_of_word buffer.auto_c_drop_rest_of_word [bool]\nWhether or not autocompletion deletes any word characters after the inserted\ntext upon completion. The default is `false`.\n
auto_c_fill_ups buffer.auto_c_fill_ups [string]\nA set of characters that when typed will cause the autocompletion to choose\nthe selected item. By default, no fillup characters are set. (Write-only)\n
auto_c_get_current buffer.auto_c_get_current(buffer)\nGet currently selected item position in the auto-completion list.\n@param buffer The global buffer.\n@return number\n
auto_c_get_current_text buffer.auto_c_get_current_text(buffer)\nGet currently selected item text in the auto-completion list.\n@param buffer The global buffer.\n@return string\n
auto_c_ignore_case buffer.auto_c_ignore_case [bool]\nWhether case is significant when performing auto-completion searches. By\ndefault, matching of characters to list members is case sensitive.\n
auto_c_max_height buffer.auto_c_max_height [number]\nThe maximum height, in rows, of auto-completion and user lists. The default\nis 5 rows.\n
auto_c_max_width buffer.auto_c_max_width [number]\nThe maximum width, in characters, of auto-completion and user lists. Set to\n`0` to autosize to fit longest item, which is the default.\n
auto_c_pos_start buffer.auto_c_pos_start(buffer)\nRetrieve the position of the caret when the auto-completion list was displayed.\n@param buffer The global buffer.\n@return number\n
auto_c_select buffer.auto_c_select(buffer, string)\nSelect the item in the auto-completion list that starts with a string. By\ndefault, comparisons are case sensitive, but this can change with\n`buffer.auto_c_ignore_case`.\n@param buffer The global buffer.\n
auto_c_separator buffer.auto_c_separator [number]\nThe auto-completion list separator character byte. The default is the space\ncharacter.\n
auto_c_show buffer.auto_c_show(buffer, len_entered, item_list)\nDisplay an auto-completion list.\n@param len_entered The number of characters before the caret used to provide\nthe context.\n@param item_list List of words separated by separator characters (initially\nspaces). The list of words should be in sorted order.\n
auto_c_stops buffer.auto_c_stops(buffer, chars)\nDefine a set of characters that when typed cancel the auto-completion list.\n@param buffer The global buffer.\n@param chars String list of characters. This list is empty by default.\n
auto_c_type_separator buffer.auto_c_type_separator [number]\nThe auto-completion list type-separator character byte. The default is\n`'?'`. Autocompletion list items may display an image as well as text. Each\nimage is first registered with an integer type. Then this integer is included\nin the text of the list separated by a `?` from the text.\n
autocomplete_word _M.textadept.editing.autocomplete_word(word_chars)\nPops up an autocompletion list for the current word based on other words in\nthe document.\n@param word_chars String of chars considered to be part of words.\n@return `true` if there were completions to show; `false` otherwise.\n
back_space_un_indents buffer.back_space_un_indents [bool]\nWhether a backspace pressed when caret is within indentation unindents.\n
back_tab buffer.back_tab(buffer)\nDedent the selected lines.\n@param buffer The global buffer.\n
band bit32.band(...)\nReturns the bitwise "and" of its operands.\n
begin_undo_action buffer.begin_undo_action(buffer)\nStart a sequence of actions that is undone and redone as a unit. May be nested.\n@param buffer The global buffer.\n
bit32 _G.bit32 [module]\nLua bit32 module.\n
block_comment _M.textadept.editing.block_comment(comment)\nBlock comments or uncomments code with a given comment string.\n@param comment The comment string inserted or removed from the beginning of\neach line in the selection.\n
bnot bit32.bnot(x)\nReturns the bitwise negation of `x`. For any integer `x`, the following\nidentity holds:  assert(bit32.bnot(x) == (-1 - x) % 2^32)\n
boms io.boms [table]\nList of byte-order marks (BOMs).\n
bookmarks _M.textadept.bookmarks [module]\nBookmarks for the textadept module.\n
bor bit32.bor(...)\nReturns the bitwise "or" of its operands.\n
brace_bad_light buffer.brace_bad_light(buffer, pos)\nHighlight the character at a position indicating there is no matching brace.\n@param buffer The global buffer.\n@param pos The position or -1 to remove the highlight.\n
brace_bad_light_indicator buffer.brace_bad_light_indicator(buffer, use_indicator, indic_num)\nUse specified indicator to highlight non matching brace instead of changing\nits style.\n@param buffer The global buffer.\n@param use_indicator Use an indicator.\n@param indic_num The indicator number.\n
brace_highlight buffer.brace_highlight(buffer, pos1, pos2)\nHighlight the characters at two positions. If indent guides are enabled,\nthe indent that corresponds with the brace can be highlighted by\nlocating the column with `buffer.column` and highlight the indent with\n`buffer.highlight_guide`.\n@param buffer The global buffer.\n@param pos1 The first position.\n@param pos2 The second position.\n
brace_highlight_indicator buffer.brace_highlight_indicator(buffer, use_indicator, indic_num)\nUse specified indicator to highlight matching braces instead of changing\ntheir style.\n@param buffer The global buffer.\n@param use_indicator Use an indicator.\n@param indic_num The indicator number.\n
brace_match buffer.brace_match(buffer, pos)\nFind the position of a matching brace or `-1` if no match. The brace\ncharacters handled are `(`, `)`, `[`, `]`, `{`, `}`, `<`, and `>`. The search\nis forwards from an opening brace and backwards from a closing brace. A match\nonly occurs if the style of the matching brace is the same as the starting\nbrace or the matching brace is beyond the end of styling. Nested braces are\nhandled correctly.\n@param buffer The global buffer.\n@param pos The position.\n@return number.\n
braces _M.textadept.editing.braces [table]\nHighlighted brace characters. Keys are lexer language names and values\nare tables of characters that count as brace characters. This table can be\npopulated by language-specific modules. The defaults are '(', ')', '[', ']',\n'{', and '}'.\n
btest bit32.btest(...)\nReturns a boolean signaling whether the bitwise "and" of its operands is\ndifferent from zero.\n
buffer _G.buffer [module]\nThe current buffer in the current view. It also represents the structure of\nany buffer table in `_G._BUFFER`.\n
buffer view.buffer [table]\nThe buffer this view contains. (Read-only)\n
buffered_draw buffer.buffered_draw [bool]\nWhether drawing is buffered. If drawing is buffered then each line of text\nis drawn into a bitmap buffer before drawing it to the screen to avoid\nflicker. The default is for drawing to be buffered. first or directly onto\nthe screen.\n
byte string.byte(s [, i [, j]])\nReturns the internal numerical codes of the characters `s[i]`, `s[i+1]`,\n..., `s[j]`. The default value for `i` is 1; the default value for `j`\nis `i`. These indices are corrected following the same rules of function\n`string.sub`.  Numerical codes are not necessarily portable across platforms.\n
call_tip_active buffer.call_tip_active(buffer)\nIs there an active call tip?\n@param buffer The global buffer.\n@return bool\n
call_tip_back buffer.call_tip_back [number]\nThe background color for the call tip in `0xBBGGRR` format. (Write-only)\n
call_tip_cancel buffer.call_tip_cancel(buffer)\nRemove the call tip from the screen. Call tips are also removed if any\nkeyboard commands that are not compatible with editing the argument list of\na function are used.\n@param buffer The global buffer.\n
call_tip_fore buffer.call_tip_fore [number]\nThe foreground color for the call tip in `0xBBGGRR` format. (Write-only)\n
call_tip_fore_hlt buffer.call_tip_fore_hlt [number]\nThe foreground color for the highlighted part of the call tip in `0xBBGGRR`\nformat. (Write-only)\n
call_tip_pos_start buffer.call_tip_pos_start(buffer)\nRetrieve the position where the caret was before displaying the call tip.\n@param buffer The global buffer.\n@return number\n
call_tip_position buffer.call_tip_position [boolean]\nThe position of calltip, above or below text. By default the calltip is\ndisplayed below the text. Setting to `true` will display it above the text.\n
call_tip_set_hlt buffer.call_tip_set_hlt(buffer, start_pos, end_pos)\nHighlights a segment of a call tip.\n@param buffer The global buffer.\n@param start_pos The start position.\n@param end_pos The end position.\n
call_tip_show buffer.call_tip_show(buffer, pos, text)\nShow a call tip containing a definition near position pos. The call tip text\nis aligned to start 1 line below this character unless up and/or down arrows\nhave been included in the call tip text in which case the tip is aligned to\nthe right-hand edge of the rightmost arrow. The assumption is that the text\nstarts with something like `"\001 1 of 3 \002"`.\n@param buffer The global buffer.\n@param pos The position.\n@param text The text.\n
call_tip_use_style buffer.call_tip_use_style [number]\nEnable use of `_SCINTILLA.constants.STYLE_CALLTIP` and set call tip tab\nsize in pixels. If the tab size is less than `1`, Tab characters are not\ntreated specially.\n
can_paste buffer.can_paste(buffer)\nWill a paste succeed?\n@param buffer The global buffer.\n@return bool\n
can_redo buffer.can_redo(buffer)\nAre there any redoable actions in the undo history?\n@param buffer The global buffer.\n@return bool\n
can_undo buffer.can_undo(buffer)\nAre there any undoable actions in the undo history?\n@param buffer The global buffer.\n@return bool\n
cancel buffer.cancel(buffer)\nCancel any modes such as call tip or auto-completion list display.\n@param buffer The global buffer.\n
caret_fore buffer.caret_fore [number]\nThe foreground color of the caret in `0xBBGGRR` format.\n
caret_line_back buffer.caret_line_back [number]\nThe color of the background of the line containing the caret in `0xBBGGRR`\nformat.\n
caret_line_back_alpha buffer.caret_line_back_alpha [number]\nThe background alpha of the caret line. Alpha ranges from `0` (transparent)\nto `255` (opaque) or `256` for no alpha.\n
caret_line_visible buffer.caret_line_visible [bool]\nWhether the background of the line containing the caret is in a different\ncolor.\n
caret_period buffer.caret_period [number]\nThe time in milliseconds that the caret is on and off. Setting the period to\n`0` stops the caret blinking. The default value is 500 milliseconds.\n
caret_sticky buffer.caret_sticky [number]\nThe caret preferred x position changing when the user types.\n    * `_SCINTILLA.constants.SC_CARETSTICKY_OFF` (0): All text changes (and\n      all caret position changes) will remember the caret's new horizontal\n      position when moving to different lines. This is the default.\n    * `_SCINTILLA.constants.SC_CARETSTICKY_ON` (1): The only thing which\n      will cause the editor to remember the horizontal caret position is\n      moving the caret with mouse or keyboard (left/right arrow keys,\n      home/end keys, etc).\n    * `_SCINTILLA.constants.SC_CARETSTICKY_WHITESPACE` (2): The caret acts\n      like sticky off except under one special case; when space or tab\n      characters are inserted. (Including pasting *only space/tabs* --\n      undo, redo, etc. do not exhibit this behavior..).\n\n
caret_style buffer.caret_style [number]\nThe style of the caret to be drawn.\n    * `_SCINTILLA.constants.CARETSTYLE_INVISIBLE` (0): Not draw the caret\n      at all.\n    * `_SCINTILLA.constants.CARETSTYLE_LINE` (1): A line caret. This is the\n      default value.\n    * `_SCINTILLA.constants.CARETSTYLE_BLOCK` (2): A block caret.\n\n
caret_width buffer.caret_width [number]\nThe width of the insert mode caret in pixels. Can be `0`, `1`, `2` or `3`\npixels. The default width is 1 pixel. This setting only affects the width\nof the cursor when the cursor style is set to line caret mode, it does not\naffect the width for a block caret.\n
ceil math.ceil(x)\nReturns the smallest integer larger than or equal to `x`.\n
change_lexer_state buffer.change_lexer_state(buffer, start_pos, end_pos)\nIndicate that the internal state of a lexer has changed over a range and\ntherefore there may be a need to redraw.\n@param buffer The global buffer.\n@param start_pos The start position.\n@param end_pos The end position.\n
char string.char(···)\nReceives zero or more integers. Returns a string with length equal to the\nnumber of arguments, in which each character has the internal numerical code\nequal to its corresponding argument.  Numerical codes are not necessarily\nportable across platforms.\n
char_at buffer.char_at [table]\nTable of character bytes at positions in the document starting at\nzero. (Read-only)\n
char_left buffer.char_left(buffer)\nMove caret left one character.\n@param buffer The global buffer.\n
char_left_extend buffer.char_left_extend(buffer)\nMove caret left one character extending selection to new caret position.\n@param buffer The global buffer.\n
char_left_rect_extend buffer.char_left_rect_extend(buffer)\nMove caret left one character, extending rectangular selection to new caret\nposition.\n@param buffer The global buffer.\n
char_matches _M.textadept.editing.char_matches [table]\nAuto-matched characters. Used for auto-matching parentheses, brackets,\nbraces, quotes, etc. Keys are lexer language names and values are tables\nof character match pairs. This table can be populated by language-specific\nmodules. The defaults are '()', '[]', '{}', '''', and '""'.\n
char_position_from_point buffer.char_position_from_point(buffer, x, y)\nFind the position of a character from a point within the window.\n@param buffer The global buffer.\n@return number\n
char_position_from_point_close buffer.char_position_from_point_close(buffer, x, y)\nFind the position of a character from a point within the window. Return `-1`\nif not close to text.\n@param buffer The global buffer.\n@return number\n
char_right buffer.char_right(buffer)\nMove caret right one character.\n@param buffer The global buffer.\n
char_right_extend buffer.char_right_extend(buffer)\nMove caret right one character extending selection to new caret position.\n@param buffer The global buffer.\n
char_right_rect_extend buffer.char_right_rect_extend(buffer)\nMove caret right one character, extending rectangular selection to new\ncaret position.\n@param buffer The global buffer.\n
chdir lfs.chdir(path)\nChanges the current working directory to the given path.  Returns true in\ncase of success or nil plus an error string.\n
check_global buffer.check_global(buffer)\nChecks whether the given buffer is the global one. If not, throws an\nerror indicating so. It is necessary to call this at the top of all buffer\nfunctions to avoid unexpected behavior since most buffer functions operate on\n`_G.buffer`, which is not necessarily the given one.\n@param buffer The buffer to check.\n
choose_caret_x buffer.choose_caret_x(buffer)\nSet the last x chosen value to be the caret x position. The view remembers\nthe x value of the last position horizontally moved to explicitly by the\nuser and this value is then used when moving vertically such as by using the\nup and down keys. This function sets the current x position of the caret as\nthe remembered value.\n@param buffer The global buffer.\n
class_definition _M.textadept.adeptsense.syntax.class_definition\nA Lua pattern representing the language's class definition syntax. The first\ncapture returned must be the class name. A second, optional capture contains\nthe class' superclass (if any). If no completions are found for the class\nname, completions for the superclass are shown (if any). Completions will\nnot be shown for both a class and superclass unless defined in a previously\nloaded ctags file. Also, multiple superclasses cannot be recognized by this\npattern; use a ctags file instead. Defaults to `'class%s+([%w_]+)'`.\n
clear _M.textadept.adeptsense.clear(sense)\nClears an Adeptsense. This is necessary for loading a new ctags file or\ncompletions from a different project.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n
clear _M.textadept.bookmarks.clear()\nClears all bookmarks in the current buffer.\n
clear buffer.clear(buffer)\nClear the selection.\n@param buffer The global buffer.\n
clear_all buffer.clear_all(buffer)\nDelete all text in the document.\n@param buffer The global buffer.\n
clear_all_cmd_keys buffer.clear_all_cmd_keys(buffer)\nDrop all key mappings.\n@param buffer The global buffer.\n
clear_document_style buffer.clear_document_style(buffer)\nSet all style bytes to `0`, remove all folding information.\n@param buffer The global buffer.\n
clear_registered_images buffer.clear_registered_images(buffer)\nClear all the registered XPM images.\n@param buffer The global buffer.\n
clear_selections buffer.clear_selections(buffer)\nClear selections to a single empty stream selection.\n@param buffer The global buffer.\n
clipboard_text gui.clipboard_text [string]\nThe text on the clipboard. (Read-only)\n
clock os.clock()\nReturns an approximation of the amount in seconds of CPU time used by the\nprogram.\n
close buffer.close(buffer)\nCloses the current buffer.\n@param buffer The global buffer. If the buffer is dirty, the user is prompted\nto continue. The buffer is not saved automatically. It must be done manually.\n
close file:close()\nCloses `file`. Note that files are automatically closed when their handles are\ngarbage collected, but that takes an unpredictable amount of time to happen.\nWhen closing a file handle created with `io.popen`, `file:close` returns\nthe same values returned by `os.execute`.\n
close io.close([file])\nEquivalent to `file:close()`. Without a `file`, closes the default output file.\n
close_all io.close_all()\nCloses all open buffers. If any buffer is dirty, the user is prompted to\ncontinue. No buffers are saved automatically. They must be saved manually.\n@usage io.close_all()\n@return true if user did not cancel.\n
cntrl lexer.cntrl\nMatches any control character (`0`..`31`).\n
code_page buffer.code_page [number]\nThe code page used to interpret the bytes of the document as characters. The\n`_SCINTILLA.constants.SC_CP_UTF8` value can be used to enter Unicode mode.\n
collectgarbage _G.collectgarbage([opt [, arg]])\nThis function is a generic interface to the garbage collector. It\nperforms different functions according to its first argument, `opt`:\n"collect": performs a full garbage-collection cycle. This is the default\noption. "stop": stops automatic execution of the garbage collector. "restart":\nrestarts automatic execution of the garbage collector. "count": returns\nthe total memory in use by Lua (in Kbytes) and a second value with the\ntotal memory in bytes modulo 1024. The first value has a fractional part,\nso the following equality is always true:  k, b = collectgarbage("count")\nassert(k*1024 == math.floor(k)*1024 + b)  (The second result is useful\nwhen Lua is compiled with a non floating-point type for numbers.) "step":\nperforms a garbage-collection step. The step "size" is controlled by `arg`\n(larger values mean more steps) in a non-specified way. If you want to control\nthe step size you must experimentally tune the value of `arg`. Returns true\nif the step finished a collection cycle. "setpause": sets `arg` as the new\nvalue for the *pause* of the collector (see §2.5). Returns the previous\nvalue for *pause*. "setstepmul": sets `arg` as the new value for the *step\nmultiplier* of the collector (see §2.5). Returns the previous value for\n*step*. "isrunning": returns a boolean that tells whether the collector\nis running (i.e., not stopped). "generational": changes the collector to\ngenerational mode. This is an experimental feature (see §2.5). "incremental":\nchanges the collector to incremental mode. This is the default mode.\n
color lexer.color(r, g, b)\nCreates a Scintilla color.\n@param r The string red component of the hexadecimal color.\n@param g The string green component of the color.\n@param b The string blue component of the color.\n@usage local red = color('FF', '00', '00')\n
colors lexer.colors [table]\nTable of common colors for a theme. This table should be redefined in\neach theme.\n
colourise buffer.colourise(buffer, start_pos, end_pos)\nColorise a segment of the document using the current lexing language.\n@param buffer The global buffer.\n@param start_pos The start position.\n@param end_pos The end position or `-1` to style from `start_pos` to the\nend of the document.\n
column buffer.column [table]\nTable of column numbers, taking tab widths into account, for positions\nstarting from zero. (Read-only)\n
command_entry gui.command_entry [module]\nTextadept's Command entry.\n
comment_string _M.textadept.editing.comment_string [table]\nComment strings for various lexer languages. Used for the `block_comment()`\nfunction. Keys are lexer language names and values are the line comment\ndelimiters for the language. This table is typically populated by\nlanguage-specific modules.\n@see block_comment\n
compile _M.textadept.run.compile()\nCompiles the file as specified by its extension in the `compile_command` table.\n@see compile_command\n
compile_command _M.textadept.run.compile_command [table]\nFile extensions and their associated 'compile' actions. Each key is a file\nextension whose value is a either a command line string to execute or a\nfunction returning one. This table is typically populated by language-specific\nmodules.\n
complete _M.textadept.adeptsense.complete(sense, only_fields, only_functions)\nShows an autocompletion list for the symbol behind the caret.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param only_fields If `true`, returns list of only fields; defaults to `false`.\n@param only_functions If `true`, returns list of only functions; defaults to\n`false1.\n@return `true` on success or `false`.\n@see get_symbol\n@see get_completions\n
complete_symbol _M.textadept.adeptsense.complete_symbol()\nCompletes the symbol at the current position based on the current lexer's\nAdeptsense. This should be called by key commands and menus instead of\n`complete()`.\n
completions _M.textadept.adeptsense.completions [table]\nContains lists of possible completions for known symbols. Each symbol key\nhas a table value that contains a list of field completions with a `fields`\nkey and a list of functions completions with a `functions` key. This table\nis normally populated by `load_ctags()`, but can also be set by the user.\n
concat table.concat(list [, sep [, i [, j]]])\nGiven a list where all elements are strings or numbers, returns\n`list[i]..sep..list[i+1] ··· sep..list[j]`. The default value for `sep`\nis the empty string, the default for `i` is 1, and the default for `j` is\n`#list`. If `i` is greater than `j`, returns the empty string.\n
config package.config\nA string describing some compile-time configurations for packages. This\nstring is a sequence of lines:\n  The first line is the directory separator string. Default is '`\`' for\n  Windows and '`/`' for all other systems.\n  The second line is the character that separates templates in a path.\n  Default is '`;`'.\n  The third line is the string that marks the substitution points in a\n  template. Default is '`?`'.\n  The fourth line is a string that, in a path in Windows, is replaced by\n  the executable's directory. Default is '`!`'.\n  The fifth line is a mark to ignore all text before it when building the\n  `luaopen_` function name. Default is '`-`'.\n\n
connect events.connect(event, f, index)\nAdds a handler function to an event.\n@param event The string event name. It is arbitrary and need not be defined\nanywhere.\n@param f The Lua function to add.\n@param index Optional index to insert the handler into.\n@return Index of handler.\n@see disconnect\n
constants _SCINTILLA.constants [table]\nScintilla constants.\n
context_menu _M.textadept.menu.context_menu [table]\nContains the default right-click context menu.\n
context_menu gui.context_menu\nA GTK menu defining the editor's context menu.\n
contracted_fold_next buffer.contracted_fold_next(buffer, line_start)\nFind the next line at or after line_start that is a contracted fold header\nline. Return `-1` when no more lines.\n@param buffer The global buffer.\n@param line_start The start line number.\n@return number\n
control_char_symbol buffer.control_char_symbol [number]\nThe way control characters are displayed. If less than `32`, keep the rounded\nrectangle as ASCII mnemonics. Otherwise, use the given character byte. The\ndefault value is `0`.\n
control_structure_patterns _M.lua.control_structure_patterns [table]\nPatterns for auto 'end' completion for control structures.\n@see try_to_autocomplete_end\n
control_structure_patterns _M.ruby.control_structure_patterns [table]\nPatterns for auto 'end' completion for control structures.\n@see try_to_autocomplete_end\n
convert_eo_ls buffer.convert_eo_ls(buffer, mode)\nConverts all line endings in the document to one mode.\n@param buffer The global buffer.\n@param mode The line ending mode. Valid values are:\n`_SCINTILLA.constants.SC_EOL_CRLF` (0), `_SCINTILLA.constants.SC_EOL_CR\n(1)`, or `_SCINTILLA.constants.SC_EOL_LF (2)`.\n
convert_indentation _M.textadept.editing.convert_indentation()\nConverts indentation between tabs and spaces.\n
copy buffer.copy(buffer)\nCopy the selection to the clipboard.\n@param buffer The buffer\n
copy_allow_line buffer.copy_allow_line(buffer)\nCopy the selection, if selection empty copy the line with the caret.\n@param buffer The global buffer.\n
copy_range buffer.copy_range(buffer, start_pos, end_pos)\nCopy a range of text to the clipboard. Positions are clipped into the document.\n@param buffer The global buffer.\n@param start_pos The start position.\n@param end_pos The end position.\n
copy_text buffer.copy_text(buffer, text)\nCopy argument text to the clipboard.\n@param buffer The global buffer.\n@param text The text.\n
coroutine _G.coroutine [module]\nLua coroutine module.\n
cos math.cos(x)\nReturns the cosine of `x` (assumed to be in radians).\n
cosh math.cosh(x)\nReturns the hyperbolic cosine of `x`.\n
count_characters buffer.count_characters(buffer, start_pos, end_pos)\nCount characters between two positions.\n@return number\n
cpath package.cpath\nThe path used by `require` to search for a C loader. Lua initializes the C path\n`package.cpath` in the same way it initializes the Lua path `package.path`,\nusing the environment variable `LUA_CPATH_5_2` or the environment variable\n`LUA_CPATH` or a default path defined in `luaconf.h`.\n
cpp _G.keys.cpp [table]\nContainer for C/C++-specific key commands.\n
cpp _G.snippets.cpp [table]\nContainer for C/C++-specific snippets.\n
cpp _M.cpp [module]\nThe cpp module. It provides utilities for editing C/C++ code. User tags\nare loaded from _USERHOME/modules/cpp/tags and user apis are loaded from\n_USERHOME/modules/cpp/api.\n
create coroutine.create(f)\nCreates a new coroutine, with body `f`. `f` must be a Lua function. Returns\nthis new coroutine, an object with type `"thread"`.\n
css _G.keys.css [table]\nContainer for CSS-specific key commands.\n
css _G.snippets.css [table]\nContainer for CSS-specific snippets.\n
css _M.css [module]\nThe css module. It provides utilities for editing CSS code. User tags\nare loaded from _USERHOME/modules/css/tags and user apis are loaded from\n_USERHOME/modules/css/api.\n
ctags_kinds _M.textadept.adeptsense.ctags_kinds [table]\nContains a map of ctags kinds to Adeptsense kinds. Recognized kinds are\n`'functions'`, `'fields'`, and `'classes'`. Classes are quite simply containers\nfor functions and fields so Lua modules would count as classes. Any other\nkinds will be passed to `handle_ctag()` for user-defined handling.\n@see handle_ctag\n
current_pos buffer.current_pos [number]\nThe position of the caret. When setting, the caret is not scrolled into view.\n
currentdir lfs.currentdir()\nReturns a string with the current working directory or nil plus an error\nstring.\n
cursor buffer.cursor [number]\nThe cursor type.\n    * `_SCINTILLA.constants.SC_CURSORNORMAL` (-1): The normal cursor is\n      displayed.\n    * `_SCINTILLA.constants.SC_CURSORWAIT` (4): The wait cursor is\n      displayed when the mouse is over the view.\n\n
cut buffer.cut(buffer)\nCut the selection to the clipboard.\n@param buffer The global buffer.\n
date os.date([format [, time]])\nReturns a string or a table containing date and time, formatted according\nto the given string `format`.  If the `time` argument is present, this is\nthe time to be formatted (see the `os.time` function for a description of\nthis value). Otherwise, `date` formats the current time.  If `format` starts\nwith '`!`', then the date is formatted in Coordinated Universal Time. After\nthis optional character, if `format` is the string "`*t`", then `date`\nreturns a table with the following fields: `year` (four digits), `month`\n(1-12), `day` (1-31), `hour` (0-23), `min` (0-59), `sec` (0-61), `wday`\n(weekday, Sunday is 1), `yday` (day of the year), and `isdst` (daylight\nsaving flag, a boolean). This last field may be absent if the information is\nnot available.  If `format` is not "`*t`", then `date` returns the date as a\nstring, formatted according to the same rules as the C function `strftime`.\nWhen called without arguments, `date` returns a reasonable date and time\nrepresentation that depends on the host system and on the current locale\n(that is, `os.date()` is equivalent to `os.date("%c")`).  On some systems,\nthis function may be not thread safe.\n
debug _G.debug [module]\nLua debug module.\n
debug debug.debug()\nEnters an interactive mode with the user, running each string that the user\nenters. Using simple commands and other debug facilities, the user can inspect\nglobal and local variables, change their values, evaluate expressions, and so\non. A line containing only the word `cont` finishes this function, so that\nthe caller continues its execution.  Note that commands for `debug.debug`\nare not lexically nested within any function and so have no direct access\nto local variables.\n
dec_num lexer.dec_num\nMatches a decimal number.\n
deg math.deg(x)\nReturns the angle `x` (given in radians) in degrees.\n
del_line_left buffer.del_line_left(buffer)\nDelete back from the current position to the start of the line.\n@param buffer The global buffer.\n
del_line_right buffer.del_line_right(buffer)\nDelete forwards from the current position to the end of the line.\n@param buffer The global buffer.\n
del_word_left buffer.del_word_left(buffer)\nDelete the word to the left of the caret.\n@param buffer The global buffer.\n
del_word_right buffer.del_word_right(buffer)\nDelete the word to the right of the caret.\n@param buffer The global buffer.\n
del_word_right_end buffer.del_word_right_end(buffer)\nDelete the word to the right of the caret, but not the trailing non-word\ncharacters.\n@param buffer The global buffer.\n
delete buffer.delete(buffer)\nDeletes the current buffer. WARNING: this function should NOT be called\nvia scripts. `_G.io` provides a `close()` function for buffers to prompt for\nconfirmation if necessary; this function does not. Genrates a `BUFFER_DELETED`\nevent.\n@param buffer The global buffer.\n
delete_back buffer.delete_back(buffer)\nDelete the selection or if no selection, the character before the caret.\n@param buffer The global buffer.\n
delete_back_not_line buffer.delete_back_not_line(buffer)\nDelete the selection or if no selection, the character before the caret. Will\nnot delete the character before at the start of a line.\n
delimited_range lexer.delimited_range(chars, escape, end_optional, balanced, forbidden)\nCreates an LPeg pattern that matches a range of characters delimitted by a\nspecific character(s). This can be used to match a string, parenthesis, etc.\n@param chars The character(s) that bound the matched range.\n@param escape Optional escape character. This parameter may be omitted, nil,\nor the empty string.\n@param end_optional Optional flag indicating whether or not an ending delimiter\nis optional or not. If true, the range begun by the start delimiter matches\nuntil an end delimiter or the end of the input is reached.\n@param balanced Optional flag indicating whether or not a balanced range is\nmatched, like `%b` in Lua's `string.find`. This flag only applies if `chars`\nconsists of two different characters (e.g. '()').\n@param forbidden Optional string of characters forbidden in a delimited\nrange. Each character is part of the set.\n@usage local sq_str_noescapes = delimited_range("'")\n@usage local sq_str_escapes = delimited_range("'", '\\', true)\n@usage local unbalanced_parens = delimited_range('()', '\\', true)\n@usage local balanced_parens = delimited_range('()', '\\', true, true)\n
dialog gui.dialog(kind, ...)\nDisplays a gcocoadialog of a specified type with the given string\narguments. Each argument is like a string in Lua's `arg` table. Tables of\nstrings are allowed as arguments and are expanded in place. This is useful\nfor filteredlist dialogs with many items.\n@param kind The kind of gcocoadialog.\n@param ... Parameters to the gcocoadialog.\n@return string gcocoadialog result.\n
difftime os.difftime(t2, t1)\nReturns the number of seconds from time `t1` to time `t2`. In POSIX, Windows,\nand some other systems, this value is exactly `t2`*-*`t1`.\n
digit lexer.digit\nMatches any digit (`0-9`).\n
dir lfs.dir(path)\nLua iterator over the entries of a given directory. Each time the iterator\nis called with dir_obj it returns a directory entry's name as a string,\nor nil if there are no more entries. You can also iterate by calling\ndir_obj:next(), and explicitly close the directory before the iteration\nfinished with dir_obj:close(). Raises an error if path is not a directory.\n
direct_function buffer.direct_function [number]\nA pointer to a function that processes messages for this view. (Read-only)\n
direct_pointer buffer.direct_pointer [number]\nA pointer value to use as the first argument when calling the function\nreturned by direct_function. (Read-only)\n
dirty buffer.dirty [bool]\nFlag indicating whether or not the buffer has been modified since it was\nlast saved.\n
disconnect events.disconnect(event, index)\nDisconnects a handler function from an event.\n@param event The string event name.\n@param index Index of the handler (returned by `events.connect()`).\n@see connect\n
doc_line_from_visible buffer.doc_line_from_visible(buffer)\nFind the document line of a display line taking hidden lines into account.\n@param buffer The global buffer.\n@return number\n
docstatusbar_text gui.docstatusbar_text [string]\nThe text displayed by the doc statusbar. (Write-only)\n
document_end buffer.document_end(buffer)\nMove caret to last position in document.\n@param buffer The global buffer.\n
document_end_extend buffer.document_end_extend(buffer)\nMove caret to last position in document extending selection to new caret\nposition.\n@param buffer The global buffer.\n
document_start buffer.document_start(buffer)\nMove caret to first position in document.\n@param buffer The global buffer.\n
document_start_extend buffer.document_start_extend(buffer)\nMove caret to first position in document extending selection to new caret\nposition.\n@param buffer The global buffer.\n
dofile _G.dofile([filename])\nOpens the named file and executes its contents as a Lua chunk. When called\nwithout arguments, `dofile` executes the contents of the standard input\n(`stdin`). Returns all values returned by the chunk. In case of errors,\n`dofile` propagates the error to its caller (that is, `dofile` does not run\nin protected mode).\n
dump string.dump(function)\nReturns a string containing a binary representation of the given function,\nso that a later `load` on this string returns a copy of the function (but\nwith new upvalues).\n
edge_colour buffer.edge_colour [number]\nThe color used in edge indication in `0xBBGGRR` format.\n
edge_column buffer.edge_column [number]\nThe column number which text should be kept within.\n
edge_mode buffer.edge_mode [number]\nThe edge highlight mode.\n    * `_SCINTILLA.constants.EDGE_NONE` (0): Long lines are not marked. This\n      is the default state.\n    * `_SCINTILLA.constants.EDGE_LINE` (1): A vertical line is drawn at the\n      column number set by `buffer.edge_column`.\n    * `_SCINTILLA.constants.EDGE_BACKGROUND` (2): The background color of\n      characters after the column limit is changed to the color set by\n      `buffer.edge_colour`.\n\n
edit_toggle_overtype buffer.edit_toggle_overtype(buffer)\nSwitch from insert to overtype mode or the reverse.\n@param buffer The global buffer.\n
editing _M.textadept.editing [module]\nEditing commands for the textadept module.\n
embed_lexer lexer.embed_lexer(parent, child, start_rule, end_rule)\nEmbeds a child lexer language in a parent one.\n@param parent The parent lexer.\n@param child The child lexer.\n@param start_rule The token that signals the beginning of the embedded lexer.\n@param end_rule The token that signals the end of the embedded lexer.\n@usage embed_lexer(M, css, css_start_rule, css_end_rule)\n@usage embed_lexer(html, M, php_start_rule, php_end_rule)\n@usage embed_lexer(html, ruby, ruby_start_rule, rule_end_rule)\n
emit events.emit(event, ...)\nCalls all handlers for the given event in sequence (effectively "generating"\nthe event). If `true` or `false` is explicitly returned by any handler,\nthe event is not propagated any further; iteration ceases.\n@param event The string event name.\n@param ... Arguments passed to the handler.\n@return `true` or `false` if any handler explicitly returned such; nil\notherwise.\n
empty_undo_buffer buffer.empty_undo_buffer(buffer)\nDelete the undo history. It also sets the save point to the start of the\nundo buffer, so the document will appear to be unmodified.\n@param buffer The global buffer.\n
enclose _M.textadept.editing.enclose(left, right)\nEncloses text within a given pair of strings. If text is selected, it is\nenclosed. Otherwise, the previous word is enclosed.\n@param left The left part of the enclosure.\n@param right The right part of the enclosure.\n
encoded_from_utf8 buffer.encoded_from_utf8(buffer, string)\nTranslates a UTF8 string into the document encoding. Return the length of\nthe result in bytes. On error return `0`.\n@param buffer The global buffer.\n@param string The string.\n@return number\n
encoding buffer.encoding [string or nil]\nThe encoding of the file on the hard disk. It will be `nil` if the file is\na binary file.\n
encoding_bom buffer.encoding_bom [string]\nThe byte-order mark of the file encoding (if any).\n
end_at_last_line buffer.end_at_last_line [bool]\nWhether the maximum scroll position has the last line at the bottom of the\nview. If `false`, allows scrolling one page below the last line. The default\nvalue is `true`.\n
end_styled buffer.end_styled [number]\nThe position of the last correctly styled character. (Read-only)\n
end_undo_action buffer.end_undo_action(buffer)\nEnd a sequence of actions that is undone and redone as a unit.\n@param buffer The global buffer.\n
ensure_visible buffer.ensure_visible(buffer, line)\nEnsure a particular line is visible by expanding any header line hiding it.\n@param buffer The global buffer.\n@param line The line number.\n
ensure_visible_enforce_policy buffer.ensure_visible_enforce_policy(buffer, line)\nEnsure a particular line is visible by expanding any header line hiding it. Use\nthe currently set visibility policy to determine which range to display.\n@param buffer The global buffer.\n@param line The line number.\n
entry_text gui.command_entry.entry_text [string]\nThe text in the entry.\n
eol_mode buffer.eol_mode [number]\nThe current end of line mode.\n    * `_SCINTILLA.constants.SC_EOL_CRLF` (0): `CRLF`.\n    * `_SCINTILLA.constants.SC_EOL_CR` (1): `CR`.\n    * `_SCINTILLA.constants.SC_EOL_LF` (2): `LF`.\n\n
error _G.error(message [, level])\nTerminates the last protected function called and returns `message` as\nthe error message. Function `error` never returns.  Usually, `error` adds\nsome information about the error position at the beginning of the message,\nif the message is a string. The `level` argument specifies how to get the\nerror position. With level 1 (the default), the error position is where the\n`error` function was called. Level 2 points the error to where the function\nthat called `error` was called; and so on. Passing a level 0 avoids the\naddition of error position information to the message.\n
error_detail _M.textadept.run.error_detail [table]\nA table of error string details. Each entry is a table with the following\nfields: + `pattern`: The Lua pattern that matches a specific error string. +\n`filename`: The index of the Lua capture that contains the filename the\nerror occured in. + `line`: The index of the Lua capture that contains the\nline number the error occured on. + `message`: [Optional] The index of the\nLua capture that contains the error's message. A call tip will be displayed\nif a message was captured. When an error message is double-clicked, the\nuser is taken to the point of error. This table is usually populated by\nlanguage-specific modules.\n
events _G.events [module]\nTextadept's core event structure and handlers.\n
execute _M.textadept.run.execute(command, lexer)\nExecutes the command line parameter and prints the output to Textadept.\n@param command The command line string. It can have the following macros: +\n`%(filepath)`: The full path of the current file. + `%(filedir)`: The current\nfile's directory path. + `%(filename)`: The name of the file including\nextension. + `%(filename_noext)`: The name of the file excluding extension.\n
execute os.execute([command])\nThis function is equivalent to the C function `system`. It passes `command`\nto be executed by an operating system shell. Its first result is `true` if\nthe command terminated successfully, or `nil` otherwise. After this first\nresult the function returns a string and a number, as follows: "exit": the\ncommand terminated normally; the following number is the exit status of the\ncommand. "signal": the command was terminated by a signal; the following\nnumber is the signal that terminated the command.  When called without a\n`command`, `os.execute` returns a boolean that is true if a shell is available.\n
exit os.exit([code [, close]])\nCalls the C function `exit` to terminate the host program. If `code` is\n`true`, the returned status is `EXIT_SUCCESS`; if `code` is `false`, the\nreturned status is `EXIT_FAILURE`; if `code` is a number, the returned status\nis this number. The default value for `code` is `true`.  If the optional\nsecond argument `close` is true, closes the Lua state before exiting.\n
exp math.exp(x)\nReturns the value *e^x*.\n
extend lexer.extend\nMatches any ASCII extended character (`0`..`255`).\n
extensions _M.textadept.mime_types.extensions [table]\nFile extensions with their associated lexers.\n
extra_ascent buffer.extra_ascent [number]\nThe extra ascent, the maximum that any style extends above the baseline,\nadded to each line.\n
extra_descent buffer.extra_descent [number]\nThe extra descent, the maximum that any style extends below the baseline,\nadded to each line.\n
extract bit32.extract(n, field [, width])\nReturns the unsigned number formed by the bits `field` to `field + width\n- 1` from `n`. Bits are numbered from 0 (least significant) to 31 (most\nsignificant). All accessed bits must be in the range [0, 31].  The default\nfor `width` is 1.\n
filename buffer.filename [string]\nThe absolute path to the file associated with this buffer. It is encoded in\nUTF-8. Use `string.iconv()` for charset conversions.\n
filter_through _M.textadept.filter_through [module]\nFilter-Through for the textadept module.\n
filter_through _M.textadept.filter_through.filter_through()\nPrompts for a Linux, Mac OSX, or Windows shell command to filter text\nthrough. The standard input (stdin) for shell commands is determined as\nfollows: (1) If text is selected and spans multiple lines, all text on the\nlines containing the selection is used. However, if the end of the selection\nis at the beginning of a line, only the EOL (end of line) characters from the\nprevious line are included as input. The rest of the line is excluded. (2) If\ntext is selected and spans a single line, only the selected text is used. (3)\nIf no text is selected, the entire buffer is used. The input text is replaced\nwith the standard output (stdout) of the command.\n
filteredlist gui.filteredlist(title, columns, items, int_return, ...)\nShortcut function for `gui.dialog('filtered_list', ...)` with 'Ok' and\n'Cancel' buttons.\n@param title The title for the filteredlist dialog.\n@param columns A column name or list of column names.\n@param items An item or list of items.\n@param int_return If `true`, returns the integer index of the selected item\nin the filteredlist. Defaults to `false`, which returns the string item. Not\ncompatible with a `'--select-multiple'` filteredlist.\n@param ... Additional parameters to pass to `gui.dialog()`.\n@usage gui.filteredlist('Title', 'Foo', { 'Bar', 'Baz' })\n@usage gui.filteredlist('Title', { 'Foo', 'Bar' }, { 'a', 'b', 'c', 'd' },\nfalse, '--output-column', '2')\n@return Either a string or integer on success; `nil` otherwise.\n
find gui.find [module]\nTextadept's integrated find/replace dialog.\n
find string.find(s, pattern [, init [, plain]])\nLooks for the first match of `pattern` in the string `s`. If it finds a\nmatch, then `find` returns the indices of `s` where this occurrence starts\nand ends; otherwise, it returns nil. A third, optional numerical argument\n`init` specifies where to start the search; its default value is 1 and can\nbe negative. A value of true as a fourth, optional argument `plain` turns off\nthe pattern matching facilities, so the function does a plain "find substring"\noperation, with no characters in `pattern` being considered magic. Note that\nif `plain` is given, then `init` must be given as well.  If the pattern has\ncaptures, then in a successful match the captured values are also returned,\nafter the two indices.\n
find_column buffer.find_column(buffer, line, column)\nFind the position of a column on a line taking into account tabs and multi-byte\ncharacters. If beyond end of line, return line end position.\n@param buffer The global buffer.\n@param line The line number.\n@param column The column number.\n
find_entry_text gui.find.find_entry_text [string]\nThe text in the find entry.\n
find_in_files gui.find.find_in_files(utf8_dir)\nPerforms a find in files with the given directory. Use the `gui.find` fields\nto set the text to find and option flags.\n@param utf8_dir UTF-8 encoded directory name. If none is provided, the user\nis prompted for one.\n
find_incremental gui.find.find_incremental()\nBegins an incremental find using the Lua command entry. Lua command\nfunctionality will be unavailable until the search is finished (pressing\n'Escape' by default).\n
find_label_text gui.find.find_label_text [string]\nThe text of the 'Find' label. This is primarily used for\nlocalization. (Write-only)\n
find_next gui.find.find_next()\nMimicks a press of the 'Find Next' button in the Find box.\n
find_next_button_text gui.find.find_next_button_text [string]\nThe text of the 'Find Next' button. This is primarily used for\nlocalization. (Write-only)\n
find_prev gui.find.find_prev()\nMimicks a press of the 'Find Prev' button in the Find box.\n
find_prev_button_text gui.find.find_prev_button_text [string]\nThe text of the 'Find Prev' button. This is primarily used for\nlocalization. (Write-only)\n
first_visible_line buffer.first_visible_line [number]\nThe display line at the top of the display.\n
float lexer.float\nMatches a floating point number.\n
floor math.floor(x)\nReturns the largest integer smaller than or equal to `x`.\n
flush file:flush()\nSaves any written data to `file`.\n
flush io.flush()\nEquivalent to `io.output():flush()`.\n
fmod math.fmod(x, y)\nReturns the remainder of the division of `x` by `y` that rounds the quotient\ntowards zero.\n
focus buffer.focus [bool]\nThe internal focus flag.\n
focus gui.command_entry.focus()\nFocuses the command entry.\n
focus gui.find.focus()\nDisplays and focuses the find/replace dialog.\n
fold lexer.fold(text, start_pos, start_line, start_level)\nFolds the given text. Called by LexLPeg.cxx; do not call from Lua. If the\ncurrent lexer has no _fold function, folding by indentation is performed if\nthe 'fold.by.indentation' property is set.\n@param text The document text to fold.\n@param start_pos The position in the document text starts at.\n@param start_line The line number text starts on.\n@param start_level The fold level text starts on.\n@return Table of fold levels.\n
fold_expanded buffer.fold_expanded [bool]\nExpanded state of a header line.\n
fold_level buffer.fold_level [table]\nTable of fold levels for lines starting from zero. Fold levels encodes an\ninteger level along with flags indicating whether the line is a header and\nwhether it is effectively white space.\n    * `_SCINTILLA.constants.SC_FOLDLEVELBASE` (0x400): Initial fold level.\n    * `_SCINTILLA.constants.SC_FOLDLEVELWHITEFLAG` (0x1000): Indicates that\n      the line is blank.\n    * `_SCINTILLA.constants.SC_FOLDLEVELHEADERFLAG` (0x2000): Indicates\n      that the line is a header (fold point).\n\n
fold_line_comments lexer.fold_line_comments(prefix)\nReturns a fold function that folds consecutive line comments. This function\nshould be used inside the lexer's `_foldsymbols` table.\n@param prefix The prefix string defining a line comment.\n@usage [l.COMMENT] = { ['--'] = l.fold_line_comments('--') }\n@usage [l.COMMENT] = { ['//'] = l.fold_line_comments('//') }\n
fold_parent buffer.fold_parent [table]\nTable of parent line numbers for child lines starting from zero. -1 means\nno line was found. (Read-only)\n
font_quality buffer.font_quality [number]\nThe quality level for text. (Windows only)\n    * `_SCINTILLA.constants.SC_EFF_QUALITY_DEFAULt` (0).\n    * `_SCINTILLA.constants.SC_EFF_QUALITY_NON_ANTIALIASED` (1).\n    * `_SCINTILLA.constants.SC_EFF_QUALITY_ANTIALIASED` (2).\n    * `_SCINTILLA.constants.SC_EFF_QUALITY_LCD_OPTIMIZED` (3).\n\n
form_feed buffer.form_feed(buffer)\nInsert a Form Feed character.\n@param buffer The global buffer.\n
format string.format(formatstring, ···)\nReturns a formatted version of its variable number of arguments following\nthe description given in its first argument (which must be a string). The\nformat string follows the same rules as the C function `sprintf`. The only\ndifferences are that the options/modifiers `*`, `h`, `L`, `l`, `n`, and\n`p` are not supported and that there is an extra option, `q`. The `q`\noption formats a string between double quotes, using escape sequences\nwhen necessary to ensure that it can safely be read back by the Lua\ninterpreter. For instance, the call  string.format('%q', 'a string with\n"quotes" and \\n new line')  may produce the string:  "a string with\n\"quotes\" and \ new line"  Options `A` and `a` (when available), `E`, `e`,\n`f`, `G`, and `g` all expect a number as argument. Options `c`, `d`, `i`,\n`o`, `u`, `X`, and `x` also expect a number, but the range of that number\nmay be limited by the underlying C implementation. For options `o`, `u`, `X`,\nand `x`, the number cannot be negative. Option `q` expects a string; option\n`s` expects a string without embedded zeros. If the argument to option `s`\nis not a string, it is converted to one following the same rules of `tostring`.\n
frexp math.frexp(x)\nReturns `m` and `e` such that 'x = m2^e', `e` is an integer and the absolute\nvalue of `m` is in the range *[0.5, 1)* (or zero when `x` is zero).\n
functions _SCINTILLA.functions [table]\nScintilla functions.\n
get_apidoc _M.textadept.adeptsense.get_apidoc(sense, symbol)\nReturns a list of apidocs for the given symbol. If there are multiple apidocs,\nthe index of one to display is the value of the `pos` key in the returned list.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol to get apidocs for.\n@return apidoc_list or `nil`\n
get_class _M.textadept.adeptsense.get_class(sense, symbol)\nReturns the class name for a given symbol. If the symbol is `sense.syntax.self`\nand a class definition using the `sense.syntax.class_definition` keyword is\nfound, that class is returned. Otherwise the buffer is searched backwards\nfor a type declaration of the symbol according to the patterns in\n`sense.syntax.type_declarations`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol to get the class of.\n@return class or `nil`\n@see syntax\n
get_completions _M.textadept.adeptsense.get_completions(sense, symbol, only_fields,\nonly_functions)\nReturns a list of completions for the given symbol.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol to get completions for.\n@param only_fields If `true`, returns list of only fields; defaults to `false`.\n@param only_functions If `true`, returns list of only functions; defaults to\n`false`.\n@return completion_list or `nil`\n
get_cur_line buffer.get_cur_line(buffer)\nRetrieve the text of the line containing the caret. Also returns the index\nof the caret on the line.\n@param buffer The global buffer.\n@return string, number\n
get_fold_level lexer.get_fold_level(line_number)\nReturns the fold level for a given line. This level already has\n`SC_FOLDLEVELBASE` added to it, so you do not need to add it yourself.\n@param line_number The line number to get the fold level of.\n
get_hotspot_active_back buffer.get_hotspot_active_back(buffer)\nGet the back color for active hotspots in 0xBBGGRR format.\n@param buffer The global buffer.\n@return number\n
get_hotspot_active_fore buffer.get_hotspot_active_fore(buffer)\nGet the fore color for active hotspots.\n@param buffer The global buffer.\n@return number\n
get_indent_amount lexer.get_indent_amount(line)\nReturns the indent amount of text for a given line.\n@param line The line number to get the indent amount of.\n
get_last_child buffer.get_last_child(buffer, header_line, level)\nFind the last child line of a header line.\n@param buffer The global buffer.\n@param header_line The line number of a header line.\n@param level The level or `-1` for the level of header_line.\n
get_lexer buffer.get_lexer(buffer)\nReplacement for `buffer.get_lexer_language(buffer)`.\n@param buffer The global buffer.\n
get_lexer_language buffer.get_lexer_language(buffer)\nRetrieve the name of the lexer.\n@param buffer The global buffer.\n
get_line buffer.get_line(buffer, line)\nRetrieve the contents of a line. Also returns the length of the line.\n@param buffer The global buffer.\n@param line The line number.\n@return string, number\n
get_line_sel_end_position buffer.get_line_sel_end_position(buffer, line)\nRetrieve the position of the end of the selection at the given line (`-1`\nif no selection on this line).\n@param buffer The global buffer.\n@param line The line number.\n
get_line_sel_start_position buffer.get_line_sel_start_position(buffer, line)\nRetrieve the position of the start of the selection at the given line (`-1`\nif no selection on this line).\n@param buffer The global buffer.\n@param line The line number.\n
get_property buffer.get_property(buffer, key)\nRetrieve a `property` value previously set with `buffer.property`.\n@param buffer The global buffer.\n@param key Keyword.\n@return string\n
get_property lexer.get_property(key, default)\nReturns an integer property value for a given key.\n@param key The property key.\n@param default Optional integer value to return if key is not set.\n
get_property_expanded buffer.get_property_expanded(buffer, key)\nRetrieve a `property` value previously set with `buffer.property`, with\n`$()` variable replacement on returned buffer.\n@param buffer The global buffer.\n@param key Keyword.\n@return string\n
get_sel_text buffer.get_sel_text(buffer)\nRetrieve the selected text. Also returns the length of the text.\n@param buffer The global buffer.\n@return string, number\n
get_split_table gui.get_split_table()\nGets the current split view structure.\n@return table of split views. Each split view entry is a table with 4 fields:\n`1`, `2`, `vertical`, and `size`. `1` and `2` have values of either split\nview entries or the index of the buffer shown in each view; `vertical` is a\nflag indicating if the split is vertical or not; and `size` is the integer\nposition of the split resizer.\n
get_style_at lexer.get_style_at(pos)\nReturns the string style name and style number at a given position.\n@param pos The position to get the style for.\n
get_style_name buffer.get_style_name(buffer, style_num)\nReturns the name of the style associated with a style number.\n@param buffer The global buffer.\n@param style_num A style number from `0` to `255`.\n@see buffer.style_at\n
get_symbol _M.textadept.adeptsense.get_symbol(sense)\nReturns a full symbol (if any) and current symbol part (if any) behind the\ncaret. For example: `buffer.cur` would return `'buffer'` and `'cur'`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@return symbol or `''`, part or `''`.\n
get_tag buffer.get_tag(buffer, tag_num)\nRetrieve the value of a tag from a regular expression search.\n@param buffer The global buffer.\n@param tag_num The tag number.\n@return string\n
get_text buffer.get_text(buffer)\nRetrieve all the text in the document. Also returns number of characters\nretrieved.\n@param buffer The global buffer.\n
getenv os.getenv(varname)\nReturns the value of the process environment variable `varname`, or nil if\nthe variable is not defined.\n
gethook debug.gethook([thread])\nReturns the current hook settings of the thread, as three values: the current\nhook function, the current hook mask, and the current hook count (as set by\nthe `debug.sethook` function).\n
getinfo debug.getinfo([thread, ] f [, what])\nReturns a table with information about a function. You can give the function\ndirectly or you can give a number as the value of `f`, which means the function\nrunning at level `f` of the call stack of the given thread: level 0 is the\ncurrent function (`getinfo` itself); level 1 is the function that called\n`getinfo` and so on. If `f` is a number larger than the number of active\nfunctions, then `getinfo` returns nil.  The returned table can contain all\nthe fields returned by `lua_getinfo`, with the string `what` describing which\nfields to fill in. The default for `what` is to get all information available,\nexcept the table of valid lines. If present, the option '`f`' adds a field\nnamed `func` with the function itself. If present, the option '`L`' adds\na field named `activelines` with the table of valid lines.  For instance,\nthe expression `debug.getinfo(1,"n").name` returns a table with a name for\nthe current function, if a reasonable name can be found, and the expression\n`debug.getinfo(print)` returns a table with all available information about\nthe `print` function.\n
getlocal debug.getlocal([thread, ] f, local)\nThis function returns the name and the value of the local variable with index\n`local` of the function at level `f` of the stack. This function accesses\nnot only explicit local variables, but also parameters, temporaries, etc.\nThe first parameter or local variable has index 1, and so on, until the last\nactive variable. Negative indices refer to vararg parameters; -1 is the\nfirst vararg parameter. The function returns nil if there is no variable\nwith the given index, and raises an error when called with a level out of\nrange. (You can call `debug.getinfo` to check whether the level is valid.)\nVariable names starting with '`(`' (open parentheses) represent internal\nvariables (loop control variables, temporaries, varargs, and C function\nlocals).  The parameter `f` may also be a function. In that case, `getlocal`\nreturns only the name of function parameters.\n
getmetatable _G.getmetatable(object)\nIf `object` does not have a metatable, returns nil. Otherwise, if the object's\nmetatable has a `"__metatable"` field, returns the associated value. Otherwise,\nreturns the metatable of the given object.\n
getmetatable debug.getmetatable(value)\nReturns the metatable of the given `value` or nil if it does not have\na metatable.\n
getregistry debug.getregistry()\nReturns the registry table (see §4.5).\n
getupvalue debug.getupvalue(f, up)\nThis function returns the name and the value of the upvalue with index `up`\nof the function `f`. The function returns nil if there is no upvalue with\nthe given index.\n
getuservalue debug.getuservalue(u)\nReturns the Lua value associated to `u`. If `u` is not a userdata, returns nil.\n
gmatch string.gmatch(s, pattern)\nReturns an iterator function that, each time it is called, returns the\nnext captures from `pattern` over the string `s`. If `pattern` specifies\nno captures, then the whole match is produced in each call.  As an example,\nthe following loop will iterate over all the words from string `s`, printing\none per line:  s = "hello world from Lua" for w in string.gmatch(s, "%a+")\ndo print(w) end  The next example collects all pairs `key=value` from the\ngiven string into a table:  t = {} s = "from=world, to=Lua" for k, v in\nstring.gmatch(s, "(%w+)=(%w+)") do t[k] = v end  For this function, a caret\n'`^`' at the start of a pattern does not work as an anchor, as this would\nprevent the iteration.\n
goto_bookmark _M.textadept.bookmarks.goto_bookmark()\nGoes to selected bookmark from a filtered list.\n
goto_buffer view:goto_buffer(n, relative)\nGoes to the specified buffer in the indexed view. Generates\n`BUFFER_BEFORE_SWITCH` and `BUFFER_AFTER_SWITCH` events.\n@param n A relative or absolute buffer index. An absolute index of `-1`\ngoes to the last buffer.\n@param relative Flag indicating if `n` is a relative index or not. Defaults to\n`false`.\n
goto_ctag _M.textadept.adeptsense.goto_ctag(sense, k, title)\nDisplays a filteredlist of all known symbols of the given kind (classes,\nfunctions, fields, etc.) and jumps to the source of the selected one.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param k The ctag character kind (e.g. `'f'` for a Lua function).\n@param title The title for the filteredlist dialog.\n
goto_error _M.textadept.run.goto_error(pos, line_num)\nWhen the user double-clicks an error message, go to the line in the file\nthe error occured at and display a calltip with the error message.\n@param pos The position of the caret.\n@param line_num The line double-clicked.\n@see error_detail\n
goto_file gui.goto_file(filename, split, preferred_view)\nGoes to the buffer with the given filename. If the desired buffer is open\nin a view, goes to that view. Otherwise, opens the buffer in either the\n`preferred_view` if given, the first view that is not the current one,\na split view if `split` is `true`, or the current view.\n@param filename The filename of the buffer to go to.\n@param split If there is only one view, split it and open the buffer in the\nother view.\n@param preferred_view When multiple views exist and the desired buffer is\nnot open in any of them, open it in this one.\n
goto_file_in_list gui.find.goto_file_in_list(next)\nGoes to the next or previous file found relative to the file on the current\nline.\n@param next Flag indicating whether or not to go to the next file.\n
goto_line _M.textadept.editing.goto_line(line)\nGoes to the requested line.\n@param line Optional line number to go to. If `nil`, the user is prompted\nfor one.\n
goto_line buffer.goto_line(buffer, line)\nSet caret to start of a line and ensure it is visible.\n@param buffer The global buffer.\n@param line The line number.\n
goto_next _M.textadept.bookmarks.goto_next()\nGoes to the next bookmark in the current buffer.\n
goto_pos buffer.goto_pos(buffer, pos)\nSet caret to a position and ensure it is visible. The anchor position is\nset the same as the current position.\n@param buffer The global buffer.\n@param pos The position.\n
goto_prev _M.textadept.bookmarks.goto_prev()\nGoes to the previous bookmark in the current buffer.\n
goto_required _M.lua.goto_required()\nDetermines the Lua file being 'require'd, searches through package.path for\nthat file, and opens it in Textadept.\n
goto_required _M.php.goto_required()\nDetermines the PHP file being 'require'd or 'include'd, and opens it in\nTextadept.\n
goto_required _M.ruby.goto_required()\nDetermine the Ruby file being 'require'd, and search through the RUBYPATH\nfor that file and open it in Textadept.\n
goto_view gui.goto_view(n, relative)\nGoes to the specified view. Generates `VIEW_BEFORE_SWITCH` and\n`VIEW_AFTER_SWITCH` events.\n@param n A relative or absolute view index.\n@param relative Flag indicating if n is a relative index or not. Defaults\nto false.\n
grab_focus buffer.grab_focus(buffer)\nSet the focus to this view.\n@param buffer The global buffer.\n
graph lexer.graph\nMatches any graphical character (`!` to `~`).\n
grow_selection _M.textadept.editing.grow_selection(amount)\nGrows the selection by a character amount on either end.\n@param amount The amount to grow the selection on either end.\n
gsub string.gsub(s, pattern, repl [, n])\nReturns a copy of `s` in which all (or the first `n`, if given) occurrences of\nthe `pattern` have been replaced by a replacement string specified by `repl`,\nwhich can be a string, a table, or a function. `gsub` also returns, as its\nsecond value, the total number of matches that occurred. The name `gsub`\ncomes from "Global SUBstitution".  If `repl` is a string, then its value\nis used for replacement. The character `%` works as an escape character:\nany sequence in `repl` of the form `%d`, with `d` between 1 and 9, stands\nfor the value of the `d`-th captured substring (see below). The sequence\n`%0` stands for the whole match. The sequence `%%` stands for a single\n`%`.  If `repl` is a table, then the table is queried for every match,\nusing the first capture as the key; if the pattern specifies no captures,\nthen the whole match is used as the key. If `repl` is a function, then this\nfunction is called every time a match occurs, with all captured substrings\npassed as arguments, in order; if the pattern specifies no captures, then\nthe whole match is passed as a sole argument.  If the value returned by\nthe table query or by the function call is a string or a number, then it\nis used as the replacement string; otherwise, if it is false or nil, then\nthere is no replacement (that is, the original match is kept in the string).\nHere are some examples:  x = string.gsub("hello world", "(%w+)", "%1 %1")\n--> x="hello hello world world" x = string.gsub("hello world", "%w+", "%0\n%0", 1) --> x="hello hello world" x = string.gsub("hello world from Lua",\n"(%w+)%s*(%w+)", "%2 %1") --> x="world hello Lua from" x = string.gsub("home\n= $HOME, user = $USER", "%$(%w+)", os.getenv) --> x="home = /home/roberto,\nuser = roberto" x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)\nreturn load(s)() end) --> x="4+5 = 9" local t = {name="lua", version="5.2"}\nx = string.gsub("$name-$version.tar.gz", "%$(%w+)", t) --> x="lua-5.2.tar.gz"\n
gtkmenu gui.gtkmenu(menu_table)\nCreates a GTK menu, returning the userdata.\n@param menu_table A table defining the menu. It is an ordered list of tables\nwith a string menu item, integer menu ID, and optional keycode and modifier\nmask. The latter two are used to display key shortcuts in the menu. The\nstring menu item is handled as follows: `'gtk-*'` - a stock menu item is\ncreated based on the GTK stock-id. `'separator'` - a menu separator item is\ncreated. Otherwise a regular menu item with a mnemonic is created. Submenus\nare just nested menu-structure tables. Their title text is defined with a\n`title` key.\n@see keys.get_gdk_key\n
gui _G.gui [module]\nThe core gui table.\n
h_scroll_bar buffer.h_scroll_bar [bool]\nWhether the horizontal scroll bar is visible. Set to `false` to never see it\nand `true` to enable it again. The default state is to display it when needed.\n
handle_clear _M.textadept.adeptsense.handle_clear(sense)\nCalled when clearing an Adeptsense. This function should be replaced with\nyour own if you have any persistant objects that need to be deleted.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n
handle_ctag _M.textadept.adeptsense.handle_ctag(sense, tag_name, file_name, ex_cmd,\next_fields)\nCalled by `load_ctags()` when a ctag kind is not recognized. This method\nshould be replaced with your own that is specific to the language.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param tag_name The tag name.\n@param file_name The name of the file the tag belongs to.\n@param ex_cmd The `ex_cmd` returned by ctags.\n@param ext_fields The `ext_fields` returned by ctags.\n
handlers events.handlers [table]\nA table of event names and a table of functions connected to them.\n
hex_num lexer.hex_num\nMatches a hexadecimal number.\n
hide_lines buffer.hide_lines(buffer, start_line, end_line)\nMake a range of lines invisible. This has no effect on fold levels or fold\nflags. `start_line` can not be hidden.\n@param buffer The global buffer.\n@param start_line The start line.\n@param end_line The end line.\n
hide_selection buffer.hide_selection(buffer, normal)\nDraw the selection in normal style or with selection highlighted.\n@param buffer The global buffer.\n@param normal Draw normal selection.\n
highlight_guide buffer.highlight_guide [number]\nThe highlighted indentation guide column. Set to `0` to cancel this highlight.\n
highlight_word _M.textadept.editing.highlight_word()\nHighlights all occurances of the word under the caret and adds markers to\nthe lines they are on.\n
home buffer.home(buffer)\nMove caret to first position on line.\n@param buffer The global buffer.\n
home_display buffer.home_display(buffer)\nMove caret to first position on display line.\n@param buffer The global buffer.\n
home_display_extend buffer.home_display_extend(buffer)\nMove caret to first position on display line extending selection to new\ncaret position.\n@param buffer The global buffer.\n
home_extend buffer.home_extend(buffer)\nMove caret to first position on line extending selection to new caret position.\n@param buffer The global buffer.\n
home_rect_extend buffer.home_rect_extend(buffer)\nMove caret to first position on line, extending rectangular selection to\nnew caret position.\n@param buffer The global buffer.\n
home_wrap buffer.home_wrap(buffer)\nMove caret to the start of the display line when word-wrap is enabled. If\nalready there, go to the start of the document line.\n@param buffer The global buffer.\n
home_wrap_extend buffer.home_wrap_extend(buffer)\nLike `buffer:home_wrap()` but extending selection to new caret position.\n@param buffer The global buffer.\n
hotspot_active_underline buffer.hotspot_active_underline [bool]\nWhether active hotspots are underlined.\n
hotspot_single_line buffer.hotspot_single_line [bool]\nWhether hotspots are limited to single line so hotspots on two lines do\nnot merge.\n
huge math.huge\nThe value `HUGE_VAL`, a value larger than or equal to any other numerical\nvalue.\n
hypertext _G.keys.hypertext [table]\nContainer for HTML-specific key commands.\n
hypertext _G.snippets.hypertext [table]\nContainer for HTML-specific snippets.\n
hypertext _M.hypertext [module]\nThe hypertext module. It provides utilities for editing HTML code. User tags\nare loaded from _USERHOME/modules/hypertext/tags and user apis are loaded\nfrom _USERHOME/modules/hypertext/api.\n
iconv string.iconv(text, to, from)\nConverts a string from one character set to another using iconv. Valid\ncharacter sets are ones GLib's `g_convert()` accepts, typically GNU iconv's\ncharacter sets.\n@param text The text to convert.\n@param to The character set to convert to.\n@param from The character set to convert from.\n
in_files gui.find.in_files [bool]\nSearch for the text in a list of files.\n
in_files_label_text gui.find.in_files_label_text [string]\nThe text of the 'In files' label. This is primarily used for\nlocalization. (Write-only)\n
indent buffer.indent [number]\nIhe number of spaces used for one level of indentation. For a width of `0`,\nthe indent size is the same as the tab size.\n
indentation_guides buffer.indentation_guides [number]\nIndentation guides appearance. Indentation guides are dotted vertical lines\nthat appear within indentation white space every indent size columns.\n    * `_SCINTILLA.constants.SC_IV_NONE` (0): No indentation guides are\n      shown.\n    * `_SCINTILLA.constants.SC_IV_REAL` (1): Indentation guides are shown\n      inside real indentation white space.\n    * `_SCINTILLA.constants.SC_IV_LOOKFORWARD` (2): Indentation guides are\n      shown beyond the actual indentation up to the level of the next\n      non-empty line. If the previous non-empty line was a fold header then\n      indentation guides are shown for one more level of indent than that\n      line. This setting is good for Python.\n    * `_SCINTILLA.constants.SC_IV_LOOKBOTH` (3): Indentation guides are\n      shown beyond the actual indentation up to the level of the next\n      non-empty line or previous non-empty line whichever is the greater.\n      This setting is good for most languages.\n\n
indic_alpha buffer.indic_alpha [table]\nTable of alpha transparency values ranging from `0` (transparent) to `255`\n(opaque) or `256` (no alpha) for indicators from `0` to `31`. Used for drawing\nthe fill color of the `INDIC_ROUNDBOX` and `INDIC_STRAIGHTBOX` rectangle.\n
indic_fore buffer.indic_fore [table]\nTable of foreground colors in `0xBBGGRR` format for indicators from `0` to\n`31`.\n
indic_outline_alpha buffer.indic_outline_alpha [table]\nTable of alpha transparency values ranging from `0` (transparent) to `255`\n(opaque) or `256` (no alpha) for indicators from `0` to `31`. Used for drawing\nthe outline color of the `INDIC_ROUNDBOX` and `INDIC_STRAIGHTBOX` rectangle.\n
indic_style buffer.indic_style [table]\nTable of styles for indicators from `0` to `31`.\n    * `_SCINTILLA.constants.INDIC_PLAIN` (0): Underlined with a single,\n      straight line.\n    * `_SCINTILLA.constants.INDIC_SQUIGGLE` (1): A squiggly underline.\n      Requires 3 pixels of descender space.\n    * `_SCINTILLA.constants.INDIC_TT` (2): A line of small T shapes.\n    * `_SCINTILLA.constants.INDIC_DIAGONAL` (3): Diagonal hatching.\n    * `_SCINTILLA.constants.INDIC_STRIKE` (4): Strike out.\n    * `_SCINTILLA.constants.INDIC_HIDDEN` (5): An indicator with no visual\n      effect.\n    * `_SCINTILLA.constants.INDIC_BOX` (6): A rectangle around the text.\n    * `_SCINTILLA.constants.INDIC_ROUNDBOX` (7): A rectangle with rounded\n      corners around the text using translucent drawing with the interior\n      usually more transparent than the border. Use `buffer.indic_alpha`\n      and `buffer.indic_outline_alpha` to control the alpha transparency\n      values. The default alpha values are `30` for fill color and `50` for\n      outline color.\n    * `_SCINTILLA.constants.INDIC_STRAIGHTBOX` (8): A rectangle around the\n      text using translucent drawing with the interior usually more\n      transparent than the border. You can use `buffer.indic_alpha` and\n      `buffer.indic_outline_alpha` to control the alpha transparency\n      values. The default alpha values are `30` for fill color and `50` for\n      outline color.\n    * `_SCINTILLA.constants.INDIC_DASH` (9): A dashed underline.\n    * `_SCINTILLA.constants.INDIC_DOTS` (10): A dotted underline.\n    * `_SCINTILLA.constants.INDIC_SQUIGGLELOW` (11): Similar to\n      `INDIC_SQUIGGLE` but only using 2 vertical pixels so will fit under\n      small fonts.\n    * `_SCINTILLA.constants.INDIC_DOTBOX` (12): A dotted rectangle around\n      the text using translucent drawing. Translucency alternates between\n      the alpha and outline alpha settings with the top-left pixel using\n      the alpha setting. `buffer.indic_alpha` and\n      `buffer.indic_outline_alpha` control the alpha transparency values.\n      The default values are `30` for alpha and `50` for outline alpha. To\n      avoid excessive memory allocation the maximum width of a dotted box\n      is 4000 pixels.\n    * Use `_SCINTILLA.next_indic_number()` for custom indicators.\n\n
indic_under buffer.indic_under [table]\nTable of booleans for drawing under text or over (default) for indicators from\n`0` to `31`.\n
indicator_all_on_for buffer.indicator_all_on_for(buffer, pos)\nRetrieve a bitmap value representing which indicators are non-zero at a\nposition. Bit 0 is set if indicator 0 is present, bit 1 for indicator 1 and\nso on.\n@param buffer The global buffer.\n@param pos The position.\n@return number\n
indicator_clear_range buffer.indicator_clear_range(buffer, pos, clear_length)\nTurn a indicator off over a range.\n@param buffer The global buffer.\n@param pos The start position.\n@param clear_length The length.\n
indicator_current buffer.indicator_current [number]\nThe indicator in the range of `0` to `31` used for\n`buffer:indicator_fill_range()` and `buffer:indicator_clear_range()`.\n
indicator_end buffer.indicator_end(buffer, indicator, pos)\nFind the position where a particular indicator ends.\n@param buffer The global buffer.\n@param indicator An indicator number in the range of `0` to `31`.\n@param pos The position of the indicator.\n
indicator_fill_range buffer.indicator_fill_range(buffer, pos, fill_length)\nTurn a indicator on over a range. This function fills with the current\nindicator value.\n@param buffer The global buffer.\n@param pos the start position.\n@param fill_length The length.\n
indicator_start buffer.indicator_start(buffer, indicator, pos)\nFind the position where a particular indicator starts.\n@param buffer The global buffer.\n@param indicator An indicator number in the range of `0` to `31`.\n@param pos The position of the indicator.\n
indicator_value buffer.indicator_value [number]\nThe indicator value used for `buffer:indicator_fill_range()`. Currently all\nvalues are drawn the same.\n
indicator_value_at buffer.indicator_value_at(buffer, indicator, pos)\nRetrieve the value of a particular indicator at a position. Currently all\nvalues are drawn the same.\n@param buffer The global buffer.\n@param indicator The indicator number in the range of `0` to `31`.\n@param pos The position.\n@return number\n
inherited_classes _M.textadept.adeptsense.inherited_classes [table]\nContains a map of classes and a list of their inherited classes.\n
input io.input([file])\nWhen called with a file name, it opens the named file (in text mode), and\nsets its handle as the default input file. When called with a file handle, it\nsimply sets this file handle as the default input file. When called without\nparameters, it returns the current default input file.  In case of errors\nthis function raises the error, instead of returning an error code.\n
insert table.insert(list, [pos, ] value)\nInserts element `value` at position `pos` in `list`, shifting up the elements\n`list[pos], list[pos+1], ···, list[#list]`. The default value for `pos` is\n`#list+1`, so that a call `table.insert(t,x)` inserts `x` at the end of list\n`t`.\n
insert_text buffer.insert_text(buffer, pos, text)\nInsert string at a position. If the current position is after the insertion\npoint then it is moved along with its surrounding text but no scrolling\nis performed.\n@param buffer The global buffer.\n@param pos The position to insert text at or `-1` for the current position.\n@param text The text to insert.\n
integer lexer.integer\nMatches a decimal, hexadecimal, or octal number.\n
io _G.io [module]\nLua io module.\n
ipairs _G.ipairs(t)\nIf `t` has a metamethod `__ipairs`, calls it with `t` as argument and returns\nthe first three results from the call.  Otherwise, returns three values:\nan iterator function, the table `t`, and 0, so that the construction  for\ni,v in ipairs(t) do *body* end  will iterate over the pairs (`1,t[1]`),\n(`2,t[2]`), ..., up to the first integer key absent from the table.\n
java _G.keys.java [table]\nContainer for Java-specific key commands.\n
java _G.snippets.java [table]\nContainer for Java-specific snippets.\n
java _M.java [module]\nThe java module. It provides utilities for editing Java code. User tags\nare loaded from _USERHOME/modules/java/tags and user apis are loaded from\n_USERHOME/modules/java/api.\n
join_lines _M.textadept.editing.join_lines()\nJoins the currently selected lines. If no lines are selected, joins the\ncurrent line with the line below.\n
keys _G.keys [module]\nManages key commands in Textadept.\n
keys _M.textadept.keys [module]\nDefines key commands for Textadept. This set of key commands is pretty\nstandard among other text editors. This module, should be 'require'ed last,\nbut before _M.textadept.menu.\n
keys_unicode buffer.keys_unicode [bool]\nInterpret keyboard input as Unicode.\n
layout_cache buffer.layout_cache [number]\nThe degree of caching of layout information.\n    * `_SCINTILLA.constants.SC_CACHE_NONE` (0): No lines are cached.\n    * `_SCINTILLA.constants.SC_CACHE_CARET` (1): The line containing the\n      text caret. This is the default.\n    * `_SCINTILLA.constants.SC_CACHE_PAGE` (2): Visible lines plus the line\n      containing the caret.\n    * `_SCINTILLA.constants.SC_CACHE_DOCUMENT` (3): All lines in the\n      document.\n\n
ldexp math.ldexp(m, e)\nReturns 'm2^e' (`e` should be an integer).\n
len string.len(s)\nReceives a string and returns its length. The empty string `""` has length\n0. Embedded zeros are counted, so `"a\000bc\000"` has length 5.\n
length buffer.length [number]\nThe number of bytes in the document. (Read-only)\n
lex lexer.lex(text, init_style)\nLexes the given text. Called by LexLPeg.cxx; do not call from Lua. If the lexer\nhas a _LEXBYLINE flag set, the text is lexed one line at a time. Otherwise\nthe text is lexed as a whole.\n@param text The text to lex.\n@param init_style The current style. Multilang lexers use this to determine\nwhich language to start lexing in.\n
lexer _G.lexer [module]\nPerforms lexing of Scintilla documents.\n
lexer buffer.lexer [number]\nThe lexing language of the document.\n
lexers _M.textadept.mime_types.lexers [table]\nList of detected lexers. Lexers are read from `lexers/` and\n`~/.textadept/lexers/`.\n
lfs _G.lfs [module]\nLua lfs module.\n
line_copy buffer.line_copy(buffer)\nCopy the line containing the caret.\n@param buffer The global buffer.\n
line_count buffer.line_count [number]\nThe number of lines in the document. There is always at least one. (Read-only)\n
line_cut buffer.line_cut(buffer)\nCut the line containing the caret.\n@param buffer The global buffer.\n
line_delete buffer.line_delete(buffer)\nDelete the line containing the caret.\n@param buffer The global buffer.\n
line_down buffer.line_down(buffer)\nMove caret down one line.\n@param buffer The global buffer.\n
line_down_extend buffer.line_down_extend(buffer)\nMove caret down one line extending selection to new caret position.\n@param buffer The global buffer.\n
line_down_rect_extend buffer.line_down_rect_extend(buffer)\nMove caret down one line, extending rectangular selection to new caret\nposition.\n@param buffer The global buffer.\n
line_duplicate buffer.line_duplicate(buffer)\nDuplicate the current line.\n@param buffer The global buffer.\n
line_end buffer.line_end(buffer)\nMove caret to last position on line.\n@param buffer The global buffer.\n
line_end_display buffer.line_end_display(buffer)\nMove caret to last position on display line.\n@param buffer The global buffer.\n
line_end_display_extend buffer.line_end_display_extend(buffer)\nMove caret to last position on display line extending selection to new\ncaret position.\n@param buffer The global buffer.\n
line_end_extend buffer.line_end_extend(buffer)\nMove caret to last position on line extending selection to new caret position.\n@param buffer The global buffer.\n
line_end_position buffer.line_end_position [table]\nTable of positions after the last visible characters on a line for lines\nstarting from zero. (Read-only)\n
line_end_rect_extend buffer.line_end_rect_extend(buffer)\nMove caret to last position on line, extending rectangular selection to new\ncaret position.\n@param buffer The global buffer.\n
line_end_wrap buffer.line_end_wrap(buffer)\nMove caret to the end of the display line when word-wrap is enabled. If\nalready there, go to the end of the document line.\n@param buffer The global buffer.\n
line_end_wrap_extend buffer.line_end_wrap_extend(buffer)\nLike `buffer:line_end_wrap()` but extending selection to new caret position.\n@param buffer The global buffer.\n
line_from_position buffer.line_from_position(buffer, pos)\nRetrieve the line containing a position.\n@param buffer The global buffer.\n@param pos The position.\n@return number\n
line_indent_position buffer.line_indent_position [table]\nTable of positions before the first non indentation character on a line for\nlines starting from zero. (Read-only)\n
line_indentation buffer.line_indentation [table]\nTable of line indentation amounts for lines starting from zero. The indentation\nis measured in character columns, which correspond to the width of space\ncharacters.\n
line_length buffer.line_length(buffer, line)\nReturns how many characters are on a line, including end of line characters. To\nget the length of the line not including any end of line characters, use\n`buffer.line_end_position[line] - buffer:position_from_line(line)`.\n@param buffer The global buffer.\n@param line The line number.\n@return number\n
line_scroll buffer.line_scroll(buffer, columns, lines)\nScroll horizontally and vertically.\n@param buffer The global buffer.\n@param columns The number of columns to scroll horizontally.\n@param lines The number of lines to scroll vertically.\n
line_scroll_down buffer.line_scroll_down(buffer)\nScroll the document down, keeping the caret visible.\n@param buffer The global buffer.\n
line_scroll_up buffer.line_scroll_up(buffer)\nScroll the document up, keeping the caret visible.\n@param buffer The global buffer.\n
line_state buffer.line_state [table]\nTable of extra styling information for lines starting from zero. As well\nas the 8 bits of lexical state stored for each character there is also an\ninteger stored for each line. This can be used for longer lived parse states.\n
line_transpose buffer.line_transpose(buffer)\nSwitch the current line with the previous.\n@param buffer The global buffer.\n
line_up buffer.line_up(buffer)\nMove caret up one line.\n@param buffer The global buffer.\n
line_up_extend buffer.line_up_extend(buffer)\nMove caret up one line extending selection to new caret position.\n@param buffer The global buffer.\n
line_up_rect_extend buffer.line_up_rect_extend(buffer)\nMove caret up one line, extending rectangular selection to new caret position.\n@param buffer The global buffer.\n
line_visible buffer.line_visible [bool]\nIs a line visible? (Read-only)\n
lines file:lines(···)\nReturns an iterator function that, each time it is called, reads the\nfile according to the given formats. When no format is given, uses "*l"\nas a default. As an example, the construction  for c in file:lines(1) do\n<em>body</em> end  will iterate over all characters of the file, starting\nat the current position. Unlike `io.lines`, this function does not close the\nfile when the loop ends.  In case of errors this function raises the error,\ninstead of returning an error code.\n
lines io.lines([filename ···])\nOpens the given file name in read mode and returns an iterator function\nthat works like `file:lines(···)` over the opened file. When the iterator\nfunction detects -- the end of file, it returns nil (to finish the loop) and\nautomatically closes the file.  The call `io.lines()` (with no file name)\nis equivalent to `io.input():lines()`; that is, it iterates over the lines\nof the default input file. In this case it does not close the file when the\nloop ends.  In case of errors this function raises the error, instead of\nreturning an error code.\n
lines_join buffer.lines_join(buffer)\nJoin the lines in the target. Where this would lead to no space between words,\nan extra space is inserted.\n@param buffer The global buffer.\n
lines_on_screen buffer.lines_on_screen [number]\nThe number of lines completely visible. (Read-only)\n
lines_split buffer.lines_split(buffer, pixel_width)\nSplit the lines in the target into lines that are less wide than `pixel_width`\nwhere possible.\n@param buffer The global buffer.\n@param pixel_width The pixel width. When `0`, the width of the view is used.\n
lines_visible buffer.lines_visible [bool]\nAre all lines visible? (Read-only)\n
load _G.load(ld [, source [, mode [, env]]])\nLoads a chunk.  If `ld` is a string, the chunk is this string. If `ld` is a\nfunction, `load` calls it repeatedly to get the chunk pieces. Each call to `ld`\nmust return a string that concatenates with previous results. A return of an\nempty string, nil, or no value signals the end of the chunk.  If there are no\nsyntactic errors, returns the compiled chunk as a function; otherwise, returns\n<b>nil</b> plus the error message.  If the resulting function has upvalues,\nthe first upvalue is set to the value of the global environment or to `env`,\nif that parameter is given. When loading main chunks, the first upvalue will\nbe the `_ENV` variable (see §2.2).  `source` is used as the source of the\nchunk for error messages and debug information (see §4.9). When absent,\nit defaults to `ld`, if `ld` is a string, or to "`=(load)`" otherwise.\nThe string `mode` controls whether the chunk can be text or binary (that is,\na precompiled chunk). It may be the string "`b`" (only binary chunks), "`t`"\n(only text chunks), or "`bt`" (both binary and text). The default is "`bt`".\n
load _M.textadept.session.load(filename)\nLoads a Textadept session file. Textadept restores split views, opened buffers,\ncursor information, and project manager details.\n@param filename The absolute path to the session file to load. Defaults to\n`DEFAULT_SESSION` if not specified.\n@usage _M.textadept.session.load(filename)\n@return `true` if the session file was opened and read; `false` otherwise.\n
load lexer.load(lexer_name)\nInitializes the specified lexer.\n@param lexer_name The name of the lexing language.\n
load_ctags _M.textadept.adeptsense.load_ctags(sense, tag_file, nolocations)\nLoads the given ctags file for autocompletion. It is recommended to pass\n`-n` to ctags in order to use line numbers instead of text patterns to locate\ntags. This will greatly reduce memory usage for a large number of symbols if\n`nolocations` is not `true`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param tag_file The path of the ctags file to load.\n@param nolocations If `true`, does not store the locations of the tags for\nuse by `goto_ctag()`. Defaults to `false`.\n
load_project _M.rails.load_project(utf8_dir)\nSets keys.al.o to snapopen a Rails project. If not directory is provided,\nthe user is prompted for one.\n@param utf8_dir The UTF-8 Rails project directory.\n
loaded package.loaded\nA table used by `require` to control which modules are already loaded. When\nyou require a module `modname` and `package.loaded[modname]` is not false,\n`require` simply returns the value stored there. This variable is only a\nreference to the real table; assignments to this variable do not change the\ntable used by `require`.\n
loadfile _G.loadfile([filename [, mode [, env]]])\nSimilar to `load`, but gets the chunk from file `filename` or from the\nstandard input, if no file name is given.\n
loadlib package.loadlib(libname, funcname)\nDynamically links the host program with the C library `libname`.  If `funcname`\nis "`*`", then it only links with the library, making the symbols exported\nby the library available to other dynamically linked libraries. Otherwise, it\nlooks for a function `funcname` inside the library and returns this function\nas a C function. (So, `funcname` must follow the prototype `lua_CFunction`).\nThis is a low-level function. It completely bypasses the package and module\nsystem. Unlike `require`, it does not perform any path searching and does\nnot automatically adds extensions. `libname` must be the complete file name\nof the C library, including if necessary a path and an extension. `funcname`\nmust be the exact name exported by the C library (which may depend on the\nC compiler and linker used).  This function is not supported by Standard\nC. As such, it is only available on some platforms (Windows, Linux, Mac OS X,\nSolaris, BSD, plus other Unix systems that support the `dlfcn` standard).\n
locale lpeg.locale([table])\nReturns a table with patterns for matching some character classes according\nto the current locale. The table has fields named alnum, alpha, cntrl, digit,\ngraph, lower, print, punct, space, upper, and xdigit, each one containing\na correspondent pattern. Each pattern matches any single character that\nbelongs to its class.  If called with an argument table, then it creates\nthose fields inside the given table and returns that table.\n
locations _M.textadept.adeptsense.locations [table]\nContains the locations of known symbols. This table is populated by\n`load_ctags()`.\n
lock lfs.lock(filehandle, mode[, start[, length]])\nLocks a file or a part of it. This function works on open files; the file\nhandle should be specified as the first argument. The string mode could be\neither r (for a read/shared lock) or w (for a write/exclusive lock). The\noptional arguments start and length can be used to specify a starting point\nand its length; both should be numbers.  Returns true if the operation was\nsuccessful; in case of error, it returns nil plus an error string.\n
lock_dir lfs.lock_dir(path, [seconds_stale])\nCreates a lockfile (called lockfile.lfs) in path if it does not exist\nand returns the lock. If the lock already exists checks it it's stale,\nusing the second parameter (default for the second parameter is INT_MAX,\nwhich in practice means the lock will never be stale. To free the the\nlock call lock:free().  In case of any errors it returns nil and the error\nmessage. In particular, if the lock exists and is not stale it returns the\n"File exists" message.\n
log math.log(x [, base])\nReturns the logarithm of `x` in the given base. The default for `base` is 'e'\n(so that the function returns the natural logarithm of `x`).\n
lower lexer.lower\nMatches any lowercase character (`a-z`).\n
lower string.lower(s)\nReceives a string and returns a copy of this string with all uppercase\nletters changed to lowercase. All other characters are left unchanged. The\ndefinition of what an uppercase letter is depends on the current locale.\n
lower_case buffer.lower_case(buffer)\nTransform the selection to lower case.\n@param buffer The global buffer.\n
lpeg _G.lpeg [module]\nLua lpeg module.\n
lrotate bit32.lrotate(x, disp)\nReturns the number `x` rotated `disp` bits to the left. The number `disp`\nmay be any representable integer.  For any valid displacement, the following\nidentity holds:  assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp %\n32))  In particular, negative displacements rotate to the right.\n
lshift bit32.lshift(x, disp)\nReturns the number `x` shifted `disp` bits to the left. The number `disp`\nmay be any representable integer. Negative displacements shift to the\nright. In any direction, vacant bits are filled with zeros. In particular,\ndisplacements with absolute values higher than 31 result in zero (all bits\nare shifted out).  For positive displacements, the following equality holds:\nassert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)\n
lua _G.keys.lua [table]\nContainer for Lua-specific key commands.\n
lua _G.snippets.lua [table]\nContainer for Lua-specific snippets.\n
lua _M.lua [module]\nThe lua module. It provides utilities for editing Lua code. User tags\nare loaded from _USERHOME/modules/lua/tags and user apis are loaded from\n_USERHOME/modules/lua/api.\n
lua gui.find.lua [bool]\nThe search text is interpreted as a Lua pattern.\n
lua_pattern_label_text gui.find.lua_pattern_label_text [string]\nThe text of the 'Lua pattern' label. This is primarily used for\nlocalization. (Write-only)\n
main_selection buffer.main_selection [number]\nThe main selection. The main selection may be displayed in different colors\nor with a differently styled caret. Only an already existing selection can\nbe made main.\n
margin_cursor_n buffer.margin_cursor_n [table]\nTable of cursors shown for margins from zero to four. A reversed arrow cursor\nis normally shown over all margins.\n    * `_SCINTILLA.constants.SC_CURSORARROW`: Normal arrow.\n    * `_SCINTILLA.constants.SC_CURSORREVERSEARROW`: Reversed arrow.\n\n
margin_get_text buffer.margin_get_text(buffer, line)\nGet the text in the text margin for a line.\n@param buffer The global buffer.\n@param line The line number.\n@return string\n
margin_left buffer.margin_left [number]\nThe size in pixels of the left margin. The default is to one pixel.\n
margin_mask_n buffer.margin_mask_n [table]\nTable of marker masks for margins from zero to four. A mask determines which\nmarkers are displayed in a margin.\n
margin_options buffer.margin_options [number]\nA bit mask of margin options.\n    * `_SCINTILLA.constants.SC_MARGINOPTION_NONE` (0): None (default).\n    * `_SCINTILLA.constants.SC_MARGINOPTION_SUBLINESELECT` (1): Controls\n      how wrapped lines are selected when clicking on margin in front of\n      them. If set, only sub line of wrapped line is selected, otherwise\n      whole wrapped line is selected.\n\n
margin_right buffer.margin_right [number]\nThe size in pixels of the right margin. The default is to one pixel.\n
margin_sensitive_n buffer.margin_sensitive_n [table]\nTable of mouse click sensitivity booleans for margins from zero to four. A\nclick in a sensitive margin emits a `margin_click` event. By default, all\nmargins are insensitive.\n
margin_set_text buffer.margin_set_text(buffer, line, text)\nSet the text in the text margin for a line.\n@param buffer The global buffer.\n@param line The line number.\n@param text The text.\n
margin_style buffer.margin_style [table]\nTable of style numbers for text margin lines starting from zero.\n
margin_style_offset buffer.margin_style_offset [number]\nThe start of the range of style numbers used for margin text. Margin styles\nmay be completely separated from standard text styles by setting a style\noffset. For example, setting this to `256` would allow the margin styles\nto be numbered from `256` upto `511` so they do not overlap styles set by\nlexers. Each style number set with `buffer.margin_style` has the offset\nadded before looking up the style.\n
margin_text_clear_all buffer.margin_text_clear_all(buffer)\nClear the margin text on all lines.\n@param buffer The global buffer.\n
margin_type_n buffer.margin_type_n [table]\nTable of margin types for margins from zero to four.\n    * `_SCINTILLA.constants.SC_MARGIN_SYMBOL` (0): A symbol margin.\n    * `_SCINTILLA.constants.SC_MARGIN_NUMBER` (1): A line number margin.\n    * `_SCINTILLA.constants.SC_MARGIN_BACK` (2): A symbol margin that sets\n      its background color to match the default text background color.\n    * `_SCINTILLA.constants.SC_MARGIN_FORE` (3): A symbol margin that sets\n      its background color to match the default text foreground color.\n    * `_SCINTILLA.constants.SC_MARGIN_TEXT` (4): A text margin.\n    * `_SCINTILLA.constants.SC_MARGIN_RTEXT` (5): A right justified text\n      margin.\n\n
margin_width_n buffer.margin_width_n [table]\nTable of margin widths expressed in pixes for margins from zero to four.\n
marker_add buffer.marker_add(buffer, line, marker_num)\nAdd a marker to a line, returning an ID which can be used to find or delete\nthe marker. Returns `-1` if this fails (illegal line number, out of memory).\n@param buffer The global buffer.\n@param line The line number.\n@param marker_num A marker number in the range of `0` to `31`.\n@return number\n
marker_add_set buffer.marker_add_set(buffer, line, marker_mask)\nAdd a set of markers to a line.\n@param buffer The global buffer.\n@param line The line number.\n@param marker_mask A mask of markers to set. Set bit 0 to set marker 0,\nbit 1 for marker 1 and so on.\n
marker_define buffer.marker_define(buffer, marker_num, marker_symbol)\nSet the symbol used for a particular marker number.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param marker_symbol A marker symbol: `_SCINTILLA.constants.SC_MARK_*`.\n@see _SCINTILLA.next_marker_number\n
marker_define_pixmap buffer.marker_define_pixmap(buffer, marker_num, pixmap)\nDefine a marker from a pixmap.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param pixmap `NULL`-terminated pixmap data.\n
marker_define_rgba_image buffer.marker_define_rgba_image(buffer, marker_num, pixels)\nDefine a marker from RGBA data. It has the width and height from\n`buffer.rgba_image_width` and `buffer.rgba_image_height`.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param pixels A sequence of 4 byte pixel values starting with the pixels for\nthe top line, with the leftmost pixel first, then continuing with the pixels\nfor subsequent lines. There is no gap between lines for alignment reasons. Each\npixel consists of, in order, a red byte, a green byte, a blue byte and an\nalpha byte. The colour bytes are not premultiplied by the alpha value. That\nis, a fully red pixel that is 25% opaque will be `[FF, 00, 00, 3F]`.\n
marker_delete buffer.marker_delete(buffer, line, marker_num)\nDelete a marker from a line.\n@param buffer The global buffer.\n@param line The line number.\n@param marker_num A marker number in the range of `0` to `31` or `-1` to\ndelete all markers from the line.\n
marker_delete_all buffer.marker_delete_all(buffer, marker_num)\nDelete all markers with a particular number from all lines.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31` or `-1` to\ndelete all markers from the line.\n
marker_delete_handle buffer.marker_delete_handle(buffer, handle)\nDelete a marker.\n@param buffer The global buffer.\n@param handle The identifier of a marker returned by `buffer:marker_add()`.\n
marker_enable_highlight buffer.marker_enable_highlight(buffer, enabled)\nEnable/disable highlight for current folding block (smallest one that contains\nthe caret)\n@param buffer The global buffer.\n
marker_get buffer.marker_get(buffer, line)\nGet a bit mask of all the markers set on a line. Bit 0 is set if marker 0\nis present, bit 1 for marker 1 and so on.\n@param buffer The global buffer.\n@param line The line number.\n@return number.\n
marker_line_from_handle buffer.marker_line_from_handle(buffer, handle)\nRetrieve the line number at which a particular marker is located. Returns\n`-1` if it not found.\n@param buffer The global buffer.\n@param handle The identifier of a marker returned by `buffer:marker_add()`.\n@return number\n
marker_next buffer.marker_next(buffer, start_line, marker_mask)\nFind the next line at or after start_line that includes a marker in\nmask. Return `-1` when no more lines.\n@param buffer The global buffer.\n@param start_line The start line.\n@param marker_mask A mask of markers to find. Set bit 0 to find marker 0,\nbit 1 for marker 1 and so on.\n@return number\n
marker_previous buffer.marker_previous(buffer, start_line, marker_mask)\nFind the previous line before `start_line` that includes a marker in mask.\n@param buffer The global buffer.\n@param start_line The start line.\n@param marker_mask A mask of markers to find. Set bit 0 to find marker 0,\nbit 1 for marker 1 and so on.\n@return number\n
marker_set_alpha buffer.marker_set_alpha(buffer, marker_num, alpha)\nSet the alpha used for a marker that is drawn in the text area, not the margin.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param alpha An alpha value between `0` (transparent) and `255` (opaque),\nor `256` for no alpha.\n
marker_set_back buffer.marker_set_back(buffer, marker_num, color)\nSet the background color used for a particular marker number.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param color A color in `0xBBGGRR` format.\n
marker_set_back_selected buffer.marker_set_back_selected(buffer, marker_num, color)\nSet the background color used for a particular marker number when its folding\nblock is selected.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param color A color in `0xBBGGRR` format. The default color is `#FF0000`.\n
marker_set_fore buffer.marker_set_fore(buffer, marker_num, color)\nSet the foreground color used for a particular marker number.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@param color A color in `0xBBGGRR` format.\n
marker_symbol_defined buffer.marker_symbol_defined(buffer, marker_num)\nReturn the symbol defined for marker_num with `buffer:marker_define()`.\n@param buffer The global buffer.\n@param marker_num A marker number in the range of `0` to `31`.\n@return number\n
match lpeg.match(pattern, subject [, init])\nThe matching function. It attempts to match the given pattern against the\nsubject string. If the match succeeds, returns the index in the subject of\nthe first character after the match, or the captured values (if the pattern\ncaptured any value).  An optional numeric argument init makes the match starts\nat that position in the subject string. As usual in Lua libraries, a negative\nvalue counts from the end.  Unlike typical pattern-matching functions, match\nworks only in anchored mode; that is, it tries to match the pattern with a\nprefix of the given subject string (at position init), not with an arbitrary\nsubstring of the subject. So, if we want to find a pattern anywhere in a\nstring, we must either write a loop in Lua or write a pattern that matches\nanywhere. This second approach is easy and quite efficient; see examples.\n
match string.match(s, pattern [, init])\nLooks for the first *match* of `pattern` in the string `s`. If it finds one,\nthen `match` returns the captures from the pattern; otherwise it returns\nnil. If `pattern` specifies no captures, then the whole match is returned. A\nthird, optional numerical argument `init` specifies where to start the search;\nits default value is 1 and can be negative.\n
match_brace _M.textadept.editing.match_brace(select)\nGoes to a matching brace position, selecting the text inside if specified to.\n@param select If `true`, selects the text between matching braces.\n
match_case gui.find.match_case [bool]\nSearches are case-sensitive.\n
match_case_label_text gui.find.match_case_label_text [string]\nThe text of the 'Match case' label. This is primarily used for\nlocalization. (Write-only)\n
math _G.math [module]\nLua math module.\n
max math.max(x, ···)\nReturns the maximum value among its arguments.\n
max_line_state buffer.max_line_state [number]\nThe last line number that has line state. (Read-only)\n
menu _M.textadept.menu [module]\nProvides dynamic menus for Textadept. This module should be `require`ed last,\nafter `_M.textadept.keys` since it looks up defined key commands to show\nthem in menus.\n
menubar _M.textadept.menu.menubar [table]\nContains the main menubar.\n
menubar gui.menubar [table]\nA table of GTK menus defining a menubar. (Write-only)\n
mime_types _M.textadept.mime_types [module]\nHandles file-specific settings.\n
min math.min(x, ···)\nReturns the minimum value among its arguments.\n
mkdir lfs.mkdir(dirname)\nCreates a new directory. The argument is the name of the new directory.\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.\n
modf math.modf(x)\nReturns two numbers, the integral part of `x` and the fractional part of `x`.\n
modify buffer.modify [bool]\nWhether the document is different from when it was last saved.\n
mouse_down_captures buffer.mouse_down_captures [bool]\nWhether the mouse is captured when its button is pressed.\n
mouse_dwell_time buffer.mouse_dwell_time [number]\nThe time the mouse must sit still to generate a mouse dwell event. If set\nto `_SCINTILLA.constants.SC_TIME_FOREVER`, the default, no dwell events\nare generated.\n
move_caret_inside_view buffer.move_caret_inside_view(buffer)\nMove the caret inside current view if it is not there already. Any selection\nis lost.\n@param buffer The global buffer.\n
move_selected_lines_down buffer.move_selected_lines_down(buffer)\nMove the selected lines down one line, shifting the line below before the\nselection. The selection will be automatically extended to the beginning\nof the selection's first line and the end of the seletion's last line. If\nnothing was selected, the line the cursor is currently at will be selected.\n@param buffer The global buffer.\n
move_selected_lines_up buffer.move_selected_lines_up(buffer)\nMove the selected lines up one line, shifting the line above after the\nselection. The selection will be automatically extended to the beginning\nof the selection's first line and the end of the seletion's last line. If\nnothing was selected, the line the cursor is currently at will be selected.\n@param buffer The global buffer.\n
multi_paste buffer.multi_paste [bool]\nThe effect of pasting when there are multiple selections.\n    * `_SCINTILLA.constants.SC_MULTIPASTE_ONCE` (0): Pasted text can go\n      into just the main selection (default).\n    * `_SCINTILLA.constants.SC_MULTIPASTE_EACH` (1): Pasted text can go\n      into each selection.\n\n
multiple_selection buffer.multiple_selection [bool]\nWhether multiple selections can be made. When multiple selection is disabled,\nit is not possible to select multiple ranges by holding down the Ctrl key\nwhile dragging with the mouse.\n
nested_pair lexer.nested_pair(start_chars, end_chars, end_optional)\nSimilar to `delimited_range()`, but allows for multi-character\ndelimitters. This is useful for lexers with tokens such as nested block\ncomments. With single-character delimiters, this function is identical to\n`delimited_range(start_chars..end_chars, nil, end_optional, true)`.\n@param start_chars The string starting a nested sequence.\n@param end_chars The string ending a nested sequence.\n@param end_optional Optional flag indicating whether or not an ending delimiter\nis optional or not. If true, the range begun by the start delimiter matches\nuntil an end delimiter or the end of the input is reached.\n@usage local nested_comment = l.nested_pair('/*', '*/', true)\n
new _M.textadept.adeptsense.new(lang)\nCreates a new Adeptsense for the given lexer language. Only one sense can\nexist per language.\n@param lang The lexer language to create an Adeptsense for.\n@usage local lua_sense = _M.textadept.adeptsense.new('lua')\n@return adeptsense\n
new_buffer _G.new_buffer()\nCreates a new buffer. Generates a `BUFFER_NEW` event.\n@return the new buffer.\n
new_line buffer.new_line(buffer)\nInsert a new line, may use a CRLF, CR or LF depending on EOL mode.\n@param buffer The global buffer.\n
newline lexer.newline\nMatches any newline characters.\n
next _G.next(table [, index])\nAllows a program to traverse all fields of a table. Its first argument is\na table and its second argument is an index in this table. `next` returns\nthe next index of the table and its associated value. When called with nil\nas its second argument, `next` returns an initial index and its associated\nvalue. When called with the last index, or with nil in an empty table, `next`\nreturns nil. If the second argument is absent, then it is interpreted as\nnil. In particular, you can use `next(t)` to check whether a table is empty.\nThe order in which the indices are enumerated is not specified, *even for\nnumeric indices*. (To traverse a table in numeric order, use a numerical\n`for`.)  The behavior of `next` is undefined if, during the traversal,\nyou assign any value to a non-existent field in the table. You may however\nmodify existing fields. In particular, you may clear existing fields.\n
next_indic_number _SCINTILLA.next_indic_number()\nReturns a unique indicator number. Use this function for custom indicators\nin order to prevent clashes with identifiers of other custom indicators.\n@usage local indic_num = _SCINTILLA.next_indic_number()\n@see buffer.indic_style\n
next_marker_number _SCINTILLA.next_marker_number()\nReturns a unique marker number. Use this function for custom markers in\norder to prevent clashes with identifiers of other custom markers.\n@usage local marknum = _SCINTILLA.next_marker_number()\n@see buffer.marker_define\n
next_user_list_type _SCINTILLA.next_user_list_type()\nReturns a unique user list type. Use this function for custom user lists in\norder to prevent clashes with type identifiers of other custom user lists.\n@usage local list_type = _SCINTILLA.next_user_list_type()\n@see buffer.user_list_show\n
nonnewline lexer.nonnewline\nMatches any non-newline character.\n
nonnewline_esc lexer.nonnewline_esc\nMatches any non-newline character excluding newlines escaped with `\\`.\n
oct_num lexer.oct_num\nMatches an octal number.\n
open _M.textadept.snapopen.open(utf8_paths, filter, exclude_PATHS, exclude_FILTER,\ndepth)\nQuickly open a file in set of directories.\n@param utf8_paths A UTF-8 string directory path or table of UTF-8 directory\npaths to search.\n@param filter A filter for files and folders to exclude. The filter may\nbe a string or table. Each filter is a Lua pattern. Any files matching a\nfilter are excluded. Prefix a pattern with `!` to exclude any files that\ndo not match the filter. File extensions can be more efficiently excluded\nby adding the extension text to a table assigned to an `extensions` key in\nthe filter table instead of using individual filters. Directories can be\nexcluded by adding filters to a table assigned to a `folders` key in the\nfilter table. All strings should be UTF-8 encoded.\n@param exclude_PATHS Flag indicating whether or not to exclude `PATHS`\nin the search. Defaults to `false`.\n@param exclude_FILTER Flag indicating whether or not to exclude `FILTER` from\n`filter` in the search. If false, adds `FILTER` to the given `filter`. Defaults\nto `false`.\n@param depth Number of directories to recurse into for finding files. Defaults\nto `DEFAULT_DEPTH`.\n@usage _M.textadept.snapopen.open()\n@usage _M.textadept.snapopen.open(buffer.filename:match('^.+/'), nil, true)\n@usage _M.textadept.snapopen.open(nil, '!%.lua$')\n@usage _M.textadept.snapopen.open(nil, { folders = { '%.hg' } })\n
open io.open(filename [, mode])\nThis function opens a file, in the mode specified in the string `mode`. It\nreturns a new file handle, or, in case of errors, nil plus an error message.\nThe `mode` string can be any of the following: "r": read mode (the default);\n"w": write mode; "a": append mode; "r+": update mode, all previous data is\npreserved; "w+": update mode, all previous data is erased; "a+": append update\nmode, previous data is preserved, writing is only allowed at the end of file.\nThe `mode` string can also have a '`b`' at the end, which is needed in some\nsystems to open the file in binary mode.\n
open_file io.open_file(utf8_filenames)\nOpens a list of files.\n@param utf8_filenames A `\\n` separated list of UTF-8-encoded filenames to\nopen. If `nil`, the user is prompted with a fileselect dialog.\n@usage io.open_file(utf8_encoded_filename)\n
open_recent_file io.open_recent_file()\nPrompts the user to open a recently opened file.\n
os _G.os [module]\nLua os module.\n
output io.output([file])\nSimilar to `io.input`, but operates over the default output file.\n
overtype buffer.overtype [bool]\nOvertype mode.\n
pack table.pack(···)\nReturns a new table with all parameters stored into keys 1, 2, etc. and with\na field "`n`" with the total number of parameters. Note that the resulting\ntable may not be a sequence.\n
package _G.package [module]\nLua package module.\n
page_down buffer.page_down(buffer)\nMove caret one page down.\n@param buffer The global buffer.\n
page_down_extend buffer.page_down_extend(buffer)\nMove caret one page down extending selection to new caret position.\n@param buffer The global buffer.\n
page_down_rect_extend buffer.page_down_rect_extend(buffer)\nMove caret one page down, extending rectangular selection to new caret\nposition.\n@param buffer The global buffer.\n
page_up buffer.page_up(buffer)\nMove caret one page up.\n@param buffer The global buffer.\n
page_up_extend buffer.page_up_extend(buffer)\nMove caret one page up extending selection to new caret position.\n@param buffer The global buffer.\n
page_up_rect_extend buffer.page_up_rect_extend(buffer)\nMove caret one page up, extending rectangular selection to new caret position.\n@param buffer The global buffer.\n
pairs _G.pairs(t)\nIf `t` has a metamethod `__pairs`, calls it with `t` as argument and returns\nthe first three results from the call.  Otherwise, returns three values: the\n`next` function, the table `t`, and nil, so that the construction  for k,v\nin pairs(t) do *body* end  will iterate over all key–value pairs of table\n`t`.  See function `next` for the caveats of modifying the table during\nits traversal.\n
para_down buffer.para_down(buffer)\nMove caret one paragraph down (delimited by empty lines).\n@param buffer The global buffer.\n
para_down_extend buffer.para_down_extend(buffer)\nMove caret one paragraph down (delimited by empty lines) extending selection\nto new caret position.\n@param buffer The global buffer.\n
para_up buffer.para_up(buffer)\nMove caret one paragraph up (delimited by empty lines).\n@param buffer The global buffer.\n
para_up_extend buffer.para_up_extend(buffer)\nMove caret one paragraph up (delimited by empty lines) extending selection\nto new caret position.\n@param buffer The global buffer.\n
paste buffer.paste(buffer)\nPaste the contents of the clipboard into the document replacing the selection.\n@param buffer The global buffer.\n
path package.path\nThe path used by `require` to search for a Lua loader. At start-up,\nLua initializes this variable with the value of the environment variable\n`LUA_PATH_5_2` or the environment variable `LUA_PATH` or with a default path\ndefined in `luaconf.h`, if those environment variables are not defined. Any\n"`;;`" in the value of the environment variable is replaced by the default\npath.\n
patterns _M.textadept.mime_types.patterns [table]\nFirst-line patterns and their associated lexers.\n
pcall _G.pcall(f [, arg1, ···])\nCalls function `f` with the given arguments in *protected mode*. This means\nthat any error inside `f` is not propagated; instead, `pcall` catches the\nerror and returns a status code. Its first result is the status code (a\nboolean), which is true if the call succeeds without errors. In such case,\n`pcall` also returns all results from the call, after this first result. In\ncase of any error, `pcall` returns false plus the error message.\n
php _G.keys.php [table]\nContainer for PHP-specific key commands.\n
php _G.snippets.php [table]\nContainer for PHP-specific snippets.\n
php _M.php [module]\nThe php module. It provides utilities for editing PHP code. User tags\nare loaded from _USERHOME/modules/php/tags and user apis are loaded from\n_USERHOME/modules/php/api.\n
pi math.pi\nThe value of 'π'.\n
point_x_from_position buffer.point_x_from_position(buffer, pos)\nRetrieve the x value of the point in the window where a position is displayed.\n@param buffer The global buffer.\n@param pos The position.\n@return number\n
point_y_from_position buffer.point_y_from_position(buffer, pos)\nRetrieve the y value of the point in the window where a position is displayed.\n@param buffer The global buffer.\n@param pos The position.\n@return number\n
popen io.popen(prog [, mode])\nStarts program `prog` in a separated process and returns a file handle that\nyou can use to read data from this program (if `mode` is `"r"`, the default)\nor to write data to this program (if `mode` is `"w"`).  This function is\nsystem dependent and is not available on all platforms.\n
position_after buffer.position_after(buffer, pos)\nGiven a valid document position, return the next position taking code page\ninto account. Maximum value returned is the last position in the document.\n@param buffer The global buffer.\n@param pos The position.\n
position_before buffer.position_before(buffer, pos)\nGiven a valid document position, return the previous position taking code\npage into account. Returns `0` if passed `0`.\n@param buffer The global buffer.\n@param pos The position.\n@return number\n
position_cache buffer.position_cache [number]\nThe number of entries in the position cache. The position cache stores\nposition information for short runs of text so that their layout can be\ndetermined more quickly if the run recurs.\n
position_from_line buffer.position_from_line(buffer, line)\nRetrieve the position at the start of a line. If line is greater than the\nlines in the document, returns `-1`.\n@param buffer The global buffer.\n@param line The line.\n@return number\n
position_from_point buffer.position_from_point(buffer, x, y)\nFind the position from a point within the window.\n@param buffer The global buffer.\n@return number\n
position_from_point_close buffer.position_from_point_close(buffer, x, y)\nReturns the position from a point within the window, but return `-1` if not\nclose to text.\n@param buffer The global buffer.\n@return number\n
pow math.pow(x, y)\nReturns *x^y*. (You can also use the expression `x^y` to compute this value.)\n
preload package.preload\nA table to store loaders for specific modules (see `require`). This variable\nis only a reference to the real table; assignments to this variable do not\nchange the table used by `require`.\n
prepare_for_save _M.textadept.editing.prepare_for_save()\nPrepares the buffer for saving to a file. Strips trailing whitespace off of\nevery line, ensures an ending newline, and converts non-consistent EOLs.\n
print _G.print(···)\nReceives any number of arguments and prints their values to `stdout`,\nusing the `tostring` function to convert each argument to a string. `print`\nis not intended for formatted output, but only as a quick way to show a\nvalue, for instance for debugging. For complete control over the output,\nuse `string.format` and `io.write`.\n
print gui.print(...)\nPrints messages to the Textadept message buffer. Opens a new buffer (if one\nhas not already been opened) for printing messages.\n@param ... Message strings.\n
print lexer.print\nMatches any printable character (space to `~`).\n
print_colour_mode buffer.print_colour_mode [number]\nThe print color mode.\n    * `_SCINTILLA.constants.SC_PRINT_NORMAL` (0): Print using the current\n      screen colors. This is the default.\n    * `_SCINTILLA.constants.SC_PRINT_INVERTLIGHT` (1): If you use a dark\n      screen background this saves ink by inverting the light value of all\n      colors and printing on a white background.\n    * `_SCINTILLA.constants.SC_PRINT_BLACKONWHITE` (2): Print all text as\n      black on a white background.\n    * `_SCINTILLA.constants.SC_PRINT_COLOURONWHITE` (3): Everything prints\n      in its own color on a white background.\n    * `_SCINTILLA.constants.SC_PRINT_COLOURONWHITEDEFAULTBG` (4):\n      Everything prints in its own color on a white background except that\n      line numbers use their own background color.\n\n
print_magnification buffer.print_magnification [number]\nThe print magnification added to the point size of each style for printing.\n
print_wrap_mode buffer.print_wrap_mode [number]\nPrinting line wrap mode.\n    * `_SCINTILLA.constants.SC_WRAP_NONE` (0): Each line of text generates\n      one line of output and the line is truncated if it is too long to fit\n      into the print area.\n    * `_SCINTILLA.constants.SC_WRAP_WORD` (1): Wraps printed output so that\n      all characters fit into the print rectangle. Tries to wrap only\n      between words as indicated by white space or style changes although\n      if a word is longer than a line, it will be wrapped before the line\n      end. This is the default.\n    * `_SCINTILLA.constants.SC_WRAP_CHAR` (2).\n\n
private_lexer_call buffer.private_lexer_call(buffer, operation, data)\nFor private communication between an application and a known lexer.\n@param buffer The global buffer.\n@param operation An operation number.\n@param data Number data.\n
process args.process()\nProcesses command line arguments. Add command line switches with\n`args.register()`. Any unrecognized arguments are treated as filepaths and\nopened. Generates an `'arg_none'` event when no args are present.\n@see register\n
prompt_load _M.textadept.session.prompt_load()\nPrompts the user for a Textadept session to load.\n
prompt_save _M.textadept.session.prompt_save()\nPrompts the user to save the current Textadept session to a file.\n
properties _SCINTILLA.properties [table]\nScintilla properties.\n
property buffer.property [table]\nTable of keyword:value string pairs used by a lexer for some optional\nfeatures. (Write-only)\n
property_int buffer.property_int [table]\nInterprets `buffer.property[keyword]` as an integer if found or returns\n`0`. (Read-only)\n
punct lexer.punct\nMatches any punctuation character not alphanumeric (`!` to `/`, `:` to `@`,\n`[` to `'`, `{` to `~`).\n
quit _G.quit()\nQuits Textadept.\n
rad math.rad(x)\nReturns the angle `x` (given in degrees) in radians.\n
rails _G.keys.rails [table]\nContainer for Rails-specific key commands.\n
rails _G.snippets.rails [table]\nContainer for Rails-specific snippets.\n
rails _M.rails [module]\nThe rails module. It provides utilities for editing Ruby on Rails code. User\ntags are loaded from _USERHOME/modules/rails/tags and user apis are loaded\nfrom _USERHOME/modules/rails/api.\n
random math.random([m [, n]])\nThis function is an interface to the simple pseudo-random generator function\n`rand` provided by Standard C. (No guarantees can be given for its statistical\nproperties.)  When called without arguments, returns a uniform pseudo-random\nreal number in the range [0,1). When called with an integer number `m`,\n`math.random` returns a uniform pseudo-random integer in the range [1,\nm]. When called with two integer numbers `m` and `n`, `math.random` returns\na uniform pseudo-random integer in the range [m, n].\n
randomseed math.randomseed(x)\nSets `x` as the "seed" for the pseudo-random generator: equal seeds produce\nequal sequences of numbers.\n
rawequal _G.rawequal(v1, v2)\nChecks whether `v1` is equal to `v2`, without invoking any metamethod. Returns\na boolean.\n
rawget _G.rawget(table, index)\nGets the real value of `table[index]`, without invoking any metamethod. `table`\nmust be a table; `index` may be any value.\n
rawlen _G.rawlen(v)\nReturns the length of the object `v`, which must be a table or a string,\nwithout invoking any metamethod. Returns an integer number.\n
rawset _G.rawset(table, index, value)\nSets the real value of `table[index]` to `value`, without invoking any\nmetamethod. `table` must be a table, `index` any value different from nil\nand NaN, and `value` any Lua value.  This function returns `table`.\n
read file:read(···)\nReads the file `file`, according to the given formats, which specify what\nto read. For each format, the function returns a string (or a number)\nwith the characters read, or nil if it cannot read data with the specified\nformat. When called without formats, it uses a default format that reads\nthe next line (see below).  The available formats are "*n": reads a number;\nthis is the only format that returns a number instead of a string. "*a":\nreads the whole file, starting at the current position. On end of file,\nit returns the empty string. "*l": reads the next line skipping the end\nof line, returning nil on end of file. This is the default format. "*L":\nreads the next line keeping the end of line (if present), returning nil\non end of file. *number*: reads a string with up to this number of bytes,\nreturning nil on end of file. If number is zero, it reads nothing and returns\nan empty string, or nil on end of file.\n
read io.read(···)\nEquivalent to `io.input():read(···)`.\n
read_only buffer.read_only [bool]\nRead-only mode.\n
rebuild_command_tables _M.textadept.menu.rebuild_command_tables()\nRebuilds the tables used by `select_command()`. This should be called every\ntime `set_menubar()` is called.\n
recent_files io.recent_files [table]\nList of recently opened files. The most recent are towards the top.\n
rectangular_selection_anchor buffer.rectangular_selection_anchor [number]\nThe position of the anchor of the rectangular selection.\n
rectangular_selection_anchor_virtual_space buffer.rectangular_selection_anchor_virtual_space [number]\nThe amount of virtual space for the anchor of the rectangular selection.\n
rectangular_selection_caret buffer.rectangular_selection_caret [number]\nThe position of the caret of the rectangular selection.\n
rectangular_selection_caret_virtual_space buffer.rectangular_selection_caret_virtual_space [number]\nThe amount of virtual space for the caret of the rectangular selection.\n
rectangular_selection_modifier buffer.rectangular_selection_modifier [number]\nThe modifier key used to indicate that a rectangular selection should be\ncreated when combined with a mouse drag.\n    * `_SCINTILLA.constants.SCMOD_CTRL` (2): Control key (default).\n    * `_SCINTILLA.constants.SCMOD_ALT` (4): Alt key.\n    * `_SCINTILLA.constants.SCMOD_SUPER` (8): Left Windows key on a Windows\n      keyboard or the Command key on a Mac.\n\n
redo buffer.redo(buffer)\nRedoes the next action on the undo history.\n@param buffer The global buffer.\n
register args.register(switch1, switch2, narg, f, description)\nRegisters a command line switch.\n@param switch1 String switch (short version).\n@param switch2 String switch (long version).\n@param narg The number of expected parameters for the switch.\n@param f The Lua function to run when the switch is tripped.\n@param description Description of the switch.\n
register_image buffer.register_image(buffer, type, xpm_data)\nRegister an XPM image for use in autocompletion lists.\n@param buffer The global buffer.\n@param type Integer type to register the image with.\n@param xpm_data XPM data as is described for `buffer:marker_define_pixmap()`.\n
register_rgba_image buffer.register_rgba_image(buffer, type, pixels)\nRegister an RGBA image for use in autocompletion lists. It has the width\nand height from `buffer.rgba_image_width` and `buffer.rgba_image_height`.\n@param buffer The global buffer.\n@param type Integer type to register the image with.\n@param pixels RGBA data as is described for\n`buffer:marker_define_rgba_image()`.\n
reload buffer.reload(buffer)\nReloads the file in a given buffer.\n@param buffer The global buffer.\n
remove _M.textadept.bookmarks.remove()\nClears the bookmark at the current line.\n
remove os.remove(filename)\nDeletes the file (or empty directory, on POSIX systems) with the given\nname. If this function fails, it returns nil, plus a string describing the\nerror and the error code.\n
remove table.remove(list [, pos])\nRemoves from `list` the element at position `pos`, shifting down the\nelements `list[pos+1], list[pos+2], ···, list[#list]` and erasing element\n`list[#list]`. Returns the value of the removed element. The default value for\n`pos` is `#list`, so that a call `table.remove(t)` removes the last element\nof list `t`.\n
rename os.rename(oldname, newname)\nRenames file or directory named `oldname` to `newname`. If this function\nfails, it returns nil, plus a string describing the error and the error code.\n
rep string.rep(s, n [, sep])\nReturns a string that is the concatenation of `n` copies of the string `s`\nseparated by the string `sep`. The default value for `sep` is the empty string\n(that is, no separator).\n
replace bit32.replace(n, v, field [, width])\nReturns a copy of `n` with the bits `field` to `field + width - 1` replaced\nby the value `v`. See `bit32.extract` for details about `field` and `width`.\n
replace gui.find.replace()\nMimicks a press of the 'Replace' button in the Find box.\n
replace_all gui.find.replace_all()\nMimicks a press of the 'Replace All' button in the Find box.\n
replace_all_button_text gui.find.replace_all_button_text [string]\nThe text of the 'Replace All' button. This is primarily used for\nlocalization. (Write-only)\n
replace_button_text gui.find.replace_button_text [string]\nThe text of the 'Replace' button. This is primarily used for\nlocalization. (Write-only)\n
replace_entry_text gui.find.replace_entry_text [string]\nThe text in the replace entry.\n
replace_label_text gui.find.replace_label_text [string]\nThe text of the 'Replace' label. This is primarily used for\nlocalization. (Write-only)\n
replace_sel buffer.replace_sel(buffer, text)\nReplace the selected text with the argument text. The caret is positioned\nafter the inserted text and the caret is scrolled into view.\n@param buffer The global buffer.\n@param text The text.\n
replace_target buffer.replace_target(buffer, text)\nReplace the target text with the argument text. After replacement, the\ntarget range refers to the replacement text. Returns the length of the\nreplacement text.\n@param buffer The global buffer.\n@param text The text (can contain NULs).\n@return number\n
replace_target_re buffer.replace_target_re(buffer, text)\nReplace the target text with the argument text after `\d` processing. Looks\nfor `\d` where `d` is between `1` and `9` and replaces these with the\nstrings matched in the last search operation which were surrounded by `\(`\nand `\)`. Returns the length of the replacement text including any change\ncaused by processing the `\d` patterns.\n@param buffer The global buffer.\n@param text The text (can contain NULs).\n@return number\n
require _G.require(modname)\nLoads the given module. The function starts by looking into the\n`package.loaded` table to determine whether `modname` is already\nloaded. If it is, then `require` returns the value stored at\n`package.loaded[modname]`. Otherwise, it tries to find a *loader* for the\nmodule.  To find a loader, `require` is guided by the `package.searchers`\nsequence. By changing this sequence, we can change how `require` looks for a\nmodule. The following explanation is based on the default configuration for\n`package.searchers`.  First `require` queries `package.preload[modname]`. If it\nhas a value, this value (which should be a function) is the loader. Otherwise\n`require` searches for a Lua loader using the path stored in `package.path`. If\nthat also fails, it searches for a C loader using the path stored in\n`package.cpath`. If that also fails, it tries an *all-in-one* loader (see\n`package.searchers`).  Once a loader is found, `require` calls the loader\nwith two arguments: `modname` and an extra value dependent on how it got the\nloader. (If the loader came from a file, this extra value is the file name.) If\nthe loader returns any non-nil value, `require` assigns the returned value\nto `package.loaded[modname]`. If the loader does not return a non-nil value\nand has not assigned any value to `package.loaded[modname]`, then `require`\nassigns <b>true</b> to this entry. In any case, `require` returns the final\nvalue of `package.loaded[modname]`.  If there is any error loading or running\nthe module, or if it cannot find any loader for the module, then `require`\nraises an error.\n
reset _G.reset()\nResets the Lua state by reloading all init scripts. Language-specific modules\nfor opened files are NOT reloaded. Re-opening the files that use them will\nreload those modules. This function is useful for modifying init scripts\n(such as the user's `modules/textadept/keys.lua`) on the fly without having\nto restart Textadept. `_G.RESETTING` is set to `true` when re-initing the\nLua State. Any scripts that need to differentiate between startup and reset\ncan utilize this variable.\n
resume coroutine.resume(co [, val1, ···])\nStarts or continues the execution of coroutine `co`. The first time you resume\na coroutine, it starts running its body. The values `val1`, ... are passed\nas the arguments to the body function. If the coroutine has yielded, `resume`\nrestarts it; the values `val1`, ... are passed as the results from the yield.\nIf the coroutine runs without any errors, `resume` returns true plus any\nvalues passed to `yield` (if the coroutine yields) or any values returned\nby the body function (if the coroutine terminates). If there is any error,\n`resume` returns false plus the error message.\n
reverse string.reverse(s)\nReturns a string that is the string `s` reversed.\n
rgba_image_height buffer.rgba_image_height [number]\nThe height for future RGBA image data.\n
rgba_image_width buffer.rgba_image_width [number]\nThe width for future RGBA image data.\n
rhtml _G.keys.rhtml [table]\nContainer for RHTML-specific key commands.\n
rhtml _G.snippets.rhtml [table]\nContainer for RHTML-specific snippets.\n
rhtml _M.rhtml [module]\nThe RHTML module. It provides utilities for editing RHTML. User tags are\nloaded from _USERHOME/modules/rhtml/tags and user apis are loaded from\n_USERHOME/modules/rhtml/api.\n
rmdir lfs.rmdir(dirname)\nRemoves an existing directory. The argument is the name of the directory.\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.\n
rotate_selection buffer.rotate_selection(buffer)\nSet the main selection to the next selection.\n@param buffer The global buffer.\n
rrotate bit32.rrotate(x, disp)\nReturns the number `x` rotated `disp` bits to the right. The number `disp`\nmay be any representable integer.  For any valid displacement, the following\nidentity holds:  assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp %\n32))  In particular, negative displacements rotate to the left.\n
rshift bit32.rshift(x, disp)\nReturns the number `x` shifted `disp` bits to the right. The number `disp`\nmay be any representable integer. Negative displacements shift to the\nleft. In any direction, vacant bits are filled with zeros. In particular,\ndisplacements with absolute values higher than 31 result in zero (all bits\nare shifted out).  For positive displacements, the following equality holds:\nassert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))  This shift\noperation is what is called logical shift.\n
ruby _G.keys.ruby [table]\nContainer for Ruby-specific key commands.\n
ruby _G.snippets.ruby [table]\nContainer for Ruby-specific snippets.\n
ruby _M.ruby [module]\nThe ruby module. It provides utilities for editing Ruby code. User tags\nare loaded from _USERHOME/modules/ruby/tags and user apis are loaded from\n_USERHOME/modules/ruby/api.\n
run _M.textadept.run [module]\nModule for running/executing source files. Typically, language-specific\nmodules populate the 'compile_command', 'run_command', and 'error_detail'\ntables for a particular language's file extension.\n
run _M.textadept.run.run()\nRuns/executes the file as specified by its extension in the `run_command`\ntable.\n@see run_command\n
run_command _M.textadept.run.run_command [table]\nFile extensions and their associated 'go' actions. Each key is a file extension\nwhose value is either a command line string to execute or a function returning\none. This table is typically populated by language-specific modules.\n
running coroutine.running()\nReturns the running coroutine plus a boolean, true when the running coroutine\nis the main one.\n
save _M.textadept.session.save(filename)\nSaves a Textadept session to a file. Saves split views, opened buffers,\ncursor information, and project manager details.\n@param filename The absolute path to the session file to save. Defaults to\neither the current session file or `DEFAULT_SESSION` if not specified.\n@usage _M.textadept.session.save(filename)\n
save buffer.save(buffer)\nSaves the current buffer to a file.\n@param buffer The global buffer.\n
save_all io.save_all()\nSaves all dirty buffers to their respective files.\n@usage io.save_all()\n
save_as buffer.save_as(buffer, utf8_filename)\nSaves the current buffer to a file different than its filename property.\n@param buffer The global buffer.\n@param utf8_filename The new filepath to save the buffer to. Must be UTF-8\nencoded.\n
scroll_caret buffer.scroll_caret(buffer)\nEnsure the caret is visible.\n@param buffer The global buffer.\n
scroll_to_end buffer.scroll_to_end(buffer)\nScroll to end of document.\n@param buffer The global buffer.\n
scroll_to_start buffer.scroll_to_start(buffer)\nScroll to start of document.\n@param buffer The global buffer.\n
scroll_width buffer.scroll_width [number]\nThe document width assumed for scrolling. For performance, the view does not\nmeasure the display width of the document to determine the properties of\nthe horizontal scroll bar. Instead, an assumed width is used. The default\nvalue is `2000`. To ensure the width of the currently visible lines can be\nscrolled use `buffer.scroll_width_tracking`.\n
scroll_width_tracking buffer.scroll_width_tracking [bool]\nWhether the maximum width line displayed is used to set scroll width.\n
search_anchor buffer.search_anchor(buffer)\nSets the current caret position to be the search anchor. Always call this\nbefore calling either of `buffer:search_next()` or `buffer:search_prev()`.\n@param buffer The global buffer.\n
search_flags buffer.search_flags [number]\nThe search flags used by `buffer:search_in_target()`.\n    * `_SCINTILLA.constants.SCFIND_WHOLEWORD` (2): A match only occurs with\n      text that matches the case of the search string.\n    * `_SCINTILLA.constants.SCFIND_MATCHCASE` (4): A match only occurs if\n      the characters before and after are not word characters.\n    * `_SCINTILLA.constants.SCFIND_WORDSTART` (0x00100000): A match only\n      occurs if the character before is not a word character.\n    * `_SCINTILLA.constants.SCFIND_REGEXP` (0x00200000): The search string\n      should be interpreted as a regular expression.\n    * `_SCINTILLA.constants.SCFIND_POSIX` (0x00400000): Treat regular\n      expression in a more POSIX compatible manner by interpreting bare `(`\n     and `)` for tagged sections rather than `\(` and `\)`.\n\n
search_in_target buffer.search_in_target(buffer, text)\nSearch for a counted string in the target and set the target to the found\nrange. Returns length of range or `-1` for failure in which case target is\nnot moved.\n@param buffer The global buffer.\n@param text The text (can contain NULs).\n@return number\n
search_next buffer.search_next(buffer, flags, text)\nFind some text starting at the search anchor. The return value is `-1` if\nnothing is found, otherwise the return value is the start position of the\nmatching text. The selection is updated to show the matched text, but is\nnot scrolled into view.\n@param buffer The global buffer.\n@param flags Search flags. See `buffer.search_flags`.\n@param text The text.\n@return number\n
search_prev buffer.search_prev(buffer, flags, text)\nFind some text starting at the search anchor and moving backwards. The return\nvalue is `-1` if nothing is found, otherwise the return value is the start\nposition of the matching text. The selection is updated to show the matched\ntext, but is not scrolled into view.\n@param buffer The global buffer.\n@param flags Search flags. See `buffer.search_flags`.\n@param text The text.\n@return number\n
searchers package.searchers\nA table used by `require` to control how to load modules. Each entry in\nthis table is a *searcher function*. When looking for a module, `require`\ncalls each of these searchers in ascending order, with the module name\n(the argument given to `require`) as its sole parameter. The function\ncan return another function (the module *loader*) plus an extra value\nthat will be passed to that loader, or a string explaining why it did not\nfind that module (or nil if it has nothing to say). Lua initializes this\ntable with four functions. The first searcher simply looks for a loader\nin the `package.preload` table. The second searcher looks for a loader\nas a Lua library, using the path stored at `package.path`. The search is\ndone as described in function `package.searchpath`. The third searcher\nlooks for a loader as a C library, using the path given by the variable\n`package.cpath`. Again, the search is done as described in function\n`package.searchpath`. For instance, if the C path is the string\n  "./?.so;./?.dll;/usr/local/?/init.so"\nthe searcher for module `foo` will try to open the files `./foo.so`,\n`./foo.dll`, and `/usr/local/foo/init.so`, in that order. Once it finds\na C library, this searcher first uses a dynamic link facility to link the\napplication with the library. Then it tries to find a C function inside the\nlibrary to be used as the loader. The name of this C function is the string\n"`luaopen_`" concatenated with a copy of the module name where each dot is\nreplaced by an underscore. Moreover, if the module name has a hyphen, its\nprefix up to (and including) the first hyphen is removed. For instance, if\nthe module name is `a.v1-b.c`, the function name will be `luaopen_b_c`. The\nfourth searcher tries an *all-in-one loader*. It searches the C path for a\nlibrary for the root name of the given module. For instance, when requiring\n`a.b.c`, it will search for a C library for `a`. If found, it looks into\nit for an open function for the submodule; in our example, that would be\n`luaopen_a_b_c`. With this facility, a package can pack several C submodules\ninto one single library, with each submodule keeping its original open\nfunction. All searchers except the first one (preload) return as the\nextra value the file name where the module was found, as returned by\n`package.searchpath`. The first searcher returns no extra value.\n
searchpath package.searchpath(name, path [, sep [, rep]])\nSearches for the given `name` in the given `path`.  A path is a string\ncontaining a sequence of _templates_ separated by semicolons. For each\ntemplate, the function replaces each interrogation mark (if any) in the\ntemplate with a copy of `name` wherein all occurrences of `sep` (a dot,\nby default) were replaced by `rep` (the system's directory separator, by\ndefault), and then tries to open the resulting file name. For instance,\nif the path is the string "./?.lua;./?.lc;/usr/local/?/init.lua" the search\nfor the name `foo.a` will try to open the files `./foo/a.lua`, `./foo/a.lc`,\nand `/usr/local/foo/a/init.lua`, in that order. Returns the resulting name\nof the first file that it can open in read mode (after closing the file),\nor nil plus an error message if none succeeds. (This error message lists\nall file names it tried to open.)\n
seek file:seek([whence [, offset]])\nSets and gets the file position, measured from the beginning of the file, to\nthe position given by `offset` plus a base specified by the string `whence`,\nas follows: "set": base is position 0 (beginning of the file); "cur": base is\ncurrent position; "end": base is end of file;  In case of success, function\n`seek` returns the final file position, measured in bytes from the beginning of\nthe file. If `seek` fails, it returns nil, plus a string describing the error.\nThe default value for `whence` is `"cur"`, and for `offset` is 0. Therefore,\nthe call `file:seek()` returns the current file position, without changing it;\nthe call `file:seek("set")` sets the position to the beginning of the file\n(and returns 0); and the call `file:seek("end")` sets the position to the\nend of the file, and returns its size.\n
sel_alpha buffer.sel_alpha [number]\nThe alpha of the selection, between `0` (transparent) and `255` (opaque),\nor `256` for no alpha.\n
sel_eol_filled buffer.sel_eol_filled [bool]\nThe selection end of line fill. The selection can be drawn up to the right\nhand border by setting this property.\n
select _G.select(index, ···)\nIf `index` is a number, returns all arguments after argument number `index`;\na negative number indexes from the end (-1 is the last argument). Otherwise,\n`index` must be the string `"#"`, and `select` returns the total number of\nextra arguments it received.\n
select_all buffer.select_all(buffer)\nSelect all the text in the document. The current position is not scrolled\ninto view.\n@param buffer The global buffer.\n
select_command _M.textadept.menu.select_command()\nPrompts the user with a filteredlist to run menu commands.\n
select_enclosed _M.textadept.editing.select_enclosed(left, right)\nSelects text between a given pair of strings.\n@param left The left part of the enclosure.\n@param right The right part of the enclosure.\n
select_indented_block _M.textadept.editing.select_indented_block()\nSelects indented blocks intelligently. If no block of text is selected, all\ntext with the current level of indentation is selected. If a block of text is\nselected and the lines to the top and bottom of it are one indentation level\nlower, they are added to the selection. In all other cases, the behavior is\nthe same as if no text is selected.\n
select_lexer _M.textadept.mime_types.select_lexer()\nPrompts the user to select a lexer from a filtered list for the current buffer.\n
select_line _M.textadept.editing.select_line()\nSelects the current line.\n
select_paragraph _M.textadept.editing.select_paragraph()\nSelects the current paragraph. Paragraphs are delimited by two or more\nconsecutive newlines.\n
select_theme gui.select_theme()\nPrompts the user to select an editor theme from a filtered list.\n
select_word _M.textadept.editing.select_word(action)\nSelects the current word under the caret.\n
selection_duplicate buffer.selection_duplicate(buffer)\nDuplicate the selection. If selection empty duplicate the line containing\nthe caret.\n@param buffer The global buffer.\n
selection_end buffer.selection_end [number]\nThe position that ends the selection - this becomes the current position. This\ndoes not make the caret visible.\n
selection_is_rectangle buffer.selection_is_rectangle [bool]\nIs the selection rectangular? The alternative is the more common stream\nselection. (Read-only)\n
selection_mode buffer.selection_mode [number]\nThe mode of the current selection.\n    * `_SCINTILLA.constants.SC_SEL_STREAM` (0): Stream.\n    * `_SCINTILLA.constants.SC_SEL_RECTANGLE` (1): Rectangle.\n    * `_SCINTILLA.constants.SC_SEL_LINES` (2): Lines.\n    * `_SCINTILLA.constants.SC_SEL_THIN` (3): Thin rectangular.\n\n
selection_n_anchor buffer.selection_n_anchor [table]\nTable of anchor positions for existing selections starting from zero, the\nmain selection.\n
selection_n_anchor_virtual_space buffer.selection_n_anchor_virtual_space [table]\nTable of the amount of virtual space for anchors for existing selections\nstarting from zero, the main selection.\n
selection_n_caret buffer.selection_n_caret [table]\nTable of caret positions for existing selections starting from zero, the\nmain selection.\n
selection_n_caret_virtual_space buffer.selection_n_caret_virtual_space [table]\nTable of the amount of virtual space for carets for existing selections\nstarting from zero, the main selection.\n
selection_n_end buffer.selection_n_end [table]\nTable of positions that end selections for existing selections starting from\nzero, the main selection.\n
selection_n_start buffer.selection_n_start [table]\nTable of positions that start selections for existing selections starting\nfrom zero, the main selection.\n
selection_start buffer.selection_start [number]\nThe position that starts the selection - this becomes the anchor. This does\nnot make the caret visible.\n
selections buffer.selections [number]\nThe number of selections currently active. (Read-only)\n
self _M.textadept.adeptsense.syntax.self\nThe language's syntax-equivalent of `self`. Default is `'self'`.\n
sense _M.cpp.sense\nThe C/C++ Adeptsense.\n
sense _M.css.sense\nThe CSS Adeptsense.\n
sense _M.hypertext.sense\nThe HTML Adeptsense.\n
sense _M.java.sense\nThe Java Adeptsense.\n
sense _M.lua.sense\nThe Lua Adeptsense.\n
sense _M.php.sense\nThe PHP Adeptsense.\n
sense _M.rails.sense\nThe Rails Adeptsense.\n
sense _M.rhtml.sense\nThe RHTML Adeptsense.\n
sense _M.ruby.sense\nThe Ruby Adeptsense.\n
session _M.textadept.session [module]\nSession support for the textadept module.\n
set_buffer_properties _M.cpp.set_buffer_properties()\nSets default buffer properties for C/C++ files.\n
set_buffer_properties _M.css.set_buffer_properties()\nSets default buffer properties for CSS files.\n
set_buffer_properties _M.hypertext.set_buffer_properties()\nSets default buffer properties for HTML files.\n
set_buffer_properties _M.java.set_buffer_properties()\nSets default buffer properties for Java files.\n
set_buffer_properties _M.lua.set_buffer_properties()\nSets default buffer properties for Lua files.\n
set_buffer_properties _M.php.set_buffer_properties()\nSets default buffer properties for PHP files.\n
set_buffer_properties _M.ruby.set_buffer_properties()\nSets default buffer properties for Ruby files.\n
set_chars_default buffer.set_chars_default(buffer)\nReset the set of characters for whitespace and word characters to the\ndefaults. This sets whitespace to space, tab and other characters with codes\nless than `0x20`, with word characters set to alphanumeric and `'_'`.\n@param buffer The global buffer.\n
set_contextmenu _M.textadept.menu.set_contextmenu(menu_table)\nSets `gui.context_menu` from the given menu table.\n@param menu_table The menu table to create the context menu from. Each table\nentry is either a submenu or menu text and a function or action table.\n@see set_menubar\n
set_empty_selection buffer.set_empty_selection(buffer, pos)\nSet caret to a position, while removing any existing selection. The caret\nis not scrolled into view.\n@param buffer The buffer\n@param pos The position to move to.\n
set_encoding buffer.set_encoding(buffer, encoding)\nSets the encoding for the buffer, converting its contents in the process.\n@param buffer The global buffer.\n@param encoding The encoding to set. Valid encodings are ones that GTK's\n`g_convert()` function accepts (typically GNU iconv's encodings).\n@usage buffer.set_encoding(buffer, 'ASCII')\n
set_fold_flags buffer.set_fold_flags(buffer, flags)\nSet some style options for folding.\n@param buffer The global buffer.\n@param flags Mask of fold flags. Flags available are\n`_SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_EXPANDED` (2): Draw above if\nexpanded; `_SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_CONTRACTED`\n(4): Draw above if not expanded;\n`_SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_EXPANDED` (8): Draw below if\nexpanded; `_SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_CONTRACTED` (16):\nDraw below if not expanded\n
set_fold_margin_colour buffer.set_fold_margin_colour(buffer, use_setting, color)\nSet the colors used as a chequerboard pattern in the fold margin.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_fold_margin_hi_colour buffer.set_fold_margin_hi_colour(buffer, use_setting, color)\nSet the colors used as a checkerboard pattern in the fold margin.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_hotspot_active_back buffer.set_hotspot_active_back(buffer, use_setting, color)\nSet a back color for active hotspots.\n@param buffer The global buffer.\n@param use_setting Enable the color change.\n@param color A color in `0xBBGGRR` format.\n
set_hotspot_active_fore buffer.set_hotspot_active_fore(buffer, use_setting, color)\nSet a fore color for active hotspots.\n@param buffer The global buffer.\n@param use_setting Enable the color change.\n@param color A color in `0xBBGGRR` format.\n
set_length_for_encode buffer.set_length_for_encode(buffer, bytes)\nSet the length of the utf8 argument for calling `buffer:encoded_from_utf8()`.\n@param buffer The global buffer.\n@param bytes Bytes or `-1` for measuring to first NUL.\n
set_lexer buffer.set_lexer(buffer, lang)\nReplacement for `buffer.set_lexer_language(buffer)`. Sets a `buffer._lexer`\nfield so it can be restored without querying the mime-types tables. Also\nif the user manually sets the lexer, it should be restored. Loads the\nlanguage-specific module if it exists.\n@param buffer The global buffer.\n@param lang The string language to set.\n@usage buffer.set_lexer(buffer, 'language_name')\n
set_lexer_language buffer.set_lexer_language(buffer, language_name)\nSet the lexing language of the document based on string name.\n@param buffer The global buffer.\n@param language_name The language name.\n
set_menubar _M.textadept.menu.set_menubar(menubar)\nSets `gui.menubar` from the given table of menus.\n@param menubar The table of menus to create the menubar from. Each table\nentry is another table that corresponds to a particular menu. A menu can\nhave a `title` key with string value. Each menu item is either a submenu\n(another menu table) or a table consisting of two items: string menu text\nand a function or action table just like in `keys`. The table can optionally\ncontain 2 more number values: a GDK keycode and modifier mask for setting\na menu accelerator. If the menu text is `'separator'`, a menu separator is\ncreated and no action table is required.\n@see keys.get_gdk_key\n
set_save_point buffer.set_save_point(buffer)\nRemember the current position in the undo history as the position at which\nthe document was saved.\n@param buffer The global buffer.\n
set_sel buffer.set_sel(buffer, start_pos, end_pos)\nSelect a range of text. The caret is scrolled into view after this operation.\n@param buffer The global buffer.\n@param start_pos Start position. If negative, it means the end of the document.\n@param end_pos End position. If negative, it means remove any selection\n(i.e. set the `anchor` to the same position as `current_pos`).\n
set_sel_back buffer.set_sel_back(buffer, use_setting, color)\nSet the background color of the main and additional selections and whether\nto use this setting.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_sel_fore buffer.set_sel_fore(buffer, use_setting, color)\nSet the foreground color of the main and additional selections and whether\nto use this setting.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_selection buffer.set_selection(buffer, caret, anchor)\nSet a simple selection from anchor to caret.\n@param buffer The global buffer.\n@param caret The caret.\n@param anchor The anchor.\n
set_styling buffer.set_styling(buffer, length, style)\nChange style from current styling position for length characters to a style\nand move the current styling position to after this newly styled segment.\n@param buffer The global buffer.\n@param length The length to style.\n@param style The style number to set.\n
set_text buffer.set_text(buffer, text)\nReplace the contents of the document with the argument text.\n@param buffer The global buffer.\n@param text The text.\n
set_theme gui.set_theme(name)\nSets the editor theme from the given name. Themes in `_USERHOME/themes/` are\nchecked first, followed by `_HOME/themes/`. If the name contains slashes ('/'\non Linux and Mac OSX and '\' on Win32), it is assumed to be an absolute path\nso `_USERHOME` and `_HOME` are not checked. Throws an error if the theme is\nnot found. Any errors in the theme are printed to `io.stderr`.\n@param name The name or absolute path of a theme. If nil, sets the default\ntheme.\n
set_visible_policy buffer.set_visible_policy(buffer, visible_policy, visible_slop)\nSet the way the display area is determined when a particular line is to\nbe moved to by `buffer:goto_line()`, etc. It is similar in operation to\n`buffer:set_y_caret_policy()`.\n@param buffer The global buffer.\n@param visible_policy A combination of `_SCINTILLA.constants.VISIBLE_SLOP`,\n(0x01) and `_SCINTILLA.constants.VISIBLE_STRICT` (0x04).\n@param visible_slop The slop value.\n
set_whitespace_back buffer.set_whitespace_back(buffer, use_setting, color)\nSet the background color of all whitespace and whether to use this setting.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_whitespace_fore buffer.set_whitespace_fore(buffer, use_setting, color)\nSet the foreground color of all whitespace and whether to use this setting.\n@param buffer The global buffer.\n@param use_setting Enable color change.\n@param color A color in `0xBBGGRR` format.\n
set_x_caret_policy buffer.set_x_caret_policy(buffer, caret_policy, caret_slop)\nSet the way the caret is kept visible when going sideway. The exclusion zone\nis given in pixels.\n@param buffer The global buffer.\n@param caret_policy A combination of `_SCINTILLA.constants.CARET_SLOP` (0x01),\n`_SCINTILLA.constants.CARET_STRICT` (0x04), `_SCINTILLA.constants.CARET_JUMPS`\n(0x10), and `_SCINTILLA.constants.CARET_EVEN` (0x08).\n@param caret_slop A slop value.\n
set_y_caret_policy buffer.set_y_caret_policy(buffer, caret_policy, caret_slop)\nSet the way the line the caret is on is kept visible.\n@param buffer The global buffer.\n@param caret_policy A combination of `_SCINTILLA.constants.CARET_SLOP` (0x01),\n`_SCINTILLA.constants.CARET_STRICT` (0x04), `_SCINTILLA.constants.CARET_JUMPS`\n(0x10), and `_SCINTILLA.constants.CARET_EVEN` (0x08).\n@param caret_slop A slop value.\n
sethook debug.sethook([thread, ] hook, mask [, count])\nSets the given function as a hook. The string `mask` and the number `count`\ndescribe when the hook will be called. The string mask may have the following\ncharacters, with the given meaning: "c": the hook is called every time Lua\ncalls a function; "r": the hook is called every time Lua returns from a\nfunction; "l": the hook is called every time Lua enters a new line of code.\nWith a `count` different from zero, the hook is called after every `count`\ninstructions.  When called without arguments, `debug.sethook` turns off the\nhook.  When the hook is called, its first parameter is a string describing the\nevent that has triggered its call: `"call"` (or `"tail call"`), `"return"`,\n`"line"`, and `"count"`. For line events, the hook also gets the new line\nnumber as its second parameter. Inside a hook, you can call `getinfo` with\nlevel 2 to get more information about the running function (level 0 is the\n`getinfo` function, and level 1 is the hook function).\n
setlocal debug.setlocal([thread, ] level, local, value)\nThis function assigns the value `value` to the local variable with index\n`local` of the function at level `level` of the stack. The function returns nil\nif there is no local variable with the given index, and raises an error when\ncalled with a `level` out of range. (You can call `getinfo` to check whether\nthe level is valid.) Otherwise, it returns the name of the local variable.\nSee `debug.getlocal` for more information about variable indices and names.\n
setlocale os.setlocale(locale [, category])\nSets the current locale of the program. `locale` is a system-dependent string\nspecifying a locale; `category` is an optional string describing which category\nto change: `"all"`, `"collate"`, `"ctype"`, `"monetary"`, `"numeric"`, or\n`"time"`; the default category is `"all"`. The function returns the name\nof the new locale, or nil if the request cannot be honored.  If `locale`\nis the empty string, the current locale is set to an implementation-defined\nnative locale. If `locale` is the string "`C`", the current locale is set\nto the standard C locale.  When called with nil as the first argument, this\nfunction only returns the name of the current locale for the given category.\n
setmaxstack lpeg.setmaxstack(max)\nSets the maximum size for the backtrack stack used by LPeg to track calls\nand choices. Most well-written patterns need little backtrack levels and\ntherefore you seldom need to change this maximum; but a few useful patterns\nmay need more space. Before changing this maximum you should try to rewrite\nyour pattern to avoid the need for extra space.\n
setmetatable _G.setmetatable(table, metatable)\nSets the metatable for the given table. (You cannot change the metatable\nof other types from Lua, only from C.) If `metatable` is nil, removes the\nmetatable of the given table. If the original metatable has a `"__metatable"`\nfield, raises an error.  This function returns `table`.\n
setmetatable debug.setmetatable(value, table)\nSets the metatable for the given `value` to the given `table` (which can\nbe nil).\n
setmode lfs.setmode(file, mode)\nSets the writing mode for a file. The mode string can be either binary or\ntext. Returns the previous mode string for the file. This function is only\navailable in Windows, so you may want to make sure that lfs.setmode exists\nbefore using it.\n
setupvalue debug.setupvalue(f, up, value)\nThis function assigns the value `value` to the upvalue with index `up` of\nthe function `f`. The function returns nil if there is no upvalue with the\ngiven index. Otherwise, it returns the name of the upvalue.\n
setuservalue debug.setuservalue(udata, value)\nSets the given `value` as the Lua value associated to the given\n`udata`. `value` must be a table or nil; `udata` must be a full userdata.\nReturns `udata`.\n
setvbuf file:setvbuf(mode [, size])\nSets the buffering mode for an output file. There are three available\nmodes: "no": no buffering; the result of any output operation appears\nimmediately. "full": full buffering; output operation is performed only\nwhen the buffer is full or when you explicitly `flush` the file (see\n`io.flush`). "line": line buffering; output is buffered until a newline is\noutput or there is any input from some special files (such as a terminal\ndevice).  For the last two cases, `size` specifies the size of the buffer,\nin bytes. The default is an appropriate size.\n
shebangs _M.textadept.mime_types.shebangs [table]\nShebang words and their associated lexers.\n
show_apidoc _M.textadept.adeptsense.show_apidoc(sense)\nShows a calltip with API documentation for the symbol behind the caret.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@return `true` on success or `false`.\n@see get_symbol\n@see get_apidoc\n
show_documentation _M.textadept.adeptsense.show_documentation()\nShows API documentation for the symbol at the current position based on the\ncurrent lexer's Adeptsense. This should be called by key commands and menus\ninstead of `show_apidoc()`.\n
show_lines buffer.show_lines(buffer, start_line, end_line)\nMake a range of lines visible. This has no effect on fold levels or fold\nflags. `start_line` can not be hidden.\n@param buffer The global buffer.\n@param start_line The start line.\n@param end_line The end line.\n
sin math.sin(x)\nReturns the sine of `x` (assumed to be in radians).\n
singular _M.rails.singular\nA map of plural controller names to their singulars. Add key-value pairs to\nthis if singularize() is incorrectly converting your plural controller name\nto its singular model name.\n
sinh math.sinh(x)\nReturns the hyperbolic sine of `x`.\n
size gui.size [table]\nThe size of the Textadept window (`{ width, height }`).\n
size view.size [number]\nThe position of the split resizer (if this view is part of a split view).\n
snapopen _M.textadept.snapopen [module]\nSnapopen for the textadept module.\n
snippets _G.snippets [table]\nProvides access to snippets from `_G`.\n
snippets _M.textadept.snippets [module]\nProvides Lua-style snippets for Textadept.\n
sort table.sort(list [, comp])\nSorts list elements in a given order, *in-place*, from `list[1]` to\n`list[#list]`. If `comp` is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the\nsecond in the final order (so that `not comp(list[i+1],list[i])` will be true\nafter the sort). If `comp` is not given, then the standard Lua operator `<` is\nused instead.  The sort algorithm is not stable; that is, elements considered\nequal by the given order may have their relative positions changed by the sort.\n
space lexer.space\nMatches any whitespace character (`\t`, `\v`, `\f`, `\\n`, `\r`, space).\n
split view:split(vertical)\nSplits the indexed view vertically or horizontally and focuses the new view.\n@param vertical Flag indicating a vertical split. Defaults to `false`\nfor horizontal.\n@return old view and new view tables.\n
sqrt math.sqrt(x)\nReturns the square root of `x`. (You can also use the expression `x^0.5`\nto compute this value.)\n
start_record buffer.start_record(buffer)\nStart notifying the container of all key presses and commands.\n@param buffer The global buffer.\n
start_styling buffer.start_styling(buffer, position, mask)\nSet the current styling position to pos and the styling mask to mask. The\nstyling mask can be used to protect some bits in each styling byte from\nmodification.\n@param buffer The global buffer.\n@param position The styling position.\n@param mask The bit mask of the style bytes that can be set.\n
starts_line lexer.starts_line(patt)\nCreates an LPeg pattern from a given pattern that matches the beginning of\na line and returns it.\n@param patt The LPeg pattern to match at the beginning of a line.\n@usage local preproc = token(l.PREPROCESSOR, #P('#') * l.starts_line('#'\n* l.nonnewline^0))\n
status buffer.status [number]\nThe error status.\n    * `_SCINTILLA.constants.SC_STATUS_OK` (0): No failures.\n    * `_SCINTILLA.constants.SC_STATUS_FAILURE` (1): Generic failure.\n    * `_SCINTILLA.constants.SC_STATUS_BADALLOC` (2): Memory is exhausted.\n\n
status coroutine.status(co)\nReturns the status of coroutine `co`, as a string: `"running"`, if the\ncoroutine is running (that is, it called `status`); `"suspended"`, if the\ncoroutine is suspended in a call to `yield`, or if it has not started running\nyet; `"normal"` if the coroutine is active but not running (that is, it has\nresumed another coroutine); and `"dead"` if the coroutine has finished its\nbody function, or if it has stopped with an error.\n
statusbar_text gui.statusbar_text [string]\nThe text displayed by the statusbar.\n
stderr io.stderr\nStandard error.\n
stdin io.stdin\nStandard in.\n
stdout io.stdout\nStandard out.\n
stop_record buffer.stop_record(buffer)\nStop notifying the container of all key presses and commands.\n@param buffer The global buffer.\n
string _G.string [module]\nLua string module.\n
stuttered_page_down buffer.stuttered_page_down(buffer)\nMove caret to bottom of page, or one page down if already at bottom of page.\n@param buffer The global buffer.\n
stuttered_page_down_extend buffer.stuttered_page_down_extend(buffer)\nMove caret to bottom of page, or one page down if already at bottom of page,\nextending selection to new caret position.\n@param buffer The global buffer.\n
stuttered_page_up buffer.stuttered_page_up(buffer)\nMove caret to top of page, or one page up if already at top of page.\n@param buffer The global buffer.\n
stuttered_page_up_extend buffer.stuttered_page_up_extend(buffer)\nMove caret to top of page, or one page up if already at top of page, extending\nselection to new caret position.\n@param buffer The global buffer.\n
style lexer.style(style_table)\nCreates a Scintilla style from a table of style properties.\n@param style_table A table of style properties. Style properties available:\nfont         = [string] size         = [integer] bold         = [boolean]\nitalic       = [boolean] underline    = [boolean] fore         = [integer]*\nback         = [integer]* eolfilled    = [boolean] characterset = ? case\n= [integer] visible      = [boolean] changeable   = [boolean] hotspot      =\n[boolean] * Use the value returned by `color()`.\n@usage local bold_italic = style { bold = true, italic = true }\n@see color\n
style_at buffer.style_at [table]\nTable of style bytes at positions in the document starting at zero. (Read-only)\n
style_back buffer.style_back [table]\nTable of background colors in `0xBBGGRR` format for styles from `0` to `255`.\n
style_bits buffer.style_bits [number]\nThe number of bits in style bytes used to hold the lexical state.\n
style_bits_needed buffer.style_bits_needed [number]\nThe number of bits the current lexer needs for styling. (Read-only)\n
style_bold buffer.style_bold [table]\nTable of booleans for bold styles from `0` to `255`.\n
style_case buffer.style_case [table]\nTable of cases for styles from `0` to `255`.\n    * `_SCINTILLA.constants.SC_CASE_MIXED` (0): Normal, mixed case.\n    * `_SCINTILLA.constants.SC_CASE_UPPER` (1): Upper case.\n    * `_SCINTILLA.constants.SC_CASE_LOWER` (2): Lower case.\n\n
style_changeable buffer.style_changeable [table]\nTable of booleans for changeable styles from `0` to `255`. The default\nsetting is `true`.\n
style_character_set buffer.style_character_set [table]\nTable of character sets for styles from `0` to `255`.\n
style_class lexer.style_class\nTypically used for class definitions.\n
style_clear_all buffer.style_clear_all(buffer)\nClear all the styles and make equivalent to the global default style.\n@param buffer The global buffer.\n
style_comment lexer.style_comment\nTypically used for code comments.\n
style_constant lexer.style_constant\nTypically used for constants.\n
style_definition lexer.style_definition\nTypically used for definitions.\n
style_embedded lexer.style_embedded\nTypically used for embedded code.\n
style_eol_filled buffer.style_eol_filled [table]\nTable of booleans for end of line filled styles from `0` to `255`. of line\nis filled.\n
style_error lexer.style_error\nTypically used for erroneous syntax.\n
style_font buffer.style_font [table]\nTable of font faces for styles from `0` to `255`.\n
style_fore buffer.style_fore [table]\nTable of foreground colors in `0xBBGGRR` format for styles from `0` to `255`.\n
style_function lexer.style_function\nTypically used for function definitions.\n
style_get_font buffer.style_get_font(buffer, style_num)\nReturns the font name of a given style.\n@param buffer The global buffer.\n@param style_num The style number.\n@return string\n
style_hot_spot buffer.style_hot_spot [table]\nTable of boolean hotspot styles from `0` to `255`.\n
style_identifier lexer.style_identifier\nTypically used for identifier words.\n
style_italic buffer.style_italic [table]\nTable of booleans for italic styles from `0` to `255`.\n
style_keyword lexer.style_keyword\nTypically used for language keywords.\n
style_label lexer.style_label\nTypically used for labels.\n
style_nothing lexer.style_nothing\nTypically used for whitespace.\n
style_number lexer.style_number\nTypically used for numbers.\n
style_operator lexer.style_operator\nTypically used for operators.\n
style_preproc lexer.style_preproc\nTypically used for preprocessor statements.\n
style_regex lexer.style_regex\nTypically used for regular expression strings.\n
style_reset_default buffer.style_reset_default(buffer)\nReset the default style to its state at startup.\n@param buffer The global buffer.\n
style_size buffer.style_size [table]\nTable of font sizes for styles from `0` to `255`. Font size is a whole number\nof points.\n
style_size_fractional buffer.style_size_fractional [table]\nTable of sizes of characters for styles\n  from `0` to `255`. Size is in hundreths of a point and multiplied by 100\n  internally. For example, a text size of 9.4 points is set with 940.\n\n
style_string lexer.style_string\nTypically used for strings.\n
style_tag lexer.style_tag\nTypically used for markup tags.\n
style_type lexer.style_type\nTypically used for static types.\n
style_underline buffer.style_underline [table]\nTable of booleans for underlined styles from `0` to `255`.\n
style_variable lexer.style_variable\nTypically used for variables.\n
style_visible buffer.style_visible [table]\nTable of booleans for visible styles from `0` to `255`.\n
style_weight buffer.style_weight [table]\nTable of character weights for styles from `0` to `255`. The weight or\nboldness of a font can be set with a number between 1 and 999 with 1 being\nvery light and 999 very heavy. While any value can be used, fonts often only\nsupport between 2 and 4 weights with three weights being common enough to\nuse symbolic names:\n    * `_SCINTILLA.constants.SC_WEIGHT_NORMAL` (400): Normal.\n    * `_SCINTILLA.constants.SC_WEIGHT_SEMIBOLD` (600): Semi-bold.\n    * `_SCINTILLA.constants.SC_WEIGHT_BOLD` (700): Bold.\n\n
sub string.sub(s, i [, j])\nReturns the substring of `s` that starts at `i` and continues until `j`;\n`i` and `j` can be negative. If `j` is absent, then it is assumed to\nbe equal to -1 (which is the same as the string length). In particular,\nthe call `string.sub(s,1,j)` returns a prefix of `s` with length `j`, and\n`string.sub(s, -i)` returns a suffix of `s` with length `i`.  If, after the\ntranslation of negative indices, `i` is less than 1, it is corrected to 1. If\n`j` is greater than the string length, it is corrected to that length. If,\nafter these corrections, `i` is greater than `j`, the function returns the\nempty string.\n
swap_main_anchor_caret buffer.swap_main_anchor_caret(buffer)\nSwap that caret and anchor of the main selection.\n@param buffer The global buffer.\n
switch_buffer gui.switch_buffer()\nDisplays a dialog with a list of buffers to switch to and switches to the\nselected one, if any.\n
symbol_chars _M.textadept.adeptsense.syntax.symbol_chars\nA Lua pattern of characters allowed in a symbol, including member\noperators. The pattern should be a character set. The default is `'[%w_%.]'`.\n
symlinkattributes lfs.symlinkattributes(filepath [, aname])\nIdentical to lfs.attributes except that it obtains information about the link\nitself (not the file it refers to). This function is not available in Windows\nso you may want to make sure that lfs.symlinkattributes exists before using it.\n
syntax _M.textadept.adeptsense.syntax [table]\nContains syntax-specific values for the language.\n@see get_class\n
tab buffer.tab(buffer)\nIf selection is empty or all on one line replace the selection with a tab\ncharacter, or if more than one line selected, indent the lines.\n@param buffer The global buffer.\n
tab_indents buffer.tab_indents [bool]\nWhether a tab pressed when caret is within indentation indents.\n
tab_width buffer.tab_width [number]\nThe visible size of a tab as a multiple of the width of a space character. The\ndefault tab width is 8 characters.\n
table _G.table [module]\nLua table module.\n
tan math.tan(x)\nReturns the tangent of `x` (assumed to be in radians).\n
tanh math.tanh(x)\nReturns the hyperbolic tangent of `x`.\n
target_as_utf8 buffer.target_as_utf8(buffer)\nReturns the target converted to UTF8.\n@param buffer The global buffer.\n
target_end buffer.target_end [number]\nThe position that ends the target which is used for updating the document\nwithout affecting the scroll position. The target is also set by a successful\n`buffer:search_in_target()`.\n
target_from_selection buffer.target_from_selection(buffer)\nMake the target range start and end be the same as the selection range start\nand end.\n@param buffer The global buffer.\n
target_start buffer.target_start [number]\nThe position that starts the target which is used for updating the document\nwithout affecting the scroll position. The target is also set by a successful\n`buffer:search_in_target()`.\n
text_height buffer.text_height(buffer, line)\nRetrieve the height of a particular line of text in pixels.\n@param buffer The global buffer.\n@param line The line number.\n@return number\n
text_length buffer.text_length [number]\nThe number of characters in the document. (Read-only)\n
text_range buffer.text_range(buffer, start_pos, end_pos)\nGets a range of text from the current buffer.\n@param buffer The global buffer.\n@param start_pos The beginning position of the range of text to get.\n@param end_pos The end position of the range of text to get.\n
text_width buffer.text_width(buffer, style_num, text)\nMeasure the pixel width of some text in a particular style. Does not handle\ntab or control characters.\n@param buffer The global buffer.\n@param style_num The style number between `0` and `255`.\n@param text The text.\n@return number\n
textadept _M.textadept [module]\nThe textadept module. It provides utilities for editing text in Textadept.\n
time os.time([table])\nReturns the current time when called without arguments, or a time representing\nthe date and time specified by the given table. This table must have fields\n`year`, `month`, and `day`, and may have fields `hour` (default is 12), `min`\n(default is 0), `sec` (default is 0), and `isdst` (default is nil). For\na description of these fields, see the `os.date` function.  The returned\nvalue is a number, whose meaning depends on your system. In POSIX, Windows,\nand some other systems, this number counts the number of seconds since some\ngiven start time (the "epoch"). In other systems, the meaning is not specified,\nand the number returned by `time` can be used only as an argument to `os.date`\nand `os.difftime`.\n
timeout _G.timeout(interval, f, ...)\nCalls a given function after an interval of time. To repeatedly call the\nfunction, return true inside the function. A `nil` or `false` return value\nstops repetition.\n@param interval The interval in seconds to call the function after.\n@param f The function to call.\n@param ... Additional arguments to pass to `f`.\n
title gui.title [string]\nThe title of the Textadept window.\n
tmpfile io.tmpfile()\nReturns a handle for a temporary file. This file is opened in update mode\nand it is automatically removed when the program ends.\n
tmpname os.tmpname()\nReturns a string with a file name that can be used for a temporary file. The\nfile must be explicitly opened before its use and explicitly removed when\nno longer needed.  On POSIX systems, this function also creates a file with\nthat name, to avoid security risks. (Someone else might create the file\nwith wrong permissions in the time between getting the name and creating\nthe file.) You still have to open the file to use it and to remove it (even\nif you do not use it).  When possible, you may prefer to use `io.tmpfile`,\nwhich automatically removes the file when the program ends.\n
toggle _M.textadept.bookmarks.toggle()\nToggles a bookmark on the current line.\n
toggle_block _M.ruby.toggle_block()\nToggles between { ... } and do ... end Ruby blocks. If the caret is inside\na { ... } single-line block, that block is converted to a multiple-line do\n.. end block. If the caret is on a line that contains single-line do ... end\nblock, that block is converted to a single-line { ... } block. If the caret\nis inside a multiple-line do ... end block, that block is converted to a\nsingle-line { ... } block with all newlines replaced by a space. Indentation\nis important. The 'do' and 'end' keywords must be on lines with the same\nlevel of indentation to toggle correctly\n
toggle_caret_sticky buffer.toggle_caret_sticky(buffer)\nSwitch between sticky and non-sticky: meant to be bound to a key. See\n`buffer.caret_sticky`.\n@param buffer The global buffer.\n
toggle_fold buffer.toggle_fold(buffer, line)\nSwitch a header line between expanded and contracted.\n@param buffer The global buffer.\n@param line The line number.\n
token lexer.token(name, patt)\nCreates an LPeg capture table index with the name and position of the token.\n@param name The name of token. If this name is not in `l.tokens` then you\nwill have to specify a style for it in `lexer._tokenstyles`.\n@param patt The LPeg pattern associated with the token.\n@usage local ws = token(l.WHITESPACE, l.space^1)\n@usage php_start_rule = token('php_tag', '<?' * ('php' * l.space)^-1)\n
tonumber _G.tonumber(e [, base])\nWhen called with no `base`, `tonumber` tries to convert its argument to\na number. If the argument is already a number or a string convertible to\na number (see §3.4.2), then `tonumber` returns this number; otherwise,\nit returns nil.  When called with `base`, then `e` should be a string to be\ninterpreted as an integer numeral in that base. The base may be any integer\nbetween 2 and 36, inclusive. In bases above 10, the letter '`A`' (in either\nupper or lower case) represents 10, '`B`' represents 11, and so forth, with\n'`Z`' representing 35. If the string `e` is not a valid numeral in the given\nbase, the function returns nil\n
tostring _G.tostring(v)\nReceives a value of any type and converts it to a string in a reasonable\nformat. (For complete control of how numbers are converted, use\n`string.format`.)  If the metatable of `v` has a `"__tostring"` field, then\n`tostring` calls the corresponding value with `v` as argument, and uses the\nresult of the call as its result.\n
touch lfs.touch(filepath [, atime [, mtime]])\nSet access and modification times of a file. This function is a bind to utime\nfunction. The first argument is the filename, the second argument (atime)\nis the access time, and the third argument (mtime) is the modification\ntime. Both times are provided in seconds (which should be generated with Lua\nstandard function os.time). If the modification time is omitted, the access\ntime provided is used; if both times are omitted, the current time is used.\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.\n
traceback debug.traceback([thread, ] [message] [, level])\nIf `message` is present but is neither a string nor nil, this function returns\n`message` without further processing. Otherwise, it returns a string with\na traceback of the call stack. An optional `message` string is appended at\nthe beginning of the traceback. An optional `level` number tells at which\nlevel to start the traceback (default is 1, the function calling `traceback`).\n
transpose_chars _M.textadept.editing.transpose_chars()\nTransposes characters intelligently. If the caret is at the end of a line,\nthe two characters before the caret are transposed. Otherwise, the characters\nto the left and right are.\n
try_encodings io.try_encodings [table]\nList of encodings to try to decode files as after UTF-8.\n
try_to_autocomplete_end _M.lua.try_to_autocomplete_end()\nTries to autocomplete Lua's 'end' keyword for control structures like 'if',\n'while', 'for', etc.\n@see control_structure_patterns\n
try_to_autocomplete_end _M.ruby.try_to_autocomplete_end()\nTries to autocomplete Ruby's 'end' keyword for control structures like 'if',\n'while', 'for', etc.\n@see control_structure_patterns\n
two_phase_draw buffer.two_phase_draw [bool]\nTwo phase drawing mode. When `true`, drawing is performed in two phases, first\nthe background and then the foreground. This avoids chopping off characters\nthat overlap the next run. The default is for drawing to be two phase.\n
type _G.type(v)\nReturns the type of its only argument, coded as a string. The possible results\nof this function are " `nil`" (a string, not the value nil), "`number`",\n"`string`", "`boolean`", "`table`", "`function`", "`thread`", and "`userdata`".\n
type io.type(obj)\nChecks whether `obj` is a valid file handle. Returns the string `"file"`\nif `obj` is an open file handle, `"closed file"` if `obj` is a closed file\nhandle, or nil if `obj` is not a file handle.\n
type lpeg.type(value)\nIf the given value is a pattern, returns the string "pattern". Otherwise\nreturns nil.\n
type_assignments _M.textadept.adeptsense.syntax.type_assignments\nA map of Lua patterns to class types for variable assignments. This\nis typically used for dynamically typed languages. For example,\n`sense.type_assignments['^"'] = 'string'`  would recognize string assignments\nin Lua so the `foo` in `foo = "bar"` would be recognized as type `string`. The\nclass type value can contain pattern captures.\n
type_declarations _M.textadept.adeptsense.syntax.type_declarations\nA list of Lua patterns used for determining the class type of a symbol. The\nfirst capture returned must be the class name. Use `%_` to match the\nsymbol. The default is `'(%u[%w_%.]+)%s+%_'`.\n
type_declarations_exclude _M.textadept.adeptsense.syntax.type_declarations_exclude\nA table of types to exclude, even if they match a type_declaration\npattern. Each excluded type is a table key and has a `true` boolean value. For\nexample, `{ Foo = true }` excludes any type whose name is `Foo`. Defaults\nto being empty.\n
undo buffer.undo(buffer)\nUndo one action in the undo history.\n@param buffer The global buffer.\n
undo_collection buffer.undo_collection [bool]\nWhether to collect undo information. When stopping collection, use\n`buffer:empty_undo_buffer()` to avoid the undo buffer being unsynchronized\nwith the data in the buffer.\n
unlock lfs.unlock(filehandle[, start[, length]])\nUnlocks a file or a part of it. This function works on open files; the file\nhandle should be specified as the first argument. The optional arguments\nstart and length can be used to specify a starting point and its length;\nboth should be numbers.  Returns true if the operation was successful;\nin case of error, it returns nil plus an error string.\n
unpack table.unpack(list [, i [, j]])\nReturns the elements from the given table. This function is equivalent to\nreturn list[i], list[i+1], ···, list[j]  By default, `i` is 1 and `j` is\n`#list`.\n
unsplit view:unsplit()\nUnsplits the indexed view if possible.\n@return boolean if the view was unsplit or not.\n
upper lexer.upper\nMatches any uppercase character (`A-Z`).\n
upper string.upper(s)\nReceives a string and returns a copy of this string with all lowercase\nletters changed to uppercase. All other characters are left unchanged. The\ndefinition of what a lowercase letter is depends on the current locale.\n
upper_case buffer.upper_case(buffer)\nTransform the selection to upper case.\n@param buffer The global buffer.\n
upvalueid debug.upvalueid(f, n)\nReturns an unique identifier (as a light userdata) for the upvalue numbered\n`n` from the given function.  These unique identifiers allow a program to\ncheck whether different closures share upvalues. Lua closures that share an\nupvalue (that is, that access a same external local variable) will return\nidentical ids for those upvalue indices.\n
upvaluejoin debug.upvaluejoin(f1, n1, f2, n2)\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue\nof the Lua closure `f2`.\n
use_pop_up buffer.use_pop_up(buffer, allow_popup)\nSets whether a pop up menu is displayed automatically when the user presses\nthe wrong mouse button.\n@param buffer The global buffer.\n@param allow_popup Allow popup menu.\n
use_tabs buffer.use_tabs [bool]\nWhether tabs will be used in indentation. The default is `true`. `false`\nwill only use space characters.\n
user_dofile _G.user_dofile(filename)\nCalls `dofile()` on the given filename in the user's Textadept\ndirectory. Errors are printed to the Textadept message buffer.\n@param filename The name of the file (not path).\n@return true if successful; false otherwise.\n@see dofile\n
user_list_show buffer.user_list_show(buffer, list_type, item_list)\nDisplay a list of strings and send notification when user chooses one.\n@param buffer The global buffer.\n@param list_type A list identifier number greater than zero.\n@param item_list List of words separated by separator characters (initially\nspaces).\n@see _SCINTILLA.next_user_list_type\n
v_scroll_bar buffer.v_scroll_bar [bool]\nWhether the vertical scroll bar is visible. Set to `false` to never see it and\n`true` to enable it again. The default state is to display it when required.\n
vc_home buffer.vc_home(buffer)\nMove caret to before first visible character on line. If already there move\nto first character on line.\n@param buffer The global buffer.\n
vc_home_extend buffer.vc_home_extend(buffer)\nLike `buffer:vc_home()` but extending selection to new caret position.\n@param buffer The global buffer.\n
vc_home_rect_extend buffer.vc_home_rect_extend(buffer)\nMove caret to before first visible character on line. If already there move\nto first character on line. In either case, extend rectangular selection to\nnew caret position.\n@param buffer The global buffer.\n
vc_home_wrap buffer.vc_home_wrap(buffer)\nMove caret to before first visible character on display line when word-wrap\nis enabled. If already there, go to first character on display line.\n@param buffer The global buffer.\n
vc_home_wrap_extend buffer.vc_home_wrap_extend(buffer)\nLike `buffer:vc_home_wrap()` but extending selection to new caret position.\n@param buffer The global buffer.\n
version lpeg.version()\nReturns a string with the running version of LPeg.\n
vertical_centre_caret buffer.vertical_centre_caret(buffer)\nCenter current line in window.\n@param buffer The global buffer.\n
view _G.view [module]\nThe currently focused view. It also represents the structure of any view\ntable in `_G._VIEWS`.\n
view_eol buffer.view_eol [bool]\nWhether the end of line characters are visible. Normally, the end of line\ncharacters are hidden.\n
view_ws buffer.view_ws [number]\nThe visibility of white space characters.\n    * `_SCINTILLA.constants.SCWS_INVISIBLE` (0): The normal display mode\n      with white space displayed as an empty background color.\n    * `_SCINTILLA.constants.SCWS_VISIBLEALWAYS` (1): White space characters\n      are drawn as dots and arrows.\n    * `_SCINTILLA.constants.SCWS_VISIBLEAFTERINDENT` (2): White space used\n      for indentation is displayed normally but after the first visible\n      character, it is shown as dots and arrows.\n\n
virtual_space_options buffer.virtual_space_options [number]\nVirtual space options.\n    * `_SCINTILLA.constants.SCVS_NONE` (0): Disables all use of virtual\n      space (default).\n    * `_SCINTILLA.constants.SCVS_RECTANGULARSELECTION` (1): Enabled only\n      for rectangular selections.\n    * `_SCINTILLA.constants.SCVS_USERACCESSIBLE` (2): Enabled.\n\n
visible_from_doc_line buffer.visible_from_doc_line(buffer, line)\nFind the display line of a document line taking hidden lines into account. If\nthere is folding and line is outside the range of lines in the document,\nthe return value is `-1`.\n@param buffer The global buffer.\n@param line The line number.\n@return number\n
whitespace_chars buffer.whitespace_chars [string]\nThe set of characters making up whitespace for when moving or selecting by\nword. Use after setting `buffer.word_chars`. (Write-only)\n
whitespace_size buffer.whitespace_size [number]\nThe size of the dots used to mark space characters.\n
whole_word gui.find.whole_word [bool]\nOnly whole-word matches are allowed in searches.\n
whole_word_label_text gui.find.whole_word_label_text [string]\nThe text of the 'Whole word' label. This is primarily used for\nlocalization. (Write-only)\n
word lexer.word\nMatches a typical word starting with a letter or underscore and then any\nalphanumeric or underscore characters.\n
word_chars _M.textadept.adeptsense.syntax.word_chars\nA Lua pattern of characters allowed in a word. The default is `'%w_'`.\n
word_chars buffer.word_chars [string]\nThe set of characters making up words when moving or selecting by\nword. (Write-only)\n
word_end_position buffer.word_end_position(buffer, pos, only_word_chars)\nGet position of end of word.\n@param buffer The global buffer.\n@param pos The position.\n@param only_word_chars If `true`, stops searching at the first non-word\ncharacter in the search direction. Otherwise, the first character in the search\ndirection sets the type of the search as word or non-word and the search\nstops at the first non-matching character. Searches are also terminated by\nthe start or end of the document.\n
word_left buffer.word_left(buffer)\nMove caret left one word.\n@param buffer The global buffer.\n
word_left_end buffer.word_left_end(buffer)\nMove caret left one word, position cursor at end of word.\n@param buffer The global buffer.\n
word_left_end_extend buffer.word_left_end_extend(buffer)\nMove caret left one word, position cursor at end of word, extending selection\nto new caret position.\n@param buffer The global buffer.\n
word_left_extend buffer.word_left_extend(buffer)\nMove caret left one word extending selection to new caret position.\n@param buffer The global buffer.\n
word_match lexer.word_match(words, word_chars, case_insensitive)\nCreates an LPeg pattern that matches a set of words.\n@param words A table of words.\n@param word_chars Optional string of additional characters considered to be\npart of a word (default is `%w_`).\n@param case_insensitive Optional boolean flag indicating whether the word\nmatch is case-insensitive.\n@usage local keyword = token(l.KEYWORD, word_match { 'foo', 'bar', 'baz' })\n@usage local keyword = token(l.KEYWORD, word_match({ 'foo-bar', 'foo-baz',\n'bar-foo', 'bar-baz', 'baz-foo', 'baz-bar' }, '-', true))\n
word_part_left buffer.word_part_left(buffer)\nMove to the previous change in capitalisation or underscores.\n@param buffer The global buffer.\n
word_part_left_extend buffer.word_part_left_extend(buffer)\nMove to the previous change in capitalisation or underscores extending\nselection to new caret position.\n@param buffer The global buffer.\n
word_part_right buffer.word_part_right(buffer)\nMove to the next change in capitalisation or underscores.\n@param buffer The global buffer.\n
word_part_right_extend buffer.word_part_right_extend(buffer)\nMove to the next change in capitalisation or underscores extending selection\nto new caret position.\n@param buffer The global buffer.\n
word_right buffer.word_right(buffer)\nMove caret right one word.\n@param buffer The global buffer.\n
word_right_end buffer.word_right_end(buffer)\nMove caret right one word, position cursor at end of word.\n@param buffer The global buffer.\n
word_right_end_extend buffer.word_right_end_extend(buffer)\nMove caret right one word, position cursor at end of word, extending selection\nto new caret position.\n@param buffer The global buffer.\n
word_right_extend buffer.word_right_extend(buffer)\nMove caret right one word extending selection to new caret position.\n@param buffer The global buffer.\n
word_start_position buffer.word_start_position(buffer, pos, only_word_chars)\nGet position of start of word.\n@param buffer The global buffer.\n@param pos The position.\n@param only_word_chars If `true`, stops searching at the first non-word\ncharacter in the search direction. Otherwise, the first character in the search\ndirection sets the type of the search as word or non-word and the search\nstops at the first non-matching character. Searches are also terminated by\nthe start or end of the document.\n
wrap coroutine.wrap(f)\nCreates a new coroutine, with body `f`. `f` must be a Lua function. Returns\na function that resumes the coroutine each time it is called. Any arguments\npassed to the function behave as the extra arguments to `resume`. Returns\nthe same values returned by `resume`, except the first boolean. In case of\nerror, propagates the error.\n
wrap_count buffer.wrap_count(buffer, line)\nReturns the number of display lines needed to wrap a document line.\n@param buffer The global buffer.\n@param line The line number.\n@return number\n
wrap_indent_mode buffer.wrap_indent_mode [number]\nHow wrapped sublines are placed. Default is fixed.\n    * `_SCINTILLA.constants.SC_WRAP_INDENT_FIXED` (0): Wrapped sublines\n      aligned to left of window plus amount set by\n      `buffer.wrap_start_indent`.\n    * `_SCINTILLA.constants.SC_WRAP_INDENT_SAME` (1): Wrapped sublines are\n      aligned to first subline indent.\n    * `_SCINTILLA.constants.SC_WRAP_INDENT_INDENT` (2): Wrapped sublines\n      are aligned to first subline indent plus one more level of\n      indentation.\n\n
wrap_mode buffer.wrap_mode [number]\nText word wrap mode.\n    * `_SCINTILLA.constants.SC_WRAP_NONE` (0): Disable line wrapping.\n    * `_SCINTILLA.constants.SC_WRAP_WORD` (1): Enable wrapping on word\n      boundaries.\n    * `_SCINTILLA.constants.SC_WRAP_CHAR` (2): Enable wrapping between any\n      characters.\n\n
wrap_start_indent buffer.wrap_start_indent [number]\nThe start indent for wrapped lines.\n
wrap_visual_flags buffer.wrap_visual_flags [number]\nThe display mode of visual flags for wrapped lines.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAG_NONE` (0): No visual flags.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAG_END` (1): Visual flag at end\n      of subline of a wrapped line.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAG_START` (2): Visual flag at\n      begin of subline of a wrapped line. Subline is indented by at least 1\n      to make room for the flag.\n\n
wrap_visual_flags_location buffer.wrap_visual_flags_location [number]\nThe location of visual flags for wrapped lines.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_DEFAULT` (0): Visual flags\n      drawn near border.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_END_BY_TEXT` (1): Visual\n      flag at end of subline drawn near text.\n    * `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_START_BY_TEXT` (2): Visual\n      flag at beginning of subline drawn near text.\n\n
write file:write(···)\nWrites the value of each of its arguments to `file`. The arguments\nmust be strings or numbers.  In case of success, this function returns\n`file`. Otherwise it returns nil plus a string describing the error.\n
write io.write(···)\nEquivalent to `io.output():write(···)`.\n
x_offset buffer.x_offset [number]\nThe horizontal scroll position. A value of `0` is the normal position with\nthe first text column visible at the left of the view.\n
xdigit lexer.xdigit\nMatches any hexadecimal digit (`0-9`, `A-F`, `a-f`).\n
xor bit32.xor(...)\nReturns the bitwise "exclusive or" of its operands.\n
xpcall _G.xpcall(f, msgh [, arg1, ···])\nThis function is similar to `pcall`, except that it sets a new message handler\n`msgh`.\n
yield coroutine.yield(···)\nSuspends the execution of the calling coroutine. Any arguments to `yield`\nare passed as extra results to `resume`.\n
zoom buffer.zoom [number]\nThe number of points added to the size of all fonts. It may be positive to\nmagnify or negative to reduce.\n
zoom_in buffer.zoom_in(buffer)\nMagnify the displayed text by increasing the sizes by 1 point if the current\nzoom factor is less than 20 points.\n@param buffer The global buffer.\n
zoom_out buffer.zoom_out(buffer)\nMake the displayed text smaller by decreasing the sizes by 1 point if the\ncurrent zoom factor is greater than -10 points.\n@param buffer The global buffer.\n