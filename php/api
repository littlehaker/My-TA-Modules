yaz_syntax yaz_syntax(resource $id, string $syntax) [void]\nSpecifies the preferred record syntax for retrieval. yaz_syntax() specifies\nthe preferred record syntax for retrieval This function should be called\nbefore yaz_search() or yaz_present().\n@param id The connection resource returned by yaz_connect().\n@param syntax The syntax must be specified as an OID (Object Identifier)\nin a raw dot-notation (like `1.2.840.10003.5.10`) or as one of the known\nregistered record syntaxes (sutrs, usmarc, grs1, xml, etc.).\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_wait yaz_wait([array &$options]) [mixed]\nWait for Z39.50 requests to complete. This function carries out networked\n(blocked) activity for outstanding requests which have been prepared by\nthe functions yaz_connect(), yaz_search(), yaz_present(), yaz_scan() and\nyaz_itemorder(). yaz_wait() returns when all servers have either completed\nall requests or aborted (in case of errors).\n@param options An associative array of options: `timeout` Sets timeout in\nseconds. If a server has not responded within the timeout it is considered\ndead and yaz_wait() returns. The default value for timeout is 15 seconds.\n@param event A boolean.\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yp_all yp_all(string $domain, string $map, string $callback) [void]\nTraverse the map and call a function on each entry. WarningThis function is\ncurrently not documented; only its argument list is available.\n@param domain The NIS domain name.\n@param map The NIS map.\n@param callback\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5)\n
yp_cat yp_cat(string $domain, string $map) [array]\nReturn an array containing the entire map. Returns all map entries.\n@param domain The NIS domain name.\n@param map The NIS map.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5)\n
yp_err_string yp_err_string(int $errorcode) [string]\nReturns the error string associated with the given error code. Returns the\nerror message associated with the given error code. Useful to indicate what\nexactly went wrong.\n@param errorcode The error code.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5)\n@see yp_errno() - Returns the error code of the previous operation\n
yp_errno yp_errno(void) [int]\nReturns the error code of the previous operation. Returns the error code of\nthe previous operation.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5)\n@see yp_err_string() - Returns the error string associated with the given\nerror code\n
yp_first yp_first(string $domain, string $map) [array]\nReturns the first key-value pair from the named map. Gets the first key-value\npair from the named `map` in the named `domain`.\n@param domain The NIS domain name.\n@param map The NIS map.\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n@see yp_next() - Returns the next key-value pair in the named map\n@see yp_get_default_domain() - Fetches the machine's default NIS domain\n
yp_get_default_domain yp_get_default_domain(void) [string]\nFetches the machine's default NIS domain. Returns the default domain of the\nnode. Can be used as the domain parameter for successive NIS calls. A NIS\ndomain can be described a group of NIS maps. Every host that needs to look\nup information binds itself to a certain domain. Refer to the documents\nmentioned at the beginning for more detailed information.\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n
yp_master yp_master(string $domain, string $map) [string]\nReturns the machine name of the master NIS server for a map. Returns the\nmachine name of the master NIS server for a `map`.\n@param domain The NIS domain name.\n@param map The NIS map.\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n@see yp_get_default_domain() - Fetches the machine's default NIS domain\n
yp_match yp_match(string $domain, string $map, string $key) [string]\nReturns the matched line. Returns the value associated with the passed `key`\nout of the specified `map`.\n@param domain The NIS domain name.\n@param map The NIS map.\n@param key This key must be exact.\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n@see yp_get_default_domain() - Fetches the machine's default NIS domain\n
yp_next yp_next(string $domain, string $map, string $key) [array]\nReturns the next key-value pair in the named map. Returns the next key-value\npair in the named `map` after the specified `key`.\n@param domain\n@param map\n@param key\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n@see yp_first() - Returns the first key-value pair from the named map\n@see yp_get_default_domain() - Fetches the machine's default NIS domain\n
yp_order yp_order(string $domain, string $map) [int]\nReturns the order number for a map. Gets the order number for a map.\n@param domain\n@param map\n@return (PHP 4, PHP 5 &lt;= 5.0.5)\n@see yp_get_default_domain() - Fetches the machine's default NIS domain\n
zend_logo_guid zend_logo_guid(void) [string]\nGets the Zend guid. This function returns the ID which can be used to display\nthe Zend logo using the built-in image.\n@return (PHP 4, PHP 5)\n@see php_logo_guid() - Gets the logo guid\n
zend_thread_id zend_thread_id(void) [int]\nReturns a unique identifier for the current thread. This function returns\na unique identifier for the current thread.\n@return (PHP 5)\n@note Note: This function is only available if PHP has been built with ZTS\n(Zend Thread Safety) support and debug mode (`--enable-debug`).\n
zend_version zend_version(void) [string]\nGets the version of the current Zend engine. Returns a string containing\nthe version of the currently running Zend Engine.\n@return (PHP 4, PHP 5)\n@see phpinfo() - Outputs information about PHP's configuration\n@see phpcredits() - Prints out the credits for PHP\n@see php_logo_guid() - Gets the logo guid\n@see phpversion() - Gets the current PHP version\n
zip_close zip_close(resource $zip) [void]\nClose a ZIP file archive. Closes the given ZIP file archive.\n@param zip A ZIP file previously opened with zip_open().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_read() - Read next entry in a ZIP file archive\n
zip_entry_close zip_entry_close(resource $zip_entry) [bool]\nClose a directory entry. Closes the specified directory entry.\n@param zip_entry A directory entry previously opened zip_entry_open().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_entry_open() - Open a directory entry for reading\n@see zip_entry_read() - Read from an open directory entry\n
zip_entry_compressedsize zip_entry_compressedsize(resource $zip_entry) [int]\nRetrieve the compressed size of a directory entry. Returns the compressed\nsize of the specified directory entry.\n@param zip_entry A directory entry returned by zip_read().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_read() - Read next entry in a ZIP file archive\n
zip_entry_compressionmethod zip_entry_compressionmethod(resource $zip_entry)\n[string]\nRetrieve the compression method of a directory entry. Returns the compression\nmethod of the directory entry specified by `zip_entry`.\n@param zip_entry A directory entry returned by zip_read().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_read() - Read next entry in a ZIP file archive\n
zip_entry_filesize zip_entry_filesize(resource $zip_entry) [int]\nRetrieve the actual file size of a directory entry. Returns the actual size\nof the specified directory entry.\n@param zip_entry A directory entry returned by zip_read().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_read() - Read next entry in a ZIP file archive\n
zip_entry_name zip_entry_name(resource $zip_entry) [string]\nRetrieve the name of a directory entry. Returns the name of the specified\ndirectory entry.\n@param zip_entry A directory entry returned by zip_read().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_read() - Read next entry in a ZIP file archive\n
zip_entry_open zip_entry_open(resource $zip, resource $zip_entry [, string\n$mode]) [bool]\nOpen a directory entry for reading. Opens a directory entry in a zip file\nfor reading.\n@param zip A valid resource handle returned by zip_open().\n@param zip_entry A directory entry returned by zip_read().\n@param mode Any of the modes specified in the documentation of fopen(). Note:\nCurrently, `mode` is ignored and is always `&quot;rb&quot;`. This is due to\nthe fact that zip support in PHP is read only access.\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_entry_close() - Close a directory entry\n@see zip_entry_read() - Read from an open directory entry\n
zip_entry_read zip_entry_read(resource $zip_entry [, int $length]) [string]\nRead from an open directory entry. Reads from an open directory entry.\n@param zip_entry A directory entry returned by zip_read().\n@param length The number of bytes to return. If not specified, this function\nwill attempt to read 1024 bytes. Note: This should be the uncompressed length\nyou wish to read.\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_entry_open() - Open a directory entry for reading\n@see zip_entry_close() - Close a directory entry\n@see zip_entry_filesize() - Retrieve the actual file size of a directory entry\n
zip_open zip_open(string $filename) [mixed]\nOpen a ZIP file archive. Opens a new zip archive for reading.\n@param filename The file name of the ZIP archive to open.\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_read() - Read next entry in a ZIP file archive\n@see zip_close() - Close a ZIP file archive\n
zip_read zip_read(resource $zip) [mixed]\nRead next entry in a ZIP file archive. Reads the next entry in a zip file\narchive.\n@param zip A ZIP file previously opened with zip_open().\n@return (PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0)\n@see zip_open() - Open a ZIP file archive\n@see zip_close() - Close a ZIP file archive\n@see zip_entry_open() - Open a directory entry for reading\n@see zip_entry_read() - Read from an open directory entry\n
addEmptyDir ZipArchive::addEmptyDir(string $dirname) [bool]\nAdd a new directory. Adds an empty directory in the archive.\n@param dirname The directory to add.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.8.0)\n
addFile ZipArchive::addFile(string $filename [, string $localname=NULL [,\nint $start=0 [, int $length=0]]]) [bool]\nAdds a file to a ZIP archive from the given path. Adds a file to a ZIP\narchive from a given path.\n@param filename The path to the file to add.\n@param localname If supplied, this is the local name inside the ZIP archive\nthat will override the `filename`.\n@param start This parameter is not used but is required to extend ZipArchive.\n@param length This parameter is not used but is required to extend ZipArchive.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n@note Note: When a file is set to be added to the archive, PHP will attempt\nto lock the file and it is only released once the ZIP operation is done. In\nshort, it means you can first delete an added file after the archive is closed.\n
addFromString ZipArchive::addFromString(string $localname, string $contents)\n[bool]\nAdd a file to a ZIP archive using its contents. Add a file to a ZIP archive\nusing its contents.\n@param localname The name of the entry to create.\n@param contents The contents to use to create the entry. It is used in a\nbinary safe mode.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
close ZipArchive::close(void) [bool]\nClose the active archive (opened or newly created). Close opened or created\narchive and save changes. This method is automatically called at the end of\nthe script.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
deleteIndex ZipArchive::deleteIndex(int $index) [bool]\ndelete an entry in the archive using its index. Delete an entry in the\narchive using its index.\n@param index Index of the entry to delete.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
deleteName ZipArchive::deleteName(string $name) [bool]\ndelete an entry in the archive using its name. Delete an entry in the archive\nusing its name.\n@param name Name of the entry to delete.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
extractTo ZipArchive::extractTo(string $destination [, mixed $entries]) [bool]\nExtract the archive contents. Extract the complete archive or the given\nfiles to the specified destination.\n@param destination Location where to extract the files.\n@param entries The entries to extract. It accepts either a single entry name\nor an array of names.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
getArchiveComment ZipArchive::getArchiveComment([int $flags]) [string]\nReturns the Zip archive comment. Returns the Zip archive comment.\n@param flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original\nunchanged comment is returned.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
getCommentIndex ZipArchive::getCommentIndex(int $index [, int $flags]) [string]\nReturns the comment of an entry using the entry index. Returns the comment\nof an entry using the entry index.\n@param index Index of the entry\n@param flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original\nunchanged comment is returned.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)\n
getCommentName ZipArchive::getCommentName(string $name [, int $flags]) [string]\nReturns the comment of an entry using the entry name. Returns the comment\nof an entry using the entry name.\n@param name Name of the entry\n@param flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original\nunchanged comment is returned.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)\n
getFromIndex ZipArchive::getFromIndex(int $index [, int $length=0 [, int\n$flags]]) [mixed]\nReturns the entry contents using its index. Returns the entry contents using\nits index.\n@param index Index of the entry\n@param length The length to be read from the entry. If `0`, then the entire\nentry is read.\n@param flags The flags to use to open the archive. the following values may\nbe ORed to it. ZIPARCHIVE::FL_UNCHANGED ZIPARCHIVE::FL_COMPRESSED\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.3.0)\n
getFromName ZipArchive::getFromName(string $name [, int $length=0 [, int\n$flags]]) [mixed]\nReturns the entry contents using its name. Returns the entry contents using\nits name.\n@param name Name of the entry\n@param length The length to be read from the entry. If `0`, then the entire\nentry is read.\n@param flags The flags to use to open the archive. the following values may\nbe ORed to it. ZIPARCHIVE::FL_UNCHANGED ZIPARCHIVE::FL_COMPRESSED\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
getNameIndex ZipArchive::getNameIndex(int $index [, int $flags]) [string]\nReturns the name of an entry using its index. Returns the name of an entry\nusing its index.\n@param index Index of the entry.\n@param flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original\nunchanged name is returned.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
getStatusString ZipArchive::getStatusString(void) [string]\nReturns the status error message, system and/or zip messages. Returns the\nstatus error message, system and/or zip messages.\n@return (PHP 5 >= 5.2.7)\n
getStream ZipArchive::getStream(string $name) [resource]\nGet a file handler to the entry defined by its name (read only).. Get a\nfile handler to the entry defined by its name. For now it only supports\nread operations.\n@param name The name of the entry to use.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
locateName ZipArchive::locateName(string $name [, int $flags]) [mixed]\nReturns the index of the entry in the archive. Locates an entry using its name.\n@param name The name of the entry to look up\n@param flags The flags are specified by ORing the following values, or 0\nfor none of them. ZIPARCHIVE::FL_NOCASE ZIPARCHIVE::FL_NODIR\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
open ZipArchive::open(string $filename [, int $flags]) [mixed]\nOpen a ZIP file archive. Opens a new zip archive for reading, writing or\nmodifying.\n@param filename The file name of the ZIP archive to open.\n@param flags The mode to use to open the archive. ZIPARCHIVE::OVERWRITE\nZIPARCHIVE::CREATE ZIPARCHIVE::EXCL ZIPARCHIVE::CHECKCONS\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
renameIndex ZipArchive::renameIndex(int $index, string $newname) [bool]\nRenames an entry defined by its index. Renames an entry defined by its index.\n@param index Index of the entry to rename.\n@param newname New name.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
renameName ZipArchive::renameName(string $name, string $newname) [bool]\nRenames an entry defined by its name. Renames an entry defined by its name.\n@param name Name of the entry to rename.\n@param newname New name.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
setArchiveComment ZipArchive::setArchiveComment(string $comment) [mixed]\nSet the comment of a ZIP archive. Set the comment of a ZIP archive.\n@param comment The contents of the comment.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)\n
setCommentIndex ZipArchive::setCommentIndex(int $index, string $comment)\n[mixed]\nSet the comment of an entry defined by its index. Set the comment of an\nentry defined by its index.\n@param index Index of the entry.\n@param comment The contents of the comment.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)\n
setCommentName ZipArchive::setCommentName(string $name, string $comment)\n[mixed]\nSet the comment of an entry defined by its name. Set the comment of an entry\ndefined by its name.\n@param name Name of the entry.\n@param comment The contents of the comment.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.4.0)\n
statIndex ZipArchive::statIndex(int $index [, int $flags]) [mixed]\nGet the details of an entry defined by its index.. The function obtains\ninformation about the entry defined by its index.\n@param index Index of the entry\n@param flags ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request information\nabout the original file in the archive, ignoring any changes made.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
statName ZipArchive::statName(name $name [, int $flags]) [mixed]\nGet the details of an entry defined by its name.. The function obtains\ninformation about the entry defined by its name.\n@param name Name of the entry\n@param flags The flags argument specifies how the name lookup should\nbe done. Also, ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request\ninformation about the original file in the archive, ignoring any changes\nmade. ZIPARCHIVE::FL_NOCASE ZIPARCHIVE::FL_NODIR ZIPARCHIVE::FL_UNCHANGED\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
unchangeAll ZipArchive::unchangeAll(void) [mixed]\nUndo all changes done in the archive. Undo all changes done in the archive.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
unchangeArchive ZipArchive::unchangeArchive(void) [mixed]\nRevert all global changes done in the archive.. Revert all global changes\nto the archive. For now, this only reverts archive comment changes.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
unchangeIndex ZipArchive::unchangeIndex(int $index) [mixed]\nRevert all changes done to an entry at the given index. Revert all changes\ndone to an entry at the given index.\n@param index Index of the entry.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.1.0)\n
unchangeName ZipArchive::unchangeName(string $name) [mixed]\nRevert all changes done to an entry with the given name.. Revert all changes\ndone to an entry.\n@param name Name of the entry.\n@return (PHP 5 >= 5.2.0, PECL zip >= 1.5.0)\n
zlib_get_coding_type zlib_get_coding_type(void) [string]\nReturns the coding type used for output compression. Returns the coding type\nused for output compression.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@see The zlib.output_compression directive\n
xmlrpc_server_add_introspection_data\nxmlrpc_server_add_introspection_data(resource $server, array $desc) [int]\nAdds introspection documentation.\n
xmlrpc_server_call_method xmlrpc_server_call_method(resource $server, string\n$xml, mixed $user_data [, array $output_options]) [string]\nParses XML requests and call methods.\n
xmlrpc_server_create xmlrpc_server_create(void) [resource]\nCreates an xmlrpc server.\n
xmlrpc_server_destroy xmlrpc_server_destroy(resource $server) [int]\nDestroys server resources.\n
xmlrpc_server_register_introspection_callback\nxmlrpc_server_register_introspection_callback(resource $server, string\n$function) [bool]\nRegister a PHP function to generate documentation.\n
xmlrpc_server_register_method xmlrpc_server_register_method(resource $server,\nstring $method_name, string $function) [bool]\nRegister a PHP function to resource method matching method_name.\n
xmlrpc_set_type xmlrpc_set_type(string &$value, string $type) [bool]\nSets xmlrpc type, base64 or datetime, for a PHP string value. Sets xmlrpc type,\nbase64 or datetime, for a PHP string value. This function is EXPERIMENTAL. The\nbehaviour of this function, its name, and surrounding documentation may\nchange without notice in a future release of PHP. This function should be\nused at your own risk.\n@param value Value to set the type\n@param type &#039;base64&#039; or &#039;datetime&#039;\n@return (PHP 4 >= 4.1.0, PHP 5)\n
endAttribute XMLWriter::endAttribute(void) [bool]\nEnd attribute. Ends the current attribute.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startAttribute() - Create start attribute\n@see XMLWriter::startAttributeNS() - Create start namespaced attribute\n@see XMLWriter::writeAttribute() - Write full attribute\n@see XMLWriter::writeAttributeNS() - Write full namespaced attribute\n
endCData XMLWriter::endCData(void) [bool]\nEnd current CDATA. Ends the current CDATA section.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startCData() - Create start CDATA tag\n@see XMLWriter::writeCData() - Write full CDATA tag\n
endComment XMLWriter::endComment(void) [bool]\nCreate end comment. Ends the current comment.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0)\n@see XMLWriter::startComment() - Create start comment\n@see XMLWriter::writeComment() - Write full comment tag\n
endDocument XMLWriter::endDocument(void) [bool]\nEnd current document. Ends the current document.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDocument() - Create document tag\n
endDTDAttlist XMLWriter::endDTDAttlist(void) [bool]\nEnd current DTD AttList. Ends the current DTD attribute list.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDAttlist() - Create start DTD AttList\n@see XMLWriter::writeDTDAttlist() - Write full DTD AttList tag\n
endDTDElement XMLWriter::endDTDElement(void) [bool]\nEnd current DTD element. Ends the current DTD element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDElement() - Create start DTD element\n@see XMLWriter::writeDTDElement() - Write full DTD element tag\n
endDTDEntity XMLWriter::endDTDEntity(void) [bool]\nEnd current DTD Entity. Ends the current DTD entity.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDEntity() - Create start DTD Entity\n@see XMLWriter::writeDTDEntity() - Write full DTD Entity tag\n
endDTD XMLWriter::endDTD(void) [bool]\nEnd current DTD. Ends the DTD of the document.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTD() - Create start DTD tag\n@see XMLWriter::writeDTD() - Write full DTD tag\n
endElement XMLWriter::endElement(void) [bool]\nEnd current element. Ends the current element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startElement() - Create start element tag\n@see XMLWriter::writeElement() - Write full element tag\n
endPI XMLWriter::endPI(void) [bool]\nEnd current PI. Ends the current processing instruction.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startPI() - Create start PI tag\n@see XMLWriter::writePI() - Writes a PI\n
flush XMLWriter::flush([bool $empty]) [mixed]\nFlush current buffer. Flushes the current buffer.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param empty Whether to empty the buffer or no. Default is TRUE.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0)\n
fullEndElement XMLWriter::fullEndElement(void) [bool]\nEnd current element. End the current xml element. Writes an end tag even if\nthe element is empty.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4)\n@see XMLWriter::endElement() - End current element\n
openMemory XMLWriter::openMemory(void) [bool]\nCreate new xmlwriter using memory for string output. Creates a new XMLWriter\nusing memory for string output.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::openURI() - Create new xmlwriter using source uri for output\n
openURI XMLWriter::openURI(string $uri) [bool]\nCreate new xmlwriter using source uri for output. Creates a new XMLWriter\nusing `uri` for the output.\n@param uri The URI of the resource for the output.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::openMemory() - Create new xmlwriter using memory for string\noutput\n
outputMemory XMLWriter::outputMemory([bool $flush]) [string]\nReturns current buffer. Returns the current buffer.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param flush Whether to flush the output buffer or no. Default is TRUE.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::flush() - Flush current buffer\n
setIndentString XMLWriter::setIndentString(string $indentString) [bool]\nSet string used for indenting. Sets the string which will be used to indent\neach element/attribute of the resulting xml.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param indentString The indentation string.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::setIndent() - Toggle indentation on/off\n
setIndent XMLWriter::setIndent(bool $indent) [bool]\nToggle indentation on/off. Toggles indentation on or off.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param indent Whether indentation is enabled.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::setIndentString() - Set string used for indenting\n
startAttributeNS XMLWriter::startAttributeNS(string $prefix, string $name,\nstring $uri) [bool]\nCreate start namespaced attribute. Starts a namespaced attribute.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param prefix The namespace prefix.\n@param name The attribute name.\n@param uri The namespace URI.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startAttribute() - Create start attribute\n@see XMLWriter::endAttribute() - End attribute\n@see XMLWriter::writeAttribute() - Write full attribute\n@see XMLWriter::writeAttributeNS() - Write full namespaced attribute\n
startAttribute XMLWriter::startAttribute(string $name) [bool]\nCreate start attribute. Starts an attribute.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The attribute name.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startAttributeNS() - Create start namespaced attribute\n@see XMLWriter::endAttribute() - End attribute\n@see XMLWriter::writeAttribute() - Write full attribute\n@see XMLWriter::writeAttributeNS() - Write full namespaced attribute\n
startCData XMLWriter::startCData(void) [bool]\nCreate start CDATA tag. Starts a CDATA.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endCData() - End current CDATA\n@see XMLWriter::writeCData() - Write full CDATA tag\n
startComment XMLWriter::startComment(void) [bool]\nCreate start comment. Starts a comment.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0)\n@see XMLWriter::endComment() - Create end comment\n@see XMLWriter::writeComment() - Write full comment tag\n
startDocument XMLWriter::startDocument([string $version [, string $encoding\n[, string $standalone]]]) [bool]\nCreate document tag. Starts a document.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param version The version number of the document as part of the XML\ndeclaration. Defaults to `1.0`.\n@param encoding The encoding of the document as part of the XML\ndeclaration. NULL by default.\n@param standalone `yes` or `no`.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endDocument() - End current document\n
startDTDAttlist XMLWriter::startDTDAttlist(string $name) [bool]\nCreate start DTD AttList. Starts a DTD attribute list.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The attribute list name.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endDTDAttlist() - End current DTD AttList\n@see XMLWriter::writeDTDAttlist() - Write full DTD AttList tag\n
startDTDElement XMLWriter::startDTDElement(string $qualifiedName) [bool]\nCreate start DTD element. Starts a DTD element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param qualifiedName The qualified name of the document type to create.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endDTDElement() - End current DTD element\n@see XMLWriter::writeDTDElement() - Write full DTD element tag\n
startDTDEntity XMLWriter::startDTDEntity(string $name, bool $isparam) [bool]\nCreate start DTD Entity. Starts a DTD entity.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The name of the entity.\n@param isparam\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endDTDEntity() - End current DTD Entity\n@see XMLWriter::writeDTDEntity() - Write full DTD Entity tag\n
startDTD XMLWriter::startDTD(string $qualifiedName [, string $publicId [,\nstring $systemId]]) [bool]\nCreate start DTD tag. Starts a DTD.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param qualifiedName The qualified name of the document type to create.\n@param publicId The external subset public identifier.\n@param systemId The external subset system identifier.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endDTD() - End current DTD\n@see XMLWriter::writeDTD() - Write full DTD tag\n
startElementNS XMLWriter::startElementNS(string $prefix, string $name,\nstring $uri) [bool]\nCreate start namespaced element tag. Starts a namespaced element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param prefix The namespace prefix.\n@param name The element name.\n@param uri The namespace URI.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endElement() - End current element\n@see XMLWriter::writeElementNS() - Write full namespaced element tag\n
startElement XMLWriter::startElement(string $name) [bool]\nCreate start element tag. Starts an element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The element name.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endElement() - End current element\n@see XMLWriter::writeElement() - Write full element tag\n
startPI XMLWriter::startPI(string $target) [bool]\nCreate start PI tag. Starts a processing instruction tag.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param target The target of the processing instruction.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::endPI() - End current PI\n@see XMLWriter::writePI() - Writes a PI\n
text XMLWriter::text(string $content) [bool]\nWrite text. Writes a text.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param content The contents of the text.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n
writeAttributeNS XMLWriter::writeAttributeNS(string $prefix, string $name,\nstring $uri, string $content) [bool]\nWrite full namespaced attribute. Writes a full namespaced attribute.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param prefix The namespace prefix.\n@param name The attribute name.\n@param uri The namespace URI.\n@param content The attribute value.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::writeAttribute() - Write full attribute\n@see XMLWriter::startAttribute() - Create start attribute\n@see XMLWriter::startAttributeNS() - Create start namespaced attribute\n@see XMLWriter::endAttribute() - End attribute\n
writeAttribute XMLWriter::writeAttribute(string $name, string $value) [bool]\nWrite full attribute. Writes a full attribute.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The name of the attribute.\n@param value The value of the attribute.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::writeAttributeNS() - Write full namespaced attribute\n@see XMLWriter::startAttribute() - Create start attribute\n@see XMLWriter::startAttributeNS() - Create start namespaced attribute\n@see XMLWriter::endAttribute() - End attribute\n
writeCData XMLWriter::writeCData(string $content) [bool]\nWrite full CDATA tag. Writes a full CDATA.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param content The contents of the CDATA.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startCData() - Create start CDATA tag\n@see XMLWriter::endCData() - End current CDATA\n
writeComment XMLWriter::writeComment(string $content) [bool]\nWrite full comment tag. Writes a full comment.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param content The contents of the comment.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startComment() - Create start comment\n@see XMLWriter::endComment() - Create end comment\n
writeDTDAttlist XMLWriter::writeDTDAttlist(string $name, string $content)\n[bool]\nWrite full DTD AttList tag. Writes a DTD attribute list.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The name of the DTD attribute list.\n@param content The content of the DTD attribute list.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDAttlist() - Create start DTD AttList\n@see XMLWriter::endDTDAttlist() - End current DTD AttList\n
writeDTDElement XMLWriter::writeDTDElement(string $name, string $content)\n[bool]\nWrite full DTD element tag. Writes a full DTD element.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The name of the DTD element.\n@param content The content of the element.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDElement() - Create start DTD element\n@see XMLWriter::endDTDElement() - End current DTD element\n
writeDTDEntity XMLWriter::writeDTDEntity(string $name, string $content,\nbool $pe, string $pubid, string $sysid, string $ndataid) [bool]\nWrite full DTD Entity tag. Writes a full DTD entity.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The name of the entity.\n@param content The content of the entity.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTDEntity() - Create start DTD Entity\n@see XMLWriter::endDTDEntity() - End current DTD Entity\n
writeDTD XMLWriter::writeDTD(string $name [, string $publicId [, string\n$systemId [, string $subset]]]) [bool]\nWrite full DTD tag. Writes a full DTD.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The DTD name.\n@param publicId The external subset public identifier.\n@param systemId The external subset system identifier.\n@param subset The content of the DTD.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startDTD() - Create start DTD tag\n@see XMLWriter::endDTD() - End current DTD\n
writeElementNS XMLWriter::writeElementNS(string $prefix, string $name,\nstring $uri [, string $content]) [bool]\nWrite full namespaced element tag. Writes a full namespaced element tag.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param prefix The namespace prefix.\n@param name The element name.\n@param uri The namespace URI.\n@param content The element contents.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startElementNS() - Create start namespaced element tag\n@see XMLWriter::endElement() - End current element\n@see XMLWriter::writeElement() - Write full element tag\n
writeElement XMLWriter::writeElement(string $name [, string $content]) [bool]\nWrite full element tag. Writes a full element tag.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param name The element name.\n@param content The element contents.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startElement() - Create start element tag\n@see XMLWriter::endElement() - End current element\n@see XMLWriter::writeElementNS() - Write full namespaced element tag\n
writePI XMLWriter::writePI(string $target, string $content) [bool]\nWrites a PI. Writes a processing instruction.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param target The target of the processing instruction.\n@param content The content of the processing instruction.\n@return (PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0)\n@see XMLWriter::startPI() - Create start PI tag\n@see XMLWriter::endPI() - End current PI\n
writeRaw XMLWriter::writeRaw(string $content) [bool]\nWrite a raw XML text. Writes a raw xml text.\n@param  xmlwriter Only for procedural calls. The XMLWriter resource that\nis being modified. This resource comes from a call to xmlwriter_open_uri()\nor xmlwriter_open_memory().\n@param content The text string to write.\n@return (PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4)\n@see XMLWriter::text() - Write text\n
xpath_eval_expression xpath_eval_expression(string $expression [, domnode\n$contextnode]) [XPathObject XPathContext::]\nEvaluates the XPath Location Path in the given string.  Example #1\nxpath_eval_expression() Example\n
xpath_eval xpath_eval(string $xpath_expression [, domnode $contextnode])\n[XPathObject XPathContext::]\nEvaluates the XPath Location Path in the given string. The optional\n`contextnode` can be specified for doing relative XPath queries. See also\nxpath_new_context().\n
xpath_new_context xpath_new_context(domdocument $dom_document) [XPathContext]\nCreates new xpath context. Creates a new xpath context.\n@see xpath_eval() - Evaluates the XPath Location Path in the given string\n
xpath_register_ns_auto xpath_register_ns_auto(XPathContext $xpath_context\n[, object $context_node]) [bool]\nRegister the given namespace in the passed XPath context.\n@return (PHP 4 >= 4.3.0)\n@see xpath_register_ns() - Register the given namespace in the passed\nXPath context\n
xpath_register_ns xpath_register_ns(XPathContext $xpath_context, string\n$prefix, string $uri) [bool]\nRegister the given namespace in the passed XPath context.\n@return (PHP 4 >= 4.2.0)\n@see xpath_register_ns_auto() - Register the given namespace in the passed\nXPath context\n
xptr_eval xptr_eval(string $eval_str [, domnode $contextnode]) [int\nXPathContext::]\nEvaluate the XPtr Location Path in the given string. WarningThis function\nis currently not documented; only its argument list is available.\n
xptr_new_context xptr_new_context(void) [XPathContext]\nCreate new XPath Context. WarningThis function is currently not documented;\nonly its argument list is available.\n
xslt_backend_info xslt_backend_info(void) [string]\nReturns the information on the compilation settings of the\nbackend. xslt_backend_info() gets information about the compilation settings\nof the backend.\n@return (PHP 4 >= 4.3.0)\n@see xslt_backend_name() - Returns the name of the backend\n@see xslt_backend_version() - Returns the version number of Sablotron\n
xslt_backend_name xslt_backend_name(void) [string]\nReturns the name of the backend. xslt_backend_name() gets the name of the\nbackend.\n@return (PHP 4 >= 4.3.0)\n@see xslt_backend_info() - Returns the information on the compilation settings\nof the backend\n@see xslt_backend_version() - Returns the version number of Sablotron\n
xslt_backend_version xslt_backend_version(void) [string]\nReturns the version number of Sablotron. xslt_backend_version() gets the\nversion number of Sablotron.\n@return (PHP 4 >= 4.3.0)\n@see xslt_backend_info() - Returns the information on the compilation settings\nof the backend\n@see xslt_backend_name() - Returns the name of the backend\n
xslt_create xslt_create(void) [resource]\nCreate a new XSLT processor. Create and return a new XSLT processor resource\nfor manipulation by the other XSLT functions.\n@return (PHP 4 >= 4.0.3)\n@see xslt_free() - Free XSLT processor\n
xslt_errno xslt_errno(resource $xh) [int]\nReturns an error number. Returns an error code describing the last error\nthat occurred on the passed XSLT processor.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.3)\n@see xslt_error() - Returns an error string\n
xslt_error xslt_error(resource $xh) [string]\nReturns an error string. Returns a string describing the last error that\noccurred on the passed XSLT processor.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.3)\n@see xslt_errno() - Returns an error number\n
xslt_free xslt_free(resource $xh) [void]\nFree XSLT processor. Free the XSLT processor identified by the given handle.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.3)\n@see xslt_create() - Create a new XSLT processor\n
xslt_getopt xslt_getopt(resource $processor) [int]\nGet options on a given xsl processor. xslt_getopt() returns the options on\nthe given `processor`.\n@param processor The XSLT processor link identifier, created with\nxslt_create().\n@return (PHP 4 >= 4.3.0)\n@see xslt_setopt() - Set options on a given xsl processor\n
xslt_process xslt_process(resource $xh, string $xmlcontainer, string\n$xslcontainer [, string $resultcontainer [, array $arguments [, array\n$parameters]]]) [mixed]\nPerform an XSLT transformation. The xslt_process() function is the crux of the\nXSLT extension. It allows you to perform an XSLT transformation using almost\nany type of input source - the containers. This is accomplished through the\nuse of argument buffers -- a concept taken from the Sablotron XSLT processor\n(currently the only XSLT processor this extension supports). The input\ncontainers default to a filename &#039;containing&#039; the document to\nbe processed.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@param xmlcontainer Path to XML file or placeholder for the XML argument.\n@param xslcontainer Path to XSL file or placeholder for the XML argument.\n@param resultcontainer The result container defaults to a filename for the\ntransformed document. If the result container is not specified - i.e. NULL -\nthan the result is returned.\n@param arguments Instead of files as the XML and XSLT arguments to the\nxslt_process() function, you can specify &quot;argument place holders&quot;\nwhich are then substituted by values given in the `arguments` array.\n@param parameters An array for any top-level parameters that will be\npassed to the XSLT document. These parameters can then be accessed within\nyour XSL files using the `&lt;xsl:param name=&quot;parameter_name&quot;>`\ninstruction. The parameters must be UTF-8 encoded and their values will\nbe interpreted as strings by the Sablotron processor. In other words -\nyou cannot pass `node-sets` as parameters to the XSLT document.\n@return (PHP 4 >= 4.0.3)\n@note Note: Please note that `file://` is needed in front of the path when\nusing Windows.\n
xslt_set_base xslt_set_base(resource $xh, string $uri) [void]\nSet the base URI for all XSLT transformations. Sets the base URI for all XSLT\ntransformations, the base URI is used with Xpath instructions to resolve\ndocument() and other commands which access external resources. It is also\nused to resolve URIs for the `&lt;xsl:include>` and `&lt;xsl:import>` elements.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@param uri The base URI to be used.\n@return (PHP 4 >= 4.0.5)\n@note Note: Please note that `file://` is needed in front of the path when\nusing Windows.\n
xslt_set_encoding xslt_set_encoding(resource $xh, string $encoding) [void]\nSet the encoding for the parsing of XML documents. Set the output encoding\nfor the XSLT transformations. When using the Sablotron backend, this option\nis only available when you compile Sablotron with encoding support.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@param encoding An output encoding, e.g `iso-8859-1`.\n@return (PHP 4 >= 4.0.5)\n
xslt_set_error_handler xslt_set_error_handler(resource $xh, mixed $handler)\n[void]\nSet an error handler for a XSLT processor. Set an error handler function\nfor the XSLT processor given by `xh`, this function will be called whenever\nan error occurs in the XSLT transformation (this function is also called\nfor notices).\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.4)\n@see xslt_set_object() - Sets the object in which to resolve callback\nfunctions if you want to use an object method as handler\n
xslt_set_log xslt_set_log(resource $xh [, mixed $log]) [void]\nSet the log file to write log messages to. This function allows you to set the\nfile in which you want XSLT log messages to, XSLT log messages are different\nthan error messages, in that log messages are not actually error messages\nbut rather messages related to the state of the XSLT processor. They are\nuseful for debugging XSLT, when something goes wrong. By default logging\nis disabled, in order to enable logging you must first call xslt_set_log()\nwith a boolean parameter which enables logging, then if you want to set the\nlog file to debug to, you must then pass it a string containing the filename.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@param log This parameter is either a boolean value which toggles logging\non and off, or a string containing the logfile in which log errors too.\n@return (PHP 4 >= 4.0.6)\n@note Note: Please note that `file://` is needed in front of the path when\nusing Windows.\n
xslt_set_object xslt_set_object(resource $processor, object &$obj) [bool]\nSets the object in which to resolve callback functions. This function allows to\nuse the `processor` inside an `object` and to resolve all callback functions\nin it. The callback functions can be declared with xslt_set_sax_handlers(),\nxslt_set_scheme_handlers() or xslt_set_error_handler() and are assumed to\nbe methods of `object`.\n@param processor The XSLT processor link identifier, created with\nxslt_create().\n@param obj An object.\n@return (PHP 4 >= 4.3.0)\n
xslt_set_sax_handler xslt_set_sax_handler(resource $xh, array $handlers) [void]\nSet SAX handlers for a XSLT processor. Set SAX handlers on the resource\nhandle given by `xh`.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.3)\n
xslt_set_sax_handlers xslt_set_sax_handlers(resource $processor, array\n$handlers) [void]\nSet the SAX handlers to be called when the XML document gets\nprocessed. xslt_set_sax_handlers() registers the SAX `handlers` for the\ndocument, given a XSLT `processor` resource. Using xslt_set_sax_handlers()\ndoesn&#039;t look very different than running a SAX parser like xml_parse()\non the result of an xslt_process() transformation.\n@param processor The XSLT processor link identifier, created with\nxslt_create().\n@return (PHP 4 >= 4.0.6)\n
xslt_set_scheme_handler xslt_set_scheme_handler(resource $xh, array $handlers)\n[void]\nSet Scheme handlers for a XSLT processor. Set Scheme handlers on the resource\nhandle given by `xh`.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.5)\n
xslt_set_scheme_handlers xslt_set_scheme_handlers(resource $xh, array\n$handlers) [void]\nSet the scheme handlers for the XSLT processor. Registers the scheme handlers\n(XPath handlers) for the document.\n@param xh The XSLT processor link identifier, created with xslt_create().\n@return (PHP 4 >= 4.0.6)\n@see xslt_set_scheme_handler() - Set Scheme handlers for a XSLT processor\n
xslt_setopt xslt_setopt(resource $processor, int $newmask) [mixed]\nSet options on a given xsl processor. xslt_setopt() sets the options specified\nby `newmask` on the given `processor`.\n@param processor The XSLT processor link identifier, created with\nxslt_create().\n@param newmask `newmask` is a bitmask constructed with the\nfollowing constants: XSLT_SABOPT_PARSE_PUBLIC_ENTITIES - Tell\nthe processor to parse public entities. By default this has been\nturned off. XSLT_SABOPT_DISABLE_ADDING_META - Do not add the meta tag\n&quot;Content-Type&quot; for HTML output. The default is set during the\ncompilation of the processor. XSLT_SABOPT_DISABLE_STRIPPING - Suppress the\nwhitespace stripping (on data files only). XSLT_SABOPT_IGNORE_DOC_NOT_FOUND -\nConsider unresolved documents (the document() function) non-lethal.\n@return (PHP 4 >= 4.3.0)\n@see xslt_getopt() - Get options on a given xsl processor\n
yaml_emit_file yaml_emit_file(string $filename, mixed $data [, int\n$encoding=YAML_ANY_ENCODING [, int $linebreak=YAML_ANY_BREAK]]) [bool]\nSend the YAML representation of a value to a file. Generate a YAML\nrepresentation of the provided `data` in the `filename`.\n@param filename Path to the file.\n@param data The `data` being encoded. Can be any type except a resource.\n@param encoding Output character encoding chosen from YAML_ANY_ENCODING,\nYAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING. Defaults\nto YAML_ANY_ENCODING.\n@param linebreak Output linebreak style chosen from YAML_ANY_BREAK,\nYAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK. Defaults to YAML_ANY_BREAK.\n@return (PECL yaml >= 0.5.0)\n@see yaml_emit() - Returns the YAML representation of a value\n@see yaml_parse() - Parse a YAML stream\n
yaml_emit yaml_emit(mixed $data [, int $encoding=YAML_ANY_ENCODING [, int\n$linebreak=YAML_ANY_BREAK]]) [string]\nReturns the YAML representation of a value. Generate a YAML representation\nof the provided `data`.\n@param data The `data` being encoded. Can be any type except a resource.\n@param encoding Output character encoding chosen from YAML_ANY_ENCODING,\nYAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING. Defaults\nto YAML_ANY_ENCODING.\n@param linebreak Output linebreak style chosen from YAML_ANY_BREAK,\nYAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK. Defaults to YAML_ANY_BREAK.\n@return (PECL yaml >= 0.5.0)\n@see yaml_emit_file() - Send the YAML representation of a value to a file\n@see yaml_parse() - Parse a YAML stream\n
yaml_parse_file yaml_parse_file(string $filename [, int $pos=0 [, int &$ndocs\n[, array $callbacks]]]) [mixed]\nParse a YAML stream from a file. Convert all or part of a YAML document\nstream read from a file to a PHP variable.\n@param filename Path to the file.\n@param pos Document to extract from stream (`-1` for all documents, `0`\nfor first document, ...).\n@param ndocs If `ndocs` is provided, then it is filled with the number of\ndocuments found in stream.\n@param callbacks Content handlers for YAML nodes. Associative array of YAML\ntag => callback mappings.\n@return (PECL yaml >= 0.4.0)\n@see yaml_parse() - Parse a YAML stream\n@see yaml_parse_url() - Parse a Yaml stream from a URL\n@see yaml_emit() - Returns the YAML representation of a value\n
yaml_parse_url yaml_parse_url(string $url [, int $pos=0 [, int &$ndocs [,\narray $callbacks]]]) [mixed]\nParse a Yaml stream from a URL. Convert all or part of a YAML document stream\nread from a URL to a PHP variable.\n@param url `url` should be of the form &quot;scheme://...&quot;. PHP will\nsearch for a protocol handler (also known as a wrapper) for that scheme. If\nno wrappers for that protocol are registered, PHP will emit a notice to\nhelp you track potential problems in your script and then continue as though\nfilename specifies a regular file.\n@param pos Document to extract from stream (`-1` for all documents, `0`\nfor first document, ...).\n@param ndocs If `ndocs` is provided, then it is filled with the number of\ndocuments found in stream.\n@param callbacks Content handlers for YAML nodes. Associative array of YAML\ntag => callback mappings.\n@return (PECL yaml >= 0.4.0)\n@see yaml_parse() - Parse a YAML stream\n@see yaml_parse_file() - Parse a YAML stream from a file\n@see yaml_emit() - Returns the YAML representation of a value\n
yaml_parse yaml_parse(string $input [, int $pos=0 [, int &$ndocs [, array\n$callbacks]]]) [mixed]\nParse a YAML stream. Convert all or part of a YAML document stream to a\nPHP variable.\n@param input The string to parse as a YAML document stream.\n@param pos Document to extract from stream (`-1` for all documents, `0`\nfor first document, ...).\n@param ndocs If `ndocs` is provided, then it is filled with the number of\ndocuments found in stream.\n@param callbacks Content handlers for YAML nodes. Associative array of YAML\ntag => callback mappings.\n@return (PECL yaml >= 0.4.0)\n@see yaml_parse_file() - Parse a YAML stream from a file\n@see yaml_parse_url() - Parse a Yaml stream from a URL\n@see yaml_emit() - Returns the YAML representation of a value\n
yaz_addinfo yaz_addinfo(resource $id) [string]\nReturns additional error information. Returns additional error information\nfor the last request on the server. With some servers, this function may\nreturn the same string as yaz_error().\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n@see yaz_error() - Returns error description\n@see yaz_errno() - Returns error number\n
yaz_ccl_conf yaz_ccl_conf(resource $id, array $config) [void]\nConfigure CCL parser. This function configures the CCL query parser for a\nserver with definitions of access points (CCL qualifiers) and their mapping\nto RPN. To map a specific CCL query to RPN afterwards call the yaz_ccl_parse()\nfunction.\n@param id The connection resource returned by yaz_connect().\n@param config An array of configuration. Each key of the array is the name\nof a CCL field and the corresponding value holds a string that specifies a\nmapping to RPN. The mapping is a sequence of attribute-type, attribute-value\npairs. Attribute-type and attribute-value is separated by an equal sign\n(`=`). Each pair is separated by white space. Additional information can be\nfound on the &raquo; CCL page.\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n@see yaz_ccl_parse() - Invoke CCL Parser\n
yaz_ccl_parse yaz_ccl_parse(resource $id, string $query, array &$result) [bool]\nInvoke CCL Parser. This function invokes a CCL parser. It converts a given CCL\nFIND query to an RPN query which may be passed to the yaz_search() function\nto perform a search. To define a set of valid CCL fields call yaz_ccl_conf()\nprior to this function.\n@param id The connection resource returned by yaz_connect().\n@param query The CCL FIND query.\n@param result If the function was executed successfully, this will be an\narray containing the valid RPN query under the key `rpn`. Upon failure, three\nindexes are set in this array to indicate the cause of failure: `errorcode` -\nthe CCL error code (integer) `errorstring` - the CCL error string `errorpos`\n- approximate position in query of failure (integer is character position)\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n
yaz_close yaz_close(resource $id) [bool]\nClose YAZ connection. Closes the connection given by parameter `id`. Note:\nThis function will only close a non-persistent connection opened by setting\nthe `persistent` option to FALSE with yaz_connect().\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n@see yaz_connect() - Prepares for a connection to a Z39.50 server\n
yaz_connect yaz_connect(string $zurl [, mixed $options]) [mixed]\nPrepares for a connection to a Z39.50 server. This function returns a\nconnection resource on success, zero on failure. yaz_connect() prepares\nfor a connection to a Z39.50 server. This function is non-blocking and does\nnot attempt to establish a connection - it merely prepares a connect to be\nperformed later when yaz_wait() is called. Note: The &raquo; YAZ proxy is\na freely available Z39.50 proxy.\n@param zurl A string that takes the form `host[:port][/database]`. If port\nis omitted, port 210 is used. If database is omitted `Default` is used.\n@param options If given as a string, it is treated as the Z39.50 V2\nauthentication string (OpenAuth). If given as an array, the contents of the\narray serves as options. user Username for authentication.\n@param group Group for authentication.\n@param password Password for authentication.\n@param cookie Cookie for session (YAZ proxy).\n@param proxy Proxy for connection (YAZ proxy).\n@param persistent A boolean. If TRUE the connection is persistent; If FALSE the\nconnection is not persistent. By default connections are persistent. Note:\nIf you open a persistent connection, you won&#039;t be able to close it\nlater with yaz_close().\n@param piggyback A boolean. If TRUE piggyback is enabled for searches; If FALSE\npiggyback is disabled. By default piggyback is enabled. Enabling piggyback is\nmore efficient and usually saves a network-round-trip for first time fetches\nof records. However, a few Z39.50 servers do not support piggyback or they\nignore element set names. For those, piggyback should be disabled.\n@param charset A string that specifies character set to be used in Z39.50\nlanguage and character set negotiation. Use strings such as: `ISO-8859-1`,\n`UTF-8`, `UTF-16`. Most Z39.50 servers do not support this feature (and thus,\nthis is ignored). Many servers use the ISO-8859-1 encoding for queries and\nmessages. MARC21/USMARC records are not affected by this setting.\n@param preferredMessageSize An integer that specifies the maximum byte size\nof all records to be returned by a target during retrieval. See the &raquo;\nZ39.50 standard for more information. Note: This option is supported in PECL\nYAZ 1.0.5 or later.\n@param maximumRecordSize An integer that specifies the maximum byte size of\na single record to be returned by a target during retrieval. This entity is\nreferred to as Exceptional-record-size in the &raquo; Z39.50 standard. Note:\nThis option is supported in PECL YAZ 1.0.5 or later.\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n@see yaz_close() - Close YAZ connection\n
yaz_database yaz_database(resource $id, string $databases) [bool]\nSpecifies the databases within a session. This function allows you to\nchange databases within a session by specifying one or more databases to\nbe used in search, retrieval, etc. - overriding databases specified in call\nto yaz_connect().\n@param id The connection resource returned by yaz_connect().\n@param databases A string containing one or more databases. Multiple databases\nare separated by a plus sign `+`.\n@return (PHP 4 >= 4.0.6, PECL yaz >= 0.9.0)\n
yaz_element yaz_element(resource $id, string $elementset) [bool]\nSpecifies Element-Set Name for retrieval. This function sets the element set\nname for retrieval. Call this function before yaz_search() or yaz_present()\nto specify the element set name for records to be retrieved. Note: If this\nfunction appears to have no effect, see the description of the `piggybacking`\noption in yaz_connect().\n@param id The connection resource returned by yaz_connect().\n@param elementset Most servers support `F` (for full records) and `B`\n(for brief records).\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_errno yaz_errno(resource $id) [int]\nReturns error number. Returns an error number for the server (last request)\nidentified by `id`. yaz_errno() should be called after network activity for\neach server - (after yaz_wait() returns) to determine the success or failure\nof the last operation (e.g. search).\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n@see yaz_error() - Returns error description\n@see yaz_addinfo() - Returns additional error information\n
yaz_error yaz_error(resource $id) [string]\nReturns error description. yaz_error() returns an English text message\ncorresponding to the last error number as returned by yaz_errno().\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n@see yaz_errno() - Returns error number\n@see yaz_addinfo() - Returns additional error information\n
yaz_es_result yaz_es_result(resource $id) [array]\nInspects Extended Services Result. This function inspects the last returned\nExtended Service result from a server. An Extended Service is initiated by\neither yaz_item_order() or yaz_es().\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.2.0, PECL yaz >= 0.9.0)\n@see yaz_es() - Prepares for an Extended Service Request\n
yaz_es yaz_es(resource $id, string $type, array $args) [void]\nPrepares for an Extended Service Request. This function prepares for an\nExtended Service Request. Extended Services is family of various Z39.50\nfacilities, such as Record Update, Item Order, Database administration\netc. Note: Many Z39.50 Servers do not support Extended Services. The yaz_es()\ncreates an Extended Service Request packages and puts it into a queue\nof operations. Use yaz_wait() to send the request(s) to the server. After\ncompletion of yaz_wait() the result of the Extended Service operation should\nbe expected with a call to yaz_es_result().\n@param id The connection resource returned by yaz_connect().\n@param type A string which represents the type of the Extended Service:\n`itemorder` (Item Order), `create` (Create Database), `drop` (Drop Database),\n`commit` (Commit Operation), `update` (Update Record), `xmlupdate` (XML\nUpdate). Each type is specified in the following section.\n@param args An array with extended service options plus package specific\noptions. The options are identical to those offered in the C API of ZOOM\nC. Refer to the ZOOM &raquo; Extended Services.\n@return (PECL yaz >= 0.9.0)\n@see yaz_es_result() - Inspects Extended Services Result\n
yaz_get_option yaz_get_option(resource $id, string $name) [string]\nReturns value of option for connection. Returns the value of the option\nspecified with `name`.\n@param id The connection resource returned by yaz_connect().\n@param name The option name.\n@return (PECL yaz >= 0.9.0)\n@see The description of yaz_set_option() - Sets one or more options for\nconnection for available options\n
yaz_hits yaz_hits(resource $id [, array &$searchresult]) [int]\nReturns number of hits for last search. yaz_hits() returns the number of\nhits for the last search.\n@param id The connection resource returned by yaz_connect().\n@param searchresult Result array for detailed search result information.\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_itemorder yaz_itemorder(resource $id, array $args) [void]\nPrepares for Z39.50 Item Order with an ILL-Request package. This function\nprepares for an Extended Services request using the Profile for the Use of\nZ39.50 Item Order Extended Service to Transport ILL (Profile/1). See &raquo;\nthis and the &raquo; specification.\n@param id The connection resource returned by yaz_connect().\n@param args Must be an associative array with information about the\nItem Order request to be sent. The key of the hash is the name of the\ncorresponding ASN.1 tag path. For example, the ISBN below the Item-ID has\nthe key item-id,ISBN. The ILL-Request parameters are: protocol-version-num\ntransaction-id,initial-requester-id,person-or-institution-symbol,person\ntransaction-id,initial-requester-id,person-or-institution-symbol,institution\ntransaction-id,initial-requester-id,name-of-person-or-institution,name-of-person\ntransaction-id,initial-requester-id,name-of-person-or-institution,name-of-institution\ntransaction-id,transaction-group-qualifier\ntransaction-id,transaction-qualifier transaction-id,sub-transaction-qualifier\nservice-date-time,this,date service-date-time,this,time\nservice-date-time,original,date service-date-time,original,time\nrequester-id,person-or-institution-symbol,person\nrequester-id,person-or-institution-symbol,institution\nrequester-id,name-of-person-or-institution,name-of-person\nrequester-id,name-of-person-or-institution,name-of-institution\nresponder-id,person-or-institution-symbol,person\nresponder-id,person-or-institution-symbol,institution\nresponder-id,name-of-person-or-institution,name-of-person\nresponder-id,name-of-person-or-institution,name-of-institution transaction-type\ndelivery-address,postal-address,name-of-person-or-institution,name-of-person\ndelivery-address,postal-address,name-of-person-or-institution,name-of-institution\ndelivery-address,postal-address,extended-postal-delivery-address\ndelivery-address,postal-address,street-and-number\ndelivery-address,postal-address,post-office-box\ndelivery-address,postal-address,city delivery-address,postal-address,region\ndelivery-address,postal-address,country\ndelivery-address,postal-address,postal-code\ndelivery-address,electronic-address,telecom-service-identifier\ndelivery-address,electronic-address,telecom-service-addreess\nbilling-address,postal-address,name-of-person-or-institution,name-of-person\nbilling-address,postal-address,name-of-person-or-institution,name-of-institution\nbilling-address,postal-address,extended-postal-delivery-address\nbilling-address,postal-address,street-and-number\nbilling-address,postal-address,post-office-box\nbilling-address,postal-address,city billing-address,postal-address,region\nbilling-address,postal-address,country\nbilling-address,postal-address,postal-code\nbilling-address,electronic-address,telecom-service-identifier\nbilling-address,electronic-address,telecom-service-addreess\nill-service-type requester-optional-messages,can-send-RECEIVED\nrequester-optional-messages,can-send-RETURNED\nrequester-optional-messages,requester-SHIPPED\nrequester-optional-messages,requester-CHECKED-IN search-type,level-of-service\nsearch-type,need-before-date search-type,expiry-date search-type,expiry-flag\nplace-on-hold client-id,client-name client-id,client-status\nclient-id,client-identifier item-id,item-type item-id,call-number\nitem-id,author item-id,title item-id,sub-title item-id,sponsoring-body\nitem-id,place-of-publication item-id,publisher item-id,series-title-number\nitem-id,volume-issue item-id,edition item-id,publication-date\nitem-id,publication-date-of-component item-id,author-of-article\nitem-id,title-of-article item-id,pagination item-id,ISBN item-id,ISSN\nitem-id,additional-no-letters item-id,verification-reference-source\ncopyright-complicance retry-flag forward-flag requester-note forward-note\nThere are also a few parameters that are part of the Extended Services\nRequest package and the ItemOrder package: package-name user-id contact-name\ncontact-phone contact-email itemorder-item\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n
yaz_present yaz_present(resource $id) [bool]\nPrepares for retrieval (Z39.50 present). This function prepares for retrieval\nof records after a successful search. The yaz_range() function should be\ncalled prior to this function to specify the range of records to be retrieved.\n@param id The connection resource returned by yaz_connect().\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n
yaz_range yaz_range(resource $id, int $start, int $number) [void]\nSpecifies a range of records to retrieve. Specifies a range of records to\nretrieve. This function should be called before yaz_search() or yaz_present().\n@param id The connection resource returned by yaz_connect().\n@param start Specifies the position of the first record to be retrieved. The\nrecords numbers goes from 1 to yaz_hits().\n@param number Specifies the number of records to be retrieved.\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_record yaz_record(resource $id, int $pos, string $type) [string]\nReturns a record. The yaz_record() function inspects a record in the current\nresult set at the position specified by parameter `pos`.\n@param id The connection resource returned by yaz_connect().\n@param pos The record position. Records positions in a result set are numbered\n1, 2, ... $hits where $hits is the count returned by yaz_hits().\n@param type The `type` specifies the form of the returned record. Note:\nIt is the application which is responsible for actually ensuring that the\nrecords are returned from the Z39.50/SRW server in the proper format. The\ntype given only specifies a conversion to take place on the client side\n(in PHP/YAZ). Besides conversion of the transfer record to a string/array,\nPHP/YAZ it is also possible to perform a character set conversion of the\nrecord. Especially for USMARC/MARC21 that is recommended since these are\ntypically returned in the character set MARC-8 that is not supported by\nbrowsers, etc. To specify a conversion, add `; charset=`from`, `to where from\nis the original character set of the record and to is the resulting character\nset (as seen by PHP). `string` The record is returned as a string for simple\ndisplay. In this mode, all MARC records are converted to a line-by-line format\nsince ISO2709 is hardly readable. XML records and SUTRS are returned in their\noriginal format. GRS-1 are returned in a (ugly) line-by-line format. This\nformat is suitable if records are to be displayed in a quick way - for\ndebugging - or because it is not feasible to perform proper display.\n@param xml The record is returned as an XML string if possible. In this mode,\nall MARC records are converted to &raquo; MARCXML. XML records and SUTRS\nare returned in their original format. GRS-1 is not supported. This format\nis similar to `string` except that MARC records are converted to MARCXML\nThis format is suitable if records are processed by an XML parser or XSLT\nprocessor afterwards.\n@param raw The record is returned as a string in its original form. This type\nis suitable for MARC, XML and SUTRS. It does not work for GRS-1. MARC records\nare returned as a ISO2709 string. XML and SUTRS are returned as strings.\n@param syntax The syntax of the record is returned as a string, i.e. `USmarc`,\n`GRS-1`, `XML`, etc.\n@param database The name of database associated with record at the position\nis returned as a string.\n@param array The record is returned as an array that reflects the GRS-1\nstructure. This type is suitable for MARC and GRS-1. XML, SUTRS are not\nsupported and if the actual record is XML or SUTRS an empty string will\nbe returned. The array returned consists of a list corresponding to each\nleaf/internal node of GRS-1. Each list item consists a sub list with first\nelement path and data (if data is available). The path which is a string holds\na list of each tree component (of the structured GRS-1 record) from root to\nleaf. Each component is a tag type, tag value pair of the form `(`type`,`\nvalue String tags normally has a corresponding tag type 3. MARC can also be\nreturned as an array (they are converted to GRS-1 internally).\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_scan_result yaz_scan_result(resource $id [, array &$result]) [array]\nReturns Scan Response result. yaz_scan_result() returns terms and associated\ninformation as received from the server in the last performed yaz_scan().\n@param id The connection resource returned by yaz_connect().\n@param result If given, this array will be modified to hold additional\ninformation taken from the Scan Response: `number` - Number of entries returned\n`stepsize` - Step size `position` - Position of term `status` - Scan status\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n
yaz_scan yaz_scan(resource $id, string $type, string $startterm [, array\n$flags]) [void]\nPrepares for a scan. This function prepares for a Z39.50 Scan Request on the\nspecified connection. To actually transfer the Scan Request to the server\nand receive the Scan Response, yaz_wait() must be called. Upon completion\nof yaz_wait() call yaz_error() and yaz_scan_result() to handle the response.\n@param id The connection resource returned by yaz_connect().\n@param type Currently only type `rpn` is supported.\n@param startterm Starting term point for the scan. The form in which the\nstarting term is specified is given by parameter `type`. The syntax this\nparameter is similar to the RPN query as described in yaz_search(). It\nconsists of zero or more `@attr`-operator specifications, then followed by\nexactly one token.\n@param flags This optional parameter specifies additional information to\ncontrol the behaviour of the scan request. Three indexes are currently\nread from the flags array: `number` (number of terms requested), `position`\n(preferred position of term) and `stepSize` (preferred step size).\n@return (PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)\n
yaz_schema yaz_schema(resource $id, string $schema) [void]\nSpecifies schema for retrieval. yaz_schema() specifies the schema for\nretrieval. This function should be called before yaz_search() or yaz_present().\n@param id The connection resource returned by yaz_connect().\n@param schema Must be specified as an OID (Object Identifier) in a raw\ndot-notation (like `1.2.840.10003.13.4`) or as one of the known registered\nschemas: `GILS-schema`, `Holdings`, `Zthes`, ...\n@return (PHP 4 >= 4.2.0, PECL yaz >= 0.9.0)\n
yaz_search yaz_search(resource $id, string $type, string $query) [bool]\nPrepares for a search. yaz_search() prepares for a search on the given\nconnection. Like yaz_connect() this function is non-blocking and only prepares\nfor a search to be executed later when yaz_wait() is called.\n@param id The connection resource returned by yaz_connect().\n@param type This parameter represents the query type - only `&quot;rpn&quot;`\nis supported now in which case the third argument specifies a Type-1 query\nin prefix query notation.\n@param query The RPN query is a textual representation of the Type-1 query as\ndefined by the Z39.50 standard. However, in the text representation as used by\nYAZ a prefix notation is used, that is the operator precedes the operands. The\nquery string is a sequence of tokens where white space is ignored unless\nsurrounded by double quotes. Tokens beginning with an at-character (`@`)\nare considered operators, otherwise they are treated as search terms. RPN\nOperators Construct Description `@and` query1 query2 intersection of query1\nand query2 `@or` query1 query2 union of query1 and query2 `@not` query1\nquery2 query1 and not query2 `@set` name result set reference `@attrset` set\nquery specifies attribute-set for query. This construction is only allowed\nonce - in the beginning of the whole query `@attr` [set] type=value query\napplies attribute to query. The type and value are integers specifying the\nattribute-type and attribute-value respectively. The set, if given, specifies\nthe attribute-set. You can find information about attributes at the &raquo;\nZ39.50 Maintenance Agency site. Note: If you would like to use a more friendly\nnotation, use the CCL parser - functions yaz_ccl_conf() and yaz_ccl_parse().\n@return (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)\n
yaz_set_option yaz_set_option(resource $id, string $name, string $value) [void]\nSets one or more options for connection. Sets one or more options on the\ngiven connection.\n@param id The connection resource returned by yaz_connect().\n@param name or `options` May be either a string or an array. If given as a\nstring, this will be the name of the option to set. You&#039;ll need to give\nit&#039;s `value`. If given as an array, this will be an associative array\n(option name => option value). PHP/YAZ Connection Options Name Description\nimplementationName implementation name of server implementationVersion\nimplementation version of server implementationId implementation ID of server\nschema schema for retrieval. By default, no schema is used. Setting this option\nis equivalent to using function yaz_schema() preferredRecordSyntax record\nsyntax for retrieval. By default, no syntax is used. Setting this option is\nequivalent to using function yaz_syntax() start offset for first record to\nbe retrieved via yaz_search() or yaz_present(). First record is numbered has\na start value of 0. Second record has start value 1. Setting this option in\ncombination with option `count` has the same effect as calling yaz_range()\nexcept that records are numbered from 1 in yaz_range() count maximum number\nof records to be retrieved via yaz_search() or yaz_present(). elementSetName\nelement-set-name for retrieval. Setting this option is equivalent to calling\nyaz_element().\n@param value The new value of the option. Use this only if the previous\nargument is a string.\n@return (PECL yaz >= 0.9.0)\n
yaz_sort yaz_sort(resource $id, string $criteria) [void]\nSets sorting criteria. This function sets sorting criteria and enables Z39.50\nSort. Call this function before yaz_search(). Using this function alone does\nnot have any effect. When used in conjunction with yaz_search(), a Z39.50\nSort will be sent after a search response has been received and before any\nrecords are retrieved with Z39.50 Present (yaz_present().\n@param id The connection resource returned by yaz_connect().\n@param criteria A string that takes the form field1 flags1 field2 flags2\nwhere field1 specifies the primary attributes for sort, field2 seconds,\netc.. The field specifies either a numerical attribute combinations consisting\nof type=value pairs separated by comma (e.g. `1=4,2=1`) ; or the field may\nspecify a plain string criteria (e.g. `title`. The flags is a sequence of\nthe following characters which may not be separated by any white space. Sort\nFlags `a` Sort ascending\n@param d Sort descending\n@param i Case insensitive sorting\n@param s Case sensitive sorting\n@return (PHP 4 >= 4.0.7, PECL yaz >= 0.9.0)\n
vsprintf vsprintf(string $format, array $args) [string]\nReturn a formatted string. Operates as sprintf() but accepts an array of\narguments, rather than a variable number of arguments.\n@param format See sprintf() for a description of `format`.\n@param args\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see sprintf() - Return a formatted string\n@see vprintf() - Output a formatted string\n
w32api_deftype w32api_deftype(string $typename, string $member1_type, string\n$member1_name [, string $... [, string $...]]) [bool]\nDefines a type for use with other w32api_functions. You need to call this\nfunction if you would like to define a type for a w32api call.\n@param typename The name of the type.\n@param member1_type A member type can be a user defined type. All the type\nnames are case sensitive. Built in type names should be provided in lowercase.\n@param member1_name The member name of `member1_type`.\n@param ...\n@param ...\n@return (PHP 4 >= 4.2.0)\n
w32api_init_dtype w32api_init_dtype(string $typename, mixed $value [, mixed\n$...]) [resource]\nCreates an instance of the data type typename and fills it with the values\npassed. This function creates an instance of the data type named `typename`,\nfilling in the values of the data type.\n@param typename The `typename` parameter is case sensitive.\n@param value You should give the values in the same order as you defined\nthe data type with w32api_deftype().\n@param ...\n@return (PHP 4 >= 4.2.0)\n
w32api_invoke_function w32api_invoke_function(string $funcname, mixed $argument\n[, mixed $...]) [mixed]\nInvokes function funcname with the arguments passed after the function\nname. w32api_invoke_function() tries to find the previously registered\nfunction, passing the parameters you provided.\n@param funcname The function name.\n@param argument Any of the arguments can be of any PHP type or w32api_deftype()\ndefined type, as needed.\n@param ...\n@return (PHP 4 >= 4.2.0)\n
w32api_register_function w32api_register_function(string $library, string\n$function_name, string $return_type) [bool]\nRegisters function function_name from library with PHP. This function tries\nto find the `function_name` function in `library`, and tries to import it\ninto PHP.\n@param library The library name, as a string.\n@param function_name The function name, as a string.\n@param return_type The function will be registered with the given\n`return_type`. This type can be a generic PHP type, or a type defined with\nw32api_deftype(). All type names are case sensitive. Built in type names\nshould be provided in lowercase.\n@return (PHP 4 >= 4.2.0)\n
w32api_set_call_method w32api_set_call_method(int $method) [void]\nSets the calling method used. This function sets the method call type.\n@param method Can be one of DC_CALL_CDECL or DC_CALL_STD (the extension\ndefault).\n@return (PHP 4 >= 4.2.0)\n
wddx_add_vars wddx_add_vars(resource $packet_id, mixed $var_name [, mixed\n$...]) [bool]\nAdd variables to a WDDX packet with the specified ID. Serializes the passed\nvariables and add the result to the given packet.\n@param packet_id A WDDX packet, returned by wddx_packet_start().\n@param var_name Can be either a string naming a variable or an array containing\nstrings naming the variables or another array, etc.\n@param ...\n@return (PHP 4, PHP 5)\n
wddx_deserialize wddx_deserialize\nAlias of wddx_unserialize.\n
wddx_packet_end wddx_packet_end(resource $packet_id) [string]\nEnds a WDDX packet with the specified ID. Ends and returns the given WDDX\npacket.\n@param packet_id A WDDX packet, returned by wddx_packet_start().\n@return (PHP 4, PHP 5)\n
wddx_packet_start wddx_packet_start([string $comment]) [resource]\nStarts a new WDDX packet with structure inside it. Start a new WDDX packet\nfor incremental addition of variables. It automatically creates a structure\ndefinition inside the packet to contain the variables.\n@param comment An optional comment string.\n@return (PHP 4, PHP 5)\n
wddx_serialize_value wddx_serialize_value(mixed $var [, string $comment])\n[string]\nSerialize a single value into a WDDX packet. Creates a WDDX packet from a\nsingle given value.\n@param var The value to be serialized\n@param comment An optional comment string that appears in the packet header.\n@return (PHP 4, PHP 5)\n
wddx_serialize_vars wddx_serialize_vars(mixed $var_name [, mixed\n$...]) [string]\nSerialize variables into a WDDX packet. Creates a WDDX packet with a structure\nthat contains the serialized representation of the passed variables.\n@param var_name Can be either a string naming a variable or an array containing\nstrings naming the variables or another array, etc.\n@param ...\n@return (PHP 4, PHP 5)\n
wddx_unserialize wddx_unserialize(string $packet) [mixed]\nUnserializes a WDDX packet. Unserializes a WDDX `packet`.\n@param packet A WDDX packet, as a string or stream.\n@return (PHP 4, PHP 5)\n
win32_continue_service win32_continue_service(string $servicename [, string\n$machine]) [int]\nResumes a paused service. Resumes a paused, named service. Requires\nadministrative privileges.\n@param servicename The short name of the service.\n@param machine Optional machine name. If omitted, the local machine is used.\n@return (PECL win32service SVN)\n@see win32_start_service() - Starts a service\n@see Win32 Error Codes\n
win32_create_service win32_create_service(array $details [, string $machine])\n[mixed]\nCreates a new service entry in the SCM database.\n@param details An array of service details: `service` The short name of the\nservice. This is the name that you will use to control the service using the\n`net` command. The service must be unique (no two services can share the\nsame name), and, ideally, should avoid having spaces in the name.\n@param display The display name of the service. This is the name that you\nwill see in the Services Applet.\n@param description The long description of the service. This is the description\nthat you will see in the Services Applet.\n@param user The name of the user account under which you want the service\nto run. If omitted, the service will run as the LocalSystem account. If the\nusername is specified, you must also provide a password.\n@param password The password that corresponds to the `user`.\n@param path The full path to the executable module that will be launched when\nthe service is started. If omitted, the path to the current PHP process will\nbe used.\n@param params Command line parameters to pass to the service when it starts. If\nyou want to run a PHP script as the service, then the first parameter should be\nthe full path to the PHP script that you intend to run. If the script name or\npath contains spaces, then wrap the full path to the PHP script with `&quot;`.\n@param load_order Controls the load_order. This is not yet fully supported.\n@param svc_type Sets the service type. If omitted, the default value is\nWIN32_SERVICE_WIN32_OWN_PROCESS. Don&#039;t change this unless you know what\nyou&#039;re doing.\n@param start_type Specifies how the service should be started. The default\nis WIN32_SERVICE_AUTO_START which means the service will be launched when\nthe machine starts up.\n@param error_control Informs the SCM what it should do when it detects a\nproblem with the service. The default is WIN32_SERVER_ERROR_IGNORE. Changing\nthis value is not yet fully supported.\n@param delayed_start If `delayed_start` is set to TRUE, then this will\ninform the SCM that this service should be started after other auto-start\nservices are started plus a short delay. Any service can be marked as a\ndelayed auto-start service; however, this setting has no effect unless the\nservice&#039;s `start_type` is WIN32_SERVICE_AUTO_START. This setting is\nonly applicable on Windows Vista and Windows Server 2008 or greater.\n@param base_priority To reduce the impact on processor utilisation, it may\nbe necessary to set a base priority lower than normal. The `base_priority`\ncan be set to one of the constants define in Win32 Base Priority Classes.\n@param machine The optional machine name on which you want to create a\nservice. If omitted, it will use the local machine.\n@return (PECL win32service SVN)\n@see win32_delete_service() - Deletes a service entry from the SCM database\n@see Win32 Base Priority Classes\n@see Win32 Error Codes\n
win32_delete_service win32_delete_service(string $servicename [, string\n$machine]) [mixed]\nDeletes a service entry from the SCM database. Attempts to delete a service\nfrom the SCM database. Administrative privileges are required for this to\nsucceed. This function really just marks the service for deletion. If other\nprocesses (such as the Services Applet) are open, then the deletion will be\ndeferred until those applications are closed. If a service is marked for\ndeletion, further attempts to delete it will fail, and attempts to create\na new service with that name will also fail.\n@param servicename The short name of the service.\n@param machine The optional machine name. If omitted, the local machine will\nbe used.\n@return (PECL win32service SVN)\n@see win32_create_service() - Creates a new service entry in the SCM database\n@see Win32 Error Codes\n
win32_get_last_control_message win32_get_last_control_message(void) [int]\nReturns the last control message that was sent to this service. Returns the\ncontrol code that was last sent to this service process. When running as\na service you should periodically check this to determine if your service\nneeds to stop running.\n@return (PECL win32service SVN)\n@see win32_start_service_ctrl_dispatcher() - Registers the script with the\nSCM, so that it can act as the service with the given name\n@see Win32Service Service Control Message Constants\n
win32_pause_service win32_pause_service(string $servicename [, string\n$machine]) [int]\nPauses a service. Pauses a named service. Requires administrative privileges.\n@param servicename The short name of the service.\n@param machine Optional machine name. If omitted, the local machine is used.\n@return (PECL win32service SVN)\n@see win32_start_service() - Starts a service\n@see Win32 Error Codes\n
win32_ps_list_procs win32_ps_list_procs(void) [array]\nList running processes. Retrieves statistics about all running processes.\n@return (PECL win32ps >= 1.0.1)\n@see win32_ps_stat_proc() - Stat process\n
win32_ps_stat_mem win32_ps_stat_mem(void) [array]\nStat memory utilization. Retrieves statistics about the global memory\nutilization.\n@return (PECL win32ps >= 1.0.1)\n
win32_ps_stat_proc win32_ps_stat_proc([int $pid=0]) [array]\nStat process. Retrieves statistics about the process with the process id `pid`.\n@param pid The process id of the process to stat. If omitted, the id of the\ncurrent process.\n@return (PECL win32ps >= 1.0.1)\n@see win32_ps_list_procs() - List running processes\n
win32_query_service_status win32_query_service_status(string $servicename\n[, string $machine]) [mixed]\nQueries the status of a service. Queries the current status for a service,\nreturning an array of information.\n@param servicename The short name of the service.\n@param machine The optional machine name. If omitted, the local machine will\nbe used.\n@return (PECL win32service SVN)\n@see Win32Service Predefined Constants\n
win32_set_service_status win32_set_service_status(int $status [, int\n$checkpoint=0]) [bool]\nUpdate the service status. Informs the SCM of the current status of a running\nservice. This call is only valid for a running service process.\n@param status The service status code, one of WIN32_SERVICE_RUNNING,\nWIN32_SERVICE_STOPPED, WIN32_SERVICE_STOP_PENDING, WIN32_SERVICE_START_PENDING,\nWIN32_SERVICE_CONTINUE_PENDING, WIN32_SERVICE_PAUSE_PENDING,\nWIN32_SERVICE_PAUSED.\n@param checkpoint The checkpoint value the service increments periodically\nto report its progress during a lengthy start, stop, pause, or continue\noperation. For example, the service should increment this value as it completes\neach step of its initialization when it is starting up. The `checkpoint`\nis only valid when the `status` is one of WIN32_SERVICE_STOP_PENDING,\nWIN32_SERVICE_START_PENDING, WIN32_SERVICE_CONTINUE_PENDING or\nWIN32_SERVICE_PAUSE_PENDING.\n@return (PECL win32service SVN)\n@see win32_start_service_ctrl_dispatcher() - Registers the script with the\nSCM, so that it can act as the service with the given name\n@see Win32Service Service Status Constants\n
win32_start_service_ctrl_dispatcher win32_start_service_ctrl_dispatcher(string\n$name) [mixed]\nRegisters the script with the SCM, so that it can act as the service with the\ngiven name. When launched via the Service Control Manager, a service process\nis required to &quot;check-in&quot; with it to establish service monitoring\nand communication facilities. This function performs the check-in by spawning\na thread to handle the lower-level communication with the service control\nmanager. Once started, the service process should do 2 things. The first\nis to tell the Service Control Manager that the service is running. This is\nachieved by calling win32_set_service_status() with the WIN32_SERVICE_RUNNING\nconstant. If you need to perform some lengthy process before the service\nis actually running, then you can use the WIN32_SERVICE_START_PENDING\nconstant. The second is to continue to check-in with the service control\nmanager so that it can determine if it should terminate. This is achieved\nby periodically calling win32_get_last_control_message() and handling the\nreturn code appropriately.\n@param name The short-name of the service, as registered by\nwin32_create_service().\n@return (PECL win32service SVN)\n@see win32_set_service_status() - Update the service status\n@see win32_get_last_control_message() - Returns the last control message\nthat was sent to this service\n@see Win32 Error Codes\n
win32_start_service win32_start_service(string $servicename [, string\n$machine]) [int]\nStarts a service. Attempts to start the named service. Usually requires\nadministrative privileges.\n@param servicename The short name of the service.\n@param machine Optional machine name. If omitted, the local machine is used.\n@return (PECL win32service SVN)\n@see win32_stop_service() - Stops a service\n@see Win32 Error Codes\n
win32_stop_service win32_stop_service(string $servicename [, string $machine])\n[int]\nStops a service. Stops a named service. Requires administrative privileges.\n@param servicename The short name of the service.\n@param machine Optional machine name. If omitted, the local machine is used.\n@return (PECL win32service SVN)\n@see win32_start_service() - Starts a service\n@see Win32 Error Codes\n
wincache_fcache_fileinfo wincache_fcache_fileinfo([bool $summaryonly=false])\n[array]\nRetrieves information about files cached in the file cache. Retrieves\ninformation about file cache content and its usage.\n@param summaryonly Controls whether the returned array will contain information\nabout individual cache entries along with the file cache summary.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_fcache_meminfo wincache_fcache_meminfo(void) [array]\nRetrieves information about file cache memory usage. Retrieves information\nabout memory usage by file cache.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_lock wincache_lock(string $key [, bool $isglobal=false]) [bool]\nAcquires an exclusive lock on a given key. Obtains an exclusive lock on a\ngiven key. The execution of the current script will be blocked until the\nlock can be obtained. Once the lock is obtained, the other scripts that\ntry to request the lock by using the same key will be blocked, until the\ncurrent script releases the lock by using wincache_unlock(). Using of the\nwincache_lock() and wincache_unlock() can cause deadlocks when executing\nPHP scripts in a multi-process environment like FastCGI. Do not use these\nfunctions unless you are absolutely sure you need to use them. For the majority\nof the operations on the user cache it is not necessary to use these functions.\n@param key Name of the key in the cache to get the lock on.\n@param isglobal Controls whether the scope of the lock is system-wide or\nlocal. Local locks are scoped to the application pool in IIS FastCGI case\nor to all php processes that have the same parent process identifier.\n@return (PECL wincache >= 1.1.0)\n@see wincache_unlock() - Releases an exclusive lock on a given key\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n
wincache_ocache_fileinfo wincache_ocache_fileinfo([bool $summaryonly=false])\n[array]\nRetrieves information about files cached in the opcode cache. Retrieves\ninformation about opcode cache content and its usage.\n@param summaryonly Controls whether the returned array will contain information\nabout individual cache entries along with the opcode cache summary.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_ocache_meminfo wincache_ocache_meminfo(void) [array]\nRetrieves information about opcode cache memory usage. Retrieves information\nabout memory usage by opcode cache.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_refresh_if_changed wincache_refresh_if_changed([array $files]) [bool]\nRefreshes the cache entries for the cached files. Refreshes the cache entries\nfor the files, whose names were passed in the input argument. If no argument\nis specified then refreshes all the entries in the cache.\n@param files An array of file names for files that need to be refreshed. An\nabsolute or relative file paths can be used.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n
wincache_rplist_fileinfo wincache_rplist_fileinfo([bool $summaryonly=false])\n[array]\nRetrieves information about resolve file path cache. Retrieves information\nabout cached mappings between relative file paths and corresponding absolute\nfile paths.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_rplist_meminfo wincache_rplist_meminfo(void) [array]\nRetrieves information about memory usage by the resolve file path\ncache. Retrieves information about memory usage by resolve file path cache.\n@return (PECL wincache >= 1.0.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_scache_info wincache_scache_info([bool $summaryonly=false]) [array]\nRetrieves information about files cached in the session cache. Retrieves\ninformation about session cache content and its usage.\n@param summaryonly Controls whether the returned array will contain information\nabout individual cache entries along with the session cache summary.\n@return (PECL wincache >= 1.1.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_scache_meminfo wincache_scache_meminfo(void) [array]\nRetrieves information about session cache memory usage. Retrieves information\nabout memory usage by session cache.\n@return (PECL wincache >= 1.1.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n
wincache_ucache_add wincache_ucache_add(string $key, mixed $value [, int\n$ttl=0]) [bool]\nAdds a variable in user cache only if variable does not already exist in\nthe cache. Adds a variable in user cache, only if this variable doesn&#039;t\nalready exist in the cache. The added variable remains in the user cache unless\nits time to live expires or it is deleted by using wincache_ucache_delete()\nor wincache_ucache_clear() functions.\n@param key Store the variable using this `key` name. If a variable with same\nkey is already present the function will fail and return `FALSE`. `key`\nis case sensitive. To override the value even if `key` is present use\nwincache_ucache_set() function instad. `key` can also take array of name =>\nvalue pairs where names will be used as keys. This can be used to add multiple\nvalues in the cache in one operation, thus avoiding race condition.\n@param value Value of a variable to store. `Value` supports all data\ntypes except resources, such as file handles. This paramter is ignored if\nfirst argument is an array. A general guidance is to pass `NULL` as `value`\nwhile using array as `key`. If `value` is an object, or an array containing\nobjects, then the objects will be serialized. See __sleep() for details on\nserializing objects.\n@param values Associative array of keys and values.\n@param ttl Time for the variable to live in the cache in seconds. After the\nvalue specified in `ttl` has passed the stored variable will be deleted\nfrom the cache. This parameter takes a default value of `0` which means\nthe variable will stay in the cache unless explicitly deleted by using\nwincache_ucache_delete() or wincache_ucache_clear() functions.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see __sleep()\n
wincache_ucache_cas wincache_ucache_cas(string $key, int $old_value, int\n$new_value) [bool]\nCompares the variable with old value and assigns new value to it. Compares\nthe variable associated with the `key` with `old_value` and if it matches\nthen assigns the `new_value` to it.\n@param key The `key` that is used to store the variable in the cache. `key`\nis case sensitive.\n@param old_value Old value of the variable pointed by `key` in the user\ncache. The value should be of type `long`, otherwise the function returns\n`FALSE`.\n@param new_value New value which will get assigned to variable pointer by\n`key` if a match is found. The value should be of type `long`, otherwise\nthe function returns `FALSE`.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_inc() - Increments the value associated with the key\n@see wincache_ucache_dec() - Decrements the value associated with the key\n
wincache_ucache_clear wincache_ucache_clear(void) [bool]\nDeletes entire content of the user cache. Clears/deletes all the values\nstored in the user cache.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_add() - Adds a variable in user cache only if variable\ndoes not already exist in the cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n
wincache_ucache_dec wincache_ucache_dec(string $key [, int $dec_by=1 [,\nbool &$success]]) [mixed]\nDecrements the value associated with the key. Decrements the value associated\nwith the `key` by 1 or as specified by `dec_by`.\n@param key The `key` that was used to store the variable in the cache. `key`\nis case sensitive.\n@param dec_by The value by which the variable associated with the `key`\nwill get decremented. If the argument is a floating point number it will\nbe truncated to nearest integer. The variable associated with the `key`\nshould be of type `long`, otherwise the function fails and returns `FALSE`.\n@param success Will be set to `TRUE` on success and `FALSE` on failure.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_inc() - Increments the value associated with the key\n@see wincache_ucache_cas() - Compares the variable with old value and assigns\nnew value to it\n
wincache_ucache_delete wincache_ucache_delete(mixed $key) [bool]\nDeletes variables from the user cache. Deletes the elements in the user\ncache pointed by `key`.\n@param key The `key` that was used to store the variable in the cache. `key`\nis case sensitive. `key` can be an array of keys.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_add() - Adds a variable in user cache only if variable\ndoes not already exist in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n
wincache_ucache_exists wincache_ucache_exists(string $key) [bool]\nChecks if a variable exists in the user cache. Checks if a variable with the\n`key` exists in the user cache or not.\n@param key The `key` that was used to store the variable in the cache. `key`\nis case sensitive.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_add() - Adds a variable in user cache only if variable\ndoes not already exist in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n
wincache_ucache_get wincache_ucache_get(mixed $key [, bool &$success]) [mixed]\nGets a variable stored in the user cache. Gets a variable stored in the\nuser cache.\n@param key The `key` that was used to store the variable in the cache. `key`\nis case sensitive. `key` can be an array of keys. In this case the return\nvalue will be an array of values of each element in the `key` array. If an\nobject, or an array containing objects, is returned, then the objects will\nbe unserialized. See __wakeup() for details on unserializing objects.\n@param success Will be set to `TRUE` on success and `FALSE` on failure.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_add() - Adds a variable in user cache only if variable\ndoes not already exist in the cache\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see __wakeup()\n
wincache_ucache_inc wincache_ucache_inc(string $key [, int $inc_by=1 [,\nbool &$success]]) [mixed]\nIncrements the value associated with the key. Increments the value associated\nwith the `key` by 1 or as specified by `inc_by`.\n@param key The `key` that was used to store the variable in the cache. `key`\nis case sensitive.\n@param inc_by The value by which the variable associated with the `key`\nwill get incremented. If the argument is a floating point number it will\nbe truncated to nearest integer. The variable associated with the `key`\nshould be of type `long`, otherwise the function fails and returns `FALSE`.\n@param success Will be set to `TRUE` on success and `FALSE` on failure.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_dec() - Decrements the value associated with the key\n@see wincache_ucache_cas() - Compares the variable with old value and assigns\nnew value to it\n
wincache_ucache_info wincache_ucache_info([bool $summaryonly=false [, string\n$key]]) [array]\nRetrieves information about data stored in the user cache. Retrieves\ninformation about data stored in the user cache.\n@param summaryonly Controls whether the returned array will contain information\nabout individual cache entries along with the user cache summary.\n@param key The key of an entry in the user cache. If specified then the\nreturned array will contain information only about that cache entry. If not\nspecified and `summaryonly` is set to `false` then the returned array will\ncontain information about all entries in the cache.\n@return (PECL wincache >= 1.1.0)\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_ocache_meminfo() - Retrieves information about opcode cache\nmemory usage\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_ucache_meminfo wincache_ucache_meminfo(void) [array]\nRetrieves information about user cache memory usage. Retrieves information\nabout memory usage by user cache.\n@return (PECL wincache >= 1.1.0)\n@see wincache_fcache_fileinfo() - Retrieves information about files cached\nin the file cache\n@see wincache_fcache_meminfo() - Retrieves information about file cache\nmemory usage\n@see wincache_ocache_fileinfo() - Retrieves information about files cached\nin the opcode cache\n@see wincache_rplist_fileinfo() - Retrieves information about resolve file\npath cache\n@see wincache_rplist_meminfo() - Retrieves information about memory usage\nby the resolve file path cache\n@see wincache_refresh_if_changed() - Refreshes the cache entries for the\ncached files\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n@see wincache_scache_meminfo() - Retrieves information about session cache\nmemory usage\n
wincache_ucache_set wincache_ucache_set(mixed $key, mixed $value [, int\n$ttl=0]) [bool]\nAdds a variable in user cache and overwrites a variable if it already\nexists in the cache. Adds a variable in user cache. Overwrites a variable\nif it already exists in the cache. The added or updated variable remains\nin the user cache unless its time to live expires or it is deleted by using\nwincache_ucache_delete() or wincache_ucache_clear() functions.\n@param key Store the variable using this `key` name. If a variable with same\n`key` is already present the function will overwrite the previous value with\nthe new one. `key` is case sensitive. `key` can also take array of name =>\nvalue pairs where names will be used as keys. This can be used to add multiple\nvalues in the cache in one operation, thus avoiding race condition.\n@param value Value of a variable to store. `Value` supports all data\ntypes except resources, such as file handles. This paramter is ignored if\nfirst argument is an array. A general guidance is to pass `NULL` as `value`\nwhile using array as `key`. If `value` is an object, or an array containing\nobjects, then the objects will be serialized. See __sleep() for details on\nserializing objects.\n@param values Associative array of keys and values.\n@param ttl Time for the variable to live in the cache in seconds. After the\nvalue specified in `ttl` has passed the stored variable will be deleted\nfrom the cache. This parameter takes a default value of `0` which means\nthe variable will stay in the cache unless explicitly deleted by using\nwincache_ucache_delete() or wincache_ucache_clear() functions.\n@return (PECL wincache >= 1.1.0)\n@see wincache_ucache_add() - Adds a variable in user cache only if variable\ndoes not already exist in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see __sleep()\n
wincache_unlock wincache_unlock(string $key) [bool]\nReleases an exclusive lock on a given key. Releases an exclusive lock that\nwas obtained on a given key by using wincache_lock(). If any other process\nwas blocked waiting for the lock on this key, that process will be able\nto obtain the lock. Using of the wincache_lock() and wincache_unlock() can\ncause deadlocks when executing PHP scripts in a multi-process environment\nlike FastCGI. Do not use these functions unless you are absolutely sure you\nneed to use them. For the majority of the operations on the user cache it\nis not necessary to use these functions.\n@param key Name of the key in the cache to release the lock on.\n@return (PECL wincache >= 1.1.0)\n@see wincache_lock() - Acquires an exclusive lock on a given key\n@see wincache_ucache_set() - Adds a variable in user cache and overwrites\na variable if it already exists in the cache\n@see wincache_ucache_get() - Gets a variable stored in the user cache\n@see wincache_ucache_delete() - Deletes variables from the user cache\n@see wincache_ucache_clear() - Deletes entire content of the user cache\n@see wincache_ucache_exists() - Checks if a variable exists in the user cache\n@see wincache_ucache_meminfo() - Retrieves information about user cache\nmemory usage\n@see wincache_ucache_info() - Retrieves information about data stored in\nthe user cache\n@see wincache_scache_info() - Retrieves information about files cached in\nthe session cache\n
wordwrap wordwrap(string $str [, int $width=75 [, string $break=&quot;\n&quot;\n[, bool $cut=false]]]) [string]\nWraps a string to a given number of characters. Wraps a string to a given\nnumber of characters using a string break character.\n@param str The input string.\n@param width The column width.\n@param break The line is broken using the optional `break` parameter.\n@param cut If the `cut` is set to TRUE, the string is always wrapped at or\nbefore the specified width. So if you have a word that is larger than the\ngiven width, it is broken apart. (See second example).\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see nl2br() - Inserts HTML line breaks before all newlines in a string\n@see chunk_split() - Split a string into smaller chunks\n
xattr_get xattr_get(string $filename, string $name [, int $flags=0]) [string]\nGet an extended attribute. This function gets the value of an extended\nattribute of a file. Extended attributes have two different namespaces:\nuser and root. The user namespace is available to all users, while the root\nnamespace is available only to users with root privileges. xattr operates\non the user namespace by default, but this can be changed with the `flags`\nparameter.\n@param filename The file from which we get the attribute.\n@param name The name of the attribute.\n@param flags Supported xattr flags XATTR_DONTFOLLOW Do not follow the symbolic\nlink but operate on symbolic link itself. XATTR_ROOT Set attribute in root\n(trusted) namespace. Requires root privileges.\n@return (PECL xattr >= 0.9.0)\n@see xattr_list() - Get a list of extended attributes\n@see xattr_set() - Set an extended attribute\n@see xattr_remove() - Remove an extended attribute\n
xattr_list xattr_list(string $filename [, int $flags=0]) [array]\nGet a list of extended attributes. This functions gets a list of names\nof extended attributes of a file. Extended attributes have two different\nnamespaces: user and root. The user namespace is available to all users, while\nthe root namespace is available only to users with root privileges. xattr\noperates on the user namespace by default, but this can be changed with the\n`flags` parameter.\n@param filename The path of the file.\n@param flags Supported xattr flags XATTR_DONTFOLLOW Do not follow the symbolic\nlink but operate on symbolic link itself. XATTR_ROOT Set attribute in root\n(trusted) namespace. Requires root privileges.\n@return (PECL xattr >= 0.9.0)\n@see xattr_get() - Get an extended attribute\n
xattr_remove xattr_remove(string $filename, string $name [, int $flags=0])\n[bool]\nRemove an extended attribute. This function removes an extended attribute\nof a file. Extended attributes have two different namespaces: user and\nroot. The user namespace is available to all users, while the root namespace\nis available only to users with root privileges. xattr operates on the user\nnamespace by default, but this can be changed with the `flags` parameter.\n@param filename The file from which we remove the attribute.\n@param name The name of the attribute to remove.\n@param flags Supported xattr flags XATTR_DONTFOLLOW Do not follow the symbolic\nlink but operate on symbolic link itself. XATTR_ROOT Set attribute in root\n(trusted) namespace. Requires root privileges.\n@return (PECL xattr >= 0.9.0)\n@see xattr_list() - Get a list of extended attributes\n@see xattr_set() - Set an extended attribute\n@see xattr_get() - Get an extended attribute\n
xattr_set xattr_set(string $filename, string $name, string $value [, int\n$flags=0]) [bool]\nSet an extended attribute. This function sets the value of an extended\nattribute of a file. Extended attributes have two different namespaces:\nuser and root. The user namespace is available to all users, while the root\nnamespace is available only to users with root privileges. xattr operates\non the user namespace by default, but this can be changed with the `flags`\nparameter.\n@param filename The file in which we set the attribute.\n@param name The name of the extended attribute. This attribute will be created\nif it doesn&#039;t exist or replaced otherwise. You can change this behaviour\nby using the `flags` parameter.\n@param value The value of the attribute.\n@param flags Supported xattr flags XATTR_CREATE Function will fail if\nextended attribute already exists. XATTR_REPLACE Function will fail if\nextended attribute doesn&#039;t exist. XATTR_DONTFOLLOW Do not follow the\nsymbolic link but operate on symbolic link itself. XATTR_ROOT Set attribute\nin root (trusted) namespace. Requires root privileges.\n@return (PECL xattr >= 0.9.0)\n@see xattr_get() - Get an extended attribute\n@see xattr_remove() - Remove an extended attribute\n
xattr_supported xattr_supported(string $filename [, int $flags=0]) [bool]\nCheck if filesystem supports extended attributes. This functions checks if\nthe filesystem holding the given file supports extended attributes. Read\naccess to the file is required.\n@param filename The path of the tested file.\n@param flags Supported xattr flags XATTR_DONTFOLLOW Do not follow the symbolic\nlink but operate on symbolic link itself.\n@return (PECL xattr >= 1.0.0)\n@see xattr_get() - Get an extended attribute\n@see xattr_list() - Get a list of extended attributes\n
xdiff_file_bdiff_size xdiff_file_bdiff_size(string $file) [int]\nRead a size of file created by applying a binary diff. Returns a size of\na result file that would be created after applying binary patch from file\n`file` to the original file.\n@param file The path to the binary patch created by xdiff_string_bdiff()\nor xdiff_string_rabdiff() function.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_file_bdiff() - Make binary diff of two files\n@see xdiff_file_rabdiff() - Make binary diff of two files using the Rabin's\npolynomial fingerprinting algorithm\n@see xdiff_file_bpatch() - Patch a file with a binary diff\n
xdiff_file_bdiff xdiff_file_bdiff(string $old_file, string $new_file, string\n$dest) [bool]\nMake binary diff of two files. Makes a binary diff of two files and\nstores the result in a patch file. This function works with both text\nand binary files. Resulting patch file can be later applied using\nxdiff_file_bpatch()/xdiff_string_bpatch().\n@param old_file Path to the first file. This file acts as &quot;old&quot; file.\n@param new_file Path to the second file. This file acts as &quot;new&quot;\nfile.\n@param dest Path of the resulting patch file. Resulting file contains\ndifferences between &quot;old&quot; and &quot;new&quot; files. It is in\nbinary format and is human-unreadable.\n@return (PECL xdiff >= 0.2.0)\n@note Note: Both files will be loaded into memory so ensure that your\nmemory_limit is set high enough.\n@see xdiff_file_bpatch() - Patch a file with a binary diff\n
xdiff_file_bpatch xdiff_file_bpatch(string $file, string $patch, string $dest)\n[bool]\nPatch a file with a binary diff. Patches a `file` with a binary `patch` and\nstores the result in a file `dest`. This function accepts patches created\nboth via xdiff_file_bdiff() and xdiff_file_rabdiff() functions or their\nstring counterparts.\n@param file The original file.\n@param patch The binary patch file.\n@param dest Path of the resulting file.\n@return (PECL xdiff >= 0.2.0)\n@note Note: Both files (`file` and `patch`) will be loaded into memory so\nensure that your memory_limit is set high enough.\n@see xdiff_file_bdiff() - Make binary diff of two files\n@see xdiff_file_rabdiff() - Make binary diff of two files using the Rabin's\npolynomial fingerprinting algorithm\n
xdiff_file_diff_binary xdiff_file_diff_binary(string $old_file, string\n$new_file, string $dest) [bool]\nAlias of xdiff_file_bdiff. Makes a binary diff of two files and\nstores the result in a patch file. This function works with both\ntext and binary files. Resulting patch file can be later applied using\nxdiff_file_bpatch(). Starting with version 1.5.0 this function is an alias\nof xdiff_file_bdiff().\n@param old_file Path to the first file. This file acts as &quot;old&quot; file.\n@param new_file Path to the second file. This file acts as &quot;new&quot;\nfile.\n@param dest Path of the resulting patch file. Resulting file contains\ndifferences between &quot;old&quot; and &quot;new&quot; files. It is in\nbinary format and is human-unreadable.\n@return (PECL xdiff >= 0.2.0)\n@note Note: Both files will be loaded into memory so ensure that your\nmemory_limit is set high enough.\n@see xdiff_file_bdiff() - Make binary diff of two files\n@see xdiff_file_bpatch() - Patch a file with a binary diff\n
xdiff_file_diff xdiff_file_diff(string $old_file, string $new_file, string\n$dest [, int $context=3 [, bool $minimal=false]]) [bool]\nMake unified diff of two files. Makes an unified diff containing differences\nbetween `old_file` and `new_file` and stores it in `dest` file. The resulting\nfile is human-readable. An optional `context` parameter specifies how many\nlines of context should be added around each change. Setting `minimal`\nparameter to true will result in outputting the shortest patch file possible\n(can take a long time).\n@param old_file Path to the first file. This file acts as &quot;old&quot; file.\n@param new_file Path to the second file. This file acts as &quot;new&quot;\nfile.\n@param dest Path of the resulting patch file.\n@param context Indicates how many lines of context you want to include in\ndiff result.\n@param minimal Set this parameter to TRUE if you want to minimalize size of\nthe result (can take a long time).\n@return (PECL xdiff >= 0.2.0)\n@note Note: This function doesn&#039;t work well with binary files. To make\ndiff of binary files use xdiff_file_bdiff()/xdiff_file_rabdiff() function.\n@see xdiff_file_patch() - Patch a file with an unified diff\n
xdiff_file_merge3 xdiff_file_merge3(string $old_file, string $new_file1,\nstring $new_file2, string $dest) [mixed]\nMerge 3 files into one. Merges three files into one and stores the result\nin a file `dest`. The `old_file` is an original version while `new_file1`\nand `new_file2` are modified versions of an original.\n@param old_file Path to the first file. It acts as &quot;old&quot; file.\n@param new_file1 Path to the second file. It acts as modified version of\n`old_file`.\n@param new_file2 Path to the third file. It acts as modified version of\n`old_file`.\n@param dest Path of the resulting file, containing merged changed from both\n`new_file1` and `new_file2`.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_merge3() - Merge 3 strings into one\n
xdiff_file_patch_binary xdiff_file_patch_binary(string $file, string $patch,\nstring $dest) [bool]\nAlias of xdiff_file_bpatch. Patches a `file` with a binary `patch` and\nstores the result in a file `dest`. This function accepts patches created\nboth via xdiff_file_bdiff() or xdiff_file_rabdiff() functions or their\nstring counterparts. Starting with version 1.5.0 this function is an alias\nof xdiff_file_bpatch().\n@param file The original file.\n@param patch The binary patch file.\n@param dest Path of the resulting file.\n@return (PECL xdiff >= 0.2.0)\n@note Note: Both files (`file` and `patch`) will be loaded into memory so\nensure that your memory_limit is set high enough.\n@see xdiff_string_patch_binary() - Alias of xdiff_string_bpatch\n
xdiff_file_patch xdiff_file_patch(string $file, string $patch, string $dest\n[, int $flags=DIFF_PATCH_NORMAL]) [mixed]\nPatch a file with an unified diff. Patches a `file` with a `patch` and\nstores the result in a file. `patch` has to be an unified diff created\nby xdiff_file_diff()/xdiff_string_diff() function. An optional `flags`\nparameter specifies mode of operation.\n@param file The original file.\n@param patch The unified patch file. It has to be created using\nxdiff_string_diff(), xdiff_file_diff() functions or compatible tools.\n@param dest Path of the resulting file.\n@param flags Can be either XDIFF_PATCH_NORMAL (default mode, normal patch)\nor XDIFF_PATCH_REVERSE (reversed patch). Starting from version 1.5.0, you\ncan also use binary OR to enable XDIFF_PATCH_IGNORESPACE flag.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_file_diff() - Make unified diff of two files\n
xdiff_file_rabdiff xdiff_file_rabdiff(string $old_file, string $new_file,\nstring $dest) [bool]\nMake binary diff of two files using the Rabin's polynomial fingerprinting\nalgorithm. Makes a binary diff of two files and stores the result in a patch\nfile. The difference between this function and xdiff_file_bdiff() is different\nalgorithm used which should result in faster execution and smaller diff\nproduced. This function works with both text and binary files. Resulting patch\nfile can be later applied using xdiff_file_bpatch()/xdiff_string_bpatch(). For\nmore details about differences between algorithm used please check &raquo;\nlibxdiff website.\n@param old_file Path to the first file. This file acts as &quot;old&quot; file.\n@param new_file Path to the second file. This file acts as &quot;new&quot;\nfile.\n@param dest Path of the resulting patch file. Resulting file contains\ndifferences between &quot;old&quot; and &quot;new&quot; files. It is in\nbinary format and is human-unreadable.\n@return (PECL xdiff >= 0.2.0)\n@note Note: Both files will be loaded into memory so ensure that your\nmemory_limit is set high enough.\n@see xdiff_file_bpatch() - Patch a file with a binary diff\n
xdiff_string_bdiff_size xdiff_string_bdiff_size(string $patch) [int]\nRead a size of file created by applying a binary diff. Returns a size of\na result file that would be created after applying binary `patch` to the\noriginal file.\n@param patch The binary patch created by xdiff_string_bdiff() or\nxdiff_string_rabdiff() function.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bdiff() - Make binary diff of two strings\n@see xdiff_string_rabdiff() - Make binary diff of two strings using the\nRabin's polynomial fingerprinting algorithm\n@see xdiff_string_bpatch() - Patch a string with a binary diff\n
xdiff_string_bdiff xdiff_string_bdiff(string $old_data, string $new_data)\n[string]\nMake binary diff of two strings. Makes a binary diff of two strings and returns\nthe result. This function works with both text and binary data. Resulting\npatch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch().\n@param old_data First string with binary data. It acts as &quot;old&quot; data.\n@param new_data Second string with binary data. It acts as &quot;new&quot;\ndata.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bpatch() - Patch a string with a binary diff\n
xdiff_string_bpatch xdiff_string_bpatch(string $str, string $patch) [string]\nPatch a string with a binary diff. Patches a string `str` with a binary\n`patch`. This function accepts patches created both via xdiff_string_bdiff()\nand xdiff_string_rabdiff() functions or their file counterparts.\n@param str The original binary string.\n@param patch The binary patch string.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bdiff() - Make binary diff of two strings\n@see xdiff_string_rabdiff() - Make binary diff of two strings using the\nRabin's polynomial fingerprinting algorithm\n
xdiff_string_diff_binary string xdiff_string_bdiff ( string $old_data ,\nstring $new_data )\nAlias of xdiff_string_bdiff. Makes a binary diff of two strings and returns\nthe result. This function works with both text and binary data. Resulting patch\ncan be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). Starting\nwith version 1.5.0 this function is an alias of xdiff_string_bdiff().\n@param old_data First string with binary data. It acts as &quot;old&quot; data.\n@param new_data Second string with binary data. It acts as &quot;new&quot;\ndata.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bdiff() - Make binary diff of two strings\n@see xdiff_string_bpatch() - Patch a string with a binary diff\n
xdiff_string_diff xdiff_string_diff(string $old_data, string $new_data [,\nint $context=3 [, bool $minimal=false]]) [string]\nMake unified diff of two strings. Makes an unified diff containing differences\nbetween `old_data` string and `new_data` string and returns it. The resulting\ndiff is human-readable. An optional `context` parameter specifies how many\nlines of context should be added around each change. Setting `minimal`\nparameter to true will result in outputting the shortest patch file possible\n(can take a long time).\n@param old_data First string with data. It acts as &quot;old&quot; data.\n@param new_data Second string with data. It acts as &quot;new&quot; data.\n@param context Indicates how many lines of context you want to include in\nthe diff result.\n@param minimal Set this parameter to TRUE if you want to minimalize the size\nof the result (can take a long time).\n@return (PECL xdiff >= 0.2.0)\n@note Note: This function doesn&#039;t work well with binary strings. To\nmake diff of binary strings use xdiff_string_bdiff()/xdiff_string_rabdiff().\n@see xdiff_string_patch() - Patch a string with an unified diff\n
xdiff_string_merge3 xdiff_string_merge3(string $old_data, string $new_data1,\nstring $new_data2 [, string &$error]) [mixed]\nMerge 3 strings into one. Merges three strings into one and returns the\nresult. The `old_data` is an original version of data while `new_file1`\nand `new_file2` are modified versions of an original. An optional `error`\nis used to pass any rejected parts during merging process.\n@param old_data First string with data. It acts as &quot;old&quot; data.\n@param new_data1 Second string with data. It acts as modified version of\n`old_data`.\n@param new_data2 Third string with data. It acts as modified version of\n`old_data`.\n@param error If provided then rejected parts are stored inside this variable.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_file_merge3() - Merge 3 files into one\n
xdiff_string_patch_binary xdiff_string_patch_binary(string $str, string $patch)\n[string]\nAlias of xdiff_string_bpatch. Patches a string `str` with a binary\n`patch`. This function accepts patches created both via xdiff_string_bdiff()\nand xdiff_string_rabdiff() functions or their file counterparts. Starting\nwith version 1.5.0 this function is an alias of xdiff_string_bpatch().\n@param str The original binary string.\n@param patch The binary patch string.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bpatch() - Patch a string with a binary diff\n@see xdiff_string_bdiff() - Make binary diff of two strings\n@see xdiff_string_rabdiff() - Make binary diff of two strings using the\nRabin's polynomial fingerprinting algorithm\n
xdiff_string_patch xdiff_string_patch(string $str, string $patch [, int $flags\n[, string &$error]]) [string]\nPatch a string with an unified diff. Patches a `str` string with an unified\npatch in `patch` parameter and returns the result. `patch` has to be an\nunified diff created by xdiff_file_diff()/xdiff_string_diff() function. An\noptional `flags` parameter specifies mode of operation. Any rejected parts\nof the patch will be stored inside `error` variable if it is provided.\n@param str The original string.\n@param patch The unified patch string. It has to be created using\nxdiff_string_diff(), xdiff_file_diff() functions or compatible tools.\n@param flags `flags` can be either XDIFF_PATCH_NORMAL (default mode, normal\npatch) or XDIFF_PATCH_REVERSE (reversed patch). Starting from version 1.5.0,\nyou can also use binary OR to enable XDIFF_PATCH_IGNORESPACE flag.\n@param error If provided then rejected parts are stored inside this variable.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_diff() - Make unified diff of two strings\n
xdiff_string_rabdiff string xdiff_string_bdiff ( string $old_data , string\n$new_data )\nMake binary diff of two strings using the Rabin's polynomial fingerprinting\nalgorithm. Makes a binary diff of two strings and returns the result. The\ndifference between this function and xdiff_string_bdiff() is different\nalgorithm used which should result in faster execution and smaller diff\nproduced. This function works with both text and binary data. Resulting patch\ncan be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). For\nmore details about differences between algorithm used please check &raquo;\nlibxdiff website.\n@param old_data First string with binary data. It acts as &quot;old&quot; data.\n@param new_data Second string with binary data. It acts as &quot;new&quot;\ndata.\n@return (PECL xdiff >= 0.2.0)\n@see xdiff_string_bpatch() - Patch a string with a binary diff\n
xml_error_string xml_error_string(int $code) [string]\nGet XML parser error string. Gets the XML parser error string associated\nwith the given `code`.\n@param code An error code from xml_get_error_code().\n@return (PHP 4, PHP 5)\n@see xml_get_error_code() - Get XML parser error code\n
xml_get_current_byte_index xml_get_current_byte_index(resource $parser) [int]\nGet current byte index for an XML parser. Gets the current byte index of\nthe given XML parser.\n@param parser A reference to the XML parser to get byte index from.\n@return (PHP 4, PHP 5)\n@see xml_get_current_column_number() - Get current column number for an\nXML parser\n@see xml_get_current_line_number() - Get current line number for an XML parser\n
xml_get_current_column_number xml_get_current_column_number(resource $parser)\n[int]\nGet current column number for an XML parser. Gets the current column number\nof the given XML parser.\n@param parser A reference to the XML parser to get column number from.\n@return (PHP 4, PHP 5)\n@see xml_get_current_byte_index() - Get current byte index for an XML parser\n@see xml_get_current_line_number() - Get current line number for an XML parser\n
xml_get_current_line_number xml_get_current_line_number(resource $parser) [int]\nGet current line number for an XML parser. Gets the current line number for\nthe given XML parser.\n@param parser A reference to the XML parser to get line number from.\n@return (PHP 4, PHP 5)\n@see xml_get_current_column_number() - Get current column number for an\nXML parser\n@see xml_get_current_byte_index() - Get current byte index for an XML parser\n
xml_get_error_code xml_get_error_code(resource $parser) [int]\nGet XML parser error code. Gets the XML parser error code.\n@param parser A reference to the XML parser to get error code from.\n@return (PHP 4, PHP 5)\n@see xml_error_string() - Get XML parser error string\n
xml_parse_into_struct xml_parse_into_struct(resource $parser, string $data,\narray &$values [, array &$index]) [int]\nParse XML data into an array structure. This function parses an XML string\ninto 2 parallel array structures, one (`index`) containing pointers to the\nlocation of the appropriate values in the `values` array. These last two\nparameters must be passed by reference.\n@param parser A reference to the XML parser.\n@param data A string containing the XML data.\n@param values An array containing the values of the XML data\n@param index An array containing pointers to the location of the appropriate\nvalues in the $values.\n@return (PHP 4, PHP 5)\n
xml_parse xml_parse(resource $parser, string $data [, bool $is_final=false])\n[int]\nStart parsing an XML document. xml_parse() parses an XML document. The\nhandlers for the configured events are called as many times as necessary.\n@param parser A reference to the XML parser to use.\n@param data Chunk of data to parse. A document may be parsed piece-wise by\ncalling xml_parse() several times with new data, as long as the `is_final`\nparameter is set and TRUE when the last data is parsed.\n@param is_final If set and TRUE, `data` is the last piece of data sent in\nthis parse.\n@return (PHP 4, PHP 5)\n
xml_parser_create_ns xml_parser_create_ns([string $encoding [, string\n$separator=&#039;:&#039;]]) [resource]\nCreate an XML parser with namespace support. xml_parser_create_ns() creates\na new XML parser with XML namespace support and returns a resource handle\nreferencing it to be used by the other XML functions.\n@param encoding The optional `encoding` specifies the character encoding\nfor the input/output in PHP 4. Starting from PHP 5, the input encoding is\nautomatically detected, so that the `encoding` parameter specifies only\nthe output encoding. In PHP 4, the default output encoding is the same as\nthe input charset. In PHP 5.0.0 and 5.0.1, the default output charset is\nISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported encodings\nare `ISO-8859-1`, `UTF-8` and `US-ASCII`.\n@param separator With a namespace aware parser tag parameters passed to the\nvarious handler functions will consist of namespace and tag name separated\nby the string specified in `seperator`.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see xml_parser_create() - Create an XML parser\n@see xml_parser_free() - Free an XML parser\n
xml_parser_create xml_parser_create([string $encoding]) [resource]\nCreate an XML parser. xml_parser_create() creates a new XML parser and\nreturns a resource handle referencing it to be used by the other XML functions.\n@param encoding The optional `encoding` specifies the character encoding\nfor the input/output in PHP 4. Starting from PHP 5, the input encoding is\nautomatically detected, so that the `encoding` parameter specifies only the\noutput encoding. In PHP 4, the default output encoding is the same as the\ninput charset. If empty string is passed, the parser attempts to identify\nwhich encoding the document is encoded in by looking at the heading 3 or 4\nbytes. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while\nin PHP 5.0.2 and upper is UTF-8. The supported encodings are `ISO-8859-1`,\n`UTF-8` and `US-ASCII`.\n@return (PHP 4, PHP 5)\n@see xml_parser_create_ns() - Create an XML parser with namespace support\n@see xml_parser_free() - Free an XML parser\n
xml_parser_free xml_parser_free(resource $parser) [bool]\nFree an XML parser. Frees the given XML `parser`.\n@param parser A reference to the XML parser to free.\n@return (PHP 4, PHP 5)\n
xml_parser_get_option xml_parser_get_option(resource $parser, int $option)\n[mixed]\nGet options from an XML parser. Gets an option value from an XML parser.\n@param parser A reference to the XML parser to get an option from.\n@param option Which option to fetch. XML_OPTION_CASE_FOLDING and\nXML_OPTION_TARGET_ENCODING are available. See xml_parser_set_option() for\ntheir description.\n@return (PHP 4, PHP 5)\n
xml_parser_set_option xml_parser_set_option(resource $parser, int $option,\nmixed $value) [bool]\nSet options in an XML parser. Sets an option in an XML parser.\n@param parser A reference to the XML parser to set an option in.\n@param option Which option to set. See below. The following options\nare available: XML parser options Option constant Data type Description\nXML_OPTION_CASE_FOLDING integer Controls whether case-folding is enabled\nfor this XML parser. Enabled by default. XML_OPTION_SKIP_TAGSTART integer\nSpecify how many characters should be skipped in the beginning of a tag\nname. XML_OPTION_SKIP_WHITE integer Whether to skip values consisting of\nwhitespace characters. XML_OPTION_TARGET_ENCODING string Sets which target\nencoding to use in this XML parser.By default, it is set to the same as the\nsource encoding used by xml_parser_create(). Supported target encodings are\n`ISO-8859-1`, `US-ASCII` and `UTF-8`.\n@param value The option&#039;s new value.\n@return (PHP 4, PHP 5)\n
xml_set_character_data_handler xml_set_character_data_handler(resource $parser,\ncallback $handler) [bool]\nSet up character data handler. Sets the character data handler function for\nthe XML parser `parser`.\n@param parser A reference to the XML parser to set up character data handler\nfunction.\n@return (PHP 4, PHP 5)\n
xml_set_default_handler xml_set_default_handler(resource $parser, callback\n$handler) [bool]\nSet up default handler. Sets the default handler function for the XML parser\n`parser`.\n@param parser A reference to the XML parser to set up default handler function.\n@return (PHP 4, PHP 5)\n
xml_set_element_handler xml_set_element_handler(resource $parser, callback\n$start_element_handler, callback $end_element_handler) [bool]\nSet up start and end element handlers. Sets the element handler functions\nfor the XML `parser`. `start_element_handler` and `end_element_handler` are\nstrings containing the names of functions that must exist when xml_parse()\nis called for `parser`.\n@param parser A reference to the XML parser to set up start and end element\nhandler functions.\n@return (PHP 4, PHP 5)\n
xml_set_end_namespace_decl_handler xml_set_end_namespace_decl_handler(resource\n$parser, callback $handler) [bool]\nSet up end namespace declaration handler. Set a handler to be called when\nleaving the scope of a namespace declaration. This will be called, for each\nnamespace declaration, after the handler for the end tag of the element in\nwhich the namespace was declared.\n@param parser A reference to the XML parser.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: This event is not supported under LibXML.\n@see xml_set_start_namespace_decl_handler() - Set up start namespace\ndeclaration handler\n
xml_set_external_entity_ref_handler\nxml_set_external_entity_ref_handler(resource $parser, callback $handler) [bool]\nSet up external entity reference handler. Sets the external entity reference\nhandler function for the XML parser `parser`.\n@param parser A reference to the XML parser to set up external entity\nreference handler function.\n@return (PHP 4, PHP 5)\n
xml_set_notation_decl_handler xml_set_notation_decl_handler(resource $parser,\ncallback $handler) [bool]\nSet up notation declaration handler. Sets the notation declaration handler\nfunction for the XML parser `parser`.\n@param parser A reference to the XML parser to set up notation declaration\nhandler function.\n@return (PHP 4, PHP 5)\n
xml_set_object xml_set_object(resource $parser, object &$object) [bool]\nUse XML Parser within an object. This function allows to use `parser` inside\n`object`. All callback functions could be set with xml_set_element_handler()\netc and assumed to be methods of `object`.\n@param parser A reference to the XML parser to use inside the object.\n@param object The object where to use the XML parser.\n@return (PHP 4, PHP 5)\n
xml_set_processing_instruction_handler\nxml_set_processing_instruction_handler(resource $parser, callback $handler)\n[bool]\nSet up processing instruction (PI) handler. Sets the processing instruction\n(PI) handler function for the XML parser `parser`.\n@param parser A reference to the XML parser to set up processing instruction\n(PI) handler function.\n@return (PHP 4, PHP 5)\n
xml_set_start_namespace_decl_handler\nxml_set_start_namespace_decl_handler(resource $parser, callback $handler)\n[bool]\nSet up start namespace declaration handler. Set a handler to be called when a\nnamespace is declared. Namespace declarations occur inside start tags. But\nthe namespace declaration start handler is called before the start tag\nhandler for each namespace declared in that start tag.\n@param parser A reference to the XML parser.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see xml_set_end_namespace_decl_handler() - Set up end namespace declaration\nhandler\n
xml_set_unparsed_entity_decl_handler\nxml_set_unparsed_entity_decl_handler(resource $parser, callback $handler)\n[bool]\nSet up unparsed entity declaration handler. Sets the unparsed entity\ndeclaration handler function for the XML parser `parser`.\n@param parser A reference to the XML parser to set up unparsed entity\ndeclaration handler function.\n@return (PHP 4, PHP 5)\n
xmlrpc_decode_request xmlrpc_decode_request(string $xml, string &$method [,\nstring $encoding]) [mixed]\nDecodes XML into native PHP types.\n
xmlrpc_decode xmlrpc_decode(string $xml [, string\n$encoding=&quot;iso-8859-1&quot;]) [mixed]\nDecodes XML into native PHP types.\n@param xml XML response returned by XMLRPC method.\n@param encoding Input encoding supported by iconv.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see xmlrpc_encode_request() - Generates XML for a method request\n@see xmlrpc_is_fault() - Determines if an array value represents an XMLRPC\nfault\n
xmlrpc_encode_request xmlrpc_encode_request(string $method, mixed $params\n[, array $output_options]) [string]\nGenerates XML for a method request.\n@param method Name of the method to call.\n@param params Method parameters compatible with method signature.\n@param output_options Array specifying output options may contain (default\nvalues are emphasised): output_type: php, xml verbosity: no_white_space,\nnewlines_only, pretty escaping: cdata, non-ascii, non-print, markup (may be\na string with one value or an array with multiple values) version: simple,\nxmlrpc, soap 1.1, auto encoding: iso-8859-1, other character set supported\nby iconv\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see stream_context_create() - Create a streams context\n@see file_get_contents() - Reads entire file into a string\n@see xmlrpc_decode() - Decodes XML into native PHP types\n
xmlrpc_encode xmlrpc_encode(mixed $value) [string]\nGenerates XML for a PHP value.\n
xmlrpc_get_type xmlrpc_get_type(mixed $value) [string]\nGets xmlrpc type for a PHP value.\n
xmlrpc_is_fault xmlrpc_is_fault(array $arg) [bool]\nDetermines if an array value represents an XMLRPC fault.\n@param arg Array returned by xmlrpc_decode().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see xmlrpc_decode() - Decodes XML into native PHP types\n
xmlrpc_parse_method_descriptions xmlrpc_parse_method_descriptions(string $xml)\n[array]\nDecodes XML into a list of method descriptions.\n
timezone_name_from_abbr timezone_name_from_abbr(string $abbr [, int\n$gmtOffset=-1 [, int $isdst=-1]]) [string]\nReturns the timezone name from abbreviation.\n@param abbr Time zone abbreviation.\n@param gmtOffset Offset from GMT in seconds. Defaults to -1 which means that\nfirst found time zone corresponding to `abbr` is returned. Otherwise exact\noffset is searched and only if not found then the first time zone with any\noffset is returned.\n@param isdst Daylight saving time indicator. Defaults to -1, which means\nthat whether the time zone has daylight saving or not is not taken into\nconsideration when searching. If this is set to 1, then the `gmtOffset` is\nassumed to be an offset with daylight saving in effect; if 0, then `gmtOffset`\nis assumed to be an offset without daylight saving in effect. If `abbr`\ndoesn&#039;t exist then the time zone is searched solely by the `gmtOffset`\nand `isdst`.\n@return (PHP 5 >= 5.1.3)\n@see timezone_abbreviations_list() - Alias of DateTimeZone::listAbbreviations\n
timezone_name_get timezone_name_get\nAlias of DateTimeZone::getName.\n
timezone_offset_get timezone_offset_get\nAlias of DateTimeZone::getOffset.\n
timezone_open timezone_open\nAlias of DateTimeZone::__construct.\n
timezone_transitions_get timezone_transitions_get\nAlias of DateTimeZone::getTransitions.\n
timezone_version_get timezone_version_get(void) [string]\nGets the version of the timezonedb. Returns the current version of the\ntimezonedb.\n@return (PHP 5 >= 5.3.0)\n@see List of Supported Timezones\n
tmpfile tmpfile(void) [resource]\nCreates a temporary file. Creates a temporary file with a unique name in\nread-write (w+) mode and returns a file handle . The file is automatically\nremoved when closed (using fclose()), or when the script ends. For details,\nconsult your system documentation on the `tmpfile(3)` function, as well as\nthe stdio.h header file.\n@return (PHP 4, PHP 5)\n@see tempnam() - Create file with unique file name\n@see sys_get_temp_dir() - Returns directory path used for temporary files\n
token_get_all token_get_all(string $source) [array]\nSplit given source into PHP tokens. token_get_all() parses the given\n`source` string into PHP language tokens using the Zend engine&#039;s\nlexical scanner. For a list of parser tokens, see List of Parser Tokens,\nor use token_name() to translate a token value into its string representation.\n@param source The PHP source to parse.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
token_name token_name(int $token) [string]\nGet the symbolic name of a given PHP token. token_name() gets the symbolic\nname for a PHP `token` value.\n@param token The token value.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see List of Parser Tokens\n
touch touch(string $filename [, int $time=time() [, int $atime]]) [bool]\nSets access and modification time of file. Attempts to set the access and\nmodification times of the file named in the `filename` parameter to the value\ngiven in `time`. Note that the access time is always modified, regardless\nof the number of parameters. If the file does not exist, it will be created.\n@param filename The name of the file being touched.\n@param time The touch time. If `time` is not supplied, the current system\ntime is used.\n@param atime If present, the access time of the given filename is set to\nthe value of `atime`. Otherwise, it is set to `time`.\n@return (PHP 4, PHP 5)\n@note Note: Note that time resolution may differ from one file system\nto another.\n
trigger_error trigger_error(string $error_msg [, int\n$error_type=E_USER_NOTICE]) [bool]\nGenerates a user-level error/warning/notice message. Used to trigger a user\nerror condition, it can be used by in conjunction with the built-in error\nhandler, or with a user defined function that has been set as the new error\nhandler (set_error_handler()). This function is useful when you need to\ngenerate a particular response to an exception at runtime.\n@param error_msg The designated error message for this error. It&#039;s\nlimited to 1024 characters in length. Any additional characters beyond 1024\nwill be truncated.\n@param error_type The designated error type for this error. It only works\nwith the E_USER family of constants, and will default to E_USER_NOTICE.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see error_reporting() - Sets which PHP errors are reported\n@see set_error_handler() - Sets a user-defined error handler function\n@see restore_error_handler() - Restores the previous error handler function\n@see The error level constants\n
trim trim(string $str [, string $charlist]) [string]\nStrip whitespace (or other characters) from the beginning and end of a\nstring. This function returns a string with whitespace stripped from\nthe beginning and end of `str`. Without the second parameter, trim()\nwill strip these characters: &quot; &quot; (ASCII `32` (`0x20`)), an\nordinary space. &quot;\t&quot; (ASCII `9` (`0x09`)), a tab. &quot;\n&quot;\n(ASCII `10` (`0x0A`)), a new line (line feed). &quot;\r&quot; (ASCII `13`\n(`0x0D`)), a carriage return. &quot;\0&quot; (ASCII `0` (`0x00`)), the\n`NUL`-byte. &quot;\x0B&quot; (ASCII `11` (`0x0B`)), a vertical tab.\n@param str The string that will be trimmed.\n@param charlist Optionally, the stripped characters can also be specified\nusing the `charlist` parameter. Simply list all characters that you want to\nbe stripped. With `..` you can specify a range of characters.\n@return (PHP 4, PHP 5)\n@see ltrim() - Strip whitespace (or other characters) from the beginning of\na string\n@see rtrim() - Strip whitespace (or other characters) from the end of a string\n
uasort uasort(array &$array, callback $cmp_function) [bool]\nSort an array with a user-defined comparison function and maintain index\nassociation. This function sorts an array such that array indices maintain\ntheir correlation with the array elements they are associated with, using a\nuser-defined comparison function. This is used mainly when sorting associative\narrays where the actual element order is significant.\n@param array The input array.\n@param cmp_function See usort() and uksort() for examples of user-defined\ncomparison functions.\n@return (PHP 4, PHP 5)\n@see usort() - Sort an array by values using a user-defined comparison function\n@see The comparison of array sorting functions\n
ucfirst ucfirst(string $str) [string]\nMake a string's first character uppercase. Returns a string with the first\ncharacter of `str` capitalized, if that character is alphabetic. Note that\n&#039;alphabetic&#039; is determined by the current locale. For instance,\nin the default &quot;C&quot; locale characters such as umlaut-a (ä) will\nnot be converted.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@see lcfirst() - Make a string's first character lowercase\n@see strtolower() - Make a string lowercase\n@see strtoupper() - Make a string uppercase\n@see ucwords() - Uppercase the first character of each word in a string\n
ucwords ucwords(string $str) [string]\nUppercase the first character of each word in a string. Returns a string with\nthe first character of each word in `str` capitalized, if that character\nis alphabetic. The definition of a word is any string of characters that\nis immediately after a whitespace (These are: space, form-feed, newline,\ncarriage return, horizontal tab, and vertical tab).\n@param str The input string.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strtoupper() - Make a string uppercase\n@see strtolower() - Make a string lowercase\n@see ucfirst() - Make a string's first character uppercase\n@see mb_convert_case() - Perform case folding on a string\n
udm_add_search_limit udm_add_search_limit(resource $agent, int $var, string\n$val) [bool]\nAdd various search limits. udm_add_search_limit() adds search restrictions.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_alloc_agent_array udm_alloc_agent_array(array $databases) [resource]\nAllocate mnoGoSearch session. udm_alloc_agent_array() will create an agent\nwith multiple database connections.\n@param databases The array `databases` must contain one database URL per\nelement, analog to the first parameter of udm_alloc_agent().\n@return (PHP 4 >= 4.3.3, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@see udm_alloc_agent() - Allocate mnoGoSearch session\n
udm_alloc_agent udm_alloc_agent(string $dbaddr [, string $dbmode]) [resource]\nAllocate mnoGoSearch session. Allocate a mnoGoSearch session.\n@param dbaddr `dbaddr` - URL-style database description, with options\n(type, host, database name, port, user and password) to connect to\nSQL database. Do not matter for built-in text files support. Format for\n`dbaddr`: `DBType:[//[DBUser[:DBPass]@]DBHost[:DBPort]]/DBName/`. Currently\nsupported DBType values are: mysql, pgsql, msql, solid, mssql, oracle, and\nibase. Actually, it does not matter for native libraries support, but ODBC\nusers should specify one of the supported values. If your database type is\nnot supported, you may use `unknown` instead.\n@param dbmode `dbmode` - You may select the SQL database mode of words\nstorage. Possible values of `dbmode` are: `single`, `multi`, `crc`, or\n`crc-multi`. When `single` is specified, all words are stored in the same\ntable. If `multi ` is selected, words will be located in different tables\ndepending of their lengths. &quot;multi&quot; mode is usually faster, but\nrequires more tables in the database. If &quot;crc&quot; mode is selected,\nmnoGoSearch will store 32 bit integer word IDs calculated by CRC32 algorithm\ninstead of words. This mode requires less disk space and it is faster comparing\nwith &quot;single&quot; and &quot;multi&quot; modes. `crc-multi` uses the\nsame storage structure with the &quot;crc&quot; mode, but also stores words\nin different tables depending on words lengths like in &quot;multi&quot; mode.\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@note Note: In fact this function does not open a connection to the database\nand thus does not check the entered login and password. Establishing a\nconnection to the database and login/password verification is done by\nudm_find().\n
udm_api_version udm_api_version(void) [int]\nGet mnoGoSearch API version. Gets the mnoGoSearch API version. This\nfunction allows the user to identify which API functions are available,\ne.g. udm_get_doc_count() function is only available in mnoGoSearch 3.1.11\nor later.\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_cat_list udm_cat_list(resource $agent, string $category) [array]\nGet all the categories on the same level with the current one. Gets all the\ncategories on the same level with the current one. The function can be useful\nfor developing categories tree browser.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@param category\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@see udm_cat_path() - Get the path to the current category\n
udm_cat_path udm_cat_path(resource $agent, string $category) [array]\nGet the path to the current category. Returns an array describing the path\nin the categories tree from the tree root to the current one, specified by\n`category`.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@param category\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@see udm_cat_list() - Get all the categories on the same level with the\ncurrent one\n
udm_check_charset udm_check_charset(resource $agent, string $charset) [bool]\nCheck if the given charset is known to mnogosearch. WarningThis function is\ncurrently not documented; only its argument list is available.\n
udm_check_stored udm_check_stored(resource $agent, int $link, string $doc_id)\n[int]\nCheck connection to stored. WarningThis function is currently not documented;\nonly its argument list is available.\n
udm_clear_search_limits udm_clear_search_limits(resource $agent) [bool]\nClear all mnoGoSearch search restrictions. udm_clear_search_limits() resets\ndefined search limitations.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@see udm_add_search_limit() - Add various search limits\n
udm_close_stored udm_close_stored(resource $agent, int $link) [int]\nClose connection to stored. WarningThis function is currently not documented;\nonly its argument list is available.\n
udm_crc32 udm_crc32(resource $agent, string $str) [int]\nReturn CRC32 checksum of given string. WarningThis function is currently\nnot documented; only its argument list is available.\n
udm_errno udm_errno(resource $agent) [int]\nGet mnoGoSearch error number. Receiving numeric agent error code.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_error udm_error(resource $agent) [string]\nGet mnoGoSearch error message. Gets the agent error message.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_find udm_find(resource $agent, string $query) [resource]\nPerform search. Performs a search. The search itself. The first argument -\nsession, the next one - query itself. To find something just type words you\nwant to find and press SUBMIT button. For example, &quot;mysql odbc&quot;. You\nshould not use quotes &quot; in query, they are written here only to divide\na query from other text. mnoGoSearch will find all documents that contain\nword &quot;mysql&quot; and/or word &quot;odbc&quot;. Best documents having\nbigger weights will be displayed first. If you use search mode ALL, search\nwill return documents that contain both (or more) words you entered. In case\nyou use mode ANY, the search will return list of documents that contain any\nof the words you entered. If you want more advanced results you may use query\nlanguage. You should select &quot;bool&quot; match mode in the search from.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@param query mnoGoSearch understands the following boolean operators: &amp;\n- logical AND. For example, &quot;mysql &amp; odbc&quot;. mnoGoSearch will\nfind any URLs that contain both &quot;mysql&quot; and &quot;odbc&quot;. |\n- logical OR. For example &quot;mysql|odbc&quot;. mnoGoSearch will find\nany URLs, that contain word &quot;mysql&quot; or word &quot;odbc&quot;. ~\n- logical NOT. For example &quot;mysql &amp; ~odbc&quot;. mnoGoSearch\nwill find URLs that contain word &quot;mysql&quot; and do not contain\nword &quot;odbc&quot; at the same time. Note that ~ just excludes given\nword from results. Query &quot;~odbc&quot; will find nothing! () - group\ncommand to compose more complex queries. For example &quot;(mysql | msql)\n&amp; ~postgres&quot;. Query language is simple and powerful at the same\ntime. Just consider query as usual boolean expression.\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_free_agent udm_free_agent(resource $agent) [int]\nFree mnoGoSearch session. Freeing up memory allocated for agent session.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_free_ispell_data udm_free_ispell_data(int $agent) [bool]\nFree memory allocated for ispell data. Frees the memory allocated for\nispell data.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@note Note: This function is supported beginning from version 3.1.12 of\nmnoGoSearch and it does not do anything in previous versions.\n
udm_free_res udm_free_res(resource $res) [bool]\nFree mnoGoSearch result. Freeing up memory allocated for results.\n@param res A link to a result identifier, received after call to udm_find().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_get_doc_count udm_get_doc_count(resource $agent) [int]\nGet total number of documents in database. udm_get_doc_count() returns the\nnumber of documents in the database.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@note Note: This function is supported only in mnoGoSearch 3.1.11 or later.\n
udm_get_res_field udm_get_res_field(resource $res, int $row, int $field)\n[string]\nFetch a result field. Fetch a mnoGoSearch result field.\n@param res `res` - a link to result identifier, received after call to\nudm_find().\n@param row `row` - the number of the link on the current page. May have\nvalues from 0 to `UDM_PARAM_NUM_ROWS-1`.\n@param field `field` - field identifier, may have the following values:\nUDM_FIELD_URL - document URL field UDM_FIELD_CONTENT - document `Content-type`\nfield (for example, `text/html`). UDM_FIELD_CATEGORY - document category\nfield. Use udm_cat_path() to get full path to current category from the\ncategories tree root. (This parameter is available only in PHP 4.0.6\nor later). UDM_FIELD_TITLE - document title field. UDM_FIELD_KEYWORDS\n- document keywords field (from META KEYWORDS tag). UDM_FIELD_DESC -\ndocument description field (from META DESCRIPTION tag). UDM_FIELD_TEXT -\ndocument body text (the first couple of lines to give an idea of what\nthe document is about). UDM_FIELD_SIZE - document size. UDM_FIELD_URLID -\nunique URL ID of the link. UDM_FIELD_RATING - page rating (as calculated\nby mnoGoSearch). UDM_FIELD_MODIFIED - last-modified field in unixtime\nformat. UDM_FIELD_ORDER - the number of the current document in set of found\ndocuments. UDM_FIELD_CRC - document CRC.\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_get_res_param udm_get_res_param(resource $res, int $param) [string]\nGet mnoGoSearch result parameters. Gets the mnoGoSearch result parameters.\n@param res `res` - a link to result identifier, received after call to\nudm_find().\n@param param `param` - parameter identifier, may have the following values:\nUDM_PARAM_NUM_ROWS - number of received found links on the current page. It\nis equal to UDM_PARAM_PAGE_SIZE for all search pages, on the last page -\nthe rest of links. UDM_PARAM_FOUND - total number of results matching the\nquery. UDM_PARAM_WORDINFO - information on the words found. E.g. search\nfor &quot;a good book&quot; will return &quot;a: stopword, good:5637, book:\n120&quot; UDM_PARAM_SEARCHTIME - search time in seconds. UDM_PARAM_FIRST_DOC -\nthe number of the first document displayed on current page. UDM_PARAM_LAST_DOC\n- the number of the last document displayed on current page.\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_hash32 udm_hash32(resource $agent, string $str) [int]\nReturn Hash32 checksum of gived string. udm_hash32() will take a string\n`str` and return a quite unique 32-bit hash number from it.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@param str The input string.\n@return (PHP 4 >= 4.3.3, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@see udm_alloc_agent() - Allocate mnoGoSearch session\n
udm_load_ispell_data udm_load_ispell_data(resource $agent, int $var, string\n$val1, string $val2, int $flag) [bool]\nLoad ispell data. udm_load_ispell_data() loads ispell data. After using\nthis function to free memory allocated for ispell data, please use\nudm_free_ispell_data(), even if you use UDM_ISPELL_TYPE_SERVER mode.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n
udm_open_stored udm_open_stored(resource $agent, string $storedaddr) [int]\nOpen connection to stored. WarningThis function is currently not documented;\nonly its argument list is available.\n
udm_set_agent_param udm_set_agent_param(resource $agent, int $var, string $val)\n[bool]\nSet mnoGoSearch agent session parameters. Defines mnoGoSearch session\nparameters.\n@param agent A link to Agent, received after call to udm_alloc_agent().\n@param var The following parameters and their values are available:\nUDM_PARAM_PAGE_NUM - used to choose search results page number (results\nare returned by pages beginning from 0, with UDM_PARAM_PAGE_SIZE results\nper page). UDM_PARAM_PAGE_SIZE - number of search results displayed on one\npage. UDM_PARAM_SEARCH_MODE - search mode. The following values available:\nUDM_MODE_ALL - search for all words; UDM_MODE_ANY - search for any word;\nUDM_MODE_PHRASE - phrase search; UDM_MODE_BOOL - boolean search. See\nudm_find() for details on boolean search. UDM_PARAM_CACHE_MODE - turns on\nor off search result cache mode. When enabled, the search engine will store\nsearch results to disk. In case a similar search is performed later, the engine\nwill take results from the cache for faster performance. Available values:\nUDM_CACHE_ENABLED, UDM_CACHE_DISABLED. UDM_PARAM_TRACK_MODE - turns on or\noff trackquery mode. Since version 3.1.2 mnoGoSearch has a query tracking\nsupport. Note that tracking is implemented in SQL version only and not\navailable in built-in database. To use tracking, you have to create tables for\ntracking support. For MySQL, use create/mysql/track.txt. When doing a search,\nfront-end uses those tables to store query words, a number of found documents\nand current Unix timestamp in seconds. Available values: UDM_TRACK_ENABLED,\nUDM_TRACK_DISABLED. UDM_PARAM_PHRASE_MODE - defines whether index database\nusing phrases (&quot;phrase&quot; parameter in indexer.conf). Possible\nvalues: UDM_PHRASE_ENABLED and UDM_PHRASE_DISABLED. Please note, that if\nphrase search is enabled (UDM_PHRASE_ENABLED), it is still possible to do\nsearch in any mode (`ANY`, `ALL`, `BOOL` or `PHRASE`). In 3.1.10 version of\nmnoGoSearch phrase search is supported only in sql and built-in database\nmodes, while beginning with 3.1.11 phrases are supported in cachemode as\nwell. Examples of phrase search: `&quot;Arizona desert&quot;` - This query\nreturns all indexed documents that contain &quot;Arizona desert&quot;\nas a phrase. Notice that you need to put double quotes around the phrase\nUDM_PARAM_CHARSET - defines local charset. Available values: set of charsets\nsupported by mnoGoSearch, e.g. koi8-r, cp1251, ... UDM_PARAM_STOPFILE -\nDefines name and path to stopwords file. (There is a small difference with\nmnoGoSearch - while in mnoGoSearch if relative path or no path entered,\nit looks for this file in relation to UDM_CONF_DIR, the module looks\nfor the file in relation to current path, i.e. to the path where the PHP\nscript is executed.) UDM_PARAM_STOPTABLE - Load stop words from the given\nSQL table. You may use several StopwordTable commands. This command has no\neffect when compiled without SQL database support. UDM_PARAM_WEIGHT_FACTOR\n- represents weight factors for specific document parts. Currently body,\ntitle, keywords, description, url are supported. To activate this feature\nplease use degrees of 2 in *Weight commands of the indexer.conf. Let&#039;s\nimagine that we have these weights: URLWeight 1 BodyWeight 2 TitleWeight 4\nKeywordWeight 8 DescWeight 16 As far as indexer uses bit OR operation for\nword weights when some word presents several time in the same document, it\nis possible at search time to detect word appearance in different document\nparts. Word which appears only in the body will have 00000010 aggregate weight\n(in binary notation). Word used in all document parts will have 00011111\naggregate weight. This parameter&#039;s value is a string of hex digits\n`ABCDE`. Each digit is a factor for corresponding bit in word weight. For\nthe given above weights configuration: E is a factor for weight 1 (URL Weight\nbit) D is a factor for weight 2 (BodyWeight bit) C is a factor for weight 4\n(TitleWeight bit) B is a factor for weight 8 (KeywordWeight bit) A is a factor\nfor weight 16 (DescWeight bit) Examples: UDM_PARAM_WEIGHT_FACTOR=00001\nwill search through URLs only. UDM_PARAM_WEIGHT_FACTOR=00100 will\nsearch through Titles only. UDM_PARAM_WEIGHT_FACTOR=11100 will\nsearch through Title,Keywords,Description but not through URL and\nBody. UDM_PARAM_WEIGHT_FACTOR=F9421 will search through: Description with\nfactor 15 (F hex) Keywords with factor 9 Title with factor 4 Body with\nfactor 2 URL with factor 1 If UDM_PARAM_WEIGHT_FACTOR variable is omitted,\noriginal weight value is taken to sort results. For a given above weight\nconfiguration it means that document description has a most big weight\n16. UDM_PARAM_WORD_MATCH - word match. You may use this parameter to\nchoose word match type. This feature works only in &quot;single&quot;\nand &quot;multi&quot; modes using SQL based and built-in database. It\ndoes not work in cachemode and other modes since they use word CRC and\ndo not support substring search. Available values: UDM_MATCH_BEGIN - word\nbeginning match; UDM_MATCH_END - word ending match; UDM_MATCH_WORD - whole\nword match; UDM_MATCH_SUBSTR - word substring match. UDM_PARAM_MIN_WORD_LEN\n- defines minimal word length. Any word shorter this limit is considered\nto be a stopword. Please note that this parameter value is inclusive,\ni.e. if UDM_PARAM_MIN_WORD_LEN=3, a word 3 characters long will not be\nconsidered a stopword, while a word 2 characters long will be. Default value\nis 1. UDM_PARAM_ISPELL_PREFIXES - Possible values: UDM_PREFIXES_ENABLED\nand UDM_PREFIXES_DISABLED, that respectively enable or disable using\nprefixes. E.g. if a word &quot;tested&quot; is in search query, also\nwords like &quot;test&quot;, &quot;testing&quot;, etc. Only suffixes are\nsupported by default. Prefixes usually change word meanings, for example\nif somebody is searching for the word &quot;tested&quot; one hardly wants\n&quot;untested&quot; to be found. Prefixes support may also be found useful\nfor site&#039;s spelling checking purposes. In order to enable ispell,\nyou have to load ispell data with udm_load_ispell_data(). UDM_PARAM_CROSS_WORDS\n- enables or disables crosswords support. Possible values:\nUDM_CROSS_WORDS_ENABLED and UDM_CROSS_WORDS_DISABLED. The crosswords feature\nallows to assign words between &lt;a href=&quot;xxx&quot;> and &lt;/a> also\nto a document this link leads to. It works in SQL database mode and is not\nsupported in built-in database and Cachemode. UDM_PARAM_VARDIR - specifies\na custom path to directory where indexer stores data when using built-in\ndatabase and in cache mode. By default `/var` directory of mnoGoSearch\ninstallation is used. Can have only string values.\n@param val\n@return (PHP 4 >= 4.0.5, PHP 5 &lt;= 5.0.5, PECL mnogosearch >= 1.0.0)\n@note Note: Crosswords are supported only in mnoGoSearch 3.1.11 or later.\n
uksort uksort(array &$array, callback $cmp_function) [bool]\nSort an array by keys using a user-defined comparison function. uksort()\nwill sort the keys of an array using a user-supplied comparison function. If\nthe array you wish to sort needs to be sorted by some non-trivial criteria,\nyou should use this function.\n@param array The input array.\n@param cmp_function The callback comparison function. Function `cmp_function`\nshould accept two parameters which will be filled by pairs of `array`\nkeys. The comparison function must return an integer less than, equal to,\nor greater than zero if the first argument is considered to be respectively\nless than, equal to, or greater than the second.\n@return (PHP 4, PHP 5)\n@see usort() - Sort an array by values using a user-defined comparison function\n@see The comparison of array sorting functions\n
umask umask([int $mask]) [int]\nChanges the current umask. umask() sets PHP&#039;s umask to `mask` &amp;\n0777 and returns the old umask. When PHP is being used as a server module,\nthe umask is restored when each request is finished.\n@param mask The new umask.\n@return (PHP 4, PHP 5)\n@note Note: Avoid using this function in multithreaded webservers. It\nis better to change the file permissions with chmod() after creating the\nfile. Using umask() can lead to unexpected behavior of concurrently running\nscripts and the webserver itself because they all use the same umask.\n
uniqid uniqid([string $prefix=&quot;&quot; [, bool $more_entropy=false]])\n[string]\nGenerate a unique ID. Gets a prefixed unique identifier based on the current\ntime in microseconds.\n@param prefix Can be useful, for instance, if you generate identifiers\nsimultaneously on several hosts that might happen to generate the identifier\nat the same microsecond. With an empty `prefix`, the returned string will\nbe 13 characters long. If `more_entropy` is TRUE, it will be 23 characters.\n@param more_entropy If set to TRUE, uniqid() will add additional entropy\n(using the combined linear congruential generator) at the end of the return\nvalue, which should make the results more unique.\n@return (PHP 4, PHP 5)\n@note Note: Under Cygwin, the `more_entropy` must be set to TRUE for this\nfunction to work.\n
unixtojd unixtojd([int $timestamp=time()]) [int]\nConvert Unix timestamp to Julian Day. Return the Julian Day for a Unix\n`timestamp` (seconds since 1.1.1970), or for the current day if no `timestamp`\nis given.\n@param timestamp A unix timestamp to convert.\n@return (PHP 4, PHP 5)\n@see jdtounix() - Convert Julian Day to Unix timestamp\n
unlink unlink(string $filename [, resource $context]) [bool]\nDeletes a file. Deletes `filename`. Similar to the Unix C unlink() function. A\nE_WARNING level error will be generated on failure.\n@param filename Path to the file.\n@param context Note: Context support was added with PHP 5.0.0. For a\ndescription of `contexts`, refer to Stream Functions.\n@return (PHP 4, PHP 5)\n@see rmdir() - Removes directory\n
unpack unpack(string $format, string $data) [array]\nUnpack data from binary string. Unpacks from a binary string into an array\naccording to the given `format`. The unpacked data is stored in an associative\narray. To accomplish this you have to name the different format codes and\nseparate them by a slash /. If a repeater argument is present, then each of\nthe array keys will have a sequence number behind the given name.\n@param format See pack() for an explanation of the format codes.\n@param data The packed data.\n@return (PHP 4, PHP 5)\n@see pack() - Pack data into binary string\n
unregister_tick_function unregister_tick_function(string $function_name) [void]\nDe-register a function for execution on each tick.\n@param function_name The function name, as a string.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see register_tick_function() - Register a function for execution on each tick\n
unserialize unserialize(string $str) [mixed]\nCreates a PHP value from a stored representation.\n@param str The serialized string. If the variable being unserialized\nis an object, after successfully reconstructing the object PHP will\nautomatically attempt to call the __wakeup() member function (if it\nexists). Note: unserialize_callback_func directive It&#039;s possible to\nset a callback-function which will be called, if an undefined class should\nbe instantiated during unserializing. (to prevent getting an incomplete\nobject &quot;__PHP_Incomplete_Class&quot;.) Use your php.ini, ini_set()\nor .htaccess to define &#039;`unserialize_callback_func`&#039;. Everytime\nan undefined class should be instantiated, it&#039;ll be called. To disable\nthis feature just empty this setting.\n@return (PHP 4, PHP 5)\n@see serialize() - Generates a storable representation of a value\n@see Autoloading Objects\n@see unserialize_callback_func\n
unset unset(mixed $var [, mixed $var [, mixed $...]]) [void]\nUnset a given variable. unset() destroys the specified variables. The behavior\nof unset() inside of a function can vary depending on what type of variable\nyou are attempting to destroy.\n@param var The variable to be unset.\n@param var Another variable ..\n@param ...\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@note Note: It is possible to unset even object properties visible in\ncurrent context.\n@note Note: It is not possible to unset `$this` inside an object method\nsince PHP 5.\n@note Note: When using unset() on inaccessible object properties, the __unset\noverloading method will be called, if declared.\n@see isset() - Determine if a variable is set and is not NULL\n@see empty() - Determine whether a variable is empty\n@see __unset\n@see array_splice() - Remove a portion of the array and replace it with\nsomething else\n
urldecode urldecode(string $str) [string]\nDecodes URL-encoded string. Decodes any `%##` encoding in the given\nstring. Plus symbols (&#039;`+`&#039;) are decoded to a space character.\n@param str The string to be decoded.\n@return (PHP 4, PHP 5)\n@see urlencode() - URL-encodes string\n@see rawurlencode() - URL-encode according to RFC 3986\n@see rawurldecode() - Decode URL-encoded strings\n
urlencode urlencode(string $str) [string]\nURL-encodes string. This function is convenient when encoding a string to\nbe used in a query part of a URL, as a convenient way to pass variables to\nthe next page.\n@param str The string to be encoded.\n@return (PHP 4, PHP 5)\n@note Note: Be careful about variables that may match HTML entities. Things\nlike &amp;amp, &amp;copy and &amp;pound are parsed by the browser and the\nactual entity is used instead of the desired variable name. This is an obvious\nhassle that the W3C has been telling people about for years. The reference\nis here: &raquo; http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2. PHP\nsupports changing the argument separator to the W3C-suggested semi-colon\nthrough the arg_separator .ini directive. Unfortunately most user agents\ndo not send form data in this semi-colon separated format. A more portable\nway around this is to use &amp;amp; instead of &amp; as the separator. You\ndon&#039;t need to change PHP&#039;s arg_separator for this. Leave it as\n&amp;, but simply encode your URLs using htmlentities() or htmlspecialchars().\n@see urldecode() - Decodes URL-encoded string\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see rawurlencode() - URL-encode according to RFC 3986\n@see rawurldecode() - Decode URL-encoded strings\n
use_soap_error_handler use_soap_error_handler([bool $handler=true]) [bool]\nSet whether to use the SOAP error handler. This function sets whether or not\nto use the SOAP error handler in the SOAP server. It will return the previous\nvalue. If set to TRUE, details of errors in a SoapServer application will\nbe sent to the clients. If FALSE, no information will be sent.\n@param handler Set to TRUE to send error details to clients.\n@return (Unknown)\n@see set_error_handler() - Sets a user-defined error handler function\n@see set_exception_handler() - Sets a user-defined exception handler function\n
user_error user_error\nAlias of trigger_error.\n
usleep usleep(int $micro_seconds) [void]\nDelay execution in microseconds. Delays program execution for the given\nnumber of micro seconds.\n@param micro_seconds Halt time in micro seconds. A micro second is one\nmillionth of a second.\n@return (PHP 4, PHP 5)\n@see sleep() - Delay execution\n@see time_nanosleep() - Delay for a number of seconds and nanoseconds\n@see time_sleep_until() - Make the script sleep until the specified time\n@see set_time_limit() - Limits the maximum execution time\n
usort usort(array &$array, callback $cmp_function) [bool]\nSort an array by values using a user-defined comparison function. This function\nwill sort an array by its values using a user-supplied comparison function. If\nthe array you wish to sort needs to be sorted by some non-trivial criteria,\nyou should use this function. Note: If two members compare as equal, their\norder in the sorted array is undefined. Note: This function assigns new keys\nto the elements in `array`. It will remove any existing keys that may have\nbeen assigned, rather than just reordering the keys.\n@param array The input array.\n@param cmp_function The comparison function must return an integer less than,\nequal to, or greater than zero if the first argument is considered to be\nrespectively less than, equal to, or greater than the second.\n@return (PHP 4, PHP 5)\n@see uasort() - Sort an array with a user-defined comparison function and\nmaintain index association\n@see The comparison of array sorting functions\n
utf8_decode utf8_decode(string $data) [string]\nConverts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1. This function decodes `data`, assumed to be\n   `UTF-8` encoded, to `ISO-8859-1`.\n@param data An UTF-8 encoded string.\n@return (PHP 4, PHP 5)\n@see utf8_encode() - Encodes an ISO-8859-1 string to UTF-8 (contains an\nexplanation of UTF-8 encoding)\n
utf8_encode utf8_encode(string $data) [string]\nEncodes an ISO-8859-1 string to UTF-8. This function encodes the string `data`\nto `UTF-8`, and returns the encoded version. `UTF-8` is a standard mechanism\nused by Unicode for encoding wide character values into a byte stream. `UTF-8`\nis transparent to plain ASCII characters, is self-synchronized (meaning it\nis possible for a program to figure out where in the bytestream characters\nstart) and can be used with normal string comparison functions for sorting\nand such. PHP encodes `UTF-8` characters in up to four bytes, like this:\nUTF-8 encoding bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb\n3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb\nEach b represents a bit that can be used to store character data.\n@param data An ISO-8859-1 string.\n@return (PHP 4, PHP 5)\n
var_dump var_dump(mixed $expression [, mixed $expression [, $...]]) [void]\nDumps information about a variable.\n@param expression The variable you want to export.\n@return (PHP 4, PHP 5)\n@see var_export() - Outputs or returns a parsable string representation of\na variable\n@see print_r() - Prints human-readable information about a variable\n
var_export var_export(mixed $expression [, bool $return=false]) [mixed]\nOutputs or returns a parsable string representation of a variable.\n@param expression The variable you want to export.\n@param return If used and set to TRUE, var_export() will return the variable\nrepresentation instead of outputing it. Note: This function uses internal\noutput buffering with this parameter so it can not be used inside an ob_start()\ncallback function.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: Variables of type resource couldn&#039;t be exported by this\nfunction.\n@note Note: var_export() does not handle circular references as it would be\nclose to impossible to generate parsable PHP code for that. If you want to do\nsomething with the full representation of an array or object, use serialize().\n@see print_r() - Prints human-readable information about a variable\n@see serialize() - Generates a storable representation of a value\n@see var_dump() - Dumps information about a variable\n
variant_abs variant_abs(mixed $val) [mixed]\nReturns the absolute value of a variant. Returns the absolute value of\na variant.\n@param val The variant.\n@return (PHP 5)\n@see abs() - Absolute value\n
variant_add variant_add(mixed $left, mixed $right) [mixed]\n&quot;Adds&quot; two variant values together and returns the result. Adds\n`left` to `right` using the following rules (taken from the MSDN library),\nwhich correspond to those of Visual Basic: Variant Addition Rules If Then Both\nexpressions are of the string type Concatenation One expression is a string\ntype and the other a character Addition One expression is numeric and the other\nis a string Addition Both expressions are numeric Addition Either expression\nis NULL NULL is returned Both expressions are empty Integer subtype is returned\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_sub() - Subtracts the value of the right variant from the left\nvariant value\n
variant_and variant_and(mixed $left, mixed $right) [mixed]\nPerforms a bitwise AND operation between two variants. Performs a bitwise AND\noperation. Note that this is slightly different from a regular AND operation.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_or() - Performs a logical disjunction on two variants\n
variant_cast variant_cast(variant $variant, int $type) [variant]\nConvert a variant into a new variant object of another type. This function\nmakes a copy of `variant` and then performs a variant cast operation\nto force the copy to have the type given by `type`. This function wraps\nVariantChangeType() in the COM library; consult MSDN for more information.\n@param variant The variant.\n@param type `type` should be one of the VT_XXX constants.\n@return (PHP 5)\n@see variant_set_type() - Convert a variant into another type\n&quot;in-place&quot;\n
variant_cat variant_cat(mixed $left, mixed $right) [mixed]\nconcatenates two variant values together and returns the result. Concatenates\n`left` with `right` and returns the result. This function is notionally\nequivalent to `$left` `.` `$right`.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see String Operators for the string concatenation operator\n
variant_cmp variant_cmp(mixed $left, mixed $right [, int $lcid [, int $flags]])\n[int]\nCompares two variants. Compares `left` with `right`. This function will only\ncompare scalar values, not arrays or variant records.\n@param left The left operand.\n@param right The right operand.\n@param lcid A valid Locale Identifier to use when comparing strings (this\naffects string collation).\n@param flags `flags` can be one or more of the following values OR&#039;d\ntogether, and affects string comparisons: Variant Comparision Flags value\nmeaning NORM_IGNORECASE Compare case insensitively NORM_IGNORENONSPACE Ignore\nnonspacing characters NORM_IGNORESYMBOLS Ignore symbols NORM_IGNOREWIDTH\nIgnore string width NORM_IGNOREKANATYPE Ignore Kana type NORM_IGNOREKASHIDA\nIgnore Arabic kashida characters\n@return (PHP 5)\n
variant_date_from_timestamp variant_date_from_timestamp(int $timestamp)\n[variant]\nReturns a variant date representation of a Unix timestamp. Converts `timestamp`\nfrom a unix timestamp value into a variant of type VT_DATE. This allows\neasier interopability between the unix-ish parts of PHP and COM.\n@param timestamp A unix timestamp.\n@return (PHP 5)\n@see variant_date_to_timestamp() - Converts a variant date/time value to\nUnix timestamp\n@see mktime() - Get Unix timestamp for a date\n@see time() - Return current Unix timestamp\n
variant_date_to_timestamp variant_date_to_timestamp(variant $variant) [int]\nConverts a variant date/time value to Unix timestamp. Converts `variant`\nfrom a VT_DATE (or similar) value into a Unix timestamp. This allows easier\ninteropability between the Unix-ish parts of PHP and COM.\n@param variant The variant.\n@return (PHP 5)\n@see variant_date_from_timestamp() - Returns a variant date representation\nof a Unix timestamp\n@see date() - Format a local time/date\n@see strftime() - Format a local time/date according to locale settings\n
variant_div variant_div(mixed $left, mixed $right) [mixed]\nReturns the result from dividing two variants. Divides `left` by `right`\nand returns the result.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_idiv() - Converts variants to integers and then returns the\nresult from dividing them\n
variant_eqv variant_eqv(mixed $left, mixed $right) [mixed]\nPerforms a bitwise equivalence on two variants. Performs a bitwise equivalence\non two variants.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n
variant_fix variant_fix(mixed $variant) [mixed]\nReturns the integer portion of a variant. Gets the integer portion of\na variant.\n@param variant The variant.\n@return (PHP 5)\n@see variant_int() - Returns the integer portion of a variant\n@see variant_round() - Rounds a variant to the specified number of decimal\nplaces\n@see floor() - Round fractions down\n@see ceil() - Round fractions up\n@see round() - Rounds a float\n
variant_get_type variant_get_type(variant $variant) [int]\nReturns the type of a variant object. Returns the type of a variant object.\n@param variant The variant object.\n@return (PHP 5)\n
variant_idiv variant_idiv(mixed $left, mixed $right) [mixed]\nConverts variants to integers and then returns the result from dividing\nthem. Converts `left` and `right` to integer values, and then performs\ninteger division.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_div() - Returns the result from dividing two variants\n
variant_imp variant_imp(mixed $left, mixed $right) [mixed]\nPerforms a bitwise implication on two variants. Performs a bitwise implication\noperation.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n
variant_int variant_int(mixed $variant) [mixed]\nReturns the integer portion of a variant. Gets the integer portion of\na variant.\n@param variant The variant.\n@return (PHP 5)\n@see variant_fix() - Returns the integer portion of a variant\n@see variant_round() - Rounds a variant to the specified number of decimal\nplaces\n@see floor() - Round fractions down\n@see ceil() - Round fractions up\n@see round() - Rounds a float\n
variant_mod variant_mod(mixed $left, mixed $right) [mixed]\nDivides two variants and returns only the remainder. Divides `left` by\n`right` and returns the remainder.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_div() - Returns the result from dividing two variants\n@see variant_idiv() - Converts variants to integers and then returns the\nresult from dividing them\n
variant_mul variant_mul(mixed $left, mixed $right) [mixed]\nMultiplies the values of the two variants. Multiplies `left` by `right`.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_div() - Returns the result from dividing two variants\n@see variant_idiv() - Converts variants to integers and then returns the\nresult from dividing them\n
variant_neg variant_neg(mixed $variant) [mixed]\nPerforms logical negation on a variant. Performs logical negation of `variant`.\n@param variant The variant.\n@return (PHP 5)\n
variant_not variant_not(mixed $variant) [mixed]\nPerforms bitwise not negation on a variant. Performs bitwise not negation on\n`variant` and returns the result.\n@param variant The variant.\n@return (PHP 5)\n
variant_or variant_or(mixed $left, mixed $right) [mixed]\nPerforms a logical disjunction on two variants. Performs a bitwise OR\noperation. Note that this is slightly different from a regular OR operation.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_and() - Performs a bitwise AND operation between two variants\n@see variant_xor() - Performs a logical exclusion on two variants\n
variant_pow variant_pow(mixed $left, mixed $right) [mixed]\nReturns the result of performing the power function with two variants. Returns\nthe result of `left` to the power of `right`.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see pow() - Exponential expression\n
variant_round variant_round(mixed $variant, int $decimals) [mixed]\nRounds a variant to the specified number of decimal places. Returns the\nvalue of `variant` rounded to `decimals` decimal places.\n@param variant The variant.\n@param decimals Number of decimal places.\n@return (PHP 5)\n@see round() - Rounds a float\n
variant_set_type variant_set_type(variant $variant, int $type) [void]\nConvert a variant into another type &quot;in-place&quot;. This function\nis similar to variant_cast() except that the variant is modified\n&quot;in-place&quot;; no new variant is created. The parameters for this\nfunction have identical meaning to those of variant_cast().\n@param variant The variant.\n@param type\n@return (PHP 5)\n@see variant_cast() - Convert a variant into a new variant object of\nanother type\n
variant_set variant_set(variant $variant, mixed $value) [void]\nAssigns a new value for a variant object. Converts `value` to a variant\nand assigns it to the `variant` object; no new variant object is created,\nand the old value of `variant` is freed/released.\n@param variant The variant.\n@param value\n@return (PHP 5)\n
variant_sub variant_sub(mixed $left, mixed $right) [mixed]\nSubtracts the value of the right variant from the left variant value. Subtracts\n`right` from `left`.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_add() - &quot;Adds&quot; two variant values together and returns\nthe result\n
variant_xor variant_xor(mixed $left, mixed $right) [mixed]\nPerforms a logical exclusion on two variants. Performs a logical exclusion.\n@param left The left operand.\n@param right The right operand.\n@return (PHP 5)\n@see variant_or() - Performs a logical disjunction on two variants\n@see variant_and() - Performs a bitwise AND operation between two variants\n
version_compare version_compare(string $version1, string $version2 [, string\n$operator]) [mixed]\nCompares two &quot;PHP-standardized&quot; version number\nstrings. version_compare() compares two &quot;PHP-standardized&quot; version\nnumber strings. This is useful if you would like to write programs working\nonly on some versions of PHP. The function first replaces `_`, `-` and\n`+` with a dot `.` in the version strings and also inserts dots `.` before\nand after any non number so that for example &#039;4.3.2RC1&#039; becomes\n&#039;4.3.2.RC.1&#039;. Then it splits the results like if you were using\nexplode(&#039;.&#039;, $ver). Then it compares the parts starting from left\nto right. If a part contains special version strings these are handled in the\nfollowing order: `any string not found in this list` &lt; `dev` &lt; `alpha` =\n`a` &lt; `beta` = `b` &lt; `RC` = `rc` &lt; `#` &lt; `pl` = `p`. This way not\nonly versions with different levels like &#039;4.1&#039; and &#039;4.1.2&#039;\ncan be compared but also any PHP specific version containing development state.\n@param version1 First version number.\n@param version2 Second version number.\n@param operator If you specify the third optional `operator` argument, you can\ntest for a particular relationship. The possible operators are: `&lt;`, `lt`,\n`&lt;=`, `le`, `>`, `gt`, `>=`, `ge`, `==`, `=`, `eq`, `!=`, `&lt;>`, `ne`\nrespectively. This parameter is case-sensitive, so values should be lowercase.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: The PHP_VERSION constant holds current PHP version.\n@note Note: Note that pre-release versions, such as 5.3.0-dev, are considered\nlower than their final release counterparts (like 5.3.0).\n@see phpversion() - Gets the current PHP version\n@see php_uname() - Returns information about the operating system PHP is\nrunning on\n@see function_exists() - Return TRUE if the given function has been defined\n
vfprintf vfprintf(resource $handle, string $format, array $args) [int]\nWrite a formatted string to a stream. Write a string produced according to\n`format` to the stream resource specified by `handle`. Operates as fprintf()\nbut accepts an array of arguments, rather than a variable number of arguments.\n@param handle\n@param format See sprintf() for a description of `format`.\n@param args\n@return (PHP 5)\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n@see sscanf() - Parses input from a string according to a format\n@see fscanf() - Parses input from a file according to a format\n@see vsprintf() - Return a formatted string\n@see number_format() - Format a number with grouped thousands\n
virtual virtual(string $filename) [bool]\nPerform an Apache sub-request. virtual() is an Apache-specific function which\nis similar to `&lt;!--#include virtual...-->` in `mod_include`. It performs an\nApache sub-request. It is useful for including CGI scripts or .shtml files,\nor anything else that you would parse through Apache. Note that for a CGI\nscript, the script must generate valid CGI headers. At the minimum that\nmeans it must generate a `Content-Type` header. To run the sub-request, all\nbuffers are terminated and flushed to the browser, pending headers are sent\ntoo. This function is only supported when PHP is installed as an Apache module.\n@param filename The file that the virtual command will be performed on.\n@return (PHP 4, PHP 5)\n@see apache_note() - Get and set apache request notes\n
vpopmail_add_alias_domain_ex vpopmail_add_alias_domain_ex(string $olddomain,\nstring $newdomain) [bool]\nAdd alias to an existing virtual domain.\n
vpopmail_add_alias_domain vpopmail_add_alias_domain(string $domain, string\n$aliasdomain) [bool]\nAdd an alias for a virtual domain.\n
vpopmail_add_domain_ex vpopmail_add_domain_ex(string $domain, string $passwd\n[, string $quota [, string $bounce [, bool $apop]]]) [bool]\nAdd a new virtual domain.\n
vpopmail_add_domain vpopmail_add_domain(string $domain, string $dir, int $uid,\nint $gid) [bool]\nAdd a new virtual domain.\n
vpopmail_add_user vpopmail_add_user(string $user, string $domain, string\n$password [, string $gecos [, bool $apop]]) [bool]\nAdd a new user to the specified virtual domain.\n
vpopmail_alias_add vpopmail_alias_add(string $user, string $domain, string\n$alias) [bool]\nInsert a virtual alias.\n
vpopmail_alias_del_domain vpopmail_alias_del_domain(string $domain) [bool]\nDeletes all virtual aliases of a domain.\n
vpopmail_alias_del vpopmail_alias_del(string $user, string $domain) [bool]\nDeletes all virtual aliases of a user.\n
vpopmail_alias_get_all vpopmail_alias_get_all(string $domain) [array]\nGet all lines of an alias for a domain.\n
vpopmail_alias_get vpopmail_alias_get(string $alias, string $domain) [array]\nGet all lines of an alias for a domain.\n
vpopmail_auth_user vpopmail_auth_user(string $user, string $domain, string\n$password [, string $apop]) [bool]\nAttempt to validate a username/domain/password.\n
vpopmail_del_domain_ex vpopmail_del_domain_ex(string $domain) [bool]\nDelete a virtual domain.\n
vpopmail_del_domain vpopmail_del_domain(string $domain) [bool]\nDelete a virtual domain.\n
vpopmail_del_user vpopmail_del_user(string $user, string $domain) [bool]\nDelete a user from a virtual domain.\n
vpopmail_error vpopmail_error(void) [string]\nGet text message for last vpopmail error.\n
vpopmail_passwd vpopmail_passwd(string $user, string $domain, string $password\n[, bool $apop]) [bool]\nChange a virtual user's password.\n
vpopmail_set_user_quota vpopmail_set_user_quota(string $user, string $domain,\nstring $quota) [bool]\nSets a virtual user's quota.\n
vprintf vprintf(string $format, array $args) [int]\nOutput a formatted string. Display array values as a formatted string according\nto `format` (which is described in the documentation for sprintf()). Operates\nas printf() but accepts an array of arguments, rather than a variable number\nof arguments.\n@param format See sprintf() for a description of `format`.\n@param args\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n@see vsprintf() - Return a formatted string\n
__construct Swish::__construct(string $index_names) [void]\nConstruct a Swish object.\n@param index_names The list of index files separated by spaces.\n@return (PECL swish >= 0.1.0)\n
getMetaList Swish->getMetaList(string $index_name) [array]\nGet the list of meta entries for the index.\n@param index_name The name of the index file.\n@return (PECL swish >= 0.1.0)\n
getPropertyList Swish->getPropertyList(string $index_name) [array]\nGet the list of properties for the index.\n@param index_name The name of the index file.\n@return (PECL swish >= 0.1.0)\n
prepare Swish->prepare([string $query]) [object]\nPrepare a search query.\n@param query Optional query string. The query can be also set using\nSwishSearch->execute() method.\n@return (PECL swish >= 0.1.0)\n
query Swish->query(string $query) [object]\nExecute a query and return results object.\n@param query Query string.\n@return (PECL swish >= 0.1.0)\n
getMetaList SwishResult->getMetaList(void) [array]\nGet a list of meta entries.\n@return (PECL swish >= 0.1.0)\n
stem SwishResult->stem(string $word) [array]\nStems the given word.\n@param word The word to stem.\n@return (PECL swish >= 0.1.0)\n
getParsedWords SwishResults->getParsedWords(string $index_name) [array]\nGet an array of parsed words.\n@param indexi_name The name of the index used to initialize Swish object.\n@return (PECL swish >= 0.1.0)\n
getRemovedStopwords SwishResults->getRemovedStopwords(string $index_name)\n[array]\nGet an array of stopwords removed from the query.\n@param index_name The name of the index used to initialize Swish object.\n@return (PECL swish >= 0.1.0)\n
nextResult SwishResults->nextResult(void) [object]\nGet the next search result.\n@return (PECL swish >= 0.1.0)\n
seekResult SwishResults->seekResult(int $position) [int]\nSet current seek pointer to the given position.\n@param position Zero-based position number. Cannot be less than zero.\n@return (PECL swish >= 0.1.0)\n
execute SwishSearch->execute([string $query]) [object]\nExecute the search and get the results.\n@param query The query string is an optional parameter, it can be also\nset using Swish->prepare() method. The query string is preserved between\nexecutions, so you can set it once, but execute the search multiple times.\n@return (PECL swish >= 0.1.0)\n
resetLimit SwishSearch->resetLimit(void) [void]\nReset the search limits.\n@return (PECL swish >= 0.1.0)\n
setLimit SwishSearch->setLimit(string $property, string $low, string $high)\n[void]\nSet the search limits.\n@param property Search result property name.\n@param low The lowest value of the property.\n@param high The highest value of the property.\n@return (PECL swish >= 0.1.0)\n
setPhraseDelimiter SwishSearch->setPhraseDelimiter(string $delimiter) [void]\nSet the phrase delimiter.\n@param delimiter Phrase delimiter character. The default delimiter is\ndouble-quotes.\n@return (PECL swish >= 0.1.0)\n
setSort SwishSearch->setSort(string $sort) [void]\nSet the sort order.\n@param sort Sort order of the results is a string containing name\nof a result property combined with sort direction (&quot;asc&quot; or\n&quot;desc&quot;). Examples: &quot;swishrank desc&quot;, &quot;swishdocpath\nasc&quot;, &quot;swishtitle asc&quot;, &quot;swishdocsize desc&quot;,\n&quot;swishlastmodified desc&quot; etc.\n@return (PECL swish >= 0.1.0)\n
setStructure SwishSearch->setStructure(int $structure) [void]\nSet the structure flag in the search object.\n@param structure The structure flag a bitmask is used to limit search to\ncertain parts of HTML documents (like title, meta, body etc.). Its possible\nvalues are listed below. To combine several values use bitwise OR operator,\nsee example below.\n@return (PECL swish >= 0.1.0)\n
sybase_affected_rows sybase_affected_rows([resource $link_identifier]) [int]\nGets number of affected rows in last query. sybase_affected_rows() returns\nthe number of rows affected by the last INSERT, UPDATE or DELETE query on\nthe server associated with the specified link identifier. This command is not\neffective for SELECT statements, only on statements which modify records. To\nretrieve the number of rows returned from a SELECT, use sybase_num_rows().\n@param link_identifier If the link identifier isn&#039;t specified, the last\nopened link is assumed.\n@return (PHP 4, PHP 5)\n@see sybase_num_rows() - Get number of rows in a result set\n
sybase_close sybase_close([resource $link_identifier]) [bool]\nCloses a Sybase connection. sybase_close() closes the link to a Sybase database\nthat&#039;s associated with the specified link `link_identifier`. Note\nthat this isn&#039;t usually necessary, as non-persistent open links are\nautomatically closed at the end of the script&#039;s execution. sybase_close()\nwill not close persistent links generated by sybase_pconnect().\n@param link_identifier If the link identifier isn&#039;t specified, the last\nopened link is assumed.\n@return (PHP 4, PHP 5)\n@see sybase_connect() - Opens a Sybase server connection\n@see sybase_pconnect() - Open persistent Sybase connection\n
sybase_connect sybase_connect([string $servername [, string $username [, string\n$password [, string $charset [, string $appname [, bool $new=false]]]]]])\n[resource]\nOpens a Sybase server connection. sybase_connect() establishes a connection\nto a Sybase server. In case a second call is made to sybase_connect()\nwith the same arguments, no new link will be established, but instead,\nthe link identifier of the already opened link will be returned. The link\nto the server will be closed as soon as the execution of the script ends,\nunless it&#039;s closed earlier by explicitly calling sybase_close().\n@param servername The servername argument has to be a valid servername that\nis defined in the &#039;interfaces&#039; file.\n@param username Sybase user name\n@param password Password associated with `username`.\n@param charset Specifies the charset for the connection\n@param appname Specifies an `appname` for the Sybase connection. This allow you\nto make separate connections in the same script to the same database. This may\ncome handy when you have started a transaction in your current connection,\nand you need to be able to do a separate query which cannot be performed\ninside this transaction.\n@param new Whether to open a new connection or use the existing one.\n@return (PHP 4, PHP 5)\n@see sybase_pconnect() - Open persistent Sybase connection\n@see sybase_close() - Closes a Sybase connection\n
sybase_data_seek sybase_data_seek(resource $result_identifier, int $row_number)\n[bool]\nMoves internal row pointer. sybase_data_seek() moves the internal row pointer\nof the Sybase result associated with the specified result identifier to\npointer to the specified row number. The next call to sybase_fetch_row()\nwould return that row.\n@param result_identifier\n@param row_number\n@return (PHP 4, PHP 5)\n@see sybase_fetch_row() - Get a result row as an enumerated array\n
sybase_deadlock_retry_count sybase_deadlock_retry_count(int $retry_count)\n[void]\nSets the deadlock retry count. Using sybase_deadlock_retry_count(), the number\nof retries can be defined in cases of deadlocks. By default, every deadlock\nis retried an infinite number of times or until the process is killed by\nSybase, the executing script is killed (for instance, by set_time_limit())\nor the query succeeds.\n@param retry_count Values for retry_count -1 Retry forever (default) 0 Do\nnot retry n Retry n times\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n
sybase_fetch_array sybase_fetch_array(resource $result) [array]\nFetch row as array. sybase_fetch_array() is an extended version of\nsybase_fetch_row(). In addition to storing the data in the numeric indices\nof the result array, it also stores the data in associative indices,\nusing the field names as keys. An important thing to note is that using\nsybase_fetch_array() is NOT significantly slower than using sybase_fetch_row(),\nwhile it provides a significant added value.\n@param result\n@return (PHP 4, PHP 5)\n@see sybase_fetch_row() - Get a result row as an enumerated array\n@see sybase_fetch_assoc() - Fetch a result row as an associative array\n@see sybase_fetch_object() - Fetch a row as an object\n
sybase_fetch_assoc sybase_fetch_assoc(resource $result) [array]\nFetch a result row as an associative array. sybase_fetch_assoc() is a version\nof sybase_fetch_row() that uses column names instead of integers for indices\nin the result array. Columns from different tables with the same names\nare returned as name, name1, name2, ..., nameN. An important thing to note\nis that using sybase_fetch_assoc() is NOT significantly slower than using\nsybase_fetch_row(), while it provides a significant added value.\n@param result\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n@see sybase_fetch_row() - Get a result row as an enumerated array\n@see sybase_fetch_array() - Fetch row as array\n@see sybase_fetch_object() - Fetch a row as an object\n
sybase_fetch_field sybase_fetch_field(resource $result [, int\n$field_offset=-1]) [object]\nGet field information from a result. sybase_fetch_field() can be used in\norder to obtain information about fields in a certain query result.\n@param result\n@param field_offset If the field offset isn&#039;t specified, the next field\nthat wasn&#039;t yet retrieved by sybase_fetch_field() is retrieved.\n@return (PHP 4, PHP 5)\n@see sybase_field_seek() - Sets field offset\n
sybase_fetch_object sybase_fetch_object(resource $result [, mixed $object])\n[object]\nFetch a row as an object. sybase_fetch_object() is similar to\nsybase_fetch_assoc(), with one difference - an object is returned, instead\nof an array. Speed-wise, the function is identical to sybase_fetch_array(),\nand almost as quick as sybase_fetch_row() (the difference is insignificant).\n@param result\n@param object Use the second `object` to specify the type of object you want\nto return. If this parameter is omitted, the object will be of type stdClass.\n@return (PHP 4, PHP 5)\n@see sybase_fetch_array() - Fetch row as array\n@see sybase_fetch_row() - Get a result row as an enumerated array\n
sybase_fetch_row sybase_fetch_row(resource $result) [array]\nGet a result row as an enumerated array. sybase_fetch_row() fetches\none row of data from the result associated with the specified result\nidentifier. Subsequent call to sybase_fetch_row() would return the next row\nin the result set, or FALSE if there are no more rows.\n@param result\n@return (PHP 4, PHP 5)\n@see sybase_fetch_array() - Fetch row as array\n@see sybase_fetch_assoc() - Fetch a result row as an associative array\n@see sybase_fetch_object() - Fetch a row as an object\n@see sybase_data_seek() - Moves internal row pointer\n@see sybase_result() - Get result data\n
sybase_field_seek sybase_field_seek(resource $result, int $field_offset) [bool]\nSets field offset. Seeks to the specified field offset. If the next call\nto sybase_fetch_field() won&#039;t include a field offset, this field would\nbe returned.\n@param result\n@param field_offset\n@return (PHP 4, PHP 5)\n@see sybase_fetch_field() - Get field information from a result\n
sybase_free_result sybase_free_result(resource $result) [bool]\nFrees result memory. sybase_free_result() only needs to be called if you\nare worried about using too much memory while your script is running. All\nresult memory will automatically be freed when the script ends. You may\ncall sybase_free_result() with the result identifier as an argument and the\nassociated result memory will be freed.\n@param result\n@return (PHP 4, PHP 5)\n
sybase_get_last_message sybase_get_last_message(void) [string]\nReturns the last message from the server. sybase_get_last_message() returns\nthe last message reported by the server.\n@return (PHP 4, PHP 5)\n@see sybase_min_message_severity() - Sets minimum message severity\n
sybase_min_client_severity sybase_min_client_severity(int $severity) [void]\nSets minimum client severity. sybase_min_client_severity() sets the minimum\nclient severity level.\n@param severity\n@return (PHP 4, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n@see sybase_min_server_severity() - Sets minimum server severity\n
sybase_min_error_severity sybase_min_error_severity(int $severity) [void]\nSets minimum error severity. sybase_min_error_severity() sets the minimum\nerror severity level.\n@param severity\n@return (PHP 4, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n@see sybase_min_message_severity() - Sets minimum message severity\n
sybase_min_message_severity sybase_min_message_severity(int $severity) [void]\nSets minimum message severity. sybase_min_message_severity() sets the minimum\nmessage severity level.\n@param severity\n@return (PHP 4, PHP 5)\n@note Note: This function is only available when using the DB library\ninterface to Sybase, and not with the CT library.\n@see sybase_min_error_severity() - Sets minimum error severity\n
sybase_min_server_severity sybase_min_server_severity(int $severity) [void]\nSets minimum server severity. sybase_min_server_severity() sets the minimum\nserver severity level.\n@param severity\n@return (PHP 4, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n@see sybase_min_client_severity() - Sets minimum client severity\n
sybase_num_fields sybase_num_fields(resource $result) [int]\nGets the number of fields in a result set. sybase_num_fields() returns the\nnumber of fields in a result set.\n@param result\n@return (PHP 4, PHP 5)\n@see sybase_query() - Sends a Sybase query\n@see sybase_fetch_field() - Get field information from a result\n@see sybase_num_rows() - Get number of rows in a result set\n
sybase_num_rows sybase_num_rows(resource $result) [int]\nGet number of rows in a result set. sybase_num_rows() returns the number of\nrows in a result set.\n@param result\n@return (PHP 4, PHP 5)\n@see sybase_num_fields() - Gets the number of fields in a result set\n@see sybase_query() - Sends a Sybase query\n@see sybase_fetch_row() - Get a result row as an enumerated array\n
sybase_pconnect sybase_pconnect([string $servername [, string $username [,\nstring $password [, string $charset [, string $appname]]]]]) [resource]\nOpen persistent Sybase connection. sybase_pconnect() acts very much like\nsybase_connect() with two major differences. First, when connecting, the\nfunction would first try to find a (persistent) link that&#039;s already open\nwith the same host, username and password. If one is found, an identifier\nfor it will be returned instead of opening a new connection. Second, the\nconnection to the SQL server will not be closed when the execution of the\nscript ends. Instead, the link will remain open for future use (sybase_close()\nwill not close links established by sybase_pconnect()). This type of links\nis therefore called &#039;persistent&#039;.\n@param servername The servername argument has to be a valid servername that\nis defined in the &#039;interfaces&#039; file.\n@param username Sybase user name\n@param password Password associated with `username`.\n@param charset Specifies the charset for the connection\n@param appname Specifies an `appname` for the Sybase connection. This allow you\nto make separate connections in the same script to the same database. This may\ncome handy when you have started a transaction in your current connection,\nand you need to be able to do a separate query which cannot be performed\ninside this transaction.\n@return (PHP 4, PHP 5)\n@see sybase_connect() - Opens a Sybase server connection\n
sybase_query sybase_query(string $query [, resource $link_identifier]) [mixed]\nSends a Sybase query. sybase_query() sends a query to the currently active\ndatabase on the server that&#039;s associated with the specified link\nidentifier.\n@param query\n@param link_identifier If the link identifier isn&#039;t specified, the last\nopened link is assumed. If no link is open, the function tries to establish\na link as if sybase_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see sybase_select_db() - Selects a Sybase database\n@see sybase_connect() - Opens a Sybase server connection\n
sybase_result sybase_result(resource $result, int $row, mixed $field) [string]\nGet result data. Returns the contents of the cell at the row and offset\nin the specified Sybase result set. When working on large result sets,\nyou should consider using one of the functions that fetch an entire row\n(specified below). As these functions return the contents of multiple cells\nin one function call, they&#039;re MUCH quicker than sybase_result(). Also,\nnote that specifying a numeric offset for the field argument is much quicker\nthan specifying a fieldname or tablename.fieldname argument. Recommended\nhigh-performance alternatives: sybase_fetch_row(), sybase_fetch_array()\nand sybase_fetch_object().\n@param result\n@param row\n@param field The field argument can be the field&#039;s offset, or\nthe field&#039;s name, or the field&#039;s table dot field&#039;s name\n(tablename.fieldname). If the column name has been aliased (&#039;select\nfoo as bar from...&#039;), use the alias instead of the column name.\n@return (PHP 4, PHP 5)\n
sybase_select_db sybase_select_db(string $database_name [, resource\n$link_identifier]) [bool]\nSelects a Sybase database. sybase_select_db() sets the current active database\non the server that&#039;s associated with the specified link identifier. Every\nsubsequent call to sybase_query() will be made on the active database.\n@param database_name\n@param link_identifier If no link identifier is specified, the last opened\nlink is assumed. If no link is open, the function will try to establish a\nlink as if sybase_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see sybase_connect() - Opens a Sybase server connection\n@see sybase_pconnect() - Open persistent Sybase connection\n@see sybase_query() - Sends a Sybase query\n
sybase_set_message_handler sybase_set_message_handler(callback $handler [,\nresource $connection]) [bool]\nSets the handler called when a server message is\nraised. sybase_set_message_handler() sets a user function to handle messages\ngenerated by the server. You may specify the name of a global function,\nor use an array to specify an object reference and a method name.\n@param handler The handler expects five arguments in the following order:\nmessage number, severity, state, line number and description. The first\nfour are integers. The last is a string. If the function returns FALSE,\nPHP generates an ordinary error message.\n@param connection\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n
sybase_unbuffered_query sybase_unbuffered_query(string $query, resource\n$link_identifier [, bool $store_result]) [resource]\nSend a Sybase query and do not block. sybase_unbuffered_query() sends a query\nto the currently active database on the server that&#039;s associated with\nthe specified link identifier. If the link identifier isn&#039;t specified,\nthe last opened link is assumed. If no link is open, the function tries\nto establish a link as if sybase_connect() was called, and use it. Unlike\nsybase_query(), sybase_unbuffered_query() reads only the first row of the\nresult set. sybase_fetch_array() and similar function read more rows as\nneeded. sybase_data_seek() reads up to the target row. The behavior may\nproduce better performance for large result sets. sybase_num_rows() will\nonly return the correct number of rows if all result sets have been read. To\nSybase, the number of rows is not known and is therefore computed by the\nclient implementation. Note: If you don&#039;t read all of the resultsets\nprior to executing the next query, PHP will raise a warning and cancel all\nof the pending results. To get rid of this, use sybase_free_result() which\nwill cancel pending results of an unbuffered query.\n@param query\n@param link_identifier\n@param store_result The optional `store_result` can be FALSE to indicate\nthe resultsets shouldn&#039;t be fetched into memory, thus minimizing memory\nusage which is particularly interesting with very large resultsets.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available when using the CT library\ninterface to Sybase, and not with the DB library.\n@see sybase_query() - Sends a Sybase query\n
symlink symlink(string $target, string $link) [bool]\nCreates a symbolic link. symlink() creates a symbolic link to the existing\n`target` with the specified name `link`.\n@param target Target of the link.\n@param link The link name.\n@return (PHP 4, PHP 5)\n@note Note: For Windows only: This function will only function if the system\nyou run PHP from is Windows Vista/Windows Server 2008 or greater. Windows\nversions prior to that does not support symbolic links.\n@see link() - Create a hard link\n@see readlink() - Returns the target of a symbolic link\n@see linkinfo() - Gets information about a link\n
sys_get_temp_dir sys_get_temp_dir(void) [string]\nReturns directory path used for temporary files. Returns the path of the\ndirectory PHP stores temporary files in by default.\n@return (PHP 5 >= 5.2.1)\n@see tmpfile() - Creates a temporary file\n@see tempnam() - Create file with unique file name\n
sys_getloadavg sys_getloadavg(void) [array]\nGets system load average. Returns three samples representing the average\nsystem load (the number of processes in the system run queue) over the last 1,\n5 and 15 minutes, respectively.\n@return (PHP 5 >= 5.1.3)\n@note Note: This function is not implemented on Windows platforms.\n
syslog syslog(int $priority, string $message) [bool]\nGenerate a system log message. syslog() generates a log message that will be\ndistributed by the system logger. For information on setting up a user defined\nlog handler, see the syslog.conf (5) Unix manual page. More information on\nthe syslog facilities and option can be found in the man pages for syslog\n(3) on Unix machines.\n@param priority `priority` is a combination of the facility and the\nlevel. Possible values are: syslog() Priorities (in descending order)\nConstant Description LOG_EMERG system is unusable LOG_ALERT action must\nbe taken immediately LOG_CRIT critical conditions LOG_ERR error conditions\nLOG_WARNING warning conditions LOG_NOTICE normal, but significant, condition\nLOG_INFO informational message LOG_DEBUG debug-level message\n@param message The message to send, except that the two characters `%m`\nwill be replaced by the error message string (strerror) corresponding to\nthe present value of errno.\n@return (PHP 4, PHP 5)\n@note Note: Use of `LOG_LOCAL0` through `LOG_LOCAL7` for the `facility`\nparameter of openlog() is not available in Windows.\n@see openlog() - Open connection to system logger\n@see closelog() - Close connection to system logger\n
system system(string $command [, int &$return_var]) [string]\nExecute an external program and display the output. system() is just like\nthe C version of the function in that it executes the given `command` and\noutputs the result. The system() call also tries to automatically flush\nthe web server&#039;s output buffer after each line of output if PHP is\nrunning as a server module. If you need to execute a command and have all\nthe data from the command passed directly back without any interference,\nuse the passthru() function.\n@param command The command that will be executed.\n@param return_var If the `return_var` argument is present, then the return\nstatus of the executed command will be written to this variable.\n@return (PHP 4, PHP 5)\n@see exec() - Execute an external program\n@see passthru() - Execute an external program and display raw output\n@see popen() - Opens process file pointer\n@see escapeshellcmd() - Escape shell metacharacters\n@see pcntl_exec() - Executes specified program in current process space\n@see backtick operator\n
tan tan(float $arg) [float]\nTangent. tan() returns the tangent of the `arg` parameter. The `arg` parameter\nis in radians.\n@param arg The argument to process in radians\n@return (PHP 4, PHP 5)\n@see atan() - Arc tangent\n@see atan2() - Arc tangent of two variables\n@see sin() - Sine\n@see cos() - Cosine\n@see tanh() - Hyperbolic tangent\n@see deg2rad() - Converts the number in degrees to the radian equivalent\n
tanh tanh(float $arg) [float]\nHyperbolic tangent. Returns the hyperbolic tangent of `arg`, defined as\n`sinh(arg)/cosh(arg)`.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see tan() - Tangent\n@see atanh() - Inverse hyperbolic tangent\n@see sinh() - Hyperbolic sine\n@see cosh() - Hyperbolic cosine\n
tcpwrap_check tcpwrap_check(string $daemon, string $address [, string $user\n[, bool $nodns=false]]) [bool]\nPerforms a tcpwrap check. This function consults the /etc/hosts.allow and\n/etc/hosts.deny files to check if access to service `daemon` should be\ngranted or denied for a client.\n@param daemon The service name.\n@param address The client remote address. Can be either an IP address or a\ndomain name.\n@param user An optional user name.\n@param nodns If `address` looks like domain name then DNS is used to resolve\nit to IP address; set `nodns` to TRUE to avoid this.\n@return (PECL tcpwrap >= 0.1.0)\n
tempnam tempnam(string $dir, string $prefix) [string]\nCreate file with unique file name. Creates a file with a unique filename, with\naccess permission set to 0600, in the specified directory. If the directory\ndoes not exist, tempnam() may generate a file in the system&#039;s temporary\ndirectory, and return the name of that.\n@param dir The directory where the temporary filename will be created.\n@param prefix The prefix of the generated temporary filename. Note: Windows\nuses only the first three characters of prefix.\n@return (PHP 4, PHP 5)\n@note Note: If PHP cannot create a file in the specified `dir` parameter, it\nfalls back on the system default. On NTFS this also happens if the specified\n`dir` contains more than 65534 files.\n@see tmpfile() - Creates a temporary file\n@see sys_get_temp_dir() - Returns directory path used for temporary files\n@see unlink() - Deletes a file\n
textdomain textdomain(string $text_domain) [string]\nSets the default domain. This function sets the domain to search within when\ncalls are made to gettext(), usually the named after an application.\n@param text_domain The new message domain, or NULL to get the current setting\nwithout changing it\n@return (PHP 4, PHP 5)\n
tidy_access_count tidy_access_count(tidy $object) [int]\nReturns the Number of Tidy accessibility warnings encountered for specified\ndocument. tidy_access_count() returns the number of accessibility warnings\nfound for the specified document.\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n@note Note: Due to the design of the TidyLib, you must call tidy_diagnose()\nbefore tidy_access_count() or it will return always `0`. You must also need\nto enable the `accessibility-check` option.\n@see tidy_error_count() - Returns the Number of Tidy errors encountered for\nspecified document\n@see tidy_warning_count() - Returns the Number of Tidy warnings encountered\nfor specified document\n
tidy_config_count tidy_config_count(tidy $object) [int]\nReturns the Number of Tidy configuration errors encountered for specified\ndocument. Returns the number of errors encountered in the configuration of\nthe specified tidy `object`.\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n
diagnose tidy::diagnose(void) [bool]\nRun configured diagnostics on parsed and repaired markup. Procedural style\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n@see tidy::errorBuffer()\n
tidy_error_count tidy_error_count(tidy $object) [int]\nReturns the Number of Tidy errors encountered for specified document. Returns\nthe number of Tidy errors encountered for the specified document.\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n@see tidy_access_count() - Returns the Number of Tidy accessibility warnings\nencountered for specified document\n@see tidy_warning_count() - Returns the Number of Tidy warnings encountered\nfor specified document\n
tidy_get_error_buffer tidy_get_error_buffer(tidy $object) [string]\nReturn warnings and errors which occurred parsing the specified\ndocument. Object oriented style (property):\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n@see tidy_access_count() - Returns the Number of Tidy accessibility warnings\nencountered for specified document\n@see tidy_error_count() - Returns the Number of Tidy errors encountered for\nspecified document\n@see tidy_warning_count() - Returns the Number of Tidy warnings encountered\nfor specified document\n
tidy_get_output tidy_get_output(tidy $object) [string]\nReturn a string representing the parsed tidy markup. Gets a string with the\nrepaired html.\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n
tidy_load_config tidy_load_config(string $filename, string $encoding) [void]\nLoad an ASCII Tidy configuration file with the specified encoding. Loads a\nTidy configuration file, with the specified `encoding`.\n@param filename\n@param encoding\n@return (PECL tidy >= 0.5.2)\n@note Note: This function is only available in Tidy 1.0. It became obsolete\nin Tidy 2.0, and thus has been removed.\n
tidy_reset_config tidy_reset_config(void) [bool]\nRestore Tidy configuration to default values. This function restores the\nTidy configuration to the default values.\n@return (PECL tidy >= 0.7.0)\n@note Note: This function is only available in Tidy 1.0. It became obsolete\nin Tidy 2.0, and thus has been removed.\n
tidy_save_config tidy_save_config(string $filename) [bool]\nSave current settings to named file. Saves current settings to the specified\nfile. Only non-default values are written.\n@param filename Path to the config file.\n@return (PECL tidy >= 0.5.2)\n@note Note: This function is only available in Tidy 1.0. It became obsolete\nin Tidy 2.0, and thus has been removed.\n@see tidy_get_config() - Get current Tidy configuration\n@see tidy_getopt() - Returns the value of the specified configuration option\nfor the tidy document\n@see tidy_reset_config() - Restore Tidy configuration to default values\n@see tidy_setopt() - Updates the configuration settings for the specified\ntidy document\n
tidy_set_encoding tidy_set_encoding(string $encoding) [bool]\nSet the input/output character encoding for parsing markup. Sets the encoding\nfor input/output documents.\n@param encoding The `encoding` parameter sets the encoding for input/output\ndocuments. The possible values for encoding are: `ascii`, `latin0`, `latin1`,\n`raw`, `utf8`, `iso2022`, `mac`, `win1252`, `ibm858`, `utf16`, `utf16le`,\n`utf16be`, `big5`, and `shiftjis`.\n@return (PECL tidy >= 0.5.2)\n@note Note: This function is only available in Tidy 1.0. It became obsolete\nin Tidy 2.0, and thus has been removed.\n
tidy_setopt tidy_setopt(string $option, mixed $value) [bool]\nUpdates the configuration settings for the specified tidy\ndocument. tidy_setopt() updates the specified `option` with a new `value`.\n@param option The tidy option name. A list of available configuration options\nmay be found at: &raquo; http://tidy.sourceforge.net/docs/quickref.html.\n@param value The tidy option name.\n@return (PECL tidy >= 0.5.2)\n@note Note: This function is only available in Tidy 1.0. It became obsolete\nin Tidy 2.0, and thus has been removed.\n@see tidy_getopt() - Returns the value of the specified configuration option\nfor the tidy document\n@see tidy_get_config() - Get current Tidy configuration\n@see tidy_reset_config() - Restore Tidy configuration to default values\n@see tidy_save_config() - Save current settings to named file\n
tidy_warning_count tidy_warning_count(tidy $object) [int]\nReturns the Number of Tidy warnings encountered for specified document. Returns\nthe number of Tidy warnings encountered for the specified document.\n@param object The Tidy object.\n@return (PHP 5, PECL tidy >= 0.5.2)\n@see tidy_error_count() - Returns the Number of Tidy errors encountered for\nspecified document\n@see tidy_access_count() - Returns the Number of Tidy accessibility warnings\nencountered for specified document\n
time_nanosleep time_nanosleep(int $seconds, int $nanoseconds) [mixed]\nDelay for a number of seconds and nanoseconds. Delays program execution for\nthe given number of `seconds` and `nanoseconds`.\n@param seconds Must be a non-negative integer.\n@param nanoseconds Must be a non-negative integer less than 1 billion.\n@return (PHP 5)\n@see sleep() - Delay execution\n@see usleep() - Delay execution in microseconds\n@see time_sleep_until() - Make the script sleep until the specified time\n@see set_time_limit() - Limits the maximum execution time\n
time_sleep_until time_sleep_until(float $timestamp) [bool]\nMake the script sleep until the specified time. Makes the script sleep until\nthe specified `timestamp`.\n@param timestamp The timestamp when the script should wake.\n@return (PHP 5 >= 5.1.0)\n@note Note: All signals will be delivered after the script wakes up.\n@see sleep() - Delay execution\n@see usleep() - Delay execution in microseconds\n@see time_nanosleep() - Delay for a number of seconds and nanoseconds\n@see set_time_limit() - Limits the maximum execution time\n
time time(void) [int]\nReturn current Unix timestamp. Returns the current time measured in the\nnumber of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).\n@see date() - Format a local time/date\n@see microtime() - Return current Unix timestamp with microseconds\n
timezone_abbreviations_list timezone_abbreviations_list\nAlias of DateTimeZone::listAbbreviations.\n
timezone_identifiers_list timezone_identifiers_list\nAlias of DateTimeZone::listIdentifiers.\n
timezone_location_get timezone_location_get\nAlias of DateTimeZone::getLocation.\n
svn_fs_copy svn_fs_copy(resource $from_root, string $from_path, resource\n$to_root, string $to_path) [bool]\nCopies a file or a directory, returns true if all is ok, false otherwise.\n
svn_fs_delete svn_fs_delete(resource $root, string $path) [bool]\nDeletes a file or a directory, return true if all is ok, false otherwise.\n
svn_fs_dir_entries svn_fs_dir_entries(resource $fsroot, string $path) [array]\nEnumerates the directory entries under path; returns a hash of dir names to\nfile type.\n
svn_fs_file_contents svn_fs_file_contents(resource $fsroot, string $path)\n[resource]\nReturns a stream to access the contents of a file from a given version of\nthe fs.\n
svn_fs_file_length svn_fs_file_length(resource $fsroot, string $path) [int]\nReturns the length of a file from a given version of the fs.\n
svn_fs_is_dir svn_fs_is_dir(resource $root, string $path) [bool]\nReturn true if the path points to a directory, false otherwise.\n
svn_fs_is_file svn_fs_is_file(resource $root, string $path) [bool]\nReturn true if the path points to a file, false otherwise.\n
svn_fs_make_dir svn_fs_make_dir(resource $root, string $path) [bool]\nCreates a new empty directory, returns true if all is ok, false otherwise.\n
svn_fs_make_file svn_fs_make_file(resource $root, string $path) [bool]\nCreates a new empty file, returns true if all is ok, false otherwise.\n
svn_fs_node_created_rev svn_fs_node_created_rev(resource $fsroot, string $path)\n[int]\nReturns the revision in which path under fsroot was created.\n
svn_fs_node_prop svn_fs_node_prop(resource $fsroot, string $path, string\n$propname) [string]\nReturns the value of a property for a node.\n
svn_fs_props_changed svn_fs_props_changed(resource $root1, string $path1,\nresource $root2, string $path2) [bool]\nReturn true if props are different, false otherwise.\n
svn_fs_revision_prop svn_fs_revision_prop(resource $fs, int $revnum, string\n$propname) [string]\nFetches the value of a named property.\n
svn_fs_revision_root svn_fs_revision_root(resource $fs, int $revnum) [resource]\nGet a handle on a specific version of the repository root.\n
svn_fs_txn_root svn_fs_txn_root(resource $txn) [resource]\nCreates and returns a transaction root.\n
svn_fs_youngest_rev svn_fs_youngest_rev(resource $fs) [int]\nReturns the number of the youngest revision in the filesystem.\n
svn_import svn_import(string $path, string $url, bool $nonrecursive) [bool]\nImports an unversioned path into a repository. Commits unversioned `path`\ninto repository at `url`. If `path` is a directory and `nonrecursive` is\nFALSE, the directory will be imported recursively.\n@param path Path of file or directory to import. Note: Relative paths will\nbe resolved as if the current working directory was the one that contains the\nPHP binary. To use the calling script&#039;s working directory, use realpath()\nor dirname(__FILE__).\n@param url Repository URL to import into.\n@param nonrecursive Whether or not to refrain from recursively processing\ndirectories.\n@return (PECL svn >= 0.2.0)\n@see svn_add() - Schedules the addition of an item in a working directory\n@see &raquo; SVN documentation for svn import\n
svn_log svn_log(string $repos_url [, int $start_revision [, int\n$end_revision [, int $limit=0 [, int $flags=SVN_DISCOVER_CHANGED_PATHS |\nSVN_STOP_ON_COPY]]]]) [array]\nReturns the commit log messages of a repository URL. svn_log() returns the\ncomplete history of the item at the repository URL `repos_url`, or the history\nof a specific revision if `start_revision` is set. This function is equivalent\nto svn log --verbose -r $start_revision $repos_url. For repositories with\nlarge histories, the output may be quite large (one array item for every\nrevision of the item). This function does not support the --limit NUM flag,\nnor does it support revision ranges (start_revision must be an integer).\n@param repos_url Repository URL of the item to retrieve log history from.\n@param start_revision Revision number of the first log to retrieve. Use\nSVN_REVISION_HEAD to retrieve the log from the most recent revision.\n@param end_revision Revision number of the last log to retrieve. Defaults to\n`start_revision` if specified or to SVN_REVISION_INITIAL otherwise.\n@param limit Number of logs to retrieve.\n@param flags Any combination of SVN_OMIT_MESSAGES, SVN_DISCOVER_CHANGED_PATHS\nand SVN_STOP_ON_COPY.\n@return (PECL svn >= 0.1.0)\n@see &raquo; SVN documentation on svn log\n
svn_ls svn_ls(string $repos_url [, int $revision_no=SVN_REVISION_HEAD [,\nbool $recurse=false [, bool $peg=false]]]) [array]\nReturns list of directory contents in repository URL, optionally at revision\nnumber. This function queries the repository URL and returns a list of files\nand directories, optionally from a specific revision. This is equivalent to\nsvn list $repos_url[@$revision_no] Note: This function does not work with\nworking copies. `repos_url` must be a repository URL.\n@param url URL of the repository, eg. http://www.example.com/svnroot. To\naccess a local Subversion repository via filesystem, use the file URI scheme,\neg. file:///home/user/svn-repos\n@param revision Integer revision number to retrieve listing of. When omitted,\nthe HEAD revision is used.\n@param recurse Enables recursion.\n@return (PECL svn >= 0.1.0)\n@see &raquo; SVN documentation on svn list\n
svn_mkdir svn_mkdir(string $path [, string $log_message]) [bool]\nCreates a directory in a working copy or repository. Creates a directory in\na working copy or repository.\n@param path The path to the working copy or repository.\n@return (PECL svn >= 0.4.0)\n@see svn_add() - Schedules the addition of an item in a working directory\n@see svn_copy()\n
svn_repos_create svn_repos_create(string $path [, array $config [, array\n$fsconfig]]) [resource]\nCreate a new subversion repository at path.\n
svn_repos_fs_begin_txn_for_commit svn_repos_fs_begin_txn_for_commit(resource\n$repos, int $rev, string $author, string $log_msg) [resource]\nCreate a new transaction.\n
svn_repos_fs_commit_txn svn_repos_fs_commit_txn(resource $txn) [int]\nCommits a transaction and returns the new revision.\n
svn_repos_fs svn_repos_fs(resource $repos) [resource]\nGets a handle on the filesystem for a repository.\n
svn_repos_hotcopy svn_repos_hotcopy(string $repospath, string $destpath,\nbool $cleanlogs) [bool]\nMake a hot-copy of the repos at repospath; copy it to destpath.\n
svn_repos_open svn_repos_open(string $path) [resource]\nOpen a shared lock on a repository..\n
svn_repos_recover svn_repos_recover(string $path) [bool]\nRun recovery procedures on the repository located at path..\n
svn_revert svn_revert(string $path [, bool $recursive=false]) [bool]\nRevert changes to the working copy. Revert any local changes to the path in\na working copy.\n@param path The path to the working repository.\n@param recursive Optionally make recursive changes.\n@return (PECL svn >= 0.3.0)\n@see svn_delete() - Delete items from a working copy or repository.\n@see svn_export() - Export the contents of a SVN directory\n
svn_status svn_status(string $path [, int $flags=0]) [array]\nReturns the status of working copy files and directories. Returns the status\nof working copy files and directories, giving modifications, additions,\ndeletions and other changes to items in the working copy.\n@param path Local path to file or directory to retrieve status of. Note:\nRelative paths will be resolved as if the current working directory was the\none that contains the PHP binary. To use the calling script&#039;s working\ndirectory, use realpath() or dirname(__FILE__).\n@param flags Any combination of SVN_NON_RECURSIVE, SVN_ALL (regardless of\nmodification status), SVN_SHOW_UPDATES (entries will be added for items\nthat are out-of-date), SVN_NO_IGNORE (disregard `svn:ignore` properties when\nscanning for new files) and SVN_IGNORE_EXTERNALS.\n@return (PECL svn >= 0.1.0)\n@see svn_update() - Update working copy\n@see svn_log() - Returns the commit log messages of a repository URL\n@see &raquo; SVN documentation for svn status\n
svn_update svn_update(string $path [, int $revno=SVN_REVISION_HEAD [, bool\n$recurse=true]]) [int]\nUpdate working copy. Update working copy at `path` to revision `revno`. If\n`recurse` is true, directories will be recursively updated.\n@param path Path to local working copy. Note: Relative paths will be\nresolved as if the current working directory was the one that contains the\nPHP binary. To use the calling script&#039;s working directory, use realpath()\nor dirname(__FILE__).\n@param revno Revision number to update to, default is SVN_REVISION_HEAD.\n@param recurse Whether or not to recursively update directories.\n@return (PECL svn >= 0.1.0)\n@see svn_checkout() - Checks out a working copy from the repository\n@see svn_commit() - Sends changes from the local working copy to the repository\n@see &raquo; SVN documentation for svn update\n
swf_actiongeturl swf_actiongeturl(string $url, string $target) [void]\nGet a URL from a Shockwave Flash movie. Gets the URL specified by the parameter\n`url` with the given ` target`.\n@param url The URL, as a string.\n@param target The target, as a string.\n@return (PHP 4)\n
swf_actiongotoframe swf_actiongotoframe(int $framenumber) [void]\nPlay a frame and then stop. The swf_actiongotoframe() function will go to\nthe frame specified by `framenumber`, play it, and then stop.\n@param framenumber The frame number.\n@return (PHP 4)\n
swf_actiongotolabel swf_actiongotolabel(string $label) [void]\nDisplay a frame with the specified label. The swf_actiongotolabel() function\ndisplays the frame with the label given by the `label` parameter and then\nstops.\n@param label The frame label.\n@return (PHP 4)\n
swf_actionnextframe swf_actionnextframe(void) [void]\nGo forward one frame. Go forward one frame.\n@return (PHP 4)\n@see swf_actionprevframe() - Go backwards one frame\n
swf_actionplay swf_actionplay(void) [void]\nStart playing the flash movie from the current frame. Start playing the\nflash movie from the current frame.\n@return (PHP 4)\n@see swf_actionstop() - Stop playing the flash movie at the current frame\n
swf_actionprevframe swf_actionprevframe(void) [void]\nGo backwards one frame. Go backwards one frame.\n@return (PHP 4)\n@see swf_actionnextframe() - Go forward one frame\n
swf_actionsettarget swf_actionsettarget(string $target) [void]\nSet the context for actions. Sets the context for all actions. You can use\nthis to control other flash movies that are currently playing.\n@param target The target, as a string.\n@return (PHP 4)\n
swf_actionstop swf_actionstop(void) [void]\nStop playing the flash movie at the current frame. Stop playing the flash\nmovie at the current frame.\n@return (PHP 4)\n@see swf_actionplay() - Start playing the flash movie from the current frame\n
swf_actiontogglequality swf_actiontogglequality(void) [void]\nToggle between low and high quality. Toggle the flash movie between high\nand low quality.\n@return (PHP 4)\n
swf_actionwaitforframe swf_actionwaitforframe(int $framenumber, int $skipcount)\n[void]\nSkip actions if a frame has not been loaded. The swf_actionwaitforframe()\nfunction will check to see if the frame, specified by the `framenumber`\nparameter has been loaded, if not it will skip the number of actions specified\nby the `skipcount` parameter. This can be useful for &quot;Loading...&quot;\ntype animations.\n@param framenumber The frame number.\n@param skipcount The number of actions to skip.\n@return (PHP 4)\n
swf_addbuttonrecord swf_addbuttonrecord(int $states, int $shapeid, int $depth)\n[void]\nControls location, appearance and active area of the current button. Allow\nyou to define the specifics of using a button.\n@param states Defines what states the button can have, these can be any or\nall of the following constants: BSHitTest, BSDown, BSOver or BSUp.\n@param shapeid The second parameter, the `shapeid` is the look of the button,\nthis is usually the object id of the shape of the button.\n@param depth This parameter is the placement of the button in the current\nframe.\n@return (PHP 4)\n
swf_addcolor swf_addcolor(float $r, float $g, float $b, float $a) [void]\nSet the global add color to the rgba value specified. Sets the global\nadd color to the specified color. This color is then implicitly used\nby the swf_placeobject(), swf_modifyobject() and swf_addbuttonrecord()\nfunctions. The color of the object will be add by the given values when the\nobject is written to the screen.\n@param r Red value\n@param g Green value\n@param b Blue value\n@param a Alpha value\n@return (PHP 4)\n
swf_closefile swf_closefile([int $return_file]) [void]\nClose the current Shockwave Flash file. Close a file that was opened by the\nswf_openfile() function.\n@param return_file If set then the contents of the SWF file are returned\nfrom the function.\n@return (PHP 4)\n@see swf_openfile() - Open a new Shockwave Flash file\n
swf_definebitmap swf_definebitmap(int $objid, string $image_name) [void]\nDefine a bitmap. The swf_definebitmap() function defines a bitmap given\nan image.\n@param objid An SWF object id.\n@param image_name A GIF, JPEG, RGB or FI image. The image will be converted\ninto a Flash JPEG or Flash color map format.\n@return (PHP 4)\n
swf_definefont swf_definefont(int $fontid, string $fontname) [void]\nDefines a font. The swf_definefont() function defines a font parameter\nand gives it the specified id. It then sets the font given by ` fontname`\nto the current font.\n@param fontid The id to be given to the font.\n@param fontname The font so be set as current font.\n@return (PHP 4)\n@see swf_definetext() - Define a text string\n
swf_defineline swf_defineline(int $objid, float $x1, float $y1, float $x2,\nfloat $y2, float $width) [void]\nDefine a line. Defines a line.\n@param objid The object id.\n@param x1 x-coordinate of start point.\n@param y1 y-coordinate of start point.\n@param x2 x-coordinate of end point.\n@param y2 y-coordinate of end point.\n@param width The line width.\n@return (PHP 4)\n
swf_definepoly swf_definepoly(int $objid, array $coords, int $npoints,\nfloat $width) [void]\nDefine a polygon. Defines a polygon given an array of x, y coordinates.\n@param objid The object id.\n@param coords An array of x, y coordinates.\n@param npoints The number of overall points that are contained in the array\ngiven by `coords`\n@param width The width of the polygon&#039;s border, if set to 0.0 the\npolygon is filled.\n@return (PHP 4)\n
swf_definerect swf_definerect(int $objid, float $x1, float $y1, float $x2,\nfloat $y2, float $width) [void]\nDefine a rectangle. Defines a rectangle with an upper left hand coordinate\nand a lower right hand coordinate.\n@param objid The object id.\n@param x1 x-coordinate of upper left point.\n@param y1 y-coordinate of upper left point.\n@param x2 x-coordinate of lower right point.\n@param y2 y-coordinate of lower right point.\n@param width Width of the rectangles border, if the width is 0.0 then the\nrectangle is filled.\n@return (PHP 4)\n
swf_definetext swf_definetext(int $objid, string $str, int $docenter) [void]\nDefine a text string. Defines a text string using the current font and\nfont size.\n@param objid The object id.\n@param str The text, as a string.\n@param docenter The `docenter` is where the word is centered, if `docenter`\nis 1, then the word is centered in x.\n@return (PHP 4)\n@see swf_definefont() - Defines a font\n
swf_endbutton swf_endbutton(void) [void]\nEnd the definition of the current button. The swf_endbutton() function ends\nthe definition of the current button.\n@return (PHP 4)\n@see swf_startbutton() - Start the definition of a button\n
swf_enddoaction swf_enddoaction(void) [void]\nEnd the current action. Ends the current action started by the\nswf_startdoaction() function.\n@return (PHP 4)\n@see swf_startdoaction() - Start a description of an action list for the\ncurrent frame\n
swf_endshape swf_endshape(void) [void]\nCompletes the definition of the current shape. The swf_endshape() completes\nthe definition of the current shape.\n@return (PHP 4)\n@see swf_startshape() - Start a complex shape\n
swf_endsymbol swf_endsymbol(void) [void]\nEnd the definition of a symbol. Ends the definition of a symbol that was\nstarted by the swf_startsymbol() function.\n@return (PHP 4)\n@see swf_startsymbol() - Define a symbol\n
swf_fontsize swf_fontsize(float $size) [void]\nChange the font size. Changes the font size to the value given by the `size`\nparameter.\n@param size The font size, as an integer.\n@return (PHP 4)\n
swf_fontslant swf_fontslant(float $slant) [void]\nSet the font slant. Set the current font slant to the angle indicated by the\n`slant` parameter.\n@param slant Positive values create a forward slant, negative values create\na negative slant.\n@return (PHP 4)\n
swf_fonttracking swf_fonttracking(float $tracking) [void]\nSet the current font tracking. Set the font tracking to the value specified\nby the `tracking` parameter. This function is used to increase the spacing\nbetween letters and text, positive values increase the space and negative\nvalues decrease the space between letters.\n@param tracking The font tracking.\n@return (PHP 4)\n
swf_getbitmapinfo swf_getbitmapinfo(int $bitmapid) [array]\nGet information about a bitmap. Returns information about a bitmap.\n@param bitmapid The bitmap id.\n@return (PHP 4)\n
swf_getfontinfo swf_getfontinfo(void) [array]\nGets font information. Gets information about the font by giving the height\nin pixels of a capital A and a lowercase x.\n@return (PHP 4)\n
swf_getframe swf_getframe(void) [int]\nGet the frame number of the current frame. The swf_getframe() function gets\nthe number of the current frame.\n@return (PHP 4)\n@see swf_setframe() - Switch to a specified frame\n
swf_labelframe swf_labelframe(string $name) [void]\nLabel the current frame. Labels the current frame with the given `name`.\n@param name The frame label.\n@return (PHP 4)\n
swf_lookat swf_lookat(float $view_x, float $view_y, float $view_z, float\n$reference_x, float $reference_y, float $reference_z, float $twist) [void]\nDefine a viewing transformation. Defines a viewing transformation by giving\nthe viewing position and the coordinates of a reference point in the scene.\n@param view_x x-coordinate for the viewing position\n@param view_y y-coordinate for the viewing position\n@param view_z z-coordinate for the viewing position\n@param reference_x x-coordinate for the reference point\n@param reference_y y-coordinate for the reference point\n@param reference_z z-coordinate for the reference point\n@param twist Controls the rotation along with viewer&#039;s z axis.\n@return (PHP 4)\n
swf_modifyobject swf_modifyobject(int $depth, int $how) [void]\nModify an object. Updates the position and/or color of the object at the\nspecified `depth`.\n@param depth The depth, as an integer.\n@param how Determines what is updated. `how` can either be the constant\nMOD_MATRIX or MOD_COLOR or it can be a combination of both. MOD_COLOR uses\nthe current mulcolor (specified by the function swf_mulcolor()) and addcolor\n(specified by the function swf_addcolor()) to color the object. MOD_MATRIX\nuses the current matrix to position the object.\n@return (PHP 4)\n
swf_mulcolor swf_mulcolor(float $r, float $g, float $b, float $a) [void]\nSets the global multiply color to the rgba value specified. Sets the global\nmultiply color to the given one. This color is then implicitly used by the\nswf_placeobject(), swf_modifyobject() and swf_addbuttonrecord() functions. The\ncolor of the object will be multiplied by the given color values when the\nobject is written to the screen.\n@param r Red value\n@param g Green value\n@param b Blue value\n@param a Alpha value\n@return (PHP 4)\n
swf_nextid swf_nextid(void) [int]\nReturns the next free object id. The swf_nextid() function returns the next\navailable object id.\n@return (PHP 4)\n
swf_oncondition swf_oncondition(int $transition) [void]\nDescribe a transition used to trigger an action list. The swf_oncondition()\nfunction describes a transition that will trigger an action list.\n@param transition There are several types of possible transitions, the\nfollowing are for buttons defined as TYPE_MENUBUTTON: IdletoOverUp OverUptoIdle\nOverUptoOverDown OverDowntoOverUp IdletoOverDown OutDowntoIdle MenuEnter\n(IdletoOverUp|IdletoOverDown) MenuExit (OverUptoIdle|OverDowntoIdle) For\nTYPE_PUSHBUTTON there are the following options: IdletoOverUp OverUptoIdle\nOverUptoOverDown OverDowntoOverUp OverDowntoOutDown OutDowntoOverDown\nOutDowntoIdle ButtonEnter (IdletoOverUp|OutDowntoOverDown) ButtonExit\n(OverUptoIdle|OverDowntoOutDown)\n@return (PHP 4)\n
swf_openfile swf_openfile(string $filename, float $width, float $height,\nfloat $framerate, float $r, float $g, float $b) [void]\nOpen a new Shockwave Flash file. Opens a new file. This must be the first\nfunction you call, otherwise your script will not work.\n@param filename The path to the SWF file. If you want to send your output\nto the screen, set this to `php://stdout`.\n@param width The movie width\n@param height The movie height\n@param framerate The frame rate.\n@param r Red value for the background.\n@param g Green value for the background.\n@param b Blue value for the background.\n@return (PHP 4)\n@see swf_closefile() - Close the current Shockwave Flash file\n
swf_ortho swf_ortho(float $xmin, float $xmax, float $ymin, float $ymax,\nfloat $zmin, float $zmax) [void]\nDefines an orthographic mapping of user coordinates onto the current\nviewport. Defines an 3D orthographic mapping of user coordinates onto the\ncurrent viewport.\n@param xmin\n@param xmax\n@param ymin\n@param ymax\n@param zmin\n@param zmax\n@return (PHP 4 >= 4.0.1)\n@see swf_ortho2() - Defines 2D orthographic mapping of user coordinates onto\nthe current viewport\n
swf_ortho2 swf_ortho2(float $xmin, float $xmax, float $ymin, float $ymax)\n[void]\nDefines 2D orthographic mapping of user coordinates onto the current\nviewport. Defines a two dimensional orthographic mapping of user coordinates\nonto the current viewport, this defaults to one to one mapping of the area of\nthe Flash movie. If a perspective transformation is desired, swf_perspective()\ncan be used.\n@param xmin\n@param xmax\n@param ymin\n@param ymax\n@return (PHP 4)\n@see swf_ortho() - Defines an orthographic mapping of user coordinates onto\nthe current viewport\n
swf_perspective swf_perspective(float $fovy, float $aspect, float $near,\nfloat $far) [void]\nDefine a perspective projection transformation. Defines a perspective\nprojection transformation. Note: Various distortion artifacts may appear when\nperforming a perspective projection, this is because Flash players only have\na two dimensional matrix. Some are not to pretty.\n@param fovy A field-of-view angle in the y direction.\n@param aspect The aspect ratio of the viewport that is being drawn onto.\n@param near The near clipping plane.\n@param far The far clipping plane.\n@return (PHP 4)\n
swf_placeobject swf_placeobject(int $objid, int $depth) [void]\nPlace an object onto the screen. Places the object in the current frame at a\nspecified `depth`. This uses the current mulcolor (specified by swf_mulcolor())\nand the current addcolor (specified by swf_addcolor()) to color the object\nand it uses the current matrix to position the object.\n@param objid The object id.\n@param depth Must be between 1 and 65535.\n@return (PHP 4)\n
swf_polarview swf_polarview(float $dist, float $azimuth, float $incidence,\nfloat $twist) [void]\nDefine the viewer's position with polar coordinates. The swf_polarview()\nfunction defines the viewer&#039;s position in polar coordinates.\n@param dist The distance between the viewpoint to the world space origin.\n@param azimuth Defines the azimuthal angle in the x,y coordinate plane,\nmeasured in distance from the y axis.\n@param incidence Defines the angle of incidence in the y,z plane, measured\nin distance from the z axis. The incidence angle is defined as the angle of\nthe viewport relative to the z axis.\n@param twist Specifies the amount that the viewpoint is to be rotated about\nthe line of sight using the right hand rule.\n@return (PHP 4)\n
swf_popmatrix swf_popmatrix(void) [void]\nRestore a previous transformation matrix. Restores a previous transformation\nmatrix.\n@return (PHP 4)\n@see swf_pushmatrix() - Push the current transformation matrix back onto\nthe stack\n
swf_posround swf_posround(int $round) [void]\nEnables or Disables the rounding of the translation when objects are placed\nor moved. Enables or disables the rounding of the translation when objects\nare placed or moved, there are times when text becomes more readable because\nrounding has been enabled.\n@param round Whether to enable rounding or not, if set to the value of 1,\nthen rounding is enabled, if set to 0 then rounding is disabled.\n@return (PHP 4)\n
swf_pushmatrix swf_pushmatrix(void) [void]\nPush the current transformation matrix back onto the stack. Pushes the\ncurrent transformation matrix back onto the stack.\n@return (PHP 4)\n@see swf_popmatrix() - Restore a previous transformation matrix\n
swf_removeobject swf_removeobject(int $depth) [void]\nRemove an object. Removes the last object drawn at the depth specified by\n`depth`.\n@param depth The depth, as an integer.\n@return (PHP 4)\n
swf_rotate swf_rotate(float $angle, string $axis) [void]\nRotate the current transformation. Rotates the current transformation by a\ngiven `angle` around the given `axis`.\n@param angle The rotation angle.\n@param axis The axis. Valid values axis are `x` (the x axis), `y` (the y axis)\nor `z` (the z axis).\n@return (PHP 4)\n
swf_scale swf_scale(float $x, float $y, float $z) [void]\nScale the current transformation. The swf_scale() scales curve coordinates\nby the given value.\n@param x x scale factor.\n@param y y scale factor.\n@param z z scale factor.\n@return (PHP 4)\n
swf_setfont swf_setfont(int $fontid) [void]\nChange the current font. The swf_setfont() sets the current font to the\nvalue given by the `fontid` parameter.\n@param fontid The font identifier.\n@return (PHP 4)\n
swf_setframe swf_setframe(int $framenumber) [void]\nSwitch to a specified frame. Changes the active frame to the specified on.\n@param framenumber The frame number to be set.\n@return (PHP 4)\n@see swf_getframe() - Get the frame number of the current frame\n
swf_shapearc swf_shapearc(float $x, float $y, float $r, float $ang1, float\n$ang2) [void]\nDraw a circular arc. Draws a circular arc.\n@param x x-coordinate of the center.\n@param y y-coordinate of the center.\n@param r The arc radius.\n@param ang1 The start angle.\n@param ang2 The end angle.\n@return (PHP 4)\n
swf_shapecurveto swf_shapecurveto(float $x1, float $y1, float $x2, float $y2)\n[void]\nDraw a quadratic bezier curve between two points. Draws a quadratic bezier\ncurve from the current location, though the two given points. The current\nposition is then set to the point defined by the `x2` and `y2` parameters.\n@param x1 x-coordinate of the first point.\n@param y1 y-coordinate of the first point.\n@param x2 x-coordinate of the second point.\n@param y2 y-coordinate of the second point.\n@return (PHP 4)\n@see swf_shapecurveto3() - Draw a cubic bezier curve\n
swf_shapecurveto3 swf_shapecurveto3(float $x1, float $y1, float $x2, float\n$y2, float $x3, float $y3) [void]\nDraw a cubic bezier curve. Draw a cubic bezier curve using the given\ncoordinates. The current position is then set to the `x3`,`y3` coordinate.\n@param x1 x-coordinate of the first off curve control point.\n@param y1 y-coordinate of the first off curve control point.\n@param x2 x-coordinate of the second off curve control point.\n@param y2 y-coordinate of the second off curve control point.\n@param x3 x-coordinate of the endpoint.\n@param y3 y-coordinate of the endpoint.\n@return (PHP 4)\n@see swf_shapecurveto() - Draw a quadratic bezier curve between two points\n
swf_shapefillbitmapclip swf_shapefillbitmapclip(int $bitmapid) [void]\nSet current fill mode to clipped bitmap. Sets the fill to bitmap clipped,\nempty spaces will be filled by the bitmap.\n@param bitmapid The bitmap id.\n@return (PHP 4)\n@see swf_shapefillbitmaptile() - Set current fill mode to tiled bitmap\n
swf_shapefillbitmaptile swf_shapefillbitmaptile(int $bitmapid) [void]\nSet current fill mode to tiled bitmap. Sets the fill to bitmap tile, empty\nspaces will be filled by the bitmap.\n@param bitmapid The bitmap id.\n@return (PHP 4)\n@see swf_shapefillbitmapclip() - Set current fill mode to clipped bitmap\n
swf_shapefilloff swf_shapefilloff(void) [void]\nTurns off filling. Turns off filling for the current shape.\n@return (PHP 4)\n
swf_shapefillsolid swf_shapefillsolid(float $r, float $g, float $b, float $a)\n[void]\nSet the current fill style to the specified color. Sets the current fill\nstyle to solid, and then sets the fill color to the given color.\n@param r Red value\n@param g Green value\n@param b Blue value\n@param a Alpha value\n@return (PHP 4)\n
swf_shapelinesolid swf_shapelinesolid(float $r, float $g, float $b, float $a,\nfloat $width) [void]\nSet the current line style. Sets the current line style to the given color\nand width.\n@param r Red value\n@param g Green value\n@param b Blue value\n@param a Alpha value\n@param width The line width. If 0.0 is given then no lines are drawn.\n@return (PHP 4)\n
swf_shapelineto swf_shapelineto(float $x, float $y) [void]\nDraw a line. Draws a line to the `x` and `y` coordinates. The current position\nis then set to that point.\n@param x x-coordinate of the target.\n@param y y-coordinate of the target.\n@return (PHP 4)\n
swf_shapemoveto swf_shapemoveto(float $x, float $y) [void]\nMove the current position. Moves the current position to the given point.\n@param x x-coordinate of the target.\n@param y y-coordinate of the target.\n@return (PHP 4)\n
swf_showframe swf_showframe(void) [void]\nDisplay the current frame. Outputs the current frame.\n@return (PHP 4)\n
swf_startbutton swf_startbutton(int $objid, int $type) [void]\nStart the definition of a button. Starts the definition of a button.\n@param objid The object id.\n@param type Can either be TYPE_MENUBUTTON or TYPE_PUSHBUTTON. The\nTYPE_MENUBUTTON constant allows the focus to travel from the button when\nthe mouse is down, TYPE_PUSHBUTTON does not allow the focus to travel when\nthe mouse is down.\n@return (PHP 4)\n@see swf_endbutton() - End the definition of the current button\n
swf_startdoaction swf_startdoaction(void) [void]\nStart a description of an action list for the current frame. Starts the\ndescription of an action list for the current frame. This must be called\nbefore actions are defined for the current frame.\n@return (PHP 4)\n@see swf_enddoaction() - End the current action\n
swf_startshape swf_startshape(int $objid) [void]\nStart a complex shape. Starts a complex shape.\n@param objid The object id.\n@return (PHP 4)\n@see swf_endshape() - Completes the definition of the current shape\n
swf_startsymbol swf_startsymbol(int $objid) [void]\nDefine a symbol. Defines an object id as a symbol. Symbols are tiny flash\nmovies that can be played simultaneously.\n@param objid The object id you want to define as a symbol.\n@return (PHP 4)\n@see swf_endsymbol() - End the definition of a symbol\n
swf_textwidth swf_textwidth(string $str) [float]\nGet the width of a string. Gives the width of the string in pixels, using\nthe current font and font size.\n@param str The string.\n@return (PHP 4)\n
swf_translate swf_translate(float $x, float $y, float $z) [void]\nTranslate the current transformations. Translates the current transformation\nby the given values.\n@param x x value.\n@param y y value.\n@param z z value.\n@return (PHP 4)\n
swf_viewport swf_viewport(float $xmin, float $xmax, float $ymin, float $ymax)\n[void]\nSelect an area for future drawing. Selects an area for future drawing for\n`xmin` to `xmax` and `ymin` to `ymax`, if this function is not called the\narea defaults to the size of the screen.\n@param xmin\n@param xmax\n@param ymin\n@param ymax\n@return (PHP 4)\n
str_repeat str_repeat(string $input, int $multiplier) [string]\nRepeat a string. Returns `input` repeated `multiplier` times.\n@param input The string to be repeated.\n@param multiplier Number of time the `input` string should be\nrepeated. `multiplier` has to be greater than or equal to 0. If the\n`multiplier` is set to 0, the function will return an empty string.\n@return (PHP 4, PHP 5)\n@see for\n@see str_pad() - Pad a string to a certain length with another string\n@see substr_count() - Count the number of substring occurrences\n
str_replace str_replace(mixed $search, mixed $replace, mixed $subject [,\nint &$count]) [mixed]\nReplace all occurrences of the search string with the replacement string. This\nfunction returns a string or an array with all occurrences of `search` in\n`subject` replaced with the given `replace` value. If you don&#039;t need\nfancy replacing rules (like regular expressions), you should always use this\nfunction instead of preg_replace().\n@param search The value being searched for, otherwise known as the needle. An\narray may be used to designate multiple needles.\n@param replace The replacement value that replaces found `search` values. An\narray may be used to designate multiple replacements.\n@param subject The string or array being searched and replaced on, otherwise\nknown as the haystack. If `subject` is an array, then the search and replace\nis performed with every entry of `subject`, and the return value is an array\nas well.\n@param count If passed, this will be set to the number of replacements\nperformed.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see str_ireplace() - Case-insensitive version of str_replace.\n@see substr_replace() - Replace text within a portion of a string\n@see preg_replace() - Perform a regular expression search and replace\n@see strtr() - Translate characters or replace substrings\n
str_rot13 str_rot13(string $str) [string]\nPerform the rot13 transform on a string. Performs the ROT13 encoding on the\n`str` argument and returns the resulting string. The ROT13 encoding simply\nshifts every letter by 13 places in the alphabet while leaving non-alpha\ncharacters untouched. Encoding and decoding are done by the same function,\npassing an encoded string as argument will return the original version.\n@param str The input string.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
str_shuffle str_shuffle(string $str) [string]\nRandomly shuffles a string.\n@param str The input string.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see shuffle() - Shuffle an array\n@see rand() - Generate a random integer\n
str_split str_split(string $string [, int $split_length=1]) [array]\nConvert a string to an array. Converts a string to an array.\n@param string The input string.\n@param split_length Maximum length of the chunk.\n@return (PHP 5)\n@see chunk_split() - Split a string into smaller chunks\n@see preg_split() - Split string by a regular expression\n@see explode() - Split a string by string\n@see count_chars() - Return information about characters used in a string\n@see str_word_count() - Return information about words used in a string\n@see for\n
str_word_count str_word_count(string $string [, int $format=0 [, string\n$charlist]]) [mixed]\nReturn information about words used in a string. Counts the number of words\ninside `string`. If the optional `format` is not specified, then the return\nvalue will be an integer representing the number of words found. In the\nevent the `format` is specified, the return value will be an array, content\nof which is dependent on the `format`. The possible value for the `format`\nand the resultant outputs are listed below. For the purpose of this function,\n&#039;word&#039; is defined as a locale dependent string containing alphabetic\ncharacters, which also may contain, but not start with &quot;&#039;&quot;\nand &quot;-&quot; characters.\n@param string The string\n@param format Specify the return value of this function. The current\nsupported values are: 0 - returns the number of words found 1 - returns\nan array containing all the words found inside the `string` 2 - returns an\nassociative array, where the key is the numeric position of the word inside\nthe `string` and the value is the actual word itself\n@param charlist A list of additional characters which will be considered\nas &#039;word&#039;\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see explode() - Split a string by string\n@see preg_split() - Split string by a regular expression\n@see split() - Split string into array by regular expression\n@see count_chars() - Return information about characters used in a string\n@see substr_count() - Count the number of substring occurrences\n
strcasecmp strcasecmp(string $str1, string $str2) [int]\nBinary safe case-insensitive string comparison. Binary safe case-insensitive\nstring comparison.\n@param str1 The first string\n@param str2 The second string\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcmp() - Binary safe string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strstr() - Find first occurrence of a string\n
strchr strchr\nAlias of strstr.\n
strcmp strcmp(string $str1, string $str2) [int]\nBinary safe string comparison.\n@param str1 The first string.\n@param str2 The second string.\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strncmp() - Binary safe string comparison of the first n characters\n@see strstr() - Find first occurrence of a string\n
strcoll strcoll(string $str1, string $str2) [int]\nLocale based string comparison. Note that this comparison is case sensitive,\nand unlike strcmp() this function is not binary safe. strcoll() uses the\ncurrent locale for doing the comparisons. If the current locale is C or POSIX,\nthis function is equivalent to strcmp().\n@param str1 The first string.\n@param str2 The second string.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcmp() - Binary safe string comparison\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strncmp() - Binary safe string comparison of the first n characters\n@see strstr() - Find first occurrence of a string\n@see setlocale() - Set locale information\n
strcspn strcspn(string $str1, string $str2 [, int $start [, int $length]])\n[int]\nFind length of initial segment not matching mask. Returns the length of the\ninitial segment of `str1` which does not contain any of the characters in\n`str2`.\n@param str1 The first string.\n@param str2 The second string.\n@param start The start position of the string to examine.\n@param length The length of the string to examine.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strspn() - Finds the length of the first segment of a string consisting\nentirely of characters contained within a given mask.\n
stream_bucket_append stream_bucket_append(resource $brigade, resource $bucket)\n[void]\nAppend bucket to brigade.\n
stream_bucket_make_writeable stream_bucket_make_writeable(resource $brigade)\n[object]\nReturn a bucket object from the brigade for operating on.\n
stream_bucket_new stream_bucket_new(resource $stream, string $buffer) [object]\nCreate a new bucket for use on the current stream.\n
stream_bucket_prepend stream_bucket_prepend(resource $brigade, resource\n$bucket) [void]\nPrepend bucket to brigade.\n
stream_context_create stream_context_create([array $options [, array $params]])\n[resource]\nCreate a streams context. Creates and returns a stream context with any\noptions supplied in `options` preset.\n@param options Must be an associative array of associative arrays in the\nformat `$arr[&#039;wrapper&#039;][&#039;option&#039;] = $value`. Default to\nan empty array.\n@param params Must be an associative array in the format\n`$arr[&#039;parameter&#039;] = $value`. Refer to context parameters for a\nlisting of standard stream parameters.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see stream_context_set_option() - Sets an option for a stream/wrapper/context\n@see Listing of supported wrappers (Supported Protocols and Wrappers)\n@see Context options (Context options and parameters)\n
stream_context_get_default stream_context_get_default([array $options])\n[resource]\nRetreive the default streams context.\n@param options `options` must be an associative array of associative arrays\nin the format `$arr[&#039;wrapper&#039;][&#039;option&#039;] = $value`. Note:\nAs of PHP 5.3.0, the stream_context_set_default() function can be used to\nset the default context.\n@return (PHP 5 >= 5.1.0)\n@see stream_context_create() - Create a streams context\n@see Listing of supported wrappers with context options (Supported Protocols\nand Wrappers).\n
stream_context_get_options stream_context_get_options(resource\n$stream_or_context) [array]\nRetrieve options for a stream/wrapper/context.\n@param stream_or_context The stream or context to get options from\n@return (PHP 4 >= 4.3.0, PHP 5)\n
stream_context_get_params stream_context_get_params(resource\n$stream_or_context) [array]\nRetrieves parameters from a context. Retrieves parameter and options\ninformation from the stream or context.\n@param stream_or_context A stream resource or a context resource\n@return (PHP 5 >= 5.3.0)\n@see stream_context_set_option() - Sets an option for a stream/wrapper/context\n@see stream_context_get_params()\n@see stream_context_set_params() - Set parameters for a stream/wrapper/context\n
stream_context_set_default stream_context_set_default(array $options)\n[resource]\nSet the default streams context.\n@param options The options to set for the default context. Note:\n`options` must be an associative array of associative arrays in the format\n`$arr[&#039;wrapper&#039;][&#039;option&#039;] = $value`.\n@return (PHP 5 >= 5.3.0)\n@see stream_context_create() - Create a streams context\n@see stream_context_get_default() - Retreive the default streams context\n@see Listing of supported wrappers with context options (Supported Protocols\nand Wrappers).\n
stream_context_set_option stream_context_set_option(resource\n$stream_or_context, string $wrapper, string $option, mixed $value) [bool]\nSets an option for a stream/wrapper/context.\n@param stream_or_context The stream or context resource to apply the\noptions too.\n@param options The options to set for the default context. Note:\n`options` must be an associative array of associative arrays in the format\n`$arr[&#039;wrapper&#039;][&#039;option&#039;] = $value`. Refer to context\noptions and parameters for a listing of stream options.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
stream_context_set_params stream_context_set_params(resource\n$stream_or_context, array $params) [bool]\nSet parameters for a stream/wrapper/context. Sets parameters on the specified\ncontext.\n@param stream_or_context The stream or context to apply the parameters too.\n@param params An array of parameters to set. Note: `params` should be\nan associative array of the structure: `$params[&#039;paramname&#039;] =\n&quot;paramvalue&quot;;`.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
stream_copy_to_stream stream_copy_to_stream(resource $source, resource $dest\n[, int $maxlength=-1 [, int $offset=0]]) [int]\nCopies data from one stream to another. Makes a copy of up to `maxlength`\nbytes of data from the current position (or from the `offset` position,\nif specified) in `source` to `dest`. If `maxlength` is not specified, all\nremaining content in `source` will be copied.\n@param source The source stream\n@param dest The destination stream\n@param maxlength Maximum bytes to copy\n@param offset The offset where to start to copy data\n@return (PHP 5)\n@see copy() - Copies file\n
stream_encoding stream_encoding(resource $stream [, string $encoding]) [bool]\nSet character set for stream encoding.\n
stream_filter_append stream_filter_append(resource $stream, string $filtername\n[, int $read_write [, mixed $params]]) [resource]\nAttach a filter to a stream. Adds `filtername` to the list of filters attached\nto `stream`.\n@param stream The target stream.\n@param filtername The filter name.\n@param read_write By default, stream_filter_append() will attach the filter to\nthe `read filter chain` if the file was opened for reading (i.e. File Mode:\n`r`, and/or `+`). The filter will also be attached to the `write filter\nchain` if the file was opened for writing (i.e. File Mode: `w`, `a`, and/or\n`+`). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\nalso be passed to the `read_write` parameter to override this behavior.\n@param params This filter will be added with the specified `params` to the\nend of the list and will therefore be called last during stream operations. To\nadd a filter to the beginning of the list, use stream_filter_prepend().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: When using custom (user) filters stream_filter_register() must\nbe called first in order to register the desired user filter to `filtername`.\n@note Note: Stream data is read from resources (both local and remote) in\nchunks, with any unconsumed data kept in internal buffers. When a new filter is\nappended to a stream, data in the internal buffers is processed through the new\nfilter at that time. This differs from the behavior of stream_filter_prepend().\n@note Note: When a filter is added for read and write, two instances of\nthe filter are created. stream_filter_append() must be called twice with\nSTREAM_FILTER_READ and STREAM_FILTER_WRITE to get both filter resources.\n@see stream_filter_register() - Register a user defined stream filter\n@see stream_filter_prepend() - Attach a filter to a stream\n@see stream_get_filters() - Retrieve list of registered filters\n
stream_filter_prepend stream_filter_prepend(resource $stream, string\n$filtername [, int $read_write [, mixed $params]]) [resource]\nAttach a filter to a stream. Adds `filtername` to the list of filters attached\nto `stream`.\n@param stream The target stream.\n@param filtername The filter name.\n@param read_write By default, stream_filter_prepend() will attach the filter to\nthe `read filter chain` if the file was opened for reading (i.e. File Mode:\n`r`, and/or `+`). The filter will also be attached to the `write filter\nchain` if the file was opened for writing (i.e. File Mode: `w`, `a`, and/or\n`+`). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\nalso be passed to the `read_write` parameter to override this behavior. See\nstream_filter_append() for an example of using this parameter.\n@param params This filter will be added with the specified `params` to\nthe beginning of the list and will therefore be called first during stream\noperations. To add a filter to the end of the list, use stream_filter_append().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: When using custom (user) filters stream_filter_register() must\nbe called first in order to register the desired user filter to `filtername`.\n@note Note: Stream data is read from resources (both local and remote) in\nchunks, with any unconsumed data kept in internal buffers. When a new filter\nis prepended to a stream, data in the internal buffers, which has already\nbeen processed through other filters will not be reprocessed through the new\nfilter at that time. This differs from the behavior of stream_filter_append().\n@note Note: When a filter is added for read and write, two instances of\nthe filter are created. stream_filter_prepend() must be called twice with\nSTREAM_FILTER_READ and STREAM_FILTER_WRITE to get both filter resources.\n@see stream_filter_register() - Register a user defined stream filter\n@see stream_filter_append() - Attach a filter to a stream\n
stream_filter_register stream_filter_register(string $filtername, string\n$classname) [bool]\nRegister a user defined stream filter. stream_filter_register() allows you\nto implement your own filter on any registered stream used with all the\nother filesystem functions (such as fopen(), fread() etc.).\n@param filtername The filter name to be registered.\n@return (PHP 5)\n@see stream_wrapper_register() - Register a URL wrapper implemented as a\nPHP class\n@see stream_filter_append() - Attach a filter to a stream\n@see stream_filter_prepend() - Attach a filter to a stream\n
stream_filter_remove stream_filter_remove(resource $stream_filter) [bool]\nRemove a filter from a stream. Removes a stream filter previously added to\na stream with stream_filter_prepend() or stream_filter_append(). Any data\nremaining in the filter&#039;s internal buffer will be flushed through to\nthe next filter before removing it.\n@param stream_filter The stream filter to be removed.\n@return (PHP 5 >= 5.1.0)\n@see stream_filter_register() - Register a user defined stream filter\n@see stream_filter_append() - Attach a filter to a stream\n@see stream_filter_prepend() - Attach a filter to a stream\n
stream_get_contents stream_get_contents(resource $handle [, int $maxlength=-1\n[, int $offset=-1]]) [string]\nReads remainder of a stream into a string. Identical to file_get_contents(),\nexcept that stream_get_contents() operates on an already open stream resource\nand returns the remaining contents in a string, up to `maxlength` bytes and\nstarting at the specified `offset`.\n@param handle (resource) A stream resource (e.g. returned from fopen())\n@param maxlength (integer) The maximum bytes to read. Defaults to -1 (read\nall the remaining buffer).\n@param offset (integer) Seek to the specified offset before reading. If this\nnumber is negative, no seeking will occur and reading will start from the\ncurrent position.\n@return (PHP 5)\n@note Note: This function is binary-safe.\n@see fgets() - Gets line from file pointer\n@see fread() - Binary-safe file read\n@see fpassthru() - Output all remaining data on a file pointer\n
stream_get_filters stream_get_filters(void) [array]\nRetrieve list of registered filters.\n@return (PHP 5)\n@see stream_filter_register() - Register a user defined stream filter\n@see stream_get_wrappers() - Retrieve list of registered streams\n
stream_get_line stream_get_line(resource $handle, int $length [, string\n$ending]) [string]\nGets line from stream resource up to a given delimiter. Gets a line from the\ngiven handle. Reading ends when `length` bytes have been read, when the string\nspecified by `ending` is found (which is not included in the return value), or\non EOF (whichever comes first). This function is nearly identical to fgets()\nexcept in that it allows end of line delimiters other than the standard \n,\n\r, and \r\n, and does not return the delimiter itself.\n@param handle A valid file handle.\n@param length The number of bytes to read from the handle.\n@param ending An optional string delimiter.\n@return (PHP 5)\n@see fread() - Binary-safe file read\n@see fgets() - Gets line from file pointer\n@see fgetc() - Gets character from file pointer\n
stream_get_meta_data stream_get_meta_data(resource $stream) [array]\nRetrieves header/meta data from streams/file pointers. Returns information\nabout an existing `stream`.\n@param stream The stream can be any stream created by fopen(), fsockopen()\nand pfsockopen().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function does NOT work on sockets created by the Socket\nextension.\n@see get_headers() - Fetches all the headers sent by the server in response\nto a HTTP request\n@see $http_response_header\n
stream_get_transports stream_get_transports(void) [array]\nRetrieve list of registered socket transports.\n@return (PHP 5)\n@see stream_get_filters() - Retrieve list of registered filters\n@see stream_get_wrappers() - Retrieve list of registered streams\n
stream_get_wrappers stream_get_wrappers(void) [array]\nRetrieve list of registered streams. Retrieve list of registered streams\navailable on the running system.\n@return (PHP 5)\n@see stream_wrapper_register() - Register a URL wrapper implemented as a\nPHP class\n
stream_is_local stream_is_local(mixed $stream_or_url) [bool]\nChecks if a stream is a local stream. Checks if a stream, or a URL, is a\nlocal one or not.\n@param stream_or_url The stream resource or URL to check.\n@return (PHP 5 >= 5.2.4)\n
stream_notification_callback stream_notification_callback(int\n$notification_code, int $severity, string $message, int $message_code,\nint $bytes_transferred, int $bytes_max) [void]\nA callback function for the notification context paramater. A callback\nfunction, used by the notification context parameter, called during an\nevent. Note: This is not a real function, only a prototype of how the function\nshould be.\n@param notification_code One of the STREAM_NOTIFY_* notification constants.\n@param severity One of the STREAM_NOTIFY_SEVERITY_* notification constants.\n@param message Passed if a descriptive message is available for the event.\n@param message_code Passed if a descriptive message code is available for the\nevent. The meaning of this value is dependent on the specific wrapper in use.\n@param bytes_transferred If applicable, the `bytes_transferred` will be\npopulated.\n@param bytes_max If applicable, the `bytes_max` will be populated.\n@return (PHP 5 >= 5.2.0)\n@see Context parameters\n
stream_register_wrapper stream_register_wrapper\nAlias of stream_wrapper_register.\n
stream_resolve_include_path stream_resolve_include_path(string $filename)\n[string]\nResolve filename against the include path. Resolve `filename` against the\ninclude path according to the same rules as fopen()/include().\n@param filename The filename to resolve.\n@return (PHP 5 >= 5.3.2)\n
stream_select stream_select(array &$read, array &$write, array &$except,\nint $tv_sec [, int $tv_usec=0]) [int]\nRuns the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec. The\n   stream_select() function accepts arrays of streams and waits for them to\n   change status. Its operation is equivalent to that of the socket_select()\n   function except in that it acts on streams.\n@param read The streams listed in the `read` array will be watched to see if\ncharacters become available for reading (more precisely, to see if a read will\nnot block - in particular, a stream resource is also ready on end-of-file,\nin which case an fread() will return a zero length string).\n@param write The streams listed in the `write` array will be watched to see\nif a write will not block.\n@param except The streams listed in the `except` array will be watched for\nhigh priority exceptional (&quot;out-of-band&quot;) data arriving. Note:\nWhen stream_select() returns, the arrays `read`, `write` and `except` are\nmodified to indicate which stream resource(s) actually changed status. You\ndo not need to pass every array to stream_select(). You can leave it out\nand use an empty array or NULL instead. Also do not forget that those arrays\nare passed by reference and will be modified after stream_select() returns.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n
stream_set_blocking stream_set_blocking(resource $stream, int $mode) [bool]\nSet blocking/non-blocking mode on a stream. Sets blocking or non-blocking mode\non a `stream`. This function works for any stream that supports non-blocking\nmode (currently, regular files and socket streams).\n@param stream The stream.\n@param mode If `mode` is 0, the given stream will be switched to non-blocking\nmode, and if 1, it will be switched to blocking mode. This affects calls\nlike fgets() and fread() that read from the stream. In non-blocking mode an\nfgets() call will always return right away while in blocking mode it will\nwait for data to become available on the stream.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function was previously called as set_socket_blocking()\nand later socket_set_blocking() but this usage is deprecated.\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n
stream_set_read_buffer stream_set_read_buffer(resource $stream, int $buffer)\n[int]\nSet read file buffering on the given stream. Sets the read buffer. It&#039;s\nthe equivalent of stream_set_write_buffer(), but for read operations.\n@param stream The file pointer.\n@param buffer The number of bytes to buffer. If `buffer` is 0 then read\noperations are unbuffered. This ensures that all reads with fread() are\ncompleted before other processes are allowed to write to that output stream.\n@return (PHP 5 >= 5.3.3)\n@see stream_set_write_buffer() - Sets write file buffering on the given stream\n
stream_set_timeout stream_set_timeout(resource $stream, int $seconds [,\nint $microseconds=0]) [bool]\nSet timeout period on a stream. Sets the timeout value on `stream`, expressed\nin the sum of `seconds` and `microseconds`. When the stream times out, the\n&#039;timed_out&#039; key of the array returned by stream_get_meta_data()\nis set to TRUE, although no error/warning is generated.\n@param stream The target stream.\n@param seconds The seconds part of the timeout to be set.\n@param microseconds The microseconds part of the timeout to be set.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function doesn&#039;t work with advanced operations like\nstream_socket_recvfrom(), use stream_select() with timeout parameter instead.\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see fopen() - Opens file or URL\n
stream_set_write_buffer stream_set_write_buffer(resource $stream, int $buffer)\n[int]\nSets write file buffering on the given stream. Sets the buffering for write\noperations on the given `stream` to `buffer` bytes. Output using fwrite() is\nnormally buffered at 8K. This means that if there are two processes wanting\nto write to the same output stream (a file), each is paused after 8K of data\nto allow the other to write.\n@param stream The file pointer.\n@param buffer The number of bytes to buffer. If `buffer` is 0 then write\noperations are unbuffered. This ensures that all writes with fwrite() are\ncompleted before other processes are allowed to write to that output stream.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fopen() - Opens file or URL\n@see fwrite() - Binary-safe file write\n
stream_socket_accept stream_socket_accept(resource $server_socket [, float\n$timeout=ini_get(&quot;default_socket_timeout&quot;) [, string &$peername]])\n[resource]\nAccept a connection on a socket created by stream_socket_server. Accept a\nconnection on a socket previously created by stream_socket_server().\n@param server_socket The server socket to accept a connection from.\n@param timeout Override the default socket accept timeout. Time should be\ngiven in seconds.\n@param peername Will be set to the name (address) of the client which\nconnected, if included and available from the selected transport. Note:\nCan also be determined later using stream_socket_get_name().\n@return (PHP 5)\n@see stream_socket_server() - Create an Internet or Unix domain server socket\n@see stream_socket_get_name() - Retrieve the name of the local or remote\nsockets\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n@see stream_set_timeout() - Set timeout period on a stream\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fwrite() - Binary-safe file write\n@see fclose() - Closes an open file pointer\n@see feof() - Tests for end-of-file on a file pointer\n@see cURL Functions\n
stream_socket_client stream_socket_client(string\n$remote_socket [, int &$errno [, string &$errstr [, float\n$timeout=ini_get(&quot;default_socket_timeout&quot;) [, int\n$flags=STREAM_CLIENT_CONNECT [, resource $context]]]]]) [resource]\nOpen Internet or Unix domain socket connection. Initiates a stream or datagram\nconnection to the destination specified by `remote_socket`. The type of socket\ncreated is determined by the transport specified using standard URL formatting:\n`transport://target`. For Internet Domain sockets (AF_INET) such as TCP and\nUDP, the `target` portion of the `remote_socket` parameter should consist\nof a hostname or IP address followed by a colon and a port number. For Unix\ndomain sockets, the `target` portion should point to the socket file on the\nfilesystem. Note: The stream will by default be opened in blocking mode. You\ncan switch it to non-blocking mode by using stream_set_blocking().\n@param remote_socket Address to the socket to connect to.\n@param errno Will be set to the system level error number if connection fails.\n@param errstr Will be set to the system level error message if the connection\nfails.\n@param timeout Number of seconds until the `connect()` system call should\ntimeout. Note: This parameter only applies when not making asynchronous\nconnection attempts. Note: To set a timeout for reading/writing data over\nthe socket, use the stream_set_timeout(), as the `timeout` only applies\nwhile making connecting the socket.\n@param flags Bitmask field which may be set to any combination of\nconnection flags. Currently the select of connection flags is limited\nto STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and\nSTREAM_CLIENT_PERSISTENT.\n@param context A valid context resource created with stream_context_create().\n@return (PHP 5)\n@see stream_socket_server() - Create an Internet or Unix domain server socket\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n@see stream_set_timeout() - Set timeout period on a stream\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fwrite() - Binary-safe file write\n@see fclose() - Closes an open file pointer\n@see feof() - Tests for end-of-file on a file pointer\n@see cURL Functions\n
stream_socket_enable_crypto stream_socket_enable_crypto(resource $stream,\nbool $enable [, int $crypto_type [, resource $session_stream]]) [mixed]\nTurns encryption on/off on an already connected socket.\n@param stream The stream resource.\n@param enable Enable/disable cryptography on the stream.\n@param crypto_type Setup encryption on the stream. Valid methods are\nSTREAM_CRYPTO_METHOD_SSLv2_CLIENT STREAM_CRYPTO_METHOD_SSLv3_CLIENT\nSTREAM_CRYPTO_METHOD_SSLv23_CLIENT STREAM_CRYPTO_METHOD_TLS_CLIENT\nSTREAM_CRYPTO_METHOD_SSLv2_SERVER STREAM_CRYPTO_METHOD_SSLv3_SERVER\nSTREAM_CRYPTO_METHOD_SSLv23_SERVER STREAM_CRYPTO_METHOD_TLS_SERVER\n@param session_stream Seed the stream with settings from `session_stream`.\n@return (PHP 5 >= 5.1.0)\n@see OpenSSL Functions\n@see List of Supported Socket Transports\n
stream_socket_get_name stream_socket_get_name(resource $handle, bool\n$want_peer) [string]\nRetrieve the name of the local or remote sockets. Returns the local or remote\nname of a given socket connection.\n@param handle The socket to get the name of.\n@param want_peer If set to TRUE the `remote` socket name will be returned,\nif set to FALSE the `local` socket name will be returned.\n@return (PHP 5)\n@see stream_socket_accept() - Accept a connection on a socket created by\nstream_socket_server\n
stream_socket_pair stream_socket_pair(int $domain, int $type, int $protocol)\n[array]\nCreates a pair of connected, indistinguishable socket\nstreams. stream_socket_pair() creates a pair of connected, indistinguishable\nsocket streams. This function is commonly used in IPC (Inter-Process\nCommunication).\n@param domain The protocol family to be used: STREAM_PF_INET, STREAM_PF_INET6\nor STREAM_PF_UNIX\n@param type The type of communication to be used: STREAM_SOCK_DGRAM,\nSTREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM\n@param protocol The protocol to be used: STREAM_IPPROTO_ICMP,\nSTREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP\n@return (PHP 5 >= 5.1.0)\n
stream_socket_recvfrom stream_socket_recvfrom(resource $socket, int $length\n[, int $flags=0 [, string &$address]]) [string]\nReceives data from a socket, connected or not. stream_socket_recvfrom()\naccepts data from a remote socket up to `length` bytes.\n@param socket The remote socket.\n@param length The number of bytes to receive from the `socket`.\n@param flags The value of `flags` can be any combination of the following:\nPossible values for `flags` STREAM_OOB Process OOB (`out-of-band`)\ndata. STREAM_PEEK Retrieve data from the socket, but do not consume the\nbuffer. Subsequent calls to fread() or stream_socket_recvfrom() will see\nthe same data.\n@param address If `address` is provided it will be populated with the address\nof the remote socket.\n@return (PHP 5)\n@note Note: If a message received is longer than the `length` parameter,\nexcess bytes may be discarded depending on the type of socket the message\nis received from (such as UDP).\n@note Note: Calls to stream_socket_recvfrom() on socket-based streams, after\ncalls to buffer-based stream functions (like fread() or stream_get_line())\nread data directly from the socket and bypass the stream buffer.\n@see stream_socket_sendto() - Sends a message to a socket, whether it is\nconnected or not\n@see stream_socket_client() - Open Internet or Unix domain socket connection\n@see stream_socket_server() - Create an Internet or Unix domain server socket\n
stream_socket_sendto stream_socket_sendto(resource $socket, string $data [,\nint $flags=0 [, string $address]]) [int]\nSends a message to a socket, whether it is connected or not. Sends the\nspecified `data` through the `socket`.\n@param socket The socket to send `data` to.\n@param data The data to be sent.\n@param flags The value of `flags` can be any combination of the following:\npossible values for `flags` STREAM_OOB Process OOB (out-of-band) data.\n@param address The address specified when the socket stream was created will\nbe used unless an alternate address is specified in `address`. If specified,\nit must be in dotted quad (or [ipv6]) format.\n@return (PHP 5)\n@see stream_socket_recvfrom() - Receives data from a socket, connected or not\n@see stream_socket_client() - Open Internet or Unix domain socket connection\n@see stream_socket_server() - Create an Internet or Unix domain server socket\n
stream_socket_server stream_socket_server(string $local_socket [, int &$errno\n[, string &$errstr [, int $flags=STREAM_SERVER_BIND | STREAM_SERVER_LISTEN\n[, resource $context]]]]) [resource]\nCreate an Internet or Unix domain server socket. Creates a stream or datagram\nsocket on the specified `local_socket`. This function only creates a socket,\nto begin accepting connections use stream_socket_accept().\n@param local_socket The type of socket created is determined by the transport\nspecified using standard URL formatting: `transport://target`. For Internet\nDomain sockets (AF_INET) such as TCP and UDP, the `target` portion of\nthe `remote_socket` parameter should consist of a hostname or IP address\nfollowed by a colon and a port number. For Unix domain sockets, the `target`\nportion should point to the socket file on the filesystem. Depending on the\nenvironment, Unix domain sockets may not be available. A list of available\ntransports can be retrieved using stream_get_transports(). See List of\nSupported Socket Transports for a list of bulitin transports.\n@param errno If the optional `errno` and `errstr` arguments are present\nthey will be set to indicate the actual system level error that occurred\nin the system-level `socket()`, `bind()`, and `listen()` calls. If the\nvalue returned in `errno` is `0` and the function returned FALSE, it is an\nindication that the error occurred before the `bind()` call. This is most\nlikely due to a problem initializing the socket. Note that the `errno` and\n`errstr` arguments will always be passed by reference.\n@param errstr See `errno` description.\n@param flags A bitmask field which may be set to any combination of socket\ncreation flags. Note: For UDP sockets, you must use STREAM_SERVER_BIND as the\n`flags` parameter.\n@param context\n@return (PHP 5)\n@note Note: When specifying a numerical IPv6 address (e.g. `fe80::1`),\nyou must enclose the IP in square brackets—for example, `tcp://[fe80::1]:80`.\n@see stream_socket_client() - Open Internet or Unix domain socket connection\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n@see stream_set_timeout() - Set timeout period on a stream\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fwrite() - Binary-safe file write\n@see fclose() - Closes an open file pointer\n@see feof() - Tests for end-of-file on a file pointer\n@see Curl extension\n
stream_socket_shutdown stream_socket_shutdown(resource $stream, int $how)\n[bool]\nShutdown a full-duplex connection. Shutdowns (partially or not) a full-duplex\nconnection.\n@param stream An open stream (opened with stream_socket_client(), for example)\n@param how One of the following constants: STREAM_SHUT_RD (disable further\nreceptions), STREAM_SHUT_WR (disable further transmissions) or STREAM_SHUT_RDWR\n(disable further receptions and transmissions).\n@return (PHP 5 >= 5.2.1)\n@see fclose() - Closes an open file pointer\n
stream_supports_lock stream_supports_lock(resource $stream) [bool]\nTells whether the stream supports locking.. Tells whether the stream supports\nlocking through flock().\n@param stream The stream to check.\n@return (PHP 5 >= 5.3.0)\n@see flock() - Portable advisory file locking\n
stream_wrapper_register stream_wrapper_register(string $protocol, string\n$classname [, int $flags=0]) [bool]\nRegister a URL wrapper implemented as a PHP class. Allows you to implement\nyour own protocol handlers and streams for use with all the other filesystem\nfunctions (such as fopen(), fread() etc.).\n@param protocol The wrapper name to be registered.\n@param classname The classname which implements the `protocol`.\n@param flags Should be set to STREAM_IS_URL if `protocol` is a URL\nprotocol. Default is 0, local stream.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@see The streamWrapper prototype class\n@see Example class registered as stream wrapper\n@see stream_wrapper_unregister() - Unregister a URL wrapper\n@see stream_wrapper_restore() - Restores a previously unregistered built-in\nwrapper\n@see stream_get_wrappers() - Retrieve list of registered streams\n
stream_wrapper_restore stream_wrapper_restore(string $protocol) [bool]\nRestores a previously unregistered built-in wrapper. Restores a built-in\nwrapper previously unregistered with stream_wrapper_unregister().\n@param protocol\n@return (PHP 5 >= 5.1.0)\n
stream_wrapper_unregister stream_wrapper_unregister(string $protocol) [bool]\nUnregister a URL wrapper. Allows you to disable an already defined stream\nwrapper. Once the wrapper has been disabled you may override it with a\nuser-defined wrapper using stream_wrapper_register() or reenable it later\non with stream_wrapper_restore().\n@param protocol\n@return (PHP 5 >= 5.1.0)\n
strftime strftime(string $format [, int $timestamp=time()]) [string]\nFormat a local time/date according to locale settings. Format the time\nand/or date according to locale settings. Month and weekday names and other\nlanguage-dependent strings respect the current locale set with setlocale(). Not\nall conversion specifiers may be supported by your C library, in which\ncase they will not be supported by PHP&#039;s strftime(). Additionally,\nnot all platforms support negative timestamps, so your date range may be\nlimited to no earlier than the Unix epoch. This means that %e, %T, %R and,\n%D (and possibly others) - as well as dates prior to `Jan 1, 1970` - will\nnot work on Windows, some Linux distributions, and a few other operating\nsystems. For Windows systems, a complete overview of supported conversion\nspecifiers can be found at &raquo; MSDN.\n@return (PHP 4, PHP 5)\n@note Note: %G and %V, which are based on ISO 8601:1988 week numbers can\ngive unexpected (albeit correct) results if the numbering system is not\nthoroughly understood. See %V examples in this manual page.\n@see setlocale() - Set locale information\n@see mktime() - Get Unix timestamp for a date\n@see strptime() - Parse a time/date generated with strftime\n@see gmstrftime() - Format a GMT/UTC time/date according to locale settings\n@see &raquo; Open Group specification of strftime()\n
strip_tags strip_tags(string $str [, string $allowable_tags]) [string]\nStrip HTML and PHP tags from a string. This function tries to return a string\nwith all NUL bytes, HTML and PHP tags stripped from a given `str`. It uses\nthe same tag stripping state machine as the fgetss() function.\n@param str The input string.\n@param allowable_tags You can use the optional second parameter to specify\ntags which should not be stripped. Note: HTML comments and PHP tags are also\nstripped. This is hardcoded and can not be changed with `allowable_tags`. Note:\nThis parameter should not contain whitespace. strip_tags() sees a tag as a\ncase-insensitive string between `&lt;` and the first whitespace or `>`. It\nmeans that `strip_tags(&quot;&lt;br/>&quot;, &quot;&lt;br>&quot;)` returns\nan empty string.\n@return (PHP 4, PHP 5)\n@see htmlspecialchars() - Convert special characters to HTML entities\n
stripcslashes stripcslashes(string $str) [string]\nUn-quote string quoted with addcslashes. Returns a string with backslashes\nstripped off. Recognizes C-like `\n`, `\r` ..., octal and hexadecimal\nrepresentation.\n@param str The string to be unescaped.\n@return (PHP 4, PHP 5)\n@see addcslashes() - Quote string with slashes in a C style\n
stripos stripos(string $haystack, string $needle [, int $offset=0]) [int]\nFind position of first occurrence of a case-insensitive string. Returns\nthe numeric position of the first occurrence of `needle` in the `haystack`\nstring. Unlike strpos(), stripos() is case-insensitive.\n@param haystack The string to search in\n@param needle Note that the `needle` may be a string of one or more\ncharacters. If `needle` is not a string, it is converted to an integer and\napplied as the ordinal value of a character.\n@param offset The optional `offset` parameter allows you to specify which\ncharacter in `haystack` to start searching. The position returned is still\nrelative to the beginning of `haystack`.\n@return (PHP 5)\n@note Note: This function is binary-safe.\n@see strpos() - Find position of first occurrence of a string\n@see strrpos() - Find the position of the last occurrence of a substring in\na string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n@see strripos() - Find position of last occurrence of a case-insensitive\nstring in a string\n@see str_ireplace() - Case-insensitive version of str_replace.\n
stripslashes stripslashes(string $str) [string]\nUn-quotes a quoted string. Un-quotes a quoted string. Note:\nIf magic_quotes_sybase is on, no backslashes are stripped off but two\napostrophes are replaced by one instead. An example use of stripslashes() is\nwhen the PHP directive magic_quotes_gpc is `on` (it&#039;s on by default),\nand you aren&#039;t inserting this data into a place (such as a database)\nthat requires escaping. For example, if you&#039;re simply outputting data\nstraight from an HTML form.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@see addslashes() - Quote string with slashes\n@see get_magic_quotes_gpc() - Gets the current configuration setting of\nmagic_quotes_gpc\n
stristr stristr(string $haystack, mixed $needle [, bool $before_needle=false])\n[string]\nCase-insensitive strstr. Returns all of `haystack` from the first occurrence\nof `needle` to the end.\n@param haystack The string to search in\n@param needle If `needle` is not a string, it is converted to an integer\nand applied as the ordinal value of a character.\n@param before_needle If TRUE, stristr() returns the part of the `haystack`\nbefore the first occurrence of the `needle`.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strstr() - Find first occurrence of a string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n@see preg_match() - Perform a regular expression match\n
strlen strlen(string $string) [int]\nGet string length. Returns the length of the given `string`.\n@param string The string being measured for length.\n@return (PHP 4, PHP 5)\n@note Note: strlen() returns NULL when executed on arrays, and an E_WARNING\nlevel error is emitted.\n@see count() - Count all elements in an array, or properties in an object\n@see mb_strlen() - Get string length\n
strnatcasecmp strnatcasecmp(string $str1, string $str2) [int]\nCase insensitive string comparisons using a &quot;natural order&quot;\nalgorithm. This function implements a comparison algorithm that orders\nalphanumeric strings in the way a human being would. The behaviour of this\nfunction is similar to strnatcmp(), except that the comparison is not case\nsensitive. For more information see: Martin Pool&#039;s &raquo; Natural\nOrder String Comparison page.\n@param str1 The first string.\n@param str2 The second string.\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcmp() - Binary safe string comparison\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strncmp() - Binary safe string comparison of the first n characters\n@see strstr() - Find first occurrence of a string\n@see setlocale() - Set locale information\n
strnatcmp strnatcmp(string $str1, string $str2) [int]\nString comparisons using a &quot;natural order&quot; algorithm. This function\nimplements a comparison algorithm that orders alphanumeric strings in the way\na human being would, this is described as a &quot;natural ordering&quot;. Note\nthat this comparison is case sensitive.\n@param str1 The first string.\n@param str2 The second string.\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strcmp() - Binary safe string comparison\n@see strncmp() - Binary safe string comparison of the first n characters\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strnatcasecmp() - Case insensitive string comparisons using a\n&quot;natural order&quot; algorithm\n@see strstr() - Find first occurrence of a string\n@see natsort() - Sort an array using a &quot;natural order&quot; algorithm\n@see natcasesort() - Sort an array using a case insensitive &quot;natural\norder&quot; algorithm\n
strncasecmp strncasecmp(string $str1, string $str2, int $len) [int]\nBinary safe case-insensitive string comparison of the first n characters. This\nfunction is similar to strcasecmp(), with the difference that you can specify\nthe (upper limit of the) number of characters from each string to be used\nin the comparison.\n@param str1 The first string.\n@param str2 The second string.\n@param len The length of strings to be used in the comparison.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcmp() - Binary safe string comparison\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n
strncmp strncmp(string $str1, string $str2, int $len) [int]\nBinary safe string comparison of the first n characters. This function is\nsimilar to strcmp(), with the difference that you can specify the (upper\nlimit of the) number of characters from each string to be used in the\ncomparison. Note that this comparison is case sensitive.\n@param str1 The first string.\n@param str2 The second string.\n@param len Number of characters to use in the comparison.\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see strcmp() - Binary safe string comparison\n@see strcasecmp() - Binary safe case-insensitive string comparison\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strncasecmp() - Binary safe case-insensitive string comparison of the\nfirst n characters\n@see strstr() - Find first occurrence of a string\n
strpbrk strpbrk(string $haystack, string $char_list) [string]\nSearch a string for any of a set of characters. strpbrk() searches the\n`haystack` string for a `char_list`.\n@param haystack The string where `char_list` is looked for.\n@param char_list This parameter is case sensitive.\n@return (PHP 5)\n
strpos strpos(string $haystack, mixed $needle [, int $offset=0]) [int]\nFind position of first occurrence of a string. Returns the numeric position\nof the first occurrence of `needle` in the `haystack` string. Unlike the\nstrrpos() before PHP 5, this function can take a full string as the `needle`\nparameter and the entire string will be used.\n@param haystack The string to search in\n@param needle If `needle` is not a string, it is converted to an integer\nand applied as the ordinal value of a character.\n@param offset The optional `offset` parameter allows you to specify which\ncharacter in `haystack` to start searching. The position returned is still\nrelative to the beginning of `haystack`.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strrpos() - Find the position of the last occurrence of a substring in\na string\n@see stripos() - Find position of first occurrence of a case-insensitive string\n@see strripos() - Find position of last occurrence of a case-insensitive\nstring in a string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n
strptime strptime(string $date, string $format) [array]\nParse a time/date generated with strftime. strptime() returns an array with the\n`date` parsed, or FALSE on error. Month and weekday names and other language\ndependent strings respect the current locale set with setlocale() (LC_TIME).\n@param date (string) The string to parse (e.g. returned from strftime()).\n@param format (string) The format used in `date` (e.g. the same as used in\nstrftime()). Note that some of the format options available to strftime() may\nnot have any effect within strptime(); the exact subset that are supported\nwill vary based on the operating system and C library in use. For more\ninformation about the format options, read the strftime() page.\n@return (PHP 5 >= 5.1.0)\n@note Note: This function is not implemented on Windows platforms.\n@note Note: Internally, this function calls the `strptime()` function\nprovided by the system&#039;s C library. This function can exhibit\nnoticeably different behaviour across different operating systems. The\nuse of date_parse_from_format(), which does not suffer from these issues,\nis recommended on PHP 5.3.0 and later.\n@note Note: `&quot;tm_sec&quot;` includes any leap seconds (currently upto\n2 a year). For more information on leap seconds, see the &raquo; Wikipedia\narticle on leap seconds.\n@note Note: Prior to PHP 5.2.0, this function could return undefined\nbehaviour. Notably, the `&quot;tm_sec&quot;`, `&quot;tm_min&quot;` and\n`&quot;tm_hour&quot;` entries would return undefined values.\n@see checkdate() - Validate a Gregorian date\n@see strftime() - Format a local time/date according to locale settings\n
strrchr strrchr(string $haystack, mixed $needle) [string]\nFind the last occurrence of a character in a string. This function returns\nthe portion of `haystack` which starts at the last occurrence of `needle`\nand goes until the end of `haystack`.\n@param haystack The string to search in\n@param needle If `needle` contains more than one character, only the first\nis used. This behavior is different from that of strstr(). If `needle`\nis not a string, it is converted to an integer and applied as the ordinal\nvalue of a character.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strstr() - Find first occurrence of a string\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n
strrev strrev(string $string) [string]\nReverse a string. Returns `string`, reversed.\n@param string The string to be reversed.\n@return (PHP 4, PHP 5)\n
strripos strripos(string $haystack, string $needle [, int $offset=0]) [int]\nFind position of last occurrence of a case-insensitive string in a string. Find\nposition of last occurrence of a case-insensitive string in a string. Unlike\nstrrpos(), strripos() is case-insensitive.\n@param haystack The string to search in\n@param needle Note that the `needle` may be a string of one or more characters.\n@param offset The `offset` parameter may be specified to begin searching an\narbitrary number of characters into the string. Negative offset values will\nstart the search at `offset` characters from the start of the string.\n@return (PHP 5)\n@see strpos() - Find position of first occurrence of a string\n@see stripos() - Find position of first occurrence of a case-insensitive string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n
strrpos strrpos(string $haystack, string $needle [, int $offset=0]) [int]\nFind the position of the last occurrence of a substring in a string. Returns\nthe numeric position of the last occurrence of `needle` in the `haystack`\nstring.\n@param haystack The string to search in.\n@param needle If `needle` is not a string, it is converted to an integer\nand applied as the ordinal value of a character. The `needle` can only be\na single character in PHP 4.\n@param offset May be specified to begin searching an arbitrary number\nof characters into the string. Negative values will stop searching at an\narbitrary point prior to the end of the string.\n@return (PHP 4, PHP 5)\n@see strpos() - Find position of first occurrence of a string\n@see strripos() - Find position of last occurrence of a case-insensitive\nstring in a string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n
strspn strspn(string $subject, string $mask [, int $start [, int $length]])\n[int]\nFinds the length of the first segment of a string consisting\n   entirely of characters contained within a given mask.. Returns the\n   length of the first group of consecutive characters from `mask` found in\n   `subject`. If `start` and `length` are omitted, then all of `subject`\n   will be examined. If they are included, then the effect will be the same\n   as calling `strspn(substr($subject, $start, $length), $mask)` (see substr\n   for more information).\n@param subject The string to examine.\n@param mask The list of allowable characters to include in counted segments.\n@param start The position in `subject` to start searching. If `start` is\ngiven and is non-negative, then strspn() will begin examining `subject` at the\n`start`&#039;th position. For instance, in the string &#039;`abcdef`&#039;,\nthe character at position `0` is &#039;`a`&#039;, the character at position\n`2` is &#039;`c`&#039;, and so forth. If `start` is given and is negative,\nthen strspn() will begin examining `subject` at the `start`&#039;th position\nfrom the end of `subject`.\n@param length The length of the segment from `subject` to examine. If `length`\nis given and is non-negative, then `subject` will be examined for `length`\ncharacters after the starting position. If `length`is given and is negative,\nthen `subject` will be examined from the starting position up to `length`\ncharacters from the end of `subject`.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strcspn() - Find length of initial segment not matching mask\n
strstr strstr(string $haystack, mixed $needle [, bool $before_needle=false])\n[string]\nFind first occurrence of a string. Returns part of `haystack` string from the\nfirst occurrence of `needle` to the end of `haystack`. Note: This function is\ncase-sensitive. For case-insensitive searches, use stristr(). Note: If you\nonly want to determine if a particular `needle` occurs within `haystack`,\nuse the faster and less memory intensive function strpos() instead.\n@param haystack The input string.\n@param needle If `needle` is not a string, it is converted to an integer\nand applied as the ordinal value of a character.\n@param before_needle If TRUE, strstr() returns the part of the `haystack`\nbefore the first occurrence of the `needle`.\n@return (PHP 4, PHP 5)\n@see preg_match() - Perform a regular expression match\n@see stristr() - Case-insensitive strstr\n@see strpos() - Find position of first occurrence of a string\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr() - Return part of a string\n
strtok strtok(string $str, string $token) [string]\nTokenize string. strtok() splits a string (`str`) into smaller strings\n(tokens), with each token being delimited by any character from `token`. That\nis, if you have a string like &quot;This is an example string&quot; you\ncould tokenize this string into its individual words by using the space\ncharacter as the token. Note that only the first call to strtok uses the\nstring argument. Every subsequent call to strtok only needs the token to\nuse, as it keeps track of where it is in the current string. To start over,\nor to tokenize a new string you simply call strtok with the string argument\nagain to initialize it. Note that you may put multiple tokens in the token\nparameter. The string will be tokenized when any one of the characters in\nthe argument are found.\n@param str The string being split up into smaller strings (tokens).\n@param token The delimiter used when splitting up `str`.\n@return (PHP 4, PHP 5)\n@see split() - Split string into array by regular expression\n@see explode() - Split a string by string\n
strtolower strtolower(string $str) [string]\nMake a string lowercase. Returns `string` with all alphabetic characters\nconverted to lowercase. Note that &#039;alphabetic&#039; is determined by\nthe current locale. This means that in i.e. the default &quot;C&quot; locale,\ncharacters such as umlaut-A (Ä) will not be converted.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strtoupper() - Make a string uppercase\n@see ucfirst() - Make a string's first character uppercase\n@see ucwords() - Uppercase the first character of each word in a string\n@see mb_strtolower() - Make a string lowercase\n
strtotime strtotime(string $time [, int $now]) [int]\nParse about any English textual datetime description into a Unix timestamp.\n@param time A date/time string. Valid formats are explained in Date and\nTime Formats.\n@param now The timestamp which is used as a base for the calculation of\nrelative dates.\n@return (PHP 4, PHP 5)\n@note Note: If the number of the year is specified in a two digit format,\nthe values between 00-69 are mapped to 2000-2069 and 70-99 to 1970-1999. See\nthe notes below for possible differences on 32bit systems (possible dates\nmight end on 2038-01-19 03:14:07).\n@note Note: The valid range of a timestamp is typically from Fri, 13 Dec\n1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are the dates\nthat correspond to the minimum and maximum values for a 32-bit signed\ninteger.) Additionally, not all platforms support negative timestamps,\ntherefore your date range may be limited to no earlier than the Unix\nepoch. This means that e.g. dates prior to Jan 1, 1970 will not work on\nWindows, some Linux distributions, and a few other operating systems. PHP\n5.1.0 and newer versions overcome this limitation though.\n@note Note: Dates in the `m/d/y` or `d-m-y` formats are disambiguated by\nlooking at the separator between the various components: if the separator\nis a slash (`/`), then the American `m/d/y` is assumed; whereas if the\nseparator is a dash (`-`) or a dot (`.`), then the European `d-m-y` format\nis assumed. To avoid potential ambiguity, it&#039;s best to use ISO 8601\n(`YYYY-MM-DD`) dates or DateTime::createFromFormat() when possible.\n@see DateTime::createFromFormat() - Returns new DateTime object formatted\naccording to the specified format\n@see checkdate() - Validate a Gregorian date\n@see strptime() - Parse a time/date generated with strftime\n
strtoupper strtoupper(string $string) [string]\nMake a string uppercase. Returns `string` with all alphabetic characters\nconverted to uppercase. Note that &#039;alphabetic&#039; is determined by the\ncurrent locale. For instance, in the default &quot;C&quot; locale characters\nsuch as umlaut-a (ä) will not be converted.\n@param string The input string.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see strtolower() - Make a string lowercase\n@see ucfirst() - Make a string's first character uppercase\n@see ucwords() - Uppercase the first character of each word in a string\n@see mb_strtoupper() - Make a string uppercase\n
strtr strtr(string $str, string $from, string $to) [string]\nTranslate characters or replace substrings. If given three arguments, this\nfunction returns a copy of `str` where all occurrences of each (single-byte)\ncharacter in `from` have been translated to the corresponding character\nin `to`, i.e., every occurrence of `$from[$n]` has been replaced with\n`$to[$n]`, where `$n` is a valid offset in both arguments. If `from`\nand `to` have different lengths, the extra characters in the longer of\nthe two are ignored. The length of `str` will be the same as the return\nvalue&#039;s. If given two arguments, the second should be an array in the\nform `array(&#039;from&#039; => &#039;to&#039;, ...)`. The return value is a\nstring where all the occurrences of the array keys have been replaced by the\ncorresponding values. The longest keys will be tried first. Once a substring\nhas been replaced, its new value will not be searched again. In this case,\nthe keys and the values may have any length, provided that there is no empty\nkey; additionaly, the length of the return value may differ from that of\n`str`. However, this function will be the most efficient when all the keys\nhave the same size.\n@param str The string being translated.\n@param from The string being translated to `to`.\n@param to The string replacing `from`.\n@param replace_pairs The `replace_pairs` parameter may be used instead\nof `to` and `from`, in which case it&#039;s an array in the form\n`array(&#039;from&#039; => &#039;to&#039;, ...)`.\n@return (PHP 4, PHP 5)\n@see str_replace() - Replace all occurrences of the search string with the\nreplacement string\n@see preg_replace() - Perform a regular expression search and replace\n
strval strval(mixed $var) [string]\nGet string value of a variable.\n@param var The variable that is being converted to a string. `var` may be any\nscalar type or an object that implements the __toString method. You cannot use\nstrval() on arrays or on objects that do not implement the __toString method.\n@return (PHP 4, PHP 5)\n@see floatval() - Get float value of a variable\n@see intval() - Get the integer value of a variable\n@see settype() - Set the type of a variable\n@see sprintf() - Return a formatted string\n@see number_format() - Format a number with grouped thousands\n@see Type juggling\n@see __toString\n
substr_compare substr_compare(string $main_str, string $str, int $offset [,\nint $length [, bool $case_insensitivity=false]]) [int]\nBinary safe comparison of two strings from an offset, up to length\ncharacters. substr_compare() compares `main_str` from position `offset` with\n`str` up to `length` characters.\n@param main_str The main string being compared.\n@param str The secondary string being compared.\n@param offset The start position for the comparison. If negative, it starts\ncounting from the end of the string.\n@param length The length of the comparison. The default value is the largest of\nthe length of the `str` compared to the length of `main_str` less the `offset`.\n@param case_insensitivity If `case_insensitivity` is TRUE, comparison is\ncase insensitive.\n@return (PHP 5)\n
substr_count substr_count(string $haystack, string $needle [, int $offset=0\n[, int $length]]) [int]\nCount the number of substring occurrences. substr_count() returns the number of\ntimes the `needle` substring occurs in the `haystack` string. Please note that\n`needle` is case sensitive. Note: This function doesn&#039;t count overlapped\nsubstrings. See the example below!\n@param haystack The string to search in\n@param needle The substring to search for\n@param offset The offset where to start counting\n@param length The maximum length after the specified offset to search for\nthe substring. It outputs a warning if the offset plus the length is greater\nthan the `haystack` length.\n@return (PHP 4, PHP 5)\n@see count_chars() - Return information about characters used in a string\n@see strpos() - Find position of first occurrence of a string\n@see substr() - Return part of a string\n@see strstr() - Find first occurrence of a string\n
substr_replace substr_replace(mixed $string, string $replacement, int $start\n[, int $length]) [mixed]\nReplace text within a portion of a string. substr_replace() replaces a copy\nof `string` delimited by the `start` and (optionally) `length` parameters\nwith the string given in `replacement`.\n@param string The input string.\n@param replacement The replacement string.\n@param start If `start` is positive, the replacing will begin at the\n`start`&#039;th offset into `string`. If `start` is negative, the replacing\nwill begin at the `start`&#039;th character from the end of `string`.\n@param length If given and is positive, it represents the length of\nthe portion of `string` which is to be replaced. If it is negative, it\nrepresents the number of characters from the end of `string` at which to\nstop replacing. If it is not given, then it will default to strlen( `string`\n); i.e. end the replacing at the end of `string`. Of course, if `length`\nis zero then this function will have the effect of inserting `replacement`\ninto `string` at the given `start` offset.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see str_replace() - Replace all occurrences of the search string with the\nreplacement string\n@see substr() - Return part of a string\n@see String access and modification by character\n
substr substr(string $string, int $start [, int $length]) [string]\nReturn part of a string. Returns the portion of `string` specified by the\n`start` and `length` parameters.\n@param string The input string. Must be one character or longer.\n@return (PHP 4, PHP 5)\n@see strrchr() - Find the last occurrence of a character in a string\n@see substr_replace() - Replace text within a portion of a string\n@see preg_match() - Perform a regular expression match\n@see trim() - Strip whitespace (or other characters) from the beginning and\nend of a string\n@see mb_substr() - Get part of string\n@see wordwrap() - Wraps a string to a given number of characters\n@see String access and modification by character\n
svn_add svn_add(string $path [, bool $recursive=true [, bool $force=false]])\n[bool]\nSchedules the addition of an item in a working directory. Adds the file,\ndirectory or symbolic link at `path` to the working directory. The item\nwill be added to the repository the next time you call svn_commit() on the\nworking copy.\n@param path Path of item to add. Note: Relative paths will be resolved\nas if the current working directory was the one that contains the PHP\nbinary. To use the calling script&#039;s working directory, use realpath()\nor dirname(__FILE__).\n@param recursive If item is directory, whether or not to recursively add\nall of its contents. Default is TRUE\n@param force If true, Subversion will recurse into already versioned\ndirectories in order to add unversioned files that may be hiding in those\ndirectories. Default is FALSE\n@return (PECL svn >= 0.1.0)\n@see &raquo; SVN documentation on svn add\n
svn_auth_get_parameter svn_auth_get_parameter(string $key) [string]\nRetrieves authentication parameter. Retrieves authentication parameter at\n`key`. For a list of valid keys and their meanings, consult the authentication\nconstants list.\n@param key String key name. Use the authentication constants defined by this\nextension to specify a key.\n@return (PECL svn >= 0.1.0)\n@see svn_auth_set_parameter() - Sets an authentication parameter\n@see Authentication constants\n
svn_auth_set_parameter svn_auth_set_parameter(string $key, string $value)\n[void]\nSets an authentication parameter. Sets authentication parameter at `key`\nto `value`. For a list of valid keys and their meanings, consult the\nauthentication constants list.\n@param key String key name. Use the authentication constants defined by this\nextension to specify a key.\n@param value String value to set to parameter at key. Format of value varies\nwith the parameter.\n@return (PECL svn >= 0.1.0)\n@see svn_auth_get_parameter() - Retrieves authentication parameter\n@see Authentication constants\n
svn_blame svn_blame(string $repository_url [, int\n$revision_no=SVN_REVISION_HEAD]) [array]\nGet the SVN blame for a file. Get the SVN blame of a file from a repository\nURL.\n@param repository_url The repository URL.\n@param revision_no The revision number.\n@return (PECL svn >= 0.3.0)\n@see svn_diff() - Recursively diffs two paths\n@see svn_logs()\n@see svn_status() - Returns the status of working copy files and directories\n
svn_cat svn_cat(string $repos_url [, int $revision_no]) [string]\nReturns the contents of a file in a repository. Returns the contents of the\nURL `repos_url` to a file in the repository, optionally at revision number\n`revision_no`.\n@param repos_url String URL path to item in a repository.\n@param revision_no Integer revision number of item to retrieve, default is\nthe HEAD revision.\n@return (PECL svn >= 0.1.0)\n@see svn_list()\n@see &raquo; SVN documentation on svn cat\n
svn_checkout svn_checkout(string $repos, string $targetpath [, int $revision\n[, int $flags=0]]) [bool]\nChecks out a working copy from the repository. Checks out a working copy\nfrom the repository at `repos` to `targetpath` at revision `revision`.\n@param repos String URL path to directory in repository to check out.\n@param targetpath String local path to directory to check out in to Note:\nRelative paths will be resolved as if the current working directory was the\none that contains the PHP binary. To use the calling script&#039;s working\ndirectory, use realpath() or dirname(__FILE__).\n@param revision Integer revision number of repository to check out. Default\nis HEAD, the most recent revision.\n@param flags Any combination of SVN_NON_RECURSIVE and SVN_IGNORE_EXTERNALS.\n@return (PECL svn >= 0.1.0)\n@see svn_add() - Schedules the addition of an item in a working directory\n@see svn_commit() - Sends changes from the local working copy to the repository\n@see svn_status() - Returns the status of working copy files and directories\n@see svn_update() - Update working copy\n@see &raquo; SVN documentation on svn checkout\n
svn_cleanup svn_cleanup(string $workingdir) [bool]\nRecursively cleanup a working copy directory, finishing incomplete operations\nand removing locks. Recursively cleanup working copy directory `workingdir`,\nfinishing any incomplete operations and removing working copy locks. Use\nwhen a working copy is in limbo and needs to be usable again.\n@param workingdir String path to local working directory to cleanup Note:\nRelative paths will be resolved as if the current working directory was the\none that contains the PHP binary. To use the calling script&#039;s working\ndirectory, use realpath() or dirname(__FILE__).\n@return (PECL svn >= 0.1.0)\n@see update()\n@see &raquo; SVN documentation on svn cleanup\n
svn_client_version svn_client_version(void) [string]\nReturns the version of the SVN client libraries. Returns the version of the\nSVN client libraries\n@return (PECL svn >= 0.1.0)\n
svn_commit svn_commit(string $log, array $targets [, bool $dontrecurse])\n[array]\nSends changes from the local working copy to the repository. Commits changes\nmade in the local working copy files enumerated in the `targets` array to the\nrepository, with the log message `log`. Directories in the `targets` array\nwill be recursively committed unless `dontrecurse` is set to true. Note:\nThis function does not have any parameters for specifying authentication,\nso a username and password must be set using svn_auth_set_parameter()\n@param log String log text to commit\n@return (PECL svn >= 0.1.0)\n@see svn_auth_set_parameter() - Sets an authentication parameter\n@see &raquo; SVN documentation on svn commit\n
svn_delete svn_delete(string $path [, bool $force=false]) [bool]\nDelete items from a working copy or repository.. Deletes the file, directory\nor symbolic link at `path` from the working directory. The item will be deleted\nfrom the repository the next time you call svn_commit() on the working copy.\n@param path Path of item to delete. Note: Relative paths will be resolved\nas if the current working directory was the one that contains the PHP\nbinary. To use the calling script&#039;s working directory, use realpath()\nor dirname(__FILE__).\n@param force If TRUE, the file will be deleted even if it has local\nmodifications. Otherwise, local modifications will result in a failure. Default\nis FALSE\n@return (PECL svn >= 0.4.0)\n@see &raquo; SVN documentation on svn delete\n
svn_diff svn_diff(string $path1, int $rev1, string $path2, int $rev2) [array]\nRecursively diffs two paths. Recursively diffs two paths, `path1` and\n`path2`. Note: This is not a general-purpose diff utility. Only local files\nthat are versioned may be diffed: other files will fail.\n@return (PECL svn >= 0.1.0)\n@see &raquo; SVN documentation on svn diff\n
svn_export svn_export(string $frompath, string $topath [, bool\n$working_copy=true [, int $revision_no=-1]]) [bool]\nExport the contents of a SVN directory. Export the contents of either a\nworking copy or repository into a &#039;clean&#039; directory.\n@param frompath The path to the current repository.\n@param topath The path to the new repository.\n@param working_copy If TRUE, it will export uncommitted files from the\nworking copy.\n@return (PECL svn >= 0.3.0)\n@see svn_import() - Imports an unversioned path into a repository\n
svn_fs_abort_txn svn_fs_abort_txn(resource $txn) [bool]\nAbort a transaction, returns true if everything is okay, false otherwise.\n
svn_fs_apply_text svn_fs_apply_text(resource $root, string $path) [resource]\nCreates and returns a stream that will be used to replace.\n
svn_fs_begin_txn2 svn_fs_begin_txn2(resource $repos, int $rev) [resource]\nCreate a new transaction.\n
svn_fs_change_node_prop svn_fs_change_node_prop(resource $root, string $path,\nstring $name, string $value) [bool]\nReturn true if everything is ok, false otherwise.\n
svn_fs_check_path svn_fs_check_path(resource $fsroot, string $path) [int]\nDetermines what kind of item lives at path in a given repository fsroot.\n
svn_fs_contents_changed svn_fs_contents_changed(resource $root1, string\n$path1, resource $root2, string $path2) [bool]\nReturn true if content is different, false otherwise.\n
ssdeep_fuzzy_hash ssdeep_fuzzy_hash(string $to_hash) [string]\nCreate a fuzzy hash from a string. ssdeep_fuzzy_hash() calculates the hash\nof `to_hash` using &raquo; context-triggered piecewise hashing, and returns\nthat hash.\n@param to_hash The input string.\n@return (PECL ssdeep >= 1.0.0)\n
ssh2_auth_hostbased_file ssh2_auth_hostbased_file(resource $session, string\n$username, string $hostname, string $pubkeyfile, string $privkeyfile [,\nstring $passphrase [, string $local_username]]) [bool]\nAuthenticate using a public hostkey. Authenticate using a public hostkey\nread from a file.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param username\n@param hostname\n@param pubkeyfile\n@param privkeyfile\n@param passphrase If `privkeyfile` is encrypted (which it should be), the\npassphrase must be provided.\n@param local_username If `local_username` is omitted, then the value for\n`username` will be used for it.\n@return (PECL ssh2 >= 0.9.0)\n@note Note: ssh2_auth_hostbased_file() requires libssh2 >= 0.7 and PHP/SSH2\n>= 0.7\n
ssh2_auth_none ssh2_auth_none(resource $session, string $username) [mixed]\nAuthenticate as &quot;none&quot;. Attempt &quot;none&quot; authentication\nwhich usually will (and should) fail. As part of the failure, this function\nwill return an array of accepted authentication methods.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param username Remote user name.\n@return (PECL ssh2 >= 0.9.0)\n
ssh2_auth_password ssh2_auth_password(resource $session, string $username,\nstring $password) [bool]\nAuthenticate over SSH using a plain password. Authenticate over SSH using\na plain password\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param username Remote user name.\n@param password Password for `username`\n@return (PECL ssh2 >= 0.9.0)\n
ssh2_auth_pubkey_file ssh2_auth_pubkey_file(resource $session, string\n$username, string $pubkeyfile, string $privkeyfile [, string $passphrase])\n[bool]\nAuthenticate using a public key. Authenticate using a public key read from\na file.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param username\n@param pubkeyfile\n@param privkeyfile\n@param passphrase If `privkeyfile` is encrypted (which it should be), the\n`passphrase` must be provided.\n@return (PECL ssh2 >= 0.9.0)\n
ssh2_connect ssh2_connect(string $host [, int $port=22 [, array $methods [,\narray $callbacks]]]) [resource]\nConnect to an SSH server. Establish a connection to a remote SSH server. Once\nconnected, the client should verify the server&#039;s hostkey using\nssh2_fingerprint(), then authenticate using either password or public key.\n@param host\n@param port\n@param methods `methods` may be an associative array with up to four\nparameters as described below. `methods` may be an associative array with\nany or all of the following parameters. Index Meaning Supported Values*\nkex List of key exchange methods to advertise, comma separated in order of\npreference. `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`,\nand `diffie-hellman-group-exchange-sha1` hostkey List of hostkey methods to\nadvertise, come separated in order of preference. `ssh-rsa` and `ssh-dss`\nclient_to_server Associative array containing crypt, compression, and message\nauthentication code (MAC) method preferences for messages sent from client\nto server. &nbsp; server_to_client Associative array containing crypt,\ncompression, and message authentication code (MAC) method preferences for\nmessages sent from server to client. &nbsp; * - Supported Values are dependent\non methods supported by underlying library. See &raquo; libssh2 documentation\nfor additional information. `client_to_server` and `server_to_client` may\nbe an associative array with any or all of the following parameters. Index\nMeaning Supported Values* crypt List of crypto methods to advertise, comma\nseparated in order of preference. `rijndael-cbc@lysator.liu.se`, `aes256-cbc`,\n`aes192-cbc`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`,\n`arcfour`, and `none**` comp List of compression methods to advertise,\ncomma separated in order of preference. `zlib` and `none` mac List of MAC\nmethods to advertise, come separated in order of preference. `hmac-sha1`,\n`hmac-sha1-96`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, and `none**`\nNote: Crypt and MAC method &quot;`none`&quot; For security reasons, `none`\nis disabled by the underlying &raquo; libssh2 library unless explicitly\nenabled during build time by using the appropriate ./configure options. See\ndocumentation for the underlying library for more information.\n@param callbacks `callbacks` may be an associative array with any or all of\nthe following parameters. Callbacks parameters Index Meaning Prototype ignore\nName of function to call when an SSH2_MSG_IGNORE packet is received void\nignore_cb($message) debug Name of function to call when an SSH2_MSG_DEBUG\npacket is received void debug_cb($message, $language, $always_display)\nmacerror Name of function to call when a packet is received but the message\nauthentication code failed. If the callback returns TRUE, the mismatch will be\nignored, otherwise the connection will be terminated. bool macerror_cb($packet)\ndisconnect Name of function to call when an SSH2_MSG_DISCONNECT packet is\nreceived void disconnect_cb($reason, $message, $language)\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_fingerprint() - Retrieve fingerprint of remote server\n@see ssh2_auth_none() - Authenticate as &quot;none&quot;\n@see ssh2_auth_password() - Authenticate over SSH using a plain password\n@see ssh2_auth_pubkey_file() - Authenticate using a public key\n
ssh2_exec ssh2_exec(resource $session, string $command [, string\n$pty [, array $env [, int $width=80 [, int $height=25 [, int\n$width_height_type=SSH2_TERM_UNIT_CHARS]]]]]) [resource]\nExecute a command on a remote server. Execute a command at the remote end\nand allocate a channel for it.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param command\n@param pty\n@param env `env` may be passed as an associative array of name/value pairs\nto set in the target environment.\n@param width Width of the virtual terminal.\n@param height Height of the virtual terminal.\n@param width_height_type `width_height_type` should be one of\nSSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_connect() - Connect to an SSH server\n@see ssh2_shell() - Request an interactive shell\n@see ssh2_tunnel() - Open a tunnel through a remote server\n
ssh2_fetch_stream ssh2_fetch_stream(resource $channel, int $streamid)\n[resource]\nFetch an extended data stream. Fetches an alternate substream associated with\nan SSH2 channel stream. The SSH2 protocol currently defines only one substream,\nSTDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1).\n@param channel\n@param streamid An SSH2 channel stream.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_shell() - Request an interactive shell\n@see ssh2_exec() - Execute a command on a remote server\n@see ssh2_connect() - Connect to an SSH server\n
ssh2_fingerprint ssh2_fingerprint(resource $session [, int\n$flags=SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX]) [string]\nRetrieve fingerprint of remote server. Returns a server hostkey hash from\nan active session.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param flags `flags` may be either of SSH2_FINGERPRINT_MD5 or\nSSH2_FINGERPRINT_SHA1 logically ORed with SSH2_FINGERPRINT_HEX or\nSSH2_FINGERPRINT_RAW.\n@return (PECL ssh2 >= 0.9.0)\n
ssh2_methods_negotiated ssh2_methods_negotiated(resource $session) [array]\nReturn list of negotiated methods. Returns list of negotiated methods.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_connect() - Connect to an SSH server\n
ssh2_publickey_add ssh2_publickey_add(resource $pkey, string $algoname,\nstring $blob [, bool $overwrite=false [, array $attributes]]) [bool]\nAdd an authorized publickey.\n@param pkey Publickey Subsystem resource created by ssh2_publickey_init().\n@param algoname Publickey algorithm (e.g.): ssh-dss, ssh-rsa\n@param blob Publickey blob as raw binary data\n@param overwrite If the specified key already exists, should it be overwritten?\n@param attributes Associative array of attributes to assign to this public\nkey. Refer to ietf-secsh-publickey-subsystem for a list of supported\nattributes. To mark an attribute as mandatory, precede its name with an\nasterisk. If the server is unable to support an attribute marked mandatory,\nit will abort the add process.\n@return (PECL ssh2 >= 0.10)\n@see ssh2_publickey_init() - Initialize Publickey subsystem\n@see ssh2_publickey_remove() - Remove an authorized publickey\n@see ssh2_publickey_list() - List currently authorized publickeys\n
ssh2_publickey_init ssh2_publickey_init(resource $session) [resource]\nInitialize Publickey subsystem. Request the Publickey subsystem from an already\nconnected SSH2 server. The publickey subsystem allows an already connected\nand authenticated client to manage the list of authorized public keys stored\non the target server in an implementation agnostic manner. If the remote\nserver does not support the publickey subsystem, the ssh2_publickey_init()\nfunction will return FALSE.\n@param session\n@return (PECL ssh2 >= 0.10)\n@note Note: The public key subsystem is used for managing public keys on\na server to which the client is already authenticated. To authenticate to a\nremote system using public key authentication, use the ssh2_auth_pubkey_file()\nfunction instead.\n@see ssh2_publickey_add() - Add an authorized publickey\n@see ssh2_publickey_remove() - Remove an authorized publickey\n@see ssh2_publickey_list() - List currently authorized publickeys\n
ssh2_publickey_list ssh2_publickey_list(resource $pkey) [array]\nList currently authorized publickeys. List currently authorized publickeys.\n@param pkey Publickey Subsystem resource\n@return (PECL ssh2 >= 0.10)\n@note Note: The public key subsystem is used for managing public keys on\na server to which the client is already authenticated. To authenticate to a\nremote system using public key authentication, use the ssh2_auth_pubkey_file()\nfunction instead.\n@see ssh2_publickey_init() - Initialize Publickey subsystem\n@see ssh2_publickey_add() - Add an authorized publickey\n@see ssh2_publickey_remove() - Remove an authorized publickey\n
ssh2_publickey_remove ssh2_publickey_remove(resource $pkey, string $algoname,\nstring $blob) [bool]\nRemove an authorized publickey. Removes an authorized publickey.\n@param pkey Publickey Subsystem Resource\n@param algoname Publickey algorithm (e.g.): ssh-dss, ssh-rsa\n@param blob Publickey blob as raw binary data\n@return (PECL ssh2 >= 0.10)\n@note Note: The public key subsystem is used for managing public keys on\na server to which the client is already authenticated. To authenticate to a\nremote system using public key authentication, use the ssh2_auth_pubkey_file()\nfunction instead.\n@see ssh2_publickey_init() - Initialize Publickey subsystem\n@see ssh2_publickey_add() - Add an authorized publickey\n@see ssh2_publickey_list() - List currently authorized publickeys\n
ssh2_scp_recv ssh2_scp_recv(resource $session, string $remote_file, string\n$local_file) [bool]\nRequest a file via SCP. Copy a file from the remote server to the local\nfilesystem using the SCP protocol.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param remote_file Path to the remote file.\n@param local_file Path to the local file.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_scp_send() - Send a file via SCP\n@see copy() - Copies file\n
ssh2_scp_send ssh2_scp_send(resource $session, string $local_file, string\n$remote_file [, int $create_mode=0644]) [bool]\nSend a file via SCP. Copy a file from the local filesystem to the remote\nserver using the SCP protocol.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param local_file Path to the local file.\n@param remote_file Path to the remote file.\n@param create_mode The file will be created with the mode specified by\n`create_mode`.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_scp_recv() - Request a file via SCP\n@see copy() - Copies file\n
ssh2_sftp_lstat ssh2_sftp_lstat(resource $sftp, string $path) [array]\nStat a symbolic link. Stats a symbolic link on the remote filesystem without\nfollowing the link. This function is similar to using the lstat() function\nwith the ssh2.sftp:// wrapper in PHP5 and returns the same values.\n@param sftp\n@param path Path to the remote symbolic link.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_sftp_stat() - Stat a file on a remote filesystem\n@see lstat() - Gives information about a file or symbolic link\n@see stat() - Gives information about a file\n
ssh2_sftp_mkdir ssh2_sftp_mkdir(resource $sftp, string $dirname [, int\n$mode=0777 [, bool $recursive=false]]) [bool]\nCreate a directory. Creates a directory on the remote file server with\npermissions set to `mode`. This function is similar to using mkdir() with\nthe ssh2.sftp:// wrapper.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param dirname Path of the new directory.\n@param mode Permissions on the new directory.\n@param recursive If `recursive` is TRUE any parent directories required for\n`dirname` will be automatically created as well.\n@return (PECL ssh2 >= 0.9.0)\n@see mkdir() - Makes directory\n@see ssh2_sftp_rmdir() - Remove a directory\n
ssh2_sftp_readlink ssh2_sftp_readlink(resource $sftp, string $link) [string]\nReturn the target of a symbolic link. Returns the target of a symbolic link.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param link Path of the symbolic link.\n@return (PECL ssh2 >= 0.9.0)\n@see readlink() - Returns the target of a symbolic link\n@see ssh2_sftp_symlink() - Create a symlink\n
ssh2_sftp_realpath ssh2_sftp_realpath(resource $sftp, string $filename)\n[string]\nResolve the realpath of a provided path string. Translates `filename` into\nthe effective real path on the remote filesystem.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param filename\n@return (PECL ssh2 >= 0.9.0)\n@see realpath() - Returns canonicalized absolute pathname\n@see ssh2_sftp_symlink() - Create a symlink\n@see ssh2_sftp_readlink() - Return the target of a symbolic link\n
ssh2_sftp_rename ssh2_sftp_rename(resource $sftp, string $from, string $to)\n[bool]\nRename a remote file. Renames a file on the remote filesystem.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param from The current file that is being renamed.\n@param to The new file name that replaces `from`.\n@return (PECL ssh2 >= 0.9.0)\n@see rename() - Renames a file or directory\n
ssh2_sftp_rmdir ssh2_sftp_rmdir(resource $sftp, string $dirname) [bool]\nRemove a directory. Removes a directory from the remote file server. This\nfunction is similar to using rmdir() with the ssh2.sftp:// wrapper.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param dirname\n@return (PECL ssh2 >= 0.9.0)\n@see rmdir() - Removes directory\n@see ssh2_sftp_mkdir() - Create a directory\n
ssh2_sftp_stat ssh2_sftp_stat(resource $sftp, string $path) [array]\nStat a file on a remote filesystem. Stats a file on the remote filesystem\nfollowing any symbolic links. This function is similar to using the stat()\nfunction with the ssh2.sftp:// wrapper in PHP5 and returns the same values.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param path\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_sftp_lstat() - Stat a symbolic link\n@see lstat() - Gives information about a file or symbolic link\n@see stat() - Gives information about a file\n
ssh2_sftp_symlink ssh2_sftp_symlink(resource $sftp, string $target, string\n$link) [bool]\nCreate a symlink. Creates a symbolic link named `link` on the remote filesystem\npointing to `target`.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param target Target of the symbolic link.\n@param link\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_sftp_readlink() - Return the target of a symbolic link\n@see symlink() - Creates a symbolic link\n
ssh2_sftp_unlink ssh2_sftp_unlink(resource $sftp, string $filename) [bool]\nDelete a file. Deletes a file on the remote filesystem.\n@param sftp An SSH2 SFTP resource opened by ssh2_sftp().\n@param filename\n@return (PECL ssh2 >= 0.9.0)\n@see unlink() - Deletes a file\n
ssh2_sftp ssh2_sftp(resource $session) [resource]\nInitialize SFTP subsystem. Request the SFTP subsystem from an already\nconnected SSH2 server.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_scp_recv() - Request a file via SCP\n@see ssh2_scp_send() - Send a file via SCP\n
ssh2_shell ssh2_shell(resource $session [, string\n$term_type=&quot;vanilla&quot; [, array $env [, int $width=80 [, int $height=25\n[, int $width_height_type=SSH2_TERM_UNIT_CHARS]]]]]) [resource]\nRequest an interactive shell. Open a shell at the remote end and allocate\na stream for it.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param term_type `term_type` should correspond to one of the entries in the\ntarget system&#039;s `/etc/termcap` file.\n@param env `env` may be passed as an associative array of name/value pairs\nto set in the target environment.\n@param width Width of the virtual terminal.\n@param height Height of the virtual terminal.\n@param width_height_type `width_height_type` should be one of\nSSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_exec() - Execute a command on a remote server\n@see ssh2_tunnel() - Open a tunnel through a remote server\n@see ssh2_fetch_stream() - Fetch an extended data stream\n
ssh2_tunnel ssh2_tunnel(resource $session, string $host, int $port) [resource]\nOpen a tunnel through a remote server. Open a socket stream to an arbitrary\nhost/port by way of the currently connected SSH server.\n@param session An SSH connection link identifier, obtained from a call to\nssh2_connect().\n@param host\n@param port\n@return (PECL ssh2 >= 0.9.0)\n@see ssh2_connect() - Connect to an SSH server\n@see fsockopen() - Open Internet or Unix domain socket connection\n
stat stat(string $filename) [array]\nGives information about a file. Gathers the statistics of the file named by\n`filename`. If `filename` is a symbolic link, statistics are from the file\nitself, not the symlink. lstat() is identical to stat() except it would\ninstead be based off the symlinks status.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: Note that time resolution may differ from one file system\nto another.\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see lstat() - Gives information about a file or symbolic link\n@see fstat() - Gets information about a file using an open file pointer\n@see filemtime() - Gets file modification time\n@see filegroup() - Gets file group\n
stats_absolute_deviation stats_absolute_deviation(array $a) [float]\nReturns the absolute deviation of an array of values.\n@param a\n@return (PECL stats >= 1.0.0)\n
stats_cdf_beta stats_cdf_beta(float $par1, float $par2, float $par3, int\n$which) [float]\nCDF function for BETA Distribution. Calculates any one parameter of the beta\ndistribution given values for the others.. Method Cumulative distribution\nfunction (P) is calculated directly by code associated with the following\nreference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit\nComputation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18\n(1993), 360-373. Computation of other parameters involve a search for a value\nthat produces the desired value of P. The search relies on the monotonicity of\nP with the other parameter. Note The beta density is proportional to t^(A-1)\n* (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square\ndistribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P +\nQ = 1.0. X -- Upper limit of integration of beta density. Input range:\n[0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1]\nX + Y = 1.0. A -- The first parameter of the beta density. Input range:\n(0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of\nthe beta density. Input range: (0, +infinity). Search range: [1D-100,1D100]\nSTATUS -- 0 if calculation completed correctly -I if input parameter number\nI is out of range 1 if answer appears to be lower than lowest search bound\n2 if answer appears to be higher than greatest search bound 3 if P + Q\n.ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded\nby parameter number I if STATUS is negative. Lower search bound if STATUS\nis 1. Upper search bound if STATUS is 2.\n@param par1\n@param par2\n@param par3\n@param which Integer indicating which of the next four argument values is to\nbe calculated from the others. Legal range: 1..4 which = 1 : Calculate P and\nQ from X,Y,A and B which = 2 : Calculate X and Y from P,Q,A and B which =\n3 : Calculate A from P,Q,X,Y and B which = 4 : Calculate B from P,Q,X,Y and A\n@return (PECL stats >= 1.0.0)\n
stats_cdf_binomial stats_cdf_binomial(float $par1, float $par2, float $par3,\nint $which) [float]\nCalculates any one parameter of the binomial distribution given values for\nthe others..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_cauchy stats_cdf_cauchy(float $par1, float $par2, float $par3,\nint $which) [float]\nNot documented.\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_chisquare stats_cdf_chisquare(float $par1, float $par2, int $which)\n[float]\nCalculates any one parameter of the chi-square distribution given values\nfor the others..\n@param par1\n@param par2\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_exponential stats_cdf_exponential(float $par1, float $par2, int\n$which) [float]\nNot documented.\n@param par1\n@param par2\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_f stats_cdf_f(float $par1, float $par2, float $par3, int $which)\n[float]\nCalculates any one parameter of the F distribution given values for the\nothers..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_gamma stats_cdf_gamma(float $par1, float $par2, float $par3,\nint $which) [float]\nCalculates any one parameter of the gamma distribution given values for\nthe others..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_laplace stats_cdf_laplace(float $par1, float $par2, float $par3,\nint $which) [float]\nNot documented.\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_logistic stats_cdf_logistic(float $par1, float $par2, float $par3,\nint $which) [float]\nNot documented.\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_negative_binomial stats_cdf_negative_binomial(float $par1, float\n$par2, float $par3, int $which) [float]\nCalculates any one parameter of the negative binomial distribution given\nvalues for the others..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_noncentral_chisquare stats_cdf_noncentral_chisquare(float $par1,\nfloat $par2, float $par3, int $which) [float]\nCalculates any one parameter of the non-central chi-square distribution\ngiven values for the others..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_noncentral_f stats_cdf_noncentral_f(float $par1, float $par2,\nfloat $par3, float $par4, int $which) [float]\nCalculates any one parameter of the Non-central F distribution given values\nfor the others..\n@param par1\n@param par2\n@param par3\n@param par4\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_poisson stats_cdf_poisson(float $par1, float $par2, int $which)\n[float]\nCalculates any one parameter of the Poisson distribution given values for\nthe others..\n@param par1\n@param par2\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_t stats_cdf_t(float $par1, float $par2, int $which) [float]\nCalculates any one parameter of the T distribution given values for the\nothers..\n@param par1\n@param par2\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_uniform stats_cdf_uniform(float $par1, float $par2, float $par3,\nint $which) [float]\nNot documented.\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_cdf_weibull stats_cdf_weibull(float $par1, float $par2, float $par3,\nint $which) [float]\nNot documented.\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_covariance stats_covariance(array $a, array $b) [float]\nComputes the covariance of two data sets.\n@param a\n@param b\n@return (PECL stats >= 1.0.0)\n
stats_den_uniform stats_den_uniform(float $x, float $a, float $b) [float]\nNot documented.\n@param x\n@param a\n@param b\n@return (PECL stats >= 1.0.0)\n
stats_dens_beta stats_dens_beta(float $x, float $a, float $b) [float]\nNot documented.\n@param x\n@param a\n@param b\n@return (PECL stats >= 1.0.0)\n
stats_dens_cauchy stats_dens_cauchy(float $x, float $ave, float $stdev) [float]\nNot documented.\n@param x\n@param ave\n@param stdev\n@return (PECL stats >= 1.0.0)\n
stats_dens_chisquare stats_dens_chisquare(float $x, float $dfr) [float]\nNot documented.\n@param x\n@param dfr\n@return (PECL stats >= 1.0.0)\n
stats_dens_exponential stats_dens_exponential(float $x, float $scale) [float]\nNot documented.\n@param x\n@param scale\n@return (PECL stats >= 1.0.0)\n
stats_dens_f stats_dens_f(float $x, float $dfr1, float $dfr2) [float]\nDescription.\n@param x\n@param dfr1\n@param dfr2\n@return (PECL stats >= 1.0.0)\n
stats_dens_gamma stats_dens_gamma(float $x, float $shape, float $scale) [float]\nNot documented.\n@param x\n@param shape\n@param scale\n@return (PECL stats >= 1.0.0)\n
stats_dens_laplace stats_dens_laplace(float $x, float $ave, float $stdev)\n[float]\nNot documented.\n@param x\n@param ave\n@param stdev\n@return (PECL stats >= 1.0.0)\n
stats_dens_logistic stats_dens_logistic(float $x, float $ave, float $stdev)\n[float]\nNot documented.\n@param x\n@param ave\n@param stdev\n@return (PECL stats >= 1.0.0)\n
stats_dens_negative_binomial stats_dens_negative_binomial(float $x, float $n,\nfloat $pi) [float]\nNot documented.\n@param x\n@param n\n@param pi\n@return (PECL stats >= 1.0.0)\n
stats_dens_normal stats_dens_normal(float $x, float $ave, float $stdev) [float]\nNot documented.\n@param x\n@param ave\n@param stdev\n@return (PECL stats >= 1.0.0)\n
stats_dens_pmf_binomial stats_dens_pmf_binomial(float $x, float $n, float $pi)\n[float]\nNot documented.\n@param x\n@param n\n@param pi\n@return (PECL stats >= 1.0.0)\n
stats_dens_pmf_hypergeometric stats_dens_pmf_hypergeometric(float $n1,\nfloat $n2, float $N1, float $N2) [float]\nDescription.\n@param n1\n@param n2\n@param N1\n@param N2\n@return (PECL stats >= 1.0.0)\n
stats_dens_pmf_poisson stats_dens_pmf_poisson(float $x, float $lb) [float]\nNot documented.\n@param x\n@param lb\n@return (PECL stats >= 1.0.0)\n
stats_dens_t stats_dens_t(float $x, float $dfr) [float]\nNot documented.\n@param x\n@param dfr\n@return (PECL stats >= 1.0.0)\n
stats_dens_weibull stats_dens_weibull(float $x, float $a, float $b) [float]\nNot documented.\n@param x\n@param a\n@param b\n@return (PECL stats >= 1.0.0)\n
stats_harmonic_mean stats_harmonic_mean(array $a) [number]\nReturns the harmonic mean of an array of values.\n@param a\n@return (PECL stats >= 1.0.0)\n
stats_kurtosis stats_kurtosis(array $a) [float]\nComputes the kurtosis of the data in the array.\n@param a\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_beta stats_rand_gen_beta(float $a, float $b) [float]\nGenerates beta random deviate. Returns a random deviate from the beta\ndistribution with parameters A and B. The density of the beta is x^(a-1) *\n(1-x)^(b-1) / B(a,b) for 0 &lt; x &lt;. Method R. C. H. Cheng.\n@param a\n@param b\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_chisquare stats_rand_gen_chisquare(float $df) [float]\nGenerates random deviate from the distribution of a chisquare with\n&quot;df&quot; degrees of freedom random variable..\n@param df\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_exponential stats_rand_gen_exponential(float $av) [float]\nGenerates a single random deviate from an exponential distribution with\nmean &quot;av&quot;.\n@param av\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_f stats_rand_gen_f(float $dfn, float $dfd) [float]\nGenerates a random deviate. Generates a random deviate from the F (variance\nratio) distribution with &quot;dfn&quot; degrees of freedom in the numerator\nand &quot;dfd&quot; degrees of freedom in the denominator. Method : directly\ngenerates ratio of chisquare variates.\n@param dfn\n@param dfd\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_funiform stats_rand_gen_funiform(float $low, float $high)\n[float]\nGenerates uniform float between low (exclusive) and high (exclusive).\n@param low\n@param high\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_gamma stats_rand_gen_gamma(float $a, float $r) [float]\nGenerates random deviates from a gamma distribution. Generates random\ndeviates from the gamma distribution whose density is (A**R)/Gamma(R) *\nX**(R-1) * Exp(-A*X).\n@param a location parameter of Gamma distribution (`a` > 0).\n@param r shape parameter of Gamma distribution (`r` > 0).\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_ibinomial_negative stats_rand_gen_ibinomial_negative(int $n,\nfloat $p) [int]\nGenerates a single random deviate from a negative binomial\ndistribution. Arguments : n - the number of trials in the negative binomial\ndistribution from which a random deviate is to be generated (n &gt; 0), p -\nthe probability of an event (0 &lt; p &lt; 1))..\n@param n\n@param p\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_ibinomial stats_rand_gen_ibinomial(int $n, float $pp) [int]\nGenerates a single random deviate from a binomial distribution whose number\nof trials is &quot;n&quot; (n &gt;= 0) and whose probability of an event in\neach trial is &quot;pp&quot; ([0;1]). Method : algorithm BTPE.\n@param n\n@param pp\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_int stats_rand_gen_int(void) [int]\nGenerates random integer between 1 and 2147483562.\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_ipoisson stats_rand_gen_ipoisson(float $mu) [int]\nGenerates a single random deviate from a Poisson distribution with mean\n&quot;mu&quot; (mu &gt;= 0.0)..\n@param mu\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_iuniform stats_rand_gen_iuniform(int $low, int $high) [int]\nGenerates integer uniformly distributed between LOW (inclusive) and HIGH\n(inclusive).\n@param low\n@param high\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_noncenral_chisquare stats_rand_gen_noncenral_chisquare(float\n$df, float $xnonc) [float]\nGenerates random deviate from the distribution of a noncentral chisquare\nwith &quot;df&quot; degrees of freedom and noncentrality parameter\n&quot;xnonc&quot;. d must be &gt;= 1.0, xnonc must &gt;= 0.0.\n@param df\n@param xnonc\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_noncentral_f stats_rand_gen_noncentral_f(float $dfn, float\n$dfd, float $xnonc) [float]\nGenerates a random deviate from the noncentral F (variance ratio)\ndistribution with &quot;dfn&quot; degrees of freedom in the numerator, and\n&quot;dfd&quot; degrees of freedom in the denominator, and noncentrality\nparameter &quot;xnonc&quot;. Method : directly generates ratio of noncentral\nnumerator chisquare variate to central denominator chisquare variate..\n@param dfn\n@param dfd\n@param xnonc\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_noncentral_t stats_rand_gen_noncentral_t(float $df, float\n$xnonc) [float]\nGenerates a single random deviate from a noncentral T distribution.\n@param df\n@param xnonc\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_normal stats_rand_gen_normal(float $av, float $sd) [float]\nGenerates a single random deviate from a normal distribution with mean, av,\nand standard deviation, sd (sd &gt;= 0). Method : Renames SNORM from TOMS\nas slightly modified by BWB to use RANF instead of SUNIF..\n@param av\n@param sd\n@return (PECL stats >= 1.0.0)\n
stats_rand_gen_t stats_rand_gen_t(float $df) [float]\nGenerates a single random deviate from a T distribution.\n@param df\n@return (PECL stats >= 1.0.0)\n
stats_rand_get_seeds stats_rand_get_seeds(void) [array]\nNot documented.\n@return (PECL stats >= 1.0.0)\n
stats_rand_phrase_to_seeds stats_rand_phrase_to_seeds(string $phrase) [array]\ngenerate two seeds for the RGN random number generator.\n@param phrase\n@return (PECL stats >= 1.0.0)\n
stats_rand_ranf stats_rand_ranf(void) [float]\nReturns a random floating point number from a uniform distribution over 0 -\n1 (endpoints of this interval are not returned) using the current generator.\n@return (PECL stats >= 1.0.0)\n
stats_rand_setall stats_rand_setall(int $iseed1, int $iseed2) [void]\nNot documented.\n@param iseed1\n@param iseed2\n@return (PECL stats >= 1.0.0)\n
stats_skew stats_skew(array $a) [float]\nComputes the skewness of the data in the array.\n@param a\n@return (PECL stats >= 1.0.0)\n
stats_standard_deviation stats_standard_deviation(array $a [, bool\n$sample=false]) [float]\nReturns the standard deviation.\n@param a\n@param sample\n@return (PECL stats >= 1.0.0)\n
stats_stat_binomial_coef stats_stat_binomial_coef(int $x, int $n) [float]\nNot documented.\n@param x\n@param n\n@return (PECL stats >= 1.0.0)\n
stats_stat_correlation stats_stat_correlation(array $arr1, array $arr2) [float]\nNot documented.\n@param arr1\n@param arr2\n@return (PECL stats >= 1.0.0)\n
stats_stat_gennch stats_stat_gennch(int $n) [float]\nNot documented.\n@param n\n@return (PECL stats >= 1.0.0)\n
stats_stat_independent_t stats_stat_independent_t(array $arr1, array $arr2)\n[float]\nNot documented.\n@param arr1\n@param arr2\n@return (PECL stats >= 1.0.0)\n
stats_stat_innerproduct stats_stat_innerproduct(array $arr1, array $arr2)\n[float]\nDescription.\n@param arr1\n@param arr2\n@return (PECL stats >= 1.0.0)\n
stats_stat_noncentral_t stats_stat_noncentral_t(float $par1, float $par2,\nfloat $par3, int $which) [float]\nCalculates any one parameter of the noncentral t distribution give values\nfor the others..\n@param par1\n@param par2\n@param par3\n@param which\n@return (PECL stats >= 1.0.0)\n
stats_stat_paired_t stats_stat_paired_t(array $arr1, array $arr2) [float]\nNot documented.\n@param arr1\n@param arr2\n@return (PECL stats >= 1.0.0)\n
stats_stat_percentile stats_stat_percentile(float $df, float $xnonc) [float]\nNot documented.\n@param df\n@param xnonc\n@return (PECL stats >= 1.0.0)\n
stats_stat_powersum stats_stat_powersum(array $arr, float $power) [float]\nNot documented.\n@param arr\n@param power\n@return (PECL stats >= 1.0.0)\n
stats_variance stats_variance(array $a [, bool $sample=false]) [float]\nReturns the population variance.\n@param a\n@param sample\n@return (PECL stats >= 1.0.0)\n
stomp_connect_error stomp_connect_error(void) [string]\nReturns a string description of the last connect error. Returns a string\ndescription of the last connect error.\n@return (PECL stomp >= 0.3.0)\n
stomp_version stomp_version(void) [string]\nGets the current stomp extension version. Returns a string containing the\nversion of the current stomp extension.\n@return (PECL stomp >= 0.1.0)\n
str_getcsv str_getcsv(string $input [, string $delimiter=&#039;,&#039; [,\nstring $enclosure=&#039;&quot;&#039; [, string $escape=&#039;\\&#039;]]])\n[array]\nParse a CSV string into an array. Similar to fgetcsv() this functions parses\na string as its input unlike fgetcsv() which takes a file as its input.\n@param input The string to parse.\n@param delimiter Set the field delimiter (one character only).\n@param enclosure Set the field enclosure character (one character only).\n@param escape Set the escape character (one character only). Defaults as a\nbackslash (`\`)\n@return (PHP 5 >= 5.3.0)\n@see fgetcsv() - Gets line from file pointer and parse for CSV fields\n
str_ireplace str_ireplace(mixed $search, mixed $replace, mixed $subject [,\nint &$count]) [mixed]\nCase-insensitive version of str_replace.. This function returns a string or an\narray with all occurrences of `search` in `subject` (ignoring case) replaced\nwith the given `replace` value. If you don&#039;t need fancy replacing rules,\nyou should generally use this function instead of preg_replace() with the\n`i` modifier.\n@param search The value being searched for, otherwise known as the needle. An\narray may be used to designate multiple needles.\n@param replace The replacement value that replaces found `search` values. An\narray may be used to designate multiple replacements.\n@param subject The string or array being searched and replaced on, otherwise\nknown as the haystack. If `subject` is an array, then the search and replace\nis performed with every entry of `subject`, and the return value is an array\nas well.\n@param count If passed, this will be set to the number of replacements\nperformed.\n@return (PHP 5)\n@note Note: This function is binary-safe.\n@see str_replace() - Replace all occurrences of the search string with the\nreplacement string\n@see preg_replace() - Perform a regular expression search and replace\n@see strtr() - Translate characters or replace substrings\n
str_pad str_pad(string $input, int $pad_length [, string $pad_string=&quot;\n&quot; [, int $pad_type=STR_PAD_RIGHT]]) [string]\nPad a string to a certain length with another string. This functions\nreturns the `input` string padded on the left, the right, or both sides to\nthe specified padding length. If the optional argument `pad_string` is not\nsupplied, the `input` is padded with spaces, otherwise it is padded with\ncharacters from `pad_string` up to the limit.\n@param input The input string.\n@param pad_length If the value of `pad_length` is negative, less than,\nor equal to the length of the input string, no padding takes place.\n@param pad_string Note: The `pad_string` may be truncated if the\nrequired number of padding characters can&#039;t be evenly divided by the\n`pad_string`&#039;s length.\n@param pad_type Optional argument `pad_type` can be STR_PAD_RIGHT,\nSTR_PAD_LEFT, or STR_PAD_BOTH. If `pad_type` is not specified it is assumed\nto be STR_PAD_RIGHT.\n@return (PHP 4 >= 4.0.1, PHP 5)\n
snmp_set_valueretrieval snmp_set_valueretrieval(int $method=SNMP_VALUE_LIBRARY)\n[bool]\nSpecify the method how the SNMP values will be returned.\n@param  `method` types SNMP_VALUE_LIBRARY The return values will be as returned\nby the Net-SNMP library. SNMP_VALUE_PLAIN The return values will be the\nplain value without the SNMP type hint. SNMP_VALUE_OBJECT The return values\nwill be objects with the properties &quot;value&quot; and &quot;type&quot;,\nwhere the latter is one of the SNMP_OCTET_STR, SNMP_COUNTER etc. constants.\n@see snmp_get_valueretrieval() - Return the method how the SNMP values will\nbe returned\n@see Predefined Constants\n
snmp2_get snmp2_get(string $host, string $community, string $object_id [,\nstring $timeout=1000000 [, string $retries=5]]) [string]\nFetch an SNMP object. The snmp2_get() function is used to read the value of\nan SNMP object specified by the `object_id`.\n@param host The SNMP agent.\n@param community The read community.\n@param object_id The SNMP object.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (No version information available, might only be in SVN)\n@see snmp2_set() - Set the value of an SNMP object\n
snmp2_getnext snmp2_getnext(string $host, string $community, string $object_id\n[, string $timeout=1000000 [, string $retries=5]]) [string]\nFetch the SNMP object which follows the given object id. The snmp2_get_next()\nfunction is used to read the value of the SNMP object that follows the\nspecified `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param community The read community.\n@param object_id The SNMP object id which precedes the wanted one.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (No version information available, might only be in SVN)\n@see snmp2_get() - Fetch an SNMP object\n@see snmp2_walk() - Fetch all the SNMP objects from an agent\n
snmp2_real_walk snmp2_real_walk(string $host, string $community, string\n$object_id [, string $timeout=1000000 [, string $retries=5]]) [array]\nReturn all objects including their respective object ID within the specified\none. The snmp2_real_walk() function is used to traverse over a number of\nSNMP objects starting from `object_id` and return not only their values but\nalso their object ids.\n@param host The hostname of the SNMP agent (server).\n@param community The read community.\n@param object_id The SNMP object id which precedes the wanted one.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (No version information available, might only be in SVN)\n@see snmp2_walk() - Fetch all the SNMP objects from an agent\n
snmp2_set snmp2_set(string $host, string $community, string $object_id, string\n$type, string $value [, string $timeout=1000000 [, string $retries=5]]) [bool]\nSet the value of an SNMP object. snmp2_set() is used to set the value of an\nSNMP object specified by the `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param community The write community.\n@param object_id The SNMP object id.\n@return (No version information available, might only be in SVN)\n@see snmp2_get() - Fetch an SNMP object\n
snmp2_walk snmp2_walk(string $host, string $community, string $object_id [,\nstring $timeout=1000000 [, string $retries=5]]) [array]\nFetch all the SNMP objects from an agent. snmp2_walk() function is used to\nread all the values from an SNMP agent specified by the `hostname`.\n@param host The SNMP agent (server).\n@param community The read community.\n@param object_id If NULL, `object_id` is taken as the root of the SNMP objects\ntree and all objects under that tree are returned as an array. If `object_id`\nis specified, all the SNMP objects below that `object_id` are returned.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (No version information available, might only be in SVN)\n@see snmp2_real_walk() - Return all objects including their respective object\nID within the specified one\n
snmp3_get snmp3_get(string $host, string $sec_name, string $sec_level,\nstring $auth_protocol, string $auth_passphrase, string $priv_protocol,\nstring $priv_passphrase, string $object_id [, string $timeout=1000000 [,\nstring $retries=5]]) [string]\nFetch an SNMP object. The snmp3_get() function is used to read the value of\nan SNMP object specified by the `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param sec_name the security name, usually some kind of username\n@param sec_level the security level (noAuthNoPriv|authNoPriv|authPriv)\n@param auth_protocol the authentication protocol (MD5 or SHA)\n@param auth_passphrase the authentication pass phrase\n@param priv_protocol the privacy protocol (DES or AES)\n@param priv_passphrase the privacy pass phrase\n@param object_id The SNMP object id.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case of timeouts.\n@return (No version information available, might only be in SVN)\n@see snmp3_set() - Description\n
snmp3_getnext snmp3_getnext(string $host, string $sec_name, string $sec_level,\nstring $auth_protocol, string $auth_passphrase, string $priv_protocol,\nstring $priv_passphrase, string $object_id [, string $timeout=1000000 [,\nstring $retries=5]]) [string]\nFetch the SNMP object which follows the given object id. The snmp3_getnext()\nfunction is used to read the value of the SNMP object that follows the\nspecified `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param sec_name the security name, usually some kind of username\n@param sec_level the security level (noAuthNoPriv|authNoPriv|authPriv)\n@param auth_protocol the authentication protocol (MD5 or SHA)\n@param auth_passphrase the authentication pass phrase\n@param priv_protocol the privacy protocol (DES or AES)\n@param priv_passphrase the privacy pass phrase\n@param object_id The SNMP object id.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case of timeouts.\n@return (No version information available, might only be in SVN)\n@see snmp3_get() - Fetch an SNMP object\n@see snmp3_walk() - Fetch all the SNMP objects from an agent\n
snmp3_real_walk snmp3_real_walk(string $host, string $sec_name, string\n$sec_level, string $auth_protocol, string $auth_passphrase, string\n$priv_protocol, string $priv_passphrase, string $object_id [, string\n$timeout=1000000 [, string $retries=5]]) [array]\nReturn all objects including their respective object ID within the specified\none. The snmp3_real_walk() function is used to traverse over a number of\nSNMP objects starting from `object_id` and return not only their values but\nalso their object ids.\n@param  `host` The hostname of the SNMP agent (server).\n@param  `sec_name` the security name, usually some kind of username\n@param  `sec_level` the security level (noAuthNoPriv|authNoPriv|authPriv)\n@param  `auth_protocol` the authentication protocol (MD5 or SHA)\n@param  `auth_passphrase` the authentication pass phrase\n@param  `priv_protocol` the privacy protocol (DES or AES)\n@param  `priv_passphrase` the privacy pass phrase\n@param  `object_id` The SNMP object id.\n@param  `timeout` The number of microseconds until the first timeout.\n@param  `retries` The number of retries in case of timeouts.\n@return (No version information available, might only be in SVN)\n@see snmpwalk() - Fetch all the SNMP objects from an agent\n
snmp3_set snmp3_set(string $host, string $sec_name, string $sec_level,\nstring $auth_protocol, string $auth_passphrase, string $priv_protocol,\nstring $priv_passphrase, string $object_id, string $type, string $value [,\nstring $timeout=1000000 [, string $retries=5]]) [bool]\nDescription. snmp3_set() is used to set the value of an SNMP object specified\nby the `object_id`. Even if the security level does not use an auth or priv\nprotocol/password valid values have to be specified.\n@param host The hostname of the SNMP agent (server).\n@param sec_name the security name, usually some kind of username\n@param sec_level the security level (noAuthNoPriv|authNoPriv|authPriv)\n@param auth_protocol the authentication protocol (MD5 or SHA)\n@param auth_passphrase the authentication pass phrase\n@param priv_protocol the privacy protocol (DES or AES)\n@param priv_passphrase the privacy pass phrase\n@param object_id The SNMP object id.\n@return (No version information available, might only be in SVN)\n
snmp3_walk snmp3_walk(string $host, string $sec_name, string $sec_level,\nstring $auth_protocol, string $auth_passphrase, string $priv_protocol,\nstring $priv_passphrase, string $object_id [, string $timeout=1000000 [,\nstring $retries=5]]) [array]\nFetch all the SNMP objects from an agent. snmp3_walk() function is used to\nread all the values from an SNMP agent specified by the `hostname`. Even\nif the security level does not use an auth or priv protocol/password valid\nvalues have to be specified.\n@param host The hostname of the SNMP agent (server).\n@param sec_name the security name, usually some kind of username\n@param sec_level the security level (noAuthNoPriv|authNoPriv|authPriv)\n@param auth_protocol the authentication protocol (MD5 or SHA)\n@param auth_passphrase the authentication pass phrase\n@param priv_protocol the privacy protocol (DES or AES)\n@param priv_passphrase the privacy pass phrase\n@param object_id If NULL, `object_id` is taken as the root of the SNMP objects\ntree and all objects under that tree are returned as an array. If `object_id`\nis specified, all the SNMP objects below that `object_id` are returned.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (No version information available, might only be in SVN)\n@see snmp3_real_walk() - Return all objects including their respective object\nID within the specified one\n
snmpget snmpget(string $hostname, string $community, string $object_id [,\nint $timeout=1000000 [, int $retries=5]]) [string]\nFetch an SNMP object. The snmpget() function is used to read the value of\nan SNMP object specified by the `object_id`.\n@param hostname The SNMP agent.\n@param community The read community.\n@param object_id The SNMP object.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (PHP 4, PHP 5)\n@see snmpset() - Set the value of an SNMP object\n
snmpgetnext snmpgetnext(string $host, string $community, string $object_id\n[, int $timeout=1000000 [, int $retries=5]]) [string]\nFetch the SNMP object which follows the given object id. The snmpgetnext()\nfunction is used to read the value of the SNMP object that follows the\nspecified `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param community The read community.\n@param object_id The SNMP object id which precedes the wanted one.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (PHP 5)\n@see snmpget() - Fetch an SNMP object\n@see snmpwalk() - Fetch all the SNMP objects from an agent\n
snmprealwalk snmprealwalk(string $host, string $community, string $object_id\n[, int $timeout=1000000 [, int $retries=5]]) [array]\nReturn all objects including their respective object ID within the specified\none. The snmprealwalk() function is used to traverse over a number of SNMP\nobjects starting from `object_id` and return not only their values but also\ntheir object ids.\n@param host The hostname of the SNMP agent (server).\n@param community The read community.\n@param object_id The SNMP object id which precedes the wanted one.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (PHP 4, PHP 5)\n@see snmpwalk() - Fetch all the SNMP objects from an agent\n
snmpset snmpset(string $host, string $community, string $object_id, string\n$type, mixed $value [, int $timeout=1000000 [, int $retries=5]]) [bool]\nSet the value of an SNMP object. snmpset() is used to set the value of an\nSNMP object specified by the `object_id`.\n@param host The hostname of the SNMP agent (server).\n@param community The write community.\n@param object_id The SNMP object id.\n@return (PHP 4, PHP 5)\n@see snmpget() - Fetch an SNMP object\n
snmpwalk snmpwalk(string $hostname, string $community, string $object_id [,\nint $timeout=1000000 [, int $retries=5]]) [array]\nFetch all the SNMP objects from an agent. snmpwalk() function is used to\nread all the values from an SNMP agent specified by the `hostname`.\n@param hostname The SNMP agent (server).\n@param community The read community.\n@param object_id If NULL, `object_id` is taken as the root of the SNMP objects\ntree and all objects under that tree are returned as an array. If `object_id`\nis specified, all the SNMP objects below that `object_id` are returned.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (PHP 4, PHP 5)\n@see snmprealwalk() - Return all objects including their respective object\nID within the specified one\n
snmpwalkoid snmpwalkoid(string $hostname, string $community, string $object_id\n[, int $timeout=1000000 [, int $retries=5]]) [array]\nQuery for a tree of information about a network entity. snmpwalkoid()\nfunction is used to read all object ids and their respective values from\nan SNMP agent specified by `hostname`. The existence of snmpwalkoid() and\nsnmpwalk() has historical reasons. Both functions are provided for backward\ncompatibility. Use snmprealwalk() instead.\n@param hostname The SNMP agent.\n@param community The read community.\n@param object_id If NULL, `object_id` is taken as the root of the SNMP objects\ntree and all objects under that tree are returned as an array. If `object_id`\nis specified, all the SNMP objects below that `object_id` are returned.\n@param timeout The number of microseconds until the first timeout.\n@param retries The number of retries in case timeouts occur.\n@return (PHP 4, PHP 5)\n@see snmpwalk() - Fetch all the SNMP objects from an agent\n
socket_accept socket_accept(resource $socket) [resource]\nAccepts a connection on a socket. After the socket `socket` has been created\nusing socket_create(), bound to a name with socket_bind(), and told to\nlisten for connections with socket_listen(), this function will accept\nincoming connections on that socket. Once a successful connection is made,\na new socket resource is returned, which may be used for communication. If\nthere are multiple connections queued on the socket, the first will be\nused. If there are no pending connections, socket_accept() will block until\na connection becomes present. If `socket` has been made non-blocking using\nsocket_set_blocking() or socket_set_nonblock(), FALSE will be returned. The\nsocket resource returned by socket_accept() may not be used to accept new\nconnections. The original listening socket `socket`, however, remains open\nand may be reused.\n@param socket A valid socket resource created with socket_create().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_bind() - Binds a name to a socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_bind socket_bind(resource $socket, string $address [, int $port=0])\n[bool]\nBinds a name to a socket. Binds the name given in `address` to the socket\ndescribed by `socket`. This has to be done before a connection is be\nestablished using socket_connect() or socket_listen().\n@param socket A valid socket resource created with socket_create().\n@param address If the socket is of the AF_INET family, the `address` is an IP\nin dotted-quad notation (e.g. `127.0.0.1`). If the socket is of the AF_UNIX\nfamily, the `address` is the path of a Unix-domain socket (e.g. /tmp/my.sock).\n@param port (Optional) The `port` parameter is only used when binding an\nAF_INET socket, and designates the port on which to listen for connections.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: This function must be used on the socket before socket_connect().\n@note Note: Windows 9x/ME compatibility note: socket_last_error() may return\nan invalid error code if trying to bind the socket to a wrong address that\ndoes not belong to your machine.\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_clear_error socket_clear_error([resource $socket]) [void]\nClears the error on the socket or the last error code. This function clears the\nerror code on the given socket or the global last socket error if no socket\nis specified. This function allows explicitly resetting the error code value\neither of a socket or of the extension global last error code. This may be\nuseful to detect within a part of the application if an error occurred or not.\n@param socket A valid socket resource created with socket_create().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_close socket_close(resource $socket) [void]\nCloses a socket resource. socket_close() closes the socket resource given by\n`socket`. This function is specific to sockets and cannot be used on any\nother type of resources.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_bind() - Binds a name to a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_strerror() - Return a string describing a socket error\n
socket_connect socket_connect(resource $socket, string $address [, int\n$port=0]) [bool]\nInitiates a connection on a socket. Initiate a connection to `address`\nusing the socket resource `socket`, which must be a valid socket resource\ncreated with socket_create().\n@param socket\n@param address The `address` parameter is either an IPv4 address in dotted-quad\nnotation (e.g. `127.0.0.1`) if `socket` is AF_INET, a valid IPv6 address\n(e.g. `::1`) if IPv6 support is enabled and `socket` is AF_INET6 or the\npathname of a Unix domain socket, if the socket family is AF_UNIX.\n@param port The `port` parameter is only used and is mandatory when connecting\nto an AF_INET or an AF_INET6 socket, and designates the port on the remote\nhost to which a connection should be made.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_bind() - Binds a name to a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_create_listen socket_create_listen(int $port [, int $backlog=128])\n[resource]\nOpens a socket on port to accept connections. socket_create_listen() creates\na new socket resource of type AF_INET listening on all local interfaces on\nthe given port waiting for new connections. This function is meant to ease\nthe task of creating a new socket which only listens to accept new connections.\n@param port The port on which to listen on all interfaces.\n@param backlog The `backlog` parameter defines the maximum length the queue\nof pending connections may grow to. SOMAXCONN may be passed as `backlog`\nparameter, see socket_listen() for more information.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: If you want to create a socket which only listens on a certain\ninterface you need to use socket_create(), socket_bind() and socket_listen().\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_create_pair() - Creates a pair of indistinguishable sockets and\nstores them in an array\n@see socket_bind() - Binds a name to a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_create_pair socket_create_pair(int $domain, int $type, int $protocol,\narray &$fd) [bool]\nCreates a pair of indistinguishable sockets and stores them in an\narray. socket_create_pair() creates two connected and indistinguishable\nsockets, and stores them in `fd`. This function is commonly used in IPC\n(InterProcess Communication).\n@param domain The `domain` parameter specifies the protocol family to be\nused by the socket. See socket_create() for the full list.\n@param type The `type` parameter selects the type of communication to be\nused by the socket. See socket_create() for the full list.\n@param protocol The `protocol` parameter sets the specific protocol within the\nspecified `domain` to be used when communicating on the returned socket. The\nproper value can be retrieved by name by using getprotobyname(). If the desired\nprotocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP\ncan also be used. See socket_create() for the full list of supported protocols.\n@param fd Reference to an array in which the two socket resources will\nbe inserted.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_create_listen() - Opens a socket on port to accept connections\n@see socket_bind() - Binds a name to a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_create socket_create(int $domain, int $type, int $protocol) [resource]\nCreate a socket (endpoint for communication). Creates and returns a socket\nresource, also referred to as an endpoint of communication. A typical network\nconnection is made up of 2 sockets, one performing the role of the client,\nand another performing the role of the server.\n@param domain The `domain` parameter specifies the protocol family to be\nused by the socket. Available address/protocol families Domain Description\nAF_INET IPv4 Internet based protocols. TCP and UDP are common protocols of\nthis protocol family. AF_INET6 IPv6 Internet based protocols. TCP and UDP\nare common protocols of this protocol family. AF_UNIX Local communication\nprotocol family. High efficiency and low overhead make it a great form of IPC\n(Interprocess Communication).\n@param type The `type` parameter selects the type of communication to be\nused by the socket. Available socket types Type Description SOCK_STREAM\nProvides sequenced, reliable, full-duplex, connection-based byte streams. An\nout-of-band data transmission mechanism may be supported. The TCP protocol\nis based on this socket type. SOCK_DGRAM Supports datagrams (connectionless,\nunreliable messages of a fixed maximum length). The UDP protocol is based\non this socket type. SOCK_SEQPACKET Provides a sequenced, reliable, two-way\nconnection-based data transmission path for datagrams of fixed maximum length;\na consumer is required to read an entire packet with each read call. SOCK_RAW\nProvides raw network protocol access. This special type of socket can be used\nto manually construct any type of protocol. A common use for this socket\ntype is to perform ICMP requests (like ping). SOCK_RDM Provides a reliable\ndatagram layer that does not guarantee ordering. This is most likely not\nimplemented on your operating system.\n@param protocol The `protocol` parameter sets the specific protocol within the\nspecified `domain` to be used when communicating on the returned socket. The\nproper value can be retrieved by name by using getprotobyname(). If the desired\nprotocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP can\nalso be used. Common protocols Name Description icmp The Internet Control\nMessage Protocol is used primarily by gateways and hosts to report errors\nin datagram communication. The &quot;ping&quot; command (present in most\nmodern operating systems) is an example application of ICMP. udp The User\nDatagram Protocol is a connectionless, unreliable, protocol with fixed record\nlengths. Due to these aspects, UDP requires a minimum amount of protocol\noverhead. tcp The Transmission Control Protocol is a reliable, connection\nbased, stream oriented, full duplex protocol. TCP guarantees that all data\npackets will be received in the order in which they were sent. If any packet\nis somehow lost during communication, TCP will automatically retransmit the\npacket until the destination host acknowledges that packet. For reliability\nand performance reasons, the TCP implementation itself decides the appropriate\noctet boundaries of the underlying datagram communication layer. Therefore,\nTCP applications must allow for the possibility of partial record transmission.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_accept() - Accepts a connection on a socket\n@see socket_bind() - Binds a name to a socket\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_get_option socket_get_option(resource $socket, int $level, int $optname)\n[mixed]\nGets socket options for the socket. The socket_get_option() function retrieves\nthe value for the option specified by the `optname` parameter for the specified\n`socket`.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param level The `level` parameter specifies the protocol level at which\nthe option resides. For example, to retrieve options at the socket level,\na `level` parameter of SOL_SOCKET would be used. Other levels, such as TCP,\ncan be used by specifying the protocol number of that level. Protocol numbers\ncan be found by using the getprotobyname() function.\n@param optname Available Socket Options Option Description Type SO_DEBUG\nReports whether debugging information is being recorded. int SO_BROADCAST\nReports whether transmission of broadcast messages is supported. int\nSO_REUSEADDR Reports whether local addresses can be reused. int SO_KEEPALIVE\nReports whether connections are kept active with periodic transmission\nof messages. If the connected socket fails to respond to these messages,\nthe connection is broken and processes writing to that socket are notified\nwith a SIGPIPE signal. int SO_LINGER Reports whether the `socket` lingers on\nsocket_close() if data is present. By default, when the socket is closed, it\nattempts to send all unsent data. In the case of a connection-oriented socket,\nsocket_close() will wait for its peer to acknowledge the data. If l_onoff\nis non-zero and l_linger is zero, all the unsent data will be discarded\nand RST (reset) is sent to the peer in the case of a connection-oriented\nsocket. On the other hand, if l_onoff is non-zero and l_linger is non-zero,\nsocket_close() will block until all the data is sent or the time specified\nin l_linger elapses. If the socket is non-blocking, socket_close() will fail\nand return an error. array. The array will contain two keys: l_onoff and\nl_linger. SO_OOBINLINE Reports whether the `socket` leaves out-of-band data\ninline. int SO_SNDBUF Reports the size of the send buffer. int SO_RCVBUF\nReports the size of the receive buffer. int SO_ERROR Reports information\nabout error status and clears it. int (cannot be set by socket_set_option())\nSO_TYPE Reports the `socket` type (e.g. SOCK_STREAM). int (cannot be set by\nsocket_set_option()) SO_DONTROUTE Reports whether outgoing messages bypass\nthe standard routing facilities. int SO_RCVLOWAT Reports the minimum number\nof bytes to process for `socket` input operations. int SO_RCVTIMEO Reports\nthe timeout value for input operations. array. The array will contain two\nkeys: sec which is the seconds part on the timeout value and usec which is\nthe microsecond part of the timeout value. SO_SNDTIMEO Reports the timeout\nvalue specifying the amount of time that an output function blocks because\nflow control prevents data from being sent. array. The array will contain two\nkeys: sec which is the seconds part on the timeout value and usec which is\nthe microsecond part of the timeout value. SO_SNDLOWAT Reports the minimum\nnumber of bytes to process for `socket` output operations. int TCP_NODELAY\nReports whether the Nagle TCP algorithm is disabled. int\n@return (PHP 4 >= 4.3.0, PHP 5)\n
socket_get_status socket_get_status\nAlias of stream_get_meta_data.\n
socket_getpeername socket_getpeername(resource $socket, string &$address [,\nint &$port]) [bool]\nQueries the remote side of the given socket which may either result in\nhost/port or in a Unix filesystem path, dependent on its type. Queries the\nremote side of the given socket which may either result in host/port or in\na Unix filesystem path, dependent on its type.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param address If the given socket is of type AF_INET or AF_INET6,\nsocket_getpeername() will return the peers (remote) IP address in appropriate\nnotation (e.g. `127.0.0.1` or `fe80::1`) in the `address` parameter and,\nif the optional `port` parameter is present, also the associated port. If\nthe given socket is of type AF_UNIX, socket_getpeername() will return the\nUnix filesystem path (e.g. `/var/run/daemon.sock`) in the `address` parameter.\n@param port If given, this will hold the port associated to `address`.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: socket_getpeername() should not be used with AF_UNIX sockets\ncreated with socket_accept(). Only sockets created with socket_connect()\nor a primary server socket following a call to socket_bind() will return\nmeaningful values.\n@note Note: For having socket_getpeername() to return a meaningful value,\nthe socket it is applied upon must of course be one for which the concept\nof &quot;peer&quot; makes sense.\n@see socket_getsockname() - Queries the local side of the given socket which\nmay either result in host/port or in a Unix filesystem path, dependent on\nits type\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_getsockname socket_getsockname(resource $socket, string &$addr [,\nint &$port]) [bool]\nQueries the local side of the given socket which may either result in\nhost/port or in a Unix filesystem path, dependent on its type.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param addr If the given socket is of type AF_INET or AF_INET6,\nsocket_getsockname() will return the local IP address in appropriate notation\n(e.g. `127.0.0.1` or `fe80::1`) in the `address` parameter and, if the optional\n`port` parameter is present, also the associated port. If the given socket\nis of type AF_UNIX, socket_getsockname() will return the Unix filesystem path\n(e.g. `/var/run/daemon.sock`) in the `address` parameter.\n@param port If provided, this will hold the associated port.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_getpeername() - Queries the remote side of the given socket which\nmay either result in host/port or in a Unix filesystem path, dependent on\nits type\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_last_error socket_last_error([resource $socket]) [int]\nReturns the last error on the socket. If a socket resource is passed to\nthis function, the last error which occurred on this particular socket is\nreturned. If the socket resource is omitted, the error code of the last\nfailed socket function is returned. The latter is particularly helpful for\nfunctions like socket_create() which don&#039;t return a socket on failure and\nsocket_select() which can fail for reasons not directly tied to a particular\nsocket. The error code is suitable to be fed to socket_strerror() which\nreturns a string describing the given error code.\n@param socket A valid socket resource created with socket_create().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: socket_last_error() does not clear the error code, use\nsocket_clear_error() for this purpose.\n
socket_listen socket_listen(resource $socket [, int $backlog=0]) [bool]\nListens for a connection on a socket. After the socket `socket` has been\ncreated using socket_create() and bound to a name with socket_bind(), it\nmay be told to listen for incoming connections on `socket`. socket_listen()\nis applicable only to sockets of type SOCK_STREAM or SOCK_SEQPACKET.\n@param socket A valid socket resource created with socket_create().\n@param backlog A maximum of `backlog` incoming connections will be queued\nfor processing. If a connection request arrives with the queue full the\nclient may receive an error with an indication of `ECONNREFUSED`, or,\nif the underlying protocol supports retransmission, the request may be\nignored so that retries may succeed. Note: The maximum number passed to the\n`backlog` parameter highly depends on the underlying platform. On Linux,\nit is silently truncated to SOMAXCONN. On win32, if passed SOMAXCONN, the\nunderlying service provider responsible for the socket will set the backlog\nto a maximum reasonable value. There is no standard provision to find out\nthe actual backlog value on this platform.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_accept() - Accepts a connection on a socket\n@see socket_bind() - Binds a name to a socket\n@see socket_connect() - Initiates a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n@see socket_strerror() - Return a string describing a socket error\n
socket_read socket_read(resource $socket, int $length [, int\n$type=PHP_BINARY_READ]) [string]\nReads a maximum of length bytes from a socket. The function socket_read()\nreads from the socket resource `socket` created by the socket_create()\nor socket_accept() functions.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param length The maximum number of bytes read is specified by the `length`\nparameter. Otherwise you can use \r, \n, or \0 to end reading (depending on\nthe `type` parameter, see below).\n@param type Optional `type` parameter is a named constant: PHP_BINARY_READ\n(Default) - use the system `recv()` function. Safe for reading binary\ndata. PHP_NORMAL_READ - reading stops at `\n` or `\r`.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_accept() - Accepts a connection on a socket\n@see socket_bind() - Binds a name to a socket\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n@see socket_write() - Write to a socket\n
socket_recv socket_recv(resource $socket, string &$buf, int $len, int $flags)\n[int]\nReceives data from a connected socket. The socket_recv() function receives\n`len` bytes of data in `buf` from `socket`. socket_recv() can be used to\ngather data from connected sockets. Additionally, one or more flags can\nbe specified to modify the behaviour of the function. `buf` is passed by\nreference, so it must be specified as a variable in the argument list. Data\nread from `socket` by socket_recv() will be returned in `buf`.\n@param socket The `socket` must be a socket resource previously created\nby socket_create().\n@param buf The data received will be fetched to the variable specified with\n`buf`. If an error occurs, if the connection is reset, or if no data is\navailable, `buf` will be set to NULL.\n@param len Up to `len` bytes will be fetched from remote host.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (`|`) operator. Possible values for\n`flags` Flag Description MSG_OOB Process out-of-band data. MSG_PEEK Receive\ndata from the beginning of the receive queue without removing it from the\nqueue. MSG_WAITALL Block until at least `len` are received. However, if a\nsignal is caught or the remote host disconnects, the function may return\nless data. MSG_DONTWAIT With this flag set, the function returns even if it\nwould normally have blocked.\n@return (PHP 4 >= 4.1.0, PHP 5)\n
socket_recvfrom socket_recvfrom(resource $socket, string &$buf, int $len,\nint $flags, string &$name [, int &$port]) [int]\nReceives data from a socket whether or not it is connection-oriented. The\nsocket_recvfrom() function receives `len` bytes of data in `buf` from\n`name` on port `port` (if the socket is not of type AF_UNIX) using\n`socket`. socket_recvfrom() can be used to gather data from both connected\nand unconnected sockets. Additionally, one or more flags can be specified to\nmodify the behaviour of the function. The `name` and `port` must be passed\nby reference. If the socket is not connection-oriented, `name` will be set\nto the internet protocol address of the remote host or the path to the UNIX\nsocket. If the socket is connection-oriented, `name` is NULL. Additionally, the\n`port` will contain the port of the remote host in the case of an unconnected\nAF_INET or AF_INET6 socket.\n@param socket The `socket` must be a socket resource previously created\nby socket_create().\n@param buf The data received will be fetched to the variable specified with\n`buf`.\n@param len Up to `len` bytes will be fetched from remote host.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (`|`) operator. Possible values for\n`flags` Flag Description MSG_OOB Process out-of-band data. MSG_PEEK Receive\ndata from the beginning of the receive queue without removing it from the\nqueue. MSG_WAITALL Block until at least `len` are received. However, if a\nsignal is caught or the remote host disconnects, the function may return\nless data. MSG_DONTWAIT With this flag set, the function returns even if it\nwould normally have blocked.\n@param name If the socket is of the type AF_UNIX type, `name` is the path\nto the file. Else, for unconnected sockets, `name` is the IP address of,\nthe remote host, or NULL if the socket is connection-oriented.\n@param port This argument only applies to AF_INET and AF_INET6 sockets, and\nspecifies the remote port from which the data is received. If the socket is\nconnection-oriented, `port` will be NULL.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_recv() - Receives data from a connected socket\n@see socket_send() - Sends data to a connected socket\n@see socket_sendto() - Sends a message to a socket, whether it is connected\nor not\n@see socket_create() - Create a socket (endpoint for communication)\n
socket_select socket_select(array &$read, array &$write, array &$except,\nint $tv_sec [, int $tv_usec=0]) [int]\nRuns the select() system call on the given arrays of sockets with a specified\ntimeout. socket_select() accepts arrays of sockets and waits for them to\nchange status. Those coming with BSD sockets background will recognize\nthat those socket resource arrays are in fact the so-called file descriptor\nsets. Three independent arrays of socket resources are watched.\n@param read The sockets listed in the `read` array will be watched to see if\ncharacters become available for reading (more precisely, to see if a read will\nnot block - in particular, a socket resource is also ready on end-of-file,\nin which case a socket_read() will return a zero length string).\n@param write The sockets listed in the `write` array will be watched to see\nif a write will not block.\n@param except The sockets listed in the `except` array will be watched\nfor exceptions.\n@param tv_sec The `tv_sec` and `tv_usec` together form the `timeout`\nparameter. The `timeout` is an upper bound on the amount of time elapsed\nbefore socket_select() return. `tv_sec` may be zero , causing socket_select()\nto return immediately. This is useful for polling. If `tv_sec` is NULL\n(no timeout), socket_select() can block indefinitely.\n@param tv_usec\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: Be aware that some socket implementations need to be handled very\ncarefully. A few basic rules: You should always try to use socket_select()\nwithout timeout. Your program should have nothing to do if there is no\ndata available. Code that depends on timeouts is not usually portable and\ndifficult to debug. No socket resource must be added to any set if you do\nnot intend to check its result after the socket_select() call, and respond\nappropriately. After socket_select() returns, all socket resources in all\narrays must be checked. Any socket resource that is available for writing\nmust be written to, and any socket resource available for reading must be read\nfrom. If you read/write to a socket returns in the arrays be aware that they\ndo not necessarily read/write the full amount of data you have requested. Be\nprepared to even only be able to read/write a single byte. It&#039;s common to\nmost socket implementations that the only exception caught with the `except`\narray is out-of-bound data received on a socket.\n@see socket_read() - Reads a maximum of length bytes from a socket\n@see socket_write() - Write to a socket\n@see socket_last_error() - Returns the last error on the socket\n@see socket_strerror() - Return a string describing a socket error\n
socket_send socket_send(resource $socket, string $buf, int $len, int $flags)\n[int]\nSends data to a connected socket. The function socket_send() sends `len`\nbytes to the socket `socket` from `buf`.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param buf A buffer containing the data that will be sent to the remote host.\n@param len The number of bytes that will be sent to the remote host from `buf`.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (`|`) operator. Possible values for `flags`\nMSG_OOB Send OOB (out-of-band) data. MSG_EOR Indicate a record mark. The\nsent data completes the record. MSG_EOF Close the sender side of the socket\nand include an appropriate notification of this at the end of the sent\ndata. The sent data completes the transaction. MSG_DONTROUTE Bypass routing,\nuse direct interface.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_sendto() - Sends a message to a socket, whether it is connected\nor not\n
socket_sendto socket_sendto(resource $socket, string $buf, int $len, int\n$flags, string $addr [, int $port=0]) [int]\nSends a message to a socket, whether it is connected or not. The function\nsocket_sendto() sends `len` bytes from `buf` through the socket `socket`\nto the `port` at the address `addr`.\n@param socket A valid socket resource created using socket_create().\n@param buf The sent data will be taken from buffer `buf`.\n@param len `len` bytes from `buf` will be sent.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (`|`) operator. Possible values for `flags`\nMSG_OOB Send OOB (out-of-band) data. MSG_EOR Indicate a record mark. The\nsent data completes the record. MSG_EOF Close the sender side of the socket\nand include an appropriate notification of this at the end of the sent\ndata. The sent data completes the transaction. MSG_DONTROUTE Bypass routing,\nuse direct interface.\n@param addr IP address of the remote host.\n@param port `port` is the remote port number at which the data will be sent.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_send() - Sends data to a connected socket\n
socket_set_block socket_set_block(resource $socket) [bool]\nSets blocking mode on a socket resource. The socket_set_block() function\nremoves the O_NONBLOCK flag on the socket specified by the `socket`\nparameter. When an operation (e.g. receive, send, connect, accept, ...) is\nperformed on a blocking socket, the script will pause its execution until\nit receives a signal or it can perform the operation.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see socket_set_nonblock() - Sets nonblocking mode for file descriptor fd\n@see socket_set_option() - Sets socket options for the socket\n
socket_set_blocking socket_set_blocking\nAlias of stream_set_blocking.\n
socket_set_nonblock socket_set_nonblock(resource $socket) [bool]\nSets nonblocking mode for file descriptor fd. The socket_set_nonblock()\nfunction sets the O_NONBLOCK flag on the socket specified by the `socket`\nparameter. When an operation (e.g. receive, send, connect, accept, ...) is\nperformed on a non-blocking socket, the script not pause its execution until\nit receives a signal or it can perform the operation. Rather, if the operation\nwould result in a block, the called function will fail.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_set_block() - Sets blocking mode on a socket resource\n@see socket_set_option() - Sets socket options for the socket\n
socket_set_option socket_set_option(resource $socket, int $level, int $optname,\nmixed $optval) [bool]\nSets socket options for the socket. The socket_set_option() function sets\nthe option specified by the `optname` parameter, at the specified protocol\n`level`, to the value pointed to by the `optval` parameter for the `socket`.\n@param socket A valid socket resource created with socket_create() or\nsocket_accept().\n@param level The `level` parameter specifies the protocol level at which\nthe option resides. For example, to retrieve options at the socket level,\na `level` parameter of SOL_SOCKET would be used. Other levels, such as TCP,\ncan be used by specifying the protocol number of that level. Protocol numbers\ncan be found by using the getprotobyname() function.\n@param optname The available socket options are the same as those for the\nsocket_get_option() function.\n@param optval The option value.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
socket_set_timeout socket_set_timeout\nAlias of stream_set_timeout.\n
socket_shutdown socket_shutdown(resource $socket [, int $how=2]) [bool]\nShuts down a socket for receiving, sending, or both. The socket_shutdown()\nfunction allows you to stop incoming, outgoing or all data (the default)\nfrom being sent through the `socket`\n@param socket A valid socket resource created with socket_create().\n@param how The value of `how` can be one of the following: possible values for\n`how` `0` Shutdown socket reading `1` Shutdown socket writing `2` Shutdown\nsocket reading and writing\n@return (PHP 4 >= 4.1.0, PHP 5)\n
socket_strerror socket_strerror(int $errno) [string]\nReturn a string describing a socket error. socket_strerror() takes as its\n`errno` parameter a socket error code as returned by socket_last_error() and\nreturns the corresponding explanatory text. Note: Although the error messages\ngenerated by the socket extension are in English, the system messages retrieved\nwith this function will appear depending on the current locale (LC_MESSAGES).\n@param errno A valid socket error number, likely produced by\nsocket_last_error().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see socket_accept() - Accepts a connection on a socket\n@see socket_bind() - Binds a name to a socket\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_create() - Create a socket (endpoint for communication)\n
socket_write socket_write(resource $socket, string $buffer [, int $length=0])\n[int]\nWrite to a socket. The function socket_write() writes to the `socket` from\nthe given `buffer`.\n@param socket\n@param buffer The buffer to be written.\n@param length The optional parameter `length` can specify an alternate length\nof bytes written to the socket. If this length is greater then the buffer\nlength, it is silently truncated to the length of the buffer.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: socket_write() does not necessarily write all bytes from the\ngiven buffer. It&#039;s valid that, depending on the network buffers etc.,\nonly a certain amount of data, even one byte, is written though your buffer\nis greater. You have to watch out so you don&#039;t unintentionally forget\nto transmit the rest of your data.\n@see socket_accept() - Accepts a connection on a socket\n@see socket_bind() - Binds a name to a socket\n@see socket_connect() - Initiates a connection on a socket\n@see socket_listen() - Listens for a connection on a socket\n@see socket_read() - Reads a maximum of length bytes from a socket\n@see socket_strerror() - Return a string describing a socket error\n
solr_get_version solr_get_version(void) [string]\nReturns the current version of the Apache Solr extension. This function\nreturns the current version of the extension as a string.\n@return (PECL solr >= 0.9.1)\n@see SolrUtils::getSolrVersion() - Returns the current version of the Solr\nextension\n
sort sort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array. This function sorts an array. Elements will be arranged from\nlowest to highest when this function has completed.\n@param array The input array.\n@param sort_flags The optional second parameter `sort_flags` may be\nused to modify the sorting behavior using these values: Sorting type\nflags: SORT_REGULAR - compare items normally (don&#039;t change types)\nSORT_NUMERIC - compare items numerically SORT_STRING - compare items as\nstrings SORT_LOCALE_STRING - compare items as strings, based on the current\nlocale. Added in PHP 4.4.0 and 5.0.2, it uses the system locale, which can\nbe changed using setlocale().\n@return (PHP 4, PHP 5)\n@note Note: This function assigns new keys to the elements in `array`. It\nwill remove any existing keys that may have been assigned, rather than just\nreordering the keys.\n@note Note: Like most PHP sorting functions, sort() uses an implementation\nof &raquo; Quicksort.\n@see asort() - Sort an array and maintain index association\n@see The comparison of array sorting functions\n
soundex soundex(string $str) [string]\nCalculate the soundex key of a string. Calculates the soundex key of\n`str`. Soundex keys have the property that words pronounced similarly produce\nthe same soundex key, and can thus be used to simplify searches in databases\nwhere you know the pronunciation but not the spelling. This soundex function\nreturns a string 4 characters long, starting with a letter. This particular\nsoundex function is one described by Donald Knuth in &quot;The Art Of\nComputer Programming, vol. 3: Sorting And Searching&quot;, Addison-Wesley\n(1973), pp. 391-392.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@see levenshtein() - Calculate Levenshtein distance between two strings\n@see metaphone() - Calculate the metaphone key of a string\n@see similar_text() - Calculate the similarity between two strings\n
spl_autoload_call spl_autoload_call(string $class_name) [void]\nTry all registered __autoload() function to load the requested class. This\nfunction can be used to manually search for a class or interface using the\nregistered __autoload functions.\n@param class_name The class name being searched.\n@return (PHP 5 >= 5.1.2)\n
spl_autoload_extensions spl_autoload_extensions([string $file_extensions])\n[string]\nRegister and return default file extensions for spl_autoload. This function\ncan modify and check the file extensions that the built in __autoload()\nfallback function spl_autoload() will be using.\n@param file_extensions When calling without an argument, it simply returns\nthe current list of extensions each separated by comma. To modify the list\nof file extensions, simply invoke the functions with the new list of file\nextensions to use in a single string with each extensions separated by comma.\n@return (PHP 5 >= 5.1.2)\n
spl_autoload_functions spl_autoload_functions(void) [array]\nReturn all registered __autoload() functions. Get all registered __autoload()\nfunctions.\n@return (PHP 5 >= 5.1.2)\n
spl_autoload_register spl_autoload_register([callback $autoload_function [,\nbool $throw=true [, bool $prepend=false]]]) [bool]\nRegister given function as __autoload() implementation. Register a function\nwith the spl provided __autoload stack. If the stack is not yet activated\nit will be activated. If your code has an existing __autoload function then\nthis function must be explicitly registered on the __autoload stack. This is\nbecause spl_autoload_register() will effectively replace the engine cache for\nthe __autoload function by either spl_autoload() or spl_autoload_call(). If\nthere must be multiple autoload functions, spl_autoload_register() allows\nfor this. It effectively creates a queue of autoload functions, and runs\nthrough each of them in the order they are defined. By contrast, __autoload()\nmay only be defined once.\n@param autoload_function The autoload function being registered. If no\nparameter is provided, then the default implementation of spl_autoload()\nwill be registered.\n@param throw This parameter specifies whether spl_autoload_register() should\nthrow exceptions on error.\n@param prepend If true, spl_autoload_register() will prepend the autoloader\non the autoload stack instead of appending it.\n@return (PHP 5 >= 5.1.2)\n
spl_autoload_unregister spl_autoload_unregister(mixed $autoload_function)\n[bool]\nUnregister given function as __autoload() implementation. Unregister a function\nfrom the spl provided __autoload stack. If the stack is activated and empty\nafter unregistering the given function then it will be deactivated. When\nthis function results in the autoload stack being deactivated, any __autoload\nfunction that previously existed will not be reactivated.\n@param autoload_function The autoload function being unregistered.\n@return (PHP 5 >= 5.1.2)\n
spl_autoload spl_autoload(string $class_name [, string\n$file_extensions=spl_autoload_extensions()]) [void]\nDefault implementation for __autoload(). This function is intended to be used\nas a default implementation for __autoload(). If nothing else is specified and\nspl_autoload_register() is called without any parameters then this functions\nwill be used for any later call to __autoload().\n@param class_name The lowercased name of the class (and namespace) being\ninstantiated.\n@param file_extensions By default it checks all include paths to contain\nfilenames built up by the lowercase class name appended by the filename\nextensions .inc and .php.\n@return (PHP 5 >= 5.1.2)\n
spl_classes spl_classes(void) [array]\nReturn available SPL classes. This function returns an array with the current\navailable SPL classes.\n@return (PHP 5)\n
spl_object_hash spl_object_hash(object $obj) [string]\nReturn hash id for given object. This function returns a unique identifier\nfor the object. This id can be used as a hash key for storing objects or\nfor identifying an object.\n@param object Any object.\n@return (PHP 5 >= 5.2.0)\n@note Note: When an object is destroyed, its hash may be reused for other\nobjects.\n
split split(string $pattern, string $string [, int $limit=-1]) [array]\nSplit string into array by regular expression. Splits a `string` into array by\nregular expression. This function has been DEPRECATED as of PHP 5.3.0. Relying\non this feature is highly discouraged.\n@param pattern Case sensitive regular expression. If you want to split on\nany of the characters which are considered special by regular expressions,\nyou&#039;ll need to escape them first. If you think split() (or any other\nregex function, for that matter) is doing something weird, please read the file\nregex.7, included in the regex/ subdirectory of the PHP distribution. It&#039;s\nin manpage format, so you&#039;ll want to do something along the lines of\nman /usr/local/src/regex/regex.7 in order to read it.\n@param string The input string.\n@param limit If `limit` is set, the returned array will contain a maximum of\n`limit` elements with the last element containing the whole rest of `string`.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@see preg_split() - Split string by a regular expression\n@see spliti() - Split string into array by regular expression case insensitive\n@see str_split() - Convert a string to an array\n@see explode() - Split a string by string\n@see implode() - Join array elements with a string\n@see chunk_split() - Split a string into smaller chunks\n@see wordwrap() - Wraps a string to a given number of characters\n
spliti spliti(string $pattern, string $string [, int $limit=-1]) [array]\nSplit string into array by regular expression case insensitive. Splits a\n`string` into array by regular expression. This function is identical to\nsplit() except that this ignores case distinction when matching alphabetic\ncharacters. This function has been DEPRECATED as of PHP 5.3.0. Relying on\nthis feature is highly discouraged.\n@param pattern Case insensitive regular expression. If you want to split on\nany of the characters which are considered special by regular expressions,\nyou&#039;ll need to escape them first. If you think spliti() (or any other\nregex function, for that matter) is doing something weird, please read the file\nregex.7, included in the regex/ subdirectory of the PHP distribution. It&#039;s\nin manpage format, so you&#039;ll want to do something along the lines of\nman /usr/local/src/regex/regex.7 in order to read it.\n@param string The input string.\n@param limit If `limit` is set, the returned array will contain a maximum of\n`limit` elements with the last element containing the whole rest of `string`.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@see preg_split() - Split string by a regular expression\n@see split() - Split string into array by regular expression\n@see explode() - Split a string by string\n@see implode() - Join array elements with a string\n
sprintf sprintf(string $format [, mixed $args [, mixed $...]]) [string]\nReturn a formatted string. Returns a string produced according to the\nformatting string `format`.\n@return (PHP 4, PHP 5)\n@see printf() - Output a formatted string\n@see sscanf() - Parses input from a string according to a format\n@see fscanf() - Parses input from a file according to a format\n@see vsprintf() - Return a formatted string\n@see number_format() - Format a number with grouped thousands\n
sql_regcase sql_regcase(string $string) [string]\nMake regular expression for case insensitive match. Creates a regular\nexpression for a case insensitive match. This function has been DEPRECATED\nas of PHP 5.3.0. Relying on this feature is highly discouraged.\n@param string The input string.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n
sqlite_array_query sqlite_array_query(resource $dbhandle, string $query [,\nint $result_type [, bool $decode_binary]]) [array]\nExecute a query against a given database and returns an array. Object oriented\nstyle (method):\n@param query The query to be executed. Data inside the query should be\nproperly escaped.\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_query() - Executes a query against a given database and returns\na result handle\n@see sqlite_fetch_array() - Fetches the next row from a result set as an array\n@see sqlite_fetch_string() - Alias of sqlite_fetch_single\n
sqlite_busy_timeout sqlite_busy_timeout(resource $dbhandle, int $milliseconds)\n[void]\nSet busy timeout duration, or disable busy handlers. Object oriented style\n(method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param milliseconds The number of milliseconds. When set to `0`, busy handlers\nwill be disabled and SQLite will return immediately with a `SQLITE_BUSY` status\ncode if another process/thread has the database locked for an update. PHP sets\nthe default busy timeout to be 60 seconds when the database is opened. Note:\nThere are one thousand (1000) milliseconds in one second.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_open() - Opens an SQLite database and create the database if it\ndoes not exist\n
sqlite_changes sqlite_changes(resource $dbhandle) [int]\nReturns the number of rows that were changed by the most\n   recent SQL statement. Object oriented style (method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_open() - Opens an SQLite database and create the database if it\ndoes not exist\n
sqlite_close sqlite_close(resource $dbhandle) [void]\nCloses an open SQLite database. Closes the given `db_handle` database\nhandle. If the database was persistent, it will be closed and removed from\nthe persistent list.\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_open() - Opens an SQLite database and create the database if it\ndoes not exist\n@see sqlite_popen() - Opens a persistent handle to an SQLite database and\ncreate the database if it does not exist\n
sqlite_column sqlite_column(resource $result, mixed $index_or_name [, bool\n$decode_binary=true]) [mixed]\nFetches a column from the current row of a result set.\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param index_or_name The column index or name to fetch.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@note Note: Use this function when you are iterating a large result set with\nmany columns, or with columns that contain large amounts of data.\n@see sqlite_fetch_string() - Alias of sqlite_fetch_single\n
sqlite_create_aggregate sqlite_create_aggregate(resource $dbhandle,\nstring $function_name, callback $step_func, callback $finalize_func [,\nint $num_args=-1]) [void]\nRegister an aggregating UDF for use in SQL statements. Object oriented style\n(method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param function_name The name of the function used in SQL statements.\n@param step_func Callback function called for each row of the result\nset. Function parameters are `&amp;$context, $value, ...`.\n@param finalize_func Callback function to aggregate the &quot;stepped&quot;\ndata from each row. Function parameter is `&amp;$context` and the function\nshould return the final result of aggregation.\n@param num_args Hint to the SQLite parser if the callback function accepts\na predetermined number of arguments.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_create_function() - Registers a &quot;regular&quot; User Defined\nFunction for use in SQL statements\n@see sqlite_udf_encode_binary() - Encode binary data before returning it\nfrom an UDF\n@see sqlite_udf_decode_binary() - Decode binary data passed as parameters\nto an UDF\n
sqlite_create_function sqlite_create_function(resource $dbhandle, string\n$function_name, callback $callback [, int $num_args=-1]) [void]\nRegisters a &quot;regular&quot; User Defined Function for use in SQL\nstatements. Object oriented style (method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param function_name The name of the function used in SQL statements.\n@param callback Callback function to handle the defined SQL function. Note:\nCallback functions should return a type understood by SQLite (i.e. scalar\ntype).\n@param num_args Hint to the SQLite parser if the callback function accepts\na predetermined number of arguments.\n@return (PHP 5, sqlite >= 1.0.0)\n@see sqlite_create_aggregate() - Register an aggregating UDF for use in\nSQL statements\n
sqlite_current sqlite_current(resource $result [, int $result_type=SQLITE_BOTH\n[, bool $decode_binary=true]]) [array]\nFetches the current row from a result set as an array. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_seek() - Seek to a particular row number of a buffered result set\n@see sqlite_next() - Seek to the next row number\n@see sqlite_fetch_array() - Fetches the next row from a result set as an array\n
sqlite_error_string sqlite_error_string(int $error_code) [string]\nReturns the textual description of an error code. Returns a human readable\ndescription of the `error_code` returned from sqlite_last_error().\n@param error_code The error code being used, which might be passed in from\nsqlite_last_error().\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_last_error() - Returns the error code of the last error for\na database\n
sqlite_escape_string sqlite_escape_string(string $item) [string]\nEscapes a string for use as a query parameter. sqlite_escape_string() will\ncorrectly quote the string specified by `item` for use in an SQLite SQL\nstatement. This includes doubling up single-quote characters (`&#039;`)\nand checking for binary-unsafe characters in the query string. Although\nthe encoding makes it safe to insert the data, it will render simple text\ncomparisons and `LIKE` clauses in your queries unusable for the columns\nthat contain the binary data. In practice, this shouldn&#039;t be a problem,\nas your schema should be such that you don&#039;t use such things on binary\ncolumns (in fact, it might be better to store binary data using other means,\nsuch as in files).\n@param item The string being quoted. If the `item` contains a `NUL` character,\nor if it begins with a character whose ordinal value is `0x01`, PHP will apply\na binary encoding scheme so that you can safely store and retrieve binary data.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@note Note: Do not use this function to encode the return values from\nUDF&#039;s created using sqlite_create_function() or sqlite_create_aggregate()\n- use sqlite_udf_encode_binary() instead.\n@see sqlite_udf_encode_binary() - Encode binary data before returning it\nfrom an UDF\n
sqlite_exec sqlite_exec(resource $dbhandle, string $query [, string\n&$error_msg]) [bool]\nExecutes a result-less query against a given database. Object oriented style\n(method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param query The query to be executed. Data inside the query should be\nproperly escaped.\n@param error_msg The specified variable will be filled if an error occurs. This\nis specially important because SQL syntax errors can&#039;t be fetched using\nthe sqlite_last_error() function.\n@return (PHP 5, PECL sqlite >= 1.0.3)\n@see sqlite_query() - Executes a query against a given database and returns\na result handle\n@see sqlite_unbuffered_query() - Execute a query that does not prefetch and\nbuffer all data\n@see sqlite_array_query() - Execute a query against a given database and\nreturns an array\n
sqlite_factory sqlite_factory(string $filename [, int $mode=0666 [, string\n&$error_message]]) [SQLiteDatabase]\nOpens an SQLite database and returns an SQLiteDatabase object. sqlite_factory()\nbehaves similarly to sqlite_open() in that it opens an SQLite database or\nattempts to create it if it does not exist. However, a SQLiteDatabase object\nis returned rather than a resource. Please see the sqlite_open() reference\npage for further usage and caveats.\n@param filename The filename of the SQLite database.\n@param mode The mode of the file. Intended to be used to open the database\nin read-only mode. Presently, this parameter is ignored by the sqlite\nlibrary. The default value for mode is the octal value `0666` and this is\nthe recommended value.\n@param error_message Passed by reference and is set to hold a descriptive error\nmessage explaining why the database could not be opened if there was an error.\n@return (PHP 5)\n@see sqlite_open() - Opens an SQLite database and create the database if it\ndoes not exist\n@see sqlite_popen() - Opens a persistent handle to an SQLite database and\ncreate the database if it does not exist\n
sqlite_fetch_all sqlite_fetch_all(resource $result [, int\n$result_type=SQLITE_BOTH [, bool $decode_binary=true]]) [array]\nFetches all rows from a result set as an array of arrays. Object oriented\nstyle (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_fetch_array() - Fetches the next row from a result set as an array\n
sqlite_fetch_array sqlite_fetch_array(resource $result [, int\n$result_type=SQLITE_BOTH [, bool $decode_binary=true]]) [array]\nFetches the next row from a result set as an array. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_array_query() - Execute a query against a given database and\nreturns an array\n@see sqlite_fetch_string() - Alias of sqlite_fetch_single\n
sqlite_fetch_column_types sqlite_fetch_column_types(string $table_name,\nresource $dbhandle [, int $result_type]) [array]\nReturn an array of column types from a particular table. Object oriented style\n(method):\n@param table_name The table name to query.\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_ASSOC is the default\nfor this function.\n@return (PHP 5)\n
sqlite_fetch_object sqlite_fetch_object(resource $result [, string $class_name\n[, array $ctor_params [, bool $decode_binary=true]]]) [object]\nFetches the next row from a result set as an object. Object oriented style\n(method):\n
sqlite_fetch_single sqlite_fetch_single(resource $result [, bool\n$decode_binary=true]) [string]\nFetches the first column of a result set as a string. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param decode_binary When the `decode_binary` parameter is set to TRUE (the\ndefault), PHP will decode the binary encoding it applied to the data if it\nwas encoded using the sqlite_escape_string(). You should normally leave this\nvalue at its default, unless you are interoperating with databases created\nby other sqlite capable applications.\n@return (PHP 5, PECL sqlite >= 1.0.1)\n@see sqlite_fetch_array() - Fetches the next row from a result set as an array\n
sqlite_fetch_string sqlite_fetch_string\nAlias of sqlite_fetch_single.\n
sqlite_field_name sqlite_field_name(resource $result, int $field_index)\n[string]\nReturns the name of a particular field. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@param field_index The ordinal column number in the result set.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n
sqlite_has_more sqlite_has_more(resource $result) [bool]\nFinds whether or not more rows are available. Finds whether more rows are\navailable from the given result set.\n@param result The SQLite result resource.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_num_rows() - Returns the number of rows in a buffered result set\n@see sqlite_changes() - Returns the number of rows that were changed by the\nmost recent SQL statement\n
sqlite_has_prev sqlite_has_prev(resource $result) [bool]\nReturns whether or not a previous row is available. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5)\n@see sqlite_prev() - Seek to the previous row number of a result set\n@see sqlite_has_more() - Finds whether or not more rows are available\n@see sqlite_num_rows() - Returns the number of rows in a buffered result set\n
sqlite_key sqlite_key(resource $result) [int]\nReturns the current row index. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5 >= 5.1.0)\n@see sqlite_next() - Seek to the next row number\n@see sqlite_current() - Fetches the current row from a result set as an array\n@see sqlite_rewind() - Seek to the first row number\n
sqlite_last_error sqlite_last_error(resource $dbhandle) [int]\nReturns the error code of the last error for a database. Object oriented style\n(method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_error_string() - Returns the textual description of an error code\n
sqlite_last_insert_rowid sqlite_last_insert_rowid(resource $dbhandle) [int]\nReturns the rowid of the most recently inserted row. Object oriented style\n(method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n
sqlite_libencoding sqlite_libencoding(void) [string]\nReturns the encoding of the linked SQLite library. The SQLite library may be\ncompiled in either `ISO-8859-1` or `UTF-8` compatible modes. This function\nallows you to determine which encoding scheme is used by your version of\nthe library. The default PHP distribution builds libsqlite in `ISO-8859-1`\nencoding mode. However, this is a misnomer; rather than handling `ISO-8859-1`,\nit operates according to your current locale settings for string comparisons\nand sort ordering. So, rather than `ISO-8859-1`, you should think of it as\nbeing &#039;`8-bit`&#039; instead.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_lib_version()\n
sqlite_libversion sqlite_libversion(void) [string]\nReturns the version of the linked SQLite library. Returns the version of\nthe linked SQLite library.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_libencoding() - Returns the encoding of the linked SQLite library\n
sqlite_next sqlite_next(resource $result) [bool]\nSeek to the next row number. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_seek() - Seek to a particular row number of a buffered result set\n@see sqlite_current() - Fetches the current row from a result set as an array\n@see sqlite_rewind() - Seek to the first row number\n
sqlite_num_fields sqlite_num_fields(resource $result) [int]\nReturns the number of fields in a result set. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_changes() - Returns the number of rows that were changed by the\nmost recent SQL statement\n@see sqlite_num_rows() - Returns the number of rows in a buffered result set\n
sqlite_num_rows sqlite_num_rows(resource $result) [int]\nReturns the number of rows in a buffered result set. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_changes() - Returns the number of rows that were changed by the\nmost recent SQL statement\n@see sqlite_query() - Executes a query against a given database and returns\na result handle\n@see sqlite_num_fields() - Returns the number of fields in a result set\n
sqlite_open sqlite_open(string $filename [, int $mode=0666 [, string\n&$error_message]]) [resource]\nOpens an SQLite database and create the database if it does not exist. Object\noriented style (constructor):\n@param filename The filename of the SQLite database. If the file does not\nexist, SQLite will attempt to create it. PHP must have write permissions to\nthe file if data is inserted, the database schema is modified or to create\nthe database if it does not exist.\n@param mode The mode of the file. Intended to be used to open the database\nin read-only mode. Presently, this parameter is ignored by the sqlite\nlibrary. The default value for mode is the octal value `0666` and this is\nthe recommended value.\n@param error_message Passed by reference and is set to hold a descriptive error\nmessage explaining why the database could not be opened if there was an error.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_popen() - Opens a persistent handle to an SQLite database and\ncreate the database if it does not exist\n@see sqlite_close() - Closes an open SQLite database\n@see sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase\nobject\n
sqlite_popen sqlite_popen(string $filename [, int $mode=0666 [, string\n&$error_message]]) [resource]\nOpens a persistent handle to an SQLite database and create the database if\nit does not exist.\n@param filename The filename of the SQLite database. If the file does not\nexist, SQLite will attempt to create it. PHP must have write permissions to\nthe file if data is inserted, the database schema is modified or to create\nthe database if it does not exist.\n@param mode The mode of the file. Intended to be used to open the database\nin read-only mode. Presently, this parameter is ignored by the sqlite\nlibrary. The default value for mode is the octal value `0666` and this is\nthe recommended value.\n@param error_message Passed by reference and is set to hold a descriptive error\nmessage explaining why the database could not be opened if there was an error.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_open() - Opens an SQLite database and create the database if it\ndoes not exist\n@see sqlite_close() - Closes an open SQLite database\n@see sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase\nobject\n
sqlite_prev sqlite_prev(resource $result) [bool]\nSeek to the previous row number of a result set. Object oriented style\n(method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5)\n@see sqlite_has_prev() - Returns whether or not a previous row is available\n@see sqlite_rewind() - Seek to the first row number\n@see sqlite_next() - Seek to the next row number\n
sqlite_query sqlite_query(resource $dbhandle, string $query [, int $result_type\n[, string &$error_msg]]) [resource]\nExecutes a query against a given database and returns a result handle. Object\noriented style (method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param query The query to be executed. Data inside the query should be\nproperly escaped.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param error_msg The specified variable will be filled if an error occurs. This\nis specially important because SQL syntax errors can&#039;t be fetched using\nthe sqlite_last_error() function.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_unbuffered_query() - Execute a query that does not prefetch and\nbuffer all data\n@see sqlite_array_query() - Execute a query against a given database and\nreturns an array\n
sqlite_rewind sqlite_rewind(resource $result) [bool]\nSeek to the first row number. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_next() - Seek to the next row number\n@see sqlite_current() - Fetches the current row from a result set as an array\n@see sqlite_seek() - Seek to a particular row number of a buffered result set\n
sqlite_seek sqlite_seek(resource $result, int $rownum) [bool]\nSeek to a particular row number of a buffered result set. Object oriented\nstyle (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@param rownum The ordinal row number to seek to. The row number is zero-based\n(0 is the first row). Note: This function cannot be used with unbuffered\nresult handles.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_next() - Seek to the next row number\n@see sqlite_current() - Fetches the current row from a result set as an array\n@see sqlite_rewind() - Seek to the first row number\n
sqlite_single_query sqlite_single_query(resource $db, string $query [,\nbool $first_row_only [, bool $decode_binary]]) [array]\nExecutes a query and returns either an array for one single column or the\nvalue of the first row. Object oriented style (method):\n
sqlite_udf_decode_binary sqlite_udf_decode_binary(string $data) [string]\nDecode binary data passed as parameters to an UDF. Decodes binary data\npassed as parameters to a UDF. You must call this function on parameters\npassed to your UDF if you need them to handle binary data, as the binary\nencoding employed by PHP will obscure the content and of the parameter in its\nnatural, non-coded form. PHP does not perform this encode/decode operation\nautomatically as it would severely impact performance if it did.\n@param data The encoded data that will be decoded, data that was applied by\neither sqlite_udf_encode_binary() or sqlite_escape_string().\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_udf_encode_binary() - Encode binary data before returning it\nfrom an UDF\n@see sqlite_create_function() - Registers a &quot;regular&quot; User Defined\nFunction for use in SQL statements\n@see sqlite_create_aggregate() - Register an aggregating UDF for use in\nSQL statements\n
sqlite_udf_encode_binary sqlite_udf_encode_binary(string $data) [string]\nEncode binary data before returning it from an UDF. sqlite_udf_encode_binary()\napplies a binary encoding to the `data` so that it can be safely returned\nfrom queries (since the underlying libsqlite API is not binary safe). If\nthere is a chance that your data might be binary unsafe (e.g.: it contains\na NUL byte in the middle rather than at the end, or if it has and `0x01`\nbyte as the first character) then you must call this function to encode the\nreturn value from your UDF. PHP does not perform this encode/decode operation\nautomatically as it would severely impact performance if it did. Note: Do not\nuse sqlite_escape_string() to quote strings returned from UDF&#039;s as it will\nlead to double-quoting of the data. Use sqlite_udf_encode_binary() instead!\n@param data The string being encoded.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_udf_decode_binary() - Decode binary data passed as parameters\nto an UDF\n@see sqlite_escape_string() - Escapes a string for use as a query parameter\n@see sqlite_create_function() - Registers a &quot;regular&quot; User Defined\nFunction for use in SQL statements\n@see sqlite_create_aggregate() - Register an aggregating UDF for use in\nSQL statements\n
sqlite_unbuffered_query sqlite_unbuffered_query(resource $dbhandle, string\n$query [, int $result_type [, string &$error_msg]]) [resource]\nExecute a query that does not prefetch and buffer all data. Object oriented\nstyle (method):\n@param dbhandle The SQLite Database resource; returned from sqlite_open()\nwhen used procedurally. This parameter is not required when using the\nobject-oriented method.\n@param query The query to be executed. Data inside the query should be\nproperly escaped.\n@param result_type The optional `result_type` parameter accepts a constant\nand determines how the returned array will be indexed. Using SQLITE_ASSOC\nwill return only associative indices (named fields) while SQLITE_NUM will\nreturn only numerical indices (ordinal field numbers). SQLITE_BOTH will\nreturn both associative and numerical indices. SQLITE_BOTH is the default\nfor this function.\n@param error_msg The specified variable will be filled if an error occurs. This\nis specially important because SQL syntax errors can&#039;t be fetched using\nthe sqlite_last_error() function.\n@return (PHP 5, PECL sqlite >= 1.0.0)\n@see sqlite_query() - Executes a query against a given database and returns\na result handle\n
sqlite_valid sqlite_valid(resource $result) [bool]\nReturns whether more rows are available. Object oriented style (method):\n@param result The SQLite result resource. This parameter is not required\nwhen using the object-oriented method. Note: This function cannot be used\nwith unbuffered result handles.\n@return (PHP 5)\n@see sqlite_num_rows() - Returns the number of rows in a buffered result set\n@see sqlite_changes() - Returns the number of rows that were changed by the\nmost recent SQL statement\n
sqrt sqrt(float $arg) [float]\nSquare root. Returns the square root of `arg`.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see pow() - Exponential expression\n
srand srand([int $seed]) [void]\nSeed the random number generator. Seeds the random number generator with\n`seed` or with a random value if no `seed` is given. Note: As of PHP 4.2.0,\nthere is no need to seed the random number generator with srand() or mt_srand()\nas this is now done automatically.\n@param seed Optional seed value\n@return (PHP 4, PHP 5)\n@see rand() - Generate a random integer\n@see getrandmax() - Show largest possible random value\n@see mt_srand() - Seed the better random number generator\n
sscanf sscanf(string $str, string $format [, mixed &$...]) [mixed]\nParses input from a string according to a format. The function sscanf()\nis the input analog of printf(). sscanf() reads from the string `str` and\ninterprets it according to the specified `format`, which is described in the\ndocumentation for sprintf(). Any whitespace in the format string matches any\nwhitespace in the input string. This means that even a tab \t in the format\nstring can match a single space character in the input string.\n@param str The input string being parsed.\n@param format The interpreted format for `str`, which is described in\nthe documentation for sprintf() with following differences: Function is\nnot locale-aware. `F`, `g`, `G` and `b` are not supported. `D` stands for\ndecimal number. `i` stands for integer with base detection. `n` stands for\nnumber of characters processed so far.\n@param ... Optionally pass in variables by reference that will contain the\nparsed values.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see fscanf() - Parses input from a file according to a format\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n
ssdeep_fuzzy_compare ssdeep_fuzzy_compare(string $signature1, string\n$signature2) [int]\nCalculates the match score between two fuzzy hash signatures. Calculates\nthe match score between `signature1` and `signature2` using &raquo;\ncontext-triggered piecewise hashing, and returns the match score.\n@param signature1 The first fuzzy hash signature string.\n@param signature2 The second fuzzy hash signature string.\n@return (PECL ssdeep >= 1.0.0)\n
ssdeep_fuzzy_hash_filename ssdeep_fuzzy_hash_filename(string $file_name)\n[string]\nCreate a fuzzy hash from a file. ssdeep_fuzzy_hash_filename() calculates the\nhash of the file specified by `file_name` using &raquo; context-triggered\npiecewise hashing, and returns that hash.\n@param file_name The filename of the file to hash.\n@return (PECL ssdeep >= 1.0.0)\n
getCause SDO_Exception::getCause(void) [mixed]\nGet the cause of the exception..\n@return (^)\n
insert SDO_List::insert(mixed $value [, int $index]) [void]\nInsert into a list.\n@param  `value` The new value to be inserted. This can be either a primitive\nor an SDO_DataObject.\n@param  `index` The position at which to insert the new element. If this\nargument is not specified then the new value will be appended.\n@return (^)\n
getContainingType SDO_Model_Property::getContainingType(void) [SDO_Model_Type]\nGet the SDO_Model_Type which contains this property.\n@return (^)\n
getDefault SDO_Model_Property::getDefault(void) [mixed]\nGet the default value for the property.\n@return (^)\n
getName SDO_Model_Property::getName(void) [string]\nGet the name of the SDO_Model_Property.\n@return (^)\n
getType SDO_Model_Property::getType(void) [SDO_Model_Type]\nGet the SDO_Model_Type of the property.\n@return (^)\n
isContainment SDO_Model_Property::isContainment(void) [bool]\nTest to see if the property defines a containment relationship.\n@return (^)\n
isMany SDO_Model_Property::isMany(void) [bool]\nTest to see if the property is many-valued.\n@return (^)\n
__construct SDO_Model_ReflectionDataObject::__construct(SDO_DataObject\n$data_object) [SDO_Model_ReflectionDataObject]\nConstruct an SDO_Model_ReflectionDataObject.\n@param data_object The SDO_DataObject being reflected upon.\n@return (^)\n
export SDO_Model_ReflectionDataObject::export(SDO_Model_ReflectionDataObject\n$rdo [, bool $return]) [mixed]\nGet a string describing the SDO_DataObject..\n@param rdo An SDO_Model_ReflectionDataObject.\n@param return If TRUE, return the output as a string, otherwise print it.\n@return (^)\n
getContainmentProperty\nSDO_Model_ReflectionDataObject::getContainmentProperty(void)\n[SDO_Model_Property]\nGet the property which defines the containment relationship to the data object.\n@return (^)\n
getInstanceProperties\nSDO_Model_ReflectionDataObject::getInstanceProperties(void) [array]\nGet the instance properties of the SDO_DataObject.\n@return (^)\n
getType SDO_Model_ReflectionDataObject::getType(void) [SDO_Model_Type]\nGet the SDO_Model_Type for the SDO_DataObject.\n@return (^)\n
getBaseType SDO_Model_Type::getBaseType(void) [SDO_Model_Type]\nGet the base type for this type.\n@return (^)\n
getName SDO_Model_Type::getName(void) [string]\nGet the name of the type.\n@return (^)\n
getNamespaceURI SDO_Model_Type::getNamespaceURI(void) [string]\nGet the namespace URI of the type.\n@return (^)\n
getProperties SDO_Model_Type::getProperties(void) [array]\nGet the SDO_Model_Property objects defined for the type.\n@return (^)\n
getProperty SDO_Model_Type::getProperty(mixed $identifier) [SDO_Model_Property]\nGet an SDO_Model_Property of the type.\n@param identifier The property index or property name.\n@return (^)\n
isAbstractType SDO_Model_Type::isAbstractType(void) [bool]\nTest to see if this SDO_Model_Type is an abstract data type.\n@return (^)\n
isDataType SDO_Model_Type::isDataType(void) [bool]\nTest to see if this SDO_Model_Type is a primitive data type.\n@return (^)\n
isInstance SDO_Model_Type::isInstance(SDO_DataObject $data_object) [bool]\nTest for an SDO_DataObject being an instance of this SDO_Model_Type.\n@param data_object The SDO_DataObject to be tested.\n@return (^)\n
isOpenType SDO_Model_Type::isOpenType(void) [bool]\nTest to see if this type is an open type.\n@return (^)\n
isSequencedType SDO_Model_Type::isSequencedType(void) [bool]\nTest to see if this is a sequenced type.\n@return (^)\n
getProperty SDO_Sequence::getProperty(int $sequence_index) [SDO_Model_Property]\nReturn the property for the specified sequence index..\n@param sequence_index The position of the element in the sequence.\n@return (^)\n
insert SDO_Sequence::insert(mixed $value [, int $sequenceIndex [, mixed\n$propertyIdentifier]]) [void]\nInsert into a sequence.\n@param  `value` The new value to be inserted. This can be either a primitive\nor an SDO_DataObject.\n@param  `sequenceIndex` The position at which to insert the new\nelement. Default is NULL, which results in the new value being appended to\nthe sequence.\n@param  `propertyIdentifier` Either a property index, a property name, or\nan SDO_Model_Property, used to identify a property in the sequence&#039;s\ncorresponding SDO_DataObject. A value of NULL signifies unstructured text.\n@return (^)\n
move SDO_Sequence::move(int $toIndex, int $fromIndex) [void]\nMove an item to another sequence position.\n@param  `toIndex` The destination sequence index. If this index is less than\nzero or greater than the size of the sequence then the value is appended.\n@param  `fromIndex` The source sequence index.\n@return (^)\n
sem_acquire sem_acquire(resource $sem_identifier) [bool]\nAcquire a semaphore. sem_acquire() blocks (if necessary) until the semaphore\ncan be acquired. A process attempting to acquire a semaphore which it has\nalready acquired will block forever if acquiring the semaphore would cause\nits maximum number of semaphore to be exceeded. After processing a request,\nany semaphores acquired by the process but not explicitly released will be\nreleased automatically and a warning will be generated.\n@param sem_identifier `sem_identifier` is a semaphore resource, obtained\nfrom sem_get().\n@return (PHP 4, PHP 5)\n@see sem_get() - Get a semaphore id\n@see sem_release() - Release a semaphore\n
sem_get sem_get(int $key [, int $max_acquire=1 [, int $perm=0666 [, int\n$auto_release=1]]]) [resource]\nGet a semaphore id. sem_get() returns an id that can be used to access the\nSystem V semaphore with the given `key`. A second call to sem_get() for the\nsame key will return a different semaphore identifier, but both identifiers\naccess the same underlying semaphore.\n@param key\n@param max_acquire The number of processes that can acquire the semaphore\nsimultaneously is set to `max_acquire`.\n@param perm The semaphore permissions. Actually this value is set only if\nthe process finds it is the only process currently attached to the semaphore.\n@param auto_release Specifies if the semaphore should be automatically\nreleased on request shutdown.\n@return (PHP 4, PHP 5)\n@see sem_acquire() - Acquire a semaphore\n@see sem_release() - Release a semaphore\n@see ftok() - Convert a pathname and a project identifier to a System V IPC key\n
sem_release sem_release(resource $sem_identifier) [bool]\nRelease a semaphore. sem_release() releases the semaphore if it is currently\nacquired by the calling process, otherwise a warning is generated. After\nreleasing the semaphore, sem_acquire() may be called to re-acquire it.\n@param sem_identifier A Semaphore resource handle as returned by sem_get().\n@return (PHP 4, PHP 5)\n@see sem_get() - Get a semaphore id\n@see sem_acquire() - Acquire a semaphore\n
sem_remove sem_remove(resource $sem_identifier) [bool]\nRemove a semaphore. sem_remove() removes the given semaphore. After removing\nthe semaphore, it is no longer accessible.\n@param sem_identifier A semaphore resource identifier as returned by sem_get().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see sem_get() - Get a semaphore id\n@see sem_release() - Release a semaphore\n@see sem_acquire() - Acquire a semaphore\n
serialize serialize(mixed $value) [string]\nGenerates a storable representation of a value. Generates a storable\nrepresentation of a value This is useful for storing or passing PHP values\naround without losing their type and structure. To make the serialized string\ninto a PHP value again, use unserialize().\n@param value The value to be serialized. serialize() handles all types, except\nthe resource-type. You can even serialize() arrays that contain references\nto itself. Circular references inside the array/object you are serializing\nwill also be stored. Any other reference will be lost. When serializing\nobjects, PHP will attempt to call the member function __sleep prior to\nserialization. This is to allow the object to do any last minute clean-up,\netc. prior to being serialized. Likewise, when the object is restored using\nunserialize() the __wakeup member function is called. Note: Object&#039;s\nprivate members have the class name prepended to the member name; protected\nmembers have a &#039;*&#039; prepended to the member name. These prepended\nvalues have null bytes on either side.\n@return (PHP 4, PHP 5)\n@note Note: Note that many built-in PHP objects cannot be serialized. However,\nthose with this ability either implement the Serializable interface or the\nmagic `__sleep` and `__wakeup` methods. If an internal class does not fulfill\nany of those requirements, it cannot reliably be serialized. There are some\nhistorical exceptions to the above rule, where some internal objects could be\nserialized without implementing the interface or exposing the methods. Notably,\nthe ArrayObject prior to PHP 5.2.0.\n@see unserialize() - Creates a PHP value from a stored representation\n@see Serializing Objects\n
session_cache_expire session_cache_expire([string $new_cache_expire]) [int]\nReturn current cache expire. session_cache_expire() returns the current setting\nof `session.cache_expire`. The cache expire is reset to the default value of\n180 stored in session.cache_expire at request startup time. Thus, you need\nto call session_cache_expire() for every request (and before session_start()\nis called).\n@param new_cache_expire If `new_cache_expire` is given, the current cache\nexpire is replaced with `new_cache_expire`. Note: Setting `new_cache_expire`\nis of value only, if `session.cache_limiter` is set to a value different from\n`nocache`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see session.cache_expire\n@see session.cache_limiter\n@see session_cache_limiter() - Get and/or set the current cache limiter\n
session_cache_limiter session_cache_limiter([string $cache_limiter]) [string]\nGet and/or set the current cache limiter. session_cache_limiter() returns\nthe name of the current cache limiter. The cache limiter defines which cache\ncontrol HTTP headers are sent to the client. These headers determine the\nrules by which the page content may be cached by the client and intermediate\nproxies. Setting the cache limiter to `nocache` disallows any client/proxy\ncaching. A value of `public` permits caching by proxies and the client,\nwhereas `private` disallows caching by proxies and permits the client to\ncache the contents. In `private` mode, the Expire header sent to the client\nmay cause confusion for some browsers, including Mozilla. You can avoid this\nproblem by using `private_no_expire` mode. The `Expire` header is never sent\nto the client in this mode. The cache limiter is reset to the default value\nstored in session.cache_limiter at request startup time. Thus, you need to\ncall session_cache_limiter() for every request (and before session_start()\nis called).\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see session.cache_limiter\n
session_commit session_commit\nAlias of session_write_close.\n
session_decode session_decode(string $data) [bool]\nDecodes session data from a string. session_decode() decodes the session\ndata in `data`, setting variables stored in the session.\n@param data The encoded data to be stored.\n@return (PHP 4, PHP 5)\n@see session_encode() - Encodes the current session data as a string\n
session_destroy session_destroy(void) [bool]\nDestroys all data registered to a session.\n@return (PHP 4, PHP 5)\n@note Note: Only use session_unset() for older deprecated code that does\nnot use $_SESSION.\n@see unset() - Unset a given variable\n@see setcookie() - Send a cookie\n
session_encode session_encode(void) [string]\nEncodes the current session data as a string. session_encode() returns a\nstring with the contents of the current session encoded within.\n@return (PHP 4, PHP 5)\n@see session_decode() - Decodes session data from a string\n
session_get_cookie_params session_get_cookie_params(void) [array]\nGet the session cookie parameters. Gets the session cookie parameters.\n@return (PHP 4, PHP 5)\n@see session.cookie_lifetime\n@see session.cookie_path\n@see session.cookie_domain\n@see session.cookie_secure\n@see session.cookie_httponly\n@see session_set_cookie_params() - Set the session cookie parameters\n
session_id session_id([string $id]) [string]\nGet and/or set the current session id. session_id() is used to get or set\nthe session id for the current session. The constant SID can also be used\nto retrieve the current name and session id as a string suitable for adding\nto URLs. See also Session handling.\n@param id If `id` is specified, it will replace the current session\nid. session_id() needs to be called before session_start() for that\npurpose. Depending on the session handler, not all characters are allowed\nwithin the session id. For example, the file session handler only allows\ncharacters in the range `a-z A-Z 0-9 , (comma) and - (minus)`! Note: When\nusing session cookies, specifying an `id` for session_id() will always send a\nnew cookie when session_start() is called, regardless if the current session\nid is identical to the one being set.\n@return (PHP 4, PHP 5)\n@see session_regenerate_id() - Update the current session id with a newly\ngenerated one\n@see session_start() - Initialize session data\n@see session_set_save_handler() - Sets user-level session storage functions\n@see session.save_handler\n
session_is_registered session_is_registered(string $name) [bool]\nFind out whether a global variable is registered in a session. Finds out\nwhether a global variable is registered in a session. This function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.\n@param name The variable name.\n@return (PHP 4, PHP 5)\n@note Note: If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less)\nis used, use isset() to check a variable is registered in $_SESSION.\n
session_module_name session_module_name([string $module]) [string]\nGet and/or set the current session module. session_module_name() gets the\nname of the current session module.\n@param module If `module` is specified, that module will be used instead.\n@return (PHP 4, PHP 5)\n
session_name session_name([string $name]) [string]\nGet and/or set the current session name. session_name() returns the name\nof the current session. If `name` is given, session_name() will update the\nsession name and return the `old` session name. The session name is reset\nto the default value stored in `session.name` at request startup time. Thus,\nyou need to call session_name() for every request (and before session_start()\nor session_register() are called).\n@return (PHP 4, PHP 5)\n@see The session.name configuration directive\n
session_pgsql_add_error session_pgsql_add_error(int $error_level [, string\n$error_message]) [bool]\nIncrements error counts and sets last error message.\n@param error_level\n@param error_message\n@return (PECL session_pgsql SVN)\n@see session_pgsql_get_error() - Returns number of errors and last error\nmessage\n
session_pgsql_get_error session_pgsql_get_error([bool\n$with_error_message=false]) [array]\nReturns number of errors and last error message. Get the number of errors\nand optional the error messages.\n@param with_error_message Set to TRUE the literal error message for each\nerror is also returned.\n@return (PECL session_pgsql SVN)\n@see session_pgsql_add_error() - Increments error counts and sets last\nerror message\n
session_pgsql_get_field session_pgsql_get_field(void) [string]\nGet custom field value.\n@see session_pgsql_set_field() - Set custom field value\n
session_pgsql_reset session_pgsql_reset(void) [bool]\nReset connection to session database servers. Reset the connection to the\nsession database servers.\n@return (PECL session_pgsql SVN)\n
session_pgsql_set_field session_pgsql_set_field(string $value) [bool]\nSet custom field value.\n@param value\n@return (PECL session_pgsql SVN)\n@see session_pgsql_get_field() - Get custom field value\n
session_pgsql_status session_pgsql_status(void) [array]\nGet current save handler status.\n
session_regenerate_id session_regenerate_id([bool $delete_old_session=false])\n[bool]\nUpdate the current session id with a newly generated\none. session_regenerate_id() will replace the current session id with a new\none, and keep the current session information.\n@param delete_old_session Whether to delete the old associated session file\nor not.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@see session_id() - Get and/or set the current session id\n@see session_start() - Initialize session data\n@see session_name() - Get and/or set the current session name\n
session_register session_register(mixed $name [, mixed $...]) [bool]\nRegister one or more global variables with the current\nsession. session_register() accepts a variable number of arguments, any\nof which can be either a string holding the name of a variable or an array\nconsisting of variable names or other arrays. For each name, session_register()\nregisters the global variable with that name in the current session.\n@param name A string holding the name of a variable or an array consisting\nof variable names or other arrays.\n@param ...\n@return (PHP 4, PHP 5)\n@see session_is_registered() - Find out whether a global variable is registered\nin a session\n@see session_unregister() - Unregister a global variable from the current\nsession\n@see $_SESSION\n
session_save_path session_save_path([string $path]) [string]\nGet and/or set the current session save path. session_save_path() returns\nthe path of the current directory used to save session data.\n@param path Session data path. If specified, the path to which data is saved\nwill be changed. session_save_path() needs to be called before session_start()\nfor that purpose. Note: On some operating systems, you may want to specify\na path on a filesystem that handles lots of small files efficiently. For\nexample, on Linux, reiserfs may provide better performance than ext2fs.\n@return (PHP 4, PHP 5)\n@see The session.save_path configuration directive\n
session_set_cookie_params session_set_cookie_params(int $lifetime [, string\n$path [, string $domain [, bool $secure=false [, bool $httponly=false]]]])\n[void]\nSet the session cookie parameters. Set cookie parameters defined in the\nphp.ini file. The effect of this function only lasts for the duration of\nthe script. Thus, you need to call session_set_cookie_params() for every\nrequest and before session_start() is called.\n@param lifetime Lifetime of the session cookie, defined in seconds.\n@param path Path on the domain where the cookie will work. Use a single slash\n(&#039;/&#039;) for all paths on the domain.\n@param domain Cookie domain, for example &#039;www.php.net&#039;. To make\ncookies visible on all subdomains then the domain must be prefixed with a\ndot like &#039;.php.net&#039;.\n@param secure If TRUE cookie will only be sent over secure connections.\n@param httponly If set to TRUE then PHP will attempt to send the httponly\nflag when setting the session cookie.\n@return (PHP 4, PHP 5)\n@see session.cookie_lifetime\n@see session.cookie_domain\n@see session.cookie_secure\n@see session.cookie_httponly\n@see session_get_cookie_params() - Get the session cookie parameters\n
session_set_save_handler session_set_save_handler(callback $open, callback\n$close, callback $read, callback $write, callback $destroy, callback $gc)\n[bool]\nSets user-level session storage functions. session_set_save_handler() sets\nthe user-level session storage functions which are used for storing and\nretrieving data associated with a session. This is most useful when a storage\nmethod other than those supplied by PHP sessions is preferred. i.e. Storing\nthe session data in a local database.\n@param open Open function, this works like a constructor in classes and\nis executed when the session is being opened. The open function expects\ntwo parameters, where the first is the save path and the second is the\nsession name.\n@param close Close function, this works like a destructor in classes and is\nexecuted when the session operation is done.\n@param read Read function must return string value always to make save handler\nwork as expected. Return empty string if there is no data to read. Return\nvalues from other handlers are converted to boolean expression. TRUE for\nsuccess, FALSE for failure.\n@param write Write function that is called when session data is to be\nsaved. This function expects two parameters: an identifier and the data\nassociated with it. Note: The &quot;write&quot; handler is not executed until\nafter the output stream is closed. Thus, output from debugging statements in\nthe &quot;write&quot; handler will never be seen in the browser. If debugging\noutput is necessary, it is suggested that the debug output be written to a\nfile instead.\n@param destroy The destroy handler, this is executed when a session is\ndestroyed with session_destroy() and takes the session id as its only\nparameter.\n@param gc The garbage collector, this is executed when the session garbage\ncollector is executed and takes the max session lifetime as its only parameter.\n@return (PHP 4, PHP 5)\n@see The session.save_handler configuration directive\n
session_start session_start(void) [bool]\nInitialize session data. session_start() creates a session or resumes\nthe current one based on a session identifier passed via a GET or POST\nrequest, or passed via a cookie. To use a named session, call session_name()\nbefore calling session_start(). When session.use_trans_sid is enabled, the\nsession_start() function will register an internal output handler for URL\nrewriting. If a user uses `ob_gzhandler` or similar with ob_start(), the\nfunction order is important for proper output. For example, `ob_gzhandler`\nmust be registered before starting the session.\n@return (PHP 4, PHP 5)\n@note Note: To use cookie-based sessions, session_start() must be called\nbefore outputing anything to the browser.\n@note Note: Use of zlib.output_compression is recommended instead of\nob_gzhandler()\n@note Note: This function sends out several HTTP headers depending on the\nconfiguration. See session_cache_limiter() to customize these headers.\n@see $_SESSION\n@see The session.auto_start configuration directive\n@see session_id() - Get and/or set the current session id\n
session_unregister session_unregister(string $name) [bool]\nUnregister a global variable from the current session. session_unregister()\nunregisters the global variable named `name` from the current session. This\nfunction has been DEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n@param name The variable name.\n@return (PHP 4, PHP 5)\n@note Note: If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is\nused, use unset() to unregister a session variable. Do not unset() $_SESSION\nitself as this will disable the special function of the $_SESSION superglobal.\n
session_unset session_unset(void) [void]\nFree all session variables. The session_unset() function frees all session\nvariables currently registered.\n@return (PHP 4, PHP 5)\n@note Note: If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less)\nis used, use unset() to unregister a session variable, i.e. `unset\n($_SESSION[&#039;varname&#039;]);`.\n
session_write_close session_write_close(void) [void]\nWrite session data and end session. End the current session and store session\ndata. Session data is usually stored after your script terminated without\nthe need to call session_write_close(), but as session data is locked to\nprevent concurrent writes only one script may operate on a session at any\ntime. When using framesets together with sessions you will experience the\nframes loading one by one due to this locking. You can reduce the time\nneeded to load all the frames by ending the session as soon as all changes\nto session variables are done.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
set_error_handler set_error_handler(callback $error_handler [, int\n$error_types=E_ALL | E_STRICT]) [mixed]\nSets a user-defined error handler function. Sets a user function\n(`error_handler`) to handle errors in a script. This function can be used\nfor defining your own way of handling errors during runtime, for example in\napplications in which you need to do cleanup of data/files when a critical\nerror happens, or when you need to trigger an error under certain conditions\n(using trigger_error()). It is important to remember that the standard\nPHP error handler is completely bypassed for the error types specified by\n`error_types` unless the callback function returns FALSE. error_reporting()\nsettings will have no effect and your error handler will be called regardless\n- however you are still able to read the current value of error_reporting\nand act appropriately. Of particular note is that this value will be 0 if\nthe statement that caused the error was prepended by the @ error-control\noperator. Also note that it is your responsibility to die() if necessary. If\nthe error-handler function returns, script execution will continue with\nthe next statement after the one that caused an error. The following error\ntypes cannot be handled with a user defined function: E_ERROR, E_PARSE,\nE_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING, and most of\nE_STRICT raised in the file where set_error_handler() is called. If errors\noccur before the script is executed (e.g. on file uploads) the custom error\nhandler cannot be called since it is not registered at that time.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see ErrorException\n@see error_reporting() - Sets which PHP errors are reported\n@see restore_error_handler() - Restores the previous error handler function\n@see trigger_error() - Generates a user-level error/warning/notice message\n@see error level constants\n@see information about the callback type\n
set_exception_handler set_exception_handler(callback $exception_handler)\n[callback]\nSets a user-defined exception handler function. Sets the default exception\nhandler if an exception is not caught within a try/catch block. Execution\nwill stop after the `exception_handler` is called.\n@param exception_handler Name of the function to be called when an\nuncaught exception occurs. This function must be defined before calling\nset_exception_handler(). This handler function needs to accept one parameter,\nwhich will be the exception object that was thrown.\n@return (PHP 5)\n@see restore_exception_handler() - Restores the previously defined exception\nhandler function\n@see restore_error_handler() - Restores the previous error handler function\n@see error_reporting() - Sets which PHP errors are reported\n@see information about the callback type\n@see PHP 5 Exceptions\n
set_file_buffer set_file_buffer\nAlias of stream_set_write_buffer.\n
set_include_path set_include_path(string $new_include_path) [string]\nSets the include_path configuration option. Sets the include_path configuration\noption for the duration of the script.\n@param new_include_path The new value for the include_path\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ini_set() - Sets the value of a configuration option\n@see get_include_path() - Gets the current include_path configuration option\n@see restore_include_path() - Restores the value of the include_path\nconfiguration option\n@see include() - include\n
set_magic_quotes_runtime set_magic_quotes_runtime(bool $new_setting) [bool]\nSets the current active configuration setting of magic_quotes_runtime. Set the\ncurrent active configuration setting of magic_quotes_runtime. This function has\nbeen DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.\n@param new_setting FALSE for off, TRUE for on.\n@return (PHP 4, PHP 5)\n@see get_magic_quotes_gpc() - Gets the current configuration setting of\nmagic_quotes_gpc\n@see get_magic_quotes_runtime() - Gets the current active configuration\nsetting of magic_quotes_runtime\n
set_socket_blocking set_socket_blocking\nAlias of stream_set_blocking.\n
set_time_limit set_time_limit(int $seconds) [void]\nLimits the maximum execution time. Set the number of seconds a script is\nallowed to run. If this is reached, the script returns a fatal error. The\ndefault limit is 30 seconds or, if it exists, the `max_execution_time` value\ndefined in the php.ini. When called, set_time_limit() restarts the timeout\ncounter from zero. In other words, if the timeout is the default 30 seconds,\nand 25 seconds into script execution a call such as `set_time_limit(20)`\nis made, the script will run for a total of 45 seconds before timing out.\n@param seconds The maximum execution time, in seconds. If set to zero,\nno time limit is imposed.\n@return (PHP 4, PHP 5)\n@see max_execution_time\n@see max_input_time\n
setcookie setcookie(string $name [, string $value [, int $expire=0 [, string\n$path [, string $domain [, bool $secure=false [, bool $httponly=false]]]]]])\n[bool]\nSend a cookie. setcookie() defines a cookie to be sent along with the rest of\nthe HTTP headers. Like other headers, cookies must be sent before any output\nfrom your script (this is a protocol restriction). This requires that you\nplace calls to this function prior to any output, including `&lt;html>`\nand `&lt;head>` tags as well as any whitespace. Once the cookies have\nbeen set, they can be accessed on the next page load with the $_COOKIE\nor $HTTP_COOKIE_VARS arrays. Note, superglobals such as $_COOKIE became\navailable in PHP 4.1.0. Cookie values also exist in $_REQUEST.\n@param name The name of the cookie.\n@param value The value of the cookie. This value is stored on the\nclients computer; do not store sensitive information. Assuming the\n`name` is `&#039;cookiename&#039;`, this value is retrieved through\n$_COOKIE['cookiename']\n@param expire The time the cookie expires. This is a Unix timestamp so is in\nnumber of seconds since the epoch. In other words, you&#039;ll most likely set\nthis with the time() function plus the number of seconds before you want it to\nexpire. Or you might use mktime(). `time()+60*60*24*30` will set the cookie to\nexpire in 30 days. If set to 0, or omitted, the cookie will expire at the end\nof the session (when the browser closes). Note: You may notice the `expire`\nparameter takes on a Unix timestamp, as opposed to the date format `Wdy,\nDD-Mon-YYYY HH:MM:SS GMT`, this is because PHP does this conversion internally.\n@param path The path on the server in which the cookie will be available\non. If set to `&#039;/&#039;`, the cookie will be available within the entire\n`domain`. If set to `&#039;/foo/&#039;`, the cookie will only be available\nwithin the `/foo/` directory and all sub-directories such as `/foo/bar/`\nof `domain`. The default value is the current directory that the cookie is\nbeing set in.\n@param domain The domain that the cookie is available to. To make the cookie\navailable on all subdomains of example.com (including example.com itself)\nthen you&#039;d set it to `&#039;.example.com&#039;`. Although some browsers\nwill accept cookies without the initial `.`, &raquo; RFC 2109 requires\nit to be included. Setting the domain to `&#039;www.example.com&#039;` or\n`&#039;.www.example.com&#039;` will make the cookie only available in the\n`www` subdomain.\n@param secure Indicates that the cookie should only be transmitted over a\nsecure HTTPS connection from the client. When set to TRUE, the cookie will\nonly be set if a secure connection exists. On the server-side, it&#039;s\non the programmer to send this kind of cookie only on secure connection\n(e.g. with respect to $_SERVER["HTTPS"]).\n@param httponly When TRUE the cookie will be made accessible only through\nthe HTTP protocol. This means that the cookie won&#039;t be accessible by\nscripting languages, such as JavaScript. This setting can effectively help\nto reduce identity theft through XSS attacks (although it is not supported\nby all browsers). Added in PHP 5.2.0. TRUE or FALSE\n@return (PHP 4, PHP 5)\n@note Note: You can use output buffering to send output prior to the call\nof this function, with the overhead of all of your output to the browser\nbeing buffered in the server until you send it. You can do this by calling\nob_start() and ob_end_flush() in your script, or setting the `output_buffering`\nconfiguration directive on in your php.ini or server configuration files.\n@note Note: If the PHP directive register_globals is set to `on` then cookie\nvalues will also be made into variables. In our examples below, $TestCookie\nwill exist. It&#039;s recommended to use $_COOKIE.\n@see header() - Send a raw HTTP header\n@see setrawcookie() - Send a cookie without urlencoding the cookie value\n@see cookies section\n@see &raquo; Original Netscape cookie specification\n@see &raquo; RFC 2109\n@see &raquo; RFC 2965\n
setlocale setlocale(int $category, string $locale [, string $...]) [string]\nSet locale information. Sets locale information.\n@param category `category` is a named constant specifying the category of\nthe functions affected by the locale setting: LC_ALL for all of the below\nLC_COLLATE for string comparison, see strcoll() LC_CTYPE for character\nclassification and conversion, for example strtoupper() LC_MONETARY for\nlocaleconv() LC_NUMERIC for decimal separator (See also localeconv()) LC_TIME\nfor date and time formatting with strftime() LC_MESSAGES for system responses\n(available if PHP was compiled with `libintl`)\n@param locale If `locale` is NULL or the empty string `&quot;&quot;`, the\nlocale names will be set from the values of environment variables with the\nsame names as the above categories, or from &quot;LANG&quot;. If `locale` is\n`&quot;0&quot;`, the locale setting is not affected, only the current setting\nis returned. If `locale` is an array or followed by additional parameters\nthen each array element or parameter is tried to be set as new locale until\nsuccess. This is useful if a locale is known under different names on different\nsystems or for providing a fallback for a possibly not available locale.\n@param ... (Optional string or array parameters to try as locale settings\nuntil success.)\n@return (PHP 4, PHP 5)\n
setrawcookie setrawcookie(string $name [, string $value [, int $expire=0\n[, string $path [, string $domain [, bool $secure=false [, bool\n$httponly=false]]]]]]) [bool]\nSend a cookie without urlencoding the cookie value. setrawcookie() is exactly\nthe same as setcookie() except that the cookie value will not be automatically\nurlencoded when sent to the browser.\n@return (PHP 5)\n@see setcookie() - Send a cookie\n
settype settype(mixed &$var, string $type) [bool]\nSet the type of a variable. Set the type of variable `var` to `type`.\n@param var The variable being converted.\n@param type Possibles values of `type` are: &quot;boolean&quot; (or, since\nPHP 4.2.0, &quot;bool&quot;) &quot;integer&quot; (or, since PHP 4.2.0,\n&quot;int&quot;) &quot;float&quot; (only possible since PHP 4.2.0, for older\nversions use the deprecated variant &quot;double&quot;) &quot;string&quot;\n&quot;array&quot; &quot;object&quot; &quot;null&quot; (since PHP 4.2.0)\n@return (PHP 4, PHP 5)\n@note Note: Maximum value for &quot;int&quot; is PHP_INT_MAX.\n@see gettype() - Get the type of a variable\n@see type-casting\n@see type-juggling\n
sha1_file sha1_file(string $filename [, bool $raw_output=false]) [string]\nCalculate the sha1 hash of a file.\n@param filename The filename of the file to hash.\n@param raw_output When TRUE, returns the digest in raw binary format with\na length of 20.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see sha1() - Calculate the sha1 hash of a string\n@see md5_file() - Calculates the md5 hash of a given file\n@see crc32() - Calculates the crc32 polynomial of a string\n
sha1 sha1(string $str [, bool $raw_output=false]) [string]\nCalculate the sha1 hash of a string.\n@param str The input string.\n@param raw_output If the optional `raw_output` is set to TRUE, then the\nsha1 digest is instead returned in raw binary format with a length of 20,\notherwise the returned value is a 40-character hexadecimal number.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see sha1_file() - Calculate the sha1 hash of a file\n@see crc32() - Calculates the crc32 polynomial of a string\n@see md5() - Calculate the md5 hash of a string\n@see hash() - Generate a hash value (message digest)\n
shell_exec shell_exec(string $cmd) [string]\nExecute command via shell and return the complete output as a string. This\nfunction is identical to the backtick operator.\n@param cmd The command that will be executed.\n@return (PHP 4, PHP 5)\n@note Note: This function is disabled when PHP is running in safe mode.\n@see exec() - Execute an external program\n@see escapeshellcmd() - Escape shell metacharacters\n
shm_attach shm_attach(int $key [, int $memsize [, int $perm]]) [resource]\nCreates or open a shared memory segment. shm_attach() returns an id that\ncan be used to access the System V shared memory with the given `key`,\nthe first call creates the shared memory segment with `memsize` and the\noptional perm-bits `perm`. A second call to shm_attach() for the same `key`\nwill return a different shared memory identifier, but both identifiers access\nthe same underlying shared memory. `memsize` and `perm` will be ignored.\n@param key A numeric shared memory segment ID\n@param memsize The memory size. If not provided, default to the\n`sysvshm.init_mem` in the php.ini, otherwise 10000 bytes.\n@param perm The optional permission bits. Default to 0666.\n@return (PHP 4, PHP 5)\n@see shm_detach() - Disconnects from shared memory segment\n@see ftok() - Convert a pathname and a project identifier to a System V IPC key\n
shm_detach shm_detach(resource $shm_identifier) [bool]\nDisconnects from shared memory segment. shm_detach() disconnects from the\nshared memory given by the `shm_identifier` created by shm_attach(). Remember,\nthat shared memory still exist in the Unix system and the data is still\npresent.\n@param shm_identifier A shared memory resource handle as returned by\nshm_attach()\n@return (PHP 4, PHP 5)\n@see shm_attach() - Creates or open a shared memory segment\n@see shm_remove() - Removes shared memory from Unix systems\n@see shm_remove_var() - Removes a variable from shared memory\n
shm_get_var shm_get_var(resource $shm_identifier, int $variable_key) [mixed]\nReturns a variable from shared memory. shm_get_var() returns the variable\nwith a given `variable_key`, in the given shared memory segment. The variable\nis still present in the shared memory.\n@param shm_identifier Shared memory segment, obtained from shm_attach().\n@param variable_key The variable key.\n@return (PHP 4, PHP 5)\n@see shm_has_var() - Check whether a specific entry exists\n@see shm_put_var() - Inserts or updates a variable in shared memory\n
shm_has_var shm_has_var(resource $shm_identifier, int $variable_key) [bool]\nCheck whether a specific entry exists. Checks whether a specific key exists\ninside a shared memory segment.\n@param shm_identifier Shared memory segment, obtained from shm_attach().\n@param variable_key The variable key.\n@return (PHP 5 >= 5.3.0)\n@see shm_get_var() - Returns a variable from shared memory\n@see shm_put_var() - Inserts or updates a variable in shared memory\n
shm_put_var shm_put_var(resource $shm_identifier, int $variable_key, mixed\n$variable) [bool]\nInserts or updates a variable in shared memory. shm_put_var() inserts or\nupdates the `variable` with the given `variable_key`. Warnings (E_WARNING\nlevel) will be issued if `shm_identifier` is not a valid SysV shared memory\nindex or if there was not enough shared memory remaining to complete your\nrequest.\n@param shm_identifier A shared memory resource handle as returned by\nshm_attach()\n@param variable_key The variable key.\n@param variable The variable. All variable types that serialize() supports\nmay be used: generally this means all types except for resources and some\ninternal objects that cannot be serialized.\n@return (PHP 4, PHP 5)\n@see shm_get_var() - Returns a variable from shared memory\n@see shm_has_var() - Check whether a specific entry exists\n
shm_remove_var shm_remove_var(resource $shm_identifier, int $variable_key)\n[bool]\nRemoves a variable from shared memory. Removes a variable with a given\n`variable_key` and frees the occupied memory.\n@param shm_identifier The shared memory identifier as returned by shm_attach()\n@param variable_key The variable key.\n@return (PHP 4, PHP 5)\n@see shm_remove() - Removes shared memory from Unix systems\n
shm_remove shm_remove(resource $shm_identifier) [bool]\nRemoves shared memory from Unix systems. shm_remove() removes the shared\nmemory `shm_identifier`. All data will be destroyed.\n@param shm_identifier The shared memory identifier as returned by shm_attach()\n@return (PHP 4, PHP 5)\n@see shm_remove_var() - Removes a variable from shared memory\n
shmop_close shmop_close(int $shmid) [void]\nClose shared memory block. shmop_close() is used to close a shared memory\nblock.\n@param shmid The shared memory block identifier created by shmop_open()\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see shmop_open() - Create or open shared memory block\n
shmop_delete shmop_delete(int $shmid) [bool]\nDelete shared memory block. shmop_delete() is used to delete a shared\nmemory block.\n@param shmid The shared memory block identifier created by shmop_open()\n@return (PHP 4 >= 4.0.4, PHP 5)\n
shmop_open shmop_open(int $key, string $flags, int $mode, int $size) [int]\nCreate or open shared memory block. shmop_open() can create or open a shared\nmemory block.\n@param key System&#039;s id for the shared memory block. Can be passed as\na decimal or hex.\n@param flags The flags that you can use: &quot;a&quot; for access (sets\nSHM_RDONLY for shmat) use this flag when you need to open an existing shared\nmemory segment for read only &quot;c&quot; for create (sets IPC_CREATE) use\nthis flag when you need to create a new shared memory segment or if a segment\nwith the same key exists, try to open it for read and write &quot;w&quot;\nfor read &amp; write access use this flag when you need to read and write\nto a shared memory segment, use this flag in most cases. &quot;n&quot;\ncreate a new memory segment (sets IPC_CREATE|IPC_EXCL) use this flag when\nyou want to create a new shared memory segment but if one already exists\nwith the same flag, fail. This is useful for security purposes, using this\nyou can prevent race condition exploits.\n@param mode The permissions that you wish to assign to your memory segment,\nthose are the same as permission for a file. Permissions need to be passed\nin octal form, like for example `0644`\n@param size The size of the shared memory block you wish to create in bytes\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see shmop_close() - Close shared memory block\n@see shmop_delete() - Delete shared memory block\n
shmop_read shmop_read(int $shmid, int $start, int $count) [string]\nRead data from shared memory block. shmop_read() will read a string from\nshared memory block.\n@param shmid The shared memory block identifier created by shmop_open()\n@param start Offset from which to start reading\n@param count The number of bytes to read\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see shmop_write() - Write data into shared memory block\n
shmop_size shmop_size(int $shmid) [int]\nGet size of shared memory block. shmop_size() is used to get the size,\nin bytes of the shared memory block.\n@param shmid The shared memory block identifier created by shmop_open()\n@return (PHP 4 >= 4.0.4, PHP 5)\n
shmop_write shmop_write(int $shmid, string $data, int $offset) [int]\nWrite data into shared memory block. shmop_write() will write a string into\nshared memory block.\n@param shmid The shared memory block identifier created by shmop_open()\n@param data A string to write into shared memory block\n@param offset Specifies where to start writing data inside the shared\nmemory segment.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see shmop_read() - Read data from shared memory block\n
show_source show_source\nAlias of highlight_file.\n
shuffle shuffle(array &$array) [bool]\nShuffle an array. This function shuffles (randomizes the order of the elements\nin) an array.\n@param array The array.\n@return (PHP 4, PHP 5)\n@note Note: This function assigns new keys to the elements in `array`. It\nwill remove any existing keys that may have been assigned, rather than just\nreordering the keys.\n@see The comparison of array sorting functions\n
signeurlpaiement string nthmac ( string $clent , string $data )\nObtain the payment url (needs 2 arguments).\n@return (PECL spplus >= 1.0.0)\n
similar_text similar_text(string $first, string $second [, float &$percent])\n[int]\nCalculate the similarity between two strings. This calculates the\nsimilarity between two strings as described in Oliver [1993]. Note that\nthis implementation does not use a stack as in Oliver&#039;s pseudo code,\nbut recursive calls which may or may not speed up the whole process. Note\nalso that the complexity of this algorithm is O(N**3) where N is the length\nof the longest string.\n@param first The first string.\n@param second The second string.\n@param percent By passing a reference as third argument, similar_text()\nwill calculate the similarity in percent for you.\n@return (PHP 4, PHP 5)\n@see levenshtein() - Calculate Levenshtein distance between two strings\n@see soundex() - Calculate the soundex key of a string\n
simplexml_import_dom simplexml_import_dom(DOMNode $node [, string\n$class_name=&quot;SimpleXMLElement&quot;]) [SimpleXMLElement]\nGet a SimpleXMLElement object from a DOM node.. This function takes a node\nof a DOM document and makes it into a SimpleXML node. This new object can\nthen be used as a native SimpleXML element.\n@param node A DOM Element node\n@param class_name You may use this optional parameter so that\nsimplexml_import_dom() will return an object of the specified class. That\nclass should extend the SimpleXMLElement class.\n@return (PHP 5)\n@see dom_import_simplexml() - Gets a DOMElement object from a SimpleXMLElement\nobject\n
simplexml_load_file simplexml_load_file(string $filename [, string\n$class_name=&quot;SimpleXMLElement&quot; [, int $options=0 [, string $ns [,\nbool $is_prefix=false]]]]) [object]\nInterprets an XML file into an object. Convert the well-formed XML document\nin the given file to an object.\n@param filename Path to the XML file Note: Libxml 2 unescapes the URI, so\nif you want to pass e.g. `b&amp;c` as the URI parameter `a`, you have to\ncall `simplexml_load_file(rawurlencode(&#039;http://example.com/?a=&#039;\n. urlencode(&#039;b&amp;c&#039;)))`. Since PHP 5.1.0 you don&#039;t need to\ndo this because PHP will do it for you.\n@param class_name You may use this optional parameter so that\nsimplexml_load_file() will return an object of the specified class. That\nclass should extend the SimpleXMLElement class.\n@param options Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n`options` parameter to specify additional Libxml parameters.\n@param ns\n@param is_prefix\n@return (PHP 5)\n@see simplexml_load_string() - Interprets a string of XML into an object\n@see SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object\n@see Dealing with XML errors\n@see libxml_use_internal_errors() - Disable libxml errors and allow user to\nfetch error information as needed\n
simplexml_load_string simplexml_load_string(string $data [, string\n$class_name=&quot;SimpleXMLElement&quot; [, int $options=0 [, string $ns [,\nbool $is_prefix=false]]]]) [object]\nInterprets a string of XML into an object. Takes a well-formed XML string\nand returns it as an object.\n@param data A well-formed XML string\n@param class_name You may use this optional parameter so that\nsimplexml_load_string() will return an object of the specified class. That\nclass should extend the SimpleXMLElement class.\n@param options Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n`options` parameter to specify additional Libxml parameters.\n@param ns\n@param is_prefix\n@return (PHP 5)\n@see simplexml_load_file() - Interprets an XML file into an object\n@see SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object\n@see Dealing with XML errors\n@see libxml_use_internal_errors() - Disable libxml errors and allow user to\nfetch error information as needed\n
sin sin(float $arg) [float]\nSine. sin() returns the sine of the `arg` parameter. The `arg` parameter is\nin radians.\n@param arg A value in radians\n@return (PHP 4, PHP 5)\n@see asin() - Arc sine\n@see sinh() - Hyperbolic sine\n@see cos() - Cosine\n@see tan() - Tangent\n@see deg2rad() - Converts the number in degrees to the radian equivalent\n
sinh sinh(float $arg) [float]\nHyperbolic sine. Returns the hyperbolic sine of `arg`, defined as `(exp(arg)\n- exp(-arg))/2`.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see sin() - Sine\n@see asinh() - Inverse hyperbolic sine\n@see cosh() - Hyperbolic cosine\n@see tanh() - Hyperbolic tangent\n
sizeof sizeof\nAlias of count.\n
sleep sleep(int $seconds) [int]\nDelay execution.\n@param seconds Halt time in seconds.\n@return (PHP 4, PHP 5)\n@see usleep() - Delay execution in microseconds\n@see time_nanosleep() - Delay for a number of seconds and nanoseconds\n@see time_sleep_until() - Make the script sleep until the specified time\n@see set_time_limit() - Limits the maximum execution time\n
snmp_get_quick_print snmp_get_quick_print(void) [bool]\nFetches the current value of the UCD library's quick_print setting. Returns\nthe current value stored in the UCD Library for quick_print. quick_print is\noff by default.\n@return (PHP 4, PHP 5)\n@see snmp_set_quick_print() - Set the value of quick_print within the UCD\nSNMP library for a full description of what quick_print does.\n
snmp_get_valueretrieval snmp_get_valueretrieval(void) [int]\nReturn the method how the SNMP values will be returned.\n@return (PHP 4 >= 4.3.3, PHP 5)\n@see snmp_set_valueretrieval() - Specify the method how the SNMP values will\nbe returned\n@see Predefined Constants\n
snmp_read_mib snmp_read_mib(string $filename) [bool]\nReads and parses a MIB file into the active MIB tree. This function is used\nto load additional, e.g. vendor specific, MIBs so that human readable OIDs\nlike VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be used. The\norder in which the MIBs are loaded does matter as the underlying Net-SNMP\nlibary will print warnings if referenced objects cannot be resolved.\n@param filename The filename of the MIB.\n
snmp_set_enum_print snmp_set_enum_print(int $enum_print) [bool]\nReturn all values that are enums with their enum value instead of the raw\ninteger. This function toggles if snmpwalk/snmpget etc. should automatically\nlookup enum values in the MIB and return them together with their human\nreadable string.\n@param enum_print As the value is interpreted as boolean by the Net-SNMP\nlibrary, it can only be &quot;0&quot; or &quot;1&quot;.\n@note Note: snmp_set_enum_print() is only available when using the UCD SNMP\nlibrary. This function is not available when using the Windows SNMP library.\n
snmp_set_oid_numeric_print snmp_set_oid_numeric_print(int $oid_format) [void]\nReturn all objects including their respective object id within the specified\none. This function is an alias of: snmp_set_oid_output_format().\n@see snmp_set_oid_output_format() - Set the OID output format\n
snmp_set_oid_output_format snmp_set_oid_output_format(int\n$oid_format=SNMP_OID_OUTPUT_MODULE) [bool]\nSet the OID output format. snmp_set_oid_output_format() sets the output\nformat to be full or numeric.\n@param oid_format constants SNMP_OID_OUTPUT_FULLThe complete form like\n&quot;iso.org.dod....&quot; SNMP_OID_OUTPUT_NUMERICThe numeric form like\n&quot;.1.3.6.1.4.1.8072.3.2.10&quot; SNMP_OID_OUTPUT_MODULEThe short\nform like &quot;NET-SNMP-TC::linux&quot; SNMP_OID_OUTPUT_SUFFIX&nbsp;\nSNMP_OID_OUTPUT_UCD&nbsp; SNMP_OID_OUTPUT_NONE&nbsp; The last four constants\nare expected to be added in PHP 5.3.6 as of bug #53862.\n@return (PHP 5 >= 5.2.0)\n@note Note: snmp_set_oid_output_format() is only available when using the\nUCD SNMP library. This function is not available when using the Windows\nSNMP library.\n
snmp_set_quick_print snmp_set_quick_print(bool $quick_print) [bool]\nSet the value of quick_print within the UCD SNMP library. Sets the value of\n`quick_print` within the UCD SNMP library. When this is set (1), the SNMP\nlibrary will return &#039;quick printed&#039; values. This means that just\nthe value will be printed. When `quick_print` is not enabled (default) the\nUCD SNMP library prints extra information including the type of the value\n(i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the\nlibrary prints additional hex values for all strings of three characters or\nless. By default the UCD SNMP library returns verbose values, quick_print\nis used to return only the value. Currently strings are still returned with\nextra quotes, this will be corrected in a later release.\n@param quick_print\n@return (PHP 4, PHP 5)\n@see snmp_get_quick_print() - Fetches the current value of the UCD library's\nquick_print setting\n
rrd_fetch rrd_fetch(string $filename, array $options) [array]\nFetch the data for graph as array.. Gets data for graph output from RRD\ndatabase file as array. This function has same result as rrd_graph(), but\nfetched data are returned as array, no image file is created.\n@param filename RRD database file name.\n@param options Array of options for resolution specification.\n@return (PECL rrd >= 0.9.0)\n
rrd_first rrd_first(string $file [, int $raaindex=0]) [int]\nGets the timestamp of the first sample from rrd file.. Returns the first\ndata sample from the specified RRA of the RRD file.\n@param file RRD database file name.\n@param raaindex The index number of the RRA that is to be examined. Default\nvalue is 0.\n@return (PECL rrd >= 0.9.0)\n
rrd_graph rrd_graph(string $filename, array $options) [array]\nCreates image from a data.. Creates image for a particular data from RRD file.\n@param filename RRD database file name.\n@param options Options for generating image. See man page of rrd graph for\nall possible options. All options (data definitions, variable defintions,\netc.) are allowed.\n@return (PECL rrd >= 0.9.0)\n
rrd_info rrd_info(string $filename) [array]\nGets information about rrd file. Returns information about particular RRD\ndatabase file.\n@param file RRD database file name.\n@return (PECL rrd >= 0.9.0)\n
rrd_last rrd_last(string $filename) [int]\nGets unix timestamp of the last sample.. Returns the UNIX timestamp of the\nmost recent update of the RRD database.\n@param filename		 RRD database file name.\n@return (PECL rrd >= 0.9.0)\n
rrd_lastupdate rrd_lastupdate(string $filename) [array]\nGets information about last updated data.. Gets array of the UNIX timestamp\nand the values stored for each date in the most recent update of the RRD\ndatabase file.\n@param file	 RRD database file name.\n@return (PECL rrd >= 0.9.0)\n
rrd_restore rrd_restore(string $xml_file, string $rrd_file [, array $options])\n[bool]\nRestores the RRD file from XML dump.. Restores the RRD file from the XML dump.\n@param xml_file		 XML filename with the dump of the original RRD\ndatabase file.\n@param rrd_file Restored RRD database file name.\n@param options Array of options for restoring. See man page for rrd restore.\n@return (PECL rrd >= 0.9.0)\n
rrd_tune rrd_tune(string $filename, array $options) [bool]\nTunes some RRD database file header options.. Change some options in the\nRRD dabase header file. E.g. renames the source for the the data etc.\n@param filename RRD database file name.\n@param options Options with RRD database file properties which will be\nchanged. See rrd tune man page for details.\n@return (PECL rrd >= 0.9.0)\n
rrd_update rrd_update(string $filename, array $options) [bool]\nUpdates the RRD database.. Updates the RRD database file. The input data is\ntime interpolated according to the properties of the RRD database file.\n@param filename		 RRD database file name. This database will be updated.\n@param options Options for updating the RRD database. This is list of\nstrings. See man page of rrd update for whole list of options.\n@return (PECL rrd >= 0.9.0)\n
rrd_xport rrd_xport(array $options) [array]\nExports the information about RRD database.. Exports the information about\nRRD database file. This data can be converted to XML file via user space\nPHP script and then restored back as RRD database file.\n@param options	 Array of options for the export, see rrd xport man page.\n@return (PECL rrd >= 0.9.0)\n
rsort rsort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array in reverse order. This function sorts an array in reverse order\n(highest to lowest).\n@param array The input array.\n@param sort_flags You may modify the behavior of the sort using the optional\nparameter `sort_flags`, for details see sort().\n@return (PHP 4, PHP 5)\n@note Note: This function assigns new keys to the elements in `array`. It\nwill remove any existing keys that may have been assigned, rather than just\nreordering the keys.\n@see arsort() - Sort an array in reverse order and maintain index association\n@see krsort() - Sort an array by key in reverse order\n@see The comparison of array sorting functions\n
rtrim rtrim(string $str [, string $charlist]) [string]\nStrip whitespace (or other characters) from the end of a string. This function\nreturns a string with whitespace stripped from the end of `str`. Without\nthe second parameter, rtrim() will strip these characters: &quot; &quot;\n(ASCII `32` (`0x20`)), an ordinary space. &quot;\t&quot; (ASCII `9`\n(`0x09`)), a tab. &quot;\n&quot; (ASCII `10` (`0x0A`)), a new line (line\nfeed). &quot;\r&quot; (ASCII `13` (`0x0D`)), a carriage return. &quot;\0&quot;\n(ASCII `0` (`0x00`)), the `NUL`-byte. &quot;\x0B&quot; (ASCII `11` (`0x0B`)),\na vertical tab.\n@param str The input string.\n@param charlist You can also specify the characters you want to strip, by\nmeans of the `charlist` parameter. Simply list all characters that you want\nto be stripped. With `..` you can specify a range of characters.\n@return (PHP 4, PHP 5)\n@see trim() - Strip whitespace (or other characters) from the beginning and\nend of a string\n@see ltrim() - Strip whitespace (or other characters) from the beginning of\na string\n
runkit_class_adopt runkit_class_adopt(string $classname, string $parentname)\n[bool]\nConvert a base class to an inherited class, add ancestral methods when\nappropriate.\n@param classname Name of class to be adopted\n@param parentname Parent class which child class is extending\n@return (PECL runkit >= 0.7.0)\n@see runkit_class_emancipate() - Convert an inherited class to a base class,\nremoves any method whose scope is ancestral\n
runkit_class_emancipate runkit_class_emancipate(string $classname) [bool]\nConvert an inherited class to a base class, removes any method whose scope\nis ancestral.\n@param classname Name of class to emancipate\n@return (PECL runkit >= 0.7.0)\n@see runkit_class_adopt() - Convert a base class to an inherited class,\nadd ancestral methods when appropriate\n
runkit_constant_add runkit_constant_add(string $constname, mixed $value) [bool]\nSimilar to define(), but allows defining in class definitions as well.\n@param constname Name of constant to declare. Either a string to indicate\na global constant, or `classname::constname` to indicate a class constant.\n@param value NULL, Bool, Long, Double, String, or Resource value to store\nin the new constant.\n@return (PECL runkit >= 0.7.0)\n@see define() - Defines a named constant\n@see runkit_constant_redefine() - Redefine an already defined constant\n@see runkit_constant_remove() - Remove/Delete an already defined constant\n
runkit_constant_redefine runkit_constant_redefine(string $constname, mixed\n$newvalue) [bool]\nRedefine an already defined constant.\n@param constname Constant to redefine. Either string indicating global\nconstant, or `classname::constname` indicating class constant.\n@param newvalue New value to assign to constant.\n@return (PECL runkit >= 0.7.0)\n@see runkit_constant_add() - Similar to define(), but allows defining in\nclass definitions as well\n@see runkit_constant_remove() - Remove/Delete an already defined constant\n
runkit_constant_remove runkit_constant_remove(string $constname) [bool]\nRemove/Delete an already defined constant.\n@param constname Name of constant to remove. Either a string indicating a\nglobal constant, or `classname::constname` indicating a class constant.\n@return (PECL runkit >= 0.7.0)\n@see define() - Defines a named constant\n@see runkit_constant_add() - Similar to define(), but allows defining in\nclass definitions as well\n@see runkit_constant_redefine() - Redefine an already defined constant\n
runkit_function_add runkit_function_add(string $funcname, string $arglist,\nstring $code) [bool]\nAdd a new function, similar to create_function.\n@param funcname Name of function to be created\n@param arglist Comma separated argument list\n@param code Code making up the function\n@return (PECL runkit >= 0.7.0)\n@see create_function() - Create an anonymous (lambda-style) function\n@see runkit_function_redefine() - Replace a function definition with a new\nimplementation\n@see runkit_function_copy() - Copy a function to a new function name\n@see runkit_function_rename() - Change a function's name\n@see runkit_function_remove() - Remove a function definition\n@see runkit_method_add() - Dynamically adds a new method to a given class\n
runkit_function_copy runkit_function_copy(string $funcname, string $targetname)\n[bool]\nCopy a function to a new function name.\n@param funcname Name of existing function\n@param targetname Name of new function to copy definition to\n@return (PECL runkit >= 0.7.0)\n@see runkit_function_add() - Add a new function, similar to create_function\n@see runkit_function_redefine() - Replace a function definition with a new\nimplementation\n@see runkit_function_rename() - Change a function's name\n@see runkit_function_remove() - Remove a function definition\n
runkit_function_redefine runkit_function_redefine(string $funcname, string\n$arglist, string $code) [bool]\nReplace a function definition with a new implementation.\n@param funcname Name of function to redefine\n@param arglist New list of arguments to be accepted by function\n@param code New code implementation\n@return (PECL runkit >= 0.7.0)\n@see runkit_function_add() - Add a new function, similar to create_function\n@see runkit_function_copy() - Copy a function to a new function name\n@see runkit_function_rename() - Change a function's name\n@see runkit_function_remove() - Remove a function definition\n
runkit_function_remove runkit_function_remove(string $funcname) [bool]\nRemove a function definition.\n@param funcname Name of function to be deleted\n@return (PECL runkit >= 0.7.0)\n@see runkit_function_add() - Add a new function, similar to create_function\n@see runkit_function_copy() - Copy a function to a new function name\n@see runkit_function_redefine() - Replace a function definition with a new\nimplementation\n@see runkit_function_rename() - Change a function's name\n
runkit_function_rename runkit_function_rename(string $funcname, string\n$newname) [bool]\nChange a function's name.\n@param funcname Current function name\n@param newname New function name\n@return (PECL runkit >= 0.7.0)\n@see runkit_function_add() - Add a new function, similar to create_function\n@see runkit_function_copy() - Copy a function to a new function name\n@see runkit_function_redefine() - Replace a function definition with a new\nimplementation\n@see runkit_function_remove() - Remove a function definition\n
runkit_import runkit_import(string $filename [, int\n$flags=RUNKIT_IMPORT_CLASS_METHODS]) [bool]\nProcess a PHP file importing function and class definitions, overwriting\nwhere appropriate. Similar to include() however any code residing outside of\na function or class is simply ignored. Additionally, depending on the value\nof `flags`, any functions or classes which already exist in the currently\nrunning environment will be automatically overwritten by their new definitions.\n@param filename Filename to import function and class definitions from\n@param flags Bitwise OR of the RUNKIT_IMPORT_* family of constants.\n@return (PECL runkit >= 0.7.0)\n
runkit_lint_file runkit_lint_file(string $filename) [bool]\nCheck the PHP syntax of the specified file. The runkit_lint_file() function\nperforms a syntax (lint) check on the specified filename testing for scripting\nerrors. This is similar to using php -l from the commandline. Note: Sandbox\nsupport (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox\nclass) is only available as of PHP 5.1.0 or specially patched versions of\nPHP 5.0, and requires that thread safety be enabled. See the README file\nincluded in the runkit package for more information.\n@param filename File containing PHP Code to be lint checked\n@return (PECL runkit >= 0.7.0)\n@see runkit_lint() - Check the PHP syntax of the specified php code\n
runkit_lint runkit_lint(string $code) [bool]\nCheck the PHP syntax of the specified php code. The runkit_lint() function\nperforms a syntax (lint) check on the specified php code testing for\nscripting errors. This is similar to using `php -l` from the command line\nexcept runkit_lint() accepts actual code rather than a filename. Note:\nSandbox support (required for runkit_lint(), runkit_lint_file(), and the\nRunkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched\nversions of PHP 5.0, and requires that thread safety be enabled. See the\nREADME file included in the runkit package for more information.\n@param code PHP Code to be lint checked\n@return (PECL runkit >= 0.7.0)\n@see runkit_lint_file() - Check the PHP syntax of the specified file\n
runkit_method_add runkit_method_add(string $classname, string $methodname,\nstring $args, string $code [, int $flags=RUNKIT_ACC_PUBLIC]) [bool]\nDynamically adds a new method to a given class.\n@param classname The class to which this method will be added\n@param methodname The name of the method to add\n@param args Comma-delimited list of arguments for the newly-created method\n@param code The code to be evaluated when `methodname` is called\n@param flags The type of method to create, can be RUNKIT_ACC_PUBLIC,\nRUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE Note: This parameter is only used\nas of PHP 5, because, prior to this, all methods were public.\n@return (PECL runkit >= 0.7.0)\n@see runkit_method_copy() - Copies a method from class to another\n@see runkit_method_redefine() - Dynamically changes the code of the given\nmethod\n@see runkit_method_remove() - Dynamically removes the given method\n@see runkit_method_rename() - Dynamically changes the name of the given method\n@see runkit_function_add() - Add a new function, similar to create_function\n
runkit_method_copy runkit_method_copy(string $dClass, string $dMethod,\nstring $sClass [, string $sMethod]) [bool]\nCopies a method from class to another.\n@param dClass Destination class for copied method\n@param dMethod Destination method name\n@param sClass Source class of the method to copy\n@param sMethod Name of the method to copy from the source class. If this\nparameter is omitted, the value of `dMethod` is assumed.\n@return (PECL runkit >= 0.7.0)\n@see runkit_method_add() - Dynamically adds a new method to a given class\n@see runkit_method_redefine() - Dynamically changes the code of the given\nmethod\n@see runkit_method_remove() - Dynamically removes the given method\n@see runkit_method_rename() - Dynamically changes the name of the given method\n@see runkit_function_copy() - Copy a function to a new function name\n
runkit_method_redefine runkit_method_redefine(string $classname, string\n$methodname, string $args, string $code [, int $flags=RUNKIT_ACC_PUBLIC])\n[bool]\nDynamically changes the code of the given method.\n@param classname The class in which to redefine the method\n@param methodname The name of the method to redefine\n@param args Comma-delimited list of arguments for the redefined method\n@param code The new code to be evaluated when `methodname` is called\n@param flags The redefined method can be RUNKIT_ACC_PUBLIC,\nRUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE Note: This parameter is only used\nas of PHP 5, because, prior to this, all methods were public.\n@return (PECL runkit >= 0.7.0)\n@see runkit_method_add() - Dynamically adds a new method to a given class\n@see runkit_method_copy() - Copies a method from class to another\n@see runkit_method_remove() - Dynamically removes the given method\n@see runkit_method_rename() - Dynamically changes the name of the given method\n@see runkit_function_redefine() - Replace a function definition with a new\nimplementation\n
runkit_method_remove runkit_method_remove(string $classname, string\n$methodname) [bool]\nDynamically removes the given method.\n@param classname The class in which to remove the method\n@param methodname The name of the method to remove\n@return (PECL runkit >= 0.7.0)\n@see runkit_method_add() - Dynamically adds a new method to a given class\n@see runkit_method_copy() - Copies a method from class to another\n@see runkit_method_redefine() - Dynamically changes the code of the given\nmethod\n@see runkit_method_rename() - Dynamically changes the name of the given method\n@see runkit_function_remove() - Remove a function definition\n
runkit_method_rename runkit_method_rename(string $classname, string\n$methodname, string $newname) [bool]\nDynamically changes the name of the given method.\n@param classname The class in which to rename the method\n@param methodname The name of the method to rename\n@param newname The new name to give to the renamed method\n@return (PECL runkit >= 0.7.0)\n@see runkit_method_add() - Dynamically adds a new method to a given class\n@see runkit_method_copy() - Copies a method from class to another\n@see runkit_method_redefine() - Dynamically changes the code of the given\nmethod\n@see runkit_method_remove() - Dynamically removes the given method\n@see runkit_function_rename() - Change a function's name\n
runkit_return_value_used runkit_return_value_used(void) [bool]\nDetermines if the current functions return value will be used.\n@return (PECL runkit >= 0.8.0)\n
runkit_sandbox_output_handler runkit_sandbox_output_handler(object $sandbox\n[, mixed $callback]) [mixed]\nSpecify a function to capture and/or process output from a runkit\nsandbox. Ordinarily, anything output (such as with echo() or print()) will\nbe output as though it were printed from the parent&#039;s scope. Using\nrunkit_sandbox_output_handler() however, output generated by the sandbox\n(including errors), can be captured by a function outside of the sandbox. Note:\nSandbox support (required for runkit_lint(), runkit_lint_file(), and the\nRunkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched\nversions of PHP 5.0, and requires that thread safety be enabled. See the\nREADME file included in the runkit package for more information. Note:\nDeprecated As of runkit version 0.5, this function is deprecated and is\nscheduled to be removed from the package prior to a 1.0 release. The output\nhandler for a given Runkit_Sandbox instance may be read/set using the array\noffset syntax shown on the Runkit_Sandbox class definition page.\n@param sandbox Object instance of Runkit_Sandbox class on which to set\noutput handling.\n@param callback Name of a function which expects one parameter. Output\ngenerated by `sandbox` will be passed to this callback. Anything returned\nby the callback will be displayed normally. If this parameter is not passed\nthen output handling will not be changed. If a non-truth value is passed,\noutput handling will be disabled and will revert to direct display.\n@return (PECL runkit >= 0.7.0)\n
runkit_superglobals runkit_superglobals(void) [array]\nReturn numerically indexed array of registered superglobals.\n@return (PECL runkit >= 0.7.0)\n@see Variable Scope\n
commit bool SAMConnection::commit ( void )\nCommits (completes) the current unit of work..\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->rollback\n
connect bool SAMConnection::connect ( string $protocol [, array $properties ] )\nEstablishes a connection to a Messaging Server.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->isConnected\n@see SAMConnection->disconnect\n
__construct SAMConnection::__construct ( void )\nCreates a new connection to a Messaging Server.\n
disconnect bool SAMConnection::disconnect ( void )\nDisconnects from a Messaging Server.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->isConnected\n@see SAMConnection->connect\n
errno SAMConnection->errno\nContains the unique numeric error code of the last executed SAM operation..\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->error\n
error SAMConnection->error\nContains the text description of the last failed SAM operation..\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->errno\n
isConnected bool SAMConnection::isConnected ( void )\nQueries whether a connection is established to a Messaging Server.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->disconnect\n@see SAMConnection->connect\n
peek SAMMessage SAMConnection::peek ( string $target [, array $properties ] )\nRead a message from a queue without removing it from the queue..\n@param target The identity of the queue from which to peek the message.\n@param properties An optional associative array of properties describing\nother parameters to control the peek operation. Property name Possible values\nSAM_CORRELID This is the target correlation id string of the message. This\nwould typically have been returned by a &quot;send&quot; request. SAM_MESSAGEID\nThis is the message id string of the message which is to be peeked.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->peekAll\n
peekAll array SAMConnection::peekAll ( string $target [, array $properties ] )\nRead one or more messages from a queue without removing it from the queue..\n@param target The identity of the queue from which messages should be peeked.\n@param properties An optional associative array of properties describing\nother parameters to control the peek operation. Property name Possible\nvalues SAM_CORRELID This is the target correlation id string of messages\nto be peeked. This would typically have been returned by a &quot;send&quot;\nrequest. SAM_MESSAGEID This is the message id string of a message which is\nto be peeked.\n@return (PECL sam >= 0.2.0)\n@see SAMConnection->peek\n
receive SAMMessage SAMConnection::receive ( string $target [, array $properties\n] )\nReceive a message from a queue or subscription..\n@param target The identity of the queue, topic or subscription from which\nto receive the message.\n@param properties An optional associative array of properties describing\nother parameters to control the receive operation. Property name Possible\nvalues SAM_CORRELID Used to request selection of the message to receive\nbased upon the correlation id string of the message. SAM_MESSAGEID Used to\nrequest selection of the message to receive based upon the message id string\nof the message. SAM_WAIT Timeout value in milliseconds to control how long\nthe request should block waiting to receive a message before returning with\na failure if no message is available on the queue or topic. The default value\nis 0 meaning wait indefinitely and should be used with caution as the request\nmay wait until the overall PHP script processing time limit has expired if\nno message becomes available.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->send\n
remove SAMMessage SAMConnection::remove ( string $target [, array $properties\n] )\nRemove a message from a queue..\n@param target The identity of the queue from which to remove the message.\n@param properties An optional associative array of properties describing other\nparameters to control the remove operation. Property name Possible values\nSAM_CORRELID This is the target correlation id string of the message. This\nwould typically have been returned by a &quot;send&quot; request. SAM_MESSAGEID\nThis is the message id string of the message which is to be removed.\n@return (PECL sam >= 0.1.0)\n
rollback bool SAMConnection::rollback ( void )\nCancels (rolls back) an in-flight unit of work..\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->commit\n
send string SAMConnection::send ( string $target , SAMMessage $msg [, array\n$properties ] )\nSend a message to a queue or publish an item to a topic..\n@param target If sending a message, the identity of the queue\n(`queue://queuename`) or if publishing to a topic the identity of the topic\n(`topic://topicname`) to which the message is to be delivered.\n@param msg The message to be sent or published.\n@param properties An optional associative array of properties describing other\nparameters to control the receive operation. Property name Possible values\nSAM_DELIVERYMODE Indicates whether the messaging server should ensure delivery\nor whether it is acceptable for messages to be lost in the case of system\nfailures. The value of this property may be set to either SAM_PERSISTENT,\nto indicate that message loss is not acceptable, or SAM_NON_PERSISTENT, if\nmessage loss is acceptable. The resulting behaviour of the send will vary\ndepending on the capabilities of the messaging server the PHP script is\ncurrently connected to. If the server does not support persistent messages\nand SAM_PERSISTENT is specified the send request will fail with an error\nindication showing the capability is not available. SAM_PRIORITY A numeric\nvalue between 0 and 9 indicating the desired message delivery priority. A\npriority value of 0 indicates the lowest priority while 9 indicates highest\npriority. If no priority is specified a default will be assigned which is\ndependent on the messaging server being used. SAM_CORRELID A string to be\nassigned as a correlation id for this message. If no value is given the\nmessaging server may assign a value automatically. SAM_TIMETOLIVE A time\nin milliseconds indicating how long the messaging server should retain the\nmessage on a queue before discarding it. The default value is 0 indicating\nthe message should be retained indefinitely. SAM_WMQ_TARGET_CLIENT This\nproperty is only valid when using WebSphere MQ and indicates whether or not\nan RFH2 header should be included with the message. This option may be set\nto either &#039;jms&#039; or &#039;mq&#039;. The default is &#039;jms&#039;\nwhich means that an RFH2 header is included. If the value &#039;mq&#039;\nis specified then no RFH2 is included with the message.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->receive\n
setDebug SAMConnection::setDebug(bool $switch) [void]\nTurn on or off additional debugging output..\n@param switch If this parameter is set to TRUE additional debugging output\nwill be provided. If the value is set to FALSE output of additional information\nwill be stopped.\n@return (PECL sam >= 1.1.0)\n
subscribe string SAMConnection::subscribe ( string $targetTopic )\nCreate a subscription to a specified topic..\n@param targetTopic The identity of the topic (topic://topicname) to\nsubscribe to.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->unsubscribe\n
unsubscribe bool SAMConnection::unsubscribe ( string $subscriptionId [,\nstring $targetTopic ] )\nCancel a subscription to a specified topic..\n@param subscriptionId The identifier of an existing subscription as returned\nby a call to the subscribe method.\n@return (PECL sam >= 0.1.0)\n@see SAMConnection->subscribe\n
body SAMMessage->body\nThe body of the message..\n@see SAMMessage->header\n
__construct SAMMessage::__construct ([ mixed $body ] )\nCreates a new Message object.\n@param body The optional body for the message.\n
header SAMMessage->header\nThe header properties of the message..\n@see SAMMessage->body\n
createDataObject SCA::createDataObject(string $type_namespace_uri, string\n$type_name) [SDO_DataObject]\ncreate an SDO.\n@param  `type_namespace_uri` The namespace of the type.\n@param  `type_name` The name of the type.\n@return (PECL SDO >= 0.5.0)\n
getService SCA::getService(string $target [, string $binding [, array\n$config]]) [mixed]\nObtain a proxy for a service.\n@param  `target` An absolute or relative path to the target service or service\ndescription (e.g. a URL to a json-rpc service description, a PHP component,\na WSDL file, and so on.). A relative path, if specified, is resolved relative\nto the location of the script issuing the getService() call, and not against\nthe include_path or current working directory.\n@param  `binding` The binding (i.e. protocol) to use to communicate with the\nservice (e.g binding.jsonrpc for a json-rpc service). Note, some service types\ncan be deduced from the target parameter (e.g. if the target parameter ends in\n.wsdl then SCA will assume binding.soap). Any binding which can be specified\nin an annotation can be specified here. For example &#039;binding.soap&#039;\nis equivalent to the &#039;@binding.soap&#039; annotation.\n@param  `config` Any additional configuration properties for the binding\n(e.g. array(&#039;location&#039; => &#039;http://example.org&#039;)). Any\nbinding configuration which can be specified in an annotation can be\nspecified here. For example, &#039;location&#039; is equivalent to the\n&#039;@location&#039; annotation to configure the location of a target\nsoap service.\n@return (PECL SDO >= 0.5.0)\n
createDataObject SCA_LocalProxy::createDataObject(string $type_namespace_uri,\nstring $type_name) [SDO_DataObject]\ncreate an SDO.\n@param  `type_namespace_uri` The namespace of the type.\n@param  `type_name` The name of the type.\n@return (PECL SDO >= 0.5.0)\n
createDataObject SCA_SoapProxy::createDataObject(string $type_namespace_uri,\nstring $type_name) [SDO_DataObject]\ncreate an SDO.\n@param  `type_namespace_uri` The namespace of the type.\n@param  `type_name` The name of the type.\n@return (PECL SDO >= 0.5.0)\n
scandir scandir(string $directory [, int $sorting_order=0 [, resource\n$context]]) [array]\nList files and directories inside the specified path. Returns an array of\nfiles and directories from the `directory`.\n@param directory The directory that will be scanned.\n@param sorting_order By default, the sorted order is alphabetical in ascending\norder. If the optional `sorting_order` is set to non-zero, then the sort\norder is alphabetical in descending order.\n@param context For a description of the `context` parameter, refer to the\nstreams section of the manual.\n@return (PHP 5)\n@see opendir() - Open directory handle\n@see readdir() - Read entry from directory handle\n@see glob() - Find pathnames matching a pattern\n@see is_dir() - Tells whether the filename is a directory\n@see sort() - Sort an array\n
beginLogging SDO_DAS_ChangeSummary::beginLogging(void) [void]\nBegin change logging.\n@return (^)\n
endLogging SDO_DAS_ChangeSummary::endLogging(void) [void]\nEnd change logging.\n@return (^)\n
getChangedDataObjects SDO_DAS_ChangeSummary::getChangedDataObjects(void)\n[SDO_List]\nGet the changed data objects from a change summary.\n@return (^)\n
getChangeType SDO_DAS_ChangeSummary::getChangeType(SDO_DataObject $dataObject)\n[int]\nGet the type of change made to an SDO_DataObject.\n@param  `dataObject` The SDO_DataObject which has been changed.\n@return (^)\n
getOldContainer SDO_DAS_ChangeSummary::getOldContainer(SDO_DataObject\n$data_object) [SDO_DataObject]\nGet the old container for a deleted SDO_DataObject.\n@param  `data_object` The SDO_DataObject which has been deleted and whose\ncontainer we wish to identify.\n@return (^)\n
getOldValues SDO_DAS_ChangeSummary::getOldValues(SDO_DataObject $data_object)\n[SDO_List]\nGet the old values for a given changed SDO_DataObject.\n@param  `data_object` The data object which has been changed.\n@return (^)\n
isLogging SDO_DAS_ChangeSummary::isLogging(void) [bool]\nTest to see whether change logging is switched on.\n@return (^)\n
addPropertyToType SDO_DAS_DataFactory::addPropertyToType(string\n$parent_type_namespace_uri, string $parent_type_name, string $property_name,\nstring $type_namespace_uri, string $type_name [, array $options]) [void]\nAdds a property to a type.\n@param  `parent_type_namespace_uri` The namespace URI for the parent type.\n@param  `parent_type_name` The type name for the parent type.\n@param  `property_name` The name by which the property will be known in the\nparent type.\n@param  `type_namespace_uri` The namespace URI for the type of the property.\n@param  `type_name` The type name for the type of the property\n@param  `options` This array holds one or more key=>value pairs to set\nattribute values for the property. The optional keywords are: `many` A flag\nto say whether the property is many-valued. A value of &#039;true&#039;\nadds the property as a many-valued property (default is &#039;false&#039;).\n@param  `readOnly` A flag to say whether the property is read-only. A value\nof &#039;true&#039; means the property value cannot be modified through the\nSDO application APIs (default is &#039;false&#039;).\n@param  `containment` A flag to say whether the property is contained by the\nparent. A value of &#039;true&#039; means the property is contained by the\nparent. A value of &#039;false&#039; results in a non-containment reference\n(default is &#039;true&#039;). This flag is only interpreted when adding\nproperties which are data object types, otherwise it is ignored.\n@param  `default` A default value for the property. Omitting this key means\nthat the property does not have a default value. A property can only have\na default value if it is a single-valued data type (primitive).\n@return (^)\n
addType SDO_DAS_DataFactory::addType(string $type_namespace_uri, string\n$type_name [, array $options]) [void]\nAdd a new type to a model.\n@param  `type_namespace_uri` The namespace of the type.\n@param  `type_name` The name of the type.\n@param  `options` This array holds one or more key=>value pairs to set\nattribute values for the type. The optional keywords are: `open` A flag\nto say whether the type is open. An SDO_DataObject whose type is open can\nhave properties added to them which are not described by the type. This\ncapability is used to support working with XML documents whose schema support\nopen content such as that described by an &lt;xsd:any> element. The default\nvalue is &#039;false&#039;.\n@param  `sequenced` A flag to say whether the type is sequenced. Sequenced\ntypes can have the ordering across properties preserved and can contain\nunstructured text. The default value is &#039;false&#039;. For more information\non sequenced types see the section on Working with Sequenced Data Objects.\n@param  `basetype` If specified, an array of namespace URI and type name\nstrings for the type from which this type is derived. An example of the use\nof base types is when a type derived in an XML schema inherits from another\ntype by using &lt;extension base=&quot;...&quot;>.\n@return (^)\n
getDataFactory SDO_DAS_DataFactory::getDataFactory(void) [SDO_DAS_DataFactory]\nGet a data factory instance.\n@return (^)\n
getChangeSummary SDO_DAS_DataObject::getChangeSummary(void)\n[SDO_DAS_ChangeSummary]\nGet a data object's change summary.\n@return (^)\n
applyChanges SDO_DAS_Relational::applyChanges(PDO $database_handle,\nSDODataObject $root_data_object) [void]\nApplies the changes made to a data graph back to the database..\n@return (^)\n
__construct SDO_DAS_Relational::__construct(array $database_metadata [,\nstring $application_root_type [, array $SDO_containment_references_metadata]])\n[SDO_DAS_Relational]\nCreates an instance of a Relational Data Access Service.\n@param database_metadata An array containing one or more table definitions,\neach of which is an associative array containing the keys name, columns, PK,\nand optionally, FK. For a full discussion of the metadata, see the metadata\nsection in the general information about the Relational DAS.\n@param application_root_type The root of each data graph is an object of a\nspecial root type and the application data objects come below that. Of the\nvarious application types in the SDO model, one has to be the application\ntype immediately below the root of the data graph. If there is only one\ntable in the database metadata, so the application root type can be inferred,\nthis argument can be omitted.\n@param SDO_containment_references_metadata An array containing one or more\ndefinitions of a containment relation, each of which is an associative array\ncontaining the keys parent and child. The containment relations describe\nhow the types in the model are connected to form a tree. The type specified\nas the application root type must be present as one of the parent types\nin the containment references. If the application only needs to work with\none table at a time, and there are no containment relations in the model,\nthis argument can be omitted. For a full discussion of the metadata, see\nthe metadata section in the general information about the Relational DAS.\n@return (^)\n
createRootDataObject SDO_DAS_Relational::createRootDataObject(void)\n[SDODataObject]\nReturns the special root object in an otherwise \n   empty data graph. Used when creating a data graph from scratch..\n@return (^)\n
executePreparedQuery SDO_DAS_Relational::executePreparedQuery(PDO\n$database_handle, PDOStatement $prepared_statement, array $value_list [,\narray $column_specifier]) [SDODataObject]\nExecutes an SQL query passed as a prepared statement, with a \n   list of values to substitute for placeholders, and return the \n   results as a normalised data graph..\n@return (^)\n
executeQuery SDO_DAS_Relational::executeQuery(PDO $database_handle, string\n$SQL_statement [, array $column_specifier]) [SDODataObject]\nExecutes a given SQL query against a relational database \n   and returns the results as a normalised data graph..\n@return (^)\n
getListIndex SDO_DAS_Setting::getListIndex(void) [int]\nGet the list index for a changed many-valued property.\n@return (^)\n
getPropertyIndex SDO_DAS_Setting::getPropertyIndex(void) [int]\nGet the property index for a changed property.\n@return (^)\n
getPropertyName SDO_DAS_Setting::getPropertyName(void) [string]\nGet the property name for a changed property.\n@return (^)\n
getValue SDO_DAS_Setting::getValue(void) [mixed]\nGet the old value for the changed property.\n@return (^)\n
isSet SDO_DAS_Setting::isSet(void) [bool]\nTest whether a property was set prior to being modified.\n@return (^)\n
addTypes SDO_DAS_XML::addTypes(string $xsd_file) [void]\nTo load a second or subsequent schema file to a SDO_DAS_XML object. Load\na second or subsequent schema file to an XML DAS that has already been\ncreated with the static method create(). Although the file may be any valid\nschema file, a likely reason for using this method is to add a schema file\ncontaining definitions of extra complex types, hence the name. See Example\n4 of the parent document for an example.\n@param  `xsd_file` Path to XSD Schema file.\n@return (^)\n
create SDO_DAS_XML::create([mixed $xsd_file [, string $key]]) [SDO_DAS_XML]\nTo create SDO_DAS_XML object for a given schema file. This is the only static\nmethod of SDO_DAS_XML class. Used to instantiate SDO_DAS_XML object.\n@param  `xsd_file` Path to XSD Schema file. This is optional. If omitted a\nDAS will be created that only has the SDO base types defined. Schema files can\nthen be loaded with the addTypes() method. Can be string or array of values.\n@param  `key`\n@return (^)\n
createDataObject SDO_DAS_XML::createDataObject(string $namespace_uri, string\n$type_name) [SDO_DataObject]\nCreates SDO_DataObject for a given namespace URI and type name. Creates\nSDO_DataObject for a given namespace URI and type name. The type should be\ndefined in the underlying model otherwise SDO_TypeNotFoundException will\nbe thrown.\n@param  `namespace_uri` Namespace URI of the type name.\n@param  `type_name` Type Name.\n@return (^)\n
createDocument SDO_DAS_XML::createDocument([string $document_element_name])\n[SDO_DAS_XML_Document]\nCreates an XML Document object from scratch, without the need to load a\ndocument from a file or string.. Creates an XML Document object. This will\ncontain just one empty root element on which none of the properties will have\nbeen set. The purpose of this call is to allow an application to create an\nXML document from scratch without the need to load a document from a file\nor string. The document that is created will be as if a document had been\nloaded that contained just a single empty document element with no attributes\nset or elements within it. createDocument() may need to be told what the\ndocument element is. This will not be necessary in simple cases. When there\nis no ambiguity then no parameter need be passed to the method. However\nit is possible to load more than one schema file into the same XML DAS and\nin this case there may be more than one possible document element defined:\nfurthermore it is even possible that there are two possible document elements\nthat differ only in the namespace. To cope with these cases it is possible\nto specify either the document element name, or both the document element\nname and namespace to the method.\n@param  `document_element_name` The name of the document element. Only needed\nif there is more than one possibility.\n@param  `document_element_namespace_URI` The namespace part of the document\nelement name. Only needed if there is more than one possible document element\nwith the same name.\n@param  `dataobject`\n@return (^)\n
getRootDataObject SDO_DAS_XML_Document::getRootDataObject(void)\n[SDO_DataObject]\nReturns the root SDO_DataObject. Returns the root SDO_DataObject.\n@return (^)\n
getRootElementName SDO_DAS_XML_Document::getRootElementName(void) [string]\nReturns root element's name. Returns root element&#039;s name.\n@return (^)\n
getRootElementURI SDO_DAS_XML_Document::getRootElementURI(void) [string]\nReturns root element's URI string. Returns root element&#039;s URI string.\n@return (^)\n
setEncoding SDO_DAS_XML_Document::setEncoding(string $encoding) [void]\nSets the given string as encoding. Sets the given string as encoding.\n@param  `encoding` Encoding string.\n@return (^)\n
setXMLDeclaration SDO_DAS_XML_Document::setXMLDeclaration(bool $xmlDeclatation)\n[void]\nSets the xml declaration. Controls whether an XML declaration will be generated\nat the start of the XML document. Set to TRUE to generate the XML declaration,\nor FALSE to suppress it.\n@param  `xmlDeclatation` Boolean value to set the XML declaration.\n@return (^)\n
setXMLVersion SDO_DAS_XML_Document::setXMLVersion(string $xmlVersion) [void]\nSets the given string as xml version. Sets the given string as xml version.\n@param  `xmlVersion` xml version string.\n@return (^)\n
loadFile SDO_DAS_XML::loadFile(string $xml_file) [SDO_XMLDocument]\nReturns SDO_DAS_XML_Document object for a given path to xml instance\ndocument. Constructs the tree of SDO_DataObjects from the given address\nto xml instance document. Returns SDO_DAS_XML_Document Object. Use\nSDO_DAS_XML_Document::getRootDataObject method to get root data object.\n@param  `xml_file` Path to Instance document. This can be a path to a local\nfile or it can be a URL.\n@return (^)\n
loadString SDO_DAS_XML::loadString(string $xml_string) [SDO_DAS_XML_Document]\nReturns SDO_DAS_XML_Document for a given xml instance string. Constructs\nthe tree of SDO_DataObjects from the given xml instance string. Returns\nSDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject\nmethod to get root data object.\n@param  `xml_string` xml string.\n@return (^)\n
saveFile SDO_DAS_XML::saveFile(SDO_XMLDocument $xdoc, string $xml_file [,\nint $indent]) [void]\nSaves the SDO_DAS_XML_Document object to a file. Saves the SDO_DAS_XML_Document\nobject to a file.\n@param  `xdoc` SDO_DAS_XML_Document object.\n@param  `xml_file` xml file.\n@param  `indent` Optional argument to specify that the xml should be\nformatted. A non-negative integer is the amount to indent each level of\nthe xml. So, the integer 2, for example, will indent the xml so that each\ncontained element is two spaces further to the right than its containing\nelement. The integer 0 will cause the xml to be completely left-aligned. The\ninteger -1 means no formatting - the xml will come out on one long line.\n@return (^)\n
saveString SDO_DAS_XML::saveString(SDO_XMLDocument $xdoc [, int $indent])\n[string]\nSaves the SDO_DAS_XML_Document object to a string. Saves the\nSDO_DAS_XML_Document object to string.\n@param  `xdoc` SDO_DAS_XML_Document object.\n@param  `indent` Optional argument to specify that the xml should be\nformatted. A non-negative integer is the amount to indent each level of\nthe xml. So, the integer 2, for example, will indent the xml so that each\ncontained element is two spaces further to the right than its containing\nelement. The integer 0 will cause the xml to be completely left-aligned. The\ninteger -1 means no formatting - the xml will come out on one long line.\n@return (^)\n
create SDO_DataFactory::create(string $type_namespace_uri, string $type_name)\n[void]\nCreate an SDO_DataObject.\n@param  `type_namespace_uri` The namespace of the type.\n@param  `type_name` The name of the type.\n@return (^)\n
clear SDO_DataObject::clear(void) [void]\nClear an SDO_DataObject's properties.\n@return (^)\n
createDataObject SDO_DataObject::createDataObject(mixed $identifier)\n[SDO_DataObject]\nCreate a child SDO_DataObject.\n@param  `identifier` Identifies the property for the data object type to\nbe created. Can be either a property name (string), a property index (int),\nor an SDO_Model_Property.\n@return (^)\n
getContainer SDO_DataObject::getContainer(void) [SDO_DataObject]\nGet a data object's container.\n@return (^)\n
getSequence SDO_DataObject::getSequence(void) [SDO_Sequence]\nGet the sequence for a data object.\n@return (^)\n
getTypeName SDO_DataObject::getTypeName(void) [string]\nReturn the name of the type for a data object..\n@return (^)\n
getTypeNamespaceURI SDO_DataObject::getTypeNamespaceURI(void) [string]\nReturn the namespace URI of the type for a data object..\n@return (^)\n
px_date2string px_date2string(resource $pxdoc, int $value, string $format)\n[string]\nConverts a date into a string.. Turns a date as it stored in the paradox\nfile into human readable format. Paradox dates are the number of days since\n1.1.0000. This function is just for convenience. It can be easily replaced\nby some math and the calendar functions as demonstrated in the example below.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param value Value as stored in paradox database field of type PX_FIELD_DATE.\n@param format String format similar to the format used by date(). The\nplaceholders support by this function is a subset of those supported by date()\n(Y, y, m, n, d, j, L).\n@return (PECL paradox >= 1.4.0)\n@see px_timestamp2string() - Converts the timestamp into a string.\n@see jdtogregorian() - Converts Julian Day Count to Gregorian date\n
px_delete_record px_delete_record(resource $pxdoc, int $num) [bool]\nDeletes record from paradox database. This function deletes a record from\nthe database. It does not free the space in the database file but just marks\nit as deleted. Inserting a new record afterwards will reuse the space. Note:\nThis function is only available if pxlib >= 0.6.0 is used.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param num The record number is an artificial number counting records in\nthe order as they are stored in the database. The first record has number 0.\n@return (PECL paradox >= 1.4.0)\n
px_delete px_delete(resource $pxdoc) [bool]\nDeletes resource of paradox database. Deletes the resource of the paradox\nfile and frees all memory.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@return (PECL paradox >= 1.0.0)\n
px_get_field px_get_field(resource $pxdoc, int $fieldno) [array]\nReturns the specification of a single field.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param fieldno Number of the field. The first field has number 0. Specifying\na field number less than 0 and greater or equal the number of fields will\ntrigger an error.\n@return (PECL paradox >= 1.0.0)\n
px_get_info px_get_info(resource $pxdoc) [array]\nReturn lots of information about a paradox file.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@return (PECL paradox >= 1.0.0)\n@see px_numfields() - Returns number of fields in a database\n@see px_numrecords() - Returns number of records in a database\n
px_get_parameter px_get_parameter(resource $pxdoc, string $name) [string]\nGets a parameter. Gets various parameters.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param name The `name` can be one of the following: tablename The name of\nthe table as it will be stored in the database header.\n@param targetencoding The encoding for the output. Data which is being read\nfrom character fields with px_get_record() or px_retrieve_record() is recoded\ninto the targetencoding. If it is not set, then the data will be delivered\nas stored in the database file.\n@param inputencoding The encoding of the input data which is to be stored\ninto the database. When storing data of character fields in the database,\nthe data is expected to be delivered in this encoding.\n@return (PECL paradox >= 1.1.0)\n
px_get_record px_get_record(resource $pxdoc, int $num [, int $mode=0]) [array]\nReturns record of paradox database.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param num The record number is an artificial number counting records in\nthe order as they are stored in the database. The first record has number 0.\n@param mode The optional `mode` can be PX_KEYTOLOWER or PX_KEYTOUPPER in\norder to convert the keys of the returned array into lower or upper case. If\n`mode` is not passed or is 0, then the key will be exactly like the field\nname. The element values will contain the field values. NULL values will\nbe retained and are different from 0.0, 0 or the empty string. Fields of\ntype PX_FIELD_TIME will be returned as an integer counting the number of\nmilliseconds starting at midnight. A timestamp (PX_FIELD_TIMESTAMP) and\ndate (PX_FIELD_DATE) are floating point respectively int values counting\nmilliseconds respectively days starting at the beginning of julian\ncalendar. Use the functions px-timestamp2string() and px-date2string()\nto convert them into a character representation.\n@return (PECL paradox >= 1.0.0)\n@see px_retrieve_record() - Returns record of paradox database\n
px_get_schema px_get_schema(resource $pxdoc [, int $mode=0]) [array]\nReturns the database schema. px_get_schema() returns the database schema.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param mode If the optional `mode` is PX_KEYTOLOWER or PX_KEYTOUPPER the keys\nof the returned array will be converted to lower or upper case. If `mode` is\n0 or not passed at all, then the key name will be identical to the field name.\n@return (PECL paradox >= 1.0.0)\n
px_get_value px_get_value(resource $pxdoc, string $name) [float]\nGets a value. Gets various values.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param name `name` can be one of the following. numprimkeys The number of\nprimary keys. Paradox databases always use the first `numprimkeys` fields\nfor the primary index.\n@return (PECL paradox >= 1.1.0)\n
px_insert_record px_insert_record(resource $pxdoc, array $data) [int]\nInserts record into paradox database. Inserts a new record into the\ndatabase. The record is not necessarily inserted at the end of the database,\nbut may be inserted at any position depending on where the first free slot is\nfound. The record data is passed as an array of field values. The elements\nin the array must correspond to the fields in the database. If the array\nhas less elements than fields in the database, the remaining fields will\nbe set to null. Most field values can be passed as its equivalent php type\ne.g. a long value is used for fields of type PX_FIELD_LONG, PX_FIELD_SHORT and\nPX_FIELD_AUTOINC, a double values is used for fields of type PX_FIELD_CURRENCY\nand PX_FIELD_NUMBER. Field values for blob and alpha fields are passed as\nstrings. Fields of type PX_FIELD_TIME and PX_FIELD_DATE both require a long\nvalue. In the first case this is the number of milliseconds since midnight. In\nthe second case this is the number of days since 1.1.0000. Below there are\ntwo examples to convert the current date or timestamp into a value suitable\nfor one of paradox&#039;s date/time fields. Note: This function is only\navailable if pxlib >= 0.6.0 is used.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param data Associated or indexed array containing the field values as\ne.g. returned by px_retrieve_record().\n@return (PECL paradox >= 1.4.0)\n
px_new px_new(void) [resource]\nCreate a new paradox object. Create a new paradox object. You will have to\ncall this function before any further functions. px_new() does not create\nany file on the disk, it just creates an instance of a paradox object. This\nfunction must not be called if the object oriented interface is used. Use\n`new paradox_db()` instead.\n@return (PECL paradox >= 1.0.0)\n@see px_delete() - Deletes resource of paradox database\n@see px_open_fp() - Open paradox database\n
px_numfields px_numfields(resource $pxdoc) [int]\nReturns number of fields in a database. Get the number of fields in a\ndatabase file.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@return (PECL paradox >= 1.0.0)\n
px_numrecords px_numrecords(resource $pxdoc) [int]\nReturns number of records in a database. Get the number of records in a\ndatabase file.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@return (PECL paradox >= 1.0.0)\n
px_open_fp px_open_fp(resource $pxdoc, resource $file) [bool]\nOpen paradox database. Open an existing paradox database file. The actual\nfile has to be opened before with fopen(). This function can also be used\nto open primary index files and tread them like a paradox database. This is\nsupported for those who would like to investigate a primary index. It cannot\nbe used to accelerate access to a database file.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param file `file` is the return value from fopen() with the actual database\nfile as parameter. Make sure the database is writable if you plan to update\nor insert records.\n@return (PECL paradox >= 1.0.0)\n@see fopen() - Opens file or URL\n@see The example at px_new() - Create a new paradox object\n
px_put_record px_put_record(resource $pxdoc, array $record [, int $recpos=-1])\n[bool]\nStores record into paradox database. Stores a record into a paradox\ndatabase. The record is always added at the end of the database, regardless\nof any free slots. Use px_insert_record() to add a new record into the first\nfree slot found in the database.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param record Associated or indexed array containing the field values as\ne.g. returned by px_retrieve_record().\n@param recpos This optional parameter may be used to specify a record number\ngreater than the current number of records in the database. The function\nwill add as many empty records as needed. There is hardly any need for\nthis parameter.\n@return (PECL paradox >= 1.0.0)\n
px_retrieve_record px_retrieve_record(resource $pxdoc, int $num [, int\n$mode=0]) [array]\nReturns record of paradox database. This function is very similar to\npx_get_record() but uses internally a different approach to retrieve the\ndata. It relies on pxlib for reading each single field value, which usually\nresults in support for more field types. Note: This function is only available\nif pxlib >= 0.6.0 is used.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param num The record number is an artificial number counting records in\nthe order as they are stored in the database. The first record has number 0.\n@param mode The optional `mode` can be PX_KEYTOLOWER or PX_KEYTOUPPER in order\nto convert the keys into lower or upper case. If `mode` is not passed or is\n0, then the key will be exactly like the field name. The element values will\ncontain the field values. NULL values will be retained and are different from\n0.0, 0 or the empty string. Fields of type PX_FIELD_TIME will be returned\nas an integer counting the number of milliseconds starting at midnight. A\ntimestamp is a floating point value also counting milliseconds starting at\nthe beginning of julian calendar.\n@return (PECL paradox >= 1.4.0)\n@see px_get_record() - Returns record of paradox database\n
px_set_blob_file px_set_blob_file(resource $pxdoc, string $filename) [bool]\nSets the file where blobs are read from. Sets the name of the file where blobs\nare going to be read from or written into. Without calling this function,\npx_get_record() or px_retrieve_record() will only return data in blob fields\nif the data is part of the record and not stored in the blob file. Blob data\nis stored in the record if it is small enough to fit in the size of the blob\nfield. Calling px_put_record(), px_insert_record(), or px_update_record()\nwithout calling px_set_blob_file() will result in truncated blob fields\nunless the data fits into the database file. Calling this function twice\nwill close the first blob file and open the new one.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param filename The name of the file. Its extension should be `.MB`.\n@return (PECL paradox >= 1.3.0)\n
px_set_parameter px_set_parameter(resource $pxdoc, string $name, string $value)\n[bool]\nSets a parameter. Sets various parameters.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param name Depending on the parameter you want to set, `name` can be one\nof the following. tablename The name of the table as it will be stored in\nthe database header.\n@param targetencoding The encoding for the output. Data which is being read\nfrom character fields is recoded into the targetencoding.\n@param inputencoding The encoding of the input data which is to be stored\ninto the database.\n@param value The value of parameter to set. For inputencoding and\ntargetencoding this must be the name of the encoding as understood by iconv\nor recode, e.g. iso-8859-1, utf-8, cp850.\n@return (PECL paradox >= 1.1.0)\n@see px_get_info() - Return lots of information about a paradox file to\ndetermine the DOS code page.\n
px_set_tablename px_set_tablename(resource $pxdoc, string $name) [void]\nSets the name of a table (deprecated). Sets the table name of a paradox\ndatabase, which was created with px_create_fp(). This function is deprecated\nuse px_set_parameter() instead.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param tablename The name of the table. If it is not set explicitly it will\nbe set to the name of the database file.\n@return (PECL paradox >= 1.0.0)\n
px_set_targetencoding px_set_targetencoding(resource $pxdoc, string $encoding)\n[bool]\nSets the encoding for character fields (deprecated). Set the encoding for data\nretrieved from a character field. All character fields will be recoded to the\nencoding set by this function. If the encoding is not set, the character data\nwill be returned in the DOS code page encoding as specified in the database\nfile. The `encoding` can be any string identifier known to iconv or recode. On\nUnix systems run `iconv -l` for a list of available encodings. This function\nis deprecated and should be replaced by calling px_set_parameter(). See also\npx_get_info() to determine the DOS code page as stored in the database file.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param encoding The encoding for the output. Data which is being read from\ncharacter fields is recoded into the targetencoding.\n@return (PECL paradox >= 1.0.0)\n
px_set_value px_set_value(resource $pxdoc, string $name, float $value) [bool]\nSets a value. Sets various values.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param name `name` can be one of the following. numprimkeys The number of\nprimary keys. Paradox databases always use the first numprimkeys fields for\nthe primary index.\n@param value\n@return (PECL paradox >= 1.1.0)\n
px_timestamp2string px_timestamp2string(resource $pxdoc, float $value,\nstring $format) [string]\nConverts the timestamp into a string.. Turns a timestamp as it stored in the\nparadox file into human readable format. Paradox timestamps are the number of\nmiliseconds since 0001-01-02. This function is just for convenience. It can\nbe easily replaced by some math and the calendar functions as demonstrated\nin the following example.\n@param pxdoc Resource identifier of the paradox database.\n@param value Value as stored in paradox database field of type PX_FIELD_TIME,\nor PX_FIELD_TIMESTAMP.\n@param format String format similar to the format used by date(). The\nplaceholders support by this function is a subset of those supported by date()\n(Y, y, m, n, d, j, H, h, G, g, i, s, A, a, L).\n@return (PECL paradox >= 1.4.0)\n@see px_date2string() - Converts a date into a string.\n@see jdtogregorian() - Converts Julian Day Count to Gregorian date\n
px_update_record px_update_record(resource $pxdoc, array $data, int $num)\n[bool]\nUpdates record in paradox database. Updates an exiting record in the\ndatabase. The record starts at 0. The record data is passed as an array of\nfield values. The elements in the array must correspond to the fields in the\ndatabase. If the array has less elements than fields in the database, the\nremaining fields will be set to null. Note: This function is only available\nif pxlib >= 0.6.0 is used.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param data Associated array containing the field values as returned by\npx_retrieve_record().\n@param num The record number is an artificial number counting records in\nthe order as they are stored in the database. The first record has number 0.\n@return (PECL paradox >= 1.4.0)\n
qdom_error qdom_error(void) [string]\nReturns the error string from the last QDOM operation or FALSE if no errors\noccurred.\n
qdom_tree qdom_tree(string $doc) [QDomDocument]\nCreates a tree of an XML string.\n
quoted_printable_decode quoted_printable_decode(string $str) [string]\nConvert a quoted-printable string to an 8 bit string. This function returns\nan 8-bit binary string corresponding to the decoded quoted printable string\n(according to &raquo; RFC2045, section 6.7, not &raquo; RFC2821, section 4.5.2,\nso additional periods are not stripped from the beginning of line). This\nfunction is similar to imap_qprint(), except this one does not require the\nIMAP module to work.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@see quoted_printable_encode() - Convert a 8 bit string to a quoted-printable\nstring\n
quoted_printable_encode quoted_printable_encode(string $str) [string]\nConvert a 8 bit string to a quoted-printable string. Returns a quoted\nprintable string created according to &raquo; RFC2045, section 6.7. This\nfunction is similar to imap_8bit(), except this one does not require the\nIMAP module to work.\n@param str The input string.\n@return (PHP 5 >= 5.3.0)\n@see quoted_printable_decode() - Convert a quoted-printable string to an 8\nbit string\n@see iconv_mime_encode() - Composes a MIME header field\n
quotemeta quotemeta(string $str) [string]\nQuote meta characters.\n@param str The input string.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see addslashes() - Quote string with slashes\n@see addcslashes() - Quote string with slashes in a C style\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see nl2br() - Inserts HTML line breaks before all newlines in a string\n@see stripslashes() - Un-quotes a quoted string\n@see stripcslashes() - Un-quote string quoted with addcslashes\n@see preg_match() - Perform a regular expression match\n@see preg_quote() - Quote regular expression characters\n
rad2deg rad2deg(float $number) [float]\nConverts the radian number to the equivalent number in degrees. This function\nconverts `number` from radian to degrees.\n@param number A radian value\n@return (PHP 4, PHP 5)\n@see deg2rad() - Converts the number in degrees to the radian equivalent\n
radius_acct_open radius_acct_open(void) [resource]\nCreates a Radius handle for accounting.\n@return (PECL radius >= 1.1.0)\n
radius_add_server radius_add_server(resource $radius_handle, string $hostname,\nint $port, string $secret, int $timeout, int $max_tries) [bool]\nAdds a server. radius_add_server() may be called multiple times, and it may be\nused together with radius_config(). At most 10 servers may be specified. When\nmultiple servers are given, they are tried in round-robin fashion until a\nvalid response is received, or until each server&#039;s `max_tries` limit\nhas been reached.\n@param radius_handle\n@param hostname The `hostname` parameter specifies the server host, either\nas a fully qualified domain name or as a dotted-quad IP address in text form.\n@param port The `port` specifies the UDP port to contact on the server. If\nport is given as 0, the library looks up the radius/udp or radacct/udp service\nin the network services database, and uses the port found there. If no entry\nis found, the library uses the standard Radius ports, 1812 for authentication\nand 1813 for accounting.\n@param secret The shared secret for the server host is passed to the `secret`\nparameter. The Radius protocol ignores all but the leading 128 bytes of the\nshared secret.\n@param timeout The timeout for receiving replies from the server is passed\nto the `timeout` parameter, in units of seconds.\n@param max_tries The maximum number of repeated requests to make before\ngiving up is passed into the `max_tries`.\n@return (PECL radius >= 1.1.0)\n@see radius_config() - Causes the library to read the given configuration file\n
radius_auth_open radius_auth_open(void) [resource]\nCreates a Radius handle for authentication.\n@return (PECL radius >= 1.1.0)\n
radius_close radius_close(resource $radius_handle) [bool]\nFrees all ressources. It is not needed to call this function because php\nfrees all resources at the end of each request.\n@return (PECL radius >= 1.1.0)\n
radius_config radius_config(resource $radius_handle, string $file) [bool]\nCauses the library to read the given configuration file. Before issuing\nany Radius requests, the library must be made aware of the servers\nit can contact. The easiest way to configure the library is to call\nradius_config(). radius_config() causes the library to read a configuration\nfile whose format is described in &raquo; radius.conf.\n@param radius_handle\n@param file The pathname of the configuration file is passed as the\nfile argument to radius_config(). The library can also be configured\nprogrammatically by calls to radius_add_server().\n@return (PECL radius >= 1.1.0)\n@see radius_add_server() - Adds a server\n
radius_create_request radius_create_request(resource $radius_handle, int $type)\n[bool]\nCreate accounting or authentication request. A Radius request consists of\na code specifying the kind of request, and zero or more attributes which\nprovide additional information. To begin constructing a new request, call\nradius_create_request(). Note: Attention: You must call this function,\nbefore you can put any attribute!\n@param radius_handle\n@param type Type is RADIUS_ACCESS_REQUEST or RADIUS_ACCOUNTING_REQUEST.\n@return (PECL radius >= 1.1.0)\n@see radius_send_request() - Sends the request and waites for a reply\n
radius_cvt_addr radius_cvt_addr(string $data) [string]\nConverts raw data to IP-Address.\n@see radius_cvt_int() - Converts raw data to integer\n@see radius_cvt_string() - Converts raw data to string\n
radius_cvt_int radius_cvt_int(string $data) [int]\nConverts raw data to integer.\n@see radius_cvt_addr() - Converts raw data to IP-Address\n@see radius_cvt_string() - Converts raw data to string\n
radius_cvt_string radius_cvt_string(string $data) [string]\nConverts raw data to string.\n@see radius_cvt_addr() - Converts raw data to IP-Address\n@see radius_cvt_int() - Converts raw data to integer\n
radius_demangle_mppe_key radius_demangle_mppe_key(resource $radius_handle,\nstring $mangled) [string]\nDerives mppe-keys from mangled data. When using MPPE with MS-CHAPv2, the send-\nand recv-keys are mangled (see &raquo; RFC 2548), however this function is\nuseless, because I don&#039;t think that there is or will be a PPTP-MPPE\nimplementation in PHP.\n@return (PECL radius >= 1.2.0)\n
radius_demangle radius_demangle(resource $radius_handle, string $mangled)\n[string]\nDemangles data. Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for\nsecurity reasons, and must be demangled before you can use them.\n@return (PECL radius >= 1.2.0)\n
radius_get_attr radius_get_attr(resource $radius_handle) [mixed]\nExtracts an attribute. Like Radius requests, each response may contain\nzero or more attributes. After a response has been received successfully\nby radius_send_request(), its attributes can be extracted one by one using\nradius_get_attr(). Each time radius_get_attr() is called, it gets the next\nattribute from the current response.\n@return (PECL radius >= 1.1.0)\n@see radius_put_attr() - Attaches a binary attribute\n@see radius_get_vendor_attr() - Extracts a vendor specific attribute\n@see radius_put_vendor_attr() - Attaches a vendor specific binary attribute\n@see radius_send_request() - Sends the request and waites for a reply\n
radius_get_vendor_attr radius_get_vendor_attr(string $data) [array]\nExtracts a vendor specific attribute. If radius_get_attr() returns\nRADIUS_VENDOR_SPECIFIC, radius_get_vendor_attr() may be called to determine\nthe vendor.\n@return (PECL radius >= 1.1.0)\n@see radius_get_attr() - Extracts an attribute\n@see radius_put_vendor_attr() - Attaches a vendor specific binary attribute\n
radius_put_addr radius_put_addr(resource $radius_handle, int $type, string\n$addr) [bool]\nAttaches an IP-Address attribute.\n@return (PECL radius >= 1.1.0)\n
radius_put_attr radius_put_attr(resource $radius_handle, int $type, string\n$value) [bool]\nAttaches a binary attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_get_attr() - Extracts an attribute\n@see radius_get_vendor_attr() - Extracts a vendor specific attribute\n@see radius_put_vendor_attr() - Attaches a vendor specific binary attribute\n
radius_put_int radius_put_int(resource $radius_handle, int $type, int $value)\n[bool]\nAttaches an integer attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_put_string() - Attaches a string attribute\n@see radius_put_vendor_int() - Attaches a vendor specific integer attribute\n@see radius_put_vendor_string() - Attaches a vendor specific string attribute\n
radius_put_string radius_put_string(resource $radius_handle, int $type,\nstring $value) [bool]\nAttaches a string attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_put_int() - Attaches an integer attribute\n@see radius_put_vendor_int() - Attaches a vendor specific integer attribute\n@see radius_put_vendor_string() - Attaches a vendor specific string attribute\n
radius_put_vendor_addr radius_put_vendor_addr(resource $radius_handle,\nint $vendor, int $type, string $addr) [bool]\nAttaches a vendor specific IP-Address attribute.\n@return (PECL radius >= 1.1.0)\n
radius_put_vendor_attr radius_put_vendor_attr(resource $radius_handle,\nint $vendor, int $type, string $value) [bool]\nAttaches a vendor specific binary attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_get_vendor_attr() - Extracts a vendor specific attribute\n
radius_put_vendor_int radius_put_vendor_int(resource $radius_handle, int\n$vendor, int $type, int $value) [bool]\nAttaches a vendor specific integer attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_put_vendor_string() - Attaches a vendor specific string attribute\n
radius_put_vendor_string radius_put_vendor_string(resource $radius_handle,\nint $vendor, int $type, string $value) [bool]\nAttaches a vendor specific string attribute.\n@return (PECL radius >= 1.1.0)\n@see radius_put_vendor_int() - Attaches a vendor specific integer attribute\n
radius_request_authenticator radius_request_authenticator(resource\n$radius_handle) [string]\nReturns the request authenticator. The request authenticator is needed for\ndemangling mangled data like passwords and encryption-keys.\n@return (PECL radius >= 1.1.0)\n@see radius_demangle() - Demangles data\n
radius_send_request radius_send_request(resource $radius_handle) [int]\nSends the request and waites for a reply. After the Radius request has been\nconstructed, it is sent by radius_send_request(). The radius_send_request()\nfunction sends the request and waits for a valid reply, retrying the defined\nservers in round-robin fashion as necessary.\n@return (PECL radius >= 1.1.0)\n@see radius_create_request() - Create accounting or authentication request\n
radius_server_secret radius_server_secret(resource $radius_handle) [string]\nReturns the shared secret. The shared secret is needed as salt for demangling\nmangled data like passwords and encryption-keys.\n@return (PECL radius >= 1.1.0)\n
radius_strerror radius_strerror(resource $radius_handle) [string]\nReturns an error message. If Radius-functions fail then they record an error\nmessage. This error message can be retrieved with this function.\n@return (PECL radius >= 1.1.0)\n
rand rand(void) [int]\nGenerate a random integer.\n@param min The lowest value to return (default: 0)\n@param max The highest value to return (default: getrandmax())\n@return (PHP 4, PHP 5)\n@see srand() - Seed the random number generator\n@see getrandmax() - Show largest possible random value\n@see mt_rand() - Generate a better random value\n
range range(mixed $low, mixed $high [, number $step=1]) [array]\nCreate an array containing a range of elements. Create an array containing\na range of elements.\n@param low Low value.\n@param high High value.\n@param step If a `step` value is given, it will be used as the increment\nbetween elements in the sequence. `step` should be given as a positive\nnumber. If not specified, `step` will default to 1.\n@return (PHP 4, PHP 5)\n@see shuffle() - Shuffle an array\n@see array_fill() - Fill an array with values\n@see foreach\n
rar_wrapper_cache_stats rar_wrapper_cache_stats(void) [string]\nCache hits and misses for the URL wrapper.  This function is currently not\ndocumented; only its argument list is available.\n@return (PECL rar >= 3.0.0)\n
rawurldecode rawurldecode(string $str) [string]\nDecode URL-encoded strings. Returns a string in which the sequences with\npercent (`%`) signs followed by two hex digits have been replaced with\nliteral characters.\n@param str The URL to be decoded.\n@return (PHP 4, PHP 5)\n@note Note: rawurldecode() does not decode plus symbols (&#039;+&#039;)\ninto spaces. urldecode() does.\n@see rawurlencode() - URL-encode according to RFC 3986\n@see urldecode() - Decodes URL-encoded string\n@see urlencode() - URL-encodes string\n
rawurlencode rawurlencode(string $str) [string]\nURL-encode according to RFC 3986. Encodes the given string according to\n&raquo; RFC 3986.\n@param str The URL to be encoded.\n@return (PHP 4, PHP 5)\n@see rawurldecode() - Decode URL-encoded strings\n@see urldecode() - Decodes URL-encoded string\n@see urlencode() - URL-encodes string\n@see &raquo; RFC 3986\n
read_exif_data read_exif_data\nAlias of exif_read_data.\n
readdir readdir([resource $dir_handle]) [string]\nRead entry from directory handle. Returns the filename of the next file\nfrom the directory. The filenames are returned in the order in which they\nare stored by the filesystem.\n@param dir_handle The directory handle resource previously opened with\nopendir(). If the directory handle is not specified, the last link opened\nby opendir() is assumed.\n@return (PHP 4, PHP 5)\n@see is_dir() - Tells whether the filename is a directory\n@see glob() - Find pathnames matching a pattern\n@see opendir() - Open directory handle\n@see scandir() - List files and directories inside the specified path\n
readfile readfile(string $filename [, bool $use_include_path=false [,\nresource $context]]) [int]\nOutputs a file. Reads a file and writes it to the output buffer.\n@param filename The filename being read.\n@param use_include_path You can use the optional second parameter and set\nit to TRUE, if you want to search for the file in the include_path, too.\n@param context A context stream resource.\n@return (PHP 4, PHP 5)\n@see fpassthru() - Output all remaining data on a file pointer\n@see file() - Reads entire file into an array\n@see fopen() - Opens file or URL\n@see include() - include\n@see require() - require\n@see virtual() - Perform an Apache sub-request\n@see file_get_contents() - Reads entire file into a string\n@see Supported Protocols and Wrappers\n
readgzfile readgzfile(string $filename [, int $use_include_path=0]) [int]\nOutput a gz-file. Reads a file, decompresses it and writes it to standard\noutput. readgzfile() can be used to read a file which is not in gzip format; in\nthis case readgzfile() will directly read from the file without decompression.\n@param filename The file name. This file will be opened from the filesystem\nand its contents written to standard output.\n@param use_include_path You can set this optional parameter to `1`, if you\nwant to search for the file in the include_path too.\n@return (PHP 4, PHP 5)\n@see gzpassthru() - Output all remaining data on a gz-file pointer\n@see gzfile() - Read entire gz-file into an array\n@see gzopen() - Open gz-file\n
readline_add_history readline_add_history(string $line) [bool]\nAdds a line to the history. This function adds a line to the command line\nhistory.\n@param line The line to be added in the history.\n@return (PHP 4, PHP 5)\n
readline_callback_handler_install readline_callback_handler_install(string\n$prompt, callback $callback) [bool]\nInitializes the readline callback interface and terminal, prints the prompt\nand returns immediately. Sets up a readline callback interface then prints\n`prompt` and immediately returns. Calling this function twice without\nremoving the previous callback interface will automatically and conveniently\noverwrite the old interface. The callback feature is useful when combined\nwith stream_select() as it allows interleaving of IO and user input, unlike\nreadline().\n@param prompt The prompt message.\n@param callback The `callback` function takes one parameter; the user input\nreturned.\n@return (PHP 5 >= 5.1.0)\n@see readline_callback_handler_remove() - Removes a previously installed\ncallback handler and restores terminal settings\n@see readline_callback_read_char() - Reads a character and informs the\nreadline callback interface when a line is received\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n
readline_callback_handler_remove readline_callback_handler_remove(void) [bool]\nRemoves a previously installed callback handler and restores terminal\nsettings. Removes a previously installed callback handler and restores\nterminal settings.\n@return (PHP 5 >= 5.1.0)\n@see readline_callback_handler_install() - Initializes the readline callback\ninterface and terminal, prints the prompt and returns immediately\n@see readline_callback_read_char() - Reads a character and informs the\nreadline callback interface when a line is received\n
readline_callback_read_char readline_callback_read_char(void) [void]\nReads a character and informs the readline callback interface when a line\nis received. Reads a character of user input. When a line is received,\nthis function informs the readline callback interface installed using\nreadline_callback_handler_install() that a line is ready for input.\n@return (PHP 5 >= 5.1.0)\n@see readline_callback_handler_install() - Initializes the readline callback\ninterface and terminal, prints the prompt and returns immediately\n@see readline_callback_handler_remove() - Removes a previously installed\ncallback handler and restores terminal settings\n
readline_clear_history readline_clear_history(void) [bool]\nClears the history. This function clears the entire command line history.\n@return (PHP 4, PHP 5)\n
readline_completion_function readline_completion_function(callback $function)\n[bool]\nRegisters a completion function. This function registers a completion\nfunction. This is the same kind of functionality you&#039;d get if you hit\nyour tab key while using Bash.\n@param function You must supply the name of an existing function which\naccepts a partial command line and returns an array of possible matches.\n@return (PHP 4, PHP 5)\n
readline_info readline_info([string $varname [, string $newvalue]]) [mixed]\nGets/sets various internal readline variables. Gets or sets various internal\nreadline variables.\n@param varname A variable name.\n@param newvalue If provided, this will be the new value of the setting.\n@return (PHP 4, PHP 5)\n
readline_list_history readline_list_history(void) [array]\nLists the history. Gets the entire command line history.\n@return (PHP 4, PHP 5)\n
readline_on_new_line readline_on_new_line(void) [void]\nInform readline that the cursor has moved to a new line. Tells readline that\nthe cursor has moved to a new line.\n@return (PHP 5 >= 5.1.0)\n
readline_read_history readline_read_history([string $filename]) [bool]\nReads the history. This function reads a command history from a file.\n@param filename Path to the filename containing the command history.\n@return (PHP 4, PHP 5)\n
readline_redisplay readline_redisplay(void) [void]\nRedraws the display. Redraws readline to redraw the display.\n@return (PHP 5 >= 5.1.0)\n
readline_write_history readline_write_history([string $filename]) [bool]\nWrites the history. This function writes the command history to a file.\n@param filename Path to the saved file.\n@return (PHP 4, PHP 5)\n
readline readline([string $prompt]) [string]\nReads a line. Reads a single line from the user. You must add this line to\nthe history yourself using readline_add_history().\n@param prompt You may specify a string with which to prompt the user.\n@return (PHP 4, PHP 5)\n
readlink readlink(string $path) [string]\nReturns the target of a symbolic link. readlink() does the same as the\nreadlink C function.\n@param path The symbolic link path.\n@return (PHP 4, PHP 5)\n@see is_link() - Tells whether the filename is a symbolic link\n@see symlink() - Creates a symbolic link\n@see linkinfo() - Gets information about a link\n
realpath realpath(string $path) [string]\nReturns canonicalized absolute pathname. realpath() expands all symbolic\nlinks and resolves references to &#039;/./&#039;, &#039;/../&#039; and extra\n&#039;/&#039; characters in the input `path` and return the canonicalized\nabsolute pathname.\n@param path The path being checked.\n@return (PHP 4, PHP 5)\n@see basename() - Returns trailing name component of path\n@see dirname() - Returns parent directory's path\n@see pathinfo() - Returns information about a file path\n
recode_file recode_file(string $request, resource $input, resource $output)\n[bool]\nRecode from file to file according to recode request. Recode the file\nreferenced by file handle `input` into the file referenced by file handle\n`output` according to the recode `request`.\n@param request The desired recode request type\n@param input A local file handle resource for the `input`\n@param output A local file handle resource for the `output`\n@return (PHP 4, PHP 5)\n@see fopen() - Opens file or URL\n
recode_string recode_string(string $request, string $string) [string]\nRecode a string according to a recode request. Recode the string `string`\naccording to the recode request `request`.\n@param request The desired recode request type\n@param string The string to be recoded\n@return (PHP 4, PHP 5)\n@see The GNU Recode documentation of your installation for detailed\ninstructions about recode requests.\n
recode recode\nAlias of recode_string.\n
register_shutdown_function register_shutdown_function(callback $function [,\nmixed $parameter [, mixed $...]]) [void]\nRegister a function for execution on shutdown. Registers the function named by\n`function` to be executed when script processing is complete or when exit()\nis called. Multiple calls to register_shutdown_function() can be made,\nand each will be called in the same order as they were registered. If you\ncall exit() within one registered shutdown function, processing will stop\ncompletely and no other registered shutdown functions will be called.\n@param function The shutdown function to register. The shutdown functions\nare called as the part of the request so that it&#039;s possible to send the\noutput from them. There is currently no way to process the data with output\nbuffering functions in the shutdown function. Shutdown functions are called\nafter closing all opened output buffers thus, for example, its output will\nnot be compressed if zlib.output_compression is enabled.\n@param parameter It is possible to pass parameters to the shutdown function\nby passing additional parameters.\n@param ...\n@return (PHP 4, PHP 5)\n@note Note: Typically undefined functions cause fatal errors in PHP, but\nwhen the `function` called with register_shutdown_function() is undefined,\nan error of level E_WARNING is generated instead. Also, for reasons internal\nto PHP, this error will refer to `Unknown` at line #0.\n@note Note: Working directory of the script can change inside the shutdown\nfunction under some web servers, e.g. Apache.\n@see auto_append_file\n@see exit() - Output a message and terminate the current script\n@see The section on connection handling\n
register_tick_function register_tick_function(callback $function [, mixed $arg\n[, mixed $...]]) [bool]\nRegister a function for execution on each tick.\n@param function The function name as a string, or an array consisting of an\nobject and a method.\n@param arg\n@param ...\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see declare\n@see unregister_tick_function() - De-register a function for execution on\neach tick\n
rename_function rename_function(string $original_name, string $new_name) [bool]\nRenames orig_name to new_name in the global function table. Renames a orig_name\nto new_name in the global function table. Useful for temporarily overriding\nbuilt-in functions.\n@param original_name The original function name.\n@param new_name The new name for the `original_name` function.\n@return (PECL apd >= 0.2)\n
rename rename(string $oldname, string $newname [, resource $context]) [bool]\nRenames a file or directory. Attempts to rename `oldname` to `newname`.\n@param oldname Note: The old name. The wrapper used in `oldname` must match\nthe wrapper used in `newname`.\n@param newname The new name.\n@param context Note: Context support was added with PHP 5.0.0. For a\ndescription of `contexts`, refer to Stream Functions.\n@return (PHP 4, PHP 5)\n@see copy() - Copies file\n@see unlink() - Deletes a file\n@see move_uploaded_file() - Moves an uploaded file to a new location\n
reset reset(array &$array) [mixed]\nSet the internal pointer of an array to its first element. reset() rewinds\n`array`&#039;s internal pointer to the first element and returns the value\nof the first array element.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see current() - Return the current element in an array\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n@see end() - Set the internal pointer of an array to its last element\n@see next() - Advance the internal array pointer of an array\n@see prev() - Rewind the internal array pointer\n
restore_error_handler restore_error_handler(void) [bool]\nRestores the previous error handler function. Used after changing the error\nhandler function using set_error_handler(), to revert to the previous error\nhandler (which could be the built-in or a user defined function).\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: Calling restore_error_handler() from the `error_handler` function\nis ignored.\n@see error_reporting() - Sets which PHP errors are reported\n@see set_error_handler() - Sets a user-defined error handler function\n@see restore_exception_handler() - Restores the previously defined exception\nhandler function\n@see trigger_error() - Generates a user-level error/warning/notice message\n
restore_exception_handler restore_exception_handler(void) [bool]\nRestores the previously defined exception handler function. Used after\nchanging the exception handler function using set_exception_handler(), to\nrevert to the previous exception handler (which could be the built-in or a\nuser defined function).\n@return (PHP 5)\n@see set_exception_handler() - Sets a user-defined exception handler function\n@see set_error_handler() - Sets a user-defined error handler function\n@see restore_error_handler() - Restores the previous error handler function\n@see error_reporting() - Sets which PHP errors are reported\n
restore_include_path restore_include_path(void) [void]\nRestores the value of the include_path configuration option.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ini_restore() - Restores the value of a configuration option\n@see get_include_path() - Gets the current include_path configuration option\n@see set_include_path() - Sets the include_path configuration option\n@see include() - include\n
rewind rewind(resource $handle) [bool]\nRewind the position of a file pointer. Sets the file position indicator for\n`handle` to the beginning of the file stream. Note: If you have opened the\nfile in append (&quot;a&quot; or &quot;a+&quot;) mode, any data you write\nto the file will always be appended, regardless of the file position.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen().\n@return (PHP 4, PHP 5)\n@see fread() - Binary-safe file read\n@see fseek() - Seeks on a file pointer\n@see ftell() - Returns the current position of the file read/write pointer\n@see fwrite() - Binary-safe file write\n
rewinddir rewinddir([resource $dir_handle]) [void]\nRewind directory handle. Resets the directory stream indicated by `dir_handle`\nto the beginning of the directory.\n@param dir_handle The directory handle resource previously opened with\nopendir(). If the directory handle is not specified, the last link opened\nby opendir() is assumed.\n
rmdir rmdir(string $dirname [, resource $context]) [bool]\nRemoves directory. Attempts to remove the directory named by `dirname`. The\ndirectory must be empty, and the relevant permissions must permit this. A\nE_WARNING level error will be generated on failure.\n@param dirname Path to the directory.\n@param context Note: Context support was added with PHP 5.0.0. For a\ndescription of `contexts`, refer to Stream Functions.\n@return (PHP 4, PHP 5)\n@note Note: When safe mode is enabled, PHP checks whether the directory in\nwhich the script is operating has the same UID (owner) as the script that\nis being executed.\n@see is_dir() - Tells whether the filename is a directory\n@see mkdir() - Makes directory\n@see unlink() - Deletes a file\n
round round(float $val [, int $precision=0 [, int $mode=PHP_ROUND_HALF_UP]])\n[float]\nRounds a float. Returns the rounded value of `val` to specified `precision`\n(number of digits after the decimal point). `precision` can also be\nnegative or zero (default). Note: PHP doesn&#039;t handle strings like\n`&quot;12,300.2&quot;` correctly by default. See converting from strings.\n@param val The value to round\n@param precision The optional number of decimal digits to round to.\n@param mode One of PHP_ROUND_HALF_UP, PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN,\nor PHP_ROUND_HALF_ODD.\n@return (PHP 4, PHP 5)\n@see ceil() - Round fractions up\n@see floor() - Round fractions down\n@see number_format() - Format a number with grouped thousands\n
rpm_close rpm_close(resource $rpmr) [bool]\nCloses an RPM file. rpm_close() will close an RPM file pointer.\n@param rpmr A file pointer resource successfully opened by rpm_open().\n@return (PECL rpmreader >= 0.1.0)\n@see rpm_open() - Opens an RPM file\n
rpm_get_tag rpm_get_tag(resource $rpmr, int $tagnum) [mixed]\nRetrieves a header tag from an RPM file. rpm_get_tag() will retrieve a given\ntag from the RPM file&#039;s header and return it.\n@param rpmr A file pointer resource successfully opened by rpm_open().\n@param tagnum The tag number to retrieve from the RPM header. This value\ncan be specified using the list of constants defined by this module.\n@return (PECL rpmreader >= 0.1.0)\n@see rpm_open() - Opens an RPM file\n@see rpm_close() - Closes an RPM file\n
rpm_is_valid rpm_is_valid(string $filename) [bool]\nTests a filename for validity as an RPM file. rpm_is_valid() will test an\nRPM file for validity as an RPM file. This is not the same as rpm_open()\nas it only checks the file for validity but does not return a file pointer\nto be used by further functions.\n@param filename The filename of the RPM file you wish to check for validity.\n@return (PECL rpmreader >= 0.1.0)\n
rpm_open rpm_open(string $filename) [resource]\nOpens an RPM file. rpm_open() will open an RPM file and will determine if\nthe file is a valid RPM file.\n@param filename The filename of the RPM file you wish to open.\n@return (PECL rpmreader >= 0.1.0)\n@see rpm_close() - Closes an RPM file\n
rpm_version rpm_version(void) [string]\nReturns a string representing the current version of the\n   rpmreader extension. rpm_version() will return the current version of\n   the rpmreader extension.\n@return (PECL rpmreader >= 0.3.0)\n
rrd_create rrd_create(string $filename, array $options) [bool]\nCreates rrd database file. Creates the rdd database file.\n@param filename		 Filename for newly created rrd file.\n@param options Options for rrd create - list of strings. See man page of\nrrd create for whole list of options.\n@return (PECL rrd >= 0.9.0)\n
rrd_error rrd_error(void) [string]\nGets latest error message.. Returns latest global rrd error message.\n@return (PECL rrd >= 0.9.0)\n
proc_get_status proc_get_status(resource $process) [array]\nGet information about a process opened by proc_open. proc_get_status()\nfetches data about a process opened using proc_open().\n@param process The proc_open() resource that will be evaluated.\n@return (PHP 5)\n@see proc_open() - Execute a command and open file pointers for input/output\n
proc_nice proc_nice(int $increment) [bool]\nChange the priority of the current process. proc_nice() changes the priority\nof the current process by the amount specified in `increment`. A positive\n`increment` will lower the priority of the current process, whereas a negative\n`increment` will raise the priority. proc_nice() is not related to proc_open()\nand its associated functions in any way.\n@param increment The increment value of the priority change.\n@return (PHP 5)\n@note Note: Availability proc_nice() will only exist if your system has\n&#039;nice&#039; capabilities. &#039;nice&#039; conforms to: SVr4, SVID EXT,\nAT&amp;T, X/OPEN, BSD 4.3. This means that proc_nice() is not available\non Windows.\n
proc_open proc_open(string $cmd, array $descriptorspec, array &$pipes [,\nstring $cwd [, array $env [, array $other_options]]]) [resource]\nExecute a command and open file pointers for input/output. proc_open() is\nsimilar to popen() but provides a much greater degree of control over the\nprogram execution.\n@param cmd The command to execute\n@param descriptorspec An indexed array where the key represents the descriptor\nnumber and the value represents how PHP will pass that descriptor to the\nchild process. 0 is stdin, 1 is stdout, while 2 is stderr. Each element can\nbe: An array describing the pipe to pass to the process. The first element\nis the descriptor type and the second element is an option for the given\ntype. Valid types are `pipe` (the second element is either `r` to pass the\nread end of the pipe to the process, or `w` to pass the write end) and `file`\n(the second element is a filename). A stream resource representing a real file\ndescriptor (e.g. opened file, a socket, STDIN). The file descriptor numbers\nare not limited to 0, 1 and 2 - you may specify any valid file descriptor\nnumber and it will be passed to the child process. This allows your script\nto interoperate with other scripts that run as &quot;co-processes&quot;. In\nparticular, this is useful for passing passphrases to programs like PGP,\nGPG and openssl in a more secure manner. It is also useful for reading status\ninformation provided by those programs on auxiliary file descriptors.\n@param pipes Will be set to an indexed array of file pointers that correspond\nto PHP&#039;s end of any pipes that are created.\n@param cwd The initial working dir for the command. This must be an absolute\ndirectory path, or NULL if you want to use the default value (the working\ndir of the current PHP process)\n@param env An array with the environment variables for the command that will\nbe run, or NULL to use the same environment as the current PHP process\n@param other_options Allows you to specify additional options. Currently\nsupported options include: `suppress_errors` (windows only): suppresses errors\ngenerated by this function when it&#039;s set to TRUE `bypass_shell` (windows\nonly): bypass `cmd.exe` shell when set to TRUE `context`: stream context used\nwhen opening files (created with stream_context_create()) `binary_pipes`:\nopen pipes in binary mode, instead of using the usual `stream_encoding`\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: Windows compatibility: Descriptors beyond 2 (stderr) are made\navailable to the child process as inheritable handles, but since the Windows\narchitecture does not associate file descriptor numbers with low-level\nhandles, the child process does not (yet) have a means of accessing those\nhandles. Stdin, stdout and stderr work as expected.\n@note Note: If you only need a uni-directional (one-way) process pipe,\nuse popen() instead, as it is much easier to use.\n@see popen() - Opens process file pointer\n@see exec() - Execute an external program\n@see system() - Execute an external program and display the output\n@see passthru() - Execute an external program and display raw output\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n@see The backtick operator\n
proc_terminate proc_terminate(resource $process [, int $signal=15]) [bool]\nKills a process opened by proc_open. Signals a `process` (created using\nproc_open()) that it should terminate. proc_terminate() returns immediately\nand does not wait for the process to terminate. proc_terminate() allows you\nterminate the process and continue with other tasks. You may poll the process\n(to see if it has stopped yet) by using the proc_get_status() function.\n@param process The proc_open() resource that will be closed.\n@param signal This optional parameter is only useful on POSIX operating\nsystems; you may specify a signal to send to the process using the `kill(2)`\nsystem call. The default is `SIGTERM`.\n@return (PHP 5)\n@see proc_open() - Execute a command and open file pointers for input/output\n@see proc_close() - Close a process opened by proc_open and return the exit\ncode of that process\n@see proc_get_status() - Get information about a process opened by proc_open\n
property_exists property_exists(mixed $class, string $property) [bool]\nChecks if the object or class has a property. This function checks if the\ngiven `property` exists in the specified class. Note: As opposed with isset(),\nproperty_exists() returns TRUE even if the property has the value NULL.\n@param class The class name or an object of the class to test for\n@param property The name of the property\n@return (PHP 5 >= 5.1.0)\n@note Note: Using this function will use any registered autoloaders if the\nclass is not already known.\n@note Note: The property_exists() function cannot detect properties that\nare magically accessible using the `__get` magic method.\n@see method_exists() - Checks if the class method exists\n
ps_add_bookmark ps_add_bookmark(resource $psdoc, string $text [, int $parent=0\n[, int $open=0]]) [int]\nAdd bookmark to current page. Adds a bookmark for the current page. Bookmarks\nusually appear in PDF-Viewers left of the page in a hierarchical tree. Clicking\non a bookmark will jump to the given page. The note will not be visible if\nthe document is printed or viewed but it will show up if the document is\nconverted to pdf by either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text used for displaying the bookmark.\n@param parent A bookmark previously created by this function which is used\nas the parent of the new bookmark.\n@param open If `open` is unequal to zero the bookmark will be shown open by\nthe pdf viewer.\n@return (PECL ps >= 1.1.0)\n@see ps_add_launchlink() - Adds link which launches file\n@see ps_add_pdflink() - Adds link to a page in a second pdf document\n@see ps_add_weblink() - Adds link to a web location\n
ps_add_launchlink ps_add_launchlink(resource $psdoc, float $llx, float $lly,\nfloat $urx, float $ury, string $filename) [bool]\nAdds link which launches file. Places a hyperlink at the given position\npointing to a file program which is being started when clicked on. The\nhyperlink&#039;s source position is a rectangle with its lower left corner at\n(llx, lly) and its upper right corner at (urx, ury). The rectangle has by\ndefault a thin blue border. The note will not be visible if the document is\nprinted or viewed but it will show up if the document is converted to pdf\nby either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param llx The x-coordinate of the lower left corner.\n@param lly The y-coordinate of the lower left corner.\n@param urx The x-coordinate of the upper right corner.\n@param ury The y-coordinate of the upper right corner.\n@param filename The path of the program to be started, when the link is\nclicked on.\n@return (PECL ps >= 1.1.0)\n@see ps_add_locallink() - Adds link to a page in the same document\n@see ps_add_pdflink() - Adds link to a page in a second pdf document\n@see ps_add_weblink() - Adds link to a web location\n
ps_add_locallink ps_add_locallink(resource $psdoc, float $llx, float $lly,\nfloat $urx, float $ury, int $page, string $dest) [bool]\nAdds link to a page in the same document. Places a hyperlink at the given\nposition pointing to a page in the same document. Clicking on the link\nwill jump to the given page. The first page in a document has number 1. The\nhyperlink&#039;s source position is a rectangle with its lower left corner at\n(`llx`, `lly`) and its upper right corner at (`urx`, `ury`). The rectangle has\nby default a thin blue border. The note will not be visible if the document\nis printed or viewed but it will show up if the document is converted to\npdf by either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param llx The x-coordinate of the lower left corner.\n@param lly The y-coordinate of the lower left corner.\n@param urx The x-coordinate of the upper right corner.\n@param ury The y-coordinate of the upper right corner.\n@param page The number of the page displayed when clicking on the link.\n@param dest The parameter `dest` determines how the document is being\nviewed. It can be `fitpage`, `fitwidth`, `fitheight`, or `fitbbox`.\n@return (PECL ps >= 1.1.0)\n@see ps_add_launchlink() - Adds link which launches file\n@see ps_add_pdflink() - Adds link to a page in a second pdf document\n@see ps_add_weblink() - Adds link to a web location\n
ps_add_note ps_add_note(resource $psdoc, float $llx, float $lly, float $urx,\nfloat $ury, string $contents, string $title, string $icon, int $open) [bool]\nAdds note to current page. Adds a note at a certain position on the page. Notes\nare like little rectangular sheets with text on it, which can be placed\nanywhere on a page. They are shown either folded or unfolded. If unfolded,\nthe specified icon is used as a placeholder. The note will not be visible\nif the document is printed or viewed but it will show up if the document is\nconverted to pdf by either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param llx The x-coordinate of the lower left corner.\n@param lly The y-coordinate of the lower left corner.\n@param urx The x-coordinate of the upper right corner.\n@param ury The y-coordinate of the upper right corner.\n@param contents The text of the note.\n@param title The title of the note as displayed in the header of the note.\n@param icon The icon shown if the note is folded. This parameter can be set to\n`comment`, `insert`, `note`, `paragraph`, `newparagraph`, `key`, or `help`.\n@param open If `open` is unequal to zero the note will be shown unfolded\nafter opening the document with a pdf viewer.\n@return (PECL ps >= 1.1.0)\n@see ps_add_pdflink() - Adds link to a page in a second pdf document\n@see ps_add_launchlink() - Adds link which launches file\n@see ps_add_locallink() - Adds link to a page in the same document\n@see ps_add_weblink() - Adds link to a web location\n
ps_add_pdflink ps_add_pdflink(resource $psdoc, float $llx, float $lly,\nfloat $urx, float $ury, string $filename, int $page, string $dest) [bool]\nAdds link to a page in a second pdf document. Places a hyperlink at the\ngiven position pointing to a second pdf document. Clicking on the link\nwill branch to the document at the given page. The first page in a document\nhas number 1. The hyperlink&#039;s source position is a rectangle with its\nlower left corner at (`llx`, `lly`) and its upper right corner at (`urx`,\n`ury`). The rectangle has by default a thin blue border. The note will not\nbe visible if the document is printed or viewed but it will show up if the\ndocument is converted to pdf by either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param llx The x-coordinate of the lower left corner.\n@param lly The y-coordinate of the lower left corner.\n@param urx The x-coordinate of the upper right corner.\n@param ury The y-coordinate of the upper right corner.\n@param filename The name of the pdf document to be opened when clicking on\nthis link.\n@param page The page number of the destination pdf document\n@param dest The parameter `dest` determines how the document is being\nviewed. It can be `fitpage`, `fitwidth`, `fitheight`, or `fitbbox`.\n@return (PECL ps >= 1.1.0)\n@see ps_add_launchlink() - Adds link which launches file\n@see ps_add_locallink() - Adds link to a page in the same document\n@see ps_add_weblink() - Adds link to a web location\n
ps_add_weblink ps_add_weblink(resource $psdoc, float $llx, float $lly,\nfloat $urx, float $ury, string $url) [bool]\nAdds link to a web location. Places a hyperlink at the given position pointing\nto a web page. The hyperlink&#039;s source position is a rectangle with its\nlower left corner at (`llx`, `lly`) and its upper right corner at (`urx`,\n`ury`). The rectangle has by default a thin blue border. The note will not\nbe visible if the document is printed or viewed but it will show up if the\ndocument is converted to pdf by either Acrobat Distiller™ or Ghostview.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param llx The x-coordinate of the lower left corner.\n@param lly The y-coordinate of the lower left corner.\n@param urx The x-coordinate of the upper right corner.\n@param ury The y-coordinate of the upper right corner.\n@param url The url of the hyperlink to be opened when clicking on this link,\ne.g. `http://www.php.net`.\n@return (PECL ps >= 1.1.0)\n@see ps_add_launchlink() - Adds link which launches file\n@see ps_add_locallink() - Adds link to a page in the same document\n@see ps_add_pdflink() - Adds link to a page in a second pdf document\n
ps_arc ps_arc(resource $psdoc, float $x, float $y, float $radius, float\n$alpha, float $beta) [bool]\nDraws an arc counterclockwise. Draws a portion of a circle with at middle point\nat (`x`, `y`). The arc starts at an angle of `alpha` and ends at an angle of\n`beta`. It is drawn counterclockwise (use ps_arcn() to draw clockwise). The\nsubpath added to the current path starts on the arc at angle `alpha` and\nends on the arc at angle `beta`.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x The x-coordinate of the circle&#039;s middle point.\n@param y The y-coordinate of the circle&#039;s middle point.\n@param radius The radius of the circle\n@param alpha The start angle given in degrees.\n@param beta The end angle given in degrees.\n@return (PECL ps >= 1.1.0)\n@see ps_arcn() - Draws an arc clockwise\n
ps_arcn ps_arcn(resource $psdoc, float $x, float $y, float $radius, float\n$alpha, float $beta) [bool]\nDraws an arc clockwise. Draws a portion of a circle with at middle point at\n(`x`, `y`). The arc starts at an angle of `alpha` and ends at an angle of\n`beta`. It is drawn clockwise (use ps_arc() to draw counterclockwise). The\nsubpath added to the current path starts on the arc at angle `beta` and ends\non the arc at angle `alpha`.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x The x-coordinate of the circle&#039;s middle point.\n@param y The y-coordinate of the circle&#039;s middle point.\n@param radius The radius of the circle\n@param alpha The starting angle given in degrees.\n@param beta The end angle given in degrees.\n@return (PECL ps >= 1.1.0)\n@see ps_arc() - Draws an arc counterclockwise\n
ps_begin_page ps_begin_page(resource $psdoc, float $width, float $height)\n[bool]\nStart a new page. Starts a new page. Although the parameters `width` and\n`height` imply a different page size for each page, this is not possible in\nPostScript. The first call of ps_begin_page() will set the page size for the\nwhole document. Consecutive calls will have no effect, except for creating a\nnew page. The situation is different if you intent to convert the PostScript\ndocument into PDF. This function places pdfmarks into the document which\ncan set the size for each page indiviually. The resulting PDF document will\nhave different page sizes. Though PostScript does not know different page\nsizes, pslib places a bounding box for each page into the document. This\nsize is evaluated by some PostScript viewers and will have precedence over\nthe BoundingBox in the Header of the document. This can lead to unexpected\nresults when you set a BoundingBox whose lower left corner is not (0, 0),\nbecause the bounding box of the page will always have a lower left corner\n(0, 0) and overwrites the global setting. Each page is encapsulated into\nsave/restore. This means, that most of the settings made on one page will\nnot be retained on the next page. If there is up to the first call of\nps_begin_page() no call of ps_findfont(), then the header of the PostScript\ndocument will be output and the bounding box will be set to the size of the\nfirst page. The lower left corner of the bounding box is set to (0, 0). If\nps_findfont() was called before, then the header has been output already,\nand the document will not have a valid bounding box. In order to prevent\nthis, one should call ps_set_info() to set the info field `BoundingBox`\nand possibly `Orientation` before any ps_findfont() or ps_begin_page()\ncalls. Note: Up to version 0.2.6 of pslib, this function will always overwrite\nthe BoundingBox and Orientation, if it has been set before with ps_set_info()\nand ps_findfont() has not been called before.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param width The width of the page in pixel, e.g. 596 for A4 format.\n@param height The height of the page in pixel, e.g. 842 for A4 format.\n@return (PECL ps >= 1.1.0)\n@see ps_end_page() - End a page\n@see ps_findfont() - Loads a font\n@see ps_set_info() - Sets information fields of document\n
ps_begin_pattern ps_begin_pattern(resource $psdoc, float $width, float $height,\nfloat $xstep, float $ystep, int $painttype) [int]\nStart a new pattern. Starts a new pattern. A pattern is like a page containing\ne.g. a drawing which can be used for filling areas. It is used like a color\nby calling ps_setcolor() and setting the color space to `pattern`.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param width The width of the pattern in pixel.\n@param height The height of the pattern in pixel.\n@param x-step The distance in pixel of placements of the pattern in horizontal\ndirection.\n@param y-step The distance in pixel of placements of the pattern in vertical\ndirection.\n@param painttype Must be 1 or 2.\n@return (PECL ps >= 1.2.0)\n@see ps_end_pattern() - End a pattern\n@see ps_setcolor() - Sets current color\n@see ps_shading_pattern() - Creates a pattern based on a shading\n
ps_begin_template ps_begin_template(resource $psdoc, float $width, float\n$height) [int]\nStart a new template. Starts a new template. A template is called a form in\nthe postscript language. It is created similar to a pattern but used like an\nimage. Templates are often used for drawings which are placed several times\nthrough out the document, e.g. like a company logo. All drawing functions\nmay be used within a template. The template will not be drawn until it is\nplaced by ps_place_image().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param width The width of the template in pixel.\n@param height The height of the template in pixel.\n@return (PECL ps >= 1.2.0)\n@see ps_end_template() - End a template\n
ps_circle ps_circle(resource $psdoc, float $x, float $y, float $radius) [bool]\nDraws a circle. Draws a circle with its middle point at (`x`, `y`). The\ncircle starts and ends at position (`x`+`radius`, `y`). If this function\nis called outside a path it will start a new path. If it is called within\na path it will add the circle as a subpath. If the last drawing operation\ndoes not end in point (`x`+`radius`, `y`) then there will be a gap in the path.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x The x-coordinate of the circle&#039;s middle point.\n@param y The y-coordinate of the circle&#039;s middle point.\n@param radius The radius of the circle\n@return (PECL ps >= 1.1.0)\n@see ps_arc() - Draws an arc counterclockwise\n@see ps_arcn() - Draws an arc clockwise\n
ps_clip ps_clip(resource $psdoc) [bool]\nClips drawing to current path. Takes the current path and uses it to define\nthe border of a clipping area. Everything drawn outside of that area will\nnot be visible.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_closepath() - Closes path\n
ps_close_image ps_close_image(resource $psdoc, int $imageid) [void]\nCloses image and frees memory. Closes an image and frees its resources. Once\nan image is closed it cannot be used anymore.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param imageid Resource identifier of the image as returned by ps_open_image()\nor ps_open_image_file().\n@return (PECL ps >= 1.1.0)\n@see ps_open_image() - Reads an image for later placement\n@see ps_open_image_file() - Opens image from file\n
ps_close ps_close(resource $psdoc) [bool]\nCloses a PostScript document. Closes the PostScript document. This\nfunction writes the trailer of the PostScript document. It also writes the\nbookmark tree. ps_close() does not free any resources, which is done by\nps_delete(). This function is also called by ps_delete() if it has not been\ncalled before.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_open_file() - Opens a file for output\n@see ps_delete() - Deletes all resources of a PostScript document\n
ps_closepath_stroke ps_closepath_stroke(resource $psdoc) [bool]\nCloses and strokes path. Connects the last point with first point of a path\nand draws the resulting closed line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_closepath() - Closes path\n
ps_closepath ps_closepath(resource $psdoc) [bool]\nCloses path. Connects the last point with the first point of a path. The\nresulting path can be used for stroking, filling, clipping, etc..\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_clip() - Clips drawing to current path\n@see ps_closepath_stroke() - Closes and strokes path\n
ps_continue_text ps_continue_text(resource $psdoc, string $text) [bool]\nContinue text in next line. Output a text one line below the last line. The\nline spacing is taken from the value &quot;leading&quot; which must be set\nwith ps_set_value(). The actual position of the text is determined by the\nvalues &quot;textx&quot; and &quot;texty&quot; which can be requested with\nps_get_value()\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text to output.\n@return (PECL ps >= 1.1.0)\n@see ps_show() - Output text\n@see ps_show_xy() - Output text at given position\n@see ps_show_boxed() - Output text in a box\n
ps_curveto ps_curveto(resource $psdoc, float $x1, float $y1, float $x2,\nfloat $y2, float $x3, float $y3) [bool]\nDraws a curve. Add a section of a cubic Bézier curve described by the three\ngiven control points to the current path.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x1 x-coordinate of first control point.\n@param y1 y-coordinate of first control point.\n@param x2 x-coordinate of second control point.\n@param y2 y-coordinate of second control point.\n@param x3 x-coordinate of third control point.\n@param y3 y-coordinate of third control point.\n@return (PECL ps >= 1.1.0)\n@see ps_lineto() - Draws a line\n
ps_delete ps_delete(resource $psdoc) [bool]\nDeletes all resources of a PostScript document. Mainly frees memory used by the\ndocument. Also closes a file, if it was not closed before with ps_close(). You\nshould in any case close the file with ps_close() before, because ps_close()\nnot just closes the file but also outputs a trailor containing PostScript\ncomments like the number of pages in the document and adding the bookmark\nhierarchy.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_close() - Closes a PostScript document\n
ps_end_page ps_end_page(resource $psdoc) [bool]\nEnd a page. Ends a page which was started with ps_begin_page(). Ending a\npage will leave the current drawing context, which e.g. requires to reload\nfonts if they were loading within the page, and to set many other drawing\nparameters like the line width, or color..\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_begin_page() - Start a new page\n
ps_end_pattern ps_end_pattern(resource $psdoc) [bool]\nEnd a pattern. Ends a pattern which was started with ps_begin_pattern(). Once\na pattern has been ended, it can be used like a color to fill areas.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.2.0)\n@see ps_begin_pattern() - Start a new pattern\n
ps_end_template ps_end_template(resource $psdoc) [bool]\nEnd a template. Ends a template which was started with\nps_begin_template(). Once a template has been ended, it can be used like\nan image.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.2.0)\n@see ps_begin_template() - Start a new template\n
ps_fill_stroke ps_fill_stroke(resource $psdoc) [bool]\nFills and strokes the current path. Fills and draws the path constructed\nwith previously called drawing functions like ps_lineto().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_fill() - Fills the current path\n@see ps_stroke() - Draws the current path\n
ps_fill ps_fill(resource $psdoc) [bool]\nFills the current path. Fills the path constructed with previously called\ndrawing functions like ps_lineto().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_fill_stroke() - Fills and strokes the current path\n@see ps_stroke() - Draws the current path\n
ps_findfont ps_findfont(resource $psdoc, string $fontname, string $encoding\n[, bool $embed=false]) [int]\nLoads a font. Loads a font for later use. Before text is output with a loaded\nfont it must be set with ps_setfont(). This function needs the adobe font\nmetric file in order to calculate the space used up by the characters. A font\nwhich is loaded within a page will only be available on that page. Fonts\nwhich are to be used in the complete document have to be loaded before\nthe first call of ps_begin_page(). Calling ps_findfont() between pages\nwill make that font available for all following pages. The name of the\nafm file must be `fontname``.afm`. If the font shall be embedded the file\n`fontname``.pfb` containing the font outline must be present as well. Calling\nps_findfont() before the first page requires to output the postscript\nheader which includes the BoundingBox for the whole document. Usually the\nBoundingBox is set with the first call of ps_begin_page() which now comes\nafter ps_findfont(). Consequently the BoundingBox has not been set and a\nwarning will be issued when ps_findfont() is called. In order to prevent\nthis situation, one should call ps_set_parameter() to set the BoundingBox\nbefore ps_findfont() is called.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param fontname The name of the font.\n@param encoding ps_findfont() will try to load the file passed in the\nparameter `encoding`. Encoding files are of the same syntax as those used\nby dvips(1). They contain a font encoding vector (which is currently not\nused but must be present) and a list of extra ligatures to extend the list\nof ligatures derived from the afm file. `encoding` can be NULL or the empty\nstring if the default encoding (TeXBase1) shall be used. If the encoding\nis set to `builtin` then there will be no reencoding and the font specific\nencoding will be used. This is very useful with symbol fonts.\n@param embed If set to a value >0 the font will be embedded into the\ndocument. This requires the font outline (.pfb file) to be present.\n@return (PECL ps >= 1.1.0)\n@see ps_begin_page() - Start a new page\n@see ps_setfont() - Sets font to use for following output\n
ps_get_buffer ps_get_buffer(resource $psdoc) [string]\nFetches the full buffer containig the generated PS data. This function is\nnot implemented yet. It will always return an empty string. The idea for a\nlater implementation is to write the contents of the postscript file into an\ninternal buffer if in memory creation is requested, and retrieve the buffer\ncontent with this function. Currently, documents created in memory are send\nto the browser without buffering. This function is currently not documented;\nonly its argument list is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@see ps_open_file() - Opens a file for output\n
ps_get_parameter ps_get_parameter(resource $psdoc, string $name [, float\n$modifier]) [string]\nGets certain parameters. Gets several parameters which were directly set by\nps_set_parameter() or indirectly by one of the other functions. Parameters\nare by definition string values. This function cannot be used to retrieve\nresources which were also set by ps_set_parameter(). The parameter `name`\ncan have the following values.  `fontname` The name of the currently active\nfont or the font whose identifier is passed in parameter `modifier`. The\nencoding of the currently active font. The version of the underlying pslib\nlibrary in the format &lt;major>.&lt;minor>.&lt;subminor> The current drawing\nscope. Can be object, document, null, page, pattern, path, template, prolog,\nfont, glyph. The character which dissolves a ligature. If your are using\na font which contains the ligature `ff&#039; and `|&#039; is the char to\ndissolve the ligature, then `f|f&#039; will result in two `f&#039; instead of\nthe ligature `ff&#039;. The encoding used for encoding images. Can be either\n`hex` or `85`. hex encoding uses two bytes in the postscript file each byte\nin the image. 85 stand for Ascii85 encoding. Set to `paragraph` if lines\nare numbered within a paragraph or `box` if they are numbered within the\nsurrounding box. Only used if text is output with ps_show_boxed(). If set to\n`true` a carriage return will add a line break. Only used if text is output\nwith ps_show_boxed(). If set to `true` a carriage return will start a new\nparagraph. Only used if text is output with ps_show_boxed(). If set to\n`true` the paragraph will be hyphenated if a hypen dictionary is set and\nexists. Filename of the dictionary used for hyphenation pattern.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param name Name of the parameter.\n@param modifier An identifier needed if a parameter of a resource is requested,\ne.g. the size of an image. In such a case the resource id is passed.\n@return (PECL ps >= 1.1.0)\n@see ps_set_parameter() - Sets certain parameters\n
ps_get_value ps_get_value(resource $psdoc, string $name [, float $modifier])\n[float]\nGets certain values. Gets several values which were set by\nps_set_value(). Values are by definition float values. The parameter `name`\ncan have the following values.  `fontsize` The size of the currently active\nfont or the font whose identifier is passed in parameter `modifier`. The\ncurrently active font itself. The width of the image whose id is passed in\nthe parameter `modifier`. The height of the image whose id is passed in the\nparameter `modifier`. The height of a capital M in the currently active\nfont or the font whose identifier is passed in parameter `modifier`. The\nascender of the currently active font or the font whose identifier is passed\nin parameter `modifier`. The descender of the currently active font or the\nfont whose identifier is passed in parameter `modifier`. The italicangle of\nthe currently active font or the font whose identifier is passed in parameter\n`modifier`. The underlineposition of the currently active font or the font\nwhose identifier is passed in parameter `modifier`. The underlinethickness of\nthe currently active font or the font whose identifier is passed in parameter\n`modifier`. The current x-position for text output. The current y-position for\ntext output. The current mode for text rendering. The space by which text is\nrisen above the base line. The distance between text lines in points. The space\nbetween words as a multiple of the width of a space char. The space between\nchars. If charspacing is != 0.0 ligatures will always be dissolved. Minimum\nnumber of chars hyphenated at the end of a word. Indention of the first n\nline in a paragraph. Number of line in a paragraph to indent if parindent !=\n0.0. Distance between paragraphs. Overall space in front of each line for the\nline number. Space between the line and the line number. The major version\nnumber of pslib. The minor version number of pslib. The subminor version\nnumber of pslib.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param name Name of the value.\n@param modifier The parameter `modifier` specifies the resource for which\nthe value is to be retrieved. This can be the id of a font or an image.\n@return (PECL ps >= 1.1.0)\n@see ps_set_value() - Sets certain values\n
ps_hyphenate ps_hyphenate(resource $psdoc, string $text) [array]\nHyphenates a word. Hyphenates the passed word. ps_hyphenate() evaluates the\nvalue hyphenminchars (set by ps_set_value()) and the parameter hyphendict\n(set by ps_set_parameter()). hyphendict must be set before calling this\nfunction. This function requires the locale category LC_CTYPE to be set\nproperly. This is done when the extension is initialized by using the\nenvironment variables. On Unix systems read the man page of locale for\nmore information.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text `text` should not contain any non alpha characters. Possible\npositions for breaks are returned in an array of interger numbers. Each number\nis the position of the char in `text` after which a hyphenation can take place.\n@return (PECL ps >= 1.1.1)\n@see ps_show_boxed() - Output text in a box\n@see locale(1)\n
ps_include_file ps_include_file(resource $psdoc, string $file) [bool]\nReads an external file with raw PostScript code. WarningThis function is\ncurrently not documented; only its argument list is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param file\n@return (PECL ps >= 1.3.4)\n
ps_lineto ps_lineto(resource $psdoc, float $x, float $y) [bool]\nDraws a line. Adds a straight line from the current point to the given\ncoordinates to the current path. Use ps_moveto() to set the starting point\nof the line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x x-coordinate of the end point of the line.\n@param y y-coordinate of the end point of the line.\n@return (PECL ps >= 1.1.0)\n@see ps_moveto() - Sets current point\n
ps_makespotcolor ps_makespotcolor(resource $psdoc, string $name [, int\n$reserved=0]) [int]\nCreate spot color. Creates a spot color from the current fill color. The\nfill color must be defined in rgb, cmyk or gray colorspace. The spot color\nname can be an arbitrary name. A spot color can be set as any color with\nps_setcolor(). When the document is not printed but displayed by an postscript\nviewer the given color in the specified color space is use.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param name Name of the spot color, e.g. Pantone 5565.\n@return (PECL ps >= 1.1.0)\n@see ps_setcolor() - Sets current color\n
ps_moveto ps_moveto(resource $psdoc, float $x, float $y) [bool]\nSets current point. Sets the current point to new coordinates. If this is\nthe first call of ps_moveto() after a previous path has been ended then it\nwill start a new path. If this function is called in the middle of a path\nit will just set the current point and start a subpath.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x x-coordinate of the point to move to.\n@param y y-coordinate of the point to move to.\n@return (PECL ps >= 1.1.0)\n@see ps_lineto() - Draws a line\n
ps_new ps_new(void) [resource]\nCreates a new PostScript document object. Creates a new document\ninstance. It does not create the file on disk or in memory, it just sets\nup everything. ps_new() is usually followed by a call of ps_open_file()\nto actually create the postscript document.\n@return (PECL ps >= 1.1.0)\n@see ps_delete() - Deletes all resources of a PostScript document\n
ps_open_file ps_open_file(resource $psdoc [, string $filename]) [bool]\nOpens a file for output. Creates a new file on disk and writes the PostScript\ndocument into it. The file will be closed when ps_close() is called.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param filename The name of the postscript file. If `filename` is not passed\nthe document will be created in memory and all output will go straight to\nthe browser.\n@return (PECL ps >= 1.1.0)\n@see ps_close() - Closes a PostScript document\n
ps_open_image_file ps_open_image_file(resource $psdoc, string $type, string\n$filename [, string $stringparam [, int $intparam=0]]) [int]\nOpens image from file. Loads an image for later use.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The type of the image. Possible values are `png`, `jpeg`, or `eps`.\n@param filename The name of the file containing the image data.\n@param stringparam Not used.\n@param intparam Not used.\n@return (PECL ps >= 1.1.0)\n@see ps_open_image() - Reads an image for later placement\n@see ps_place_image() - Places image on the page\n@see ps_close_image() - Closes image and frees memory\n
ps_open_image ps_open_image(resource $psdoc, string $type, string $source,\nstring $data, int $lenght, int $width, int $height, int $components, int $bpc,\nstring $params) [int]\nReads an image for later placement. Reads an image which is already available\nin memory. The parameter `source` is currently not evaluated and assumed to\nbe `memory`. The image data is a sequence of pixels starting in th upper\nleft corner and ending in the lower right corner. Each pixel consists of\n`components` color components, and each component has `bpc` bits.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The type of the image. Possible values are `png`, `jpeg`, or `eps`.\n@param source Not used.\n@param data The image data.\n@param length The length of the image data.\n@param width The width of the image.\n@param height The height of the image.\n@param components The number of components for each pixel. This can be 1\n(gray scale images), 3 (rgb images), or 4 (cmyk, rgba images).\n@param bpc Number of bits per component (quite often 8).\n@param params\n@return (PECL ps >= 1.1.0)\n@see ps_open_image_file() - Opens image from file\n@see ps_place_image() - Places image on the page\n@see ps_close_image() - Closes image and frees memory\n
ps_open_memory_image ps_open_memory_image(resource $psdoc, int $gd) [int]\nTakes an GD image and returns an image for placement in a PS\ndocument. WarningThis function is currently not documented; only its argument\nlist is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param gd\n
ps_place_image ps_place_image(resource $psdoc, int $imageid, float $x,\nfloat $y, float $scale) [bool]\nPlaces image on the page. Places a formerly loaded image on the page. The\nimage can be scaled. If the image shall be rotated as well, you will have\nto rotate the coordinate system before with ps_rotate().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param imageid The resource identifier of the image as returned by\nps_open_image() or ps_open_image_file().\n@param x x-coordinate of the lower left corner of the image.\n@param y y-coordinate of the lower left corner of the image.\n@param scale The scaling factor for the image. A scale of 1.0 will result\nin a resolution of 72 dpi, because each pixel is equivalent to 1 point.\n@return (PECL ps >= 1.1.0)\n@see ps_open_image() - Reads an image for later placement\n@see ps_open_image_file() - Opens image from file\n
ps_rect ps_rect(resource $psdoc, float $x, float $y, float $width, float\n$height) [bool]\nDraws a rectangle. Draws a rectangle with its lower left corner at (`x`,\n`y`). The rectangle starts and ends in its lower left corner. If this function\nis called outside a path it will start a new path. If it is called within a\npath it will add the rectangle as a subpath. If the last drawing operation\ndoes not end in the lower left corner then there will be a gap in the path.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x x-coordinate of the lower left corner of the rectangle.\n@param y y-coordinate of the lower left corner of the rectangle.\n@param width The width of the image.\n@param height The height of the image.\n@return (PECL ps >= 1.1.0)\n@see ps_arc() - Draws an arc counterclockwise\n@see ps_cirle()\n@see ps_lineto() - Draws a line\n
ps_restore ps_restore(resource $psdoc) [bool]\nRestore previously save context. Restores a previously saved graphics\ncontext. Any call of ps_save() must be accompanied by a call to\nps_restore(). All coordinate transformations, line style settings, color\nsettings, etc. are being restored to the state before the call of ps_save().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_save() - Save current context\n
ps_rotate ps_rotate(resource $psdoc, float $rot) [bool]\nSets rotation factor. Sets the rotation of the coordinate system.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param rot Angle of rotation in degree.\n@return (PECL ps >= 1.1.0)\n@see ps_scale() - Sets scaling factor\n@see ps_translate() - Sets translation\n
ps_save ps_save(resource $psdoc) [bool]\nSave current context. Saves the current graphics context, containing colors,\ntranslation and rotation settings and some more. A saved context can be\nrestored with ps_restore().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_restore() - Restore previously save context\n
ps_scale ps_scale(resource $psdoc, float $x, float $y) [bool]\nSets scaling factor. Sets horizontal and vertical scaling of the coordinate\nsystem.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x Scaling factor in horizontal direction.\n@param y Scaling factor in vertical direction.\n@return (PECL ps >= 1.1.0)\n@see ps_rotate() - Sets rotation factor\n@see ps_translate() - Sets translation\n
ps_set_border_color ps_set_border_color(resource $psdoc, float $red, float\n$green, float $blue) [bool]\nSets color of border for annotations. Links added with one of the functions\nps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded\nrectangle when the postscript document is converted to pdf and viewed in a\npdf viewer. This rectangle is not visible in the postscript document. This\nfunction sets the color of the rectangle&#039;s border line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param red The red component of the border color.\n@param green The green component of the border color.\n@param blue The blue component of the border color.\n@return (PECL ps >= 1.1.0)\n@see ps_set_border_dash() - Sets length of dashes for border of annotations\n@see ps_set_border_style() - Sets border style of annotations\n
ps_set_border_dash ps_set_border_dash(resource $psdoc, float $black, float\n$white) [bool]\nSets length of dashes for border of annotations. Links added with one of\nthe functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed\nwith a surounded rectangle when the postscript document is converted to pdf\nand viewed in a pdf viewer. This rectangle is not visible in the postscript\ndocument. This function sets the length of the black and white portion of\na dashed border line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param black The length of the dash.\n@param white The length of the gap between dashes.\n@return (PECL ps >= 1.1.0)\n@see ps_set_border_color() - Sets color of border for annotations\n@see ps_set_border_style() - Sets border style of annotations\n
ps_set_border_style ps_set_border_style(resource $psdoc, string $style,\nfloat $width) [bool]\nSets border style of annotations. Links added with one of the functions\nps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded\nrectangle when the postscript document is converted to pdf and viewed in a\npdf viewer. This rectangle is not visible in the postscript document. This\nfunction sets the appearance and width of the border line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param style `style` can be `solid` or `dashed`.\n@param width The line width of the border.\n@return (PECL ps >= 1.1.0)\n@see ps_set_border_color() - Sets color of border for annotations\n@see ps_set_border_dash() - Sets length of dashes for border of annotations\n
ps_set_info ps_set_info(resource $p, string $key, string $val) [bool]\nSets information fields of document. Sets certain information fields of\nthe document. This fields will be shown as a comment in the header of the\nPostScript file. If the document is converted to pdf this fields will also\nbe used for the document information. The `BoundingBox` is usually set to\nthe value given to the first page. This only works if ps_findfont() has not\nbeen called before. In such cases the BoundingBox would be left unset unless\nyou set it explicitly with this function. This function will have no effect\nanymore when the header of the postscript file has been already written. It\nmust be called before the first page or the first call of ps_findfont().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param key The name of the information field to set. The values which can be\nset are `Keywords`, `Subject`, `Title`, `Creator`, `Author`, `BoundingBox`, and\n`Orientation`. Be aware that some of them has a meaning to PostScript viewers.\n@param value The value of the information field. The field `Orientation`\ncan be set to either `Portrait` or `Landscape`. The `BoundingBox` is a string\nconsisting of four numbers. The first two numbers are the coordinates of the\nlower left corner of the page. The last two numbers are the coordinates of\nthe upper right corner. Note: Up to version 0.2.6 of pslib, the BoundingBox\nand Orientation will be overwritten by ps_begin_page(), unless ps_findfont()\nhas been called before.\n@return (PECL ps >= 1.1.0)\n@see ps_findfont() - Loads a font\n@see ps_begin_page() - Start a new page\n
ps_set_parameter ps_set_parameter(resource $psdoc, string $name, string $value)\n[bool]\nSets certain parameters. Sets several parameters which are used by many\nfunctions. Parameters are by definition string values.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param name For a list of possible names see ps_get_parameter().\n@param value The value of the parameter.\n@return (PECL ps >= 1.1.0)\n@see ps_get_parameters()\n@see ps_set_value() - Sets certain values\n
ps_set_text_pos ps_set_text_pos(resource $psdoc, float $x, float $y) [bool]\nSets position for text output. Set the position for the next text output. You\nmay alternatively set the x and y value separately by calling ps_set_value()\nand choosing `textx` respectively `texty` as the value name. If you want to\noutput text at a certain position it is more convenient to use ps_show_xy()\ninstead of setting the text position and calling ps_show().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x x-coordinate of the new text position.\n@param y y-coordinate of the new text position.\n@return (PECL ps >= 1.1.0)\n@see ps_set_value() - Sets certain values\n@see ps_show() - Output text\n
ps_set_value ps_set_value(resource $psdoc, string $name, float $value) [bool]\nSets certain values. Sets several values which are used by many\nfunctions. Parameters are by definition float values.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param name The `name` can be one of the following: textrendering The way\nhow text is shown.\n@param textx The x coordinate for text output.\n@param texty The y coordinate for text output.\n@param wordspacing The distance between words relative to the width of a space.\n@param leading The distance between lines in pixels.\n@param value The value of the parameter.\n@return (PECL ps >= 1.1.0)\n@see ps_get_value() - Gets certain values\n@see ps_set_parameter() - Sets certain parameters\n
ps_setcolor ps_setcolor(resource $psdoc, string $type, string $colorspace,\nfloat $c1, float $c2, float $c3, float $c4) [bool]\nSets current color. Sets the color for drawing, filling, or both.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The parameter `type` can be `both`, `fill`, or `fillstroke`.\n@param colorspace The colorspace should be one of `gray`, `rgb`, `cmyk`,\n`spot`, `pattern`. Depending on the colorspace either only the first, the\nfirst three or all parameters will be used.\n@param c1 Depending on the colorspace this is either the red component (rgb),\nthe cyan component (cmyk), the gray value (gray), the identifier of the spot\ncolor or the identifier of the pattern.\n@param c2 Depending on the colorspace this is either the green component\n(rgb), the magenta component (cmyk).\n@param c3 Depending on the colorspace this is either the blue component\n(rgb), the yellow component (cmyk).\n@param c4 This must only be set in cmyk colorspace and specifies the black\ncomponent.\n@return (PECL ps >= 1.1.0)\n
ps_setdash ps_setdash(resource $psdoc, float $on, float $off) [bool]\nSets appearance of a dashed line. Sets the length of the black and white\nportions of a dashed line.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param on The length of the dash.\n@param off The length of the gap between dashes.\n@return (PECL ps >= 1.1.0)\n@see ps_setpolydash() - Sets appearance of a dashed line\n
ps_setflat ps_setflat(resource $psdoc, float $value) [bool]\nSets flatness. WarningThis function is currently not documented; only its\nargument list is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param value The `value` must be between 0.2 and 1.\n@return (PECL ps >= 1.1.0)\n
ps_setfont ps_setfont(resource $psdoc, int $fontid, float $size) [bool]\nSets font to use for following output. Sets a font, which has to be loaded\nbefore with ps_findfont(). Outputting text without setting a font results\nin an error.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param fontid The font identifier as returned by ps_findfont().\n@param size The size of the font.\n@return (PECL ps >= 1.1.0)\n@see ps_findfont() - Loads a font\n@see ps_set_text_pos() - Sets position for text output for an example.\n
ps_setgray ps_setgray(resource $psdoc, float $gray) [bool]\nSets gray value. Sets the gray value for all following drawing operations.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param gray The value must be between 0 (white) and 1 (black).\n@return (PECL ps >= 1.1.0)\n@see ps_setcolor() - Sets current color\n
ps_setlinecap ps_setlinecap(resource $psdoc, int $type) [bool]\nSets appearance of line ends. Sets how line ends look like.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The type of line ends. Possible values are `PS_LINECAP_BUTT`,\n`PS_LINECAP_ROUND`, or `PS_LINECAP_SQUARED`.\n@return (PECL ps >= 1.1.0)\n@see ps_setlinejoin() - Sets how contected lines are joined\n@see ps_setlinewidth() - Sets width of a line\n@see ps_setmiterlimit() - Sets the miter limit\n
ps_setlinejoin ps_setlinejoin(resource $psdoc, int $type) [bool]\nSets how contected lines are joined. Sets how lines are joined.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The way lines are joined. Possible values are `PS_LINEJOIN_MITER`,\n`PS_LINEJOIN_ROUND`, or `PS_LINEJOIN_BEVEL`.\n@return (PECL ps >= 1.1.0)\n@see ps_setlinecap() - Sets appearance of line ends\n@see ps_setlinewidth() - Sets width of a line\n@see ps_setmiterlimit() - Sets the miter limit\n
ps_setlinewidth ps_setlinewidth(resource $psdoc, float $width) [bool]\nSets width of a line. Sets the line width for all following drawing operations.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param width The width of lines in points.\n@return (PECL ps >= 1.1.0)\n@see ps_setlinecap() - Sets appearance of line ends\n@see ps_setlinejoin() - Sets how contected lines are joined\n@see ps_setmiterlimit() - Sets the miter limit\n
ps_setmiterlimit ps_setmiterlimit(resource $psdoc, float $value) [bool]\nSets the miter limit. If two lines join in a small angle and the line join is\nset to `PS_LINEJOIN_MITER`, then the resulting spike will be very long. The\nmiter limit is the maximum ratio of the miter length (the length of the spike)\nand the line width.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param value The maximum ratio between the miter length and the line\nwidth. Larger values (> 10) will result in very long spikes when two lines\nmeet in a small angle. Keep the default unless you know what you are doing.\n@return (PECL ps >= 1.1.0)\n@see ps_setlinecap() - Sets appearance of line ends\n@see ps_setlinejoin() - Sets how contected lines are joined\n@see ps_setlinewidth() - Sets width of a line\n
ps_setoverprintmode ps_setoverprintmode(resource $psdoc, int $mode) [bool]\nSets overprint mode. WarningThis function is currently not documented;\nonly its argument list is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param mode\n@return (PECL ps >= 1.3.0)\n
ps_setpolydash ps_setpolydash(resource $psdoc, float $arr) [bool]\nSets appearance of a dashed line. Sets the length of the black and white\nportions of a dashed line. ps_setpolydash() is used to set more complicated\ndash patterns.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param arr `arr` is a list of length elements alternately for the black and\nwhite portion.\n@return (PECL ps >= 1.1.0)\n@see ps_setdash() - Sets appearance of a dashed line\n
ps_shading_pattern ps_shading_pattern(resource $psdoc, int $shadingid,\nstring $optlist) [int]\nCreates a pattern based on a shading. Creates a pattern based on a shading,\nwhich has to be created before with ps_shading(). Shading patterns can be\nused like regular patterns.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param shadingid The identifier of a shading previously created with\nps_shading().\n@param optlist This argument is not currently used.\n@return (PECL ps >= 1.3.0)\n@see ps_shading() - Creates a shading for later use\n@see ps_shfill() - Fills an area with a shading\n
ps_shading ps_shading(resource $psdoc, string $type, float $x0, float $y0,\nfloat $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string\n$optlist) [int]\nCreates a shading for later use. Creates a shading, which can be used by\nps_shfill() or ps_shading_pattern(). The color of the shading can be in any\ncolor space except for `pattern`.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param type The type of shading can be either `radial` or `axial`. Each\nshading starts with the current fill color and ends with the given color values\npassed in the parameters `c1` to `c4` (see ps_setcolor() for their meaning).\n@param x0, x1, y0, y1 The coordinates `x0`, `y0`, `x1`, `y1` are the start\nand end point of the shading. If the type of shading is `radial` the two\npoints are the middle points of a starting and ending circle.\n@param c1, c2, c3, c4 See ps_setcolor() for their meaning.\n@param optlist If the shading is of type `radial` the `optlist` must also\ncontain the parameters `r0` and `r1` with the radius of the start and\nend circle.\n@return (PECL ps >= 1.3.0)\n@see ps_shading_pattern() - Creates a pattern based on a shading\n@see ps_shfill() - Fills an area with a shading\n
ps_shfill ps_shfill(resource $psdoc, int $shadingid) [bool]\nFills an area with a shading. Fills an area with a shading, which has to\nbe created before with ps_shading(). This is an alternative way to creating\na pattern from a shading ps_shading_pattern() and using the pattern as the\nfilling color.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param shadingid The identifier of a shading previously created with\nps_shading().\n@return (PECL ps >= 1.3.0)\n@see ps_shading() - Creates a shading for later use\n@see ps_shading_pattern() - Creates a pattern based on a shading\n
ps_show_boxed ps_show_boxed(resource $psdoc, string $text, float $left, float\n$bottom, float $width, float $height, string $hmode [, string $feature]) [int]\nOutput text in a box. Outputs a text in a given box. The lower left corner\nof the box is at (`left`, `bottom`). Line breaks will be inserted where\nneeded. Multiple spaces are treated as one. Tabulators are treated as\nspaces. The text will be hyphenated if the parameter `hyphenation` is\nset to `true` and the parameter `hyphendict` contains a valid filename\nfor a hyphenation file. The line spacing is taken from the value\n`leading`. Paragraphs can be separated by an empty line just like in\nTeX. If the value `parindent` is set to value > 0.0 then the first n\nlines will be indented. The number n of lines is set by the parameter\n`numindentlines`. In order to prevent indenting of the first m paragraphs\nset the value `parindentskip` to a positive number.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text to be output into the given box.\n@param left x-coordinate of the lower left corner of the box.\n@param bottom y-coordinate of the lower left corner of the box.\n@param width Width of the box.\n@param height Height of the box.\n@param hmode The parameter `hmode` can be &quot;justify&quot;,\n&quot;fulljustify&quot;, &quot;right&quot;, &quot;left&quot;,\nor &quot;center&quot;. The difference of &quot;justify&quot; and\n&quot;fulljustify&quot; just affects the last line of the box. In fulljustify\nmode the last line will be left and right justified unless this is also the\nlast line of paragraph. In justify mode it will always be left justified.\n@param feature\n@return (PECL ps >= 1.1.0)\n@see ps_continue_text() - Continue text in next line\n
ps_show_xy ps_show_xy(resource $psdoc, string $text, float $x, float $y) [bool]\nOutput text at given position. Output a text at the given text position.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text to be output.\n@param x x-coordinate of the lower left corner of the box surrounding the text.\n@param y y-coordinate of the lower left corner of the box surrounding the text.\n@return (PECL ps >= 1.1.0)\n@see ps_continue_text() - Continue text in next line\n@see ps_show() - Output text\n
ps_show_xy2 ps_show_xy2(resource $psdoc, string $text, int $len, float $xcoor,\nfloat $ycoor) [bool]\nOutput text at position. WarningThis function is currently not documented;\nonly its argument list is available.\n@return (PECL ps >= 1.1.0)\n
ps_show ps_show(resource $psdoc, string $text) [bool]\nOutput text. Output a text at the current text position. The text position\ncan be set by storing the x and y coordinates into the values `textx` and\n`texty` with the function ps_set_value(). The function will issue an error if\na font was not set before with ps_setfont(). ps_show() evaluates the following\nparameters and values as set by ps_set_parameter() and ps_set_value(). Distance\nbetween two consecutive glyphs. If this value is unequal to zero then all\nligatures will be resolved. Values less than zero are allowed. Setting\nthis parameter to &quot;false&quot; will turn off kerning. Kerning is\nturned on by default. Setting this parameter to &quot;false&quot; will\nturn off the use of ligatures. Ligatures are turned on by default. Setting\nthis parameter to &quot;true&quot; will turn on underlining. Underlining is\nturned off by default. Setting this parameter to &quot;true&quot; will turn\non overlining. Overlining is turned off by default. Setting this parameter\nto &quot;true&quot; will turn on striking out. Striking out is turned off\nby default.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text to be output.\n@return (PECL ps >= 1.1.0)\n@see ps_continue_text() - Continue text in next line\n@see ps_show_xy() - Output text at given position\n@see ps_setfont() - Sets font to use for following output\n
ps_show2 ps_show2(resource $psdoc, string $text, int $len) [bool]\nOutput a text at current position. WarningThis function is currently not\ndocumented; only its argument list is available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text\n@param len\n@return (PECL ps >= 1.1.0)\n
ps_string_geometry ps_string_geometry(resource $psdoc, string $text [,\nint $fontid=0 [, float $size=0.0]]) [array]\nGets geometry of a string. This function is similar to ps_stringwidth() but\nreturns an array of dimensions containing the width, ascender, and descender\nof the text.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text for which the geometry is to be calculated.\n@param fontid The identifier of the font to be used. If not font is specified\nthe current font will be used.\n@param size The size of the font. If no size is specified the current size\nis used.\n@return (PECL ps >= 1.2.0)\n@see ps_continue_text() - Continue text in next line\n@see ps_stringwidth() - Gets width of a string\n
ps_stringwidth ps_stringwidth(resource $psdoc, string $text [, int $fontid=0\n[, float $size=0.0]]) [float]\nGets width of a string. Calculates the width of a string in points if it\nwas output in the given font and font size. This function needs an Adobe\nfont metrics file to calculate the precise width. If kerning is turned on,\nit will be taken into account.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param text The text for which the width is to be calculated.\n@param fontid The identifier of the font to be used. If not font is specified\nthe current font will be used.\n@param size The size of the font. If no size is specified the current size\nis used.\n@return (PECL ps >= 1.1.0)\n@see ps_string_geometry() - Gets geometry of a string\n
ps_stroke ps_stroke(resource $psdoc) [bool]\nDraws the current path. Draws the path constructed with previously called\ndrawing functions like ps_lineto().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@return (PECL ps >= 1.1.0)\n@see ps_closepath_stroke() - Closes and strokes path\n@see ps_fill() - Fills the current path\n@see ps_fill_stroke() - Fills and strokes the current path\n
ps_symbol_name ps_symbol_name(resource $psdoc, int $ord [, int $fontid=0])\n[string]\nGets name of a glyph. This function needs an Adobe font metrics file to know\nwhich glyphs are available.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param ord The parameter `ord` is the position of the glyph in the font\nencoding vector.\n@param fontid The identifier of the font to be used. If not font is specified\nthe current font will be used.\n@return (PECL ps >= 1.2.0)\n@see ps_symbol() - Output a glyph\n@see ps_symbol_width() - Gets width of a glyph\n
ps_symbol_width ps_symbol_width(resource $psdoc, int $ord [, int $fontid=0\n[, float $size=0.0]]) [float]\nGets width of a glyph. Calculates the width of a glyph in points if it was\noutput in the given font and font size. This function needs an Adobe font\nmetrics file to calculate the precise width.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param ord The position of the glyph in the font encoding vector.\n@param fontid The identifier of the font to be used. If not font is specified\nthe current font will be used.\n@param size The size of the font. If no size is specified the current size\nis used.\n@return (PECL ps >= 1.2.0)\n@see ps_symbol() - Output a glyph\n@see ps_symbol_name() - Gets name of a glyph\n
ps_symbol ps_symbol(resource $psdoc, int $ord) [bool]\nOutput a glyph. Output the glyph at position `ord` in the font encoding\nvector of the current font. The font encoding for a font can be set when\nloading the font with ps_findfont().\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param ord The position of the glyph in the font encoding vector.\n@return (PECL ps >= 1.2.0)\n@see ps_symbol_name() - Gets name of a glyph\n@see ps_symbol_width() - Gets width of a glyph\n
ps_translate ps_translate(resource $psdoc, float $x, float $y) [bool]\nSets translation. Sets a new initial point of the coordinate system.\n@param psdoc Resource identifier of the postscript file as returned by\nps_new().\n@param x x-coordinate of the origin of the translated coordinate system.\n@param y y-coordinate of the origin of the translated coordinate system.\n@return (PECL ps >= 1.1.0)\n@see ps_scale() - Sets scaling factor\n@see ps_rotate() - Sets rotation factor\n
pspell_add_to_personal pspell_add_to_personal(int $dictionary_link, string\n$word) [bool]\nAdd the word to a personal wordlist.\n@param dictionary_link\n@param word The added word.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_add_to_session pspell_add_to_session(int $dictionary_link, string $word)\n[bool]\nAdd the word to the wordlist in the current session.\n@param dictionary_link\n@param word The added word.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_check pspell_check(int $dictionary_link, string $word) [bool]\nCheck a word.\n@param dictionary_link\n@param word The tested word.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_clear_session pspell_clear_session(int $dictionary_link) [bool]\nClear the current session.\n@param dictionary_link\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_config_create pspell_config_create(string $language [, string $spelling\n[, string $jargon [, string $encoding]]]) [int]\nCreate a config used to open a dictionary. Create a config used to\nopen a dictionary. pspell_config_create() has a very similar syntax to\npspell_new(). In fact, using pspell_config_create() immediately followed by\npspell_new_config() will produce the exact same result. However, after creating\na new config, you can also use pspell_config_*() functions before calling\npspell_new_config() to take advantage of some advanced functionality. For\nmore information and examples, check out inline manual pspell website:&raquo;\nhttp://aspell.net/.\n@param language The language parameter is the language code which consists\nof the two letter ISO 639 language code and an optional two letter ISO 3166\ncountry code after a dash or underscore.\n@param spelling The spelling parameter is the requested spelling for\nlanguages with more than one spelling such as English. Known values are\n&#039;american&#039;, &#039;british&#039;, and &#039;canadian&#039;.\n@param jargon The jargon parameter contains extra information to distinguish\ntwo different words lists that have the same language and spelling parameters.\n@param encoding The encoding parameter is the encoding that words are\nexpected to be in. Valid values are &#039;utf-8&#039;, &#039;iso8859-*&#039;,\n&#039;koi8-r&#039;, &#039;viscii&#039;, &#039;cp1252&#039;, &#039;machine\nunsigned 16&#039;, &#039;machine unsigned 32&#039;. This parameter is largely\nuntested, so be careful when using.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_config_data_dir pspell_config_data_dir(int $conf, string $directory)\n[bool]\nlocation of language data files. WarningThis function is currently not\ndocumented; only its argument list is available.\n@return (PHP 5)\n
pspell_config_dict_dir pspell_config_dict_dir(int $conf, string $directory)\n[bool]\nLocation of the main word list. WarningThis function is currently not\ndocumented; only its argument list is available.\n@return (PHP 5)\n
pspell_config_ignore pspell_config_ignore(int $dictionary_link, int $n) [bool]\nIgnore words less than N characters long.\n@param dictionary_link\n@param n Words less than `n` characters will be skipped.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_config_mode pspell_config_mode(int $dictionary_link, int $mode) [bool]\nChange the mode number of suggestions returned.\n@param dictionary_link\n@param mode The mode parameter is the mode in which spellchecker will\nwork. There are several modes available: PSPELL_FAST - Fast mode (least\nnumber of suggestions) PSPELL_NORMAL - Normal mode (more suggestions)\nPSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_config_personal pspell_config_personal(int $dictionary_link, string\n$file) [bool]\nSet a file that contains personal wordlist. Set a file that contains\npersonal wordlist. The personal wordlist will be loaded and used in\naddition to the standard one after you call pspell_new_config(). The file\nis also the file where pspell_save_wordlist() will save personal wordlist\nto. pspell_config_personal() should be used on a config before calling\npspell_new_config().\n@param dictionary_link\n@param file The personal wordlist. If the file does not exist, it will be\ncreated. The file should be writable by whoever PHP runs as (e.g. nobody).\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_config_repl pspell_config_repl(int $dictionary_link, string $file)\n[bool]\nSet a file that contains replacement pairs. Set a file that contains\nreplacement pairs. The replacement pairs improve the quality of the\nspellchecker. When a word is misspelled, and a proper suggestion was not found\nin the list, pspell_store_replacement() can be used to store a replacement\npair and then pspell_save_wordlist() to save the wordlist along with the\nreplacement pairs. pspell_config_repl() should be used on a config before\ncalling pspell_new_config().\n@param dictionary_link\n@param file The file should be writable by whoever PHP runs as (e.g. nobody).\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_config_runtogether pspell_config_runtogether(int $dictionary_link,\nbool $flag) [bool]\nConsider run-together words as valid compounds. This function determines\nwhether run-together words will be treated as legal compounds. That is,\n&quot;thecat&quot; will be a legal compound, although there should be\na space between the two words. Changing this setting only affects the\nresults returned by pspell_check(); pspell_suggest() will still return\nsuggestions. pspell_config_runtogether() should be used on a config before\ncalling pspell_new_config().\n@param dictionary_link\n@param flag TRUE if run-together words should be treated as legal compounds,\nFALSE otherwise.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_config_save_repl pspell_config_save_repl(int $dictionary_link, bool\n$flag) [bool]\nDetermine whether to save a replacement pairs list\n  along with the wordlist. pspell_config_save_repl() determines whether\n  pspell_save_wordlist() will save the replacement pairs along with the\n  wordlist. Usually there is no need to use this function because if\n  pspell_config_repl() is used, the replacement pairs will be saved by\n  pspell_save_wordlist() anyway, and if it is not, the replacement pairs\n  will not be saved. pspell_config_save_repl() should be used on a config\n  before calling pspell_new_config().\n@param dictionary_link\n@param flag TRUE if replacement pairs should be saved, FALSE otherwise.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_new_config pspell_new_config(int $config) [int]\nLoad a new dictionary with settings based on a given config.\n@param config The `config` parameter is the one returned by\npspell_config_create() when the config was created.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_new_personal pspell_new_personal(string $personal, string $language\n[, string $spelling [, string $jargon [, string $encoding [, int $mode=0]]]])\n[int]\nLoad a new dictionary with personal wordlist.\n@param personal The file where words added to the personal list will be\nstored. It should be an absolute filename beginning with &#039;/&#039;\nbecause otherwise it will be relative to $HOME, which is &quot;/root&quot;\nfor most systems, and is probably not what you want.\n@param language The language code which consists of the two letter ISO 639\nlanguage code and an optional two letter ISO 3166 country code after a dash\nor underscore.\n@param spelling The requested spelling for languages with more than\none spelling such as English. Known values are &#039;american&#039;,\n&#039;british&#039;, and &#039;canadian&#039;.\n@param jargon Extra information to distinguish two different words lists\nthat have the same language and spelling parameters.\n@param encoding The encoding that words are expected to be in. Valid values\nare `utf-8`, `iso8859-*`, `koi8-r`, `viscii`, `cp1252`, `machine unsigned 16`,\n`machine unsigned 32`.\n@param mode The mode in which spellchecker will work. There are several modes\navailable: PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL\n- Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a lot\nof suggestions) PSPELL_RUN_TOGETHER - Consider run-together words as legal\ncompounds. That is, &quot;thecat&quot; will be a legal compound, although\nthere should be a space between the two words. Changing this setting only\naffects the results returned by pspell_check(); pspell_suggest() will still\nreturn suggestions. Mode is a bitmask constructed from different constants\nlisted above. However, PSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS\nare mutually exclusive, so you should select only one of them.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_new pspell_new(string $language [, string $spelling [, string $jargon\n[, string $encoding [, int $mode=0]]]]) [int]\nLoad a new dictionary. pspell_new() opens up a new dictionary and returns\nthe dictionary link identifier for use in other pspell functions. For more\ninformation and examples, check out inline manual pspell website:&raquo;\nhttp://aspell.net/.\n@param language The language parameter is the language code which consists\nof the two letter ISO 639 language code and an optional two letter ISO 3166\ncountry code after a dash or underscore.\n@param spelling The spelling parameter is the requested spelling for\nlanguages with more than one spelling such as English. Known values are\n&#039;american&#039;, &#039;british&#039;, and &#039;canadian&#039;.\n@param jargon The jargon parameter contains extra information to distinguish\ntwo different words lists that have the same language and spelling parameters.\n@param encoding The encoding parameter is the encoding that words are\nexpected to be in. Valid values are &#039;utf-8&#039;, &#039;iso8859-*&#039;,\n&#039;koi8-r&#039;, &#039;viscii&#039;, &#039;cp1252&#039;, &#039;machine\nunsigned 16&#039;, &#039;machine unsigned 32&#039;. This parameter is largely\nuntested, so be careful when using.\n@param mode The mode parameter is the mode in which spellchecker will\nwork. There are several modes available: PSPELL_FAST - Fast mode (least\nnumber of suggestions) PSPELL_NORMAL - Normal mode (more suggestions)\nPSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions) PSPELL_RUN_TOGETHER -\nConsider run-together words as legal compounds. That is, &quot;thecat&quot;\nwill be a legal compound, although there should be a space between the\ntwo words. Changing this setting only affects the results returned by\npspell_check(); pspell_suggest() will still return suggestions. Mode is\na bitmask constructed from different constants listed above. However,\nPSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS are mutually exclusive,\nso you should select only one of them.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
pspell_save_wordlist pspell_save_wordlist(int $dictionary_link) [bool]\nSave the personal wordlist to a file.\n@param dictionary_link A dictionary link identifier opened with\npspell_new_personal().\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_store_replacement pspell_store_replacement(int $dictionary_link,\nstring $misspelled, string $correct) [bool]\nStore a replacement pair for a word.\n@param dictionary_link A dictionary link identifier, opened with\npspell_new_personal()\n@param misspelled The misspelled word.\n@param correct The fixed spelling for the `misspelled` word.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: This function will not work unless you have pspell .11.2 and\naspell .32.5 or later.\n
pspell_suggest pspell_suggest(int $dictionary_link, string $word) [array]\nSuggest spellings of a word.\n@param dictionary_link\n@param word The tested word.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
putenv putenv(string $setting) [bool]\nSets the value of an environment variable. Adds `setting` to the server\nenvironment. The environment variable will only exist for the duration of\nthe current request. At the end of the request the environment is restored\nto its original state. Setting certain environment variables may be a\npotential security breach. The `safe_mode_allowed_env_vars` directive\ncontains a comma-delimited list of prefixes. In Safe Mode, the user may\nonly alter environment variables whose names begin with the prefixes\nsupplied by this directive. By default, users will only be able to set\nenvironment variables that begin with `PHP_` (e.g. `PHP_FOO=BAR`). Note:\nif this directive is empty, PHP will let the user modify ANY environment\nvariable! The `safe_mode_protected_env_vars` directive contains a\ncomma-delimited list of environment variables, that the end user won&#039;t\nbe able to change using putenv(). These variables will be protected even if\n`safe_mode_allowed_env_vars` is set to allow to change them.\n@param setting The setting, like `&quot;FOO=BAR&quot;`\n@return (PHP 4, PHP 5)\n@see getenv() - Gets the value of an environment variable\n
px_close px_close(resource $pxdoc) [bool]\nCloses a paradox database. Closes the paradox database. This function will\nnot close the file. You will have to call fclose() afterwards.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@return (PECL paradox >= 1.0.0)\n@see px_open_fp() - Open paradox database\n@see The example at px_new() - Create a new paradox object\n
px_create_fp px_create_fp(resource $pxdoc, resource $file, array $fielddesc)\n[bool]\nCreate a new paradox database. Create a new paradox database file. The\nactual file has to be opened before with fopen(). Make sure the file is\nwritable. Note: Calling this functions issues a warning about an empty\ntablename which can be safely ignored. Just set the tablename afterwards\nwith px_set_parameter(). Note: This function is highly experimental, due to\ninsufficient documentation of the paradox file format. Database files created\nwith this function can be opened by px_open_fp() and has been successfully\nopened by the Paradox software, but your milage may vary.\n@param pxdoc Resource identifier of the paradox database as returned by\npx_new().\n@param file File handle as returned by fopen().\n@param fielddesc fielddesc is an array containing one element for each field\nspecification. A field specification is an array itself with either two or\nthree elements.The first element is always a string value used as the name\nof the field. It may not be larger than ten characters. The second element\ncontains the field type which is one of the constants listed in the table\nConstants for field types. In the case of a character field or bcd field, you\nwill have to provide a third element specifying the length respectively the\nprecesion of the field. If your field specification contains blob fields,\nyou will have to make sure to either make the field large enough for all\nfield values to fit or specify a blob file with px_set_blob_file() for\nstoring the blobs. If this is not done the field data is truncated.\n@return (PECL paradox >= 1.0.0)\n@see px_new() - Create a new paradox object\n@see px_put_record() - Stores record into paradox database\n@see fopen() - Opens file or URL\n
pg_set_client_encoding pg_set_client_encoding([resource $connection], string\n$encoding) [int]\nSet the client encoding. pg_set_client_encoding() sets the client encoding and\nreturns 0 if success or -1 if error. PostgreSQL will automatically convert\ndata in the backend database encoding into the frontend encoding. Note:\nThe function used to be called pg_setclientencoding().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param encoding The required client encoding. One of `SQL_ASCII`, `EUC_JP`,\n`EUC_CN`, `EUC_KR`, `EUC_TW`, `UNICODE`, `MULE_INTERNAL`, `LATINX` (X=1...9),\n`KOI8`, `WIN`, `ALT`, `SJIS`, `BIG5` or `WIN1250`. The exact list of available\nencodings depends on your PostgreSQL version, so check your PostgreSQL manual\nfor a more specific list.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see pg_client_encoding() - Gets the client encoding\n
pg_set_error_verbosity pg_set_error_verbosity([resource $connection], int\n$verbosity) [int]\nDetermines the verbosity of messages returned by pg_last_error \n   and pg_result_error.. Determines the verbosity of messages returned by\n   pg_last_error() and pg_result_error(). pg_set_error_verbosity() sets\n   the verbosity mode, returning the connection&#039;s previous setting. In\n   PGSQL_ERRORS_TERSE mode, returned messages include severity, primary text,\n   and position only; this will normally fit on a single line. The default\n   mode (PGSQL_ERRORS_DEFAULT) produces messages that include the above plus\n   any detail, hint, or context fields (these may span multiple lines). The\n   PGSQL_ERRORS_VERBOSE mode includes all available fields. Changing the\n   verbosity does not affect the messages available from already-existing\n   result objects, only subsequently-created ones.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param verbosity The required verbosity: PGSQL_ERRORS_TERSE,\nPGSQL_ERRORS_DEFAULT or PGSQL_ERRORS_VERBOSE.\n@return (PHP 5 >= 5.1.0)\n@see pg_last_error() - Get the last error message string of a connection\n@see pg_result_error() - Get error message associated with result\n
pg_trace pg_trace(string $pathname [, string $mode=&quot;w&quot; [, resource\n$connection]]) [bool]\nEnable tracing a PostgreSQL connection. pg_trace() enables tracing of the\nPostgreSQL frontend/backend communication to a file. To fully understand\nthe results, one needs to be familiar with the internals of PostgreSQL\ncommunication protocol. For those who are not, it can still be useful for\ntracing errors in queries sent to the server, you could do for example\ngrep &#039;^To backend&#039; trace.log and see what queries actually were\nsent to the PostgreSQL server. For more information, refer to the &raquo;\nPostgreSQL Documentation.\n@param pathname The full path and file name of the file in which to write\nthe trace log. Same as in fopen().\n@param pathname An optional file access mode, same as for fopen().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see fopen() - Opens file or URL\n@see pg_untrace() - Disable tracing of a PostgreSQL connection\n
pg_transaction_status pg_transaction_status(resource $connection) [int]\nReturns the current in-transaction status of the server.. Returns the\ncurrent in-transaction status of the server. pg_transaction_status() will\ngive incorrect results when using a PostgreSQL 7.3 server that has the\nparameter `autocommit` set to off. The server-side autocommit feature has\nbeen deprecated and does not exist in later server versions.\n@param connection PostgreSQL database connection resource.\n@return (PHP 5 >= 5.1.0)\n
pg_tty pg_tty([resource $connection]) [string]\nReturn the TTY name associated with the connection. pg_tty() returns the TTY\nname that server side debugging output is sent to on the given PostgreSQL\n`connection` resource. Note: pg_tty() is obsolete, since the server no\nlonger pays attention to the TTY setting, but the function remains for\nbackwards compatibility.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n
pg_unescape_bytea pg_unescape_bytea(string $data) [string]\nUnescape binary for bytea type. pg_unescape_bytea() unescapes PostgreSQL\nbytea data values. It returns the unescaped string, possibly containing\nbinary data. Note: When you `SELECT` a bytea type, PostgreSQL returns octal\nbyte values prefixed with &#039;\&#039; (e.g. \032). Users are supposed to\nconvert back to binary format manually. This function requires PostgreSQL 7.2\nor later. With PostgreSQL 7.2.0 and 7.2.1, bytea values must be cast when\nyou enable multi-byte support. i.e. `INSERT INTO test_table (image) VALUES\n(&#039;$image_escaped&#039;::bytea);` PostgreSQL 7.2.2 or later does not need\na cast. The exception is when the client and backend character encoding does\nnot match, and there may be multi-byte stream error. User must then cast to\nbytea to avoid this error.\n@param data A string containing PostgreSQL bytea data to be converted into\na PHP binary string.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_escape_bytea() - Escape a string for insertion into a bytea field\n@see pg_escape_string() - Escape a string for insertion into a text field\n
pg_untrace pg_untrace([resource $connection]) [bool]\nDisable tracing of a PostgreSQL connection. Stop tracing started by pg_trace().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see pg_trace() - Enable tracing a PostgreSQL connection\n
pg_update pg_update(resource $connection, string $table_name, array $data,\narray $condition [, int $options=PGSQL_DML_EXEC]) [mixed]\nUpdate table. pg_update() updates records that matches `condition` with\n`data`. If `options` is specified, pg_convert() is applied to `data` with\nspecified options. This function is EXPERIMENTAL. The behaviour of this\nfunction, its name, and surrounding documentation may change without notice\nin a future release of PHP. This function should be used at your own risk.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table into which to update rows.\n@param data An array whose keys are field names in the table `table_name`,\nand whose values are what matched rows are to be updated to.\n@param condition An array whose keys are field names in the table `table_name`,\nand whose values are the conditions that a row must meet to be updated.\n@param options Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC\nor PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the `options`\nthen query string is returned.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_convert() - Convert associative array values into suitable for\nSQL statement\n
pg_version pg_version([resource $connection]) [array]\nReturns an array with client, protocol and server version (when\navailable). pg_version() returns an array with the client, protocol and\nserver version. Protocol and server versions are only available if PHP was\ncompiled with PostgreSQL 7.4 or later. For more detailed server information,\nuse pg_parameter_status().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 5)\n@see pg_parameter_status() - Looks up a current parameter setting of the\nserver.\n
php_check_syntax php_check_syntax(string $filename [, string &$error_message])\n[bool]\nCheck the PHP syntax of (and execute) the specified file. Performs a syntax\n(lint) check on the specified `filename` testing for scripting errors. This\nis similar to using php -l from the commandline except that this function\nwill execute (but not output) the checked `filename`. For example, if a\nfunction is defined in `filename`, this defined function will be available\nto the file that executed php_check_syntax(), but output from `filename`\nwill be suppressed. Note: For technical reasons, this function is deprecated\nand removed from PHP. Instead, use `php -l somefile.php` from the commandline.\n@param filename The name of the file being checked.\n@param error_message If the `error_message` parameter is used, it will\ncontain the error message generated by the syntax check. `error_message`\nis passed by reference.\n@return (PHP 5 &lt;= 5.0.4)\n@see include() - include\n@see is_readable() - Tells whether a file exists and is readable\n
php_ini_loaded_file php_ini_loaded_file(void) [string]\nRetrieve a path to the loaded php.ini file. Check if a php.ini file is loaded,\nand retrieve its path.\n@return (PHP 5 >= 5.2.4)\n@see php_ini_scanned_files() - Return a list of .ini files parsed from the\nadditional ini dir\n@see phpinfo() - Outputs information about PHP's configuration\n@see The configuration file\n
php_ini_scanned_files php_ini_scanned_files(void) [string]\nReturn a list of .ini files parsed from the additional ini\ndir. php_ini_scanned_files() returns a comma-separated list of configuration\nfiles parsed after php.ini. These files are found in a directory defined by\nthe --with-config-file-scan-dir option which is set during compilation. The\nreturned configuration files also include the path as declared in the\n--with-config-file-scan-dir option.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ini_set() - Sets the value of a configuration option\n@see phpinfo() - Outputs information about PHP's configuration\n@see php_ini_loaded_file() - Retrieve a path to the loaded php.ini file\n
php_logo_guid php_logo_guid(void) [string]\nGets the logo guid. This function returns the ID which can be used to display\nthe PHP logo using the built-in image. Logo is displayed only if expose_php\nis On.\n@return (PHP 4, PHP 5)\n@see phpinfo() - Outputs information about PHP's configuration\n@see phpversion() - Gets the current PHP version\n@see phpcredits() - Prints out the credits for PHP\n@see zend_logo_guid() - Gets the Zend guid\n
php_sapi_name php_sapi_name(void) [string]\nReturns the type of interface between web server and PHP.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: An alternative approach The PHP constant PHP_SAPI has the same\nvalue as php_sapi_name().\n@see PHP_SAPI\n
php_strip_whitespace php_strip_whitespace(string $filename) [string]\nReturn source with stripped comments and whitespace. Returns the PHP source\ncode in `filename` with PHP comments and whitespace removed. This may be useful\nfor determining the amount of actual code in your scripts compared with the\namount of comments. This is similar to using php -w from the commandline.\n@param filename Path to the PHP file.\n@return (PHP 5)\n
php_uname php_uname([string $mode=&quot;a&quot;]) [string]\nReturns information about the operating system PHP is running on. php_uname()\nreturns a description of the operating system PHP is running on. This is the\nsame string you see at the very top of the phpinfo() output. For the name of\njust the operating system, consider using the PHP_OS constant, but keep in\nmind this constant will contain the operating system PHP was built on. On\nsome older UNIX platforms, it may not be able to determine the current OS\ninformation in which case it will revert to displaying the OS PHP was built\non. This will only happen if your uname() library call either doesn&#039;t\nexist or doesn&#039;t work.\n@param mode `mode` is a single character that defines what information\nis returned: `&#039;a&#039;`: This is the default. Contains all\nmodes in the sequence `&quot;s n r v m&quot;`. `&#039;s&#039;`:\nOperating system name. eg. `FreeBSD`. `&#039;n&#039;`: Host\nname. eg. `localhost.example.com`. `&#039;r&#039;`: Release\nname. eg. `5.1.2-RELEASE`. `&#039;v&#039;`: Version information. Varies a\nlot between operating systems. `&#039;m&#039;`: Machine type. eg. `i386`.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see phpversion() - Gets the current PHP version\n@see php_sapi_name() - Returns the type of interface between web server and PHP\n@see phpinfo() - Outputs information about PHP's configuration\n
phpcredits phpcredits([int $flag=CREDITS_ALL]) [bool]\nPrints out the credits for PHP. This function prints out the credits listing\nthe PHP developers, modules, etc. It generates the appropriate HTML codes\nto insert the information in a page.\n@param flag To generate a custom credits page, you may want to use the `flag`\nparameter. Pre-defined phpcredits() flags name description CREDITS_ALL\nAll the credits, equivalent to using: CREDITS_DOCS + CREDITS_GENERAL\n+ CREDITS_GROUP + CREDITS_MODULES + CREDITS_FULLPAGE. It generates a\ncomplete stand-alone HTML page with the appropriate tags. CREDITS_DOCS\nThe credits for the documentation team CREDITS_FULLPAGE Usually used in\ncombination with the other flags. Indicates that a complete stand-alone\nHTML page needs to be printed including the information indicated by the\nother flags. CREDITS_GENERAL General credits: Language design and concept,\nPHP authors and SAPI module. CREDITS_GROUP A list of the core developers\nCREDITS_MODULES A list of the extension modules for PHP, and their authors\nCREDITS_SAPI A list of the server API modules for PHP, and their authors\n@return (PHP 4, PHP 5)\n@see phpversion() - Gets the current PHP version\n@see php_logo_guid() - Gets the logo guid\n@see phpinfo() - Outputs information about PHP's configuration\n
phpinfo phpinfo([int $what=INFO_ALL]) [bool]\nOutputs information about PHP's configuration. Outputs a large amount of\ninformation about the current state of PHP. This includes information about\nPHP compilation options and extensions, the PHP version, server information\nand environment (if compiled as a module), the PHP environment, OS version\ninformation, paths, master and local values of configuration options, HTTP\nheaders, and the PHP License. Because every system is setup differently,\nphpinfo() is commonly used to check configuration settings and for available\npredefined variables on a given system. phpinfo() is also a valuable debugging\ntool as it contains all EGPCS (Environment, GET, POST, Cookie, Server) data.\n@param what The output may be customized by passing one or more of the\nfollowing constants bitwise values summed together in the optional `what`\nparameter. One can also combine the respective constants or bitwise\nvalues together with the or operator. phpinfo() options Name (constant)\nValue Description INFO_GENERAL 1 The configuration line, php.ini location,\nbuild date, Web Server, System and more. INFO_CREDITS 2 PHP Credits. See\nalso phpcredits(). INFO_CONFIGURATION 4 Current Local and Master values for\nPHP directives. See also ini_get(). INFO_MODULES 8 Loaded modules and their\nrespective settings. See also get_loaded_extensions(). INFO_ENVIRONMENT\n16 Environment Variable information that&#039;s also available in\n$_ENV. INFO_VARIABLES 32 Shows all predefined variables from EGPCS\n(Environment, GET, POST, Cookie, Server). INFO_LICENSE 64 PHP License\ninformation. See also the &raquo; license FAQ. INFO_ALL -1 Shows all of\nthe above.\n@return (PHP 4, PHP 5)\n@note Note: Parts of the information displayed are disabled when the expose_php\nconfiguration setting is set to `off`. This includes the PHP and Zend logos,\nand the credits.\n@note Note: phpinfo() outputs plain text instead of HTML when using the\nCLI mode.\n@see phpversion() - Gets the current PHP version\n@see phpcredits() - Prints out the credits for PHP\n@see php_logo_guid() - Gets the logo guid\n@see ini_get() - Gets the value of a configuration option\n@see ini_set() - Sets the value of a configuration option\n@see get_loaded_extensions() - Returns an array with the names of all modules\ncompiled and loaded\n@see Predefined Variables\n
phpversion phpversion([string $extension]) [string]\nGets the current PHP version. Returns a string containing the version of\nthe currently running PHP parser or extension.\n@param extension An optional extension name.\n@return (PHP 4, PHP 5)\n@note Note: This information is also available in the predefined constant\nPHP_VERSION. More versioning information is available using the PHP_VERSION_*\nconstants.\n@see PHP_VERSION constants\n@see version_compare() - Compares two &quot;PHP-standardized&quot; version\nnumber strings\n@see phpinfo() - Outputs information about PHP's configuration\n@see phpcredits() - Prints out the credits for PHP\n@see php_logo_guid() - Gets the logo guid\n@see zend_version() - Gets the version of the current Zend engine\n
pi pi(void) [float]\nGet value of pi.\n@return (PHP 4, PHP 5)\n
png2wbmp png2wbmp(string $pngname, string $wbmpname, int $dest_height,\nint $dest_width, int $threshold) [bool]\nConvert PNG image file to WBMP image file. Converts a PNG file into a\nWBMP file.\n@param pngname Path to PNG file.\n@param wbmpname Path to destination WBMP file.\n@param dest_height Destination image height.\n@param dest_width Destination image width.\n@param threshold Threshold value, between 0 and 8 (inclusive).\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: WBMP support is only available if PHP was compiled against GD-1.8\nor later.\n@see jpeg2wbmp() - Convert JPEG image file to WBMP image file\n
popen popen(string $command, string $mode) [resource]\nOpens process file pointer. Opens a pipe to a process executed by forking\nthe command given by command.\n@param command The command\n@param mode The mode\n@return (PHP 4, PHP 5)\n@note Note: If you&#039;re looking for bi-directional support (two-way),\nuse proc_open().\n@note Note: When safe mode is enabled, you can only execute files within\nthe safe_mode_exec_dir. For practical reasons, it is currently not allowed\nto have `..` components in the path to the executable.\n@see pclose() - Closes process file pointer\n@see fopen() - Opens file or URL\n@see proc_open() - Execute a command and open file pointers for input/output\n
pos pos\nAlias of current.\n
posix_access posix_access(string $file [, int $mode=POSIX_F_OK]) [bool]\nDetermine accessibility of a file. posix_access() checks the user&#039;s\npermission of a file.\n@param file The name of the file to be tested.\n@param mode A mask consisting of one or more of POSIX_F_OK, POSIX_R_OK,\nPOSIX_W_OK and POSIX_X_OK. POSIX_R_OK, POSIX_W_OK and POSIX_X_OK request\nchecking whether the file exists and has read, write and execute permissions,\nrespectively. POSIX_F_OK just requests checking for the existence of the file.\n@return (PHP 5 >= 5.1.0)\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n@see posix_get_last_error() - Retrieve the error number set by the last\nposix function that failed\n@see posix_strerror() - Retrieve the system error message associated with\nthe given errno\n
posix_ctermid posix_ctermid(void) [string]\nGet path name of controlling terminal. Generates a string which is the\npathname for the current controlling terminal for the process. On error this\nwill set errno, which can be checked using posix_get_last_error()\n@return (PHP 4, PHP 5)\n@see posix_ttyname() - Determine terminal device name\n@see posix_get_last_error() - Retrieve the error number set by the last\nposix function that failed\n
posix_errno posix_errno\nAlias of posix_get_last_error.\n
posix_get_last_error posix_get_last_error(void) [int]\nRetrieve the error number set by the last posix function that failed. Retrieve\nthe error number set by the last posix function that failed. The system\nerror message associated with the errno may be checked with posix_strerror().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see posix_strerror() - Retrieve the system error message associated with\nthe given errno\n
posix_getcwd posix_getcwd(void) [string]\nPathname of current directory. Gets the absolute pathname of the script&#039;s\ncurrent working directory. On error, it sets errno which can be checked\nusing posix_get_last_error()\n@return (PHP 4, PHP 5)\n@note Note: This function can fail on Read or Search permission was denied\nPathname no longer exists\n
posix_getegid posix_getegid(void) [int]\nReturn the effective group ID of the current process. Return the numeric\neffective group ID of the current process.\n@return (PHP 4, PHP 5)\n@see posix_getgrgid() - Return info about a group by group id\n@see posix_getgid() - Return the real group ID of the current process\n@see posix_setgid() - Set the GID of the current process\n
posix_geteuid posix_geteuid(void) [int]\nReturn the effective user ID of the current process. Return the numeric\neffective user ID of the current process. See also posix_getpwuid() for\ninformation on how to convert this into a useable username.\n@return (PHP 4, PHP 5)\n@see posix_getpwuid() - Return info about a user by user id\n@see posix_getuid() - Return the real user ID of the current process\n@see posix_setuid() - Set the UID of the current process\n@see POSIX man page GETEUID(2)\n
posix_getgid posix_getgid(void) [int]\nReturn the real group ID of the current process. Return the numeric real\ngroup ID of the current process.\n@return (PHP 4, PHP 5)\n@see posix_getgrgid() - Return info about a group by group id\n@see posix_getegid() - Return the effective group ID of the current process\n@see posix_setgid() - Set the GID of the current process\n@see POSIX man page GETGID(2)\n
posix_getgrgid posix_getgrgid(int $gid) [array]\nReturn info about a group by group id. Gets information about a group provided\nits id.\n@param gid The group id.\n@return (PHP 4, PHP 5)\n@see posix_getegid() - Return the effective group ID of the current process\n@see posix_getgrnam() - Return info about a group by name\n@see filegroup() - Gets file group\n@see stat() - Gives information about a file\n@see safe_mode_gid\n@see POSIX man page GETGRNAM(3)\n
posix_getgrnam posix_getgrnam(string $name) [array]\nReturn info about a group by name. Gets information about a group provided\nits name.\n@param name The name of the group\n@return (PHP 4, PHP 5)\n@see posix_getegid() - Return the effective group ID of the current process\n@see posix_getgrgid() - Return info about a group by group id\n@see filegroup() - Gets file group\n@see stat() - Gives information about a file\n@see safe_mode_gid\n@see POSIX man page GETGRNAM(3)\n
posix_getgroups posix_getgroups(void) [array]\nReturn the group set of the current process. Gets the group set of the\ncurrent process.\n@return (PHP 4, PHP 5)\n@see posix_getgrgid() - Return info about a group by group id\n
posix_getlogin posix_getlogin(void) [string]\nReturn login name. Returns the login name of the user owning the current\nprocess.\n@return (PHP 4, PHP 5)\n@see posix_getpwnam() - Return info about a user by username\n@see POSIX man page GETLOGIN(3)\n
posix_getpgid posix_getpgid(int $pid) [int]\nGet process group id for job control. Returns the process group identifier\nof the process `pid` or FALSE on failure.\n@param pid The process id.\n@return (PHP 4, PHP 5)\n@note Note: This is a not POSIX function, but is common on BSD and System V\nsystems. If the system does not support this function, then it will not be\nincluded at compile time. This may be checked with function_exists().\n@see posix_getppid() - Return the parent process identifier\n@see man page SETPGID(2)\n
posix_getpgrp posix_getpgrp(void) [int]\nReturn the current process group identifier. Return the process group\nidentifier of the current process.\n@return (PHP 4, PHP 5)\n@see POSIX.1 and the getpgrp(2) manual page on the POSIX system for more\ninformation on process groups.\n
posix_getpid posix_getpid(void) [int]\nReturn the current process identifier. Return the process identifier of the\ncurrent process.\n@return (PHP 4, PHP 5)\n@see posix_kill() - Send a signal to a process\n@see POSIX man page GETPID(2)\n
posix_getppid posix_getppid(void) [int]\nReturn the parent process identifier. Return the process identifier of the\nparent process of the current process.\n@return (PHP 4, PHP 5)\n
posix_getpwnam posix_getpwnam(string $username) [array]\nReturn info about a user by username. Returns an array of information about\nthe given user.\n@param username An alphanumeric username.\n@return (PHP 4, PHP 5)\n@see posix_getpwuid() - Return info about a user by user id\n@see POSIX man page GETPWNAM(3)\n
posix_getpwuid posix_getpwuid(int $uid) [array]\nReturn info about a user by user id. Returns an array of information about\nthe user referenced by the given user ID.\n@param uid The user identifier.\n@return (PHP 4, PHP 5)\n@see posix_getpwnam() - Return info about a user by username\n@see POSIX man page GETPWNAM(3)\n
posix_getrlimit posix_getrlimit(void) [array]\nReturn info about system resource limits. posix_getrlimit() returns an array\nof information about the current resource&#039;s soft and hard limits. Each\nresource has an associated soft and hard limit. The soft limit is the value\nthat the kernel enforces for the corresponding resource. The hard limit acts\nas a ceiling for the soft limit. An unprivileged process may only set its\nsoft limit to a value from 0 to the hard limit, and irreversibly lower its\nhard limit.\n@return (PHP 4, PHP 5)\n@note Note: This is a not POSIX function, but is common on BSD and System V\nsystems. If the system does not support this function, then it will not be\nincluded at compile time. This may be checked with function_exists().\n@see man page GETRLIMIT(2)\n
posix_getsid posix_getsid(int $pid) [int]\nGet the current sid of the process. Return the session id of the process\n`pid`. The session id of a process is the process group id of the session\nleader.\n@param pid The process identifier. If set to 0, the current process is\nassumed. If an invalid `pid` is specified, then FALSE is returned and an\nerror is set which can be checked with posix_get_last_error().\n@return (PHP 4, PHP 5)\n@see posix_getpgid() - Get process group id for job control\n@see posix_setsid() - Make the current process a session leader\n@see POSIX man page GETSID(2)\n
posix_getuid posix_getuid(void) [int]\nReturn the real user ID of the current process. Return the numeric real user\nID of the current process.\n@return (PHP 4, PHP 5)\n@see posix_getpwuid() - Return info about a user by user id\n@see POSIX man page GETUID(2)\n
posix_initgroups posix_initgroups(string $name, int $base_group_id) [bool]\nCalculate the group access list. Calculates the group access list for the\nuser specified in name.\n@param name The user to calculate the list for.\n@param base_group_id Typically the group number from the password file.\n@return (PHP 5 >= 5.2.0)\n@see The Unix manual page for initgroups(3).\n
posix_isatty posix_isatty(int $fd) [bool]\nDetermine if a file descriptor is an interactive terminal. Determines if\nthe file descriptor `fd` refers to a valid terminal type device.\n@param fd The file descriptor.\n@return (PHP 4, PHP 5)\n@see posix_ttyname() - Determine terminal device name\n
posix_kill posix_kill(int $pid, int $sig) [bool]\nSend a signal to a process. Send the signal `sig` to the process with the\nprocess identifier `pid`.\n@param pid The process identifier.\n@param sig One of the PCNTL signals constants.\n@return (PHP 4, PHP 5)\n@see The kill(2) manual page of the POSIX system, which contains additional\ninformation about negative process identifiers, the special pid 0, the\nspecial pid -1, and the signal number 0.\n
posix_mkfifo posix_mkfifo(string $pathname, int $mode) [bool]\nCreate a fifo special file (a named pipe). posix_mkfifo() creates a special\n`FIFO` file which exists in the file system and acts as a bidirectional\ncommunication endpoint for processes.\n@param pathname Path to the `FIFO` file.\n@param mode The second parameter `mode` has to be given in octal notation\n(e.g. 0644). The permission of the newly created `FIFO` also depends on\nthe setting of the current umask(). The permissions of the created file are\n(mode &amp; ~umask).\n@return (PHP 4, PHP 5)\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n
posix_mknod posix_mknod(string $pathname, int $mode [, int $major=0 [,\nint $minor=0]]) [bool]\nCreate a special or ordinary file (POSIX.1). Creates a special or ordinary\nfile.\n@param pathname The file to create\n@param mode This parameter is constructed by a bitwise OR between file type\n(one of the following constants: POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK,\nPOSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.\n@param major The major device kernel identifier (required to pass when using\nS_IFCHR or S_IFBLK).\n@param minor The minor device kernel identifier.\n@return (PHP 5 >= 5.1.0)\n@see posix_mkfifo() - Create a fifo special file (a named pipe)\n
posix_setegid posix_setegid(int $gid) [bool]\nSet the effective GID of the current process. Set the effective group ID\nof the current process. This is a privileged function and needs appropriate\nprivileges (usually root) on the system to be able to perform this function.\n@param gid The group id.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see posix_getgrgid() - Return info about a group by group id\n@see posix_getgid() - Return the real group ID of the current process\n@see posix_setgid() - Set the GID of the current process\n
posix_seteuid posix_seteuid(int $uid) [bool]\nSet the effective UID of the current process. Set the real user ID of the\ncurrent process. This is a privileged function and needs appropriate privileges\n(usually root) on the system to be able to perform this function.\n@param uid The user id.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see posix_setgid() - Set the GID of the current process\n
posix_setgid posix_setgid(int $gid) [bool]\nSet the GID of the current process. Set the real group ID of the current\nprocess. This is a privileged function and needs appropriate privileges\n(usually root) on the system to be able to perform this function. The\nappropriate order of function calls is posix_setgid() first, posix_setuid()\nlast. Note: If the caller is a super user, this will also set the effective\ngroup id.\n@param gid The group id.\n@return (PHP 4, PHP 5)\n@see posix_getgrgid() - Return info about a group by group id\n@see posix_getgid() - Return the real group ID of the current process\n
posix_setpgid posix_setpgid(int $pid, int $pgid) [bool]\nSet process group id for job control. Let the process `pid` join the process\ngroup `pgid`.\n@param pid The process id.\n@param pgid The process group id.\n@return (PHP 4, PHP 5)\n@see See POSIX.1 and the setsid(2) manual page on the POSIX system for more\ninformations on process groups and job control.\n
posix_setsid posix_setsid(void) [int]\nMake the current process a session leader. Make the current process a\nsession leader.\n@return (PHP 4, PHP 5)\n@see The POSIX.1 and the setsid(2) manual page on the POSIX system for more\ninformation on process groups and job control.\n
posix_setuid posix_setuid(int $uid) [bool]\nSet the UID of the current process. Set the real user ID of the current\nprocess. This is a privileged function that needs appropriate privileges\n(usually root) on the system to be able to perform this function.\n@param uid The user id.\n@return (PHP 4, PHP 5)\n@see posix_setgid() - Set the GID of the current process\n@see posix_seteuid() - Set the effective UID of the current process\n@see posix_getuid() - Return the real user ID of the current process\n@see posix_geteuid() - Return the effective user ID of the current process\n
posix_strerror posix_strerror(int $errno) [string]\nRetrieve the system error message associated with the given errno. Returns\nthe POSIX system error message associated with the given `errno`. You may\nget the `errno` parameter by calling posix_get_last_error().\n@param errno A POSIX error number, returned by posix_get_last_error(). If\nset to 0, then the string &quot;Success&quot; is returned.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see posix_get_last_error() - Retrieve the error number set by the last\nposix function that failed\n
posix_times posix_times(void) [array]\nGet process times. Gets information about the current CPU usage.\n@return (PHP 4, PHP 5)\n
posix_ttyname posix_ttyname(int $fd) [string]\nDetermine terminal device name. Returns a string for the absolute path to\nthe current terminal device that is open on the file descriptor `fd`.\n@param fd The file descriptor.\n@return (PHP 4, PHP 5)\n
posix_uname posix_uname(void) [array]\nGet system name. Gets information about the system. Posix requires that\nassumptions must not be made about the format of the values, e.g. the\nassumption that a release may contain three digits or anything else returned\nby this function.\n@return (PHP 4, PHP 5)\n
pow pow(number $base, number $exp) [number]\nExponential expression. Returns `base` raised to the power of `exp`. In PHP\n4.0.6 and earlier pow() always returned a float, and did not issue warnings.\n@param base The base to use\n@param exp The exponent\n@return (PHP 4, PHP 5)\n@see exp() - Calculates the exponent of e\n@see sqrt() - Square root\n@see bcpow() - Raise an arbitrary precision number to another\n@see gmp_pow() - Raise number into power\n
preg_filter preg_filter(mixed $pattern, mixed $replacement, mixed $subject\n[, int $limit=-1 [, int &$count]]) [mixed]\nPerform a regular expression search and replace. preg_filter() is identical\nto preg_replace() except it only returns the (possibly transformed) subjects\nwhere there was a match. For details about how this function works, read\nthe preg_replace() documentation.\n@return (PHP 5 >= 5.3.0)\n@see PCRE Patterns\n@see preg_replace() - Perform a regular expression search and replace\n@see preg_replace_callback() - Perform a regular expression search and\nreplace using a callback\n@see preg_grep() - Return array entries that match the pattern\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
preg_grep preg_grep(string $pattern, array $input [, int $flags=0]) [array]\nReturn array entries that match the pattern. Returns the array consisting\nof the elements of the `input` array that match the given `pattern`.\n@param pattern The pattern to search for, as a string.\n@param input The input array.\n@param flags If set to PREG_GREP_INVERT, this function returns the elements\nof the input array that do not match the given `pattern`.\n@return (PHP 4, PHP 5)\n@see PCRE Patterns\n@see preg_match_all() - Perform a global regular expression match\n@see preg_filter() - Perform a regular expression search and replace\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
preg_last_error preg_last_error(void) [int]\nReturns the error code of the last PCRE regex execution. Returns the error\ncode of the last PCRE regex execution.  Example #1 preg_last_error() example\n@return (PHP 5 >= 5.2.0)\n
preg_match_all preg_match_all(string $pattern, string $subject, array &$matches\n[, int $flags=PREG_PATTERN_ORDER [, int $offset=0]]) [int]\nPerform a global regular expression match. Searches `subject` for all matches\nto the regular expression given in `pattern` and puts them in `matches`\nin the order specified by `flags`. After the first match is found, the\nsubsequent searches are continued on from end of the last match.\n@param pattern The pattern to search for, as a string.\n@param subject The input string.\n@param matches Array of all matches in multi-dimensional array ordered\naccording to `flags`.\n@return (PHP 4, PHP 5)\n@see PCRE Patterns\n@see preg_match() - Perform a regular expression match\n@see preg_replace() - Perform a regular expression search and replace\n@see preg_split() - Split string by a regular expression\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
preg_match preg_match(string $pattern, string $subject [, array &$matches\n[, int $flags=0 [, int $offset=0]]]) [int]\nPerform a regular expression match. Searches `subject` for a match to the\nregular expression given in `pattern`.\n@param pattern The pattern to search for, as a string.\n@param subject The input string.\n@param matches If `matches` is provided, then it is filled with the results\nof search. $matches[0] will contain the text that matched the full pattern,\n$matches[1] will have the text that matched the first captured parenthesized\nsubpattern, and so on.\n@param flags `flags` can be the following flag: PREG_OFFSET_CAPTURE If this\nflag is passed, for every occurring match the appendant string offset will\nalso be returned. Note that this changes the value of `matches` into an array\nwhere every element is an array consisting of the matched string at offset\n`0` and its string offset into `subject` at offset `1`.\n@return (PHP 4, PHP 5)\n@see PCRE Patterns\n@see preg_match_all() - Perform a global regular expression match\n@see preg_replace() - Perform a regular expression search and replace\n@see preg_split() - Split string by a regular expression\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
preg_quote preg_quote(string $str [, string $delimiter=NULL]) [string]\nQuote regular expression characters. preg_quote() takes `str` and puts a\nbackslash in front of every character that is part of the regular expression\nsyntax. This is useful if you have a run-time string that you need to match\nin some text and the string may contain special regex characters. The special\nregular expression characters are: `. \ + * ? [ ^ ] $ ( ) { } = ! &lt; > | : -`\n@param str The input string.\n@param delimiter If the optional `delimiter` is specified, it will also be\nescaped. This is useful for escaping the delimiter that is required by the\nPCRE functions. The / is the most commonly used delimiter.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n
preg_replace_callback preg_replace_callback(mixed $pattern, callback $callback,\nmixed $subject [, int $limit=-1 [, int &$count]]) [mixed]\nPerform a regular expression search and replace using a callback. The behavior\nof this function is almost identical to preg_replace(), except for the fact\nthat instead of `replacement` parameter, one should specify a `callback`.\n@param pattern The pattern to search for. It can be either a string or an\narray with strings.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see PCRE Patterns\n@see preg_replace() - Perform a regular expression search and replace\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n@see create_function() - Create an anonymous (lambda-style) function\n@see Anonymous functions\n@see information about the callback type\n
preg_replace preg_replace(mixed $pattern, mixed $replacement, mixed $subject\n[, int $limit=-1 [, int &$count]]) [mixed]\nPerform a regular expression search and replace. Searches `subject` for\nmatches to `pattern` and replaces them with `replacement`.\n@param pattern The pattern to search for. It can be either a string or an\narray with strings. Several PCRE modifiers are also available, including\n&#039;`e`&#039; (PREG_REPLACE_EVAL), which is specific to this function.\n@param replacement The string or an array with strings to replace. If\nthis parameter is a string and the `pattern` parameter is an array, all\npatterns will be replaced by that string. If both `pattern` and `replacement`\nparameters are arrays, each `pattern` will be replaced by the `replacement`\ncounterpart. If there are fewer elements in the `replacement` array than\nin the `pattern` array, any extra `pattern`s will be replaced by an empty\nstring. `replacement` may contain references of the form `\\n` or (since PHP\n4.0.4) `$n`, with the latter form being the preferred one. Every such reference\nwill be replaced by the text captured by the n&#039;th parenthesized pattern. n\ncan be from 0 to 99, and `\\0` or `$0` refers to the text matched by the\nwhole pattern. Opening parentheses are counted from left to right (starting\nfrom 1) to obtain the number of the capturing subpattern. To use backslash\nin replacement, it must be doubled (`&quot;\\\\&quot;` PHP string). When\nworking with a replacement pattern where a backreference is immediately\nfollowed by another number (i.e.: placing a literal number immediately\nafter a matched pattern), you cannot use the familiar `\\1` notation for your\nbackreference. `\\11`, for example, would confuse preg_replace() since it does\nnot know whether you want the `\\1` backreference followed by a literal `1`,\nor the `\\11` backreference followed by nothing. In this case the solution\nis to use `\${1}1`. This creates an isolated `$1` backreference, leaving\nthe `1` as a literal. When using the `e` modifier, this function escapes\nsome characters (namely `&#039;`, `&quot;`, `\` and NULL) in the strings\nthat replace the backreferences. This is done to ensure that no syntax\nerrors arise from backreference usage with either single or double quotes\n(e.g. `&#039;strlen(\&#039;$1\&#039;)+strlen(&quot;$2&quot;)&#039;`). Make\nsure you are aware of PHP&#039;s string syntax to know exactly how the\ninterpreted string will look.\n@param subject The string or an array with strings to search and replace. If\n`subject` is an array, then the search and replace is performed on every\nentry of `subject`, and the return value is an array as well.\n@param limit The maximum possible replacements for each pattern in each\n`subject` string. Defaults to `-1` (no limit).\n@param count If specified, this variable will be filled with the number of\nreplacements done.\n@return (PHP 4, PHP 5)\n@note Note: When using arrays with `pattern` and `replacement`, the keys\nare processed in the order they appear in the array. This is not necessarily\nthe same as the numerical index order. If you use indexes to identify which\n`pattern` should be replaced by which `replacement`, you should perform a\nksort() on each array prior to calling preg_replace().\n@see PCRE Patterns\n@see preg_filter() - Perform a regular expression search and replace\n@see preg_match() - Perform a regular expression match\n@see preg_replace_callback() - Perform a regular expression search and\nreplace using a callback\n@see preg_split() - Split string by a regular expression\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
preg_split preg_split(string $pattern, string $subject [, int $limit=-1 [,\nint $flags=0]]) [array]\nSplit string by a regular expression. Split the given string by a regular\nexpression.\n@param pattern The pattern to search for, as a string.\n@param subject The input string.\n@param limit If specified, then only substrings up to `limit` are returned\nwith the rest of the string being placed in the last substring. A `limit`\nof -1, 0 or null means &quot;no limit&quot; and, as is standard across PHP,\nyou can use null to skip to the `flags` parameter.\n@param flags `flags` can be any combination of the following flags (combined\nwith the `|` bitwise operator): PREG_SPLIT_NO_EMPTY If this flag is set,\nonly non-empty pieces will be returned by preg_split().\n@param PREG_SPLIT_DELIM_CAPTURE If this flag is set, parenthesized expression\nin the delimiter pattern will be captured and returned as well.\n@param PREG_SPLIT_OFFSET_CAPTURE If this flag is set, for every occurring match\nthe appendant string offset will also be returned. Note that this changes the\nreturn value in an array where every element is an array consisting of the\nmatched string at offset `0` and its string offset into `subject` at offset\n`1`.\n@return (PHP 4, PHP 5)\n@see PCRE Patterns\n@see implode() - Join array elements with a string\n@see preg_match() - Perform a regular expression match\n@see preg_match_all() - Perform a global regular expression match\n@see preg_replace() - Perform a regular expression search and replace\n@see preg_last_error() - Returns the error code of the last PCRE regex\nexecution\n
prev prev(array &$array) [mixed]\nRewind the internal array pointer. Rewind the internal array pointer. prev()\nbehaves just like next(), except it rewinds the internal array pointer one\nplace instead of advancing it.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see current() - Return the current element in an array\n@see end() - Set the internal pointer of an array to its last element\n@see next() - Advance the internal array pointer of an array\n@see reset() - Set the internal pointer of an array to its first element\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n
print_r print_r(mixed $expression [, bool $return=false]) [mixed]\nPrints human-readable information about a variable. print_r()\ndisplays information about a variable in a way that&#039;s readable by\nhumans. print_r(), var_dump() and var_export() will also show protected and\nprivate properties of objects with PHP 5. Static class members will not be\nshown. Remember that print_r() will move the array pointer to the end. Use\nreset() to bring it back to beginning.\n@param expression The expression to be printed.\n@param return If you would like to capture the output of print_r(), use the\n`return` parameter. When this parameter is set to TRUE, print_r() will return\nthe information rather than print it.\n@return (PHP 4, PHP 5)\n@note Note: This function uses internal output buffering with this parameter\nso it can not be used inside an ob_start() callback function.\n@see ob_start() - Turn on output buffering\n@see var_dump() - Dumps information about a variable\n@see var_export() - Outputs or returns a parsable string representation of\na variable\n
print print(string $arg) [int]\nOutput a string. Outputs `arg`. print() is not actually a real function\n(it is a language construct) so you are not required to use parentheses with\nits argument list.\n@param arg The input data.\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@see echo() - Output one or more strings\n@see printf() - Output a formatted string\n@see flush() - Flush the output buffer\n@see Heredoc syntax\n
printer_abort printer_abort(resource $printer_handle) [void]\nDeletes the printer's spool file. This function deletes the printers spool\nfile.\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@return (PECL printer SVN)\n
printer_close printer_close(resource $printer_handle) [void]\nClose an open printer connection. This function closes the printer\nconnection. printer_close() also closes the active device context.\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@return (PECL printer SVN)\n
printer_create_brush printer_create_brush(int $style, string $color) [resource]\nCreate a new brush. The function creates a new brush and returns a handle to\nit. A brush is used to fill shapes. For an example see printer_select_brush().\n@param style `style` must be one of the following\nconstants: PRINTER_BRUSH_SOLID: creates a brush with a solid\ncolor. PRINTER_BRUSH_DIAGONAL: creates a brush with a 45-degree upward\nleft-to-right hatch ( / ). PRINTER_BRUSH_CROSS: creates a brush with a cross\nhatch ( + ). PRINTER_BRUSH_DIAGCROSS: creates a brush with a 45 cross hatch\n( x ). PRINTER_BRUSH_FDIAGONAL: creates a brush with a 45-degree downward\nleft-to-right hatch ( \ ). PRINTER_BRUSH_HORIZONTAL: creates a brush with a\nhorizontal hatch ( - ). PRINTER_BRUSH_VERTICAL: creates a brush with a vertical\nhatch ( | ). PRINTER_BRUSH_CUSTOM: creates a custom brush from an BMP file. The\nsecond parameter is used to specify the BMP instead of the RGB color code.\n@param color `color` must be a color in RGB hex format,\ni.e. &quot;`000000`&quot; for black.\n@return (PECL printer SVN)\n
printer_create_dc printer_create_dc(resource $printer_handle) [void]\nCreate a new device context. The function creates a new device context. A\ndevice context is used to customize the graphic objects of the document.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@return (PECL printer SVN)\n
printer_create_font printer_create_font(string $face, int $height, int\n$width, int $font_weight, bool $italic, bool $underline, bool $strikeout,\nint $orientation) [resource]\nCreate a new font. The function creates a new font and returns a handle to\nit. A font is used to draw text. For an example see printer_select_font().\n@param face `face` must be a string specifying the font face.\n@param height `height` specifies the font height.\n@param width `width` specifies the font width.\n@param font_weight The `font_weight` specifies the font weight (400 is normal),\nand can be one of the following predefined constants. PRINTER_FW_THIN:\nsets the font weight to thin (100). PRINTER_FW_ULTRALIGHT: sets\nthe font weight to ultra light (200). PRINTER_FW_LIGHT: sets\nthe font weight to light (300). PRINTER_FW_NORMAL: sets the font\nweight to normal (400). PRINTER_FW_MEDIUM: sets the font weight\nto medium (500). PRINTER_FW_BOLD: sets the font weight to bold\n(700). PRINTER_FW_ULTRABOLD: sets the font weight to ultra bold\n(800). PRINTER_FW_HEAVY: sets the font weight to heavy (900).\n@param italic `italic` can be TRUE or FALSE, and sets whether the font should\nbe italic.\n@param underline `underline` can be TRUE or FALSE, and sets whether the font\nshould be underlined.\n@param strikeout `strikeout` can be TRUE or FALSE, and sets whether the font\nshould be stroked out.\n@param orientaton `orientation` specifies a rotation.\n@return (PECL printer SVN)\n
printer_create_pen printer_create_pen(int $style, int $width, string $color)\n[resource]\nCreate a new pen. The function creates a new pen and returns a handle to it. A\npen is used to draw lines and curves. For an example see printer_select_pen().\n@param style `style` must be one of the following constants: PRINTER_PEN_SOLID:\ncreates a solid pen. PRINTER_PEN_DASH: creates a dashed pen. PRINTER_PEN_DOT:\ncreates a dotted pen. PRINTER_PEN_DASHDOT: creates a pen with dashes\nand dots. PRINTER_PEN_DASHDOTDOT: creates a pen with dashes and double\ndots. PRINTER_PEN_INVISIBLE: creates an invisible pen.\n@param width `width` specifies the width of the pen.\n@param color `color` must be a color in RGB hex format,\ni.e. &quot;`000000`&quot; for black.\n@return (PECL printer SVN)\n
printer_delete_brush printer_delete_brush(resource $brush_handle) [void]\nDelete a brush. The function deletes the selected brush. For an example\nsee printer_select_brush().\n@param brush_handle `brush_handle` must be a valid handle to a brush.\n@return (PECL printer SVN)\n
printer_delete_dc printer_delete_dc(resource $printer_handle) [bool]\nDelete a device context. The function deletes the device context. For an\nexample see printer_create_dc().\n@param printer_handle `printer_handle` must be a valid printer handle.\n@return (PECL printer SVN)\n
printer_delete_font printer_delete_font(resource $font_handle) [void]\nDelete a font. The function deletes the selected font. For an example see\nprinter_select_font().\n@param font_handle `font_handle` must be a valid handle to a font.\n@return (PECL printer SVN)\n
printer_delete_pen printer_delete_pen(resource $pen_handle) [void]\nDelete a pen. The function deletes the selected pen. For an example see\nprinter_select_pen().\n@param pen_handle `pen_handle` must be a valid pen handle.\n@return (PECL printer SVN)\n
printer_draw_bmp printer_draw_bmp(resource $printer_handle, string $filename,\nint $x, int $y [, int $width], int $height) [bool]\nDraw a bmp. The function draws an bmp.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param filename Path to the bitmap.\n@param x `x` is the upper left x coordinate of the bitmap.\n@param y `y` is the upper left y coordinate of the bitmap.\n@param width The bitmap width.\n@param height The bitmap height.\n@return (PECL printer SVN)\n
printer_draw_chord printer_draw_chord(resource $printer_handle, int $rec_x,\nint $rec_y, int $rec_x1, int $rec_y1, int $rad_x, int $rad_y, int $rad_x1,\nint $rad_y1) [void]\nDraw a chord. The function simply draws an chord.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param rec_x `rec_x` is the upper left x coordinate of the bounding rectangle.\n@param rec_y `rec_y` is the upper left y coordinate of the bounding rectangle.\n@param rec_x1 `rec_x1` is the lower right x coordinate of the bounding\nrectangle.\n@param rec_y1 `rec_y1` is the lower right y coordinate of the bounding\nrectangle.\n@param rad_x `rad_x` is x coordinate of the radial defining the beginning\nof the chord.\n@param rad_y `rad_y` is y coordinate of the radial defining the beginning\nof the chord.\n@param rad_x1 `rad_x1` is x coordinate of the radial defining the end of\nthe chord.\n@param rad_y1 `rad_y1` is y coordinate of the radial defining the end of\nthe chord.\n@return (PECL printer SVN)\n
printer_draw_elipse printer_draw_elipse(resource $printer_handle, int $ul_x,\nint $ul_y, int $lr_x, int $lr_y) [void]\nDraw an ellipse. The function draws an ellipse.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param ul_x `ul_x` is the upper left x coordinate of the ellipse.\n@param ul_y `ul_y` is the upper left y coordinate of the ellipse.\n@param lr_x `lr_x` is the lower right x coordinate of the ellipse.\n@param lr_y `lr_y` is the lower right y coordinate of the ellipse.\n@return (PECL printer SVN)\n
printer_draw_line printer_draw_line(resource $printer_handle, int $from_x,\nint $from_y, int $to_x, int $to_y) [void]\nDraw a line. The function draws a line using the selected pen.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param from_x `from_x` is the x coordinate of the origin point.\n@param from_y `from_y` is the y coordinate of the origin point.\n@param to_x `to_x` is the x coordinate of the destination point.\n@param to_y `to_y` is the y coordinate of the destination point.\n@return (PECL printer SVN)\n
printer_draw_pie printer_draw_pie(resource $printer_handle, int $rec_x,\nint $rec_y, int $rec_x1, int $rec_y1, int $rad1_x, int $rad1_y, int $rad2_x,\nint $rad2_y) [void]\nDraw a pie. The function draws an pie.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param rec_x `rec_x` is the upper left x coordinate of the bounding rectangle.\n@param rec_y `rec_y` is the upper left y coordinate of the bounding rectangle.\n@param rec_x1 `rec_x1` is the lower right x coordinate of the bounding\nrectangle.\n@param rec_y1 `rec_y1` is the lower right y coordinate of the bounding\nrectangle.\n@param rad1_x `rad1_x` is x coordinate of the first radial&#039;s ending.\n@param rad1_y `rad1_y` is y coordinate of the first radial&#039;s ending.\n@param rad2_x `rad2_x` is x coordinate of the second radial&#039;s ending.\n@param rad2_y `rad2_y` is y coordinate of the second radial&#039;s ending.\n@return (PECL printer SVN)\n
printer_draw_rectangle printer_draw_rectangle(resource $printer_handle,\nint $ul_x, int $ul_y, int $lr_x, int $lr_y) [void]\nDraw a rectangle. The function draws a rectangle.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param ul_x `ul_x` is the upper left x coordinate of the rectangle.\n@param ul_y `ul_y` is the upper left y coordinate of the rectangle.\n@param lr_x `lr_x` is the lower right x coordinate of the rectangle.\n@param lr_y `lr_y` is the lower right y coordinate of the rectangle.\n@return (PECL printer SVN)\n
printer_draw_roundrect printer_draw_roundrect(resource $printer_handle,\nint $ul_x, int $ul_y, int $lr_x, int $lr_y, int $width, int $height) [void]\nDraw a rectangle with rounded corners. The function draws a rectangle with\nrounded corners.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param ul_x `ul_x` is the upper left x coordinate of the rectangle.\n@param ul_y `ul_y` is the upper left y coordinate of the rectangle.\n@param lr_x `lr_x` is the lower right x coordinate of the rectangle.\n@param lr_y `lr_y` is the lower right y coordinate of the rectangle.\n@param width `width` is the width of the ellipse.\n@param height `height` is the height of the ellipse.\n@return (PECL printer SVN)\n
printer_draw_text printer_draw_text(resource $printer_handle, string $text,\nint $x, int $y) [void]\nDraw text. The function draws `text` at position `x`, `y` using the selected\nfont.\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@param text The text to be written.\n@param x `x` is the x coordinate of the position.\n@param y `y` is the y coordinate of the position.\n@return (PECL printer SVN)\n
printer_end_doc printer_end_doc(resource $printer_handle) [bool]\nClose document. Closes a new document in the printer spooler. The document\nis now ready for printing. For an example see printer_start_doc().\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@return (PECL printer SVN)\n
printer_end_page printer_end_page(resource $printer_handle) [bool]\nClose active page. The function closes the active page in the active\ndocument. For an example see printer_start_doc().\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@return (PECL printer SVN)\n
printer_get_option printer_get_option(resource $printer_handle, string $option)\n[mixed]\nRetrieve printer configuration data. The function retrieves the configuration\nsetting of `option`.\n@param printer_handle `printer_handle` must be a valid handle to a printer.\n@param option Take a look at printer_set_option() for the settings that\ncan be retrieved, additionally the following settings can be retrieved:\nPRINTER_DEVICENAME returns the devicename of the printer. PRINTER_DRIVERVERSION\nreturns the printer driver version.\n@return (PECL printer SVN)\n
printer_list printer_list(int $enumtype [, string $name [, int $level]])\n[array]\nReturn an array of printers attached to the server. The function enumerates\navailable printers and their capabilities.\n@param enumtype `enumtype` must be one of the following predefined\nconstants: PRINTER_ENUM_LOCAL: enumerates the locally installed\nprinters. PRINTER_ENUM_NAME: enumerates the printer of `name`,\ncan be a server, domain or print provider. PRINTER_ENUM_SHARED:\nthis parameter can&#039;t be used alone, it has to be OR&#039;ed with\nother parameters, i.e. PRINTER_ENUM_LOCAL to detect the locally shared\nprinters. PRINTER_ENUM_DEFAULT: (Win9.x only) enumerates the default\nprinter. PRINTER_ENUM_CONNECTIONS: (WinNT/2000 only) enumerates the printers\nto which the user has made connections. PRINTER_ENUM_NETWORK: (WinNT/2000\nonly) enumerates network printers in the computer&#039;s domain. Only valid\nif `level` is 1. PRINTER_ENUM_REMOTE: (WinNT/2000 only) enumerates network\nprinters and print servers in the computer&#039;s domain. Only valid if\n`level` is 1.\n@param name Used with PRINTER_ENUM_NAME.\n@param level `level` sets the level of information request. Can be 1,2,4 or 5.\n@return (PECL printer SVN)\n
printer_logical_fontheight printer_logical_fontheight(resource $printer_handle,\nint $height) [int]\nGet logical font height. The function calculates the logical font height of\n`height`.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param height The font height.\n@return (PECL printer SVN)\n
printer_open printer_open([string $printername]) [resource]\nOpens a connection to a printer. This function tries to open a connection\nto the given printer. printer_open() also starts a device context.\n@param printername The printer name. If no parameter was given it tries to\nopen a connection to the default printer (if not specified in php.ini as\n`printer.default_printer`, PHP tries to detect it).\n@return (PECL printer SVN)\n
printer_select_brush printer_select_brush(resource $printer_handle, resource\n$brush_handle) [void]\nSelect a brush. The function selects a brush as the active drawing object\nof the actual device context. A brush is used to fill shapes. If you draw\nan rectangle the brush is used to draw the shapes, while the pen is used to\ndraw the border. If you haven&#039;t selected a brush before drawing shapes,\nthe shape won&#039;t be filled.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param brush_handle `brush_handle` must be a valid brush handle.\n@return (PECL printer SVN)\n
printer_select_font printer_select_font(resource $printer_handle, resource\n$font_handle) [void]\nSelect a font. The function selects a font to draw text.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param font_handle `font_handle` must be a valid font handle.\n@return (PECL printer SVN)\n
printer_select_pen printer_select_pen(resource $printer_handle, resource\n$pen_handle) [void]\nSelect a pen. The function selects a pen as the active drawing object of\nthe actual device context. A pen is used to draw lines and curves. I.e. if\nyou draw a single line the pen is used. If you draw an rectangle the pen\nis used to draw the borders, while the brush is used to fill the shape. If\nyou haven&#039;t selected a pen before drawing shapes, the shape won&#039;t\nbe outlined.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param pen_handle `pen_handle` must be a valid pen handle.\n@return (PECL printer SVN)\n
printer_set_option printer_set_option(resource $printer_handle, int $option,\nmixed $value) [bool]\nConfigure the printer connection. The function sets options for the current\nconnection.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param option Option can be one of the following constants:\nPRINTER_COPIES: sets how many copies should be printed, `value` must be\nan integer. PRINTER_MODE: specifies the type of data (text, raw or emf),\n`value` must be a string. PRINTER_TITLE: specifies the name of the document,\n`value` must be a string. PRINTER_ORIENTATION: specifies the orientation\nof the paper, `value` can be either PRINTER_ORIENTATION_PORTRAIT or\nPRINTER_ORIENTATION_LANDSCAPE PRINTER_RESOLUTION_Y: specifies the y-resolution\nin DPI, `value` must be an integer. PRINTER_RESOLUTION_X: specifies the\nx-resolution in DPI, `value` must be an integer. PRINTER_PAPER_FORMAT:\nspecifies a predefined paper format, set `value` to PRINTER_FORMAT_CUSTOM\nif you want to specify a custom format with PRINTER_PAPER_WIDTH\nand PRINTER_PAPER_LENGTH. `value` can be one of the following\nconstants. PRINTER_FORMAT_CUSTOM: let&#039;s you specify a custom paper\nformat. PRINTER_FORMAT_LETTER: specifies standard letter format (8 1/2-\nby 11-inches). PRINTER_FORMAT_LEGAL: specifies standard legal format (8\n1/2- by 14-inches). PRINTER_FORMAT_A3: specifies standard A3 format (297-\nby 420-millimeters). PRINTER_FORMAT_A4: specifies standard A4 format (210-\nby 297-millimeters). PRINTER_FORMAT_A5: specifies standard A5 format (148-\nby 210-millimeters). PRINTER_FORMAT_B4: specifies standard B4 format (250-\nby 354-millimeters). PRINTER_FORMAT_B5: specifies standard B5 format (182-\nby 257-millimeter). PRINTER_FORMAT_FOLIO: specifies standard FOLIO format\n(8 1/2- by 13-inch). PRINTER_PAPER_LENGTH: if PRINTER_PAPER_FORMAT is set to\nPRINTER_FORMAT_CUSTOM, PRINTER_PAPER_LENGTH specifies a custom paper length in\nmm, `value` must be an integer. PRINTER_PAPER_WIDTH: if PRINTER_PAPER_FORMAT\nis set to PRINTER_FORMAT_CUSTOM, PRINTER_PAPER_WIDTH specifies a custom paper\nwidth in mm, `value` must be an integer. PRINTER_SCALE: specifies the factor\nby which the printed output is to be scaled. the page size is scaled from\nthe physical page size by a factor of scale/100. for example if you set the\nscale to 50, the output would be half of its original size. `value` must be\nan integer. PRINTER_BACKGROUND_COLOR: specifies the background color for the\nactual device context, `value` must be a string containing the rgb information\nin hex format i.e. &quot;005533&quot;. PRINTER_TEXT_COLOR: specifies the text\ncolor for the actual device context, `value` must be a string containing the\nrgb information in hex format i.e. &quot;005533&quot;. PRINTER_TEXT_ALIGN:\nspecifies the text alignment for the actual device context, `value` can be\ncombined through OR&#039;ing the following constants: PRINTER_TA_BASELINE: text\nwill be aligned at the base line. PRINTER_TA_BOTTOM: text will be aligned at\nthe bottom. PRINTER_TA_TOP: text will be aligned at the top. PRINTER_TA_CENTER:\ntext will be aligned at the center. PRINTER_TA_LEFT: text will be aligned\nat the left. PRINTER_TA_RIGHT: text will be aligned at the right.\n@param value The `option` value.\n@return (PECL printer SVN)\n
printer_start_doc printer_start_doc(resource $printer_handle [, string\n$document]) [bool]\nStart a new document. The function creates a new document in the printer\nspooler. A document can contain multiple pages, it&#039;s used to schedule\nthe print job in the spooler.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param document The optional parameter `document` can be used to set an\nalternative document name.\n@return (PECL printer SVN)\n
printer_start_page printer_start_page(resource $printer_handle) [bool]\nStart a new page. The function creates a new page in the active document. For\nan example see printer_start_doc().\n@param printer_handle `printer_handle` must be a valid printer handle.\n@return (PECL printer SVN)\n
printer_write printer_write(resource $printer_handle, string $content) [bool]\nWrite data to the printer. Writes `content` directly to the printer.\n@param printer_handle `printer_handle` must be a valid printer handle.\n@param content The data to be written.\n@return (PECL printer SVN)\n
printf printf(string $format [, mixed $args [, mixed $...]]) [int]\nOutput a formatted string.\n@param format See sprintf() for a description of `format`.\n@param args\n@param ...\n@return (PHP 4, PHP 5)\n@see print() - Output a string\n@see sprintf() - Return a formatted string\n@see vprintf() - Output a formatted string\n@see sscanf() - Parses input from a string according to a format\n@see fscanf() - Parses input from a file according to a format\n@see flush() - Flush the output buffer\n
proc_close proc_close(resource $process) [int]\nClose a process opened by proc_open and return the exit code of that\nprocess. proc_close() is similar to pclose() except that it only works\non processes opened by proc_open(). proc_close() waits for the process to\nterminate, and returns its exit code. If you have open pipes to that process,\nyou should fclose() them prior to calling this function in order to avoid a\ndeadlock - the child process may not be able to exit while the pipes are open.\n@param process The proc_open() resource that will be closed.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: Unix Only: proc_close() is internally implemented using\nthe `waitpid(3)` system call. To obtain the real exit status code the\npcntl_wexitstatus() function should be used.\n
PDF_setgray_stroke PDF_setgray_stroke(resource $p, float $g) [bool]\nSet stroke color to gray [deprecated]. Sets the current stroke color to a\ngray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on\nfailure. This function is deprecated since PDFlib version 4, use PDF_setcolor()\ninstead.\n
PDF_setgray PDF_setgray(resource $p, float $g) [bool]\nSet color to gray [deprecated]. Sets the current fill and stroke color to\na gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on\nfailure. This function is deprecated since PDFlib version 4, use PDF_setcolor()\ninstead.\n
PDF_setlinecap PDF_setlinecap(resource $p, int $linecap) [bool]\nSet linecap parameter. Sets the `linecap` parameter to control the shape at\nthe end of a path with respect to stroking.\n
PDF_setlinejoin PDF_setlinejoin(resource $p, int $value) [bool]\nSet linejoin parameter. Sets the `linejoin` parameter to specify the shape\nat the corners of paths that are stroked. Returns TRUE on success or FALSE\non failure.\n
PDF_setlinewidth PDF_setlinewidth(resource $p, float $width) [bool]\nSet line width. Sets the current line width. Returns TRUE on success or\nFALSE on failure.\n
PDF_setmatrix PDF_setmatrix(resource $p, float $a, float $b, float $c,\nfloat $d, float $e, float $f) [bool]\nSet current transformation matrix. Explicitly sets the current transformation\nmatrix. Returns TRUE on success or FALSE on failure.\n
PDF_setmiterlimit PDF_setmiterlimit(resource $pdfdoc, float $miter) [bool]\nSet miter limit. Sets the miter limit.Returns TRUE on success or FALSE\non failure.\n
PDF_setpolydash PDF_setpolydash\nSet complicated dash pattern [deprecated].\n
PDF_setrgbcolor_fill PDF_setrgbcolor_fill(resource $p, float $red, float\n$green, float $blue) [bool]\nSet fill rgb color values [deprecated]. Sets the current fill color to\nthe supplied RGB values. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 4, use PDF_setcolor() instead.\n
PDF_setrgbcolor_stroke PDF_setrgbcolor_stroke(resource $p, float $red,\nfloat $green, float $blue) [bool]\nSet stroke rgb color values [deprecated]. Sets the current stroke color to\nthe supplied RGB values. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 4, use PDF_setcolor() instead.\n
PDF_setrgbcolor PDF_setrgbcolor(resource $p, float $red, float $green,\nfloat $blue) [bool]\nSet fill and stroke rgb color values [deprecated]. Sets the current fill\nand stroke color to the supplied RGB values. Returns TRUE on success or\nFALSE on failure. This function is deprecated since PDFlib version 4, use\nPDF_setcolor() instead.\n
PDF_shading_pattern PDF_shading_pattern(resource $pdfdoc, int $shading,\nstring $optlist) [int]\nDefine shading pattern. Defines a shading pattern using a shading object. This\nfunction requires PDF 1.4 or above.\n
PDF_shading PDF_shading(resource $pdfdoc, string $shtype, float $x0, float\n$y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4,\nstring $optlist) [int]\nDefine blend. Defines a blend from the current fill color to another\ncolor. This function requires PDF 1.4 or above.\n
PDF_shfill PDF_shfill(resource $pdfdoc, int $shading) [bool]\nFill area with shading. Fills an area with a shading, based on a shading\nobject. This function requires PDF 1.4 or above.\n
PDF_show_boxed PDF_show_boxed(resource $p, string $text, float $left, float\n$top, float $width, float $height, string $mode, string $feature) [int]\nOutput text in a box [deprecated]. This function is deprecated since PDFlib\nversion 6, use PDF_fit_textline() for single lines, or the PDF_*_textflow()\nfunctions for multi-line formatting instead.\n
PDF_show_xy PDF_show_xy(resource $p, string $text, float $x, float $y) [bool]\nOutput text at given position. Prints `text` in the current font. Returns\nTRUE on success or FALSE on failure.\n
PDF_show PDF_show(resource $pdfdoc, string $text) [bool]\nOutput text at current position. Prints `text` in the current font and size\nat the current position. Returns TRUE on success or FALSE on failure.\n
PDF_skew PDF_skew(resource $p, float $alpha, float $beta) [bool]\nSkew the coordinate system. Skews the coordinate system in x and y direction\nby `alpha` and `beta` degrees. Returns TRUE on success or FALSE on failure.\n
PDF_stringwidth PDF_stringwidth(resource $p, string $text, int $font, float\n$fontsize) [float]\nReturn width of text. Returns the width of `text` in an arbitrary font.\n
PDF_stroke PDF_stroke(resource $p) [bool]\nStroke path. Strokes the path with the current color and line width, and\nclear it. Returns TRUE on success or FALSE on failure.\n
PDF_suspend_page PDF_suspend_page(resource $pdfdoc, string $optlist) [bool]\nSuspend page. Suspends the current page so that it can later be resumed\nwith PDF_resume_page().\n
PDF_translate PDF_translate(resource $p, float $tx, float $ty) [bool]\nSet origin of coordinate system. Translates the origin of the coordinate\nsystem.\n
PDF_utf16_to_utf8 PDF_utf16_to_utf8(resource $pdfdoc, string $utf16string)\n[string]\nConvert string from UTF-16 to UTF-8. Converts a string from UTF-16 format\nto UTF-8.\n
PDF_utf32_to_utf16 PDF_utf32_to_utf16(resource $pdfdoc, string $utf32string,\nstring $ordering) [string]\nConvert string from UTF-32 to UTF-16. Converts a string from UTF-32 format\nto UTF-16.\n
PDF_utf8_to_utf16 PDF_utf8_to_utf16(resource $pdfdoc, string $utf8string,\nstring $ordering) [string]\nConvert string from UTF-8 to UTF-16. Converts a string from UTF-8 format\nto UTF-16.\n
pgsqlLOBCreate PDO::pgsqlLOBCreate(void) [string]\nCreates a new large object. PDO::pgsqlLOBCreate() creates a large object\nand returns the OID of that object. You may then open a stream on the object\nusing PDO::pgsqlLOBOpen() to read or write data to it. The OID can be stored in\ncolumns of type OID and be used to reference the large object, without causing\nthe row to grow arbitrarily large. The large object will continue to live\nin the database until it is removed by calling PDO::pgsqlLOBUnlink(). Large\nobjects can be up to 2GB in size, but are cumbersome to use; you need to\nensure that PDO::pgsqlLOBUnlink() is called prior to deleting the last row\nthat references its OID from your database. In addition, large objects\nhave no access controls. As an alternative, try the bytea column type;\nrecent versions of PostgreSQL allow bytea columns of up to 1GB in size and\ntransparently manage the storage for optimal row size. Note: This function\nmust be called within a transaction.\n@return (PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2)\n@see PDO::pgsqlLOBOpen() - Opens an existing large object stream\n@see PDO::pgsqlLOBUnlink() - Deletes the large object\n@see pg_lo_create() - Create a large object\n
pgsqlLOBOpen PDO::pgsqlLOBOpen(string $oid [, string $mode=&quot;rb&quot;])\n[resource]\nOpens an existing large object stream. PDO::pgsqlLOBOpen() opens a stream\nto access the data referenced by `oid`. If `mode` is `r`, the stream is\nopened for reading, if `mode` is `w`, then the stream will be opened for\nwriting. You can use all the usual filesystem functions, such as fread(),\nfwrite() and fgets() to manipulate the contents of the stream. Note: This\nfunction, and all manipulations of the large object, must be called and\ncarried out within a transaction.\n@param oid A large object identifier.\n@param mode If mode is `r`, open the stream for reading. If mode is `w`,\nopen the stream for writing.\n@return (PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2)\n@see PDO::pgsqlLOBCreate() - Creates a new large object\n@see PDO::pgsqlLOBUnlink() - Deletes the large object\n@see pg_lo_open() - Open a large object\n
pgsqlLOBUnlink PDO::pgsqlLOBUnlink(string $oid) [bool]\nDeletes the large object. Deletes a large object from the database identified\nby OID. Note: This function must be called within a transaction.\n@param oid A large object identifier\n@return (PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2)\n@see PDO::pgsqlLOBOpen() - Opens an existing large object stream\n@see PDO::pgsqlLOBCreate() - Creates a new large object\n
sqliteCreateAggregate PDO::sqliteCreateAggregate(string $function_name,\ncallback $step_func, callback $finalize_func [, int $num_args]) [bool]\nRegisters an aggregating User Defined Function for use in SQL statements.\n@param function_name The name of the function used in SQL statements.\n@return (PHP 5 >= 5.1.0, PECL pdo_sqlite >= 1.0.0)\n@see PDO::sqliteCreateFunction\n@see sqlite_create_function() - Registers a &quot;regular&quot; User Defined\nFunction for use in SQL statements\n@see sqlite_create_aggregate() - Register an aggregating UDF for use in\nSQL statements\n
sqliteCreateFunction PDO::sqliteCreateFunction(string $function_name,\ncallback $callback [, int $num_args]) [bool]\nRegisters a User Defined Function for use in SQL statements.\n@param function_name The name of the function used in SQL statements.\n@param callback Callback function to handle the defined SQL function. Note:\nCallback functions should return a type understood by SQLite (i.e. scalar\ntype).\n@param num_args Hint to the SQLite parser if the callback function accepts\na predetermined number of arguments.\n@return (PHP 5 >= 5.1.0, PECL pdo_sqlite >= 1.0.0)\n@see PDO::sqliteCreateAggregate\n@see sqlite_create_function() - Registers a &quot;regular&quot; User Defined\nFunction for use in SQL statements\n@see sqlite_create_aggregate() - Register an aggregating UDF for use in\nSQL statements\n
pfsockopen pfsockopen(string $hostname [, int $port=-1 [, int &$errno [, string\n&$errstr [, float $timeout=ini_get(&quot;default_socket_timeout&quot;)]]]])\n[resource]\nOpen persistent Internet or Unix domain socket connection. This function\nbehaves exactly as fsockopen() with the difference that the connection is not\nclosed after the script finishes. It is the persistent version of fsockopen().\n@see fsockopen() - Open Internet or Unix domain socket connection\n
pg_affected_rows pg_affected_rows(resource $result) [int]\nReturns number of affected records (tuples). pg_affected_rows() returns the\nnumber of tuples (instances/records/rows) affected by `INSERT`, `UPDATE`,\nand `DELETE` queries. Note: This function used to be called pg_cmdtuples().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_query() - Execute a query\n@see pg_query_params() - Submits a command to the server and waits for\nthe result, with the ability to pass parameters separately from the SQL\ncommand text.\n@see pg_execute() - Sends a request to execute a prepared statement with\ngiven parameters, and waits for the result.\n@see pg_num_rows() - Returns the number of rows in a result\n
pg_cancel_query pg_cancel_query(resource $connection) [bool]\nCancel an asynchronous query. pg_cancel_query() cancels an asynchronous query\nsent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You\ncannot cancel a query executed using pg_query().\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_send_query() - Sends asynchronous query\n@see pg_connection_busy() - Get connection is busy or not\n
pg_client_encoding pg_client_encoding([resource $connection]) [string]\nGets the client encoding. PostgreSQL supports automatic character\nset conversion between server and client for certain character\nsets. pg_client_encoding() returns the client encoding as a string. The\nreturned string will be one of the standard PostgreSQL encoding\nidentifiers. Note: This function requires PHP 4.0.3 or higher and PostgreSQL\n7.0 or higher. If libpq is compiled without multibyte encoding support,\npg_client_encoding() always returns `SQL_ASCII`. Supported encoding depends\non PostgreSQL version. Refer to the PostgreSQL Documentation supported\nencodings. The function used to be called pg_clientencoding().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see pg_set_client_encoding() - Set the client encoding\n
pg_close pg_close([resource $connection]) [bool]\nCloses a PostgreSQL connection. pg_close() closes the non-persistent\nconnection to a PostgreSQL database associated with the given `connection`\nresource. Note: Using pg_close() is not usually necessary, as non-persistent\nopen connections are automatically closed at the end of the script. If there\nis open large object resource on the connection, do not close the connection\nbefore closing all large object resources.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n
pg_connect pg_connect(string $connection_string [, int $connect_type])\n[resource]\nOpen a PostgreSQL connection. pg_connect() opens a connection to a PostgreSQL\ndatabase specified by the `connection_string`. If a second call is made to\npg_connect() with the same `connection_string` as an existing connection, the\nexisting connection will be returned unless you pass PGSQL_CONNECT_FORCE_NEW\nas `connect_type`. The old syntax with multiple parameters $conn =\npg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;,\n&quot;tty&quot;, &quot;dbname&quot;) has been deprecated.\n@param connection_string The `connection_string` can be empty to use\nall default parameters, or it can contain one or more parameter settings\nseparated by whitespace. Each parameter setting is in the form `keyword =\nvalue`. Spaces around the equal sign are optional. To write an empty value or\na value containing spaces, surround it with single quotes, e.g., `keyword =\n&#039;a value&#039;`. Single quotes and backslashes within the value must\nbe escaped with a backslash, i.e., \&#039; and \\. The currently recognized\nparameter keywords are: `host`, `hostaddr`, `port`, `dbname` (defaults to\nvalue of `user`), `user`, `password`, `connect_timeout`, `options`, `tty`\n(ignored), `sslmode`, `requiressl` (deprecated in favor of `sslmode`),\nand `service`. Which of these arguments exist depends on your PostgreSQL\nversion. The `options` parameter can be used to set command line parameters\nto be invoked by the server.\n@param connect_type If PGSQL_CONNECT_FORCE_NEW is passed, then a new\nconnection is created, even if the `connection_string` is identical to an\nexisting connection.\n@return (PHP 4, PHP 5)\n@see pg_pconnect() - Open a persistent PostgreSQL connection\n@see pg_close() - Closes a PostgreSQL connection\n@see pg_host() - Returns the host name associated with the connection\n@see pg_port() - Return the port number associated with the connection\n@see pg_tty() - Return the TTY name associated with the connection\n@see pg_options() - Get the options associated with the connection\n@see pg_dbname() - Get the database name\n
pg_connection_busy pg_connection_busy(resource $connection) [bool]\nGet connection is busy or not. pg_connection_busy() determines whether or not\na connection is busy. If it is busy, a previous query is still executing. If\npg_get_result() is used on the connection, it will be blocked.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_connection_status() - Get connection status\n@see pg_get_result() - Get asynchronous query result\n
pg_connection_reset pg_connection_reset(resource $connection) [bool]\nReset connection (reconnect). pg_connection_reset() resets the connection. It\nis useful for error recovery.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n@see pg_pconnect() - Open a persistent PostgreSQL connection\n@see pg_connection_status() - Get connection status\n
pg_connection_status pg_connection_status(resource $connection) [int]\nGet connection status. pg_connection_status() returns the status of the\nspecified `connection`.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_connection_busy() - Get connection is busy or not\n
pg_convert pg_convert(resource $connection, string $table_name, array\n$assoc_array [, int $options=0]) [array]\nConvert associative array values into suitable for SQL statement. pg_convert()\nchecks and converts the values in `assoc_array` into suitable values for\nuse in an SQL statement. Precondition for pg_convert() is the existence of\na table `table_name` which has at least as many columns as `assoc_array`\nhas elements. The fieldnames in `table_name` must match the indices in\n`assoc_array` and the corresponding datatypes must be compatible. Returns\nan array with the converted values on success, FALSE otherwise. Note: If\nthere are boolean fields in `table_name` don&#039;t use the constant TRUE in\n`assoc_array`. It will be converted to the string &#039;TRUE&#039; which is\nno valid entry for boolean fields in PostgreSQL. Use one of t, true, 1, y,\nyes instead. This function is EXPERIMENTAL. The behaviour of this function,\nits name, and surrounding documentation may change without notice in a future\nrelease of PHP. This function should be used at your own risk.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table against which to convert types.\n@param assoc_array Data to be converted.\n@param options Any number of PGSQL_CONV_IGNORE_DEFAULT, PGSQL_CONV_FORCE_NULL\nor PGSQL_CONV_IGNORE_NOT_NULL, combined.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_meta_data() - Get meta data for table\n
pg_copy_from pg_copy_from(resource $connection, string $table_name, array\n$rows [, string $delimiter [, string $null_as]]) [bool]\nInsert records into a table from an array. pg_copy_from() inserts records\ninto a table from `rows`. It issues a `COPY FROM` SQL command internally to\ninsert records.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table into which to copy the `rows`.\n@param rows An array of data to be copied into `table_name`. Each value\nin `rows` becomes a row in `table_name`. Each value in `rows` should be a\ndelimited string of the values to insert into each field. Values should be\nlinefeed terminated.\n@param delimiter The token that separates values for each field in each\nelement of `rows`. Default is `TAB`.\n@param null_as How SQL `NULL` values are represented in the `rows`. Default\nis \N (&quot;\\N&quot;).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_copy_to() - Copy a table to an array\n
pg_copy_to pg_copy_to(resource $connection, string $table_name [, string\n$delimiter [, string $null_as]]) [array]\nCopy a table to an array. pg_copy_to() copies a table to an array. It issues\n`COPY TO` SQL command internally to retrieve records.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table from which to copy the data into `rows`.\n@param delimiter The token that separates values for each field in each\nelement of `rows`. Default is `TAB`.\n@param null_as How SQL `NULL` values are represented in the `rows`. Default\nis \N (&quot;\\N&quot;).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_copy_from() - Insert records into a table from an array\n
pg_dbname pg_dbname([resource $connection]) [string]\nGet the database name. pg_dbname() returns the name of the database that\nthe given PostgreSQL `connection` resource.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n
pg_delete pg_delete(resource $connection, string $table_name, array\n$assoc_array [, int $options=PGSQL_DML_EXEC]) [mixed]\nDeletes records. pg_delete() deletes records from a table specified by the\nkeys and values in `assoc_array`. If `options` is specified, pg_convert()\nis applied to `assoc_array` with the specified options.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table from which to delete rows.\n@param assoc_array An array whose keys are field names in the table\n`table_name`, and whose values are the values of those fields that are to\nbe deleted.\n@param options Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV,\nPGSQL_DML_EXEC or PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of\nthe `options` then query string is returned.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_convert() - Convert associative array values into suitable for\nSQL statement\n
pg_end_copy pg_end_copy([resource $connection]) [bool]\nSync with PostgreSQL backend. pg_end_copy() syncs the PostgreSQL frontend\n(usually a web server process) with the PostgreSQL server after doing a\ncopy operation performed by pg_put_line(). pg_end_copy() must be issued,\notherwise the PostgreSQL server may get out of sync with the frontend and\nwill report an error.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see pg_put_line() - Send a NULL-terminated string to PostgreSQL backend\n
pg_escape_bytea pg_escape_bytea([resource $connection], string $data) [string]\nEscape a string for insertion into a bytea field. pg_escape_bytea() escapes\nstring for bytea datatype. It returns escaped string. Note: When you `SELECT`\na bytea type, PostgreSQL returns octal byte values prefixed with &#039;\&#039;\n(e.g. \032). Users are supposed to convert back to binary format manually. This\nfunction requires PostgreSQL 7.2 or later. With PostgreSQL 7.2.0 and 7.2.1,\nbytea values must be cast when you enable multi-byte support. i.e. `INSERT INTO\ntest_table (image) VALUES (&#039;$image_escaped&#039;::bytea);` PostgreSQL\n7.2.2 or later does not need a cast. The exception is when the client and\nbackend character encoding does not match, and there may be multi-byte stream\nerror. User must then cast to bytea to avoid this error.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param data A string containing text or binary data to be inserted into a\nbytea column.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_unescape_bytea() - Unescape binary for bytea type\n@see pg_escape_string() - Escape a string for insertion into a text field\n
pg_escape_string pg_escape_string([resource $connection], string $data)\n[string]\nEscape a string for insertion into a text field. pg_escape_string() escapes\na string for insertion into the database. It returns an escaped string\nin the PostgreSQL format. Use of this function is recommended instead of\naddslashes(). If the type of the column is bytea, pg_escape_bytea() must be\nused instead. Note: This function requires PostgreSQL 7.2 or later.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param data A string containing text to be escaped.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_escape_bytea() - Escape a string for insertion into a bytea field\n
pg_execute pg_execute([resource $connection], string $stmtname, array $params)\n[resource]\nSends a request to execute a prepared statement with given parameters,\nand waits for the result.. Sends a request to execute a prepared statement\nwith given parameters, and waits for the result. pg_execute() is like\npg_query_params(), but the command to be executed is specified by naming\na previously-prepared statement, instead of giving a query string. This\nfeature allows commands that will be used repeatedly to be parsed and planned\njust once, rather than each time they are executed. The statement must have\nbeen prepared previously in the current session. pg_execute() is supported\nonly against PostgreSQL 7.4 or higher connections; it will fail when using\nearlier versions. The parameters are identical to pg_query_params(), except\nthat the name of a prepared statement is given instead of a query string.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param stmtname The name of the prepared statement to execute. if &quot;&quot;\nis specified, then the unnamed statement is executed. The name must have\nbeen previously prepared using pg_prepare(), pg_send_prepare() or a `PREPARE`\nSQL command.\n@return (PHP 5 >= 5.1.0)\n@see pg_prepare() - Submits a request to create a prepared statement with\nthe given parameters, and waits for completion.\n@see pg_send_prepare() - Sends a request to create a prepared statement with\nthe given parameters, without waiting for completion.\n@see pg_query_params() - Submits a command to the server and waits for\nthe result, with the ability to pass parameters separately from the SQL\ncommand text.\n
pg_fetch_all_columns pg_fetch_all_columns(resource $result [, int $column=0])\n[array]\nFetches all rows in a particular result column as an\narray. pg_fetch_all_columns() returns an array that contains all rows (records)\nin a particular column of the result resource. Note: This function sets NULL\nfields to the PHP NULL value.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param column Column number, zero-based, to be retrieved from the result\nresource. Defaults to the first column if not specified.\n@return (PHP 5 >= 5.1.0)\n@see pg_fetch_all() - Fetches all rows from a result as an array\n
pg_fetch_all pg_fetch_all(resource $result) [array]\nFetches all rows from a result as an array. pg_fetch_all() returns an array\nthat contains all rows (records) in the result resource. Note: This function\nsets NULL fields to the PHP NULL value.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_fetch_row() - Get a row as an enumerated array\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_fetch_result() - Returns values from a result resource\n
pg_fetch_array pg_fetch_array(resource $result [, int $row [, int\n$result_type]]) [array]\nFetch a row as an array. pg_fetch_array() returns an array that corresponds\nto the fetched row (record). pg_fetch_array() is an extended version of\npg_fetch_row(). In addition to storing the data in the numeric indices (field\nnumber) to the result array, it can also store the data using associative\nindices (field name). It stores both indicies by default. Note: This function\nsets NULL fields to the PHP NULL value. pg_fetch_array() is NOT significantly\nslower than using pg_fetch_row(), and is significantly easier to use.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted or NULL, the next row is fetched.\n@param result_type An optional parameter that controls how the returned array\nis indexed. `result_type` is a constant and can take the following values:\nPGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH. Using PGSQL_NUM, pg_fetch_array()\nwill return an array with numerical indices, using PGSQL_ASSOC it will\nreturn only associative indices while PGSQL_BOTH, the default, will return\nboth numerical and associative indices.\n@return (PHP 4, PHP 5)\n@see pg_fetch_row() - Get a row as an enumerated array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_fetch_result() - Returns values from a result resource\n
pg_fetch_assoc pg_fetch_assoc(resource $result [, int $row]) [array]\nFetch a row as an associative array. pg_fetch_assoc() returns an associative\narray that corresponds to the fetched row (records). pg_fetch_assoc() is\nequivalent to calling pg_fetch_array() with PGSQL_ASSOC as the optional\nthird parameter. It only returns an associative array. If you need the\nnumeric indices, use pg_fetch_row(). Note: This function sets NULL fields\nto the PHP NULL value. pg_fetch_assoc() is NOT significantly slower than\nusing pg_fetch_row(), and is significantly easier to use.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted or NULL, the next row is fetched.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_fetch_row() - Get a row as an enumerated array\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_fetch_result() - Returns values from a result resource\n
pg_fetch_object pg_fetch_object(resource $result [, int $row [, int\n$result_type=PGSQL_ASSOC]]) [object]\nFetch a row as an object. pg_fetch_object() returns an object with properties\nthat correspond to the fetched row&#039;s field names. It can optionally\ninstantiate an object of a specific class, and pass parameters to that\nclass&#039;s constructor. Note: This function sets NULL fields to the PHP\nNULL value. Speed-wise, the function is identical to pg_fetch_array(),\nand almost as fast as pg_fetch_row() (the difference is insignificant).\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted or NULL, the next row is fetched.\n@param result_type Ignored and deprecated.\n@param class_name The name of the class to instantiate, set the properties\nof and return. If not specified, a stdClass object is returned.\n@param params An optional array of parameters to pass to the constructor for\n`class_name` objects.\n@return (PHP 4, PHP 5)\n@see pg_query() - Execute a query\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_assoc() - Fetch a row as an associative array\n@see pg_fetch_row() - Get a row as an enumerated array\n@see pg_fetch_result() - Returns values from a result resource\n
pg_fetch_result pg_fetch_result(resource $result, int $row, mixed $field)\n[string]\nReturns values from a result resource. pg_fetch_result() returns the value\nof a particular row and field (column) in a PostgreSQL result resource. Note:\nThis function used to be called pg_result().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted, next row is fetched.\n@param field A string representing the name of the field (column) to fetch,\notherwise an int representing the field number to fetch. Fields are numbered\nfrom 0 upwards.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_query() - Execute a query\n@see pg_fetch_array() - Fetch a row as an array\n
pg_fetch_row pg_fetch_row(resource $result [, int $row]) [array]\nGet a row as an enumerated array. pg_fetch_row() fetches one row of data\nfrom the result associated with the specified `result` resource. Note:\nThis function sets NULL fields to the PHP NULL value.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted or NULL, the next row is fetched.\n@return (PHP 4, PHP 5)\n@see pg_query() - Execute a query\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_fetch_result() - Returns values from a result resource\n
pg_field_is_null pg_field_is_null(resource $result, int $row, mixed $field)\n[int]\nTest if a field is SQL NULL. pg_field_is_null() tests if a field in a\nPostgreSQL result resource is SQL `NULL` or not. Note: This function used\nto be called pg_fieldisnull().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result to fetch. Rows are numbered from 0 upwards. If\nomitted, current row is fetched.\n@param field Field number (starting from 0) as an integer or the field name\nas a string.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
pg_field_name pg_field_name(resource $result, int $field_number) [string]\nReturns the name of a field. pg_field_name() returns the name of the\nfield occupying the given `field_number` in the given PostgreSQL `result`\nresource. Field numbering starts from 0. Note: This function used to be\ncalled pg_fieldname().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_number Field number, starting from 0.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_field_num() - Returns the field number of the named field\n
pg_field_num pg_field_num(resource $result, string $field_name) [int]\nReturns the field number of the named field. pg_field_num() will return\nthe number of the field number that corresponds to the `field_name` in the\ngiven PostgreSQL `result` resource. Note: This function used to be called\npg_fieldnum().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_name The name of the field.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_field_name() - Returns the name of a field\n
pg_field_prtlen pg_field_prtlen(resource $result, int $row_number, mixed\n$field_name_or_number) [int]\nReturns the printed length. pg_field_prtlen() returns the actual printed\nlength (number of characters) of a specific value in a PostgreSQL\n`result`. Row numbering starts at 0. This function will return -1 on an\nerror. `field_name_or_number` can be passed either as an integer or as\na string. If it is passed as an integer, PHP recognises it as the field\nnumber, otherwise as field name. See the example given at the pg_field_name()\npage. Note: This function used to be called pg_fieldprtlen().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param row Row number in result. Rows are numbered from 0 upwards. If omitted,\ncurrent row is fetched.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_field_size() - Returns the internal storage size of the named field\n
pg_field_size pg_field_size(resource $result, int $field_number) [int]\nReturns the internal storage size of the named field. pg_field_size()\nreturns the internal storage size (in bytes) of the field number in the given\nPostgreSQL `result`. Note: This function used to be called pg_fieldsize().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_number Field number, starting from 0.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_field_prtlen() - Returns the printed length\n@see pg_field_type() - Returns the type name for the corresponding field number\n
pg_field_table pg_field_table(resource $result, int $field_number [, bool\n$oid_only=false]) [mixed]\nReturns the name or oid of the tables field. pg_field_table() returns the\nname of the table that field belongs to, or the table&#039;s oid if `oid_only`\nis TRUE.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_number Field number, starting from 0.\n@param oid_only By default the tables name that field belongs to is returned\nbut if `oid_only` is set to TRUE, then the oid will instead be returned.\n@return (PHP 5 >= 5.2.0)\n@note Note: Returning the oid is much faster than returning the table name\nbecause fetching the table name requires a query to the database system table.\n@see pg_field_name() - Returns the name of a field\n@see pg_field_type() - Returns the type name for the corresponding field number\n
pg_field_type_oid pg_field_type_oid(resource $result, int $field_number) [int]\nReturns the type ID (OID) for the corresponding field\nnumber. pg_field_type_oid() returns an integer containing the OID of the\nbase type of the given `field_number` in the given PostgreSQL `result`\nresource. You can get more information about the field type by querying\nPostgreSQL&#039;s `pg_type` system table using the OID obtained with this\nfunction. The PostgreSQL format_type() function will convert a type OID\ninto an SQL standard type name. Note: If the field uses a PostgreSQL domain\n(rather than a basic type), it is the OID of the domain&#039;s underlying\ntype that is returned, rather than the OID of the domain itself.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_number Field number, starting from 0.\n@return (PHP 5 >= 5.1.0)\n@see pg_field_type() - Returns the type name for the corresponding field number\n@see pg_field_prtlen() - Returns the printed length\n@see pg_field_name() - Returns the name of a field\n
pg_field_type pg_field_type(resource $result, int $field_number) [string]\nReturns the type name for the corresponding field number. pg_field_type()\nreturns a string containing the base type name of the given `field_number` in\nthe given PostgreSQL `result` resource. Note: If the field uses a PostgreSQL\ndomain (rather than a basic type), it is the name of the domain&#039;s\nunderlying type that is returned, rather than the name of the domain\nitself. Note: This function used to be called pg_fieldtype().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param field_number Field number, starting from 0.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_field_prtlen() - Returns the printed length\n@see pg_field_name() - Returns the name of a field\n@see pg_field_type_oid() - Returns the type ID (OID) for the corresponding\nfield number\n
pg_free_result pg_free_result(resource $result) [bool]\nFree result memory. pg_free_result() frees the memory and data associated with\nthe specified PostgreSQL query result resource. This function need only be\ncalled if memory consumption during script execution is a problem. Otherwise,\nall result memory will be automatically freed when the script ends. Note:\nThis function used to be called pg_freeresult().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_query() - Execute a query\n@see pg_query_params() - Submits a command to the server and waits for\nthe result, with the ability to pass parameters separately from the SQL\ncommand text.\n@see pg_execute() - Sends a request to execute a prepared statement with\ngiven parameters, and waits for the result.\n
pg_get_notify pg_get_notify(resource $connection [, int $result_type]) [array]\nGets SQL NOTIFY message. pg_get_notify() gets notifications generated by a\n`NOTIFY` SQL command. To receive notifications, the `LISTEN` SQL command\nmust be issued.\n@param connection PostgreSQL database connection resource.\n@param result_type An optional parameter that controls how the returned array\nis indexed. `result_type` is a constant and can take the following values:\nPGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH. Using PGSQL_NUM, pg_get_notify()\nwill return an array with numerical indices, using PGSQL_ASSOC it will\nreturn only associative indices while PGSQL_BOTH, the default, will return\nboth numerical and associative indices.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_get_pid() - Gets the backend's process ID\n
pg_get_pid pg_get_pid(resource $connection) [int]\nGets the backend's process ID. pg_get_pid() gets the backend&#039;s (database\nserver process) PID. The PID is useful to determine whether or not a `NOTIFY`\nmessage received via pg_get_notify() is sent from another process or not.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_get_notify() - Gets SQL NOTIFY message\n
pg_get_result pg_get_result([resource $connection]) [resource]\nGet asynchronous query result. pg_get_result() gets the result resource from\nan asynchronous query executed by pg_send_query(), pg_send_query_params() or\npg_send_execute(). pg_send_query() and the other asynchronous query functions\ncan send multiple queries to a PostgreSQL server and pg_get_result() is used\nto get each query&#039;s results, one by one.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_send_query() - Sends asynchronous query\n
pg_host pg_host([resource $connection]) [string]\nReturns the host name associated with the connection. pg_host() returns the\nhost name of the given PostgreSQL `connection` resource is connected to.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n@see pg_pconnect() - Open a persistent PostgreSQL connection\n
pg_insert pg_insert(resource $connection, string $table_name, array\n$assoc_array [, int $options=PGSQL_DML_EXEC]) [mixed]\nInsert array into table. pg_insert() inserts the values of `assoc_array` into\nthe table specified by `table_name`. If `options` is specified, pg_convert()\nis applied to `assoc_array` with the specified options. This function is\nEXPERIMENTAL. The behaviour of this function, its name, and surrounding\ndocumentation may change without notice in a future release of PHP. This\nfunction should be used at your own risk.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table into which to insert rows. The table\n`table_name` must at least have as many columns as `assoc_array` has elements.\n@param assoc_array An array whose keys are field names in the table\n`table_name`, and whose values are the values of those fields that are to\nbe inserted.\n@param options Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV,\nPGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If\nPGSQL_DML_STRING is part of the `options` then query string is returned.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_convert() - Convert associative array values into suitable for\nSQL statement\n
pg_last_error pg_last_error([resource $connection]) [string]\nGet the last error message string of a connection. pg_last_error()\nreturns the last error message for a given `connection`. Error messages\nmay be overwritten by internal PostgreSQL (libpq) function calls. It may\nnot return an appropriate error message if multiple errors occur inside a\nPostgreSQL module function. Use pg_result_error(), pg_result_error_field(),\npg_result_status() and pg_connection_status() for better error handling. Note:\nThis function used to be called pg_errormessage().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_result_error() - Get error message associated with result\n@see pg_result_error_field() - Returns an individual field of an error report.\n
pg_last_notice pg_last_notice(resource $connection) [string]\nReturns the last notice message from PostgreSQL server. pg_last_notice()\nreturns the last notice message from the PostgreSQL server on the specified\n`connection`. The PostgreSQL server sends notice messages in several cases,\nfor instance when creating a `SERIAL` column in a table. With pg_last_notice(),\nyou can avoid issuing useless queries by checking whether or not the notice is\nrelated to your transaction. Notice message tracking can be set to optional\nby setting 1 for `pgsql.ignore_notice` in php.ini. Notice message logging\ncan be set to optional by setting 0 for `pgsql.log_notice` in php.ini. Unless\n`pgsql.ignore_notice` is set to 0, notice message cannot be logged.\n@param connection PostgreSQL database connection resource.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see pg_query() - Execute a query\n@see pg_last_error() - Get the last error message string of a connection\n
pg_last_oid pg_last_oid(resource $result) [string]\nReturns the last row's OID. pg_last_oid() is used to retrieve the OID assigned\nto an inserted row. OID field became an optional field from PostgreSQL 7.2 and\nwill not be present by default in PostgreSQL 8.1. When the OID field is not\npresent in a table, the programmer must use pg_result_status() to check for\nsuccessful insertion. To get the value of a `SERIAL` field in an inserted row,\nit is necessary to use the PostgreSQL `CURRVAL` function, naming the sequence\nwhose last value is required. If the name of the sequence is unknown, the\n`pg_get_serial_sequence` PostgreSQL 8.0 function is necessary. PostgreSQL\n8.1 has a function `LASTVAL` that returns the value of the most recently used\nsequence in the session. This avoids the need for naming the sequence, table\nor column altogether. Note: This function used to be called pg_getlastoid().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_query() - Execute a query\n@see pg_result_status() - Get status of query result\n
pg_lo_close pg_lo_close(resource $large_object) [bool]\nClose a large object. pg_lo_close() closes a large object. `large_object` is\na resource for the large object from pg_lo_open(). To use the large object\ninterface, it is necessary to enclose it within a transaction block. Note:\nThis function used to be called pg_loclose().\n@param result PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_open() - Open a large object\n@see pg_lo_create() - Create a large object\n@see pg_lo_import() - Import a large object from file\n
pg_lo_create pg_lo_create([resource $connection [, mixed $object_id]]) [int]\nCreate a large object. pg_lo_create() creates a large object and returns\nthe OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE,\nand INV_ARCHIVE are not supported, the object is created always with\nboth read and write access. INV_ARCHIVE has been removed from PostgreSQL\nitself (version 6.3 and above). To use the large object interface, it is\nnecessary to enclose it within a transaction block. Instead of using the\nlarge object interface (which has no access controls and is cumbersome to\nuse), try PostgreSQL&#039;s bytea column type and pg_escape_bytea(). Note:\nThis function used to be called pg_locreate().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param object_id If an `object_id` is given the function will try to create a\nlarge object with this id, else a free object id is assigned by the server. The\nparameter was added in PHP 5.3 and relies on functionality that first appeared\nin PostgreSQL 8.1.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
pg_lo_export pg_lo_export([resource $connection], int $oid, string $pathname)\n[bool]\nExport a large object to file. pg_lo_export() takes a large object\nin a PostgreSQL database and saves its contents to a file on the local\nfilesystem. To use the large object interface, it is necessary to enclose\nit within a transaction block. Note: This function used to be called\npg_loexport().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param oid The OID of the large object in the database.\n@param pathname The full path and file name of the file in which to write\nthe large object on the client filesystem.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_import() - Import a large object from file\n
pg_lo_import pg_lo_import([resource $connection], string $pathname [, mixed\n$object_id]) [int]\nImport a large object from file. pg_lo_import() creates a new large object in\nthe database using a file on the filesystem as its data source. To use the\nlarge object interface, it is necessary to enclose it within a transaction\nblock. Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed. Note: This function used to be called pg_loimport().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param pathname The full path and file name of the file on the client\nfilesystem from which to read the large object data.\n@param object_id If an `object_id` is given the function will try to create a\nlarge object with this id, else a free object id is assigned by the server. The\nparameter was added in PHP 5.3 and relies on functionality that first appeared\nin PostgreSQL 8.1.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_export() - Export a large object to file\n@see pg_lo_open() - Open a large object\n
pg_lo_open pg_lo_open(resource $connection, int $oid, string $mode) [resource]\nOpen a large object. pg_lo_open() opens a large object in the database and\nreturns large object resource so that it can be manipulated. Do not close\nthe database connection before closing the large object resource.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param oid The OID of the large object in the database.\n@param mode Can be either &quot;r&quot; for read-only, &quot;w&quot; for\nwrite only or &quot;rw&quot; for read and write.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_close() - Close a large object\n@see pg_lo_create() - Create a large object\n
pg_lo_read_all pg_lo_read_all(resource $large_object) [int]\nReads an entire large object and send straight to browser. pg_lo_read_all()\nreads a large object and passes it straight through to the browser after\nsending all pending headers. Mainly intended for sending binary data\nlike images or sound. To use the large object interface, it is necessary\nto enclose it within a transaction block. Note: This function used to be\ncalled pg_loreadall().\n@param large_object PostgreSQL large object (LOB) resource, returned by\npg_lo_open().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_read() - Read a large object\n
pg_lo_read pg_lo_read(resource $large_object [, int $len=8192]) [string]\nRead a large object. pg_lo_read() reads at most `len` bytes from a large\nobject and returns it as a string. To use the large object interface, it is\nnecessary to enclose it within a transaction block. Note: This function used\nto be called pg_loread().\n@param large_object PostgreSQL large object (LOB) resource, returned by\npg_lo_open().\n@param len An optional maximum number of bytes to return.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_read_all() - Reads an entire large object and send straight\nto browser\n
pg_lo_seek pg_lo_seek(resource $large_object, int $offset [, int\n$whence=PGSQL_SEEK_CUR]) [bool]\nSeeks position within a large object. pg_lo_seek() seeks a position within\na large object resource. To use the large object interface, it is necessary\nto enclose it within a transaction block.\n@param large_object PostgreSQL large object (LOB) resource, returned by\npg_lo_open().\n@param offset The number of bytes to seek.\n@param whence One of the constants PGSQL_SEEK_SET (seek from object start),\nPGSQL_SEEK_CUR (seek from current position) or PGSQL_SEEK_END (seek from\nobject end) .\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_tell() - Returns current seek position a of large object\n
pg_lo_tell pg_lo_tell(resource $large_object) [int]\nReturns current seek position a of large object. pg_lo_tell() returns the\ncurrent position (offset from the beginning) of a large object. To use the\nlarge object interface, it is necessary to enclose it within a transaction\nblock.\n@param large_object PostgreSQL large object (LOB) resource, returned by\npg_lo_open().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_seek() - Seeks position within a large object\n
pg_lo_unlink pg_lo_unlink(resource $connection, int $oid) [bool]\nDelete a large object. pg_lo_unlink() deletes a large object with the\n`oid`. Returns TRUE on success or FALSE on failure. To use the large object\ninterface, it is necessary to enclose it within a transaction block. Note:\nThis function used to be called pg_lounlink().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param oid The OID of the large object in the database.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_create() - Create a large object\n@see pg_lo_import() - Import a large object from file\n
pg_lo_write pg_lo_write(resource $large_object, string $data [, int $len])\n[int]\nWrite to a large object. pg_lo_write() writes data into a large object at the\ncurrent seek position. To use the large object interface, it is necessary\nto enclose it within a transaction block. Note: This function used to be\ncalled pg_lowrite().\n@param large_object PostgreSQL large object (LOB) resource, returned by\npg_lo_open().\n@param data The data to be written to the large object. If `len` is specified\nand is less than the length of `data`, only `len` bytes will be written.\n@param len An optional maximum number of bytes to write. Must be greater\nthan zero and no greater than the length of `data`. Defaults to the length of\n`data`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_lo_create() - Create a large object\n@see pg_lo_open() - Open a large object\n
pg_meta_data pg_meta_data(resource $connection, string $table_name) [array]\nGet meta data for table. pg_meta_data() returns table definition for\n`table_name` as an array. This function is EXPERIMENTAL. The behaviour of this\nfunction, its name, and surrounding documentation may change without notice\nin a future release of PHP. This function should be used at your own risk.\n@param connection PostgreSQL database connection resource.\n@param table_name The name of the table.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_convert() - Convert associative array values into suitable for\nSQL statement\n
pg_num_fields pg_num_fields(resource $result) [int]\nReturns the number of fields in a result. pg_num_fields() returns the number\nof fields (columns) in a PostgreSQL result resource. Note: This function\nused to be called pg_numfields().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_num_rows() - Returns the number of rows in a result\n@see pg_affected_rows() - Returns number of affected records (tuples)\n
pg_num_rows pg_num_rows(resource $result) [int]\nReturns the number of rows in a result. pg_num_rows() will return the number\nof rows in a PostgreSQL result resource. Note: This function used to be\ncalled pg_numrows().\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_num_fields() - Returns the number of fields in a result\n@see pg_affected_rows() - Returns number of affected records (tuples)\n
pg_options pg_options([resource $connection]) [string]\nGet the options associated with the connection. pg_options() will return a\nstring containing the options specified on the given PostgreSQL `connection`\nresource.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n
pg_parameter_status pg_parameter_status([resource $connection], string\n$param_name) [string]\nLooks up a current parameter setting of the server.. Looks up a current\nparameter setting of the server. Certain parameter values are reported by\nthe server automatically at connection startup or whenever their values\nchange. pg_parameter_status() can be used to interrogate these settings. It\nreturns the current value of a parameter if known, or FALSE if the parameter is\nnot known. Parameters reported as of PostgreSQL 8.0 include `server_version`,\n`server_encoding`, `client_encoding`, `is_superuser`, `session_authorization`,\n`DateStyle`, `TimeZone`, and `integer_datetimes`. (`server_encoding`,\n`TimeZone`, and `integer_datetimes` were not reported by releases before\n8.0.) Note that `server_version`, `server_encoding` and `integer_datetimes`\ncannot change after PostgreSQL startup. PostgreSQL 7.3 or lower servers do\nnot report parameter settings, pg_parameter_status() includes logic to obtain\nvalues for `server_version` and `client_encoding` anyway. Applications are\nencouraged to use pg_parameter_status() rather than ad hoc code to determine\nthese values. On a pre-7.4 PostgreSQL server, changing `client_encoding` via\n`SET` after connection startup will not be reflected by pg_parameter_status().\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param param_name Possible `param_name` values include `server_version`,\n`server_encoding`, `client_encoding`, `is_superuser`, `session_authorization`,\n`DateStyle`, `TimeZone`, and `integer_datetimes`.\n@return (PHP 5)\n
pg_pconnect pg_pconnect(string $connection_string [, int $connect_type])\n[resource]\nOpen a persistent PostgreSQL connection. pg_pconnect() opens a connection to a\nPostgreSQL database. It returns a connection resource that is needed by other\nPostgreSQL functions. If a second call is made to pg_pconnect() with the same\n`connection_string` as an existing connection, the existing connection will\nbe returned unless you pass PGSQL_CONNECT_FORCE_NEW as `connect_type`. To\nenable persistent connection, the pgsql.allow_persistent php.ini directive\nmust be set to &quot;On&quot; (which is the default). The maximum number of\npersistent connection can be defined with the pgsql.max_persistent php.ini\ndirective (defaults to -1 for no limit). The total number of connections\ncan be set with the pgsql.max_links php.ini directive. pg_close() will not\nclose persistent links generated by pg_pconnect().\n@param connection_string The `connection_string` can be empty to use\nall default parameters, or it can contain one or more parameter settings\nseparated by whitespace. Each parameter setting is in the form `keyword\n= value`. Spaces around the equal sign are optional. To write an empty\nvalue or a value containing spaces, surround it with single quotes, e.g.,\n`keyword = &#039;a value&#039;`. Single quotes and backslashes within the\nvalue must be escaped with a backslash, i.e., \&#039; and \\. The currently\nrecognized parameter keywords are: `host`, `hostaddr`, `port`, `dbname`,\n`user`, `password`, `connect_timeout`, `options`, `tty` (ignored), `sslmode`,\n`requiressl` (deprecated in favor of `sslmode`), and `service`. Which of\nthese arguments exist depends on your PostgreSQL version.\n@param connect_type If PGSQL_CONNECT_FORCE_NEW is passed, then a new\nconnection is created, even if the `connection_string` is identical to an\nexisting connection.\n@return (PHP 4, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n@see Persistent Database Connections\n
pg_ping pg_ping([resource $connection]) [bool]\nPing database connection. pg_ping() pings a database connection and tries\nto reconnect it if it is broken.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_connection_status() - Get connection status\n@see pg_connection_reset() - Reset connection (reconnect)\n
pg_port pg_port([resource $connection]) [int]\nReturn the port number associated with the connection. pg_port() returns the\nport number that the given PostgreSQL `connection` resource is connected to.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@return (PHP 4, PHP 5)\n
pg_prepare pg_prepare([resource $connection], string $stmtname, string $query)\n[resource]\nSubmits a request to create a prepared statement with the \n  given parameters, and waits for completion.. pg_prepare() creates a prepared\n  statement for later execution with pg_execute() or pg_send_execute(). This\n  feature allows commands that will be used repeatedly to be parsed and planned\n  just once, rather than each time they are executed. pg_prepare() is supported\n  only against PostgreSQL 7.4 or higher connections; it will fail when using\n  earlier versions. The function creates a prepared statement named `stmtname`\n  from the `query` string, which must contain a single SQL command. `stmtname`\n  may be &quot;&quot; to create an unnamed statement, in which case any\n  pre-existing unnamed statement is automatically replaced; otherwise it is an\n  error if the statement name is already defined in the current session. If\n  any parameters are used, they are referred to in the `query` as $1, $2,\n  etc. Prepared statements for use with pg_prepare() can also be created by\n  executing SQL `PREPARE` statements. (But pg_prepare() is more flexible\n  since it does not require parameter types to be pre-specified.) Also,\n  although there is no PHP function for deleting a prepared statement,\n  the SQL `DEALLOCATE` statement can be used for that purpose.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param stmtname The name to give the prepared statement. Must be unique\nper-connection. If &quot;&quot; is specified, then an unnamed statement is\ncreated, overwriting any previously defined unnamed statement.\n@param query The parameterized SQL statement. Must contain only a single\nstatement. (multiple statements separated by semi-colons are not allowed.) If\nany parameters are used, they are referred to as $1, $2, etc.\n@return (PHP 5 >= 5.1.0)\n@see pg_execute() - Sends a request to execute a prepared statement with\ngiven parameters, and waits for the result.\n@see pg_send_execute() - Sends a request to execute a prepared statement\nwith given parameters, without waiting for the result(s).\n
pg_put_line pg_put_line([resource $connection], string $data) [bool]\nSend a NULL-terminated string to PostgreSQL backend. pg_put_line() sends a\nNULL-terminated string to the PostgreSQL backend server. This is needed in\nconjunction with PostgreSQL&#039;s `COPY FROM` command. `COPY` is a high-speed\ndata loading interface supported by PostgreSQL. Data is passed in without being\nparsed, and in a single transaction. An alternative to using raw pg_put_line()\ncommands is to use pg_copy_from(). This is a far simpler interface. Note:\nThe application must explicitly send the two characters &quot;\.&quot; on the\nlast line to indicate to the backend that it has finished sending its data,\nbefore issuing pg_end_copy(). Use of the pg_put_line() causes most large\nobject operations, including pg_lo_read() and pg_lo_tell(), to subsequently\nfail. You can use pg_copy_from() and pg_copy_to() instead.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param data A line of text to be sent directly to the PostgreSQL backend. A\n`NULL` terminator is added automatically.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see pg_end_copy() - Sync with PostgreSQL backend\n
pg_query_params pg_query_params([resource $connection], string $query,\narray $params) [resource]\nSubmits a command to the server and waits for the result, with the ability\nto pass parameters separately from the SQL command text.. Submits a command\nto the server and waits for the result, with the ability to pass parameters\nseparately from the SQL command text. pg_query_params() is like pg_query(),\nbut offers additional functionality: parameter values can be specified\nseparately from the command string proper. pg_query_params() is supported\nonly against PostgreSQL 7.4 or higher connections; it will fail when using\nearlier versions. If parameters are used, they are referred to in the\n`query` string as $1, $2, etc. `params` specifies the actual values of the\nparameters. A NULL value in this array means the corresponding parameter is\nSQL `NULL`. The primary advantage of pg_query_params() over pg_query() is\nthat parameter values may be separated from the `query` string, thus avoiding\nthe need for tedious and error-prone quoting and escaping. Unlike pg_query(),\npg_query_params() allows at most one SQL command in the given string. (There\ncan be semicolons in it, but not more than one nonempty command.)\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param query The parameterized SQL statement. Must contain only a single\nstatement. (multiple statements separated by semi-colons are not allowed.) If\nany parameters are used, they are referred to as $1, $2, etc.\n@param params An array of parameter values to substitute for the $1, $2,\netc. placeholders in the original prepared query string. The number of\nelements in the array must match the number of placeholders.\n@return (PHP 5 >= 5.1.0)\n@see pg_query() - Execute a query\n
pg_query pg_query([resource $connection], string $query) [resource]\nExecute a query. pg_query() executes the `query` on the specified database\n`connection`. If an error occurs, and FALSE is returned, details of the error\ncan be retrieved using the pg_last_error() function if the connection is\nvalid. Note: Although `connection` can be omitted, it is not recommended,\nsince it can be the cause of hard to find bugs in scripts.  Note: This\nfunction used to be called pg_exec(). pg_exec() is still available for\ncompatibility reasons, but users are encouraged to use the newer name.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param query The SQL statement or statements to be executed. When multiple\nstatements are passed to the function, they are automatically executed as\none transaction, unless there are explicit BEGIN/COMMIT commands included\nin the query string. However, using multiple transactions in one function\ncall is not recommended. Data inside the query should be properly escaped.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_connect() - Open a PostgreSQL connection\n@see pg_pconnect() - Open a persistent PostgreSQL connection\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_num_rows() - Returns the number of rows in a result\n@see pg_affected_rows() - Returns number of affected records (tuples)\n
pg_result_error_field pg_result_error_field(resource $result, int $fieldcode)\n[string]\nReturns an individual field of an error report.. pg_result_error_field()\nreturns one of the detailed error message fields associated with `result`\nresource. It is only available against a PostgreSQL 7.4 or above server. The\nerror field is specified by the `fieldcode`. Because pg_query() and\npg_query_params() return FALSE if the query fails, you must use pg_send_query()\nand pg_get_result() to get the result handle. If you need to get additional\nerror information from failed pg_query() queries, use pg_set_error_verbosity()\nand pg_last_error() and then parse the result.\n@param result A PostgreSQL query result resource from a previously executed\nstatement.\n@param fieldcode Possible `fieldcode` values are: PGSQL_DIAG_SEVERITY,\nPGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL,\nPGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,\nPGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only), PGSQL_DIAG_INTERNAL_QUERY\n(PostgreSQL 8.0+ only), PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE,\nPGSQL_DIAG_SOURCE_LINE or PGSQL_DIAG_SOURCE_FUNCTION.\n@return (PHP 5 >= 5.1.0)\n@see pg_result_error() - Get error message associated with result\n
pg_result_error pg_result_error(resource $result) [string]\nGet error message associated with result. pg_result_error() returns any error\nmessage associated with the `result` resource. Therefore, the user has a better\nchance of getting the correct error message than with pg_last_error(). The\nfunction pg_result_error_field() can give much greater detail on result errors\nthan pg_result_error(). Because pg_query() returns FALSE if the query fails,\nyou must use pg_send_query() and pg_get_result() to get the result handle.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_result_error_field() - Returns an individual field of an error report.\n@see pg_query() - Execute a query\n@see pg_send_query() - Sends asynchronous query\n@see pg_get_result() - Get asynchronous query result\n@see pg_last_error() - Get the last error message string of a connection\n@see pg_last_notice() - Returns the last notice message from PostgreSQL server\n
pg_result_seek pg_result_seek(resource $result, int $offset) [bool]\nSet internal row offset in result resource. pg_result_seek() sets the internal\nrow offset in a result resource.\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param offset Row to move the internal offset to in the `result` resource. Rows\nare numbered starting from zero.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_fetch_row() - Get a row as an enumerated array\n@see pg_fetch_assoc() - Fetch a row as an associative array\n@see pg_fetch_array() - Fetch a row as an array\n@see pg_fetch_object() - Fetch a row as an object\n@see pg_fetch_result() - Returns values from a result resource\n
pg_result_status pg_result_status(resource $result [, int $type]) [mixed]\nGet status of query result. pg_result_status() returns the status of a result\nresource, or the PostgreSQL command completion tag associated with the result\n@param result PostgreSQL query result resource, returned by pg_query(),\npg_query_params() or pg_execute() (among others).\n@param type Either PGSQL_STATUS_LONG to return the numeric status of the\n`result`, or PGSQL_STATUS_STRING to return the command tag of the `result`. If\nnot specified, PGSQL_STATUS_LONG is the default.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_connection_status() - Get connection status\n
pg_select pg_select(resource $connection, string $table_name, array\n$assoc_array [, int $options=PGSQL_DML_EXEC]) [mixed]\nSelect records. pg_select() selects records specified by `assoc_array` which\nhas `field=>value`. For a successful query, it returns an array containing all\nrecords and fields that match the condition specified by `assoc_array`. If\n`options` is specified, pg_convert() is applied to `assoc_array` with\nthe specified flags. This function is EXPERIMENTAL. The behaviour of this\nfunction, its name, and surrounding documentation may change without notice\nin a future release of PHP. This function should be used at your own risk.\n@param connection PostgreSQL database connection resource.\n@param table_name Name of the table from which to select rows.\n@param assoc_array An array whose keys are field names in the table\n`table_name`, and whose values are the conditions that a row must meet to\nbe retrieved.\n@param options Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV,\nPGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If\nPGSQL_DML_STRING is part of the `options` then query string is returned.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see pg_convert() - Convert associative array values into suitable for\nSQL statement\n
pg_send_execute pg_send_execute(resource $connection, string $stmtname,\narray $params) [bool]\nSends a request to execute a prepared statement with given parameters, without\nwaiting for the result(s).. Sends a request to execute a prepared statement\nwith given parameters, without waiting for the result(s). This is similar\nto pg_send_query_params(), but the command to be executed is specified by\nnaming a previously-prepared statement, instead of giving a query string. The\nfunction&#039;s parameters are handled identically to pg_execute(). Like\npg_execute(), it will not work on pre-7.4 versions of PostgreSQL.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param stmtname The name of the prepared statement to execute. if &quot;&quot;\nis specified, then the unnamed statement is executed. The name must have\nbeen previously prepared using pg_prepare(), pg_send_prepare() or a `PREPARE`\nSQL command.\n@param params An array of parameter values to substitute for the $1, $2,\netc. placeholders in the original prepared query string. The number of\nelements in the array must match the number of placeholders.\n@return (PHP 5 >= 5.1.0)\n@see pg_prepare() - Submits a request to create a prepared statement with\nthe given parameters, and waits for completion.\n@see pg_send_prepare() - Sends a request to create a prepared statement with\nthe given parameters, without waiting for completion.\n@see pg_execute() - Sends a request to execute a prepared statement with\ngiven parameters, and waits for the result.\n
pg_send_prepare pg_send_prepare(resource $connection, string $stmtname,\nstring $query) [bool]\nSends a request to create a prepared statement with the given parameters,\nwithout waiting for completion.. Sends a request to create a prepared\nstatement with the given parameters, without waiting for completion. This\nis an asynchronous version of pg_prepare(): it returns TRUE if it was able\nto dispatch the request, and FALSE if not. After a successful call, call\npg_get_result() to determine whether the server successfully created the\nprepared statement. The function&#039;s parameters are handled identically\nto pg_prepare(). Like pg_prepare(), it will not work on pre-7.4 versions\nof PostgreSQL.\n@param connection PostgreSQL database connection resource. When `connection`\nis not present, the default connection is used. The default connection is\nthe last connection made by pg_connect() or pg_pconnect().\n@param stmtname The name to give the prepared statement. Must be unique\nper-connection. If &quot;&quot; is specified, then an unnamed statement is\ncreated, overwriting any previously defined unnamed statement.\n@param query The parameterized SQL statement. Must contain only a single\nstatement. (multiple statements separated by semi-colons are not allowed.) If\nany parameters are used, they are referred to as $1, $2, etc.\n@return (PHP 5 >= 5.1.0)\n@see pg_connect() - Open a PostgreSQL connection\n@see pg_pconnect() - Open a persistent PostgreSQL connection\n@see pg_execute() - Sends a request to execute a prepared statement with\ngiven parameters, and waits for the result.\n@see pg_send_execute() - Sends a request to execute a prepared statement\nwith given parameters, without waiting for the result(s).\n@see pg_send_query_params() - Submits a command and separate parameters to\nthe server without waiting for the result(s).\n
pg_send_query_params pg_send_query_params(resource $connection, string $query,\narray $params) [bool]\nSubmits a command and separate parameters to the server without waiting for the\nresult(s).. Submits a command and separate parameters to the server without\nwaiting for the result(s). This is equivalent to pg_send_query() except that\nquery parameters can be specified separately from the `query` string. The\nfunction&#039;s parameters are handled identically to pg_query_params(). Like\npg_query_params(), it will not work on pre-7.4 PostgreSQL connections,\nand it allows only one command in the query string.\n@param connection PostgreSQL database connection resource.\n@param query The parameterized SQL statement. Must contain only a single\nstatement. (multiple statements separated by semi-colons are not allowed.) If\nany parameters are used, they are referred to as $1, $2, etc.\n@param params An array of parameter values to substitute for the $1, $2,\netc. placeholders in the original prepared query string. The number of\nelements in the array must match the number of placeholders.\n@return (PHP 5 >= 5.1.0)\n@see pg_send_query() - Sends asynchronous query\n
pg_send_query pg_send_query(resource $connection, string $query) [bool]\nSends asynchronous query. pg_send_query() sends a query or queries\nasynchronously to the `connection`. Unlike pg_query(), it can send\nmultiple queries at once to PostgreSQL and get the results one by one\nusing pg_get_result(). Script execution is not blocked while the queries\nare executing. Use pg_connection_busy() to check if the connection\nis busy (i.e. the query is executing). Queries may be cancelled using\npg_cancel_query(). Although the user can send multiple queries at once,\nmultiple queries cannot be sent over a busy connection. If a query is sent\nwhile the connection is busy, it waits until the last query is finished and\ndiscards all its results.\n@param connection PostgreSQL database connection resource.\n@param query The SQL statement or statements to be executed. Data inside\nthe query should be properly escaped.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see pg_query() - Execute a query\n@see pg_cancel_query() - Cancel an asynchronous query\n@see pg_get_result() - Get asynchronous query result\n@see pg_connection_busy() - Get connection is busy or not\n
PDF_delete_textflow PDF_delete_textflow(resource $pdfdoc, int $textflow) [bool]\nDelete textflow object. Deletes a textflow and the associated data structures.\n
PDF_delete PDF_delete(resource $pdfdoc) [bool]\nDelete PDFlib object. Deletes a PDFlib object, and frees all internal\nresources. Returns TRUE on success or FALSE on failure.\n
PDF_encoding_set_char PDF_encoding_set_char(resource $pdfdoc, string $encoding,\nint $slot, string $glyphname, int $uv) [bool]\nAdd glyph name and/or Unicode value. Adds a glyph name and/or Unicode value\nto a custom encoding.\n
PDF_end_document PDF_end_document(resource $pdfdoc, string $optlist) [bool]\nClose PDF file. Closes the generated PDF file and applies various options.\n
PDF_end_font PDF_end_font(resource $pdfdoc) [bool]\nTerminate Type 3 font definition. Terminates a Type 3 font definition.\n
PDF_end_glyph PDF_end_glyph(resource $pdfdoc) [bool]\nTerminate glyph definition for Type 3 font. Terminates a glyph definition\nfor a Type 3 font.\n
PDF_end_item PDF_end_item(resource $pdfdoc, int $id) [bool]\nClose structure element or other content item. Closes a structure element\nor other content item.\n
PDF_end_layer PDF_end_layer(resource $pdfdoc) [bool]\nDeactivate all active layers. Deactivates all active layers. Returns TRUE\non success or FALSE on failure. This function requires PDF 1.5.\n
PDF_end_page_ext PDF_end_page_ext(resource $pdfdoc, string $optlist) [bool]\nFinish page. Finishes a page, and applies various options. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_end_page PDF_end_page(resource $p) [bool]\nFinish page. Finishes the page. Returns TRUE on success or FALSE on failure.\n
PDF_end_pattern PDF_end_pattern(resource $p) [bool]\nFinish pattern. Finishes the pattern definition. Returns TRUE on success or\nFALSE on failure.\n
PDF_end_template PDF_end_template(resource $p) [bool]\nFinish template. Finishes a template definition. Returns TRUE on success or\nFALSE on failure.\n
PDF_endpath PDF_endpath(resource $p) [bool]\nEnd current path. Ends the current path without filling or stroking it.\n
PDF_fill_imageblock PDF_fill_imageblock(resource $pdfdoc, int $page, string\n$blockname, int $image, string $optlist) [int]\nFill image block with variable data. Fills an image block with variable data\naccording to its properties. This function is only available in the PDFlib\nPersonalization Server (PPS).\n
PDF_fill_pdfblock PDF_fill_pdfblock(resource $pdfdoc, int $page, string\n$blockname, int $contents, string $optlist) [int]\nFill PDF block with variable data. Fills a PDF block with variable data\naccording to its properties. This function is only available in the PDFlib\nPersonalization Server (PPS).\n
PDF_fill_stroke PDF_fill_stroke(resource $p) [bool]\nFill and stroke path. Fills and strokes the current path with the current\nfill and stroke color. Returns TRUE on success or FALSE on failure.\n
PDF_fill_textblock PDF_fill_textblock(resource $pdfdoc, int $page, string\n$blockname, string $text, string $optlist) [int]\nFill text block with variable data. Fills a text block with variable data\naccording to its properties. This function is only available in the PDFlib\nPersonalization Server (PPS).\n
PDF_fill PDF_fill(resource $p) [bool]\nFill current path. Fills the interior of the current path with the current\nfill color. Returns TRUE on success or FALSE on failure.\n
PDF_findfont PDF_findfont(resource $p, string $fontname, string $encoding,\nint $embed) [int]\nPrepare font for later use [deprecated]. Search for a font and prepare it\nfor later use with PDF_setfont(). The metrics will be loaded, and if `embed`\nis nonzero, the font file will be checked, but not yet used. `encoding`\nis one of `builtin`, `macroman`, `winansi`, `host`, a user-defined encoding\nname or the name of a CMap. Parameter `embed` is optional before PHP 4.3.5 or\nwith PDFlib less than 5. This function is deprecated since PDFlib version 5,\nuse PDF_load_font() instead.\n
PDF_fit_image PDF_fit_image(resource $pdfdoc, int $image, float $x, float $y,\nstring $optlist) [bool]\nPlace image or template. Places an image or template on the page, subject\nto various options. Returns TRUE on success or FALSE on failure.\n
PDF_fit_pdi_page PDF_fit_pdi_page(resource $pdfdoc, int $page, float $x,\nfloat $y, string $optlist) [bool]\nPlace imported PDF page. Places an imported PDF page on the page, subject\nto various options. Returns TRUE on success or FALSE on failure.\n
PDF_fit_table PDF_fit_table(resource $pdfdoc, int $table, float $llx, float\n$lly, float $urx, float $ury, string $optlist) [string]\nPlace table on page. Places a table on the page fully or partially.\n
PDF_fit_textflow PDF_fit_textflow(resource $pdfdoc, int $textflow, float $llx,\nfloat $lly, float $urx, float $ury, string $optlist) [string]\nFormat textflow in rectangular area. Formats the next portion of a textflow\ninto a rectangular area.\n
PDF_fit_textline PDF_fit_textline(resource $pdfdoc, string $text, float $x,\nfloat $y, string $optlist) [bool]\nPlace single line of text. Places a single line of text on the page, subject\nto various options. Returns TRUE on success or FALSE on failure.\n
PDF_get_apiname PDF_get_apiname(resource $pdfdoc) [string]\nGet name of unsuccessfull API function. Gets the name of the API function\nwhich threw the last exception or failed.\n
PDF_get_buffer PDF_get_buffer(resource $p) [string]\nGet PDF output buffer. Fetches the buffer containing the generated PDF data.\n
PDF_get_errmsg PDF_get_errmsg(resource $pdfdoc) [string]\nGet error text. Gets the text of the last thrown exception or the reason\nfor a failed function call.\n
PDF_get_errnum PDF_get_errnum(resource $pdfdoc) [int]\nGet error number. Gets the number of the last thrown exception or the reason\nfor a failed function call.\n
PDF_get_font PDF_get_font\nGet font [deprecated].\n
PDF_get_fontname PDF_get_fontname\nGet font name [deprecated].\n
PDF_get_fontsize PDF_get_fontsize\nFont handling [deprecated].\n
PDF_get_image_height PDF_get_image_height\nGet image height [deprecated].\n
PDF_get_image_width PDF_get_image_width\nGet image width [deprecated].\n
PDF_get_majorversion PDF_get_majorversion(void) [int]\nGet major version number [deprecated]. This function is deprecated since\nPDFlib version 5, use PDF_get_value() with the parameter `major` instead.\n
PDF_get_minorversion PDF_get_minorversion(void) [int]\nGet minor version number [deprecated]. Returns the minor version number\nof the PDFlib version. This function is deprecated since PDFlib version 5,\nuse PDF_get_value() with the parameter `minor` instead.\n
PDF_get_parameter PDF_get_parameter(resource $p, string $key, float $modifier)\n[string]\nGet string parameter. Gets the contents of some PDFlib parameter with\nstring type.\n
PDF_get_pdi_parameter PDF_get_pdi_parameter(resource $p, string $key, int\n$doc, int $page, int $reserved) [string]\nGet PDI string parameter [deprecated]. Gets the contents of a PDI document\nparameter with string type. This function is deprecated since PDFlib version\n7, use PDF_pcos_get_string() instead.\n
PDF_get_pdi_value PDF_get_pdi_value(resource $p, string $key, int $doc,\nint $page, int $reserved) [float]\nGet PDI numerical parameter [deprecated]. Gets the contents of a PDI document\nparameter with numerical type. This function is deprecated since PDFlib\nversion 7, use PDF_pcos_get_number() instead.\n
PDF_get_value PDF_get_value(resource $p, string $key, float $modifier) [float]\nGet numerical parameter. Gets the value of some PDFlib parameter with\nnumerical type.\n
PDF_info_font PDF_info_font(resource $pdfdoc, int $font, string $keyword,\nstring $optlist) [float]\nQuery detailed information about a loaded font. Queries detailed information\nabout a loaded font.\n
PDF_info_matchbox PDF_info_matchbox(resource $pdfdoc, string $boxname,\nint $num, string $keyword) [float]\nQuery matchbox information. Queries information about a matchbox on the\ncurrent page.\n
PDF_info_table PDF_info_table(resource $pdfdoc, int $table, string $keyword)\n[float]\nRetrieve table information. Retrieves table information related to the most\nrecently placed table instance.\n
PDF_info_textflow PDF_info_textflow(resource $pdfdoc, int $textflow, string\n$keyword) [float]\nQuery textflow state. Queries the current state of a textflow.\n
PDF_info_textline PDF_info_textline(resource $pdfdoc, string $text, string\n$keyword, string $optlist) [float]\nPerform textline formatting and query metrics. Performs textline formatting\nand queries the resulting metrics.\n
PDF_initgraphics PDF_initgraphics(resource $p) [bool]\nReset graphic state. Reset all color and graphics state parameters to their\ndefaults. Returns TRUE on success or FALSE on failure.\n
PDF_lineto PDF_lineto(resource $p, float $x, float $y) [bool]\nDraw a line. Draws a line from the current point to another point. Returns\nTRUE on success or FALSE on failure.\n
PDF_load_3ddata PDF_load_3ddata(resource $pdfdoc, string $filename, string\n$optlist) [int]\nLoad 3D model. Loads a 3D model from a disk-based or virtual file. This\nfunction requires PDF 1.6.\n
PDF_load_font PDF_load_font(resource $pdfdoc, string $fontname, string\n$encoding, string $optlist) [int]\nSearch and prepare font. Searches for a font and prepares it for later use.\n
PDF_load_iccprofile PDF_load_iccprofile(resource $pdfdoc, string $profilename,\nstring $optlist) [int]\nSearch and prepare ICC profile. Searches for an ICC profile, and prepares\nit for later use.\n
PDF_load_image PDF_load_image(resource $pdfdoc, string $imagetype, string\n$filename, string $optlist) [int]\nOpen image file. Opens a disk-based or virtual image file subject to various\noptions.\n
PDF_makespotcolor PDF_makespotcolor(resource $p, string $spotname) [int]\nMake spot color. Finds a built-in spot color name, or makes a named spot\ncolor from the current fill color. Returns TRUE on success or FALSE on failure.\n
PDF_moveto PDF_moveto(resource $p, float $x, float $y) [bool]\nSet current point. Sets the current point for graphics output. Returns TRUE\non success or FALSE on failure.\n
PDF_new PDF_new(void) [resource]\nCreate PDFlib object. Creates a new PDFlib object with default settings.\n
PDF_open_ccitt PDF_open_ccitt(resource $pdfdoc, string $filename, int $width,\nint $height, int $BitReverse, int $k, int $Blackls1) [int]\nOpen raw CCITT image [deprecated]. Opens a raw CCITT image. This function\nis deprecated since PDFlib version 5, use PDF_load_image() instead.\n
PDF_open_file PDF_open_file(resource $p, string $filename) [bool]\nCreate PDF file [deprecated]. Creates a new PDF file using the supplied\nfile name. Returns TRUE on success or FALSE on failure. This function is\ndeprecated since PDFlib version 6, use PDF_begin_document() instead.\n
PDF_open_gif PDF_open_gif\nOpen GIF image [deprecated].\n
PDF_open_image_file PDF_open_image_file(resource $p, string $imagetype,\nstring $filename, string $stringparam, int $intparam) [int]\nRead image from file [deprecated]. Opens an image file. This function is\ndeprecated since PDFlib version 5, use PDF_load_image() with the colorize,\nignoremask, invert, mask, masked, and page options instead.\n
PDF_open_image PDF_open_image(resource $p, string $imagetype, string $source,\nstring $data, int $length, int $width, int $height, int $components, int $bpc,\nstring $params) [int]\nUse image data [deprecated]. Uses image data from a variety of data\nsources. This function is deprecated since PDFlib version 5, use virtual\nfiles and PDF_load_image() instead.\n
PDF_open_jpeg PDF_open_jpeg\nOpen JPEG image [deprecated].\n
PDF_open_memory_image PDF_open_memory_image(resource $p, resource $image) [int]\nOpen image created with PHP's image functions [not supported]. This function\nis not supported by PDFlib GmbH.\n
PDF_open_pdi_document PDF_open_pdi_document(resource $p, string $filename,\nstring $optlist) [int]\nPrepare a pdi document. Open a disk-based or virtual PDF document and prepare\nit for later use.\n
PDF_open_pdi_page PDF_open_pdi_page(resource $p, int $doc, int $pagenumber,\nstring $optlist) [int]\nPrepare a page. Prepares a page for later use with PDF_fit_pdi_page().\n
PDF_open_pdi PDF_open_pdi(resource $pdfdoc, string $filename, string $optlist,\nint $len) [int]\nOpen PDF file [deprecated]. Opens a disk-based or virtual PDF document and\nprepares it for later use. This function is deprecated since PDFlib version 7,\nuse PDF_open_pdi_document() instead.\n
PDF_open_tiff PDF_open_tiff\nOpen TIFF image [deprecated].\n
PDF_pcos_get_number PDF_pcos_get_number(resource $p, int $doc, string $path)\n[float]\nGet value of pCOS path with type number or boolean. Gets the value of a pCOS\npath with type number or boolean.\n
PDF_pcos_get_stream PDF_pcos_get_stream(resource $p, int $doc, string $optlist,\nstring $path) [string]\nGet contents of pCOS path with type stream, fstream, or string. Gets the\ncontents of a pCOS path with type stream, fstream, or string.\n
PDF_pcos_get_string PDF_pcos_get_string(resource $p, int $doc, string $path)\n[string]\nGet value of pCOS path with type name, string, or boolean. Gets the value\nof a pCOS path with type name, string, or boolean.\n
PDF_place_image PDF_place_image(resource $pdfdoc, int $image, float $x,\nfloat $y, float $scale) [bool]\nPlace image on the page [deprecated]. Places an image and scales it. Returns\nTRUE on success or FALSE on failure. This function is deprecated since PDFlib\nversion 5, use PDF_fit_image() instead.\n
PDF_place_pdi_page PDF_place_pdi_page(resource $pdfdoc, int $page, float $x,\nfloat $y, float $sx, float $sy) [bool]\nPlace PDF page [deprecated]. Places a PDF page and scales it. Returns TRUE\non success or FALSE on failure. This function is deprecated since PDFlib\nversion 5, use PDF_fit_pdi_page() instead.\n
PDF_process_pdi PDF_process_pdi(resource $pdfdoc, int $doc, int $page,\nstring $optlist) [int]\nProcess imported PDF document. Processes certain elements of an imported\nPDF document.\n
PDF_rect PDF_rect(resource $p, float $x, float $y, float $width, float $height)\n[bool]\nDraw rectangle. Draws a rectangle. Returns TRUE on success or FALSE on failure.\n
PDF_restore PDF_restore(resource $p) [bool]\nRestore graphics state. Restores the most recently saved graphics\nstate. Returns TRUE on success or FALSE on failure.\n
PDF_resume_page PDF_resume_page(resource $pdfdoc, string $optlist) [bool]\nResume page. Resumes a page to add more content to it.\n
PDF_rotate PDF_rotate(resource $p, float $phi) [bool]\nRotate coordinate system. Rotates the coordinate system. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_save PDF_save(resource $p) [bool]\nSave graphics state. Saves the current graphics state. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_scale PDF_scale(resource $p, float $sx, float $sy) [bool]\nScale coordinate system. Scales the coordinate system. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_set_border_color PDF_set_border_color(resource $p, float $red, float\n$green, float $blue) [bool]\nSet border color of annotations [deprecated]. Sets the border color for\nall kinds of annotations. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 6, use the option `annotcolor`\nin PDF_create_annotation() instead.\n
PDF_set_border_dash PDF_set_border_dash(resource $pdfdoc, float $black,\nfloat $white) [bool]\nSet border dash style of annotations [deprecated]. Sets the border dash\nstyle for all kinds of annotations. Returns TRUE on success or FALSE on\nfailure. This function is deprecated since PDFlib version 6, use the option\n`dasharray` in PDF_create_annotation() instead.\n
PDF_set_border_style PDF_set_border_style(resource $pdfdoc, string $style,\nfloat $width) [bool]\nSet border style of annotations [deprecated]. Sets the border style for\nall kinds of annotations. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 6, use the options `borderstyle`\nand `linewidth` in PDF_create_annotation() instead.\n
PDF_set_char_spacing PDF_set_char_spacing\nSet character spacing [deprecated].\n
PDF_set_duration PDF_set_duration\nSet duration between pages [deprecated].\n
PDF_set_gstate PDF_set_gstate(resource $pdfdoc, int $gstate) [bool]\nActivate graphics state object. Activates a graphics state object.\n
PDF_set_horiz_scaling PDF_set_horiz_scaling\nSet horizontal text scaling [deprecated].\n
PDF_set_info_author PDF_set_info_author\nFill the author document info field [deprecated].\n
PDF_set_info_creator PDF_set_info_creator\nFill the creator document info field [deprecated].\n
PDF_set_info_keywords PDF_set_info_keywords\nFill the keywords document info field [deprecated].\n
PDF_set_info_subject PDF_set_info_subject\nFill the subject document info field [deprecated].\n
PDF_set_info_title PDF_set_info_title\nFill the title document info field [deprecated].\n
PDF_set_info PDF_set_info(resource $p, string $key, string $value) [bool]\nFill document info field. Fill document information field `key` with\n`value`. Returns TRUE on success or FALSE on failure.\n
PDF_set_layer_dependency PDF_set_layer_dependency(resource $pdfdoc, string\n$type, string $optlist) [bool]\nDefine relationships among layers. Defines hierarchical and group relationships\namong layers. Returns TRUE on success or FALSE on failure. This function\nrequires PDF 1.5.\n
PDF_set_leading PDF_set_leading\nSet distance between text lines [deprecated].\n
PDF_set_parameter PDF_set_parameter(resource $p, string $key, string $value)\n[bool]\nSet string parameter. Sets some PDFlib parameter with string type. Returns\nTRUE on success or FALSE on failure.\n
PDF_set_text_matrix PDF_set_text_matrix\nSet text matrix [deprecated].\n
PDF_set_text_pos PDF_set_text_pos(resource $p, float $x, float $y) [bool]\nSet text position. Sets the position for text output on the page. Returns\nTRUE on success or FALSE on failure.\n
PDF_set_text_rendering PDF_set_text_rendering\nDetermine text rendering [deprecated].\n
PDF_set_text_rise PDF_set_text_rise\nSet text rise [deprecated].\n
PDF_set_value PDF_set_value(resource $p, string $key, float $value) [bool]\nSet numerical parameter. Sets the value of some PDFlib parameter with\nnumerical type. Returns TRUE on success or FALSE on failure.\n
PDF_set_word_spacing PDF_set_word_spacing\nSet spacing between words [deprecated].\n
PDF_setcolor PDF_setcolor(resource $p, string $fstype, string $colorspace,\nfloat $c1, float $c2, float $c3, float $c4) [bool]\nSet fill and stroke color. Sets the current color space and color. Returns\nTRUE on success or FALSE on failure.\n
PDF_setdash PDF_setdash(resource $pdfdoc, float $b, float $w) [bool]\nSet simple dash pattern. Sets the current dash pattern to `b` black and `w`\nwhite units. Returns TRUE on success or FALSE on failure.\n
PDF_setdashpattern PDF_setdashpattern(resource $pdfdoc, string $optlist) [bool]\nSet dash pattern. Sets a dash pattern defined by an option list. Returns\nTRUE on success or FALSE on failure.\n
PDF_setflat PDF_setflat(resource $pdfdoc, float $flatness) [bool]\nSet flatness. Sets the flatness parameter. Returns TRUE on success or FALSE\non failure.\n
PDF_setfont PDF_setfont(resource $pdfdoc, int $font, float $fontsize) [bool]\nSet font. Sets the current font in the specified `size`, using a `font` handle\nreturned by PDF_load_font(). Returns TRUE on success or FALSE on failure.\n
PDF_setgray_fill PDF_setgray_fill(resource $p, float $g) [bool]\nSet fill color to gray [deprecated]. Sets the current fill color to a\ngray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on\nfailure. This function is deprecated since PDFlib version 4, use PDF_setcolor()\ninstead.\n
ord ord(string $string) [int]\nReturn ASCII value of character. Returns the ASCII value of the first\ncharacter of `string`. This function complements chr().\n@param string A character.\n@return (PHP 4, PHP 5)\n@see chr() - Return a specific character\n@see An &raquo; ASCII-table\n
output_add_rewrite_var output_add_rewrite_var(string $name, string $value)\n[bool]\nAdd URL rewriter values. This function adds another name/value pair to the\nURL rewrite mechanism. The name and value will be added to URLs (as GET\nparameter) and forms (as hidden input fields) the same way as the session ID\nwhen transparent URL rewriting is enabled with session.use_trans_sid. Please\nnote that absolute URLs (http://example.com/..) aren&#039;t rewritten. This\nfunction&#039;s behavior is controlled by the url_rewriter.tags php.ini\nparameter. Note: Calling this function will implicitly start output buffering\nif it is not active already.\n@param name The variable name.\n@param value The variable value.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see output_reset_rewrite_vars() - Reset URL rewriter values\n@see ob_flush() - Flush (send) the output buffer\n@see ob_list_handlers() - List all output handlers in use\n
output_reset_rewrite_vars output_reset_rewrite_vars(void) [bool]\nReset URL rewriter values. This function resets the URL rewriter and\nremoves all rewrite variables previously set by the output_add_rewrite_var()\nfunction or the session mechanism (if `session.use_trans_sid` was set on\nsession_start()).\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see output_add_rewrite_var() - Add URL rewriter values\n@see ob_flush() - Flush (send) the output buffer\n@see ob_list_handlers() - List all output handlers in use\n@see session_start() - Initialize session data\n
overload overload(string $class_name) [void]\nEnable property and method call overloading for a class. The overload()\nfunction will enable property and method call overloading for a class\nidentified by `class_name`.\n@param class_name The overloaded class name, as a string\n@return (PHP 4 >= 4.3.0)\n
override_function override_function(string $function_name, string\n$function_args, string $function_code) [bool]\nOverrides built-in functions. Overrides built-in functions by replacing them\nin the symbol table.\n@param function_name The function to override.\n@param function_args The function arguments, as a comma separated\nstring. Usually you will want to pass this parameter, as well as the\n`function_code` parameter, as a single quote delimited string. The reason for\nusing single quoted strings, is to protect the variable names from parsing,\notherwise, if you use double quotes there will be a need to escape the\nvariable names, e.g. \$your_var.\n@param function_code The new code for the function.\n@return (PECL apd >= 0.2)\n
ovrimos_close ovrimos_close(int $connection) [void]\nCloses the connection to ovrimos. Closes the specified `connection` to\nOvrimos. This has the effect of rolling back uncommitted transactions.\n@param connection The Ovrimos connection identifier, returned by\novrimos_connect().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_connect() - Connect to the specified database\n
ovrimos_commit ovrimos_commit(int $connection_id) [bool]\nCommits the transaction. Commits the transaction.\n@param connection_id The Ovrimos connection identifier, returned by\novrimos_connect().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_rollback() - Rolls back the transaction\n
ovrimos_connect ovrimos_connect(string $host, string $dborport, string $user,\nstring $password) [int]\nConnect to the specified database. Connects to the specified database.\n@param host A host name or IP address.\n@param dborport Either a database name, or the port number to connect to.\n@param user The user name.\n@param password Password associated with `user`.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_close() - Closes the connection to ovrimos\n
ovrimos_cursor ovrimos_cursor(int $result_id) [string]\nReturns the name of the cursor. Gets the name of the cursor. Useful when\nwishing to perform positioned updates or deletes.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_exec ovrimos_exec(int $connection_id, string $query) [int]\nExecutes an SQL statement. Executes an SQL statement (query or update)\nand returns a result identifier.\n@param connection_id The Ovrimos connection identifier, returned by\novrimos_connect().\n@param query The SQL statement. Evidently, it should not contain\nparameters. Use ovrimos_prepare() for prepared statements.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_execute() - Executes a prepared SQL statement\n@see ovrimos_prepare() - Prepares an SQL statement\n
ovrimos_execute ovrimos_execute(int $result_id [, array $parameters_array])\n[bool]\nExecutes a prepared SQL statement. Executes a prepared statement.\n@param result_id An Ovrimos result identifier prepared with ovrimos_prepare().\n@param parameters_array If the prepared statement contained parameters\n(question marks in the statement), the correct number of parameters should\nbe passed in an array.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_prepare() - Prepares an SQL statement\n
ovrimos_fetch_into ovrimos_fetch_into(int $result_id, array &$result_array\n[, string $how [, int $rownumber]]) [bool]\nFetches a row from the result set. Fetches a row from the given result set,\ninto `result_array`.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param result_array You must provide an array by reference. It will be filled\nwith the fetched values.\n@param how Determines how the rows are fetched. This can be one of\nthe following strings (case is not significant): Option Notes `Next`\nForward direction from current position. This is the default value. `Prev`\nBackward direction from current position. `First` Forward direction from the\nstart. `Last` Backward direction from the end. `Absolute` Absolute position\nfrom the start. Requires `rownumber`.\n@param rownumber The row number, first one is 0. Only needed when `how`\nis set to `Absolute`.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_fetch_row() - Fetches a row from the result set\n
ovrimos_fetch_row ovrimos_fetch_row(int $result_id [, int $how [, int\n$row_number]]) [bool]\nFetches a row from the result set. Fetches a row from the result set. Column\nvalues should be retrieved with other calls.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param how Determines how the rows are fetched. This can be one of\nthe following strings (case is not significant): Option Notes `Next`\nForward direction from current position. This is the default value. `Prev`\nBackward direction from current position. `First` Forward direction from the\nstart. `Last` Backward direction from the end. `Absolute` Absolute position\nfrom the start. Requires `rownumber`.\n@param rownumber The row number, first one is 0. Only needed when `how`\nis set to `Absolute`.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_fetch_into() - Fetches a row from the result set\n
ovrimos_field_len ovrimos_field_len(int $result_id, int $field_number) [int]\nReturns the length of the output column. Gets the length of the specified\noutput column.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param field_number The field number. Starts at 1.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_field_name() - Returns the output column name\n@see ovrimos_field_num() - Returns the (1-based) index of the output column\n@see ovrimos_field_type() - Returns the type of the output column\n
ovrimos_field_name ovrimos_field_name(int $result_id, int $field_number)\n[string]\nReturns the output column name. Returns the output column name at the index\nspecified.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param field_number The field number. Starts at 1.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_field_len() - Returns the length of the output column\n@see ovrimos_field_num() - Returns the (1-based) index of the output column\n@see ovrimos_field_type() - Returns the type of the output column\n
ovrimos_field_num ovrimos_field_num(int $result_id, string $field_name) [int]\nReturns the (1-based) index of the output column. Returns the 1-based index\nof the specified output column.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param field_name The field name.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_field_len() - Returns the length of the output column\n@see ovrimos_field_name() - Returns the output column name\n@see ovrimos_field_type() - Returns the type of the output column\n
ovrimos_field_type ovrimos_field_type(int $result_id, int $field_number) [int]\nReturns the type of the output column. Returns the type of the output column\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param field_number A 1-based index.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_field_len() - Returns the length of the output column\n@see ovrimos_field_name() - Returns the output column name\n@see ovrimos_field_num() - Returns the (1-based) index of the output column\n
ovrimos_free_result ovrimos_free_result(int $result_id) [bool]\nFrees the specified result_id. Frees the specified result identifier.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_longreadlen ovrimos_longreadlen(int $result_id, int $length) [bool]\nSpecifies how many bytes are to be retrieved from long datatypes. Specifies\nhow many bytes are to be retrieved from long datatypes (long varchar and\nlong varbinary).\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param length The number of bytes to retrieve. Default is zero.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_num_fields ovrimos_num_fields(int $result_id) [int]\nReturns the number of columns. Returns the number of columns in the specified\nresult identifier.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_num_rows() - Returns the number of rows affected by update\noperations\n
ovrimos_num_rows ovrimos_num_rows(int $result_id) [int]\nReturns the number of rows affected by update operations. Gets the number\nof rows affected by update operations.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_num_fields() - Returns the number of columns\n
ovrimos_prepare ovrimos_prepare(int $connection_id, string $query) [int]\nPrepares an SQL statement. Prepares an SQL statement.\n@param connection_id The Ovrimos connection identifier, returned by\novrimos_connect().\n@param query The SQL statement.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_result_all ovrimos_result_all(int $result_id [, string $format]) [int]\nPrints the whole result set as an HTML table. Prints the whole result set\nas an HTML table.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param format Optional HTML attributes for the generated table element.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_result ovrimos_result(int $result_id, mixed $field) [string]\nRetrieves the output column. Retrieves the output column specified by `field`.\n@param result_id A result identifier, returned by ovrimos_execute() or\novrimos_exec().\n@param field Either as a string with the field name or as an 1-based index.\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n
ovrimos_rollback ovrimos_rollback(int $connection_id) [bool]\nRolls back the transaction. Rolls back the transaction.\n@param connection_id The Ovrimos connection identifier, returned by\novrimos_connect().\n@return (PHP 4 >= 4.0.3, PHP 5 &lt;= 5.0.5)\n@see ovrimos_commit() - Commits the transaction\n
pack pack(string $format [, mixed $args [, mixed $...]]) [string]\nPack data into binary string. Pack given arguments into binary string according\nto `format`. The idea for this function was taken from Perl and all formatting\ncodes work the same as in Perl. However, there are some formatting codes\nthat are missing such as Perl&#039;s &quot;u&quot; format code. Note that\nthe distinction between signed and unsigned values only affects the function\nunpack(), where as function pack() gives the same result for signed and\nunsigned format codes.\n@param format The `format` string consists of format codes followed by an\noptional repeater argument. The repeater argument can be either an integer\nvalue or `*` for repeating to the end of the input data. For a, A, h, H the\nrepeat count specifies how many characters of one data argument are taken,\nfor @ it is the absolute position where to put the next data, for everything\nelse the repeat count specifies how many data arguments are consumed and packed\ninto the resulting binary string. Currently implemented formats are: pack()\nformat characters Code Description a NUL-padded string A SPACE-padded string\nh Hex string, low nibble first H Hex string, high nibble first csigned char C\nunsigned char s signed short (always 16 bit, machine byte order) S unsigned\nshort (always 16 bit, machine byte order) n unsigned short (always 16 bit,\nbig endian byte order) v unsigned short (always 16 bit, little endian byte\norder) i signed integer (machine dependent size and byte order) I unsigned\ninteger (machine dependent size and byte order) l signed long (always 32 bit,\nmachine byte order) L unsigned long (always 32 bit, machine byte order)\nN unsigned long (always 32 bit, big endian byte order) V unsigned long\n(always 32 bit, little endian byte order) f float (machine dependent size\nand representation) d double (machine dependent size and representation)\nx NUL byte X Back up one byte @ NUL-fill to absolute position\n@param args\n@return (PHP 4, PHP 5)\n@see unpack() - Unpack data from binary string\n
parse_ini_file parse_ini_file(string $filename [, bool $process_sections=false\n[, int $scanner_mode=INI_SCANNER_NORMAL]]) [array]\nParse a configuration file. parse_ini_file() loads in the ini file specified\nin `filename`, and returns the settings in it in an associative array. The\nstructure of the ini file is the same as the php.ini&#039;s.\n@param filename The filename of the ini file being parsed.\n@param process_sections By setting the `process_sections` parameter to\nTRUE, you get a multidimensional array, with the section names and settings\nincluded. The default for `process_sections` is FALSE\n@param scanner_mode Can either be INI_SCANNER_NORMAL (default) or\nINI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will\nnot be parsed.\n@return (PHP 4, PHP 5)\n@note Note: This function has nothing to do with the php.ini file. It is\nalready processed by the time you run your script. This function can be used\nto read in your own application&#039;s configuration files.\n@note Note: If a value in the ini file contains any non-alphanumeric characters\nit needs to be enclosed in double-quotes (&quot;).\n@note Note: There are reserved words which must not be used as keys for ini\nfiles. These include: null, yes, no, true, false, on, off, none. Values\nnull, no and false results in &quot;&quot;, yes and true results in\n&quot;1&quot;. Characters `?{}|&amp;~![()^&quot;` must not be used anywhere\nin the key and have a special meaning in the value.\n@see parse_ini_string() - Parse a configuration string\n
parse_ini_string parse_ini_string(string $ini [, bool $process_sections=false\n[, int $scanner_mode=INI_SCANNER_NORMAL]]) [array]\nParse a configuration string. parse_ini_string() returns the settings in\nstring `ini` in an associative array. The structure of the ini string is\nthe same as the php.ini&#039;s.\n@param ini The contents of the ini file being parsed.\n@param process_sections By setting the `process_sections` parameter to\nTRUE, you get a multidimensional array, with the section names and settings\nincluded. The default for `process_sections` is FALSE\n@param scanner_mode Can either be INI_SCANNER_NORMAL (default) or\nINI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will\nnot be parsed.\n@return (PHP 5 >= 5.3.0)\n@note Note: There are reserved words which must not be used as keys for ini\nfiles. These include: null, yes, no, true, false, on, off, none. Values\nnull, no and false results in &quot;&quot;, yes and true results in\n&quot;1&quot;. Characters `?{}|&amp;~![()^&quot;` must not be used anywhere\nin the key and have a special meaning in the value.\n@see parse_ini_file() - Parse a configuration file\n
parse_str parse_str(string $str [, array &$arr]) [void]\nParses the string into variables. Parses `str` as if it were the\nquery string passed via a URL and sets variables in the current\nscope. Note: To get the current `QUERY_STRING`, you may use the variable\n$_SERVER['QUERY_STRING']. Also, you may want to read the section on variables\nfrom external sources. Note: The magic_quotes_gpc setting affects the output\nof this function, as parse_str() uses the same mechanism that PHP uses to\npopulate the $_GET, $_POST, etc. variables.\n@param str The input string.\n@param arr If the second parameter `arr` is present, variables are stored\nin this variable as array elements instead.\n@return (PHP 4, PHP 5)\n@see parse_url() - Parse a URL and return its components\n@see pathinfo() - Returns information about a file path\n@see http_build_query() - Generate URL-encoded query string\n@see get_magic_quotes_gpc() - Gets the current configuration setting of\nmagic_quotes_gpc\n@see urldecode() - Decodes URL-encoded string\n
parse_url parse_url(string $url [, int $component=-1]) [mixed]\nParse a URL and return its components. This function parses a URL and returns\nan associative array containing any of the various components of the URL that\nare present. This function is not meant to validate the given URL, it only\nbreaks it up into the above listed parts. Partial URLs are also accepted,\nparse_url() tries its best to parse them correctly.\n@param url The URL to parse. Invalid characters are replaced by `_`.\n@param component Specify one of PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT,\nPHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT to\nretrieve just a specific URL component as a string (except when PHP_URL_PORT\nis given, in which case the return value will be an integer).\n@return (PHP 4, PHP 5)\n@note Note: This function doesn&#039;t work with relative URLs.\n@note Note: This function is intended specifically for the purpose of parsing\nURLs and not URIs. However, to comply with PHP&#039;s backwards compatibility\nrequirements it makes an exception for the file:// scheme where triple slashes\n(file:///...) are allowed. For any other scheme this is invalid.\n@see pathinfo() - Returns information about a file path\n@see parse_str() - Parses the string into variables\n@see http_build_query() - Generate URL-encoded query string\n@see http_build_url() - Build a URL\n@see dirname() - Returns parent directory's path\n@see basename() - Returns trailing name component of path\n
parsekit_compile_file parsekit_compile_file(string $filename [, array &$errors\n[, int $options=PARSEKIT_QUIET]]) [array]\nCompile a string of PHP code and return the resulting op array.\n@param filename A string containing the name of the file to compile. Similar\nto the argument to include().\n@param errors A 2D hash of errors (including fatal errors) encountered during\ncompilation. Returned by reference.\n@param options One of either PARSEKIT_QUIET or PARSEKIT_SIMPLE. To produce\nvarying degrees of verbosity in the returned output.\n@return (PECL parsekit >= 0.2.0)\n@see parsekit_compile_string() - Compile a string of PHP code and return\nthe resulting op array\n
parsekit_compile_string parsekit_compile_string(string $phpcode [, array\n&$errors [, int $options=PARSEKIT_QUIET]]) [array]\nCompile a string of PHP code and return the resulting op array.\n@param phpcode A string containing phpcode. Similar to the argument to eval().\n@param errors A 2D hash of errors (including fatal errors) encountered during\ncompilation. Returned by reference.\n@param options One of either PARSEKIT_QUIET or PARSEKIT_SIMPLE. To produce\nvarying degrees of verbosity in the returned output.\n@return (PECL parsekit >= 0.2.0)\n@see parsekit_compile_file() - Compile a string of PHP code and return the\nresulting op array\n
parsekit_func_arginfo parsekit_func_arginfo(mixed $function) [array]\nReturn information regarding function argument(s).\n@param function A string describing a function, or an array describing\na class/method.\n@return (PECL parsekit >= 0.3.0)\n
passthru passthru(string $command [, int &$return_var]) [void]\nExecute an external program and display raw output. The passthru() function\nis similar to the exec() function in that it executes a `command`. This\nfunction should be used in place of exec() or system() when the output\nfrom the Unix command is binary data which needs to be passed directly\nback to the browser. A common use for this is to execute something like the\npbmplus utilities that can output an image stream directly. By setting the\nContent-type to `image/gif` and then calling a pbmplus program to output a\ngif, you can create PHP scripts that output images directly.\n@param command The command that will be executed.\n@param return_var If the `return_var` argument is present, the return status\nof the Unix command will be placed here.\n@return (PHP 4, PHP 5)\n@see exec() - Execute an external program\n@see system() - Execute an external program and display the output\n@see popen() - Opens process file pointer\n@see escapeshellcmd() - Escape shell metacharacters\n@see backtick operator\n
pathinfo pathinfo(string $path [, int $options=PATHINFO_DIRNAME |\nPATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME]) [mixed]\nReturns information about a file path. pathinfo() returns an associative\narray containing information about `path`.\n@param path The path being checked.\n@param options You can specify which elements are returned with optional\nparameter `options`. It composes from PATHINFO_DIRNAME, PATHINFO_BASENAME,\nPATHINFO_EXTENSION and PATHINFO_FILENAME. It defaults to return all elements.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@note Note: For information on retrieving the current path info, read the\nsection on predefined reserved variables.\n@note Note: pathinfo() is locale aware, so for it to parse the path correctly\nwith multibyte character, the matching locale must be set using the setlocale()\nfunction.\n@see dirname() - Returns parent directory's path\n@see basename() - Returns trailing name component of path\n@see parse_url() - Parse a URL and return its components\n@see realpath() - Returns canonicalized absolute pathname\n
pclose pclose(resource $handle) [int]\nCloses process file pointer. Closes a file pointer to a pipe opened by popen().\n@param handle The file pointer must be valid, and must have been returned\nby a successful call to popen().\n@return (PHP 4, PHP 5)\n@note Note: Unix Only: proc_close() is internally implemented using\nthe `waitpid(3)` system call. To obtain the real exit status code the\npcntl_wexitstatus() function should be used.\n@see popen() - Opens process file pointer\n
pcntl_alarm pcntl_alarm(int $seconds) [int]\nSet an alarm clock for delivery of a signal. Creates a timer that will send\na SIGALRM signal to the process after the given number of seconds. Any call\nto pcntl_alarm() will cancel any previously set alarm.\n@param seconds The number of seconds to wait. If `seconds` is zero, no new\nalarm is created.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
pcntl_exec pcntl_exec(string $path [, array $args [, array $envs]]) [void]\nExecutes specified program in current process space. Executes the program\nwith the given arguments.\n@param path `path` must be the path to a binary executable or a script with a\nvalid path pointing to an executable in the shebang ( #!/usr/local/bin/perl\nfor example) as the first line. See your system&#039;s man execve(2) page\nfor additional information.\n@param args `args` is an array of argument strings passed to the program.\n@param envs `envs` is an array of strings which are passed as environment\nto the program. The array is in the format of name => value, the key being\nthe name of the environmental variable and the value being the value of\nthat variable.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
pcntl_fork pcntl_fork(void) [int]\nForks the currently running process. The pcntl_fork() function creates\na child process that differs from the parent process only in its PID and\nPPID. Please see your system&#039;s fork(2) man page for specific details\nas to how fork works on your system.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_signal() - Installs a signal handler\n
pcntl_getpriority pcntl_getpriority([int $pid=getmypid() [, int\n$process_identifier=PRIO_PROCESS]]) [int]\nGet the priority of any process. pcntl_getpriority() gets the priority of\n`pid`. Because priority levels can differ between system types and kernel\nversions, please see your system&#039;s getpriority(2) man page for specific\ndetails.\n@param pid If not specified, the pid of the current process is used.\n@param process_identifier One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n@return (PHP 5)\n@see pcntl_setpriority() - Change the priority of any process\n
pcntl_setpriority pcntl_setpriority(int $priority [, int $pid=getmypid()\n[, int $process_identifier=PRIO_PROCESS]]) [bool]\nChange the priority of any process. pcntl_setpriority() sets the priority of\n`pid`.\n@param priority `priority` is generally a value in the range `-20` to\n`20`. The default priority is `0` while a lower numerical value causes more\nfavorable scheduling. Because priority levels can differ between system\ntypes and kernel versions, please see your system&#039;s setpriority(2)\nman page for specific details.\n@param pid If not specified, the pid of the current process is used.\n@param process_identifier One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n@return (PHP 5)\n@see pcntl_getpriority() - Get the priority of any process\n
pcntl_signal_dispatch pcntl_signal_dispatch(void) [bool]\nCalls signal handlers for pending signals. The pcntl_signal_dispatch() function\ncalls the signal handlers installed by pcntl_signal() for each pending signal.\n@return (PHP 5 >= 5.3.0)\n@see pcntl_signal() - Installs a signal handler\n@see pcntl_sigprocmask() - Sets and retrieves blocked signals\n@see pcntl_sigwaitinfo() - Waits for signals\n@see pcntl_sigtimedwait() - Waits for signals, with a timeout\n
pcntl_signal pcntl_signal(int $signo, callback $handler [, bool\n$restart_syscalls=true]) [bool]\nInstalls a signal handler. The pcntl_signal() function installs a new signal\nhandler for the signal indicated by `signo`.\n@param signo The signal number.\n@param handler The signal handler which may be the name of a user created\nfunction, or method, or either of the two global constants SIG_IGN or\nSIG_DFL. Note: Note that when you set a handler to an object method, that\nobject&#039;s reference count is increased which makes it persist until you\neither change the handler to something else, or your script ends.\n@param restart_syscalls Specifies whether system call restarting should be\nused when this signal arrives.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_fork() - Forks the currently running process\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n
pcntl_sigprocmask pcntl_sigprocmask(int $how, array $set [, array &$oldset])\n[bool]\nSets and retrieves blocked signals. The pcntl_sigprocmask() function adds,\nremoves or sets blocked signals, depending on the `how` parameter.\n@param how Sets the behavior of pcntl_sigprocmask(). Possible values:\nSIG_BLOCK: Add the signals to the currently blocked signals. SIG_UNBLOCK:\nRemove the signals from the currently blocked signals. SIG_SETMASK: Replace\nthe currently blocked signals by the given list of signals.\n@param set List of signals.\n@param oldset The `oldset` parameter is set to an array containing the list\nof the previously blocked signals.\n@return (PHP 5 >= 5.3.0)\n@see pcntl_sigwaitinfo() - Waits for signals\n@see pcntl_sigtimedwait() - Waits for signals, with a timeout\n
pcntl_sigtimedwait pcntl_sigtimedwait(array $set [, array &$siginfo [,\nint $seconds=0 [, int $nanoseconds=0]]]) [int]\nWaits for signals, with a timeout. The pcntl_sigtimedwait() function operates\nin exactly the same way as pcntl_sigwaitinfo() except that it takes two\nadditional parameters, `seconds` and `nanoseconds`, which enable an upper\nbound to be placed on the time for which the script is suspended.\n@param set Array of signals to wait for.\n@param siginfo The `siginfo` is set to an array containing informations\nabout the signal. See pcntl_sigwaitinfo().\n@param seconds Timeout in seconds.\n@param nanoseconds Timeout in nanoseconds.\n@return (PHP 5 >= 5.3.0)\n@see pcntl_sigprocmask() - Sets and retrieves blocked signals\n@see pcntl_sigwaitinfo() - Waits for signals\n
pcntl_sigwaitinfo pcntl_sigwaitinfo(array $set [, array &$siginfo]) [int]\nWaits for signals. The pcntl_sigwaitinfo() function suspends execution of\nthe calling script until one of the signals given in `set` are delivered. If\none of the signal is already pending (e.g. blocked by pcntl_sigprocmask()),\npcntl_sigwaitinfo() will return immediately.\n@param set Array of signals to wait for.\n@param siginfo The `siginfo` parameter is set to an array containing\ninformations about the signal. The following elements are set for all signals:\nsigno: Signal number errno: An error number code: Signal code The following\nelements may be set for the SIGCHLD signal: status: Exit value or signal\nutime: User time consumed stime: System time consumed pid: Sending process\nID uid: Real user ID of sending process The following elements may be set\nfor the SIGILL, SIGFPE, SIGSEGV and SIGBUS signals: addr: Memory location\nwhich caused fault The following element may be set for the SIGPOLL signal:\nband: Band event fd: File descriptor number\n@return (PHP 5 >= 5.3.0)\n@see pcntl_sigprocmask() - Sets and retrieves blocked signals\n@see pcntl_sigtimedwait() - Waits for signals, with a timeout\n
pcntl_wait pcntl_wait(int &$status [, int $options=0]) [int]\nWaits on or returns the status of a forked child. The wait function suspends\nexecution of the current process until a child has exited, or until a signal\nis delivered whose action is to terminate the current process or to call\na signal handling function. If a child has already exited by the time of\nthe call (a so-called &quot;zombie&quot; process), the function returns\nimmediately. Any system resources used by the child are freed. Please see\nyour system&#039;s wait(2) man page for specific details as to how wait works\non your system. Note: This function is equivalent to calling pcntl_waitpid()\nwith a `-1` `pid` and no `options`.\n@param status pcntl_wait() will store status information in the\n`status` parameter which can be evaluated using the following\nfunctions: pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(),\npcntl_wexitstatus(), pcntl_wtermsig() and pcntl_wstopsig().\n@param options If wait3 is available on your system (mostly BSD-style systems),\nyou can provide the optional `options` parameter. If this parameter is not\nprovided, wait will be used for the system call. If wait3 is not available,\nproviding a value for `options ` will have no effect. The value of `options\n` is the value of zero or more of the following two constants `OR`&#039;ed\ntogether: Possible values for `options` `WNOHANG` Return immediately if\nno child has exited. `WUNTRACED` Return for children which are stopped,\nand whose status has not been reported.\n@return (PHP 5)\n@see pcntl_fork() - Forks the currently running process\n@see pcntl_signal() - Installs a signal handler\n@see pcntl_wifexited() - Checks if status code represents a normal exit\n@see pcntl_wifstopped() - Checks whether the child process is currently stopped\n@see pcntl_wifsignaled() - Checks whether the status code represents a\ntermination due to a signal\n@see pcntl_wexitstatus() - Returns the return code of a terminated child\n@see pcntl_wtermsig() - Returns the signal which caused the child to terminate\n@see pcntl_wstopsig() - Returns the signal which caused the child to stop\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n
pcntl_waitpid pcntl_waitpid(int $pid, int &$status [, int $options=0]) [int]\nWaits on or returns the status of a forked child. Suspends execution of the\ncurrent process until a child as specified by the `pid` argument has exited, or\nuntil a signal is delivered whose action is to terminate the current process\nor to call a signal handling function. If a child as requested by `pid`\nhas already exited by the time of the call (a so-called &quot;zombie&quot;\nprocess), the function returns immediately. Any system resources used by\nthe child are freed. Please see your system&#039;s waitpid(2) man page for\nspecific details as to how waitpid works on your system.\n@param pid The value of `pid` can be one of the following: possible values for\n`pid` `&lt; -1` wait for any child process whose process group ID is equal\nto the absolute value of `pid`. `-1` wait for any child process; this is\nthe same behaviour that the wait function exhibits. `0` wait for any child\nprocess whose process group ID is equal to that of the calling process. `>\n0` wait for the child whose process ID is equal to the value of `pid`. Note:\nSpecifying `-1` as the `pid` is equivalent to the functionality pcntl_wait()\nprovides (minus `options`).\n@param status pcntl_waitpid() will store status information in\nthe `status` parameter which can be evaluated using the following\nfunctions: pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(),\npcntl_wexitstatus(), pcntl_wtermsig() and pcntl_wstopsig().\n@param options The value of `options` is the value of zero or more of the\nfollowing two global constants `OR`&#039;ed together: possible values for\n`options` `WNOHANG` return immediately if no child has exited. `WUNTRACED`\nreturn for children which are stopped, and whose status has not been reported.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_fork() - Forks the currently running process\n@see pcntl_signal() - Installs a signal handler\n@see pcntl_wifexited() - Checks if status code represents a normal exit\n@see pcntl_wifstopped() - Checks whether the child process is currently stopped\n@see pcntl_wifsignaled() - Checks whether the status code represents a\ntermination due to a signal\n@see pcntl_wexitstatus() - Returns the return code of a terminated child\n@see pcntl_wtermsig() - Returns the signal which caused the child to terminate\n@see pcntl_wstopsig() - Returns the signal which caused the child to stop\n
pcntl_wexitstatus pcntl_wexitstatus(int $status) [int]\nReturns the return code of a terminated child. Returns the return code\nof a terminated child. This function is only useful if pcntl_wifexited()\nreturned TRUE.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_wifexited() - Checks if status code represents a normal exit\n
pcntl_wifexited pcntl_wifexited(int $status) [bool]\nChecks if status code represents a normal exit. Checks whether the child\nstatus code represents a normal exit.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_wexitstatus() - Returns the return code of a terminated child\n
pcntl_wifsignaled pcntl_wifsignaled(int $status) [bool]\nChecks whether the status code represents a termination due to a signal. Checks\nwhether the child process exited because of a signal which was not caught.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_signal() - Installs a signal handler\n
pcntl_wifstopped pcntl_wifstopped(int $status) [bool]\nChecks whether the child process is currently stopped. Checks whether the\nchild process which caused the return is currently stopped; this is only\npossible if the call to pcntl_waitpid() was done using the option `WUNTRACED`.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n
pcntl_wstopsig pcntl_wstopsig(int $status) [int]\nReturns the signal which caused the child to stop. Returns the number of\nthe signal which caused the child to stop. This function is only useful if\npcntl_wifstopped() returned TRUE.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_wifstopped() - Checks whether the child process is currently stopped\n
pcntl_wtermsig pcntl_wtermsig(int $status) [int]\nReturns the signal which caused the child to terminate. Returns the number\nof the signal that caused the child process to terminate. This function is\nonly useful if pcntl_wifsignaled() returned TRUE.\n@param status The `status` parameter is the status parameter supplied to a\nsuccessful call to pcntl_waitpid().\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see pcntl_waitpid() - Waits on or returns the status of a forked child\n@see pcntl_signal() - Installs a signal handler\n@see pcntl_wifsignaled() - Checks whether the status code represents a\ntermination due to a signal\n
PDF_activate_item PDF_activate_item(resource $pdfdoc, int $id) [bool]\nActivate structure element or other content item. Activates a previously\ncreated structure element or other content item. Returns TRUE on success or\nFALSE on failure.\n
PDF_add_annotation PDF_add_annotation\nAdd annotation [deprecated].\n
PDF_add_bookmark PDF_add_bookmark\nAdd bookmark for current page [deprecated].\n
PDF_add_launchlink PDF_add_launchlink(resource $pdfdoc, float $llx, float\n$lly, float $urx, float $ury, string $filename) [bool]\nAdd launch annotation for current page [deprecated]. Adds a link to a\nweb resource. This function is deprecated since PDFlib version 6, use\nPDF_create_action() with `type=Launch` and PDF_create_annotation() with\n`type=Link` instead.\n
PDF_add_locallink PDF_add_locallink(resource $pdfdoc, float $lowerleftx, float\n$lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest)\n[bool]\nAdd link annotation for current page [deprecated]. Add a link annotation\nto a target within the current PDF file. Returns TRUE on success or\nFALSE on failure. This function is deprecated since PDFlib version 6,\nuse PDF_create_action() with `type=GoTo` and PDF_create_annotation() with\n`type=Link` instead.\n
PDF_add_nameddest PDF_add_nameddest(resource $pdfdoc, string $name, string\n$optlist) [bool]\nCreate named destination. Creates a named destination on an arbitrary page\nin the current document. Returns TRUE on success or FALSE on failure.\n
PDF_add_note PDF_add_note(resource $pdfdoc, float $llx, float $lly, float $urx,\nfloat $ury, string $contents, string $title, string $icon, int $open) [bool]\nSet annotation for current page [deprecated]. Sets an annotation for the\ncurrent page. Returns TRUE on success or FALSE on failure. This function\nis deprecated since PDFlib version 6, use PDF_create_annotation() with\n`type=Text` instead.\n
PDF_add_outline PDF_add_outline\nAdd bookmark for current page [deprecated].\n
PDF_add_pdflink PDF_add_pdflink(resource $pdfdoc, float $bottom_left_x,\nfloat $bottom_left_y, float $up_right_x, float $up_right_y, string $filename,\nint $page, string $dest) [bool]\nAdd file link annotation for current page [deprecated]. Add a file link\nannotation to a PDF target. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 6, use PDF_create_action() with\n`type=GoToR` and PDF_create_annotation() with `type=Link` instead.\n
PDF_add_table_cell PDF_add_table_cell(resource $pdfdoc, int $table, int\n$column, int $row, string $text, string $optlist) [int]\nAdd a cell to a new or existing table. Adds a cell to a new or existing table.\n
PDF_add_textflow PDF_add_textflow(resource $pdfdoc, int $textflow, string\n$text, string $optlist) [int]\nCreate Textflow or add text to existing Textflow. Creates a Textflow object,\nor adds text and explicit options to an existing Textflow.\n
PDF_add_thumbnail PDF_add_thumbnail(resource $pdfdoc, int $image) [bool]\nAdd thumbnail for current page. Adds an existing image as thumbnail for the\ncurrent page. Returns TRUE on success or FALSE on failure.\n
PDF_add_weblink PDF_add_weblink(resource $pdfdoc, float $lowerleftx, float\n$lowerlefty, float $upperrightx, float $upperrighty, string $url) [bool]\nAdd weblink for current page [deprecated]. Adds a weblink annotation to a\ntarget `url` on the Web. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 6, use PDF_create_action() with\n`type=URI` and PDF_create_annotation() with `type=Link` instead.\n
PDF_arc PDF_arc(resource $p, float $x, float $y, float $r, float $alpha,\nfloat $beta) [bool]\nDraw a counterclockwise circular arc segment. Adds a counterclockwise\ncircular arc.\n
PDF_arcn PDF_arcn(resource $p, float $x, float $y, float $r, float $alpha,\nfloat $beta) [bool]\nDraw a clockwise circular arc segment. Except for the drawing direction,\nthis function behaves exactly like PDF_arc().\n
PDF_attach_file PDF_attach_file(resource $pdfdoc, float $llx, float $lly,\nfloat $urx, float $ury, string $filename, string $description, string $author,\nstring $mimetype, string $icon) [bool]\nAdd file attachment for current page [deprecated]. Adds a file attachment\nannotation. Returns TRUE on success or FALSE on failure. This function\nis deprecated since PDFlib version 6, use PDF_create_annotation() with\n`type=FileAttachment` instead.\n
PDF_begin_document PDF_begin_document(resource $pdfdoc, string $filename,\nstring $optlist) [int]\nCreate new PDF file. Creates a new PDF file subject to various options.\n
PDF_begin_font PDF_begin_font(resource $pdfdoc, string $filename, float $a,\nfloat $b, float $c, float $d, float $e, float $f, string $optlist) [bool]\nStart a Type 3 font definition. Starts a Type 3 font definition.\n
PDF_begin_glyph PDF_begin_glyph(resource $pdfdoc, string $glyphname, float\n$wx, float $llx, float $lly, float $urx, float $ury) [bool]\nStart glyph definition for Type 3 font. Starts a glyph definition for a Type\n3 font.\n
PDF_begin_item PDF_begin_item(resource $pdfdoc, string $tag, string $optlist)\n[int]\nOpen structure element or other content item. Opens a structure element or\nother content item with attributes supplied as options.\n
PDF_begin_layer PDF_begin_layer(resource $pdfdoc, int $layer) [bool]\nStart layer. Starts a layer for subsequent output on the page. Returns TRUE\non success or FALSE on failure. This function requires PDF 1.5.\n
PDF_begin_page_ext PDF_begin_page_ext(resource $pdfdoc, float $width, float\n$height, string $optlist) [bool]\nStart new page. Adds a new page to the document, and specifies various\noptions. The parameters `width` and `height` are the dimensions of the new\npage in points. Returns TRUE on success or FALSE on failure.  Common Page\nSizes in Points name size A0 2380 x 3368 A1 1684 x 2380 A2 1190 x 1684 A3 842\nx 1190 A4 595 x 842 A5 421 x 595 A6 297 x 421 B5 501 x 709 letter (8.5&quot;\nx 11&quot;) 612 x 792 legal (8.5&quot; x 14&quot;) 612 x 1008 ledger (17&quot;\nx 11&quot;) 1224 x 792 11&quot; x 17&quot; 792 x 1224\n
PDF_begin_page PDF_begin_page(resource $pdfdoc, float $width, float $height)\n[bool]\nStart new page [deprecated]. Adds a new page to the document. Returns TRUE\non success or FALSE on failure. This function is deprecated since PDFlib\nversion 6, use PDF_begin_page_ext() instead.\n
PDF_begin_pattern PDF_begin_pattern(resource $pdfdoc, float $width, float\n$height, float $xstep, float $ystep, int $painttype) [int]\nStart pattern definition. Starts a new pattern definition.\n
PDF_begin_template_ext PDF_begin_template_ext(resource $pdfdoc, float $width,\nfloat $height, string $optlist) [int]\nStart template definition. Starts a new template definition.\n
PDF_begin_template PDF_begin_template(resource $pdfdoc, float $width, float\n$height) [int]\nStart template definition [deprecated]. Starts a new template definition. This\nfunction is deprecated since PDFlib version 7, use PDF_begin_template_ext()\ninstead.\n
PDF_circle PDF_circle(resource $pdfdoc, float $x, float $y, float $r) [bool]\nDraw a circle. Adds a circle. Returns TRUE on success or FALSE on failure.\n
PDF_clip PDF_clip(resource $p) [bool]\nClip to current path. Uses the current path as clipping path, and terminate\nthe path. Returns TRUE on success or FALSE on failure.\n
PDF_close_image PDF_close_image(resource $p, int $image) [bool]\nClose image. Closes an `image` retrieved with the PDF_open_image() function.\n
PDF_close_pdi_page PDF_close_pdi_page(resource $p, int $page) [bool]\nClose the page handle. Closes the page handle, and frees all page-related\nresources. Returns TRUE on success or FALSE on failure.\n
PDF_close_pdi PDF_close_pdi(resource $p, int $doc) [bool]\nClose the input PDF document [deprecated]. Closes all open page handles,\nand closes the input PDF document. Returns TRUE on success or FALSE\non failure. This function is deprecated since PDFlib version 7, use\nPDF_close_pdi_document() instead.\n
PDF_close PDF_close(resource $p) [bool]\nClose pdf resource [deprecated]. Closes the generated PDF file, and frees all\ndocument-related resources. Returns TRUE on success or FALSE on failure. This\nfunction is deprecated since PDFlib version 6, use PDF_end_document() instead.\n
PDF_closepath_fill_stroke PDF_closepath_fill_stroke(resource $p) [bool]\nClose, fill and stroke current path. Closes the path, fills, and strokes\nit. Returns TRUE on success or FALSE on failure.\n
PDF_closepath_stroke PDF_closepath_stroke(resource $p) [bool]\nClose and stroke path. Closes the path, and strokes it. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_closepath PDF_closepath(resource $p) [bool]\nClose current path. Closes the current path. Returns TRUE on success or\nFALSE on failure.\n
PDF_concat PDF_concat(resource $p, float $a, float $b, float $c, float $d,\nfloat $e, float $f) [bool]\nConcatenate a matrix to the CTM. Concatenates a matrix to the current\ntransformation matrix (CTM). Returns TRUE on success or FALSE on failure.\n
PDF_continue_text PDF_continue_text(resource $p, string $text) [bool]\nOutput text in next line. Prints `text` at the next line. Returns TRUE on\nsuccess or FALSE on failure.\n
PDF_create_3dview PDF_create_3dview(resource $pdfdoc, string $username,\nstring $optlist) [int]\nCreate 3D view. Creates a 3D view. This function requires PDF 1.6.\n
PDF_create_action PDF_create_action(resource $pdfdoc, string $type, string\n$optlist) [int]\nCreate action for objects or events. Creates an action which can be applied\nto various objects and events.\n
PDF_create_annotation PDF_create_annotation(resource $pdfdoc, float $llx,\nfloat $lly, float $urx, float $ury, string $type, string $optlist) [bool]\nCreate rectangular annotation. Creates a rectangular annotation on the\ncurrent page.\n
PDF_create_bookmark PDF_create_bookmark(resource $pdfdoc, string $text,\nstring $optlist) [int]\nCreate bookmark. Creates a bookmark subject to various options.\n
PDF_create_field PDF_create_field(resource $pdfdoc, float $llx, float $lly,\nfloat $urx, float $ury, string $name, string $type, string $optlist) [bool]\nCreate form field. Creates a form field on the current page subject to\nvarious options.\n
PDF_create_fieldgroup PDF_create_fieldgroup(resource $pdfdoc, string $name,\nstring $optlist) [bool]\nCreate form field group. Creates a form field group subject to various options.\n
PDF_create_gstate PDF_create_gstate(resource $pdfdoc, string $optlist) [int]\nCreate graphics state object. Creates a graphics state object subject to\nvarious options.\n
PDF_create_pvf PDF_create_pvf(resource $pdfdoc, string $filename, string\n$data, string $optlist) [bool]\nCreate PDFlib virtual file. Creates a named virtual read-only file from data\nprovided in memory.\n
PDF_create_textflow PDF_create_textflow(resource $pdfdoc, string $text,\nstring $optlist) [int]\nCreate textflow object. Preprocesses text for later formatting and creates\na textflow object.\n
PDF_curveto PDF_curveto(resource $p, float $x1, float $y1, float $x2, float\n$y2, float $x3, float $y3) [bool]\nDraw Bezier curve. Draws a Bezier curve from the current point, using 3 more\ncontrol points. Returns TRUE on success or FALSE on failure.\n
PDF_define_layer PDF_define_layer(resource $pdfdoc, string $name, string\n$optlist) [int]\nCreate layer definition. Creates a new layer definition. This function\nrequires PDF 1.5.\n
PDF_delete_pvf PDF_delete_pvf(resource $pdfdoc, string $filename) [int]\nDelete PDFlib virtual file. Deletes a named virtual file and frees its data\nstructures (but not the contents).\n
PDF_delete_table PDF_delete_table(resource $pdfdoc, int $table, string\n$optlist) [bool]\nDelete table object. Deletes a table and all associated data structures.\n
odbc_execute odbc_execute(resource $result_id [, array $parameters_array])\n[bool]\nExecute a prepared statement. Executes a statement prepared with\nodbc_prepare().\n@param result_id The result id resource, from odbc_prepare().\n@param parameters_array Parameters in `parameter_array` will be substituted\nfor placeholders in the prepared statement in order. Elements of this array\nwill be converted to strings by calling this function. Any parameters in\n`parameter_array` which start and end with single quotes will be taken as the\nname of a file to read and send to the database server as the data for the\nappropriate placeholder. If you wish to store a string which actually begins\nand ends with single quotes, you must add a space or other non-single-quote\ncharacter to the beginning or end of the parameter, which will prevent the\nparameter from being taken as a file name. If this is not an option, then\nyou must use another mechanism to store the string, such as executing the\nquery directly with odbc_exec()).\n@return (PHP 4, PHP 5)\n@see odbc_prepare() - Prepares a statement for execution\n
odbc_fetch_array odbc_fetch_array(resource $result [, int $rownumber]) [array]\nFetch a result row as an associative array. Fetch an associative array from\nan ODBC query. See the changelog below for when this function is available.\n@param result The result resource from odbc_exec().\n@param rownumber Optionally choose which row number to retrieve.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see odbc_fetch_row() - Fetch a row\n@see odbc_fetch_object() - Fetch a result row as an object\n@see odbc_num_rows() - Number of rows in a result\n
odbc_fetch_into odbc_fetch_into(resource $result_id, array &$result_array\n[, int $rownumber]) [int]\nFetch one result row into array. Fetch one result row into array.\n@param result_id The result resource.\n@param result_array The result array that can be of any type since it will\nbe converted to type array. The array will contain the column values starting\nat array index 0.\n@param rownumber The row number.\n@return (PHP 4, PHP 5)\n
odbc_fetch_object odbc_fetch_object(resource $result [, int $rownumber])\n[object]\nFetch a result row as an object. Fetch an object from an ODBC query. See\nthe changelog below for when this function is available.\n@param result The result resource from odbc_exec().\n@param rownumber Optionally choose which row number to retrieve.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see odbc_fetch_row() - Fetch a row\n@see odbc_fetch_array() - Fetch a result row as an associative array\n@see odbc_num_rows() - Number of rows in a result\n
odbc_fetch_row odbc_fetch_row(resource $result_id [, int $row_number]) [bool]\nFetch a row. Fetches a row of the data that was returned by odbc_do() or\nodbc_exec(). After odbc_fetch_row() is called, the fields of that row can\nbe accessed with odbc_result().\n@param result_id The result identifier.\n@param row_number If `row_number` is not specified, odbc_fetch_row() will try\nto fetch the next row in the result set. Calls to odbc_fetch_row() with and\nwithout `row_number` can be mixed. To step through the result more than once,\nyou can call odbc_fetch_row() with `row_number` 1, and then continue doing\nodbc_fetch_row() without `row_number` to review the result. If a driver\ndoesn&#039;t support fetching rows by number, the `row_number` parameter\nis ignored.\n@return (PHP 4, PHP 5)\n
odbc_field_len odbc_field_len(resource $result_id, int $field_number) [int]\nGet the length (precision) of a field. Gets the length of the field referenced\nby number in the given result identifier.\n@param result_id The result identifier.\n@param field_number The field number. Field numbering starts at 1.\n@return (PHP 4, PHP 5)\n@see odbc_field_scale() - Get the scale of a field to get the scale of a\nfloating point number\n
odbc_field_name odbc_field_name(resource $result_id, int $field_number)\n[string]\nGet the columnname. Gets the name of the field occupying the given column\nnumber in the given result identifier.\n@param result_id The result identifier.\n@param field_number The field number. Field numbering starts at 1.\n@return (PHP 4, PHP 5)\n
odbc_field_num odbc_field_num(resource $result_id, string $field_name) [int]\nReturn column number. Gets the number of the column slot that corresponds\nto the named field in the given result identifier.\n@param result_id The result identifier.\n@param field_name The field name.\n@return (PHP 4, PHP 5)\n
odbc_field_precision odbc_field_precision\nAlias of odbc_field_len.\n@see odbc_field_scale() - Get the scale of a field to get the scale of a\nfloating point number.\n
odbc_field_scale odbc_field_scale(resource $result_id, int $field_number) [int]\nGet the scale of a field. Gets the scale of the field referenced by number\nin the given result identifier.\n@param result_id The result identifier.\n@param field_number The field number. Field numbering starts at 1.\n@return (PHP 4, PHP 5)\n
odbc_field_type odbc_field_type(resource $result_id, int $field_number)\n[string]\nDatatype of a field. Gets the SQL type of the field referenced by number in\nthe given result identifier.\n@param result_id The result identifier.\n@param field_number The field number. Field numbering starts at 1.\n@return (PHP 4, PHP 5)\n
odbc_foreignkeys odbc_foreignkeys(resource $connection_id, string\n$pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier,\nstring $fk_owner, string $fk_table) [resource]\nRetrieves a list of foreign keys. Retrieves a list of foreign keys in the\nspecified table or a list of foreign keys in other tables that refer to the\nprimary key in the specified table\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param pk_qualifier The primary key qualifier.\n@param pk_owner The primary key owner.\n@param pk_table The primary key table.\n@param fk_qualifier The foreign key qualifier.\n@param fk_owner The foreign key owner.\n@param fk_table The foreign key table.\n@return (PHP 4, PHP 5)\n
odbc_free_result odbc_free_result(resource $result_id) [bool]\nFree resources associated with a result. Free resources associated with a\nresult. odbc_free_result() only needs to be called if you are worried about\nusing too much memory while your script is running. All result memory will\nautomatically be freed when the script is finished.\n@param result_id The result identifier.\n@return (PHP 4, PHP 5)\n@note Note: If auto-commit is disabled (see odbc_autocommit()) and you call\nodbc_free_result() before committing, all pending transactions are rolled back.\n
odbc_gettypeinfo odbc_gettypeinfo(resource $connection_id [, int $data_type])\n[resource]\nRetrieves information about data types supported by the data source. Retrieves\ninformation about data types supported by the data source.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param data_type The data type, which can be used to restrict the information\nto a single data type.\n@return (PHP 4, PHP 5)\n
odbc_longreadlen odbc_longreadlen(resource $result_id, int $length) [bool]\nHandling of LONG columns. Enables handling of LONG and LONGVARBINARY columns.\n@param result_id The result identifier.\n@param length The number of bytes returned to PHP is controlled by the\nparameter length. If it is set to 0, Long column data is passed through to\nthe client.\n@return (PHP 4, PHP 5)\n@note Note: Handling of LONGVARBINARY columns is also affected by\nodbc_binmode().\n
odbc_next_result odbc_next_result(resource $result_id) [bool]\nChecks if multiple results are available. Checks if there are more result\nsets available as well as allowing access to the next result set via\nodbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.\n@param result_id The result identifier.\n@return (PHP 4 >= 4.0.5, PHP 5)\n
odbc_num_fields odbc_num_fields(resource $result_id) [int]\nNumber of columns in a result. Gets the number of fields (columns) in an\nODBC result.\n@param result_id The result identifier returned by odbc_exec().\n@return (PHP 4, PHP 5)\n
odbc_num_rows odbc_num_rows(resource $result_id) [int]\nNumber of rows in a result. Gets the number of rows in a result. For INSERT,\nUPDATE and DELETE statements odbc_num_rows() returns the number of rows\naffected. For a SELECT clause this `can` be the number of rows available.\n@param result_id The result identifier returned by odbc_exec().\n@return (PHP 4, PHP 5)\n@note Note: Using odbc_num_rows() to determine the number of rows available\nafter a SELECT will return -1 with many drivers.\n
odbc_pconnect odbc_pconnect(string $dsn, string $user, string $password [,\nint $cursor_type]) [resource]\nOpen a persistent database connection. Opens a persistent database\nconnection. This function is much like odbc_connect(), except that the\nconnection is not really closed when the script has finished. Future requests\nfor a connection with the same `dsn`, `user`, `password` combination (via\nodbc_connect() and odbc_pconnect()) can reuse the persistent connection.\n@return (PHP 4, PHP 5)\n@note Note: Persistent connections have no effect if PHP is used as a CGI\nprogram.\n@see odbc_connect() - Connect to a datasource\n@see Persistent Database Connections\n
odbc_prepare odbc_prepare(resource $connection_id, string $query_string)\n[resource]\nPrepares a statement for execution. Prepares a statement for execution. The\nresult identifier can be used later to execute the statement with\nodbc_execute(). Some databases (such as IBM DB2, MS SQL Server, and Oracle)\nsupport stored procedures that accept parameters of type IN, INOUT, and\nOUT as defined by the ODBC specification. However, the Unified ODBC driver\ncurrently only supports parameters of type IN to stored procedures.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param query_string The query string statement being prepared.\n@return (PHP 4, PHP 5)\n@see odbc_execute() - Execute a prepared statement\n
odbc_primarykeys odbc_primarykeys(resource $connection_id, string $qualifier,\nstring $owner, string $table) [resource]\nGets the primary keys for a table. Returns a result identifier that can be\nused to fetch the column names that comprise the primary key for a table.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier\n@param owner\n@param table\n@return (PHP 4, PHP 5)\n
odbc_procedurecolumns odbc_procedurecolumns(resource $connection_id) [resource]\nRetrieve information about parameters to procedures. Retrieve information\nabout parameters to procedures.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner. This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match\na single character.\n@param proc The proc. This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match\na single character.\n@param column The column. This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match\na single character.\n@return (PHP 4, PHP 5)\n
odbc_procedures odbc_procedures(resource $connection_id) [resource]\nGet the list of procedures stored in a specific data source. Lists all\nprocedures in the requested range.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner. This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match\na single character.\n@param name The name. This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match\na single character.\n@return (PHP 4, PHP 5)\n
odbc_result_all odbc_result_all(resource $result_id [, string $format]) [int]\nPrint result as HTML table. Prints all rows from a result identifier produced\nby odbc_exec(). The result is printed in HTML table format.\n@param result_id The result identifier.\n@param format Additional overall table formatting.\n@return (PHP 4, PHP 5)\n
odbc_result odbc_result(resource $result_id, mixed $field) [mixed]\nGet result data. Get result data\n@param result_id The ODBC resource.\n@param field The field name being retrieved. It can either be an integer\ncontaining the column number of the field you want; or it can be a string\ncontaining the name of the field.\n@return (PHP 4, PHP 5)\n
odbc_rollback odbc_rollback(resource $connection_id) [bool]\nRollback a transaction. Rolls back all pending statements on the connection.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@return (PHP 4, PHP 5)\n
odbc_setoption odbc_setoption(resource $id, int $function, int $option,\nint $param) [bool]\nAdjust ODBC settings. This function allows fiddling with the ODBC options\nfor a particular connection or query result. It was written to help find\nwork around to problems in quirky ODBC drivers. You should probably only use\nthis function if you are an ODBC programmer and understand the effects the\nvarious options will have. You will certainly need a good ODBC reference to\nexplain all the different options and values that can be used. Different\ndriver versions support different options. Because the effects may vary\ndepending on the ODBC driver, use of this function in scripts to be made\npublicly available is strongly discouraged. Also, some ODBC options are not\navailable to this function because they must be set before the connection is\nestablished or the query is prepared. However, if on a particular job it can\nmake PHP work so your boss doesn&#039;t tell you to use a commercial product,\nthat&#039;s all that really matters.\n@param id Is a connection id or result id on which to change the settings. For\nSQLSetConnectOption(), this is a connection id. For SQLSetStmtOption(),\nthis is a result id.\n@param function Is the ODBC function to use. The value should be 1 for\nSQLSetConnectOption() and 2 for SQLSetStmtOption().\n@param option The option to set.\n@param param The value for the given `option`.\n@return (PHP 4, PHP 5)\n
odbc_specialcolumns odbc_specialcolumns(resource $connection_id, int $type,\nstring $qualifier, string $owner, string $table, int $scope, int $nullable)\n[resource]\nRetrieves special columns. Retrieves either the optimal set of columns that\nuniquely identifies a row in the table, or columns that are automatically\nupdated when any value in the row is updated by a transaction.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param type When the type argument is SQL_BEST_ROWID, odbc_specialcolumns()\nreturns the column or columns that uniquely identify each row in the\ntable. When the type argument is SQL_ROWVER, odbc_specialcolumns() returns\nthe column or columns in the specified table, if any, that are automatically\nupdated by the data source when any value in the row is updated by any\ntransaction.\n@param qualifier The qualifier.\n@param owner The owner.\n@param table The table.\n@param scope The scope, which orders the result set.\n@param nullable The nullable option.\n@return (PHP 4, PHP 5)\n
odbc_statistics odbc_statistics(resource $connection_id, string $qualifier,\nstring $owner, string $table_name, int $unique, int $accuracy) [resource]\nRetrieve statistics about a table. Get statistics about a table and its\nindexes.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner.\n@param table_name The table name.\n@param unique The unique attribute.\n@param accuracy The accuracy.\n@return (PHP 4, PHP 5)\n
odbc_tableprivileges odbc_tableprivileges(resource $connection_id, string\n$qualifier, string $owner, string $name) [resource]\nLists tables and the privileges associated with each table. Lists tables in\nthe requested range and the privileges associated with each table.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner. Accepts the following search patterns: (&#039;%&#039;\nto match zero or more characters and &#039;_&#039; to match a single character)\n@param name The name. Accepts the following search patterns: (&#039;%&#039;\nto match zero or more characters and &#039;_&#039; to match a single character)\n@return (PHP 4, PHP 5)\n
odbc_tables odbc_tables(resource $connection_id [, string $qualifier [,\nstring $owner [, string $name [, string $types]]]]) [resource]\nGet the list of table names stored in a specific data source. Lists all tables\nin the requested range. To support enumeration of qualifiers, owners, and\ntable types, the following special semantics for the `qualifier`, `owner`,\n`name`, and `table_type` are available: If `qualifier` is a single percent\ncharacter (%) and `owner` and `name` are empty strings, then the result\nset contains a list of valid qualifiers for the data source. (All columns\nexcept the TABLE_QUALIFIER column contain NULLs.) If `owner` is a single\npercent character (%) and `qualifier` and `name` are empty strings, then\nthe result set contains a list of valid owners for the data source. (All\ncolumns except the TABLE_OWNER column contain NULLs.) If `table_type` is a\nsingle percent character (%) and `qualifier`, `owner` and `name` are empty\nstrings, then the result set contains a list of valid table types for the\ndata source. (All columns except the TABLE_TYPE column contain NULLs.)\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner. Accepts search patterns (&#039;%&#039; to match zero\nor more characters and &#039;_&#039; to match a single character).\n@param name The name. Accepts search patterns (&#039;%&#039; to match zero\nor more characters and &#039;_&#039; to match a single character).\n@param types If `table_type` is not an empty string, it must contain a\nlist of comma-separated values for the types of interest; each value\nmay be enclosed in single quotes (&#039;) or unquoted. For example,\n&quot;&#039;TABLE&#039;,&#039;VIEW&#039;&quot; or &quot;TABLE, VIEW&quot;. If\nthe data source does not support a specified table type, odbc_tables()\ndoes not return any results for that type.\n@return (PHP 4, PHP 5)\n@see odbc_tableprivileges() - Lists tables and the privileges associated\nwith each table\n
openal_buffer_create openal_buffer_create(void) [resource]\nGenerate OpenAL buffer.\n@return (PECL openal >= 0.1.0)\n@see openal_buffer_loadwav() - Load a .wav file into a buffer\n@see openal_buffer_data() - Load a buffer with data\n
openal_buffer_data openal_buffer_data(resource $buffer, int $format, string\n$data, int $freq) [bool]\nLoad a buffer with data.\n@param buffer An Open AL(Buffer) resource (previously created by\nopenal_buffer_create()).\n@param format Format of `data`, one of: AL_FORMAT_MONO8, AL_FORMAT_MONO16,\nAL_FORMAT_STEREO8 and AL_FORMAT_STEREO16\n@param data Block of binary audio data in the `format` and `freq` specified.\n@param freq Frequency of `data` given in Hz.\n@return (PECL openal >= 0.1.0)\n@see openal_buffer_loadwav() - Load a .wav file into a buffer\n@see openal_stream() - Begin streaming on a source\n
openal_buffer_destroy openal_buffer_destroy(resource $buffer) [bool]\nDestroys an OpenAL buffer.\n@param buffer An Open AL(Buffer) resource (previously created by\nopenal_buffer_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_buffer_create() - Generate OpenAL buffer\n
openal_buffer_get openal_buffer_get(resource $buffer, int $property) [int]\nRetrieve an OpenAL buffer property.\n@param buffer An Open AL(Buffer) resource (previously created by\nopenal_buffer_create()).\n@param property Specific property, one of: AL_FREQUENCY, AL_BITS, AL_CHANNELS\nand AL_SIZE.\n@return (PECL openal >= 0.1.0)\n@see openal_buffer_create() - Generate OpenAL buffer\n
openal_buffer_loadwav openal_buffer_loadwav(resource $buffer, string $wavfile)\n[bool]\nLoad a .wav file into a buffer.\n@param buffer An Open AL(Buffer) resource (previously created by\nopenal_buffer_create()).\n@param wavfile Path to .wav file on local file system.\n@return (PECL openal >= 0.1.0)\n@see openal_buffer_data() - Load a buffer with data\n@see openal_stream() - Begin streaming on a source\n
openal_context_create openal_context_create(resource $device) [resource]\nCreate an audio processing context.\n@param device An Open AL(Device) resource (previously created by\nopenal_device_open()).\n@return (PECL openal >= 0.1.0)\n@see openal_device_open() - Initialize the OpenAL audio layer\n@see openal_context_destroy() - Destroys a context\n
openal_context_current openal_context_current(resource $context) [bool]\nMake the specified context current.\n@param context An Open AL(Context) resource (previously created by\nopenal_context_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_context_create() - Create an audio processing context\n
openal_context_destroy openal_context_destroy(resource $context) [bool]\nDestroys a context.\n@param context An Open AL(Context) resource (previously created by\nopenal_context_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_context_create() - Create an audio processing context\n
openal_context_process openal_context_process(resource $context) [bool]\nProcess the specified context.\n@param context An Open AL(Context) resource (previously created by\nopenal_context_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_context_create() - Create an audio processing context\n@see openal_context_current() - Make the specified context current\n@see openal_context_suspend() - Suspend the specified context\n
openal_context_suspend openal_context_suspend(resource $context) [bool]\nSuspend the specified context.\n@param context An Open AL(Context) resource (previously created by\nopenal_context_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_context_create() - Create an audio processing context\n@see openal_context_current() - Make the specified context current\n@see openal_context_process() - Process the specified context\n
openal_device_close openal_device_close(resource $device) [bool]\nClose an OpenAL device.\n@param device An Open AL(Device) resource (previously created by\nopenal_device_open()) to be closed.\n@return (PECL openal >= 0.1.0)\n@see openal_device_open() - Initialize the OpenAL audio layer\n
openal_device_open openal_device_open([string $device_desc]) [resource]\nInitialize the OpenAL audio layer.\n@param device_desc Open an audio device optionally specified by\n`device_desc`. If `device_desc` is not specified the first available audio\ndevice will be used.\n@return (PECL openal >= 0.1.0)\n@see openal_device_close() - Close an OpenAL device\n@see openal_context_create() - Create an audio processing context\n
openal_listener_get openal_listener_get(int $property) [mixed]\nRetrieve a listener property.\n@param property Property to retrieve, one of: AL_GAIN (float), AL_POSITION\n(array(float,float,float)), AL_VELOCITY (array(float,float,float)) and\nAL_ORIENTATION (array(float,float,float)).\n@return (PECL openal >= 0.1.0)\n@see openal_listener_set() - Set a listener property\n
openal_listener_set openal_listener_set(int $property, mixed $setting) [bool]\nSet a listener property.\n@param property Property to set, one of: AL_GAIN (float), AL_POSITION\n(array(float,float,float)), AL_VELOCITY (array(float,float,float)) and\nAL_ORIENTATION (array(float,float,float)).\n@param setting Value to set, either float, or an array of floats as\nappropriate.\n@return (PECL openal >= 0.1.0)\n@see openal_listener_get() - Retrieve a listener property\n
openal_source_create openal_source_create(void) [resource]\nGenerate a source resource.\n@return (PECL openal >= 0.1.0)\n@see openal_source_set() - Set source property\n@see openal_source_play() - Start playing the source\n@see openal_source_destroy() - Destroy a source resource\n
openal_source_destroy openal_source_destroy(resource $source) [bool]\nDestroy a source resource.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_source_create() - Generate a source resource\n
openal_source_get openal_source_get(resource $source, int $property) [mixed]\nRetrieve an OpenAL source property.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@param property Property to get, one of: AL_SOURCE_RELATIVE (int),\nAL_SOURCE_STATE (int), AL_PITCH (float), AL_GAIN (float), AL_MIN_GAIN\n(float), AL_MAX_GAIN (float), AL_MAX_DISTANCE (float), AL_ROLLOFF_FACTOR\n(float), AL_CONE_OUTER_GAIN (float), AL_CONE_INNER_ANGLE (float),\nAL_CONE_OUTER_ANGLE (float), AL_REFERENCE_DISTANCE (float), AL_POSITION\n(array(float,float,float)), AL_VELOCITY (array(float,float,float)),\nAL_DIRECTION (array(float,float,float)).\n@return (PECL openal >= 0.1.0)\n@see openal_source_create() - Generate a source resource\n@see openal_source_set() - Set source property\n@see openal_source_play() - Start playing the source\n
openal_source_pause openal_source_pause(resource $source) [bool]\nPause the source.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_source_stop() - Stop playing the source\n@see openal_source_play() - Start playing the source\n@see openal_source_rewind() - Rewind the source\n
openal_source_play openal_source_play(resource $source) [bool]\nStart playing the source.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_source_stop() - Stop playing the source\n@see openal_source_pause() - Pause the source\n@see openal_source_rewind() - Rewind the source\n
openal_source_rewind openal_source_rewind(resource $source) [bool]\nRewind the source.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_source_stop() - Stop playing the source\n@see openal_source_pause() - Pause the source\n@see openal_source_play() - Start playing the source\n
openal_source_set openal_source_set(resource $source, int $property, mixed\n$setting) [bool]\nSet source property.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@param property Property to set, one of: AL_BUFFER (OpenAL(Source)),\nAL_LOOPING (bool), AL_SOURCE_RELATIVE (int), AL_SOURCE_STATE (int),\nAL_PITCH (float), AL_GAIN (float), AL_MIN_GAIN (float), AL_MAX_GAIN (float),\nAL_MAX_DISTANCE (float), AL_ROLLOFF_FACTOR (float), AL_CONE_OUTER_GAIN (float),\nAL_CONE_INNER_ANGLE (float), AL_CONE_OUTER_ANGLE (float), AL_REFERENCE_DISTANCE\n(float), AL_POSITION (array(float,float,float)), AL_VELOCITY\n(array(float,float,float)), AL_DIRECTION (array(float,float,float)).\n@param setting Value to assign to specified `property`. Refer to the\ndescription of `property` for a description of the value(s) expected.\n@return (PECL openal >= 0.1.0)\n@see openal_source_create() - Generate a source resource\n@see openal_source_get() - Retrieve an OpenAL source property\n@see openal_source_play() - Start playing the source\n
openal_source_stop openal_source_stop(resource $source) [bool]\nStop playing the source.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@return (PECL openal >= 0.1.0)\n@see openal_source_play() - Start playing the source\n@see openal_source_pause() - Pause the source\n@see openal_source_rewind() - Rewind the source\n
openal_stream openal_stream(resource $source, int $format, int $rate)\n[resource]\nBegin streaming on a source.\n@param source An Open AL(Source) resource (previously created by\nopenal_source_create()).\n@param format Format of `data`, one of: AL_FORMAT_MONO8, AL_FORMAT_MONO16,\nAL_FORMAT_STEREO8 and AL_FORMAT_STEREO16\n@param rate Frequency of data to stream given in Hz.\n@return (PECL openal >= 0.1.0)\n@see openal_source_create() - Generate a source resource\n@see fwrite() - Binary-safe file write\n
opendir opendir(string $path [, resource $context]) [resource]\nOpen directory handle. Opens up a directory handle to be used in subsequent\nclosedir(), readdir(), and rewinddir() calls.\n@param path The directory path that is to be opened\n@param context For a description of the `context` parameter, refer to the\nstreams section of the manual.\n@return (PHP 4, PHP 5)\n@see is_dir() - Tells whether the filename is a directory\n@see readdir() - Read entry from directory handle\n@see Dir\n
openlog openlog(string $ident, int $option, int $facility) [bool]\nOpen connection to system logger. openlog() opens a connection to the\nsystem logger for a program. The use of openlog() is optional. It will\nautomatically be called by syslog() if necessary, in which case `ident`\nwill default to FALSE.\n@param ident The string `ident` is added to each message.\n@param option The `option` argument is used to indicate what logging\noptions will be used when generating a log message. openlog() Options\nConstant Description LOG_CONS if there is an error while sending data to\nthe system logger, write directly to the system console LOG_NDELAY open the\nconnection to the logger immediately LOG_ODELAY (default) delay opening the\nconnection until the first message is logged LOG_PERROR print log message\nalso to standard error LOG_PID include PID with each message You can use one\nor more of this options. When using multiple options you need to `OR` them,\ni.e. to open the connection immediately, write to the console and include\nthe PID in each message, you will use: `LOG_CONS | LOG_NDELAY | LOG_PID`\n@param facility The `facility` argument is used to specify what type\nof program is logging the message. This allows you to specify (in your\nmachine&#039;s syslog configuration) how messages coming from different\nfacilities will be handled. openlog() Facilities Constant Description LOG_AUTH\nsecurity/authorization messages (use LOG_AUTHPRIV instead in systems where that\nconstant is defined) LOG_AUTHPRIV security/authorization messages (private)\nLOG_CRON clock daemon (cron and at) LOG_DAEMON other system daemons LOG_KERN\nkernel messages LOG_LOCAL0 ... LOG_LOCAL7 reserved for local use, these are not\navailable in Windows LOG_LPR line printer subsystem LOG_MAIL mail subsystem\nLOG_NEWS USENET news subsystem LOG_SYSLOG messages generated internally by\nsyslogd LOG_USER generic user-level messages LOG_UUCP UUCP subsystem Note:\nLOG_USER is the only valid log type under Windows operating systems\n@return (PHP 4, PHP 5)\n@see syslog() - Generate a system log message\n@see closelog() - Close connection to system logger\n
openssl_csr_export_to_file openssl_csr_export_to_file(resource $csr, string\n$outfilename [, bool $notext=true]) [bool]\nExports a CSR to a file. openssl_csr_export_to_file() takes the Certificate\nSigning Request represented by `csr` and saves it as ascii-armoured text\ninto the file named by `outfilename`.\n@param csr\n@param outfilename Path to the output file.\n@param notext The optional parameter `notext` affects the verbosity of\nthe output; if it is FALSE, then additional human-readable information is\nincluded in the output. The default value of `notext` is TRUE.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see openssl_csr_export() - Exports a CSR as a string\n@see openssl_csr_new() - Generates a CSR\n@see openssl_csr_sign() - Sign a CSR with another certificate (or itself)\nand generate a certificate\n
openssl_csr_export openssl_csr_export(resource $csr, string &$out [, bool\n$notext=true]) [bool]\nExports a CSR as a string. openssl_csr_export() takes the Certificate Signing\nRequest represented by `csr` and stores it as ascii-armoured text into `out`,\nwhich is passed by reference.\n@param csr\n@param out\n@param notext The optional parameter `notext` affects the verbosity of\nthe output; if it is FALSE, then additional human-readable information is\nincluded in the output. The default value of `notext` is TRUE.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see openssl_csr_export_to_file() - Exports a CSR to a file\n@see openssl_csr_new() - Generates a CSR\n@see openssl_csr_sign() - Sign a CSR with another certificate (or itself)\nand generate a certificate\n
openssl_csr_get_public_key openssl_csr_get_public_key(mixed $csr [, bool\n$use_shortnames=true]) [resource]\nReturns the public key of a CERT.\n
openssl_csr_get_subject openssl_csr_get_subject(mixed $csr [, bool\n$use_shortnames=true]) [array]\nReturns the subject of a CERT.\n
openssl_csr_new openssl_csr_new(array $dn, resource &$privkey [, array\n$configargs [, array $extraattribs]]) [mixed]\nGenerates a CSR. openssl_csr_new() generates a new CSR (Certificate Signing\nRequest) based on the information provided by `dn`, which represents the\nDistinguished Name to be used in the certificate. Note: You need to have a\nvalid openssl.cnf installed for this function to operate correctly. See the\nnotes under the installation section for more information.\n@param dn The Distinguished Name to be used in the certificate.\n@param privkey `privkey` should be set to a private key that was previously\ngenerated by openssl_pkey_new() (or otherwise obtained from the other\nopenssl_pkey family of functions). The corresponding public portion of the\nkey will be used to sign the CSR.\n@param configargs By default, the information in your system `openssl.conf` is\nused to initialize the request; you can specify a configuration file section by\nsetting the `config_section_section` key of `configargs`. You can also specify\nan alternative openssl configuration file by setting the value of the `config`\nkey to the path of the file you want to use. The following keys, if present in\n`configargs` behave as their equivalents in the `openssl.conf`, as listed in\nthe table below. Configuration overrides `configargs` key type `openssl.conf`\nequivalent description digest_alg string default_md Selects which digest method\nto use x509_extensions string x509_extensions Selects which extensions should\nbe used when creating an x509 certificate req_extensions string req_extensions\nSelects which extensions should be used when creating a CSR private_key_bits\ninteger default_bits Specifies how many bits should be used to generate\na private key private_key_type integer none Specifies the type of private\nkey to create. This can be one of OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH\nor OPENSSL_KEYTYPE_RSA. The default value is OPENSSL_KEYTYPE_RSA which is\ncurrently the only supported key type. encrypt_key boolean encrypt_key Should\nan exported key (with passphrase) be encrypted?\n@param extraattribs `extraattribs` is used to specify additional configuration\noptions for the CSR. Both `dn` and `extraattribs` are associative arrays whose\nkeys are converted to OIDs and applied to the relevant part of the request.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_csr_sign openssl_csr_sign(mixed $csr, mixed $cacert, mixed $priv_key,\nint $days [, array $configargs [, int $serial=0]]) [resource]\nSign a CSR with another certificate (or itself) and generate a\ncertificate. openssl_csr_sign() generates an x509 certificate resource from\nthe given CSR. Note: You need to have a valid openssl.cnf installed for this\nfunction to operate correctly. See the notes under the installation section\nfor more information.\n@param csr A CSR previously generated by openssl_csr_new(). It can also be\nthe path to a PEM encoded CSR when specified as file://path/to/csr or an\nexported string generated by openssl_csr_export().\n@param cacert The generated certificate will be signed by `cacert`. If\n`cacert` is NULL, the generated certificate will be a self-signed certificate.\n@param priv_key `priv_key` is the private key that corresponds to `cacert`.\n@param days `days` specifies the length of time for which the generated\ncertificate will be valid, in days.\n@param configargs You can finetune the CSR signing by `configargs`. See\nopenssl_csr_new() for more information about `configargs`.\n@param serial An optional the serial number of issued certificate. If not\nspecified it will default to 0.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_decrypt openssl_decrypt(string $data, string $method, string $password\n[, bool $raw_input=false [, string $iv=&quot;&quot;]]) [string]\nDecrypts data. Takes a raw or base64 encoded string and decrypts it using\na given method and key. This function is currently not documented; only its\nargument list is available.\n@param data The data.\n@param method The cipher method.\n@param password The password.\n@param raw_input Setting to TRUE will take a raw encoded string, otherwise\na base64 string is assumed for the `data` parameter.\n@return (PHP 5 >= 5.3.0)\n@see openssl_encrypt() - Encrypts data\n
openssl_dh_compute_key openssl_dh_compute_key(string $pub_key, resource\n$dh_key) [string]\nComputes shared secret for public value of remote DH key and local DH key.\n@param pub_key Public key\n@param dh_key DH key\n@return (No version information available, might only be in SVN)\n
openssl_digest openssl_digest(string $data, string $method [, bool\n$raw_output=false]) [string]\nComputes a digest. Computes a digest hash value for the given data using a\ngiven method, and returns a raw or binhex encoded string. This function is\ncurrently not documented; only its argument list is available.\n@param data The data.\n@param method The digest method.\n@param raw_output Setting to TRUE will return as raw output data, otherwise\nthe return value is binhex encoded.\n@return (PHP 5 >= 5.3.0)\n@see openssl_get_cipher_methods() - Gets available cipher methods\n
openssl_encrypt openssl_encrypt(string $data, string $method, string $password\n[, bool $raw_output=false [, string $iv=&quot;&quot;]]) [string]\nEncrypts data. Encrypts given data with given method and key, returns a\nraw or base64 encoded string This function is currently not documented;\nonly its argument list is available.\n@param data The data.\n@param method The cipher method.\n@param password The password.\n@param raw_output Setting to TRUE will return as raw output data, otherwise\nthe return value is base64 encoded.\n@return (PHP 5 >= 5.3.0)\n@see openssl_decrypt() - Decrypts data\n
openssl_error_string openssl_error_string(void) [string]\nReturn openSSL error message. openssl_error_string() returns the last error\nfrom the openSSL library. Error messages are stacked, so this function should\nbe called multiple times to collect all of the information.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_free_key openssl_free_key(resource $key_identifier) [void]\nFree key resource. openssl_free_key() frees the key associated with the\nspecified `key_identifier` from memory.\n@param key_identifier\n@return (PHP 4 >= 4.0.4, PHP 5)\n
openssl_get_cipher_methods openssl_get_cipher_methods([bool $aliases=false])\n[array]\nGets available cipher methods. Gets a list of available cipher methods.\n@param aliases Set to TRUE if cipher aliases should be included within the\nreturned array.\n@return (PHP 5 >= 5.3.0)\n@see openssl_get_md_methods() - Gets available digest methods\n
openssl_get_md_methods openssl_get_md_methods([bool $aliases=false]) [array]\nGets available digest methods. Gets a list of available digest methods.\n@param aliases Set to TRUE if digest aliases should be included within the\nreturned array.\n@return (PHP 5 >= 5.3.0)\n@see openssl_digest() - Computes a digest\n@see openssl_get_cipher_methods() - Gets available cipher methods\n
openssl_get_privatekey openssl_get_privatekey\nAlias of openssl_pkey_get_private.\n
openssl_get_publickey openssl_get_publickey\nAlias of openssl_pkey_get_public.\n
openssl_open openssl_open(string $sealed_data, string &$open_data, string\n$env_key, mixed $priv_key_id [, string $method]) [bool]\nOpen sealed data. openssl_open() opens (decrypts) `sealed_data` using\nthe private key associated with the key identifier `priv_key_id` and the\nenvelope key `env_key`, and fills `open_data` with the decrypted data. The\nenvelope key is generated when the data are sealed and can only be used by\none specific private key. See openssl_seal() for more information.\n@param sealed_data\n@param open_data If the call is successful the opened data is returned in\nthis parameter.\n@param env_key\n@param priv_key_id\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see openssl_seal() - Seal (encrypt) data\n
openssl_pkcs12_export_to_file openssl_pkcs12_export_to_file(mixed $x509,\nstring $filename, mixed $priv_key, string $pass [, array $args]) [bool]\nExports a PKCS#12 Compatible Certificate Store\nFile. openssl_pkcs12_export_to_file() stores `x509` into a file named by\n`filename` in a PKCS#12 file format.\n@param x509 See Key/Certificate parameters for a list of valid values.\n@param filename Path to the output file.\n@param priv_key Private key component of PKCS#12 file.\n@param pass Encryption password for unlocking the PKCS#12 file.\n@param args\n@return (PHP 5 >= 5.2.2)\n
openssl_pkcs12_export openssl_pkcs12_export(mixed $x509, string &$out,\nmixed $priv_key, string $pass [, array $args]) [bool]\nExports a PKCS#12 Compatible Certificate Store File to\nvariable.. openssl_pkcs12_export() stores `x509` into a string named by\n`out` in a PKCS#12 file format.\n@param x509 See Key/Certificate parameters for a list of valid values.\n@param out On success, this will hold the PKCS#12.\n@param priv_key Private key component of PKCS#12 file.\n@param pass Encryption password for unlocking the PKCS#12 file.\n@param args\n@return (PHP 5 >= 5.2.2)\n
openssl_pkcs12_read openssl_pkcs12_read(string $pkcs12, array &$certs,\nstring $pass) [bool]\nParse a PKCS#12 Certificate Store into an array. openssl_pkcs12_read() parses\nthe PKCS#12 certificate store supplied by `pkcs12` into a array named `certs`.\n@param pkcs12\n@param certs On success, this will hold the Certificate Store Data.\n@param pass Encryption password for unlocking the PKCS#12 file.\n@return (PHP 5 >= 5.2.2)\n
openssl_pkcs7_decrypt openssl_pkcs7_decrypt(string $infilename, string\n$outfilename, mixed $recipcert [, mixed $recipkey]) [bool]\nDecrypts an S/MIME encrypted message. Decrypts the S/MIME encrypted message\ncontained in the file specified by `infilename` using the certificate and\nits associated private key specified by `recipcert` and `recipkey`.\n@param infilename\n@param outfilename The decrypted message is written to the file specified by\n`outfilename`.\n@param recipcert\n@param recipkey\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_pkcs7_encrypt openssl_pkcs7_encrypt(string $infile, string\n$outfile, mixed $recipcerts, array $headers [, int $flags=0 [, int\n$cipherid=OPENSSL_CIPHER_RC2_40]]) [bool]\nEncrypt an S/MIME message. openssl_pkcs7_encrypt() takes the contents of\nthe file named `infile` and encrypts them using an RC2 40-bit cipher so that\nthey can only be read by the intended recipients specified by `recipcerts`.\n@param infile\n@param outfile\n@param recipcerts Either a lone X.509 certificate, or an array of X.509\ncertificates.\n@param headers `headers` is an array of headers that will be prepended to\nthe data after it has been encrypted. `headers` can be either an associative\narray keyed by header name, or an indexed array, where each element contains\na single header line.\n@param flags `flags` can be used to specify options that affect the encoding\nprocess - see PKCS7 constants.\n@param cipherid Cipher can be selected with `cipherid`.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_pkcs7_sign openssl_pkcs7_sign(string $infilename, string $outfilename,\nmixed $signcert, mixed $privkey, array $headers [, int $flags=PKCS7_DETACHED\n[, string $extracerts]]) [bool]\nSign an S/MIME message. openssl_pkcs7_sign() takes the contents of the file\nnamed `infilename` and signs them using the certificate and its matching\nprivate key specified by `signcert` and `privkey` parameters.\n@param infilename\n@param outfilename\n@param signcert\n@param privkey\n@param headers `headers` is an array of headers that will be prepended to\nthe data after it has been signed (see openssl_pkcs7_encrypt() for more\ninformation about the format of this parameter).\n@param flags `flags` can be used to alter the output - see PKCS7 constants.\n@param extracerts `extracerts` specifies the name of a file containing a bunch\nof extra certificates to include in the signature which can for example be\nused to help the recipient to verify the certificate that you used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_pkcs7_verify openssl_pkcs7_verify(string $filename, int $flags\n[, string $outfilename [, array $cainfo [, string $extracerts [, string\n$content]]]]) [mixed]\nVerifies the signature of an S/MIME signed message. openssl_pkcs7_verify()\nreads the S/MIME message contained in the given file and examines the\ndigital signature.\n@param filename Path to the message.\n@param flags `flags` can be used to affect how the signature is verified -\nsee PKCS7 constants for more information.\n@param outfilename If the `outfilename` is specified, it should be a string\nholding the name of a file into which the certificates of the persons that\nsigned the messages will be stored in PEM format.\n@param cainfo If the `cainfo` is specified, it should hold information\nabout the trusted CA certificates to use in the verification process -\nsee certificate verification for more information about this parameter.\n@param extracerts If the `extracerts` is specified, it is the filename of\na file containing a bunch of certificates to use as untrusted CAs.\n@param content You can specify a filename with `content` that will be filled\nwith the verified data, but with the signature information stripped.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: As specified in RFC 2045, lines may not be longer than 76\ncharacters in the `filename` parameter.\n
openssl_pkey_export_to_file openssl_pkey_export_to_file(mixed $key, string\n$outfilename [, string $passphrase [, array $configargs]]) [bool]\nGets an exportable representation of a key into a\nfile. openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded)\nrendition of `key` into the file named by `outfilename`. Note: You need to\nhave a valid openssl.cnf installed for this function to operate correctly. See\nthe notes under the installation section for more information.\n@param key\n@param outfilename Path to the output file.\n@param passphrase The key can be optionally protected by a `passphrase`.\n@param configargs `configargs` can be used to fine-tune the export process by\nspecifying and/or overriding options for the openssl configuration file. See\nopenssl_csr_new() for more information about `configargs`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_pkey_export openssl_pkey_export(mixed $key, string &$out [, string\n$passphrase [, array $configargs]]) [bool]\nGets an exportable representation of a key into a string. openssl_pkey_export()\nexports `key` as a PEM encoded string and stores it into `out` (which is\npassed by reference). Note: You need to have a valid openssl.cnf installed\nfor this function to operate correctly. See the notes under the installation\nsection for more information.\n@param key\n@param out\n@param passphrase The key is optionally protected by `passphrase`.\n@param configargs `configargs` can be used to fine-tune the export process by\nspecifying and/or overriding options for the openssl configuration file. See\nopenssl_csr_new() for more information about `configargs`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_pkey_free openssl_pkey_free(resource $key) [void]\nFrees a private key. This function frees a private key created by\nopenssl_pkey_new().\n@param key Resource holding the key.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_pkey_get_details openssl_pkey_get_details(resource $key) [array]\nReturns an array with the key details. This function returns the key details\n(bits, key, type).\n@param key Resource holding the key.\n@return (PHP 5 >= 5.2.0)\n
openssl_pkey_get_private openssl_pkey_get_private(mixed $key [, string\n$passphrase=&quot;&quot;]) [resource]\nGet a private key. openssl_get_privatekey() parses `key` and prepares it\nfor use by other functions.\n@param key `key` can be one of the following: a string having the format\nfile://path/to/file.pem. The named file must contain a PEM encoded\ncertificate/private key (it may contain both). A PEM formatted private key.\n@param passphrase The optional parameter `passphrase` must be used if the\nspecified key is encrypted (protected by a passphrase).\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_pkey_get_public openssl_pkey_get_public(mixed $certificate) [resource]\nExtract public key from certificate and prepare it for\nuse. openssl_get_publickey() extracts the public key from `certificate`\nand prepares it for use by other functions.\n@param certificate `certificate` can be one of the following: an X.509\ncertificate resource a string having the format file://path/to/file.pem. The\nnamed file must contain a PEM encoded certificate/private key (it may contain\nboth). A PEM formatted private key.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_pkey_new openssl_pkey_new([array $configargs]) [resource]\nGenerates a new private key. openssl_pkey_new() generates a new private\nand public key pair. The public component of the key can be obtained using\nopenssl_pkey_get_public(). Note: You need to have a valid openssl.cnf installed\nfor this function to operate correctly. See the notes under the installation\nsection for more information.\n@param configargs You can finetune the key generation (such as specifying\nthe number of bits) using `configargs`. See openssl_csr_new() for more\ninformation about `configargs`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_private_decrypt openssl_private_decrypt(string $data, string\n&$decrypted, mixed $key [, int $padding=OPENSSL_PKCS1_PADDING]) [bool]\nDecrypts data with private key. openssl_private_decrypt() decrypts `data`\nthat was previous encrypted via openssl_public_encrypt() and stores the\nresult into `decrypted`. You can use this function e.g. to decrypt data\nwhich were supposed only to you.\n@param data\n@param decrypted\n@param key `key` must be the private key corresponding that was used to\nencrypt the data.\n@param padding `padding` can be one of OPENSSL_PKCS1_PADDING,\nOPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see openssl_public_encrypt() - Encrypts data with public key\n@see openssl_public_decrypt() - Decrypts data with public key\n
openssl_private_encrypt openssl_private_encrypt(string $data, string &$crypted,\nmixed $key [, int $padding=OPENSSL_PKCS1_PADDING]) [bool]\nEncrypts data with private key. openssl_private_encrypt() encrypts `data`\nwith private `key` and stores the result into `crypted`. Encrypted data can\nbe decrypted via openssl_public_decrypt(). This function can be used e.g. to\nsign data (or its hash) to prove that it is not written by someone else.\n@param data\n@param crypted\n@param key\n@param padding `padding` can be one of OPENSSL_PKCS1_PADDING,\nOPENSSL_NO_PADDING.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see openssl_public_encrypt() - Encrypts data with public key\n@see openssl_public_decrypt() - Decrypts data with public key\n
openssl_public_decrypt openssl_public_decrypt(string $data, string &$decrypted,\nmixed $key [, int $padding=OPENSSL_PKCS1_PADDING]) [bool]\nDecrypts data with public key. openssl_public_decrypt() decrypts `data`\nthat was previous encrypted via openssl_private_encrypt() and stores the\nresult into `decrypted`. You can use this function e.g. to check if the\nmessage was written by the owner of the private key.\n@param data\n@param decrypted\n@param key `key` must be the public key corresponding that was used to\nencrypt the data.\n@param padding `padding` can be one of OPENSSL_PKCS1_PADDING,\nOPENSSL_NO_PADDING.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see openssl_private_encrypt() - Encrypts data with private key\n@see openssl_private_decrypt() - Decrypts data with private key\n
openssl_public_encrypt openssl_public_encrypt(string $data, string &$crypted,\nmixed $key [, int $padding=OPENSSL_PKCS1_PADDING]) [bool]\nEncrypts data with public key. openssl_public_encrypt() encrypts `data` with\npublic `key` and stores the result into `crypted`. Encrypted data can be\ndecrypted via openssl_private_decrypt(). This function can be used e.g. to\nencrypt message which can be then read only by owner of the private key. It\ncan be also used to store secure data in database.\n@param data\n@param crypted This will hold the result of the encryption.\n@param key The public key.\n@param padding `padding` can be one of OPENSSL_PKCS1_PADDING,\nOPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see openssl_private_encrypt() - Encrypts data with private key\n@see openssl_private_decrypt() - Decrypts data with private key\n
openssl_random_pseudo_bytes openssl_random_pseudo_bytes(int $length [,\nbool &$crypto_strong]) [string]\nGenerate a pseudo-random string of bytes. Generates a string of pseudo-random\nbytes, with the number of bytes determined by the `length` parameter. It\nalso indicates if a cryptographically strong algorithm was used to produce\nthe pseudo-random bytes, and does this via the optional `crypto_strong`\nparameter. It&#039;s rare for this to be FALSE, but some systems may be\nbroken or old.\n@param length The length of the desired string of bytes. Must be a positive\ninteger. PHP will try to cast this parameter to a non-null integer to use it.\n@param crypto_strong If passed into the function, this will hold a boolean\nvalue that determines if the algorithm used was &quot;cryptographically\nstrong&quot;, e.g., safe for usage with GPG, passwords, etc. TRUE if it did,\notherwise FALSE\n@return (PHP 5 >= 5.3.0)\n@see bin2hex() - Convert binary data into hexadecimal representation\n@see crypt() - One-way string hashing\n@see mt_rand() - Generate a better random value\n@see uniqid() - Generate a unique ID\n
openssl_seal openssl_seal(string $data, string &$sealed_data, array &$env_keys,\narray $pub_key_ids [, string $method]) [int]\nSeal (encrypt) data. openssl_seal() seals (encrypts) `data` by using RC4 with\na randomly generated secret key. The key is encrypted with each of the public\nkeys associated with the identifiers in `pub_key_ids` and each encrypted\nkey is returned in `env_keys`. This means that one can send sealed data\nto multiple recipients (provided one has obtained their public keys). Each\nrecipient must receive both the sealed data and the envelope key that was\nencrypted with the recipient&#039;s public key.\n@param data\n@param sealed_data\n@param env_keys\n@param pub_key_ids\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see openssl_open() - Open sealed data\n
openssl_sign openssl_sign(string $data, string &$signature, mixed $priv_key_id\n[, int $signature_alg=OPENSSL_ALGO_SHA1]) [bool]\nGenerate signature. openssl_sign() computes a signature for the specified\n`data` by using SHA1 for hashing followed by encryption using the private\nkey associated with `priv_key_id`. Note that the data itself is not encrypted.\n@param data\n@param signature If the call was successful the signature is returned in\n`signature`.\n@param priv_key_id\n@param signature_alg For more information see the list of Signature Algorithms.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see openssl_verify() - Verify signature\n
openssl_verify openssl_verify(string $data, string $signature, mixed\n$pub_key_id [, int $signature_alg=OPENSSL_ALGO_SHA1]) [int]\nVerify signature. openssl_verify() verifies that the `signature` is correct for\nthe specified `data` using the public key associated with `pub_key_id`. This\nmust be the public key corresponding to the private key used for signing.\n@param data\n@param signature\n@param pub_key_id\n@param signature_alg For more information see the list of Signature Algorithms.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see openssl_sign() - Generate signature\n
openssl_x509_check_private_key openssl_x509_check_private_key(mixed $cert,\nmixed $key) [bool]\nChecks if a private key corresponds to a certificate. Checks whether the given\n`key` is the private key that corresponds to `cert`.\n@param cert The certificate.\n@param key The private key.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_x509_checkpurpose openssl_x509_checkpurpose(mixed $x509cert, int\n$purpose [, array $cainfo=array() [, string $untrustedfile]]) [int]\nVerifies if a certificate can be used for a particular\npurpose. openssl_x509_checkpurpose() examines a certificate to see if it\ncan be used for the specified `purpose`.\n@param x509cert The examined certificate.\n@param purpose openssl_x509_checkpurpose() purposes Constant Description\nX509_PURPOSE_SSL_CLIENT Can the certificate be used for the client side of an\nSSL connection? X509_PURPOSE_SSL_SERVER Can the certificate be used for the\nserver side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert be\nused for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the cert be used\nto sign S/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can the cert be used to\nencrypt S/MIME email? X509_PURPOSE_CRL_SIGN Can the cert be used to sign a\ncertificate revocation list (CRL)? X509_PURPOSE_ANY Can the cert be used for\nAny/All purposes? These options are not bitfields - you may specify one only!\n@param cainfo `cainfo` should be an array of trusted CA files/dirs as\ndescribed in Certificate Verification.\n@param untrustedfile If specified, this should be the name of a PEM encoded\nfile holding certificates that can be used to help verify the certificate,\nalthough no trust is placed in the certificates that come from that file.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_x509_export_to_file openssl_x509_export_to_file(mixed $x509, string\n$outfilename [, bool $notext]) [bool]\nExports a certificate to file. openssl_x509_export_to_file() stores `x509`\ninto a file named by `outfilename` in a PEM encoded format.\n@param x509 See Key/Certificate parameters for a list of valid values.\n@param outfilename Path to the output file.\n@param notext The optional parameter `notext` affects the verbosity of\nthe output; if it is FALSE, then additional human-readable information is\nincluded in the output. The default value of `notext` is TRUE.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_x509_export openssl_x509_export(mixed $x509, string &$output [,\nbool $notext]) [bool]\nExports a certificate as a string. openssl_x509_export() stores `x509`\ninto a string named by `output` in a PEM encoded format.\n@param x509 See Key/Certificate parameters for a list of valid values.\n@param output On success, this will hold the PEM.\n@param notext The optional parameter `notext` affects the verbosity of\nthe output; if it is FALSE, then additional human-readable information is\nincluded in the output. The default value of `notext` is TRUE.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
openssl_x509_free openssl_x509_free(resource $x509cert) [void]\nFree certificate resource. openssl_x509_free() frees the certificate associated\nwith the specified `x509cert` resource from memory.\n@param x509cert\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_x509_parse openssl_x509_parse(mixed $x509cert [, bool\n$shortnames=true]) [array]\nParse an X509 certificate and return the information as\nan array. openssl_x509_parse() returns information about the supplied\n`x509cert`, including fields such as subject name, issuer name, purposes,\nvalid from and valid to dates etc.\n@param x509cert\n@param shortnames `shortnames` controls how the data is indexed in the array\n- if `shortnames` is TRUE (the default) then fields will be indexed with\nthe short name form, otherwise, the long name form will be used - e.g.:\nCN is the shortname form of commonName.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
openssl_x509_read openssl_x509_read(mixed $x509certdata) [resource]\nParse an X.509 certificate and return a resource identifier for\n  it. openssl_x509_read() parses the certificate supplied by `x509certdata`\n  and returns a resource identifier for it.\n@param x509certdata\n@return (PHP 4 >= 4.0.6, PHP 5)\n
close bool OCI-Lob::close ( void )\nCloses LOB descriptor.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->writeTemporary\n
oci_lob_copy oci_lob_copy(OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length=0])\n[bool]\nCopies large object. Copies a large object or a part of a large object to\nanother large object. Old LOB-recipient data will be overwritten. If you\nneed to copy a particular part of a LOB to a particular position of a LOB,\nuse oci_lob_seek() to move LOB internal pointers.\n@param lob_to The destination LOB.\n@param lob_from The copied LOB.\n@param length Indicates the length of data to be copied.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
eof bool OCI-Lob::eof ( void )\nTests for end-of-file on a large object's descriptor.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->size\n
erase int OCI-Lob::erase ([ int $offset [, int $length ]] )\nErases a specified portion of the internal LOB data.\n@param offset\n@param length\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->truncate\n
export bool OCI-Lob::export ( string $filename [, int $start [, int $length\n]] )\nExports LOB's contents to a file.\n@param filename Path to the file.\n@param start Indicates from where to start exporting.\n@param length Indicates the length of data to be exported.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->import\n
flush bool OCI-Lob::flush ([ int $flag ] )\nFlushes/writes buffer of the LOB to the server.\n@param flag By default, resources are not freed, but using flag\nOCI_LOB_BUFFER_FREE you can do it explicitly. Be sure you know what\nyou&#039;re doing - next read/write operation to the same part of LOB will\ninvolve a round-trip to the server and initialize new buffer resources. It\nis recommended to use OCI_LOB_BUFFER_FREE flag only when you are not going\nto work with the LOB anymore.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->getBuffering\n@see OCI-Lob->setBuffering\n
free bool OCI-Lob::free ( void )\nFrees resources associated with the LOB descriptor.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
getBuffering bool OCI-Lob::getBuffering ( void )\nReturns current state of buffering for the large object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->setBuffering\n
import bool OCI-Lob::import ( string $filename )\nImports file data to the LOB.\n@param filename Path to the file.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->export\n@see OCI-Lob->write\n
oci_lob_is_equal oci_lob_is_equal(OCI-Lob $lob1, OCI-Lob $lob2) [bool]\nCompares two LOB/FILE locators for equality. Compares two LOB/FILE locators.\n@param lob1 A LOB identifier.\n@param lob2 A LOB identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
load string OCI-Lob::load ( void )\nReturns large object's contents.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->read\n
read string OCI-Lob::read ( int $length )\nReads part of the large object.\n@param length The length of data to read, in bytes.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->load\n@see OCI-Lob->write\n
rewind bool OCI-Lob::rewind ( void )\nMoves the internal pointer to the beginning of the large object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->seek\n@see OCI-Lob->tell\n
save bool OCI-Lob::save ( string $data [, int $offset ] )\nSaves data to the large object.\n@param data The data to be saved.\n@param offset Can be used to indicate offset from the beginning of the\nlarge object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->write\n@see OCI-Lob->import\n
saveFile OCI-Lob->saveFile\nAlias of oci_lob_import.\n
seek bool OCI-Lob::seek ( int $offset [, int $whence = OCI_SEEK_SET ] )\nSets the internal pointer of the large object.\n@param offset Indicates the amount of bytes, on which internal pointer should\nbe moved from the position, pointed by `whence`.\n@param whence May be one of: OCI_SEEK_SET - sets the position equal to `offset`\nOCI_SEEK_CUR - adds `offset` bytes to the current position OCI_SEEK_END -\nadds `offset` bytes to the end of large object (use negative value to move\nto a position before the end of large object)\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->rewind\n@see OCI-Lob->tell\n@see OCI-Lob->eof\n
setBuffering bool OCI-Lob::setBuffering ( bool $on_off )\nChanges current state of buffering for the large object.\n@param on_off TRUE for on and FALSE for off.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->getBuffering\n
size int OCI-Lob::size ( void )\nReturns size of large object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
tell int OCI-Lob::tell ( void )\nReturns the current position of internal pointer of large object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->rewind\n@see OCI-Lob->size\n@see OCI-Lob->eof\n
truncate bool OCI-Lob::truncate ([ int $length = 0 ] )\nTruncates large object.\n@param length If provided, this method will truncate the LOB to `length`\nbytes. Otherwise, it will completrely purge the LOB.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->erase\n
write int OCI-Lob::write ( string $data [, int $length ] )\nWrites data to the large object.\n@param data The data to write in the LOB.\n@param length If this parameter is given, writing will stop after `length`\nbytes have been written or the end of `data` is reached, whichever comes first.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->read\n
writeTemporary bool OCI-Lob::writeTemporary ( string $data [, int $lob_type =\nOCI_TEMP_CLOB ] )\nWrites a temporary large object.\n@param data The data to write.\n@param lob_type Can be one of the following: OCI_TEMP_BLOB is used to create\ntemporary BLOBs OCI_TEMP_CLOB is used to create temporary CLOBs\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->close\n
writeToFile OCI-Lob->writeToFile\nAlias of oci_lob_export.\n
oci_new_collection oci_new_collection(resource $connection, string $tdo [,\nstring $schema=NULL]) [OCI-Collection]\nAllocates new collection object. Allocates a new collection object.\n@param connection An Oracle connection identifier, returned by oci_connect()\nor oci_pconnect().\n@param tdo Should be a valid named type (uppercase).\n@param schema Should point to the scheme, where the named type was created. The\nname of the current user is the default value.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocinewcollection()\ninstead. This name still can be used, it was left as alias of\noci_new_collection() for downwards compatability. This, however, is deprecated\nand not recommended.\n
oci_new_connect oci_new_connect(string $username, string $password [, string\n$connection_string [, string $character_set [, int $session_mode]]]) [resource]\nConnect to the Oracle server using a unique connection. Establishes a\nnew connection to an Oracle server and logs on. Unlike oci_connect() and\noci_pconnect(), oci_new_connect() does not cache connections and will always\nreturn a brand-new freshly opened connection handle. This is useful if your\napplication needs transactional isolation between two sets of queries.\n@param username The Oracle user name.\n@param password The password for `username`.\n@param connection_string Contains the `Oracle instance` to connect to. It can\nbe an &raquo; Easy Connect string, or a Connect Name from the tnsnames.ora\nfile, or the name of a local Oracle instance. If not specified, PHP uses\nenvironment variables such as TWO_TASK (on Linux) or LOCAL (on Windows)\nand ORACLE_SID to determine the `Oracle instance` to connect to. To use the\nEasy Connect naming method, PHP must be linked with Oracle 10g or greater\nClient libraries. The Easy Connect string for Oracle 10g is of the form:\n[//]host_name[:port][/service_name]. With Oracle 11g, the syntax is:\n[//]host_name[:port][/service_name][:server_type][/instance_name]. Service\nnames can be found by running the Oracle utility `lsnrctl status` on the\ndatabase server machine. The tnsnames.ora file can be in the Oracle Net search\npath, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set\n`TNS_ADMIN` so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon\nhas read access to the file.\n@param character_set Determines the character set used by the Oracle Client\nlibraries. The character set does not need to match the character set\nused by the database. If it doesn&#039;t match, Oracle will do its best\nto convert data to and from the database character set. Depending on the\ncharacter sets this may not give usable results. Conversion also adds some\ntime overhead. If not specified, the Oracle Client libraries determine a\ncharacter set from the NLS_LANG environment variable. Passing this parameter\ncan reduce connection time.\n@param session_mode This parameter is available since version PHP 5 (PECL\nOCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER\nand OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified,\nthis function will try to establish privileged connection using external\ncredentials. Privileged connections are disabled by default. To enable\nthem you need to set oci8.privileged_connect to `On`. PHP 5.3 (PECL OCI8\n1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use\nExternal or OS authentication, which must be configured in the database. The\nOCI_CRED_EXT flag can only be used with username of &quot;/&quot; and a\nempty password. oci8.privileged_connect may be `On` or `Off`. OCI_CRED_EXT\nmay be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is\nnot supported on Windows for security reasons.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocinlogon() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci_connect() - Connect to an Oracle database\n@see oci_pconnect() - Connect to an Oracle database using a persistent\nconnection\n
oci_new_cursor oci_new_cursor(resource $connection) [resource]\nAllocates and returns a new cursor (statement handle). Allocates a new\nstatement handle on the specified connection.\n@param connection An Oracle connection identifier, returned by oci_connect()\nor oci_pconnect().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocinewcursor()\ninstead. This name still can be used, it was left as alias of oci_new_cursor()\nfor downwards compatability. This, however, is deprecated and not recommended.\n
oci_new_descriptor oci_new_descriptor(resource $connection [, int\n$type=OCI_DTYPE_LOB]) [OCI-Lob]\nInitializes a new empty LOB or FILE descriptor. Allocates resources to hold\ndescriptor or LOB locator.\n@param connection An Oracle connection identifier, returned by oci_connect()\nor oci_pconnect().\n@param type Valid values for `type` are: OCI_DTYPE_FILE, OCI_DTYPE_LOB and\nOCI_DTYPE_ROWID.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocinewdescriptor()\ninstead. This name still can be used, it was left as alias of\noci_new_descriptor() for downwards compatability. This, however, is deprecated\nand not recommended.\n@see oci_bind_by_name() - Binds a PHP variable to an Oracle placeholder\n
oci_num_fields oci_num_fields(resource $statement) [int]\nReturns the number of result columns in a statement. Gets the number of\ncolumns in the given `statement`.\n@param statement A valid OCI statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocinumcols()\ninstead. This name still can be used, it was left as alias of oci_num_fields()\nfor downwards compatability. This, however, is deprecated and not recommended.\n
oci_num_rows oci_num_rows(resource $statement) [int]\nReturns number of rows affected during statement execution. Gets the number\nof rows affected during statement execution.\n@param statement A valid OCI statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: This function does not return number of rows selected! For SELECT\nstatements this function will return the number of rows, that were fetched\nto the buffer with oci_fetch*() functions.\n@note Note: In PHP versions before 5.0.0 you must use ocirowcount()\ninstead. This name still can be used, it was left as alias of oci_num_rows()\nfor downwards compatability. This, however, is deprecated and not recommended.\n
oci_parse oci_parse(resource $connection, string $sql_text) [resource]\nPrepares an Oracle statement for execution. Prepares `sql_text` using\n`connection` and returns the statement identifier, which can be used with\noci_bind_by_name(), oci_execute() and other functions. Statement identifiers\ncan be freed with oci_free_statement() or by setting the variable to null.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@param sql_text The SQL or PL/SQL statement. SQL statements should not end with\na semi-colon (&quot;;&quot;). PL/SQL statements should end with a semi-colon\n(&quot;;&quot;).\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: This function does not validate `sql_text`. The only way to find\nout if `sql_text` is a valid SQL or PL/SQL statement is to execute it.\n@note Note: In PHP versions before 5.0.0 use ociparse() instead. The old\nfunction name can still be used in current versions, however it is deprecated\nand not recommended.\n@see oci_execute() - Executes a statement\n@see oci_free_statement() - Frees all resources associated with statement\nor cursor\n
oci_password_change oci_password_change(resource $connection, string $username,\nstring $old_password, string $new_password) [bool]\nChanges password of Oracle's user. Changes password for user with\n`username`. The oci_password_change() function is most useful for PHP\ncommand-line scripts, or when non-persistent connections are used throughout\nthe PHP application.\n@param connection An Oracle connection identifier, returned by oci_connect()\nor oci_pconnect().\n@param username The Oracle user name.\n@param old_password The old password.\n@param new_password The new password to be set.\n@param dbname The database name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Changing the password either with this function or directly\nin Oracle should be done carefully. This is because PHP applications may\ncontinue to successfully reuse persistent connections by authenticating with\nthe old password. The best practice is to restart all web servers whenever\nthe user password is changed.\n@note Note: The second oci_password_change() syntax is available since OCI8\nversion 1.1.\n@note Note: In PHP versions before 5.0.0 you must use ocipasswordchange()\ninstead. This name still can be used, it was left as alias\nof oci_password_change() for downwards compatability. This, however, is\ndeprecated and not recommended.\n
oci_pconnect oci_pconnect(string $username, string $password [, string\n$connection_string [, string $character_set [, int $session_mode]]]) [resource]\nConnect to an Oracle database using a persistent connection. Creates a\npersistent connection to an Oracle server and logs on. Persistent connections\nare cached and re-used between requests, resulting in reduced overhead on each\npage load; a typical PHP application will have a single persistent connection\nopen against an Oracle server per Apache child process (or PHP FastCGI/CGI\nprocess). See the Persistent Database Connections section for more information.\n@param username The Oracle user name.\n@param password The password for `username`.\n@param connection_string Contains the `Oracle instance` to connect to. It can\nbe an &raquo; Easy Connect string, or a Connect Name from the tnsnames.ora\nfile, or the name of a local Oracle instance. If not specified, PHP uses\nenvironment variables such as TWO_TASK (on Linux) or LOCAL (on Windows)\nand ORACLE_SID to determine the `Oracle instance` to connect to. To use the\nEasy Connect naming method, PHP must be linked with Oracle 10g or greater\nClient libraries. The Easy Connect string for Oracle 10g is of the form:\n[//]host_name[:port][/service_name]. With Oracle 11g, the syntax is:\n[//]host_name[:port][/service_name][:server_type][/instance_name]. Service\nnames can be found by running the Oracle utility `lsnrctl status` on the\ndatabase server machine. The tnsnames.ora file can be in the Oracle Net search\npath, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set\n`TNS_ADMIN` so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon\nhas read access to the file.\n@param character_set Determines the character set used by the Oracle Client\nlibraries. The character set does not need to match the character set\nused by the database. If it doesn&#039;t match, Oracle will do its best\nto convert data to and from the database character set. Depending on the\ncharacter sets this may not give usable results. Conversion also adds some\ntime overhead. If not specified, the Oracle Client libraries determine a\ncharacter set from the NLS_LANG environment variable. Passing this parameter\ncan reduce connection time.\n@param session_mode This parameter is available since version PHP 5 (PECL\nOCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER\nand OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified,\nthis function will try to establish privileged connection using external\ncredentials. Privileged connections are disabled by default. To enable\nthem you need to set oci8.privileged_connect to `On`. PHP 5.3 (PECL OCI8\n1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use\nExternal or OS authentication, which must be configured in the database. The\nOCI_CRED_EXT flag can only be used with username of &quot;/&quot; and a\nempty password. oci8.privileged_connect may be `On` or `Off`. OCI_CRED_EXT\nmay be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is\nnot supported on Windows for security reasons.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Starting with PHP 5.1.2 and PECL oci8 1.1, the lifetime and\nmaximum number of persistent Oracle connections can be tuned by setting the\nfollowing configuration values: oci8.persistent_timeout, oci8.ping_interval\nand oci8.max_persistent.\n@note Note: In PHP versions before 5.0.0 you must use ociplogon() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci_connect() - Connect to an Oracle database\n@see oci_new_connect() - Connect to the Oracle server using a unique connection\n
oci_result oci_result(resource $statement, mixed $field) [mixed]\nReturns field's value from the fetched row. Returns the data from `field` in\nthe current row, fetched by oci_fetch(). For details on the data type mapping\nperformed by the OCI8 extension, see the datatypes supported by the driver\n@param statement\n@param field Can be either use the column number (1-based) or the column name\n(in uppercase).\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ociresult() instead. This\nname still can be used, it was left as alias of oci_result() for downwards\ncompatability. This, however, is deprecated and not recommended.\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_object() - Returns the next row from a query as an object\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n
oci_rollback oci_rollback(resource $connection) [bool]\nRolls back the outstanding database transaction. Reverts all uncommitted\nchanges for the Oracle `connection` and ends the transaction. It releases all\nlocks held. All Oracle `SAVEPOINTS` are erased. A transaction begins when the\nfirst SQL statement that changes data is executed with oci_execute() using\nthe OCI_NO_AUTO_COMMIT flag. Further data changes made by other statements\nbecome part of the same transaction. Data changes made in a transaction are\ntemporary until the transaction is committed or rolled back. Other users\nof the database will not see the changes until they are committed. When\ninserting or updating data, using transactions is recommended for relational\ndata consistency and for performance reasons.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect() or oci_new_connect().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Transactions are automatically rolled back when you close\nthe connection, or when the script ends, whichever is soonest. You need\nto explicitly call oci_commit() to commit the transaction. Any call to\noci_execute() that uses OCI_COMMIT_ON_SUCCESS mode explicitly or by default\nwill commit any previous uncommitted transaction. Any Oracle DDL statement such\nas `CREATE` or `DROP` will automatically commit any uncommitted transaction.\n@note Note: In PHP versions before 5.0.0 you must use ocirollback()\ninstead. The old function name can still be used in current versions,\nhowever it is deprecated and not recommended.\n@see oci_commit() - Commits the outstanding database transaction\n@see oci_execute() - Executes a statement\n
oci_server_version oci_server_version(resource $connection) [string]\nReturns server version. Returns a string with version information of the\nOracle server, which uses the provided `connection`.\n@param connection\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ociserverversion()\ninstead. This name still can be used, it was left as alias of\noci_server_version() for downwards compatability. This, however, is deprecated\nand not recommended.\n
oci_set_action oci_set_action(resource $connection, string $action_name) [bool]\nSets the action name. Sets the action name for Oracle tracing. The action\nname is registered with the database when the next &#039;roundtrip&#039; from\nPHP to the database occurs, typically when an SQL statement is executed. The\naction name can subsequently be queried from database administration views\nsuch as `V$SESSION`. It can be used for tracing and monitoring such as with\n`V$SQLAREA` and `DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE`. The value may be\nretained across persistent connections.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@param action_name User chosen string up to 32 bytes long.\n@return (PHP 5.3.2, PECL OCI8 >= 1.4.0)\n@note Note: Oracle version requirement This function is available when PHP\nis linked with Oracle Database libraries from version 10g onwards.\n@see oci_set_module_name() - Sets the module name\n@see oci_set_client_info() - Sets the client information\n@see oci_set_client_identifier() - Sets the client identifier\n
oci_set_client_identifier oci_set_client_identifier(resource $connection,\nstring $client_identifier) [bool]\nSets the client identifier. Sets the client identifier used by various\ndatabase components to identify lightweight application users who authenticate\nas the same database user. The client identifier is registered with the\ndatabase when the next &#039;roundtrip&#039; from PHP to the database occurs,\ntypically when an SQL statement is executed. The identifier can subsequently\nbe queried from database administration views such as `V$SESSION`. It can\nbe used with `DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE` for tracing. It can be\nused for auditing. The value may be retained across persistent connections.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@param client_identifier User chosen string up to 64 bytes long.\n@return (PHP 5.3.2, PECL OCI8 >= 1.4.0)\n@see oci_set_module_name() - Sets the module name\n@see oci_set_action() - Sets the action name\n@see oci_set_client_info() - Sets the client information\n
oci_set_client_info oci_set_client_info(resource $connection, string\n$client_info) [bool]\nSets the client information. Sets the client information for Oracle\ntracing. The client information is registered with the database when the\nnext &#039;roundtrip&#039; from PHP to the database occurs, typically when\nan SQL statement is executed. The client information can subsequently be\nqueried from database administration views such as `V$SESSION`. The value\nmay be retained across persistent connections.\n@param  An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@param  User chosen string up to 64 bytes long.\n@return (PHP 5.3.2, PECL OCI8 >= 1.4.0)\n@note Note: Oracle version requirement This function is available when PHP\nis linked with Oracle Database libraries from version 10g onwards.\n@see oci_set_module_name() - Sets the module name\n@see oci_set_action() - Sets the action name\n@see oci_set_client_identifier() - Sets the client identifier\n
oci_set_edition oci_set_edition(string $edition) [bool]\nSets the database edition. Sets the database &quot;edition&quot; of objects\nto be used by a subsequent connections. Oracle Editions allow concurrent\nversions of applications to run using the same schema and object names. This\nis useful for upgrading live systems. Call oci_set_edition() before calling\noci_connect(), oci_pconnect() or oci_new_connect(). If an edition is set that\nis not valid in the database, connection will fail even if oci_set_edition()\nreturns success. When using persistent connections, if a connection with\nthe requested edition setting already exists, it is reused. Otherwise,\na different persistent connection is created\n@param edition Oracle Database edition name previously created with the SQL\n&quot;`CREATE EDITION`&quot; command.\n@return (PHP 5.3.2, PECL OCI8 >= 1.4.0)\n@note Note: Oracle version requirement This function is available from Oracle\n11gR2 onwards.\n
oci_set_module_name oci_set_module_name(resource $connection, string\n$module_name) [bool]\nSets the module name. Sets the module name for Oracle tracing. The module\nname is registered with the database when the next &#039;roundtrip&#039; from\nPHP to the database occurs, typically when an SQL statement is executed. The\nname can subsequently be queried from database administration views such\nas `V$SESSION`. It can be used for tracing and monitoring such as with\n`V$SQLAREA` and `DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE`. The value may be\nretained across persistent connections.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@param module_name User chosen string up to 48 bytes long.\n@return (PHP 5.3.2, PECL OCI8 >= 1.4.0)\n@note Note: Oracle version requirement This function is available when PHP\nis linked with Oracle Database libraries from version 10g onwards.\n@see oci_set_action() - Sets the action name\n@see oci_set_client_info() - Sets the client information\n@see oci_set_client_identifier() - Sets the client identifier\n
oci_set_prefetch oci_set_prefetch(resource $statement, int $rows) [bool]\nSets number of rows to be prefetched by queries. Sets the number of rows\nto be buffered by the Oracle Client libraries after a successful query\ncall to oci_execute() and for each subsequent internal fetch request to\nthe database. For queries returning a large number of rows, performance\ncan be significantly improved by increasing the prefetch count above the\ndefault oci8.default_prefetch value. Prefetching is Oracle&#039;s efficient\nway of returning more than one data row from the database in each network\nrequest. This can result in better network and CPU utilization. The buffering\nof rows is internal to OCI8 and the behavior of OCI8 fetching functions is\nunchanged regardless of the prefetch count. For example, oci_fetch_row() will\nalways return one row. The prefetch buffer is per-statement and is not used\nby re-executed statements or by other connections. Call oci_set_prefetch()\nbefore calling oci_execute(). A tuning goal is to set the prefetch value\nto a reasonable size for the network and database to handle. For queries\nreturning a very large number of rows, overall system efficiency might be\nbetter if rows are retrieved from the database in several chunks (i.e set the\nprefetch value smaller than the number of rows). This allows the database\nto handle other users&#039; statements while the PHP script is processing\nthe current set of rows. Query prefetching was introduced in Oracle 8i. REF\nCURSOR prefetching was introduced in Oracle 11gR2 and occurs when PHP is\nlinked with Oracle 11gR2 Client libraries and connected to 11gR2 or previous\nversions of the database. Nested cursor prefetching was introduced in Oracle\n11gR2 and requires both the Oracle Client libraries and the database to be\nversion 11gR2. Prefetching is not supported when queries contain LONG or\nLOB columns. The prefetch value is ignored and single-row fetches will be\nused in all the situations when prefetching is not supported.\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@param rows The number of rows to be prefetched, >= 0\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 use ocisetprefetch() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci8.default_prefetch ini option\n
oci_statement_type oci_statement_type(resource $statement) [string]\nReturns the type of a statement. Returns a keyword identifying the type of\nthe OCI8 `statement`.\n@param statement A valid OCI8 statement identifier from oci_parse().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocistatementtype()\ninstead. The old function name can still be used in current versions,\nhowever it is deprecated and not recommended.\n
ocibindbyname ocibindbyname\nAlias of oci_bind_by_name.\n
ocicancel ocicancel\nAlias of oci_cancel.\n
ocicloselob ocicloselob\nAlias of.\n
ocicollappend ocicollappend\nAlias of.\n
ocicollassign ocicollassign\nAlias of.\n
ocicollassignelem ocicollassignelem\nAlias of.\n
ocicollgetelem ocicollgetelem\nAlias of.\n
ocicollmax ocicollmax\nAlias of.\n
ocicollsize ocicollsize\nAlias of.\n
ocicolltrim ocicolltrim\nAlias of.\n
ocicolumnisnull ocicolumnisnull\nAlias of oci_field_is_null.\n
ocicolumnname ocicolumnname\nAlias of oci_field_name.\n
ocicolumnprecision ocicolumnprecision\nAlias of oci_field_precision.\n
ocicolumnscale ocicolumnscale\nAlias of oci_field_scale.\n
ocicolumnsize ocicolumnsize\nAlias of oci_field_size.\n
ocicolumntype ocicolumntype\nAlias of oci_field_type.\n
ocicolumntyperaw ocicolumntyperaw\nAlias of oci_field_type_raw.\n
ocicommit ocicommit\nAlias of oci_commit.\n
ocidefinebyname ocidefinebyname\nAlias of oci_define_by_name.\n
ocierror ocierror\nAlias of oci_error.\n
ociexecute ociexecute\nAlias of oci_execute.\n
ocifetch ocifetch\nAlias of oci_fetch.\n
ocifetchinto ocifetchinto(resource $statement, array &$result [, int\n$mode=OCI_ASSOC + OCI_NUM]) [int]\nFetches the next row into an array (deprecated). This function is\ndeprecated. Recommended alternatives: oci_fetch_array(), oci_fetch_object(),\noci_fetch_assoc() and oci_fetch_row().\n
ocifetchstatement ocifetchstatement\nAlias of oci_fetch_all.\n
ocifreecollection ocifreecollection\nAlias of.\n
ocifreecursor ocifreecursor\nAlias of oci_free_statement.\n
ocifreedesc ocifreedesc\nAlias of.\n
ocifreestatement ocifreestatement\nAlias of oci_free_statement.\n
ociinternaldebug ociinternaldebug\nAlias of oci_internal_debug.\n
ociloadlob ociloadlob\nAlias of.\n
ocilogoff ocilogoff\nAlias of oci_close.\n
ocilogon ocilogon\nAlias of oci_connect.\n
ocinewcollection ocinewcollection\nAlias of oci_new_collection.\n
ocinewcursor ocinewcursor\nAlias of oci_new_cursor.\n
ocinewdescriptor ocinewdescriptor\nAlias of oci_new_descriptor.\n
ocinlogon ocinlogon\nAlias of oci_new_connect.\n
ocinumcols ocinumcols\nAlias of oci_num_fields.\n
ociparse ociparse\nAlias of oci_parse.\n
ociplogon ociplogon\nAlias of oci_pconnect.\n
ociresult ociresult\nAlias of oci_result.\n
ocirollback ocirollback\nAlias of oci_rollback.\n
ocirowcount ocirowcount\nAlias of oci_num_rows.\n
ocisavelob ocisavelob\nAlias of.\n
ocisavelobfile ocisavelobfile\nAlias of.\n
ociserverversion ociserverversion\nAlias of oci_server_version.\n
ocisetprefetch ocisetprefetch\nAlias of oci_set_prefetch.\n
ocistatementtype ocistatementtype\nAlias of oci_statement_type.\n
ociwritelobtofile ociwritelobtofile\nAlias of.\n
ociwritetemporarylob ociwritetemporarylob\nAlias of.\n
octdec octdec(string $octal_string) [number]\nOctal to decimal. Returns the decimal equivalent of the octal number\nrepresented by the `octal_string` argument.\n@param octal_string The octal string to convert\n@return (PHP 4, PHP 5)\n@see decoct() - Decimal to octal\n@see bindec() - Binary to decimal\n@see hexdec() - Hexadecimal to decimal\n@see base_convert() - Convert a number between arbitrary bases\n
odbc_autocommit odbc_autocommit(resource $connection_id [, bool $OnOff=false])\n[mixed]\nToggle autocommit behaviour. Toggles autocommit behaviour. By default,\nauto-commit is on for a connection. Disabling auto-commit is equivalent with\nstarting a transaction.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param OnOff If `OnOff` is TRUE, auto-commit is enabled, if it is FALSE\nauto-commit is disabled.\n@return (PHP 4, PHP 5)\n@see odbc_commit() - Commit an ODBC transaction\n@see odbc_rollback() - Rollback a transaction\n
odbc_binmode odbc_binmode(resource $result_id, int $mode) [bool]\nHandling of binary column data. Enables handling of binary column data. ODBC\nSQL types affected are `BINARY`, `VARBINARY`, and `LONGVARBINARY`. When\nbinary SQL data is converted to character C data, each byte (8 bits) of\nsource data is represented as two ASCII characters. These characters are the\nASCII character representation of the number in its hexadecimal form. For\nexample, a binary `00000001` is converted to `&quot;01&quot;` and a binary\n`11111111` is converted to `&quot;FF&quot;`. LONGVARBINARY handling binmode\nlongreadlen result ODBC_BINMODE_PASSTHRU 0 passthru ODBC_BINMODE_RETURN 0\npassthru ODBC_BINMODE_CONVERT 0 passthru ODBC_BINMODE_PASSTHRU 0 passthru\nODBC_BINMODE_PASSTHRU >0 passthru ODBC_BINMODE_RETURN >0 return as is\nODBC_BINMODE_CONVERT >0 return as char  If odbc_fetch_into() is used,\npassthru means that an empty string is returned for these columns.\n@param result_id The result identifier. If `result_id` is `0`, the settings\napply as default for new results. Note: Default for `longreadlen` is `4096`\nand `mode` defaults to `ODBC_BINMODE_RETURN`. Handling of binary long columns\nis also affected by odbc_longreadlen().\n@param mode Possible values for `mode` are: ODBC_BINMODE_PASSTHRU: Passthru\nBINARY data ODBC_BINMODE_RETURN: Return as is ODBC_BINMODE_CONVERT: Convert\nto char and return\n@return (PHP 4, PHP 5)\n
odbc_close_all odbc_close_all(void) [void]\nClose all ODBC connections. odbc_close_all() will close down all connections\nto database server(s).\n@return (PHP 4, PHP 5)\n@note Note: This function will fail if there are open transactions on a\nconnection. This connection will remain open in this case.\n
odbc_close odbc_close(resource $connection_id) [void]\nClose an ODBC connection. Closes down the connection to the database server.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@return (PHP 4, PHP 5)\n@note Note: This function will fail if there are open transactions on this\nconnection. The connection will remain open in this case.\n
odbc_columnprivileges odbc_columnprivileges(resource $connection_id, string\n$qualifier, string $owner, string $table_name, string $column_name) [resource]\nLists columns and associated privileges for the given table. Lists columns\nand associated privileges for the given table.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param owner The owner.\n@param table_name The table name.\n@param column_name The `column_name` argument accepts search patterns\n(&#039;%&#039; to match zero or more characters and &#039;_&#039; to match\na single character).\n@return (PHP 4, PHP 5)\n
odbc_columns odbc_columns(resource $connection_id [, string $qualifier [,\nstring $schema [, string $table_name [, string $column_name]]]]) [resource]\nLists the column names in specified tables. Lists all columns in the\nrequested range.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param qualifier The qualifier.\n@param schema The owner.\n@param table_name The table name.\n@param column_name The column name.\n@return (PHP 4, PHP 5)\n@see odbc_columnprivileges() - Lists columns and associated privileges for\nthe given table to retrieve associated privileges\n
odbc_commit odbc_commit(resource $connection_id) [bool]\nCommit an ODBC transaction. Commits all pending transactions on the connection.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@return (PHP 4, PHP 5)\n
odbc_connect odbc_connect(string $dsn, string $user, string $password [,\nint $cursor_type]) [resource]\nConnect to a datasource.\n@param dsn The database source name for the connection. Alternatively,\na DSN-less connection string can be used.\n@param user The username.\n@param password The password.\n@param cursor_type This sets the type of cursor to be used for this\nconnection. This parameter is not normally needed, but can be useful for\nworking around problems with some ODBC drivers. The following constants\nare defined for cursortype: SQL_CUR_USE_IF_NEEDED SQL_CUR_USE_ODBC\nSQL_CUR_USE_DRIVER\n@return (PHP 4, PHP 5)\n@see For persistent connections: odbc_pconnect() - Open a persistent database\nconnection\n
odbc_cursor odbc_cursor(resource $result_id) [string]\nGet cursorname. Gets the cursorname for the given result_id.\n@param result_id The result identifier.\n@return (PHP 4, PHP 5)\n
odbc_data_source odbc_data_source(resource $connection_id, int $fetch_type)\n[array]\nReturns information about a current connection. This function will return\nthe list of available DSN (after calling it several times).\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param fetch_type The `fetch_type` can be one of two constant types:\nSQL_FETCH_FIRST, SQL_FETCH_NEXT. Use SQL_FETCH_FIRST the first time this\nfunction is called, thereafter use the SQL_FETCH_NEXT.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
odbc_do odbc_do\nAlias of odbc_exec.\n
odbc_error odbc_error([resource $connection_id]) [string]\nGet the last error code.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see odbc_errormsg() - Get the last error message\n@see odbc_exec() - Prepare and execute an SQL statement\n
odbc_errormsg odbc_errormsg([resource $connection_id]) [string]\nGet the last error message.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see odbc_error() - Get the last error code\n@see odbc_exec() - Prepare and execute an SQL statement\n
odbc_exec odbc_exec(resource $connection_id, string $query_string [, int\n$flags]) [resource]\nPrepare and execute an SQL statement. Sends an SQL statement to the database\nserver.\n@param connection_id The ODBC connection identifier, see odbc_connect()\nfor details.\n@param query_string The SQL statement.\n@param flags This parameter is currently not used.\n@return (PHP 4, PHP 5)\n@see odbc_prepare() - Prepares a statement for execution\n@see odbc_execute() - Execute a prepared statement\n
newt_radio_get_current newt_radio_get_current(resource $set_member) [resource]\nDescription.\n@param set_member\n@return (PECL newt >= 0.1)\n
newt_radiobutton newt_radiobutton(int $left, int $top, string $text, bool\n$is_default [, resource $prev_button]) [resource]\nDescription.\n@param left\n@param top\n@param text\n@param is_default\n@param prev_button\n@return (PECL newt >= 0.1)\n
newt_redraw_help_line newt_redraw_help_line(void) [void]\nDescription.\n@return (PECL newt >= 0.1)\n
newt_reflow_text newt_reflow_text(string $text, int $width, int $flex_down,\nint $flex_up, int &$actual_width, int &$actual_height) [string]\nDescription.\n@param text\n@param width\n@param flex_down\n@param flex_up\n@param actual_width\n@param actual_height\n@return (PECL newt >= 0.1)\n
newt_refresh newt_refresh(void) [void]\nUpdates modified portions of the screen. To increase performance, newt only\nupdates the display when it needs to, not when the program tells it to write\nto the terminal. Applications can force newt to immediately update modified\nportions of the screen by calling this function.\n@return (PECL newt >= 0.1)\n
newt_resize_screen newt_resize_screen([bool $redraw]) [void]\nDescription.\n@param redraw\n@return (PECL newt >= 0.1)\n
newt_resume newt_resume(void) [void]\nResume using the newt interface after calling\n  newt_suspend. Resume using the newt interface after calling newt_suspend().\n@return (PECL newt >= 0.1)\n@see newt_suspend() - Tells newt to return the terminal to its initial state\n
newt_run_form newt_run_form(resource $form) [resource]\nRuns a form. This function runs the form passed to it.\n@param form Form component\n@return (PECL newt >= 0.1)\n@see newt_form_run() - Runs a form\n@see newt_form_destroy() - Destroys a form\n
newt_scale_set newt_scale_set(resource $scale, int $amount) [void]\nDescription.\n@param scale\n@param amount\n@return (PECL newt >= 0.1)\n
newt_scale newt_scale(int $left, int $top, int $width, int $full_value)\n[resource]\nDescription.\n@param left\n@param top\n@param width\n@param full_value\n@return (PECL newt >= 0.1)\n
newt_scrollbar_set newt_scrollbar_set(resource $scrollbar, int $where,\nint $total) [void]\nDescription.\n@param scrollbar\n@param where\n@param total\n@return (PECL newt >= 0.1)\n
newt_set_help_callback newt_set_help_callback(mixed $function) [void]\nDescription.\n@param function\n@return (PECL newt >= 0.1)\n
newt_set_suspend_callback newt_set_suspend_callback(callback $function,\nmixed $data) [void]\nSet a callback function which gets invoked when user\n  presses the suspend key. Set a callback function which gets invoked when\n  user presses the suspend key (normally ^Z). If no suspend callback is\n  registered, the suspend keystroke is ignored.\n@param function A callback function, which accepts one argument: data\n@param data This data is been passed to the callback function\n@return (PECL newt >= 0.1)\n@see newt_suspend() - Tells newt to return the terminal to its initial state\n@see newt_resume() - Resume using the newt interface after calling newt_suspend\n
newt_suspend newt_suspend(void) [void]\nTells newt to return the terminal to its initial state. Tells newt to return\nthe terminal to its initial state. Once this is done, the application can\nsuspend itself (by sending itself a SIGTSTP, fork a child program, or do\nwhatever else it likes).\n@return (PECL newt >= 0.1)\n@see newt_resume() - Resume using the newt interface after calling newt_suspend\n
newt_textbox_get_num_lines newt_textbox_get_num_lines(resource $textbox) [int]\nDescription.\n@param textbox\n@return (PECL newt >= 0.1)\n
newt_textbox_reflowed newt_textbox_reflowed(int $left, int $top, char $*text,\nint $width, int $flex_down, int $flex_up [, int $flags]) [resource]\nDescription.\n@param left\n@param top\n@param *text\n@param width\n@param flex_down\n@param flex_up\n@param flags\n@return (PECL newt >= 0.1)\n
newt_textbox_set_height newt_textbox_set_height(resource $textbox, int $height)\n[void]\nDescription.\n@param textbox\n@param height\n@return (PECL newt >= 0.1)\n
newt_textbox_set_text newt_textbox_set_text(resource $textbox, string $text)\n[void]\nDescription.\n@param textbox\n@param text\n@return (PECL newt >= 0.1)\n
newt_textbox newt_textbox(int $left, int $top, int $width, int $height [,\nint $flags]) [resource]\nDescription.\n@param left\n@param top\n@param width\n@param height\n@param flags\n@return (PECL newt >= 0.1)\n
newt_vertical_scrollbar newt_vertical_scrollbar(int $left, int $top, int\n$height [, int $normal_colorset [, int $thumb_colorset]]) [resource]\nDescription.\n@param left\n@param top\n@param height\n@param normal_colorset\n@param thumb_colorset\n@return (PECL newt >= 0.1)\n
newt_wait_for_key newt_wait_for_key(void) [void]\nDoesn't return until a key has been pressed. This function doesn&#039;t\nreturn until a key has been pressed. The keystroke is then ignored. If a key\nis already in the terminal&#039;s buffer, this function discards a keystroke\nand returns immediately.\n@return (PECL newt >= 0.1)\n@see newt_clear_key_buffer() - Discards the contents of the terminal's input\nbuffer without waiting for additional input\n
newt_win_choice newt_win_choice(string $title, string $button1_text, string\n$button2_text, string $format [, mixed $args [, mixed $...]]) [int]\nDescription.\n@param title\n@param button1_text\n@param button2_text\n@param format\n@param args\n@return (PECL newt >= 0.1)\n
newt_win_entries newt_win_entries(string $title, string $text, int\n$suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items,\nstring $button1 [, string $...]) [int]\nDescription.\n@param title\n@param text\n@param suggested_width\n@param flex_down\n@param flex_up\n@param data_width\n@param items\n@param button1\n@param button2\n@return (PECL newt >= 0.1)\n
newt_win_menu newt_win_menu(string $title, string $text, int $suggestedWidth,\nint $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem\n[, string $button1 [, string $...]]) [int]\nDescription.\n@param title\n@param text\n@param suggestedWidth\n@param flexDown\n@param flexUp\n@param maxListHeight\n@param items\n@param listItem\n@param button1\n@return (PECL newt >= 0.1)\n
newt_win_message newt_win_message(string $title, string $button_text, string\n$format [, mixed $args [, mixed $...]]) [void]\nDescription.\n@param title\n@param button_text\n@param format\n@param args\n@return (PECL newt >= 0.1)\n
newt_win_messagev newt_win_messagev(string $title, string $button_text,\nstring $format, array $args) [void]\nDescription.\n@param title\n@param button_text\n@param format\n@param args\n@return (PECL newt >= 0.1)\n
newt_win_ternary newt_win_ternary(string $title, string $button1_text,\nstring $button2_text, string $button3_text, string $format [, mixed $args\n[, mixed $...]]) [int]\nDescription.\n@param title Its description\n@param button1_text Its description\n@param button2_text Its description\n@param button3_text Its description\n@param format Its description\n@param args Its description\n@return (PECL newt >= 0.1)\n
next next(array &$array) [mixed]\nAdvance the internal array pointer of an array. next() behaves like current(),\nwith one difference. It advances the internal array pointer one place forward\nbefore returning the element value. That means it returns the next array\nvalue and advances the internal array pointer by one.\n@param array The array being affected.\n@return (PHP 4, PHP 5)\n@note Note: You won&#039;t be able to distinguish the end of an array from\na boolean FALSE element. To properly traverse an array which may contain\nFALSE elements, see the each() function.\n@see current() - Return the current element in an array\n@see end() - Set the internal pointer of an array to its last element\n@see prev() - Rewind the internal array pointer\n@see reset() - Set the internal pointer of an array to its first element\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n
ngettext ngettext(string $msgid1, string $msgid2, int $n) [string]\nPlural version of gettext. The plural version of gettext(). Some languages\nhave more than one form for plural messages dependent on the count.\n@param msgid1\n@param msgid2\n@param n\n@return (PHP 4 >= 4.2.0, PHP 5)\n
nl_langinfo nl_langinfo(int $item) [string]\nQuery language and locale information. nl_langinfo() is used to access\nindividual elements of the locale categories. Unlike localeconv(), which\nreturns all of the elements, nl_langinfo() allows you to select any specific\nelement.\n@param item `item` may be an integer value of the element or the constant name\nof the element. The following is a list of constant names for `item` that may\nbe used and their description. Some of these constants may not be defined or\nhold no value for certain locales. nl_langinfo Constants Constant Description\nLC_TIME Category Constants ABDAY_(1-7) Abbreviated name of n-th day of the\nweek. DAY_(1-7) Name of the n-th day of the week (DAY_1 = Sunday). ABMON_(1-12)\nAbbreviated name of the n-th month of the year. MON_(1-12) Name of the n-th\nmonth of the year. AM_STR String for Ante meridian. PM_STR String for Post\nmeridian. D_T_FMT String that can be used as the format string for strftime()\nto represent time and date. D_FMT String that can be used as the format string\nfor strftime() to represent date. T_FMT String that can be used as the format\nstring for strftime() to represent time. T_FMT_AMPM String that can be used\nas the format string for strftime() to represent time in 12-hour format\nwith ante/post meridian. ERA Alternate era. ERA_YEAR Year in alternate era\nformat. ERA_D_T_FMT Date and time in alternate era format (string can be used\nin strftime()). ERA_D_FMT Date in alternate era format (string can be used\nin strftime()). ERA_T_FMT Time in alternate era format (string can be used\nin strftime()). LC_MONETARY Category Constants INT_CURR_SYMBOL International\ncurrency symbol. CURRENCY_SYMBOL Local currency symbol. CRNCYSTR Same value as\nCURRENCY_SYMBOL. MON_DECIMAL_POINT Decimal point character. MON_THOUSANDS_SEP\nThousands separator (groups of three digits). MON_GROUPING Like\n`&quot;grouping&quot;` element. POSITIVE_SIGN Sign for positive\nvalues. NEGATIVE_SIGN Sign for negative values. INT_FRAC_DIGITS International\nfractional digits. FRAC_DIGITS Local fractional digits. P_CS_PRECEDES Returns\n1 if CURRENCY_SYMBOL precedes a positive value. P_SEP_BY_SPACE Returns 1 if a\nspace separates CURRENCY_SYMBOL from a positive value. N_CS_PRECEDES Returns\n1 if CURRENCY_SYMBOL precedes a negative value. N_SEP_BY_SPACE Returns 1\nif a space separates CURRENCY_SYMBOL from a negative value. P_SIGN_POSN\nReturns 0 if parentheses surround the quantity and CURRENCY_SYMBOL. Returns\n1 if the sign string precedes the quantity and CURRENCY_SYMBOL. Returns 2\nif the sign string follows the quantity and CURRENCY_SYMBOL. Returns 3 if\nthe sign string immediately precedes the CURRENCY_SYMBOL. Returns 4 if the\nsign string immediately follows the CURRENCY_SYMBOL. N_SIGN_POSN LC_NUMERIC\nCategory Constants DECIMAL_POINT Decimal point character. RADIXCHAR Same\nvalue as DECIMAL_POINT. THOUSANDS_SEP Separator character for thousands\n(groups of three digits). THOUSEP Same value as THOUSANDS_SEP. GROUPING\n&nbsp; LC_MESSAGES Category Constants YESEXPR Regex string for matching\n`&quot;yes&quot;` input. NOEXPR Regex string for matching `&quot;no&quot;`\ninput. YESSTR Output string for `&quot;yes&quot;`. NOSTR Output string for\n`&quot;no&quot;`. LC_CTYPE Category Constants CODESET Return a string with\nthe name of the character encoding.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: This function is not implemented on Windows platforms.\n@see setlocale() - Set locale information\n@see localeconv() - Get numeric formatting information\n
nl2br nl2br(string $string [, bool $is_xhtml=true]) [string]\nInserts HTML line breaks before all newlines in a string. Returns `string`\nwith &#039;&lt;br />&#039; or &#039;&lt;br>&#039; inserted before all newlines.\n@param string The input string.\n@param is_xhtml Whenever to use XHTML compatible line breaks or not.\n@return (PHP 4, PHP 5)\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see wordwrap() - Wraps a string to a given number of characters\n@see str_replace() - Replace all occurrences of the search string with the\nreplacement string\n
notes_body notes_body(string $server, string $mailbox, int $msg_number) [array]\nOpen the message msg_number in the specified mailbox on the specified server\n(leave serv.\n
notes_copy_db notes_copy_db(string $from_database_name, string\n$to_database_name) [bool]\nCopy a Lotus Notes database.\n
notes_create_db notes_create_db(string $database_name) [bool]\nCreate a Lotus Notes database.\n
notes_create_note notes_create_note(string $database_name, string $form_name)\n[bool]\nCreate a note using form form_name.\n
notes_drop_db notes_drop_db(string $database_name) [bool]\nDrop a Lotus Notes database.\n
notes_find_note notes_find_note(string $database_name, string $name [,\nstring $type]) [int]\nReturns a note id found in database_name.\n
notes_header_info notes_header_info(string $server, string $mailbox, int\n$msg_number) [object]\nOpen the message msg_number in the specified mailbox on the specified server\n(leave serv.\n
notes_list_msgs notes_list_msgs(string $db) [bool]\nReturns the notes from a selected database_name.\n
notes_mark_read notes_mark_read(string $database_name, string $user_name,\nstring $note_id) [bool]\nMark a note_id as read for the User user_name.\n
notes_mark_unread notes_mark_unread(string $database_name, string $user_name,\nstring $note_id) [bool]\nMark a note_id as unread for the User user_name.\n
notes_nav_create notes_nav_create(string $database_name, string $name) [bool]\nCreate a navigator name, in database_name.\n
notes_search notes_search(string $database_name, string $keywords) [array]\nFind notes that match keywords in database_name.\n
notes_unread notes_unread(string $database_name, string $user_name) [array]\nReturns the unread note id's for the current User user_name.\n
notes_version notes_version(string $database_name) [float]\nGet the version Lotus Notes.\n
nsapi_request_headers nsapi_request_headers(void) [array]\nFetch all HTTP request headers. nsapi_request_headers() gets all the HTTP\nheaders in the current request. This is only supported when PHP runs as a\nNSAPI module. Note: Prior to PHP 4.3.3, getallheaders() was only available\nfor the Apache servers. After PHP 4.3.3, getallheaders() is an alias for\nnsapi_request_headers() if you use the NSAPI module. Note: You can also get\nat the value of the common CGI variables by reading them from the $_SERVER\nsuperglobal, which works whether or not you are using PHP as a NSAPI module.\n@return (PHP 4 >= 4.3.3, PHP 5)\n
nsapi_response_headers nsapi_response_headers(void) [array]\nFetch all HTTP response headers. Gets all the NSAPI response headers.\n@return (PHP 4 >= 4.3.3, PHP 5)\n@see nsapi_request_headers() - Fetch all HTTP request headers\n@see headers_sent() - Checks if or where headers have been sent\n
nsapi_virtual nsapi_virtual(string $uri) [bool]\nPerform an NSAPI sub-request. nsapi_virtual() is an NSAPI-specific\nfunction which is equivalent to `&lt;!--#include virtual...-->` in SSI\n(.shtml files). It does an NSAPI sub-request. It is useful for including\nCGI scripts or .shtml files, or anything else that you&#039;d parse through\nwebserver. To run the sub-request, all buffers are terminated and flushed to\nthe browser, pending headers are sent too. You cannot make recursive requests\nwith this function to other PHP scripts. If you want to include PHP scripts,\nuse include() or require(). Note: This function depends on a undocumented\nfeature of the Netscape/iPlanet/Sun webservers. Use phpinfo() to determine if\nit is available. In the Unix environment it should always work, in Windows it\ndepends on the name of a ns-httpdXX.dll file. Read the note about subrequests\nin the NSAPI section (UNIX, Windows) if you experience this problem.\n@param uri The URI of the script.\n@return (PHP 4 >= 4.3.3, PHP 5)\n
nthmac nthmac(string $clent, string $data) [string]\nObtain a nthmac key (needs 2 arguments).\n@return (PECL spplus >= 1.0.0)\n
number_format number_format(float $number [, int $decimals=0]) [string]\nFormat a number with grouped thousands. This function accepts either one, two,\nor four parameters (not three): If only one parameter is given, `number` will\nbe formatted without decimals, but with a comma (&quot;,&quot;) between every\ngroup of thousands. If two parameters are given, `number` will be formatted\nwith `decimals` decimals with a dot (&quot;.&quot;) in front, and a comma\n(&quot;,&quot;) between every group of thousands. If all four parameters\nare given, `number` will be formatted with `decimals` decimals, `dec_point`\ninstead of a dot (&quot;.&quot;) before the decimals and `thousands_sep`\ninstead of a comma (&quot;,&quot;) between every group of thousands.\n@param number The number being formatted.\n@param decimals Sets the number of decimal points.\n@param dec_point Sets the separator for the decimal point. This function only\ntakes the first byte for the separator. This means that multibyte characters\nwill NOT work, resulting in a broken multibyte sequence.\n@param thousands_sep Sets the thousands separator. Only the first byte of\n`thousands_sep` is used. For example, if you use `&amp;amp;` as `thousands_sep`\non the number `1000`, number_format() will return `1&amp;000`. As noted above\nin the description of the `dec_point` parameter, then this function is not\nmultibyte aware so using multibyte characters as separators will result in\nbroken sequences.\n@return (PHP 4, PHP 5)\n@see money_format() - Formats a number as a currency string\n@see sprintf() - Return a formatted string\n@see printf() - Output a formatted string\n@see sscanf() - Parses input from a string according to a format\n
oauth_urlencode oauth_urlencode(string $uri) [string]\nEncode a URI to RFC 3986. Encodes a URI to &raquo; RFC 3986.\n@param uri URI to encode.\n@return (PECL OAuth >=0.99.2)\n
ob_clean ob_clean(void) [void]\nClean (erase) the output buffer. This function discards the contents of\nthe output buffer. This function does not destroy the output buffer like\nob_end_clean() does.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ob_flush() - Flush (send) the output buffer\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n
ob_deflatehandler ob_deflatehandler(string $data, int $mode) [string]\nDeflate output handler. For use with ob_start(). Note: This output handler\ncan only be used once. The deflate output buffer handler can only be used\nonce. It conflicts with ob_gzhandler() and zlib.output_compression as well\nand should not be used after mbstring extension&#039;s mb_output_handler()\nand session extension&#039;s URL-Rewriter (AKA session.use_trans_sid).\n@see ob_inflatehandler() - Inflate output handler\n@see ob_start() - Turn on output buffering\n
ob_end_clean ob_end_clean(void) [bool]\nClean (erase) the output buffer and turn off output buffering. This function\ndiscards the contents of the topmost output buffer and turns off this output\nbuffering. If you want to further process the buffer&#039;s contents you\nhave to call ob_get_contents() before ob_end_clean() as the buffer contents\nare discarded when ob_end_clean() is called.\n@return (PHP 4, PHP 5)\n@see ob_start() - Turn on output buffering\n@see ob_get_contents() - Return the contents of the output buffer\n@see ob_flush() - Flush (send) the output buffer\n
ob_end_flush ob_end_flush(void) [bool]\nFlush (send) the output buffer and turn off output buffering. This function\nwill send the contents of the topmost output buffer (if any) and turn this\noutput buffer off. If you want to further process the buffer&#039;s contents\nyou have to call ob_get_contents() before ob_end_flush() as the buffer contents\nare discarded after ob_end_flush() is called. Note: This function is similar\nto ob_get_flush(), except that ob_get_flush() returns the buffer as a string.\n@return (PHP 4, PHP 5)\n@see ob_start() - Turn on output buffering\n@see ob_get_contents() - Return the contents of the output buffer\n@see ob_get_flush() - Flush the output buffer, return it as a string and\nturn off output buffering\n@see ob_flush() - Flush (send) the output buffer\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n
ob_etaghandler ob_etaghandler(string $data, int $mode) [string]\nETag output handler. For use with ob_start(). Output buffer handler\ngenerating an `ETag` with the hash algorithm specified with the INI setting\nhttp.etag.mode. This output handler is used by http_cache_etag().\n@see http_cache_etag() - Caching by ETag\n@see http_match_etag() - Match ETag\n
ob_flush ob_flush(void) [void]\nFlush (send) the output buffer. This function will send the contents of the\noutput buffer (if any). If you want to further process the buffer&#039;s\ncontents you have to call ob_get_contents() before ob_flush() as the buffer\ncontents are discarded after ob_flush() is called. This function does not\ndestroy the output buffer like ob_end_flush() does.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ob_get_contents() - Return the contents of the output buffer\n@see ob_clean() - Clean (erase) the output buffer\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n
ob_get_clean ob_get_clean(void) [string]\nGet current buffer contents and delete current output buffer. Gets the\ncurrent buffer contents and delete current output buffer. ob_get_clean()\nessentially executes both ob_get_contents() and ob_end_clean().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ob_get_contents() - Return the contents of the output buffer\n@see ob_start() - Turn on output buffering\n
ob_get_contents ob_get_contents(void) [string]\nReturn the contents of the output buffer. Gets the contents of the output\nbuffer without clearing it.\n@return (PHP 4, PHP 5)\n@see ob_start() - Turn on output buffering\n@see ob_get_length() - Return the length of the output buffer\n
ob_get_flush ob_get_flush(void) [string]\nFlush the output buffer, return it as a string and turn off output\nbuffering. ob_get_flush() flushes the output buffer, return it as a string and\nturns off output buffering. Note: This function is similar to ob_end_flush(),\nexcept that this function returns the buffer as a string.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n@see ob_list_handlers() - List all output handlers in use\n
ob_get_length ob_get_length(void) [int]\nReturn the length of the output buffer. This will return the length of the\ncontents in the output buffer.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see ob_start() - Turn on output buffering\n@see ob_get_contents() - Return the contents of the output buffer\n
ob_get_level ob_get_level(void) [int]\nReturn the nesting level of the output buffering mechanism. Returns the\nnesting level of the output buffering mechanism.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ob_start() - Turn on output buffering\n@see ob_get_contents() - Return the contents of the output buffer\n
ob_get_status ob_get_status([bool $full_status=FALSE]) [array]\nGet status of output buffers. ob_get_status() returns status information\non either the top level output buffer or all active output buffer levels if\n`full_status` is set to TRUE.\n@param full_status TRUE to return all active output buffer levels. If FALSE\nor not set, only the top level output buffer is returned.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ob_get_level() - Return the nesting level of the output buffering\nmechanism\n@see ob_list_handlers() - List all output handlers in use\n
ob_gzhandler ob_gzhandler(string $buffer, int $mode) [string]\nob_start callback function to gzip output buffer. ob_gzhandler() is intended\nto be used as a callback function for ob_start() to help facilitate sending\ngz-encoded data to web browsers that support compressed web pages. Before\nob_gzhandler() actually sends compressed data, it determines what type of\ncontent encoding the browser will accept (&quot;gzip&quot;, &quot;deflate&quot;\nor none at all) and will return its output accordingly. All browsers are\nsupported since it&#039;s up to the browser to send the correct header\nsaying that it accepts compressed web pages. If a browser doesn&#039;t\nsupport compressed pages this function returns FALSE.\n@param buffer\n@param mode\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: ob_gzhandler() requires the zlib extension.\n@note Note: You cannot use both ob_gzhandler() and\nzlib.output_compression. Also note that using zlib.output_compression is\npreferred over ob_gzhandler().\n@see ob_start() - Turn on output buffering\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n
ob_iconv_handler ob_iconv_handler(string $contents, int $status) [string]\nConvert character encoding as output buffer handler. Converts the string\nencoded in `internal_encoding` to `output_encoding`. `internal_encoding`\nand `output_encoding` should be defined in the php.ini file or in\niconv_set_encoding().\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see iconv_get_encoding() - Retrieve internal configuration variables of\niconv extension\n@see iconv_set_encoding() - Set current setting for character encoding\nconversion\n@see output-control functions\n
ob_implicit_flush ob_implicit_flush([int $flag=true]) [void]\nTurn implicit flush on/off. ob_implicit_flush() will turn implicit flushing\non or off. Implicit flushing will result in a flush operation after every\noutput call, so that explicit calls to flush() will no longer be needed.\n@param flag TRUE to turn implicit flushing on, FALSE otherwise.\n@return (PHP 4, PHP 5)\n@see flush() - Flush the output buffer\n@see ob_start() - Turn on output buffering\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n
ob_inflatehandler ob_inflatehandler(string $data, int $mode) [string]\nInflate output handler. For use with ob_start(). Same restrictions as with\nob_deflatehandler() apply.\n@see ob_deflatehandler() - Deflate output handler\n@see ob_start() - Turn on output buffering\n
ob_list_handlers ob_list_handlers(void) [array]\nList all output handlers in use. Lists all output handlers in use.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n@see ob_get_flush() - Flush the output buffer, return it as a string and\nturn off output buffering\n@see ob_start() - Turn on output buffering\n
ob_start ob_start([callback $output_callback [, int $chunk_size [, bool\n$erase]]]) [bool]\nTurn on output buffering. This function will turn output buffering on. While\noutput buffering is active no output is sent from the script (other\nthan headers), instead the output is stored in an internal buffer. The\ncontents of this internal buffer may be copied into a string variable\nusing ob_get_contents(). To output what is stored in the internal buffer,\nuse ob_end_flush(). Alternatively, ob_end_clean() will silently discard\nthe buffer contents. Some web servers (e.g. Apache) change the working\ndirectory of a script when calling the callback function. You can change\nit back by e.g. `chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))`\nin the callback function.\n@param output_callback An optional `output_callback` function may be\nspecified. This function takes a string as a parameter and should return a\nstring. The function will be called when the output buffer is flushed (sent)\nor cleaned (with ob_flush(), ob_clean() or similar function) or when the\noutput buffer is flushed to the browser at the end of the request. When\n`output_callback` is called, it will receive the contents of the output\nbuffer as its parameter and is expected to return a new output buffer as\na result, which will be sent to the browser. If the `output_callback`\nis not a callable function, this function will return FALSE. If the\ncallback function has two parameters, the second parameter is filled with\na bit-field consisting of PHP_OUTPUT_HANDLER_START, PHP_OUTPUT_HANDLER_CONT\nand PHP_OUTPUT_HANDLER_END. If `output_callback` returns FALSE original input\nis sent to the browser. The `output_callback` parameter may be bypassed by\npassing a NULL value. ob_end_clean(), ob_end_flush(), ob_clean(), ob_flush()\nand ob_start() may not be called from a callback function. If you call them\nfrom callback function, the behavior is undefined. If you would like to delete\nthe contents of a buffer, return &quot;&quot; (a null string) from callback\nfunction. You can&#039;t even call functions using the output buffering\nfunctions like `print_r($expression, true)` or `highlight_file($filename,\ntrue)` from a callback function. Note: In PHP 4.0.4, ob_gzhandler() was\nintroduced to facilitate sending gz-encoded data to web browsers that support\ncompressed web pages. ob_gzhandler() determines what type of content encoding\nthe browser will accept and will return its output accordingly.\n@param chunk_size If the optional parameter `chunk_size` is passed, the buffer\nwill be flushed after any output call which causes the buffer&#039;s length\nto equal or exceed `chunk_size`. Default value 0 means that the function is\ncalled only in the end, other special value 1 sets `chunk_size` to 4096.\n@param erase If the optional parameter `erase` is set to FALSE, the buffer\nwill not be deleted until the script finishes. This causes that flushing\nand cleaning functions would issue a notice and return FALSE if called.\n@return (PHP 4, PHP 5)\n@see ob_get_contents() - Return the contents of the output buffer\n@see ob_end_clean() - Clean (erase) the output buffer and turn off output\nbuffering\n@see ob_end_flush() - Flush (send) the output buffer and turn off output\nbuffering\n@see ob_implicit_flush() - Turn implicit flush on/off\n@see ob_gzhandler() - ob_start callback function to gzip output buffer\n@see ob_iconv_handler() - Convert character encoding as output buffer handler\n@see mb_output_handler() - Callback function converts character encoding in\noutput buffer\n@see ob_tidyhandler() - ob_start callback function to repair the buffer\n
ob_tidyhandler ob_tidyhandler(string $input [, int $mode]) [string]\nob_start callback function to repair the buffer. Callback function for\nob_start() to repair the buffer.\n@param input The buffer.\n@param mode The buffer mode.\n@return (PHP 5)\n@see ob_start() - Turn on output buffering\n
oci_bind_array_by_name oci_bind_array_by_name(resource $statement, string\n$name, array &$var_array, int $max_table_length [, int $max_item_length=-1\n[, int $type=SQLT_AFC]]) [bool]\nBinds a PHP array to an Oracle PL/SQL array parameter. Binds the PHP array\n`var_array` to the Oracle placeholder `name`, which points to an Oracle\nPL/SQL array. Whether it will be used for input or output will be determined\nat run-time.\n@param statement A valid OCI statement identifier.\n@param name The Oracle placeholder.\n@param var_array An array.\n@param max_table_length Sets the maximum length both for incoming and\nresult arrays.\n@param max_item_length Sets maximum length for array items. If not specified\nor equals to -1, oci_bind_array_by_name() will find the longest element in\nthe incoming array and will use it as the maximum length.\n@param type Should be used to set the type of PL/SQL array items. See list of\navailable types below: SQLT_NUM - for arrays of NUMBER. SQLT_INT - for arrays\nof INTEGER (Note: INTEGER it is actually a synonym for NUMBER(38), but SQLT_NUM\ntype won&#039;t work in this case even though they are synonyms). SQLT_FLT -\nfor arrays of FLOAT. SQLT_AFC - for arrays of CHAR. SQLT_CHR - for arrays\nof VARCHAR2. SQLT_VCS - for arrays of VARCHAR. SQLT_AVC - for arrays of\nCHARZ. SQLT_STR - for arrays of STRING. SQLT_LVC - for arrays of LONG\nVARCHAR. SQLT_ODT - for arrays of DATE.\n@return (PHP 5 >= 5.1.2, PECL OCI8 >= 1.2.0)\n@note Note: This function is available since OCI8 release 1.2.\n
oci_bind_by_name oci_bind_by_name(resource $statement, string $bv_name,\nmixed &$variable [, int $maxlength=-1 [, int $type=SQLT_CHR]]) [bool]\nBinds a PHP variable to an Oracle placeholder. Binds a PHP variable `variable`\nto the Oracle bind variable placeholder `bv_name`. Binding is important\nfor Oracle database performance and also as a way to avoid SQL Injection\nsecurity issues. Binding allows the database to reuse the statement context\nand caches from previous executions of the statement, even if another user\nor process originally executed it. Binding reduces SQL Injection concerns\nbecause the data associated with a bind variable is never treated as part\nof the SQL statement. It does not need quoting or escaping. PHP variables\nthat have been bound can be changed and the statement re-executed without\nneeding to re-parse the statement or re-bind. In Oracle, bind variables\nare commonly divided into `IN` binds for values that are passed into the\ndatabase, and `OUT` binds for values that are returned to PHP. A bind\nvariable may be both `IN` and `OUT`. Whether a bind variable will be used\nfor input or output is determined at run-time. You must specify `maxlength`\nwhen using an `OUT` bind so that PHP allocates enough memory to hold the\nreturned value. For `IN` binds it is recommended to set the `maxlength`\nlength if the statement is re-executed multiple times with different values\nfor the PHP variable. Otherwise Oracle may truncate data to the length of the\ninitial PHP variable value. If you don&#039;t know what the maximum length\nwill be, then re-call oci_bind_by_name() with the current data size prior\nto each oci_execute() call. Binding an unnecessarily large length will have\nan impact on process memory in the database. A bind call tells Oracle which\nmemory address to read data from. For `IN` binds that address needs to contain\nvalid data when oci_execute() is called. This means that the variable bound\nmust remain in scope until execution. If it doesn&#039;t, unexpected results\nor errors such as &quot;ORA-01460: unimplemented or unreasonable conversion\nrequested&quot; may occur. For `OUT` binds one symptom is no value being set\nin the PHP variable. For a statement that is repeatedly executed, binding\nvalues that never change may reduce the ability of the Oracle optimizer to\nchoose the best statement execution plan. Long running statements that are\nrarely re-executed may not benefit from binding. However in both cases,\nbinding might be safer than joining strings into a SQL statement, as this\ncan be a security risk if unfiltered user text is concatenated.\n@param statement A valid OCI8 statement identifer.\n@param bv_name The colon-prefixed bind variable placeholder used in the\nstatement. The colon is optional in `bv_name`. Oracle does not use question\nmarks for placeholders.\n@param variable The PHP variable to be associated with `bv_name`\n@param maxlength Sets the maximum length for the data. If you set it to -1,\nthis function will use the current length of `variable` to set the maximum\nlength. In this case the `variable` must exist and contain data when\noci_bind_by_name() is called.\n@param type The datatype that Oracle will treat the data as. The default\n`type` used is SQLT_CHR. Oracle will convert the data between this type\nand the database column (or PL/SQL variable type), when possible. If you\nneed to bind an abstract datatype (LOB/ROWID/BFILE) you need to allocate\nit first using the oci_new_descriptor() function. The `length` is not used\nfor abstract datatypes and should be set to -1. Possible values for `type`\nare: SQLT_BFILEE or OCI_B_BFILE - for BFILEs; SQLT_CFILEE or OCI_B_CFILEE -\nfor CFILEs; SQLT_CLOB or OCI_B_CLOB - for CLOBs; SQLT_BLOB or OCI_B_BLOB -\nfor BLOBs; SQLT_RDD or OCI_B_ROWID - for ROWIDs; SQLT_NTY or OCI_B_NTY - for\nnamed datatypes; SQLT_INT or OCI_B_INT - for integers; SQLT_CHR - for VARCHARs;\nSQLT_BIN or OCI_B_BIN - for RAW columns; SQLT_LNG - for LONG columns; SQLT_LBI\n- for LONG RAW columns; SQLT_RSET - for cursors created with oci_new_cursor().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see oci_bind_array_by_name() - Binds a PHP array to an Oracle PL/SQL array\nparameter\n@see oci_parse() - Prepares an Oracle statement for execution\n
oci_cancel oci_cancel(resource $statement) [bool]\nCancels reading from cursor. Invalidates a cursor, freeing all associated\nresources and cancels the ability to read from it.\n@param statement An OCI statement.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
oci_close oci_close(resource $connection) [bool]\nCloses an Oracle connection. Unsets `connection`. The underlying database\nconnection is closed if no other resources are using it and if it was\ncreated with oci_connect() or oci_new_connect(). It is recommended to close\nconnections that are no longer needed because this makes database resources\navailable for other users.\n@param connection An Oracle connection identifier returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Variables that have a dependency on the connection identifier,\nsuch as statement identifiers returned by oci_parse(), must also be freed\nbefore the underlying database connection is closed.\n@note Note: Prior to version PHP 5.1.2 (PECL OCI8 1.1) oci_close() was a\nno-op. In more recent versions it correctly closes the Oracle connection. Use\noci8.old_oci_close_semantics option to restore old behavior of this function.\n@note Note: The oci_close() function does not close the underlying database\nconnections created with oci_pconnect().\n@note Note: In PHP versions before 5.0.0 you must use ocilogoff() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci_connect() - Connect to an Oracle database\n@see oci_free_statement() - Frees all resources associated with statement\nor cursor\n
append bool OCI-Collection::append ( mixed $value )\nAppends element to the collection.\n@param value The value to be added to the collection. Can be a string or\na number.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->assign\n
assign bool OCI-Collection::assign ( OCI-Collection $from )\nAssigns a value to the collection from another existing collection.\n@param from An instance of OCI-Collection.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->append\n
assignElem bool OCI-Collection::assignElem ( int $index , mixed $value )\nAssigns a value to the element of the collection.\n@param index The element index. First index is 1.\n@param value Can be a string or a number.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->getElem\n
getElem mixed OCI-Collection::getElem ( int $index )\nReturns value of the element.\n@param index The element index. First index is 1.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->assignElem\n
free bool OCI-Collection::free ( void )\nFrees the resources associated with the collection object.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see oci_new_collection\n
max int OCI-Collection::max ( void )\nReturns the maximum number of elements in the collection.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->size\n
size int OCI-Collection::size ( void )\nReturns size of the collection.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->max\n
trim bool OCI-Collection::trim ( int $num )\nTrims elements from the end of the collection.\n@param num The number of elements to be trimmed.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Collection->size\n
oci_commit oci_commit(resource $connection) [bool]\nCommits the outstanding database transaction. Commits the outstanding\ntransaction for the Oracle `connection`. A commit ends the current transaction\nand makes permanent all changes. It releases all locks held. A transaction\nbegins when the first SQL statement that changes data is executed with\noci_execute() using the OCI_NO_AUTO_COMMIT flag. Further data changes made\nby other statements become part of the same transaction. Data changes made\nin a transaction are temporary until the transaction is committed or rolled\nback. Other users of the database will not see the changes until they are\ncommitted. When inserting or updating data, using transactions is recommended\nfor relational data consistency and for performance reasons.\n@param connection An Oracle connection identifier, returned by oci_connect(),\noci_pconnect(), or oci_new_connect().\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Transactions are automatically rolled back when you close\nthe connection, or when the script ends, whichever is soonest. You need\nto explicitly call oci_commit() to commit the transaction. Any call to\noci_execute() that uses OCI_COMMIT_ON_SUCCESS mode explicitly or by default\nwill commit any previous uncommitted transaction. Any Oracle DDL statement such\nas `CREATE` or `DROP` will automatically commit any uncommitted transaction.\n@note Note: In PHP versions before 5.0.0 you must use ocicommit() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci_execute() - Executes a statement\n@see oci_rollback() - Rolls back the outstanding database transaction\n
oci_connect oci_connect(string $username, string $password [, string\n$connection_string [, string $character_set [, int $session_mode]]]) [resource]\nConnect to an Oracle database. Returns a connection identifier needed for\nmost other OCI8 operations. See Connection Handling for general information on\nconnection management and connection pooling. From PHP 5.1.2 (PECL OCI8 1.1)\noci_close() can be used to close the connection. The second and subsequent\ncalls to oci_connect() with the same parameters will return the connection\nhandle returned from the first call. This means that transactions in one\nhandle are also in the other handles, because they use the same underlying\ndatabase connection. If two handles need to be transactionally isolated from\neach other, use oci_new_connect() instead.\n@param username The Oracle user name.\n@param password The password for `username`.\n@param connection_string Contains the `Oracle instance` to connect to. It can\nbe an &raquo; Easy Connect string, or a Connect Name from the tnsnames.ora\nfile, or the name of a local Oracle instance. If not specified, PHP uses\nenvironment variables such as TWO_TASK (on Linux) or LOCAL (on Windows)\nand ORACLE_SID to determine the `Oracle instance` to connect to. To use the\nEasy Connect naming method, PHP must be linked with Oracle 10g or greater\nClient libraries. The Easy Connect string for Oracle 10g is of the form:\n[//]host_name[:port][/service_name]. With Oracle 11g, the syntax is:\n[//]host_name[:port][/service_name][:server_type][/instance_name]. Service\nnames can be found by running the Oracle utility `lsnrctl status` on the\ndatabase server machine. The tnsnames.ora file can be in the Oracle Net search\npath, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set\n`TNS_ADMIN` so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon\nhas read access to the file.\n@param character_set Determines the character set used by the Oracle Client\nlibraries. The character set does not need to match the character set\nused by the database. If it doesn&#039;t match, Oracle will do its best\nto convert data to and from the database character set. Depending on the\ncharacter sets this may not give usable results. Conversion also adds some\ntime overhead. If not specified, the Oracle Client libraries determine a\ncharacter set from the NLS_LANG environment variable. Passing this parameter\ncan reduce connection time.\n@param session_mode This parameter is available since version PHP 5 (PECL\nOCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER\nand OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified,\nthis function will try to establish privileged connection using external\ncredentials. Privileged connections are disabled by default. To enable\nthem you need to set oci8.privileged_connect to `On`. PHP 5.3 (PECL OCI8\n1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use\nExternal or OS authentication, which must be configured in the database. The\nOCI_CRED_EXT flag can only be used with username of &quot;/&quot; and a\nempty password. oci8.privileged_connect may be `On` or `Off`. OCI_CRED_EXT\nmay be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is\nnot supported on Windows for security reasons.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: An incorrectly installed or configured OCI8 extension will often\nmanifest itself as a connection problem or error. See Installing/Configuring\nfor troubleshooting information.\n@note Note: In PHP versions before 5.0.0 use ocilogon() instead. The old\nfunction name can still be used in current versions, however it is deprecated\nand not recommended.\n@see oci_pconnect() - Connect to an Oracle database using a persistent\nconnection\n@see oci_new_connect() - Connect to the Oracle server using a unique connection\n@see oci_close() - Closes an Oracle connection\n
oci_define_by_name oci_define_by_name(resource $statement, string $column_name,\nmixed &$variable [, int $type=SQLT_CHR]) [bool]\nAssociates a PHP variable with a column for query fetches. Associates\na PHP variable with a column for query fetches using oci_fetch(). The\noci_define_by_name() call must occur before executing oci_execute().\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@param column_name The column name used in the query. Use uppercase for\nOracle&#039;s default, non-case sensitive column names. Use the exact column\nname case for case-sensitive column names.\n@param variable The PHP variable that will contain the returned column value.\n@param type The data type to be returned. Generally not needed. Note that\nOracle-style data conversions are not performed. For example, `SQLT_INT`\nwill be ignored and the returned data type will still be `SQLT_CHR`. You can\noptionally use oci_new_descriptor() to allocate LOB/ROWID/BFILE descriptors.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 use ocidefinebyname() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_new_descriptor() - Initializes a new empty LOB or FILE descriptor\n
oci_error oci_error([resource $resource]) [array]\nReturns the last error found. Returns the last error found. The function\nshould be called immediately after an error occurs. Errors are cleared by\na successful statement.\n@param resource For most errors, `resource` is the resource handle that was\npassed to the failing function call. For connection errors with oci_connect(),\noci_new_connect() or oci_pconnect() do not pass `resource`.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocierror() instead. The\nold function name can still be used in current versions, however it is\ndeprecated and not recommended.\n
oci_execute oci_execute(resource $statement [, int\n$mode=OCI_COMMIT_ON_SUCCESS]) [bool]\nExecutes a statement. Executes a `statement` previously returned from\noci_parse(). After execution, statements like `INSERT` will have data committed\nto the database by default. For statements like `SELECT`, execution performs\nthe logic of the query. Query results can subsequently be fetched in PHP\nwith functions like oci_fetch_array(). Each parsed statement may be executed\nmultiple times, saving the cost of re-parsing. This is commonly used for\n`INSERT` statements when data is bound with oci_bind_by_name().\n@param statement A valid OCI statement identifier.\n@param mode An optional second parameter can be one of the following\nconstants: Execution Modes Constant Description OCI_COMMIT_ON_SUCCESS\nAutomatically commit all outstanding changes for this connection\nwhen the statement has succeeded. This is the default. OCI_DEFAULT\nObsolete as of PHP 5.3.2 (PECL OCI8 1.4) but still available for\nbackward compatibility. Use the equivalent OCI_NO_AUTO_COMMIT in new\ncode. OCI_DESCRIBE_ONLY Make query meta data available to functions like\noci_field_name() but do not create a result set. Any subsequent fetch call\nsuch as oci_fetch_array() will fail. OCI_NO_AUTO_COMMIT Do not automatically\ncommit changes. Prior to PHP 5.3.2 (PECL OCI8 1.4) use OCI_DEFAULT which\nis an alias for OCI_NO_AUTO_COMMIT. Using OCI_NO_AUTO_COMMIT mode starts a\ntransaction. Transactions are automatically rolled back when the connection\nis closed, or when the script ends. Explicitly call oci_commit() to commit a\ntransaction, or oci_rollback() to abort it. When inserting or updating data,\nusing transactions is recommended for relational data consistency and for\nperformance reasons. If OCI_NO_AUTO_COMMIT mode is used for any statement\nincluding queries, and oci_commit() or oci_rollback() is not subsequently\ncalled, then OCI8 will perform a rollback at the end of the script even if\nno data was changed. To avoid an unnecessary rollback, many scripts do not\nuse OCI_NO_AUTO_COMMIT mode for queries or PL/SQL. Be careful to ensure\nthe appropriate transactional consistency for the application when using\noci_execute() with different modes in the same script.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Transactions are automatically rolled back when connections\nare closed, or when the script ends, whichever is soonest. Explicitly call\noci_commit() to commit a transaction. Any call to oci_execute() that uses\nOCI_COMMIT_ON_SUCCESS mode explicitly or by default will commit any previous\nuncommitted transaction. Any Oracle DDL statement such as `CREATE` or `DROP`\nwill automatically commit any uncommitted transaction.\n@note Note: Because the oci_execute() function generally sends the statement\nto the database, oci_execute() can identify some statement syntax errors\nthat the lightweight, local oci_parse() function does not.\n@note Note: In PHP versions before 5.0.0 use ociexecute() instead. The old\nfunction name can still be used in current versions, however it is deprecated\nand not recommended.\n@see oci_parse() - Prepares an Oracle statement for execution\n
oci_fetch_all oci_fetch_all(resource $statement, array &$output [, int $skip=0\n[, int $maxrows=-1 [, int $flags=OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]])\n[int]\nFetches multiple rows from a query into a two-dimensional array. Fetches\nmultiple rows from a query into a two-dimensional array. By default, all rows\nare returned. This function can be called only once for each query executed\nwith oci_execute().\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@param output The variable to contain the returned rows. LOB columns are\nreturned as strings, where Oracle supports conversion. See oci_fetch_array()\nfor more information on how data and types are fetched.\n@param skip The number of initial rows to discard when fetching the result. The\ndefault value is 0, so the first row onwards is returned.\n@param maxrows The number of rows to return. The default is -1 meaning return\nall the rows from `skip` + 1 onwards.\n@param flags Parameter `flags` indicates the array structure and whether\nassociative arrays should be used. oci_fetch_all() Array Structure Modes\nConstant Description OCI_FETCHSTATEMENT_BY_ROW The outer array will contain\none sub-array per query row. OCI_FETCHSTATEMENT_BY_COLUMN The outer array will\ncontain one sub-array per query column. This is the default. Arrays can be\nindexed by column heading or numerically. oci_fetch_all() Array Index Modes\nConstant Description OCI_NUM Numeric indexes are used for each column&#039;s\narray. OCI_ASSOC Associative indexes are used for each column&#039;s\narray. This is the default. Use the addition operator &quot;+&quot; to choose a\ncombination of array structure and index modes. Oracle&#039;s default, non-case\nsensitive column names will have uppercase array keys. Case-sensitive column\nnames will have array keys using the exact column case. Use var_dump() on\n`output`to verify the appropriate case to use for each query. Queries that have\nmore than one column with the same name should use column aliases. Otherwise\nonly one of the columns will appear in an associative array.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Using `skip` is very inefficient. All the rows to be skipped are\nincluded in the result set that is returned from the database to PHP. They\nare then discarded. It is more efficient to use SQL to restrict the offset\nand range of rows in the query. See oci_fetch_array() for an example.\n@note Note: Queries that return a large number of rows can be more memory\nefficient if a single-row fetching function like oci_fetch_array() is used.\n@note Note: For queries returning a large number of rows, performance can\nbe significantly improved by increasing oci8.default_prefetch or using\noci_set_prefetch().\n@note Note: In PHP versions before 5.0.0 you must use ocifetchstatement()\ninstead. The old function name can still be used in current versions,\nhowever it is deprecated and not recommended.\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_object() - Returns the next row from a query as an object\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n@see oci_set_prefetch() - Sets number of rows to be prefetched by queries\n
oci_fetch_array oci_fetch_array(resource $statement [, int $mode]) [array]\nReturns the next row from a query as an associative or numeric array. Returns\nan array containing the next result-set row of a query. Each array entry\ncorresponds to a column of the row. This function is typically called in a\nloop until it returns FALSE, indicating no more rows exist. For details on\nthe data type mapping performed by the OCI8 extension, see the datatypes\nsupported by the driver\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@param mode An optional second parameter can be any combination of the\nfollowing constants: oci_fetch_array() Modes Constant Description OCI_BOTH\nReturns an array with both associative and numeric indices. This is the\nsame as OCI_ASSOC + OCI_NUM and is the default behavior. OCI_ASSOC Returns\nan associative array. OCI_NUM Returns a numeric array. OCI_RETURN_NULLS\nCreates elements for NULL fields. The element values will be a PHP\nNULL. OCI_RETURN_LOBS Returns the contents of LOBs instead of the LOB\ndescriptors. The default `mode` is OCI_BOTH. Use the addition operator\n&quot;+&quot; to specify more than one mode at a time.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: Associative array indices need to be in uppercase for standard\nOracle columns that were created with case insensitive names.\n@note Note: For queries returning a large number of rows, performance can\nbe significantly improved by increasing oci8.default_prefetch or using\noci_set_prefetch().\n@note Note: The function oci_fetch_array() is insignificantly slower than\noci_fetch_assoc() or oci_fetch_row(), but is more flexible.\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_object() - Returns the next row from a query as an object\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n@see oci_set_prefetch() - Sets number of rows to be prefetched by queries\n
oci_fetch_assoc oci_fetch_assoc(resource $statement) [array]\nReturns the next row from a query as an associative array. Returns an\nassociative array containing the next result-set row of a query. Each array\nentry corresponds to a column of the row. This function is typically called\nin a loop until it returns FALSE, indicating no more rows exist. Calling\noci_fetch_assoc() is identical to calling oci_fetch_array() with OCI_ASSOC +\nOCI_RETURN_NULLS.\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: See oci_fetch_array() for examples of fetching rows.\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_object() - Returns the next row from a query as an object\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n
oci_fetch_object oci_fetch_object(resource $statement) [object]\nReturns the next row from a query as an object. Returns an object containing\nthe next result-set row of a query. Each attribute of the object corresponds\nto a column of the row. This function is typically called in a loop until\nit returns FALSE, indicating no more rows exist. For details on the data\ntype mapping performed by the OCI8 extension, see the datatypes supported\nby the driver\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n
oci_fetch_row oci_fetch_row(resource $statement) [array]\nReturns the next row from a query as a numeric array. Returns a numerically\nindexed array containing the next result-set row of a query. Each array entry\ncorresponds to a column of the row. This function is typically called in a loop\nuntil it returns FALSE, indicating no more rows exist. Calling oci_fetch_row()\nis identical to calling oci_fetch_array() with OCI_NUM + OCI_RETURN_NULLS.\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: See oci_fetch_array() for examples of fetching rows.\n@see oci_fetch() - Fetches the next row from a query into internal buffers\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_object() - Returns the next row from a query as an object\n
oci_fetch oci_fetch(resource $statement) [bool]\nFetches the next row from a query into internal buffers. Fetches the next\nrow from a query into internal buffers accessible either with oci_result(),\nor by using variables previously defined with oci_define_by_name(). See\noci_fetch_array() for general information about fetching data.\n@param statement A valid OCI8 statement identifier created by oci_parse()\nand executed by oci_execute(), or a `REF CURSOR` statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 use ocifetch() instead. The old\nfunction name can still be used in current versions, however it is deprecated\nand not recommended.\n@see oci_define_by_name() - Associates a PHP variable with a column for\nquery fetches\n@see oci_fetch_all() - Fetches multiple rows from a query into a\ntwo-dimensional array\n@see oci_fetch_array() - Returns the next row from a query as an associative\nor numeric array\n@see oci_fetch_assoc() - Returns the next row from a query as an associative\narray\n@see oci_fetch_object() - Returns the next row from a query as an object\n@see oci_fetch_row() - Returns the next row from a query as a numeric array\n@see oci_result() - Returns field's value from the fetched row\n
oci_field_is_null oci_field_is_null(resource $statement, mixed $field) [bool]\nChecks if the field is NULL. Checks if the given `field` from the `statement`\nis NULL.\n@param statement A valid OCI statement identifier.\n@param field Can be a field&#039;s index or a field&#039;s name (uppercased).\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumnisnull()\ninstead. This name still can be used, it was left as alias of\noci_field_is_null() for downwards compatability. This, however, is deprecated\nand not recommended.\n
oci_field_name oci_field_name(resource $statement, int $field) [string]\nReturns the name of a field from the statement. Returns the name of the\n`field`.\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumnname()\ninstead. This name still can be used, it was left as alias of oci_field_name()\nfor downwards compatability. This, however, is deprecated and not recommended.\n@see oci_num_fields() - Returns the number of result columns in a statement\n@see oci_field_type() - Returns field's data type\n@see oci_field_size() - Returns field's size\n
oci_field_precision oci_field_precision(resource $statement, int $field) [int]\nTell the precision of a field. Returns precision of the `field`. For FLOAT\ncolumns, precision is nonzero and scale is -127. If precision is 0, then\ncolumn is NUMBER. Else it&#039;s NUMBER(precision, scale).\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumnprecision()\ninstead. This name still can be used, it was left as alias\nof oci_field_precision() for downwards compatability. This, however, is\ndeprecated and not recommended.\n@see oci_field_scale() - Tell the scale of the field\n@see oci_field_type() - Returns field's data type\n
oci_field_scale oci_field_scale(resource $statement, int $field) [int]\nTell the scale of the field. Returns the scale of the column with `field`\nindex. For FLOAT columns, precision is nonzero and scale is -127. If precision\nis 0, then column is NUMBER. Else it&#039;s NUMBER(precision, scale).\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumnscale()\ninstead. This name still can be used, it was left as alias of oci_field_scale()\nfor downwards compatability. This, however, is deprecated and not recommended.\n@see oci_field_precision() - Tell the precision of a field\n@see oci_field_type() - Returns field's data type\n
oci_field_size oci_field_size(resource $statement, mixed $field) [int]\nReturns field's size. Returns the size of a `field`.\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumnsize()\ninstead. This name still can be used, it was left as alias of oci_field_size()\nfor downwards compatability. This, however, is deprecated and not recommended.\n@see oci_num_fields() - Returns the number of result columns in a statement\n@see oci_field_name() - Returns the name of a field from the statement\n
oci_field_type_raw oci_field_type_raw(resource $statement, int $field) [int]\nTell the raw Oracle data type of the field. Returns Oracle&#039;s raw data\ntype of the `field`. However, if you want to get field&#039;s type, then\noci_field_type() will suit you better.\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumntyperaw()\ninstead. This name still can be used, it was left as alias of\noci_field_type_raw() for downwards compatability. This, however, is deprecated\nand not recommended.\n
oci_field_type oci_field_type(resource $statement, int $field) [mixed]\nReturns field's data type. Returns a field&#039;s data type.\n@param statement A valid OCI statement identifier.\n@param field Can be the field&#039;s index (1-based) or name.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ocicolumntype()\ninstead. This name still can be used, it was left as alias of oci_field_type()\nfor downwards compatability. This, however, is deprecated and not recommended.\n@see oci_num_fields() - Returns the number of result columns in a statement\n@see oci_field_name() - Returns the name of a field from the statement\n@see oci_field_size() - Returns field's size\n
oci_free_statement oci_free_statement(resource $statement) [bool]\nFrees all resources associated with statement or cursor. Frees resources\nassociated with Oracle&#039;s cursor or statement, which was received from\nas a result of oci_parse() or obtained from Oracle.\n@param statement A valid OCI statement identifier.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n
oci_internal_debug oci_internal_debug(bool $onoff) [void]\nEnables or disables internal debug output. Enables or disables internal\ndebug output.\n@param onoff Set this to FALSE to turn debug output off or TRUE to turn it on.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@note Note: In PHP versions before 5.0.0 you must use ociinternaldebug()\ninstead. This name still can be used, it was left as alias of\noci_internal_debug() for downwards compatability. This, however, is deprecated\nand not recommended.\n
append bool OCI-Lob::append ( OCI-Lob $lob_from )\nAppends data from the large object to another large object.\n@param lob_from The copied LOB.\n@return (PHP 5, PECL OCI8 >= 1.1.0)\n@see OCI-Lob->flush\n@see OCI-Lob->setBuffering\n@see OCI-Lob->getBuffering\n
ncurses_wclear ncurses_wclear(resource $window) [int]\nClears window.\n@param window\n
ncurses_wcolor_set ncurses_wcolor_set(resource $window, int $color_pair) [int]\nSets windows color pairings.\n@param window\n@param color_pair\n
ncurses_werase ncurses_werase(resource $window) [int]\nErase window contents.\n@param window\n
ncurses_wgetch ncurses_wgetch(resource $window) [int]\nReads a character from keyboard (window).\n@param window\n
ncurses_whline ncurses_whline(resource $window, int $charattr, int $n) [int]\nDraws a horizontal line in a window at current position using an attributed\ncharacter and max. n characters long.\n@param window\n@param charattr\n@param n\n
ncurses_wmouse_trafo ncurses_wmouse_trafo(resource $window, int &$y, int &$x,\nbool $toscreen) [bool]\nTransforms window/stdscr coordinates.\n@param window\n@param x\n@param y\n@param toscreen\n
ncurses_wmove ncurses_wmove(resource $window, int $y, int $x) [int]\nMoves windows output position.\n@param window\n@param y\n@param x\n
ncurses_wnoutrefresh ncurses_wnoutrefresh(resource $window) [int]\nCopies window to virtual screen.\n@param window\n
ncurses_wrefresh ncurses_wrefresh(resource $window) [int]\nRefresh window on terminal screen.\n@param window\n
ncurses_wstandend ncurses_wstandend(resource $window) [int]\nEnd standout mode for a window.\n@param window\n
ncurses_wstandout ncurses_wstandout(resource $window) [int]\nEnter standout mode for a window.\n@param window\n
ncurses_wvline ncurses_wvline(resource $window, int $charattr, int $n) [int]\nDraws a vertical line in a window at current position using an attributed\ncharacter and max. n characters long.\n@param window\n@param charattr\n@param n\n
newt_bell newt_bell(void) [void]\nSend a beep to the terminal. This function sends a beep to the terminal. Note:\nDepending on the terminal&#039;s settings, this beep may or may not be audible.\n@return (PECL newt >= 0.1)\n
newt_button_bar newt_button_bar(array &$buttons) [resource]\nThis function returns a grid containing the buttons created.. This function\nreturns a grid containing the buttons created.\n@param buttons\n@return (PECL newt >= 0.1)\n
newt_button newt_button(int $left, int $top, string $text) [resource]\nCreate a new button. Creates a new button.\n@param left X-coordinate of the button.\n@param top Y-coordinate of the button.\n@param text The text which should be displayed in the button.\n@return (PECL newt >= 0.1)\n@see newt_button_bar() - This function returns a grid containing the buttons\ncreated.\n
newt_centered_window newt_centered_window(int $width, int $height [, string\n$title]) [int]\nOpen a centered window of the specified size. Open a centered window of the\nspecified size.\n@param width Window width\n@param height Window height\n@param title Window title\n@return (PECL newt >= 0.1)\n@see newt_pop_window() - Removes the top window from the display\n@see newt_open_window() - Open a window of the specified size and position\n
newt_checkbox_get_value newt_checkbox_get_value(resource $checkbox) [string]\nRetreives value of checkox resource. This function returns the character in\nthe sequence which indicates the current value of the checkbox.\n@param checkbox\n@return (PECL newt >= 0.1)\n
newt_checkbox_set_flags newt_checkbox_set_flags(resource $checkbox, int\n$flags, int $sense) [void]\nConfigures checkbox resource. This function allows to set various flags on\ncheckbox resource.\n@param checkbox\n@param flags\n@param sense\n@return (PECL newt >= 0.1)\n
newt_checkbox_set_value newt_checkbox_set_value(resource $checkbox, string\n$value) [void]\nSets the value of the checkbox. This function allows to set the current\nvalue of the checkbox resource.\n@param checkbox\n@param value\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_add_item newt_checkbox_tree_add_item(resource $checkboxtree,\nstring $text, mixed $data, int $flags, int $index [, int $...]) [void]\nAdds new item to the checkbox tree. This function allows to add new item to\nthe checkbox tree.\n@param checkboxtree\n@param text\n@param data\n@param flags\n@param index\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_find_item newt_checkbox_tree_find_item(resource\n$checkboxtree, mixed $data) [array]\nFinds an item in the checkbox tree. Finds an item in the checkbox tree by\nitem&#039;s data.\n@param checkboxtree\n@param data\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_get_current newt_checkbox_tree_get_current(resource\n$checkboxtree) [mixed]\nReturns checkbox tree selected item. This method returns checkbox tree\nselected tem.\n@param checkboxtree\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_get_entry_value newt_checkbox_tree_get_entry_value(resource\n$checkboxtree, mixed $data) [string]\nDescription.\n@param checkboxtree\n@param data\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_get_multi_selection\nnewt_checkbox_tree_get_multi_selection(resource $checkboxtree, string $seqnum)\n[array]\nDescription.\n@param checkboxtree\n@param seqnum\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_get_selection newt_checkbox_tree_get_selection(resource\n$checkboxtree) [array]\nDescription.\n@param checkboxtree\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_multi newt_checkbox_tree_multi(int $left, int $top,\nint $height, string $seq [, int $flags]) [resource]\nDescription.\n@param left\n@param top\n@param height\n@param seq\n@param flags\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_set_current newt_checkbox_tree_set_current(resource\n$checkboxtree, mixed $data) [void]\nDescription.\n@param checkboxtree\n@param data\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_set_entry_value newt_checkbox_tree_set_entry_value(resource\n$checkboxtree, mixed $data, string $value) [void]\nDescription.\n@param checkboxtree\n@param data\n@param value\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_set_entry newt_checkbox_tree_set_entry(resource\n$checkboxtree, mixed $data, string $text) [void]\nDescription.\n@param checkboxtree\n@param data\n@param text\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree_set_width newt_checkbox_tree_set_width(resource\n$checkbox_tree, int $width) [void]\nDescription.\n@param checkbox_tree\n@param width\n@return (PECL newt >= 0.1)\n
newt_checkbox_tree newt_checkbox_tree(int $left, int $top, int $height [,\nint $flags]) [resource]\nDescription.\n@param left\n@param top\n@param height\n@param flags\n@return (PECL newt >= 0.1)\n
newt_checkbox newt_checkbox(int $left, int $top, string $text, string\n$def_value [, string $seq]) [resource]\nDescription.\n@param left\n@param top\n@param text\n@param def_value\n@param seq\n@return (PECL newt >= 0.1)\n
newt_clear_key_buffer newt_clear_key_buffer(void) [void]\nDiscards the contents of the terminal's input buffer without\n  waiting for additional input. Discards the contents of the terminal&#039;s\n  input buffer without waiting for additional input.\n@return (PECL newt >= 0.1)\n@see newt_wait_for_key() - Doesn't return until a key has been pressed\n
newt_cls newt_cls(void) [void]\nDescription.\n@return (PECL newt >= 0.1)\n
newt_compact_button newt_compact_button(int $left, int $top, string $text)\n[resource]\nDescription.\n@param left\n@param top\n@param text\n@return (PECL newt >= 0.1)\n
newt_component_add_callback newt_component_add_callback(resource $component,\nmixed $func_name, mixed $data) [void]\nDescription.\n@param component\n@param func_name\n@param data\n@return (PECL newt >= 0.1)\n
newt_component_takes_focus newt_component_takes_focus(resource $component,\nbool $takes_focus) [void]\nDescription.\n@param component\n@param takes_focus\n@return (PECL newt >= 0.1)\n
newt_create_grid newt_create_grid(int $cols, int $rows) [resource]\nDescription.\n@param cols\n@param rows\n@return (PECL newt >= 0.1)\n
newt_cursor_off newt_cursor_off(void) [void]\nDescription.\n@return (PECL newt >= 0.1)\n
newt_cursor_on newt_cursor_on(void) [void]\nDescription.\n@return (PECL newt >= 0.1)\n
newt_delay newt_delay(int $microseconds) [void]\nDescription.\n@param microseconds\n@return (PECL newt >= 0.1)\n
newt_draw_form newt_draw_form(resource $form) [void]\nDescription.\n@param form\n@return (PECL newt >= 0.1)\n
newt_draw_root_text newt_draw_root_text(int $left, int $top, string $text)\n[void]\nDisplays the string text at the position indicated. Displays the string text\nat the position indicated.\n@param left Column number Note: If left is negative, the position is measured\nfrom the opposite side of the screen.\n@param top Line number Note: If top is negative, the position is measured\nfrom the opposite side of the screen.\n@param text Text to display.\n@return (PECL newt >= 0.1)\n@see newt_push_help_line() - Saves the current help line on a stack, and\ndisplays the new line\n@see newt_pop_help_line() - Replaces the current help line with the one from\nthe stack\n
newt_entry_get_value newt_entry_get_value(resource $entry) [string]\nDescription.\n@param entry\n@return (PECL newt >= 0.1)\n
newt_entry_set_filter newt_entry_set_filter(resource $entry, callback $filter,\nmixed $data) [void]\nDescription.\n@param entry\n@param filter\n@param data\n@return (PECL newt >= 0.1)\n
newt_entry_set_flags newt_entry_set_flags(resource $entry, int $flags,\nint $sense) [void]\nDescription.\n@param entry\n@param flags\n@param sense\n@return (PECL newt >= 0.1)\n
newt_entry_set newt_entry_set(resource $entry, string $value [, bool\n$cursor_at_end]) [void]\nDescription.\n@param entry\n@param value\n@param cursor_at_end\n@return (PECL newt >= 0.1)\n
newt_entry newt_entry(int $left, int $top, int $width [, string $init_value\n[, int $flags]]) [resource]\nDescription.\n@param left\n@param top\n@param width\n@param init_value\n@param flags\n@return (PECL newt >= 0.1)\n
newt_finished newt_finished(void) [int]\nUninitializes newt interface. Uninitializes newt interface. This function\nbe called, when program is ready to exit.\n@return (PECL newt >= 0.1)\n@see newt_init() - Initialize newt\n
newt_form_add_component newt_form_add_component(resource $form, resource\n$component) [void]\nAdds a single component to the form. Adds a single component to the `form`.\n@param form Form to which component will be added\n@param component Component to add to the form\n@return (PECL newt >= 0.1)\n@see newt_form_add_components() - Add several components to the form\n
newt_form_add_components newt_form_add_components(resource $form, array\n$components) [void]\nAdd several components to the form. Adds several components to the `form`.\n@param form Form to which components will be added\n@param components Array of components to add to the form\n@return (PECL newt >= 0.1)\n@see newt_form_add_component() - Adds a single component to the form\n
newt_form_add_hot_key newt_form_add_hot_key(resource $form, int $key) [void]\nDescription.\n@param form\n@param key\n@return (PECL newt >= 0.1)\n
newt_form_destroy newt_form_destroy(resource $form) [void]\nDestroys a form. This function frees the memory resources used by the form\nand all of the components which have been added to the form (including\nthose components which are on subforms). Once a form has been destroyed,\nnone of the form&#039;s components can be used.\n@param form Form component, which is going to be destroyed\n@return (PECL newt >= 0.1)\n@see newt_form_run() - Runs a form\n@see newt_run_form() - Runs a form\n
newt_form_get_current newt_form_get_current(resource $form) [resource]\nDescription.\n@param form\n@return (PECL newt >= 0.1)\n
newt_form_run newt_form_run(resource $form, array &$exit_struct) [void]\nRuns a form. This function runs the form passed to it.\n@param form Form component\n@param exit_struct Array, used for returning information after running the\nform component. Keys and values are described in the following table: Form\nExit Structure Index Key Value Type Description reason integer The reason,\nwhy the form has been exited. Possible values are defined here. watch resource\nResource link, specified in newt_form_watch_fd() key integer Hotkey component\nresource Component, which caused the form to exit\n@return (PECL newt >= 0.1)\n@see newt_run_form() - Runs a form\n
newt_form_set_background newt_form_set_background(resource $from, int\n$background) [void]\nDescription.\n@param from\n@param background\n@return (PECL newt >= 0.1)\n
newt_form_set_height newt_form_set_height(resource $form, int $height) [void]\nDescription.\n@param form\n@param height\n@return (PECL newt >= 0.1)\n
newt_form_set_size newt_form_set_size(resource $form) [void]\nDescription.\n@param form\n@return (PECL newt >= 0.1)\n
newt_form_set_timer newt_form_set_timer(resource $form, int $milliseconds)\n[void]\nDescription.\n@param form\n@param milliseconds\n@return (PECL newt >= 0.1)\n
newt_form_set_width newt_form_set_width(resource $form, int $width) [void]\nDescription.\n@param form\n@param width\n@return (PECL newt >= 0.1)\n
newt_form_watch_fd newt_form_watch_fd(resource $form, resource $stream [,\nint $flags]) [void]\nDescription.\n@param form\n@param stream\n@param flags\n@return (PECL newt >= 0.1)\n
newt_form newt_form([resource $vert_bar [, string $help [, int $flags]]])\n[resource]\nCreate a form. Create a new form.\n@param vert_bar Vertical scrollbar which should be associated with the form\n@param help Help text string\n@param flags Various flags\n@return (PECL newt >= 0.1)\n@see newt_form_run() - Runs a form\n@see newt_run_form() - Runs a form\n@see newt_form_add_component() - Adds a single component to the form\n@see newt_form_add_components() - Add several components to the form\n@see newt_form_destroy() - Destroys a form\n
newt_get_screen_size newt_get_screen_size(int &$cols, int &$rows) [void]\nFills in the passed references with the current size of the\n  terminal. Fills in the passed references with the current size of the\n  terminal.\n@param cols Number of columns in the terminal\n@param rows Number of rows in the terminal\n@return (PECL newt >= 0.1)\n
newt_grid_add_components_to_form newt_grid_add_components_to_form(resource\n$grid, resource $form, bool $recurse) [void]\nDescription.\n@param grid\n@param form\n@param recurse\n@return (PECL newt >= 0.1)\n
newt_grid_basic_window newt_grid_basic_window(resource $text, resource $middle,\nresource $buttons) [resource]\nDescription.\n@param text\n@param middle\n@param buttons\n@return (PECL newt >= 0.1)\n
newt_grid_free newt_grid_free(resource $grid, bool $recurse) [void]\nDescription.\n@param grid\n@param recurse\n@return (PECL newt >= 0.1)\n
newt_grid_get_size newt_grid_get_size(resouce $grid, int &$width, int &$height)\n[void]\nDescription.\n@param grid\n@param width\n@param height\n@return (PECL newt >= 0.1)\n
newt_grid_h_close_stacked newt_grid_h_close_stacked(int $element1_type,\nresource $element1 [, int $... [, resource $...]]) [resource]\nDescription.\n@param element1_type\n@param element1\n@return (PECL newt >= 0.1)\n
newt_grid_h_stacked newt_grid_h_stacked(int $element1_type, resource $element1\n[, int $... [, resource $...]]) [resource]\nDescription.\n@param element1_type\n@param element1\n@return (PECL newt >= 0.1)\n
newt_grid_place newt_grid_place(resource $grid, int $left, int $top) [void]\nDescription.\n@param grid\n@param left\n@param top\n@return (PECL newt >= 0.1)\n
newt_grid_set_field newt_grid_set_field(resource $grid, int $col, int $row,\nint $type, resource $val, int $pad_left, int $pad_top, int $pad_right,\nint $pad_bottom, int $anchor [, int $flags]) [void]\nDescription.\n@param grid\n@param col\n@param row\n@param type\n@param val\n@param pad_left\n@param pad_top\n@param pad_right\n@param pad_bottom\n@param anchor\n@param flags\n@return (PECL newt >= 0.1)\n
newt_grid_simple_window newt_grid_simple_window(resource $text, resource\n$middle, resource $buttons) [resource]\nDescription.\n@param text\n@param middle\n@param buttons\n@return (PECL newt >= 0.1)\n
newt_grid_v_close_stacked newt_grid_v_close_stacked(int $element1_type,\nresource $element1 [, int $... [, resource $...]]) [resource]\nDescription.\n@param element1_type\n@param element1\n@return (PECL newt >= 0.1)\n
newt_grid_v_stacked newt_grid_v_stacked(int $element1_type, resource $element1\n[, int $... [, resource $...]]) [resource]\nDescription.\n@param element1_type\n@param element1\n@return (PECL newt >= 0.1)\n
newt_grid_wrapped_window_at newt_grid_wrapped_window_at(resource $grid,\nstring $title, int $left, int $top) [void]\nDescription.\n@param grid\n@param title\n@param left\n@param top\n@return (PECL newt >= 0.1)\n
newt_grid_wrapped_window newt_grid_wrapped_window(resource $grid, string\n$title) [void]\nDescription.\n@param grid\n@param title\n@return (PECL newt >= 0.1)\n
newt_init newt_init(void) [int]\nInitialize newt. Initializes the newt interface. This function must be called\nbefore any other newt function.\n@return (PECL newt >= 0.1)\n@see newt_finished() - Uninitializes newt interface\n
newt_label_set_text newt_label_set_text(resource $label, string $text) [void]\nDescription.\n@param label\n@param text\n@return (PECL newt >= 0.1)\n
newt_label newt_label(int $left, int $top, string $text) [resource]\nDescription.\n@param left\n@param top\n@param text\n@return (PECL newt >= 0.1)\n
newt_listbox_append_entry newt_listbox_append_entry(resource $listbox,\nstring $text, mixed $data) [void]\nDescription.\n@param listbox\n@param text\n@param data\n@return (PECL newt >= 0.1)\n
newt_listbox_clear_selection newt_listbox_clear_selection(resource $listbox)\n[void]\nDescription.\n@param listbox\n@return (PECL newt >= 0.1)\n
newt_listbox_clear newt_listbox_clear(resource $listobx) [void]\nDescription.\n@param listobx\n@return (PECL newt >= 0.1)\n
newt_listbox_delete_entry newt_listbox_delete_entry(resource $listbox,\nmixed $key) [void]\nDescription.\n@param listbox\n@param key\n@return (PECL newt >= 0.1)\n
newt_listbox_get_current newt_listbox_get_current(resource $listbox) [string]\nDescription.\n@param listbox\n@return (PECL newt >= 0.1)\n
newt_listbox_get_selection newt_listbox_get_selection(resource $listbox)\n[array]\nDescription.\n@param listbox\n@return (PECL newt >= 0.1)\n
newt_listbox_insert_entry newt_listbox_insert_entry(resource $listbox,\nstring $text, mixed $data, mixed $key) [void]\nDescription.\n@param listbox\n@param text\n@param data\n@param key\n@return (PECL newt >= 0.1)\n
newt_listbox_item_count newt_listbox_item_count(resource $listbox) [int]\nDescription.\n@param listbox\n@return (PECL newt >= 0.1)\n
newt_listbox_select_item newt_listbox_select_item(resource $listbox, mixed\n$key, int $sense) [void]\nDescription.\n@param listbox\n@param key\n@param sense\n@return (PECL newt >= 0.1)\n
newt_listbox_set_current_by_key newt_listbox_set_current_by_key(resource\n$listbox, mixed $key) [void]\nDescription.\n@param listbox\n@param key\n@return (PECL newt >= 0.1)\n
newt_listbox_set_current newt_listbox_set_current(resource $listbox, int $num)\n[void]\nDescription.\n@param listbox\n@param num\n@return (PECL newt >= 0.1)\n
newt_listbox_set_data newt_listbox_set_data(resource $listbox, int $num,\nmixed $data) [void]\nDescription.\n@param listbox\n@param num\n@param data\n@return (PECL newt >= 0.1)\n
newt_listbox_set_entry newt_listbox_set_entry(resource $listbox, int $num,\nstring $text) [void]\nDescription.\n@param listbox\n@param num\n@param text\n@return (PECL newt >= 0.1)\n
newt_listbox_set_width newt_listbox_set_width(resource $listbox, int $width)\n[void]\nDescription.\n@param listbox\n@param width\n@return (PECL newt >= 0.1)\n
newt_listbox newt_listbox(int $left, int $top, int $height [, int $flags])\n[resource]\nDescription.\n@param left\n@param top\n@param height\n@param flags\n@return (PECL newt >= 0.1)\n
newt_listitem_get_data newt_listitem_get_data(resource $item) [mixed]\nDescription.\n@param item\n@return (PECL newt >= 0.1)\n
newt_listitem_set newt_listitem_set(resource $item, string $text) [void]\nDescription.\n@param item\n@param text\n@return (PECL newt >= 0.1)\n
newt_listitem newt_listitem(int $left, int $top, string $text, bool\n$is_default, resouce $prev_item, mixed $data [, int $flags]) [resource]\nDescription.\n@param left\n@param top\n@param text\n@param is_default\n@param prev_item\n@param data\n@param flags\n@return (PECL newt >= 0.1)\n
newt_open_window newt_open_window(int $left, int $top, int $width, int $height\n[, string $title]) [int]\nOpen a window of the specified size and position. Open a window of the\nspecified size and position.\n@param left Location of the upper left-hand corner of the window (column\nnumber)\n@param top Location of the upper left-hand corner of the window (row number)\n@param width Window width\n@param height Window height\n@param title Window title\n@return (PECL newt >= 0.1)\n@see newt_pop_window() - Removes the top window from the display\n@see newt_centered_window() - Open a centered window of the specified size\n
newt_pop_help_line newt_pop_help_line(void) [void]\nReplaces the current help line with the one from the stack. Replaces the\ncurrent help line with the one from the stack. Note: It&#039;s important\nnot to call to newt_pop_help_line() more than newt_push_help_line().\n@return (PECL newt >= 0.1)\n@see newt_push_help_line() - Saves the current help line on a stack, and\ndisplays the new line\n
newt_pop_window newt_pop_window(void) [void]\nRemoves the top window from the display. Removes the top window from the\ndisplay, and redraws the display areas which the window overwrote.\n@return (PECL newt >= 0.1)\n@see newt_open_window() - Open a window of the specified size and position\n@see newt_centered_window() - Open a centered window of the specified size\n
newt_push_help_line newt_push_help_line([string $text]) [void]\nSaves the current help line on a stack, and displays the new line. Saves\nthe current help line on a stack, and displays the new line.\n@param text New help text message Note: If not specified, the help line\nis cleared.\n@return (PECL newt >= 0.1)\n@see newt_pop_help_line() - Replaces the current help line with the one from\nthe stack\n
ncurses_halfdelay ncurses_halfdelay(int $tenth) [int]\nPut terminal into halfdelay mode.\n@param tenth\n
ncurses_has_colors ncurses_has_colors(void) [bool]\nChecks if terminal has color capabilities. Checks whether the terminal has\ncolor capabilities. This function can be used to write terminal-independent\nprograms. ncurses must be initialized using ncurses_init() before calling\nthis function.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_can_change_color() - Checks if terminal color definitions can\nbe changed\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_has_ic ncurses_has_ic(void) [bool]\nCheck for insert- and delete-capabilities.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_has_il() - Check for line insert- and delete-capabilities\n
ncurses_has_il ncurses_has_il(void) [bool]\nCheck for line insert- and delete-capabilities.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_has_ic() - Check for insert- and delete-capabilities\n
ncurses_has_key ncurses_has_key(int $keycode) [int]\nCheck for presence of a function key on terminal keyboard.\n@param keycode\n
ncurses_hide_panel ncurses_hide_panel(resource $panel) [int]\nRemove panel from the stack, making it invisible.\n@param panel\n
ncurses_hline ncurses_hline(int $charattr, int $n) [int]\nDraw a horizontal line at current position using an attributed character\nand max. n characters long.\n@param charattr\n@param n\n
ncurses_inch ncurses_inch(void) [string]\nGet character and attribute at current position.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_init_color ncurses_init_color(int $color, int $r, int $g, int $b) [int]\nDefine a terminal color. Defines or redefines the given color. When this\nfunction is called, all occurrences of the given color on the screen,\nif any, immediately change to the new definition. Color capabilities must\nbe supported by the terminal and initialized using ncurses_start_color()\nprior to calling this function. In addition, the terminal must have color\nchanging capabilities; use ncurses_can_change_color() to check for this.\n@param color The identification number of the color to redefine. It may be\none of the default color constants.\n@param r A color value, between 0 and 1000, for the red component.\n@param g A color value, between 0 and 1000, for the green component.\n@param b A color value, between 0 and 1000, for the blue component.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_color_content() - Retrieves RGB components of a color\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_init_pair ncurses_init_pair(int $pair, int $fg, int $bg) [int]\nDefine a color pair. Defines or redefines the given color pair to have the\ngiven foreground and background colors. If the color pair was previously\ninitialized, the screen is refreshed and all occurrences of it are changed\nto reflect the new definition. Color capabilities must be initialized using\nncurses_start_color() before calling this function. The first color pair\n(color pair `0`) is assumed to be white on black by default, but can be\nchanged using ncurses_assume_default_colors().\n@param pair The number of the color pair to define.\n@param fg The foreground color for the color pair. May be one of the\npre-defined colors or one defined by ncurses_init_color() if the terminal\nhas color changing capabilities.\n@param bg The background color for the color pair. May be one of the\npre-defined colors or one defined by ncurses_init_color() if the terminal\nhas color changing capabilities.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_pair_content() - Retrieves foreground and background colors of\na color pair\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_init ncurses_init(void) [void]\nInitialize ncurses. Initializes the ncurses interface. This function must\nbe used before any other ncurses function call. Note that ncurses_end()\nmust be called before exiting from the program, or the terminal will not be\nrestored to its proper non-visual mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_end() - Stop using ncurses, clean up the screen\n
ncurses_insch ncurses_insch(int $character) [int]\nInsert character moving rest of line including character at current position.\n@param character\n
ncurses_insdelln ncurses_insdelln(int $count) [int]\nInsert lines before current line scrolling down (negative numbers delete\nand scroll up).\n@param count\n
ncurses_insertln ncurses_insertln(void) [int]\nInsert a line, move rest of screen down.\n
ncurses_insstr ncurses_insstr(string $text) [int]\nInsert string at current position, moving rest of line right.\n@param text\n
ncurses_instr ncurses_instr(string &$buffer) [int]\nReads string from terminal screen.\n@param buffer The characters. Attributes will be stripped.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_isendwin ncurses_isendwin(void) [bool]\nNcurses is in endwin mode, normal screen output may be performed.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_end() - Stop using ncurses, clean up the screen\n@see ncurses_wrefresh() - Refresh window on terminal screen\n
ncurses_keyok ncurses_keyok(int $keycode, bool $enable) [int]\nEnable or disable a keycode.\n@param keycode\n@param enable\n
ncurses_keypad ncurses_keypad(resource $window, bool $bf) [int]\nTurns keypad on or off.\n@param window\n@param bf\n
ncurses_killchar ncurses_killchar(void) [string]\nReturns current line kill character.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_erasechar() - Returns current erase character\n
ncurses_longname ncurses_longname(void) [string]\nReturns terminals description.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_termname() - Returns terminals (short)-name\n
ncurses_meta ncurses_meta(resource $window, bool $8bit) [int]\nEnables/Disable 8-bit meta key information.\n@param window\n@param 8bit\n
ncurses_mouse_trafo ncurses_mouse_trafo(int &$y, int &$x, bool $toscreen)\n[bool]\nTransforms coordinates.\n@param y\n@param x\n@param toscreen\n
ncurses_mouseinterval ncurses_mouseinterval(int $milliseconds) [int]\nSet timeout for mouse button clicks.\n@param milliseconds\n
ncurses_mousemask ncurses_mousemask(int $newmask, int &$oldmask) [int]\nSets mouse options.\n@param newmask Mouse mask options can be set with the following\npredefined constants: NCURSES_BUTTON1_PRESSED NCURSES_BUTTON1_RELEASED\nNCURSES_BUTTON1_CLICKED NCURSES_BUTTON1_DOUBLE_CLICKED\nNCURSES_BUTTON1_TRIPLE_CLICKED NCURSES_BUTTON2_PRESSED\nNCURSES_BUTTON2_RELEASED NCURSES_BUTTON2_CLICKED NCURSES_BUTTON2_DOUBLE_CLICKED\nNCURSES_BUTTON2_TRIPLE_CLICKED NCURSES_BUTTON3_PRESSED NCURSES_BUTTON3_RELEASED\nNCURSES_BUTTON3_CLICKED NCURSES_BUTTON3_DOUBLE_CLICKED\nNCURSES_BUTTON3_TRIPLE_CLICKED NCURSES_BUTTON4_PRESSED\nNCURSES_BUTTON4_RELEASED NCURSES_BUTTON4_CLICKED NCURSES_BUTTON4_DOUBLE_CLICKED\nNCURSES_BUTTON4_TRIPLE_CLICKED NCURSES_BUTTON_SHIFT> NCURSES_BUTTON_CTRL\nNCURSES_BUTTON_ALT NCURSES_ALL_MOUSE_EVENTS NCURSES_REPORT_MOUSE_POSITION\nAs a side effect, setting a zero mousemask in `newmask` turns off the mouse\npointer. Setting a non zero value turns mouse pointer on.\n@param oldmask This will be set to the previous value of the mouse event mask.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_getch() - Read a character from keyboard\n@see ncurses_getmouse() - Reads mouse event\n@see ncurses_ungetmouse() - Pushes mouse event to queue\n
ncurses_move_panel ncurses_move_panel(resource $panel, int $startx, int\n$starty) [int]\nMoves a panel so that its upper-left corner is at [startx, starty].\n@param panel\n@param startx\n@param starty\n
ncurses_move ncurses_move(int $y, int $x) [int]\nMove output position.\n@param y\n@param x\n
ncurses_mvaddch ncurses_mvaddch(int $y, int $x, int $c) [int]\nMove current position and add character.\n@param y\n@param x\n@param c\n
ncurses_mvaddchnstr ncurses_mvaddchnstr(int $y, int $x, string $s, int $n)\n[int]\nMove position and add attributed string with specified length.\n@param y\n@param x\n@param s\n@param n\n
ncurses_mvaddchstr ncurses_mvaddchstr(int $y, int $x, string $s) [int]\nMove position and add attributed string.\n@param y\n@param x\n@param s\n
ncurses_mvaddnstr ncurses_mvaddnstr(int $y, int $x, string $s, int $n) [int]\nMove position and add string with specified length.\n@param y\n@param x\n@param s\n@param n\n
ncurses_mvaddstr ncurses_mvaddstr(int $y, int $x, string $s) [int]\nMove position and add string.\n@param y\n@param x\n@param s\n
ncurses_mvcur ncurses_mvcur(int $old_y, int $old_x, int $new_y, int $new_x)\n[int]\nMove cursor immediately.\n@param old_y\n@param old_x\n@param new_y\n@param new_x\n
ncurses_mvdelch ncurses_mvdelch(int $y, int $x) [int]\nMove position and delete character, shift rest of line left.\n@param y\n@param x\n
ncurses_mvgetch ncurses_mvgetch(int $y, int $x) [int]\nMove position and get character at new position.\n@param y\n@param x\n
ncurses_mvhline ncurses_mvhline(int $y, int $x, int $attrchar, int $n) [int]\nSet new position and draw a horizontal line using an attributed character\nand max. n characters long.\n@param y\n@param x\n@param attrchar\n@param n\n
ncurses_mvinch ncurses_mvinch(int $y, int $x) [int]\nMove position and get attributed character at new position.\n@param y\n@param x\n
ncurses_mvvline ncurses_mvvline(int $y, int $x, int $attrchar, int $n) [int]\nSet new position and draw a vertical line using an attributed character and\nmax. n characters long.\n@param y\n@param x\n@param attrchar\n@param n\n
ncurses_mvwaddstr ncurses_mvwaddstr(resource $window, int $y, int $x, string\n$text) [int]\nAdd string at new position in window.\n@param window\n@param y\n@param x\n@param text\n
ncurses_napms ncurses_napms(int $milliseconds) [int]\nSleep.\n@param milliseconds\n
ncurses_new_panel ncurses_new_panel(resource $window) [resource]\nCreate a new panel and associate it with window.\n@param window\n
ncurses_newpad ncurses_newpad(int $rows, int $cols) [resource]\nCreates a new pad (window).\n@param rows\n@param cols\n
ncurses_newwin ncurses_newwin(int $rows, int $cols, int $y, int $x) [resource]\nCreate a new window.\n@param rows Number of rows\n@param cols Number of columns\n@param y y-coordinate of the origin\n@param x x-coordinate of the origin\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_nl ncurses_nl(void) [bool]\nTranslate newline and carriage return / line feed.\n
ncurses_nocbreak ncurses_nocbreak(void) [bool]\nSwitch terminal to cooked mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_cbreak() - Switch of input buffering\n
ncurses_noecho ncurses_noecho(void) [bool]\nSwitch off keyboard input echo.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_echo() - Activate keyboard input echo\n@see ncurses_getch() - Read a character from keyboard\n
ncurses_nonl ncurses_nonl(void) [bool]\nDo not translate newline and carriage return / line feed.\n
ncurses_noqiflush ncurses_noqiflush(void) [void]\nDo not flush on signal characters.\n
ncurses_noraw ncurses_noraw(void) [bool]\nSwitch terminal out of raw mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_raw() - Switch terminal into raw mode\n@see ncurses_cbreak() - Switch of input buffering\n@see ncurses_nocbreak() - Switch terminal to cooked mode\n
ncurses_pair_content ncurses_pair_content(int $pair, int &$f, int &$b) [int]\nRetrieves foreground and background colors of a color pair. Retrieves the\nforeground and background colors that constitute the given color pair. Terminal\ncolor capabilities must be initialized with ncurses_start_color() prior to\ncalling this function.\n@param pair The number of the color pair to retrieve information for.\n@param f A reference to which to return the foreground color of the color\npair. The information returned will be a color number referring to one of\nthe pre-defined colors or a color defined previously by ncurses_init_color()\nif the terminal supports color changing.\n@param b A reference to which to return the background color of the color\npair. The information returned will be a color number referring to one of\nthe pre-defined colors or a color defined previously by ncurses_init_color()\nif the terminal supports color changing.\n@return (PHP 4 >= 4.3.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_init_pair() - Define a color pair\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_panel_above ncurses_panel_above(resource $panel) [resource]\nReturns the panel above panel.\n@param panel\n@return (PHP 4 >= 4.3.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_panel_below ncurses_panel_below(resource $panel) [resource]\nReturns the panel below panel.\n@param panel\n
ncurses_panel_window ncurses_panel_window(resource $panel) [resource]\nReturns the window associated with panel.\n@param panel\n
ncurses_pnoutrefresh ncurses_pnoutrefresh(resource $pad, int $pminrow,\nint $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol) [int]\nCopies a region from a pad into the virtual screen.\n@param pad\n@param pminrow\n@param pmincol\n@param sminrow\n@param smincol\n@param smaxrow\n@param smaxcol\n
ncurses_prefresh ncurses_prefresh(resource $pad, int $pminrow, int $pmincol,\nint $sminrow, int $smincol, int $smaxrow, int $smaxcol) [int]\nCopies a region from a pad into the virtual screen.\n@param pad\n@param pminrow\n@param pmincol\n@param sminrow\n@param smincol\n@param smaxrow\n@param smaxcol\n
ncurses_putp ncurses_putp(string $text) [int]\nApply padding information to the string and output it.\n@param text\n
ncurses_qiflush ncurses_qiflush(void) [void]\nFlush on signal characters.\n
ncurses_raw ncurses_raw(void) [bool]\nSwitch terminal into raw mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_noraw() - Switch terminal out of raw mode\n@see ncurses_cbreak() - Switch of input buffering\n@see ncurses_nocbreak() - Switch terminal to cooked mode\n
ncurses_refresh ncurses_refresh(int $ch) [int]\nRefresh screen.\n@param ch\n
ncurses_replace_panel ncurses_replace_panel(resource $panel, resource $window)\n[int]\nReplaces the window associated with panel.\n@param panel\n@param window\n
ncurses_reset_prog_mode ncurses_reset_prog_mode(void) [int]\nResets the prog mode saved by def_prog_mode.\n
ncurses_reset_shell_mode ncurses_reset_shell_mode(void) [int]\nResets the shell mode saved by def_shell_mode.\n
ncurses_resetty ncurses_resetty(void) [bool]\nRestores saved terminal state.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_savetty() - Saves terminal state\n
ncurses_savetty ncurses_savetty(void) [bool]\nSaves terminal state.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_resetty() - Restores saved terminal state\n
ncurses_scr_dump ncurses_scr_dump(string $filename) [int]\nDump screen content to file.\n@param filename\n
ncurses_scr_init ncurses_scr_init(string $filename) [int]\nInitialize screen from file dump.\n@param filename\n
ncurses_scr_restore ncurses_scr_restore(string $filename) [int]\nRestore screen from file dump.\n@param filename\n
ncurses_scr_set ncurses_scr_set(string $filename) [int]\nInherit screen from file dump.\n@param filename\n
ncurses_scrl ncurses_scrl(int $count) [int]\nScroll window content up or down without changing current position.\n@param count\n
ncurses_show_panel ncurses_show_panel(resource $panel) [int]\nPlaces an invisible panel on top of the stack, making it visible.\n@param panel\n
ncurses_slk_attr ncurses_slk_attr(void) [int]\nReturns current soft label key attribute.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_slk_attroff ncurses_slk_attroff(int $intarg) [int]\nTurn off the given attributes for soft function-key labels.\n@param intarg\n
ncurses_slk_attron ncurses_slk_attron(int $intarg) [int]\nTurn on the given attributes for soft function-key labels.\n@param intarg\n
ncurses_slk_attrset ncurses_slk_attrset(int $intarg) [int]\nSet given attributes for soft function-key labels.\n@param intarg\n
ncurses_slk_clear ncurses_slk_clear(void) [bool]\nClears soft labels from screen.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_slk_color ncurses_slk_color(int $intarg) [int]\nSets color for soft label keys.\n@param intarg\n
ncurses_slk_init ncurses_slk_init(int $format) [bool]\nInitializes soft label key functions.\n@param format If ncurses_init() eventually uses a line from stdscr to emulate\nthe soft labels, then this parameter determines how the labels are arranged\nof the screen. 0 indicates a 3-2-3 arrangement of the labels, 1 indicates a\n4-4 arrangement and 2 indicates the PC like 4-4-4 mode, but in addition an\nindex line will be created.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_slk_noutrefresh ncurses_slk_noutrefresh(void) [bool]\nCopies soft label keys to virtual screen.\n
ncurses_slk_refresh ncurses_slk_refresh(void) [int]\nCopies soft label keys to screen.\n
ncurses_slk_restore ncurses_slk_restore(void) [int]\nRestores soft label keys.\n
ncurses_slk_set ncurses_slk_set(int $labelnr, string $label, int $format)\n[bool]\nSets function key labels.\n@param labelnr\n@param label\n@param format\n
ncurses_slk_touch ncurses_slk_touch(void) [int]\nForces output when ncurses_slk_noutrefresh is performed.\n
ncurses_standend ncurses_standend(void) [int]\nStop using 'standout' attribute.\n
ncurses_standout ncurses_standout(void) [int]\nStart using 'standout' attribute.\n
ncurses_start_color ncurses_start_color(void) [int]\nInitializes color functionality. Initializes color functionality in\nncurses. This function must be called before any color manipulation functions\nare called and after ncurses_init() is called. It is good practice to call\nthis function right after ncurses_init().\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_can_change_color() - Checks if terminal color definitions can\nbe changed\n@see ncurses_has_colors() - Checks if terminal has color capabilities\n
ncurses_termattrs ncurses_termattrs(void) [bool]\nReturns a logical OR of all attribute flags supported by terminal.\n
ncurses_termname ncurses_termname(void) [string]\nReturns terminals (short)-name.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_longname() - Returns terminals description\n
ncurses_timeout ncurses_timeout(int $millisec) [void]\nSet timeout for special key sequences.\n@param millisec\n
ncurses_top_panel ncurses_top_panel(resource $panel) [int]\nMoves a visible panel to the top of the stack.\n@param panel\n
ncurses_typeahead ncurses_typeahead(int $fd) [int]\nSpecify different filedescriptor for typeahead checking.\n@param fd\n
ncurses_ungetch ncurses_ungetch(int $keycode) [int]\nPut a character back into the input stream.\n@param keycode\n
ncurses_ungetmouse ncurses_ungetmouse(array $mevent) [bool]\nPushes mouse event to queue.\n@param mevent An associative array specifying the event options: &quot;id&quot;\n: Id to distinguish multiple devices &quot;x&quot; : screen relative x-position\nin character cells &quot;y&quot; : screen relative y-position in character\ncells &quot;z&quot; : currently not supported &quot;mmask&quot; : Mouse action\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_getmouse() - Reads mouse event\n
ncurses_update_panels ncurses_update_panels(void) [void]\nRefreshes the virtual screen to reflect the relations between panels in\nthe stack.\n
ncurses_use_default_colors ncurses_use_default_colors(void) [bool]\nAssign terminal default colors to color id -1.\n
ncurses_use_env ncurses_use_env(bool $flag) [void]\nControl use of environment information about terminal size.\n@param flag\n
ncurses_use_extended_names ncurses_use_extended_names(bool $flag) [int]\nControl use of extended names in terminfo descriptions.\n@param flag\n
ncurses_vidattr ncurses_vidattr(int $intarg) [int]\nDisplay the string on the terminal in the video attribute mode.\n@param intarg\n
ncurses_vline ncurses_vline(int $charattr, int $n) [int]\nDraw a vertical line at current position using an attributed character and\nmax. n characters long.\n@param charattr\n@param n\n
ncurses_waddch ncurses_waddch(resource $window, int $ch) [int]\nAdds character at current position in a window and advance cursor.\n@param window\n@param ch\n
ncurses_waddstr ncurses_waddstr(resource $window, string $str [, int $n]) [int]\nOutputs text at current postion in window.\n@param window\n@param str\n@param n\n
ncurses_wattroff ncurses_wattroff(resource $window, int $attrs) [int]\nTurns off attributes for a window.\n@param window\n@param attrs\n
ncurses_wattron ncurses_wattron(resource $window, int $attrs) [int]\nTurns on attributes for a window.\n@param window\n@param attrs\n
ncurses_wattrset ncurses_wattrset(resource $window, int $attrs) [int]\nSet the attributes for a window.\n@param window\n@param attrs\n
ncurses_wborder ncurses_wborder(resource $window, int $left, int $right,\nint $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner,\nint $br_corner) [int]\nDraws a border around the window using attributed characters.\n@param window The window on which we operate\n@param left\n@param right\n@param top\n@param bottom\n@param tl_corner Top left corner\n@param tr_corner Top right corner\n@param bl_corner Bottom left corner\n@param br_corner Bottom right corner\n@see ncurses_border() - Draw a border around the screen using attributed\ncharacters\n
mysql_field_name mysql_field_name(resource $result, int $field_offset) [string]\nGet the name of the specified field in a result. mysql_field_name() returns\nthe name of the specified field index.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_fieldname()\n@see mysql_field_type() - Get the type of the specified field in a result\n@see mysql_field_len() - Returns the length of the specified field\n
mysql_field_seek mysql_field_seek(resource $result, int $field_offset) [bool]\nSet result pointer to a specified field offset. Seeks to the specified field\noffset. If the next call to mysql_fetch_field() doesn&#039;t include a field\noffset, the field offset specified in mysql_field_seek() will be returned.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@see mysql_fetch_field() - Get column information from a result and return\nas an object\n
mysql_field_table mysql_field_table(resource $result, int $field_offset)\n[string]\nGet name of the table the specified field is in. Returns the name of the\ntable that the specified field is in.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_fieldtable()\n@see mysql_list_tables() - List tables in a MySQL database\n
mysql_field_type mysql_field_type(resource $result, int $field_offset) [string]\nGet the type of the specified field in a result. mysql_field_type() is\nsimilar to the mysql_field_name() function. The arguments are identical,\nbut the field type is returned instead.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_fieldtype()\n@see mysql_field_name() - Get the name of the specified field in a result\n@see mysql_field_len() - Returns the length of the specified field\n
mysql_free_result mysql_free_result(resource $result) [bool]\nFree result memory. mysql_free_result() will free all memory associated\nwith the result identifier `result`. mysql_free_result() only needs to be\ncalled if you are concerned about how much memory is being used for queries\nthat return large result sets. All associated result memory is automatically\nfreed at the end of the script&#039;s execution.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_freeresult()\n@see mysql_query() - Send a MySQL query\n@see is_resource() - Finds whether a variable is a resource\n
mysql_get_client_info mysql_get_client_info(void) [string]\nGet MySQL client info. mysql_get_client_info() returns a string that represents\nthe client library version.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see mysql_get_host_info() - Get MySQL host info\n@see mysql_get_proto_info() - Get MySQL protocol info\n@see mysql_get_server_info() - Get MySQL server info\n
mysql_get_host_info mysql_get_host_info([resource $link_identifier]) [string]\nGet MySQL host info. Describes the type of connection in use for the\nconnection, including the server host name.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see mysql_get_client_info() - Get MySQL client info\n@see mysql_get_proto_info() - Get MySQL protocol info\n@see mysql_get_server_info() - Get MySQL server info\n
mysql_get_proto_info mysql_get_proto_info([resource $link_identifier]) [int]\nGet MySQL protocol info. Retrieves the MySQL protocol.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see mysql_get_client_info() - Get MySQL client info\n@see mysql_get_host_info() - Get MySQL host info\n@see mysql_get_server_info() - Get MySQL server info\n
mysql_get_server_info mysql_get_server_info([resource $link_identifier])\n[string]\nGet MySQL server info. Retrieves the MySQL server version.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see mysql_get_client_info() - Get MySQL client info\n@see mysql_get_host_info() - Get MySQL host info\n@see mysql_get_proto_info() - Get MySQL protocol info\n@see phpversion() - Gets the current PHP version\n
mysql_info mysql_info([resource $link_identifier]) [string]\nGet information about the most recent query. Returns detailed information\nabout the last query.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: mysql_info() returns a non-FALSE value for the INSERT ... VALUES\nstatement only if multiple value lists are specified in the statement.\n@see mysql_affected_rows() - Get number of affected rows in previous MySQL\noperation\n@see mysql_insert_id() - Get the ID generated in the last query\n@see mysql_stat() - Get current system status\n
mysql_insert_id mysql_insert_id([resource $link_identifier]) [int]\nGet the ID generated in the last query. Retrieves the ID generated for an\nAUTO_INCREMENT column by the previous query (usually INSERT).\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@see mysql_query() - Send a MySQL query\n@see mysql_info() - Get information about the most recent query\n
mysql_list_dbs mysql_list_dbs([resource $link_identifier]) [resource]\nList databases available on a MySQL server. Returns a result pointer containing\nthe databases available from the current mysql daemon.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_listdbs()\n@see mysql_db_name() - Get result data\n@see mysql_select_db() - Select a MySQL database\n
mysql_list_fields mysql_list_fields(string $database_name, string $table_name\n[, resource $link_identifier]) [resource]\nList MySQL table fields. Retrieves information about the given table name. This\nfunction is deprecated. It is preferable to use mysql_query() to issue an SQL\n`SHOW COLUMNS FROM table [LIKE &#039;name&#039;]` statement instead.\n@param database_name The name of the database that&#039;s being queried.\n@param table_name The name of the table that&#039;s being queried.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_listfields()\n@see mysql_field_flags() - Get the flags associated with the specified field\nin a result\n@see mysql_info() - Get information about the most recent query\n
mysql_list_processes mysql_list_processes([resource $link_identifier])\n[resource]\nList MySQL processes. Retrieves the current MySQL server threads.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mysql_thread_id() - Return the current thread ID\n@see mysql_stat() - Get current system status\n
mysql_list_tables mysql_list_tables(string $database [, resource\n$link_identifier]) [resource]\nList tables in a MySQL database. Retrieves a list of table names from a MySQL\ndatabase. This function is deprecated. It is preferable to use mysql_query()\nto issue an SQL `SHOW TABLES [FROM db_name] [LIKE &#039;pattern&#039;]`\nstatement instead.\n@param database The name of the database\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_listtables()\n@see mysql_list_dbs() - List databases available on a MySQL server\n@see mysql_tablename() - Get table name of field\n
mysql_num_fields mysql_num_fields(resource $result) [int]\nGet number of fields in result. Retrieves the number of fields from a query.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_numfields()\n@see mysql_select_db() - Select a MySQL database\n@see mysql_query() - Send a MySQL query\n@see mysql_fetch_field() - Get column information from a result and return\nas an object\n@see mysql_num_rows() - Get number of rows in result\n
mysql_num_rows mysql_num_rows(resource $result) [int]\nGet number of rows in result. Retrieves the number of rows from a result\nset. This command is only valid for statements like SELECT or SHOW that return\nan actual result set. To retrieve the number of rows affected by a INSERT,\nUPDATE, REPLACE or DELETE query, use mysql_affected_rows().\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4, PHP 5)\n@note Note: If you use mysql_unbuffered_query(), mysql_num_rows() will\nnot return the correct value until all the rows in the result set have\nbeen retrieved.\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_numrows()\n@see mysql_affected_rows() - Get number of affected rows in previous MySQL\noperation\n@see mysql_connect() - Open a connection to a MySQL Server\n@see mysql_data_seek() - Move internal result pointer\n@see mysql_select_db() - Select a MySQL database\n@see mysql_query() - Send a MySQL query\n
mysql_pconnect mysql_pconnect([string\n$server=ini_get(&quot;mysql.default_host&quot;) [, string\n$username=ini_get(&quot;mysql.default_user&quot;) [, string\n$password=ini_get(&quot;mysql.default_password&quot;) [, int $client_flags]]]])\n[resource]\nOpen a persistent connection to a MySQL server. Establishes a persistent\nconnection to a MySQL server. mysql_pconnect() acts very much like\nmysql_connect() with two major differences. First, when connecting, the\nfunction would first try to find a (persistent) link that&#039;s already open\nwith the same host, username and password. If one is found, an identifier\nfor it will be returned instead of opening a new connection. Second, the\nconnection to the SQL server will not be closed when the execution of the\nscript ends. Instead, the link will remain open for future use (mysql_close()\nwill not close links established by mysql_pconnect()). This type of link is\ntherefore called &#039;persistent&#039;.\n@param server The MySQL server. It can also include a port\nnumber. e.g. &quot;hostname:port&quot; or a path to a local socket\ne.g. &quot;:/path/to/socket&quot; for the localhost. If the PHP directive\nmysql.default_host is undefined (default), then the default value is\n&#039;localhost:3306&#039;\n@param username The username. Default value is the name of the user that\nowns the server process.\n@param password The password. Default value is an empty password.\n@param client_flags The `client_flags` parameter can be a combination of the\nfollowing constants: 128 (enable `LOAD DATA LOCAL` handling), MYSQL_CLIENT_SSL,\nMYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.\n@return (PHP 4, PHP 5)\n@note Note: Note, that these kind of links only work if you are using a\nmodule version of PHP. See the Persistent Database Connections section for\nmore information.\n@see mysql_connect() - Open a connection to a MySQL Server\n@see Persistent Database Connections\n
mysql_ping mysql_ping([resource $link_identifier]) [bool]\nPing a server connection or reconnect if there is no connection. Checks\nwhether or not the connection to the server is working. If it has gone down,\nan automatic reconnection is attempted. This function can be used by scripts\nthat remain idle for a long while, to check whether or not the server has\nclosed the connection and reconnect if necessary. Note: Since MySQL 5.0.13,\nautomatic reconnection feature is disabled.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mysql_thread_id() - Return the current thread ID\n@see mysql_list_processes() - List MySQL processes\n
mysql_query mysql_query(string $query [, resource $link_identifier]) [resource]\nSend a MySQL query. mysql_query() sends a unique query (multiple queries are\nnot supported) to the currently active database on the server that&#039;s\nassociated with the specified `link_identifier`.\n@param query An SQL query The query string should not end with a\nsemicolon. Data inside the query should be properly escaped.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@see mysql_connect() - Open a connection to a MySQL Server\n@see mysql_error() - Returns the text of the error message from previous\nMySQL operation\n@see mysql_real_escape_string() - Escapes special characters in a string\nfor use in an SQL statement\n@see mysql_result() - Get result data\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_unbuffered_query() - Send an SQL query to MySQL without fetching\nand buffering the result rows.\n
mysql_real_escape_string mysql_real_escape_string(string $unescaped_string\n[, resource $link_identifier]) [string]\nEscapes special characters in a string for use in an SQL statement. Escapes\nspecial characters in the `unescaped_string`, taking into account the\ncurrent character set of the connection so that it is safe to place it\nin a mysql_query(). If binary data is to be inserted, this function must\nbe used. mysql_real_escape_string() calls MySQL&#039;s library function\nmysql_real_escape_string, which prepends backslashes to the following\ncharacters: `\x00`, `\n`, `\r`, `\`, `&#039;`, `&quot;` and `\x1a`. This\nfunction must always (with few exceptions) be used to make data safe before\nsending a query to MySQL.\n@param unescaped_string The string that is to be escaped.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: A MySQL connection is required before using\nmysql_real_escape_string() otherwise an error of level E_WARNING is generated,\nand FALSE is returned. If `link_identifier` isn&#039;t defined, the last\nMySQL connection is used.\n@note Note: If magic_quotes_gpc is enabled, first apply stripslashes() to\nthe data. Using this function on data which has already been escaped will\nescape the data twice.\n@note Note: If this function is not used to escape data, the query is\nvulnerable to SQL Injection Attacks.\n@note Note: mysql_real_escape_string() does not escape `%` and `_`. These\nare wildcards in MySQL if combined with `LIKE`, `GRANT`, or `REVOKE`.\n@see mysql_client_encoding() - Returns the name of the character set\n@see addslashes() - Quote string with slashes\n@see stripslashes() - Un-quotes a quoted string\n@see The magic_quotes_gpc directive\n@see The magic_quotes_runtime directive\n
mysql_result mysql_result(resource $result, int $row [, mixed $field=0])\n[string]\nGet result data. Retrieves the contents of one cell from a MySQL result\nset. When working on large result sets, you should consider using one of the\nfunctions that fetch an entire row (specified below). As these functions\nreturn the contents of multiple cells in one function call, they&#039;re\nMUCH quicker than mysql_result(). Also, note that specifying a numeric\noffset for the field argument is much quicker than specifying a fieldname\nor tablename.fieldname argument.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param row The row number from the result that&#039;s being retrieved. Row\nnumbers start at `0`.\n@param field The name or offset of the field being retrieved. It can be\nthe field&#039;s offset, the field&#039;s name, or the field&#039;s table\ndot field name (tablename.fieldname). If the column name has been aliased\n(&#039;select foo as bar from...&#039;), use the alias instead of the column\nname. If undefined, the first field is retrieved.\n@return (PHP 4, PHP 5)\n@note Note: Calls to mysql_result() should not be mixed with calls to other\nfunctions that deal with the result set.\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see mysql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_fetch_object() - Fetch a result row as an object\n
mysql_select_db mysql_select_db(string $database_name [, resource\n$link_identifier]) [bool]\nSelect a MySQL database. Sets the current active database on the server\nthat&#039;s associated with the specified link identifier. Every subsequent\ncall to mysql_query() will be made on the active database.\n@param database_name The name of the database that is to be selected.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_selectdb()\n@see mysql_connect() - Open a connection to a MySQL Server\n@see mysql_pconnect() - Open a persistent connection to a MySQL server\n@see mysql_query() - Send a MySQL query\n
mysql_set_charset mysql_set_charset(string $charset [, resource\n$link_identifier]) [bool]\nSets the client character set. Sets the default character set for the\ncurrent connection.\n@param charset A valid character set name.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 5 >= 5.2.3)\n@note Note: This function requires MySQL 5.0.7 or later.\n@note Note: This is the preferred way to change the charset. Using\nmysql_query() to execute `SET NAMES ..` is not recommended.\n@see mysql_client_encoding() - Returns the name of the character set\n@see &raquo; List of character sets that MySQL supports\n
mysql_stat mysql_stat([resource $link_identifier]) [string]\nGet current system status. mysql_stat() returns the current server status.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mysql_get_server_info() - Get MySQL server info\n@see mysql_list_processes() - List MySQL processes\n
mysql_tablename mysql_tablename(resource $result, int $i) [string]\nGet table name of field. Retrieves the table name from a `result`. This\nfunction is deprecated. It is preferable to use mysql_query() to issue an SQL\n`SHOW TABLES [FROM db_name] [LIKE &#039;pattern&#039;]` statement instead.\n@param result A result pointer resource that&#039;s returned from\nmysql_list_tables().\n@param i The integer index (row/table number)\n@return (PHP 4, PHP 5)\n@note Note: The mysql_num_rows() function may be used to determine the number\nof tables in the result pointer.\n@see mysql_list_tables() - List tables in a MySQL database\n@see mysql_field_table() - Get name of the table the specified field is in\n@see mysql_db_name() - Get result data\n
mysql_thread_id mysql_thread_id([resource $link_identifier]) [int]\nReturn the current thread ID. Retrieves the current thread ID. If the\nconnection is lost, and a reconnect with mysql_ping() is executed, the thread\nID will change. This means only retrieve the thread ID when needed.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mysql_ping() - Ping a server connection or reconnect if there is no\nconnection\n@see mysql_list_processes() - List MySQL processes\n
mysql_unbuffered_query mysql_unbuffered_query(string $query [, resource\n$link_identifier]) [resource]\nSend an SQL query to MySQL without fetching and buffering the result\nrows.. mysql_unbuffered_query() sends the SQL query `query` to MySQL\nwithout automatically fetching and buffering the result rows as mysql_query()\ndoes. This saves a considerable amount of memory with SQL queries that produce\nlarge result sets, and you can start working on the result set immediately\nafter the first row has been retrieved as you don&#039;t have to wait until\nthe complete SQL query has been performed. To use mysql_unbuffered_query()\nwhile multiple database connections are open, you must specify the optional\nparameter `link_identifier` to identify which connection you want to use.\n@param query The SQL query to execute. Data inside the query should be\nproperly escaped.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: The benefits of mysql_unbuffered_query() come at a cost: you\ncannot use mysql_num_rows() and mysql_data_seek() on a result set returned\nfrom mysql_unbuffered_query(). You also have to fetch all result rows from\nan unbuffered SQL query before you can send a new SQL query to MySQL.\n@see mysql_query() - Send a MySQL query\n
mysqli_bind_param mysqli_bind_param\nAlias for mysqli_stmt_bind_param.\n@note Note: mysqli_bind_param() is deprecated and will be removed.\n@see mysqli_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n
mysqli_bind_result mysqli_bind_result\nAlias for mysqli_stmt_bind_result.\n@note Note: mysqli_bind_result() is deprecated and will be removed.\n@see mysqli_stmt_bind_result() - Binds variables to a prepared statement\nfor result storage\n
mysqli_client_encoding mysqli_client_encoding\nAlias of mysqli_character_set_name.\n@see mysqli_real_escape_string() - Escapes special characters in a string\nfor use in an SQL statement, taking into account the current charset of\nthe connection\n
mysqli_connect mysqli_connect\nAlias of mysqli::__construct.\n
mysqli_disable_reads_from_master void mysqli::disable_reads_from_master (\nvoid )\nDisable reads from master. Procedural style\n
mysqli_disable_rpl_parse mysqli_disable_rpl_parse(mysqli $link) [bool]\nDisable RPL parse.\n
mysqli_enable_reads_from_master mysqli_enable_reads_from_master(mysqli $link)\n[bool]\nEnable reads from master.\n
mysqli_enable_rpl_parse mysqli_enable_rpl_parse(mysqli $link) [bool]\nEnable RPL parse.\n
mysqli_escape_string mysqli_escape_string\nAlias of mysqli_real_escape_string.\n
mysqli_execute mysqli_execute\nAlias for mysqli_stmt_execute.\n@note Note: mysqli_execute() is deprecated and will be removed.\n@see mysqli_stmt_execute() - Executes a prepared Query\n
mysqli_fetch mysqli_fetch\nAlias for mysqli_stmt_fetch.\n@note Note: mysqli_fetch() is deprecated and will be removed.\n@see mysqli_stmt_fetch() - Fetch results from a prepared statement into the\nbound variables\n
mysqli_get_metadata mysqli_get_metadata\nAlias for mysqli_stmt_result_metadata.\n@note Note: mysqli_get_metadata() is deprecated and will be removed.\n@see mysqli_stmt_result_metadata() - Returns result set metadata from a\nprepared statement\n
mysqli_master_query mysqli_master_query(mysqli $link, string $query) [bool]\nEnforce execution of a query on the master in a master/slave setup.\n
mysqli_param_count mysqli_param_count\nAlias for mysqli_stmt_param_count.\n@note Note: mysqli_param_count() is deprecated and will be removed.\n@see mysqli_stmt_param_count() - Returns the number of parameter for the\ngiven statement\n
mysqli_report mysqli_report(int $flags) [bool]\nEnables or disables internal report functions. mysqli_report() is a powerful\nfunction to improve your queries and code during development and testing\nphase. Depending on the flags it reports errors from mysqli function calls\nor queries which don&#039;t use an index (or use a bad index).\n@param flags Supported flags Name Description MYSQLI_REPORT_OFF Turns\nreporting off MYSQLI_REPORT_ERROR Report errors from mysqli function calls\nMYSQLI_REPORT_STRICT Throw mysqli_sql_exception for errors instead of\nwarnings MYSQLI_REPORT_INDEX Report if no index or bad index was used in a\nquery MYSQLI_REPORT_ALL Set all options (report all)\n@return (PHP 5)\n@see MySQLi_Driver::$report_mode\n@see mysqli_debug() - Performs debugging operations\n@see mysqli_dump_debug_info() - Dump debugging information into the log\n
mysqli_rpl_parse_enabled mysqli_rpl_parse_enabled(mysqli $link) [int]\nCheck if RPL parse is enabled.\n
mysqli_rpl_probe mysqli_rpl_probe(mysqli $link) [bool]\nRPL probe.\n
mysqli_rpl_query_type int mysqli::rpl_query_type ( string $query )\nReturns RPL query type. Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or\nMYSQLI_RPL_ADMIN depending on a query type. `INSERT`, `UPDATE` and similar\nare master queries, `SELECT` is slave, and `FLUSH`, `REPAIR` and similar\nare admin. This function is currently not documented; only its argument list\nis available.\n
mysqli_send_long_data mysqli_send_long_data\nAlias for mysqli_stmt_send_long_data.\n@note Note: mysqli_send_long_data() is deprecated and will be removed.\n@see mysqli_stmt_send_long_data() - Send data in blocks\n
mysqli_send_query bool mysqli::send_query ( string $query )\nSend the query and return.\n
mysqli_set_opt mysqli_set_opt\nAlias of mysqli_options.\n
mysqli_slave_query mysqli_slave_query(mysqli $link, string $query) [bool]\nForce execution of a query on a slave in a master/slave setup.\n
natcasesort natcasesort(array &$array) [bool]\nSort an array using a case insensitive &quot;natural order&quot;\nalgorithm. natcasesort() is a case insensitive version of natsort(). This\nfunction implements a sort algorithm that orders alphanumeric strings in\nthe way a human being would while maintaining key/value associations. This\nis described as a &quot;natural ordering&quot;.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see natsort() - Sort an array using a &quot;natural order&quot; algorithm\n@see The comparison of array sorting functions\n@see strnatcmp() - String comparisons using a &quot;natural order&quot;\nalgorithm\n@see strnatcasecmp() - Case insensitive string comparisons using a\n&quot;natural order&quot; algorithm\n
natsort natsort(array &$array) [bool]\nSort an array using a &quot;natural order&quot; algorithm. This function\nimplements a sort algorithm that orders alphanumeric strings in the way a\nhuman being would while maintaining key/value associations. This is described\nas a &quot;natural ordering&quot;. An example of the difference between this\nalgorithm and the regular computer string sorting algorithms (used in sort())\ncan be seen in the example below.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see natcasesort() - Sort an array using a case insensitive &quot;natural\norder&quot; algorithm\n@see The comparison of array sorting functions\n@see strnatcmp() - String comparisons using a &quot;natural order&quot;\nalgorithm\n@see strnatcasecmp() - Case insensitive string comparisons using a\n&quot;natural order&quot; algorithm\n
ncurses_addch ncurses_addch(int $ch) [int]\nAdd character at current position and advance cursor.\n@param ch\n
ncurses_addchnstr ncurses_addchnstr(string $s, int $n) [int]\nAdd attributed string with specified length at current position.\n@param s\n@param n\n
ncurses_addchstr ncurses_addchstr(string $s) [int]\nAdd attributed string at current position.\n@param s\n
ncurses_addnstr ncurses_addnstr(string $s, int $n) [int]\nAdd string with specified length at current position.\n@param s\n@param n\n
ncurses_addstr ncurses_addstr(string $text) [int]\nOutput text at current position.\n@param text\n
ncurses_assume_default_colors ncurses_assume_default_colors(int $fg, int $bg)\n[int]\nDefine default colors for color 0.\n@param fg\n@param bg\n
ncurses_attroff ncurses_attroff(int $attributes) [int]\nTurn off the given attributes.\n@param attributes\n
ncurses_attron ncurses_attron(int $attributes) [int]\nTurn on the given attributes.\n@param attributes\n
ncurses_attrset ncurses_attrset(int $attributes) [int]\nSet given attributes.\n@param attributes\n
ncurses_baudrate ncurses_baudrate(void) [int]\nReturns baudrate of terminal.\n
ncurses_beep ncurses_beep(void) [int]\nLet the terminal beep.\n@see ncurses_flash() - Flash terminal screen (visual bell)\n
ncurses_bkgd ncurses_bkgd(int $attrchar) [int]\nSet background property for terminal screen.\n@param attrchar\n
ncurses_bkgdset ncurses_bkgdset(int $attrchar) [void]\nControl screen background.\n@param attrchar\n
ncurses_border ncurses_border(int $left, int $right, int $top, int $bottom,\nint $tl_corner, int $tr_corner, int $bl_corner, int $br_corner) [int]\nDraw a border around the screen using attributed characters.\n@param left\n@param right\n@param top\n@param bottom\n@param tl_corner Top left corner\n@param tr_corner Top right corner\n@param bl_corner Bottom left corner\n@param br_corner Bottom right corner\n@see ncurses_wborder() - Draws a border around the window using attributed\ncharacters\n
ncurses_bottom_panel ncurses_bottom_panel(resource $panel) [int]\nMoves a visible panel to the bottom of the stack.\n@param panel\n
ncurses_can_change_color ncurses_can_change_color(void) [bool]\nChecks if terminal color definitions can be changed. Checks whether the\nterminal has color capabilities and whether the programmer can change color\ndefinitions using ncurses_init_color(). ncurses must be initialized using\nncurses_init() before calling this function.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_has_colors() - Checks if terminal has color capabilities\n@see ncurses_init_color() - Define a terminal color\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_cbreak ncurses_cbreak(void) [bool]\nSwitch of input buffering.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_nocbreak() - Switch terminal to cooked mode\n
ncurses_clear ncurses_clear(void) [bool]\nClear screen.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_erase() - Erase terminal screen\n
ncurses_clrtobot ncurses_clrtobot(void) [bool]\nClear screen from current position to bottom.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_clear() - Clear screen\n@see ncurses_clrtoeol() - Clear screen from current position to end of line\n
ncurses_clrtoeol ncurses_clrtoeol(void) [bool]\nClear screen from current position to end of line.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_clear() - Clear screen\n@see ncurses_clrtobot() - Clear screen from current position to bottom\n
ncurses_color_content ncurses_color_content(int $color, int &$r, int &$g,\nint &$b) [int]\nRetrieves RGB components of a color. Retrieves the red, green, and blue\ncomponents for the given color definition. Terminal color capabilities must\nbe initialized with ncurses_start_color() prior to calling this function.\n@param color The number of the color to retrieve information for. May be\none of the pre-defined color constants.\n@param r A reference to which to return the red component of the color. The\nvalue returned to the reference will be between 0 and 1000.\n@param g A reference to which to return the green component of the color. The\nvalue returned to the reference will be between 0 and 1000.\n@param b A reference to which to return the blue component of the color. The\nvalue returned to the reference will be between 0 and 1000.\n@return (PHP 4 >= 4.3.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_init_color() - Define a terminal color\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_color_set ncurses_color_set(int $pair) [int]\nSet active foreground and background colors. Sets the active foreground and\nbackground colors. Any characters written after this function is invoked will\nhave these colors. This function requires terminal colors to be supported and\ninitialized using ncurses_start_color() beforehand. ncurses uses color pairs\nto specify both foreground and background colors. Use ncurses_init_pair()\nto define a color pair.\n@param pair The color pair from which to get the foreground and background\ncolors to set as the active colors.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_init_pair() - Define a color pair\n@see ncurses_start_color() - Initializes color functionality\n
ncurses_curs_set ncurses_curs_set(int $visibility) [int]\nSet cursor state.\n@param visibility\n
ncurses_def_prog_mode ncurses_def_prog_mode(void) [bool]\nSaves terminals (program) mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_reset_prog_mode() - Resets the prog mode saved by def_prog_mode\n
ncurses_def_shell_mode ncurses_def_shell_mode(void) [bool]\nSaves terminals (shell) mode.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_reset_shell_mode() - Resets the shell mode saved by def_shell_mode\n
ncurses_define_key ncurses_define_key(string $definition, int $keycode) [int]\nDefine a keycode.\n@param definition\n@param keycode\n
ncurses_del_panel ncurses_del_panel(resource $panel) [bool]\nRemove panel from the stack and delete it (but not the associated window).\n@param panel\n
ncurses_delay_output ncurses_delay_output(int $milliseconds) [int]\nDelay output on terminal using padding characters.\n@param milliseconds\n
ncurses_delch ncurses_delch(void) [bool]\nDelete character at current position, move rest of line left.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_deleteln() - Delete line at current position, move rest of\nscreen up\n
ncurses_deleteln ncurses_deleteln(void) [bool]\nDelete line at current position, move rest of screen up.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_delch() - Delete character at current position, move rest of\nline left\n
ncurses_delwin ncurses_delwin(resource $window) [bool]\nDelete a ncurses window.\n@param window\n
ncurses_doupdate ncurses_doupdate(void) [bool]\nWrite all prepared refreshes to terminal.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_echo ncurses_echo(void) [bool]\nActivate keyboard input echo.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_noecho() - Switch off keyboard input echo to disable echo mode\n
ncurses_echochar ncurses_echochar(int $character) [int]\nSingle character output including refresh.\n@param character\n
ncurses_end ncurses_end(void) [int]\nStop using ncurses, clean up the screen.\n
ncurses_erase ncurses_erase(void) [bool]\nErase terminal screen.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_bkgd() - Set background property for terminal screen\n@see ncurses_clear() - Clear screen\n
ncurses_erasechar ncurses_erasechar(void) [string]\nReturns current erase character.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_killchar() - Returns current line kill character\n
ncurses_filter ncurses_filter(void) [void]\nSet LINES for iniscr() and newterm() to 1.\n
ncurses_flash ncurses_flash(void) [bool]\nFlash terminal screen (visual bell).\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_beep() - Let the terminal beep\n
ncurses_flushinp ncurses_flushinp(void) [bool]\nFlush keyboard input buffer.\n@return (PHP 4 >= 4.0.7, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_getch ncurses_getch(void) [int]\nRead a character from keyboard.\n
ncurses_getmaxyx ncurses_getmaxyx(resource $window, int &$y, int &$x) [void]\nReturns the size of a window.\n@param window The measured window\n@param x This will be set to the window width\n@param y This will be set to the window height\n@return (PHP 4 >= 4.3.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n
ncurses_getmouse ncurses_getmouse(array &$mevent) [bool]\nReads mouse event.\n@param mevent Event options will be delivered in this parameter which\nhas to be an array, passed by reference (see example below). On success an\nassociative array with following keys will be delivered: &quot;id&quot; : Id\nto distinguish multiple devices &quot;x&quot; : screen relative x-position\nin character cells &quot;y&quot; : screen relative y-position in character\ncells &quot;z&quot; : currently not supported &quot;mmask&quot; : Mouse action\n@return (PHP 4 >= 4.2.0, PHP 5 &lt; 5.3.0, PECL ncurses >= 1.0.0)\n@see ncurses_ungetmouse() - Pushes mouse event to queue\n
ncurses_getyx ncurses_getyx(resource $window, int &$y, int &$x) [void]\nReturns the current cursor position for a window.\n@param window\n@param y\n@param x\n
msession_set_data msession_set_data(string $session, string $value) [bool]\nSet data session unstructured data.\n
msession_set msession_set(string $session, string $name, string $value) [bool]\nSet value in session.\n
msession_timeout msession_timeout(string $session [, int $param]) [int]\nSet/get session timeout.\n
msession_uniq msession_uniq(int $param [, string $classname [, string $data]])\n[string]\nGet unique id.\n
msession_unlock msession_unlock(string $session, int $key) [int]\nUnlock a session.\n
msg_get_queue msg_get_queue(int $key [, int $perms]) [resource]\nCreate or attach to a message queue. msg_get_queue() returns an id that can\nbe used to access the System V message queue with the given `key`. The first\ncall creates the message queue with the optional `perms`. A second call to\nmsg_get_queue() for the same `key` will return a different message queue\nidentifier, but both identifiers access the same underlying message queue.\n@param key Message queue numeric ID\n@param perms Queue permissions. Default to 0666. If the message queue already\nexists, the `perms` will be ignored.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_send() - Send a message to a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n@see msg_set_queue() - Set information in the message queue data structure\n
msg_queue_exists msg_queue_exists(int $key) [bool]\nCheck whether a message queue exists. Checks whether the message queue\n`key` exists.\n@param key Queue key.\n@return (PHP 5 >= 5.3.0)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n
msg_receive msg_receive(resource $queue, int $desiredmsgtype, int &$msgtype,\nint $maxsize, mixed &$message [, bool $unserialize=true [, int $flags [,\nint &$errorcode]]]) [bool]\nReceive a message from a message queue. msg_receive() will receive the first\nmessage from the specified `queue` of the type specified by `desiredmsgtype`.\n@param queue\n@param desiredmsgtype If `desiredmsgtype` is 0, the message from the front\nof the queue is returned. If `desiredmsgtype` is greater than 0, then the\nfirst message of that type is returned. If `desiredmsgtype` is less than 0,\nthe first message on the queue with the lowest type less than or equal to\nthe absolute value of `desiredmsgtype` will be read. If no messages match\nthe criteria, your script will wait until a suitable message arrives on the\nqueue. You can prevent the script from blocking by specifying MSG_IPC_NOWAIT\nin the `flags` parameter.\n@param msgtype The type of the message that was received will be stored in\nthis parameter.\n@param maxsize The maximum size of message to be accepted is specified by the\n`maxsize`; if the message in the queue is larger than this size the function\nwill fail (unless you set `flags` as described below).\n@param message The received message will be stored in `message`, unless\nthere were errors receiving the message.\n@param unserialize If set to TRUE, the message is treated as though it\nwas serialized using the same mechanism as the session module. The message\nwill be unserialized and then returned to your script. This allows you to\neasily receive arrays or complex object structures from other PHP scripts,\nor if you are using the WDDX serializer, from any WDDX compatible source. If\n`unserialize` is FALSE, the message will be returned as a binary-safe string.\n@param flags The optional `flags` allows you to pass flags to the low-level\nmsgrcv system call. It defaults to 0, but you may specify one or more of\nthe following values (by adding or ORing them together). Flag values for\nmsg_receive MSG_IPC_NOWAIT If there are no messages of the `desiredmsgtype`,\nreturn immediately and do not wait. The function will fail and return an\ninteger value corresponding to MSG_ENOMSG. MSG_EXCEPT Using this flag in\ncombination with a `desiredmsgtype` greater than 0 will cause the function to\nreceive the first message that is not equal to `desiredmsgtype`. MSG_NOERROR\nIf the message is longer than `maxsize`, setting this flag will truncate\nthe message to `maxsize` and will not signal an error.\n@param errorcode If the function fails, the optional `errorcode` will be\nset to the value of the system errno variable.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_send() - Send a message to a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n@see msg_set_queue() - Set information in the message queue data structure\n
msg_remove_queue msg_remove_queue(resource $queue) [bool]\nDestroy a message queue. msg_remove_queue() destroys the message queue\nspecified by the `queue`. Only use this function when all processes have\nfinished working with the message queue and you need to release the system\nresources held by it.\n@param queue Message queue resource handle\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_get_queue() - Create or attach to a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n@see msg_set_queue() - Set information in the message queue data structure\n
msg_send msg_send(resource $queue, int $msgtype, mixed $message [, bool\n$serialize [, bool $blocking [, int &$errorcode]]]) [bool]\nSend a message to a message queue. msg_send() sends a `message` of type\n`msgtype` (which MUST be greater than 0) to the message queue specified by\n`queue`.\n@param queue\n@param msgtype\n@param message\n@param serialize The optional `serialize` controls how the `message`\nis sent. `serialize` defaults to TRUE which means that the `message` is\nserialized using the same mechanism as the session module before being\nsent to the queue. This allows complex arrays and objects to be sent to\nother PHP scripts, or if you are using the WDDX serializer, to any WDDX\ncompatible client.\n@param blocking If the message is too large to fit in the queue, your\nscript will wait until another process reads messages from the queue and\nfrees enough space for your message to be sent. This is called blocking;\nyou can prevent blocking by setting the optional `blocking` parameter to\nFALSE, in which case msg_send() will immediately return FALSE if the message\nis too big for the queue, and set the optional `errorcode` to MSG_EAGAIN,\nindicating that you should try to send your message again a little later on.\n@param errorcode\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n@see msg_set_queue() - Set information in the message queue data structure\n
msg_set_queue msg_set_queue(resource $queue, array $data) [bool]\nSet information in the message queue data structure. msg_set_queue() allows\nyou to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and\nmsg_qbytes fields of the underlying message queue data structure. Changing\nthe data structure will require that PHP be running as the same user that\ncreated the queue, owns the queue (as determined by the existing msg_perm.xxx\nfields), or be running with root privileges. root privileges are required\nto raise the msg_qbytes values above the system defined limit.\n@param queue Message queue resource handle\n@param data You specify the values you require by setting the value of the\nkeys that you require in the `data` array.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_stat_queue() - Returns information from the message queue data\nstructure\n@see msg_get_queue() - Create or attach to a message queue\n
msg_stat_queue msg_stat_queue(resource $queue) [array]\nReturns information from the message queue data structure. msg_stat_queue()\nreturns the message queue meta data for the message queue specified by the\n`queue`. This is useful, for example, to determine which process sent the\nmessage that was just received.\n@param queue Message queue resource handle\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see msg_remove_queue() - Destroy a message queue\n@see msg_receive() - Receive a message from a message queue\n@see msg_get_queue() - Create or attach to a message queue\n@see msg_set_queue() - Set information in the message queue data structure\n
msql_affected_rows msql_affected_rows(resource $result) [int]\nReturns number of affected rows. Returns number of affected rows by the last\nSELECT, UPDATE or DELETE query associated with `result`.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n@see msql_query() - Send mSQL query\n
msql_close msql_close([resource $link_identifier]) [bool]\nClose mSQL connection. msql_close() closes the non-persistent connection to the\nmSQL server that&#039;s associated with the specified link identifier. Using\nmsql_close() isn&#039;t usually necessary, as non-persistent open links are\nautomatically closed at the end of the script&#039;s execution. See also\nfreeing resources.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_connect() - Open mSQL connection\n@see msql_pconnect() - Open persistent mSQL connection\n
msql_connect msql_connect([string $hostname]) [resource]\nOpen mSQL connection. msql_connect() establishes a connection to a mSQL\nserver. In case a second call is made to msql_connect() with the same\narguments, no new link will be established, but instead, the link identifier\nof the already opened link will be returned. The link to the server will be\nclosed as soon as the execution of the script ends, unless it&#039;s closed\nearlier by explicitly calling msql_close().\n@param hostname The hostname can also include a port\nnumber. e.g. `hostname,port`. If not specified, the connection is established\nby the means of a Unix domain socket, being then more efficient then a\nlocalhost TCP socket connection. Note: While this function will accept a colon\n(`:`) as a host/port separator, a comma (`,`) is the preferred method.\n@return (PHP 4, PHP 5)\n@see msql_pconnect() - Open persistent mSQL connection\n@see msql_close() - Close mSQL connection\n
msql_create_db msql_create_db(string $database_name [, resource\n$link_identifier]) [bool]\nCreate mSQL database. msql_create_db() attempts to create a new database on\nthe mSQL server.\n@param database_name The name of the mSQL database.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_drop_db() - Drop (delete) mSQL database\n
msql_createdb msql_createdb\nAlias of msql_create_db.\n
msql_data_seek msql_data_seek(resource $result, int $row_number) [bool]\nMove internal row pointer. msql_data_seek() moves the internal row pointer of\nthe mSQL result associated with the specified query identifier to point to the\nspecified row number. The next call to msql_fetch_row() would return that row.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param row_number The seeked row number.\n@return (PHP 4, PHP 5)\n@see msql_fetch_array() - Fetch row as array\n@see msql_fetch_object() - Fetch row as object\n@see msql_fetch_row() - Get row as enumerated array\n@see msql_result() - Get result data\n
msql_db_query msql_db_query(string $database, string $query [, resource\n$link_identifier]) [resource]\nSend mSQL query. msql_db_query() selects a database and executes a query on it.\n@param database The name of the mSQL database.\n@param query The SQL query.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_query() - Send mSQL query\n
msql_dbname msql_dbname\nAlias of msql_result.\n
msql_drop_db msql_drop_db(string $database_name [, resource $link_identifier])\n[bool]\nDrop (delete) mSQL database. msql_drop_db() attempts to drop (remove)\na database from the mSQL server.\n@param database_name The name of the database.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_create_db() - Create mSQL database\n
msql_error msql_error(void) [string]\nReturns error message of last msql call. msql_error() returns the last issued\nerror by the mSQL server. Note that only the last error message is accessible\nwith msql_error().\n@return (PHP 4, PHP 5)\n
msql_fetch_array msql_fetch_array(resource $result [, int $result_type])\n[array]\nFetch row as array. msql_fetch_array() is an extended version of\nmsql_fetch_row(). In addition to storing the data in the numeric indices of the\nresult array, it also stores the data in associative indices, using the field\nnames as keys. An important thing to note is that using msql_fetch_array()\nis NOT significantly slower than using msql_fetch_row(), while it provides\na significant added value.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param result_type A constant that can take the following values: MSQL_ASSOC,\nMSQL_NUM, and MSQL_BOTH with MSQL_BOTH being the default.\n@return (PHP 4, PHP 5)\n@see msql_fetch_row() - Get row as enumerated array\n@see msql_fetch_object() - Fetch row as object\n@see msql_data_seek() - Move internal row pointer\n@see msql_result() - Get result data\n
msql_fetch_field msql_fetch_field(resource $result [, int $field_offset=0])\n[object]\nGet field information. msql_fetch_field() can be used in order to obtain\ninformation about fields in a certain query result.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param field_offset The field offset. If not specified, the next field that\nwasn&#039;t yet retrieved by msql_fetch_field() is retrieved.\n@return (PHP 4, PHP 5)\n@see msql_field_seek() - Set field offset\n
msql_fetch_object msql_fetch_object(resource $result) [object]\nFetch row as object. msql_fetch_object() is similar to msql_fetch_array(),\nwith one difference - an object is returned, instead of an array. Indirectly,\nthat means that you can only access the data by the field names, and not by\ntheir offsets (numbers are illegal property names). Speed-wise, the function\nis identical to msql_fetch_array(), and almost as quick as msql_fetch_row()\n(the difference is insignificant).\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n@see msql_fetch_array() - Fetch row as array\n@see msql_fetch_row() - Get row as enumerated array\n@see msql_data_seek() - Move internal row pointer\n@see msql_result() - Get result data\n
msql_fetch_row msql_fetch_row(resource $result) [array]\nGet row as enumerated array. msql_fetch_row() fetches one row of data\nfrom the result associated with the specified query identifier. The row\nis returned as an array. Each result column is stored in an array offset,\nstarting at offset 0. Subsequent call to msql_fetch_row() would return the\nnext row in the result set, or FALSE if there are no more rows.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n@see msql_fetch_array() - Fetch row as array\n@see msql_fetch_object() - Fetch row as object\n@see msql_data_seek() - Move internal row pointer\n@see msql_result() - Get result data\n
msql_field_flags msql_field_flags(resource $result, int $field_offset) [string]\nGet field flags. msql_field_flags() returns the field flags of the specified\nfield.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n
msql_field_len msql_field_len(resource $result, int $field_offset) [int]\nGet field length. msql_field_len() returns the length of the specified field.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n
msql_field_name msql_field_name(resource $result, int $field_offset) [string]\nGet the name of the specified field in a result. msql_field_name() gets the\nname of the specified field index.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n@see msql_field_len() - Get field length\n
msql_field_seek msql_field_seek(resource $result, int $field_offset) [bool]\nSet field offset. Seeks to the specified field offset. If the next call\nto msql_fetch_field() won&#039;t include a field offset, this field would\nbe returned.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n@see msql_fetch_field() - Get field information\n
msql_field_table msql_field_table(resource $result, int $field_offset) [int]\nGet table name for field. Returns the name of the table that the specified\nfield is in.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n
msql_field_type msql_field_type(resource $result, int $field_offset) [string]\nGet field type. msql_field_type() gets the type of the specified field index.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts at\n`1`.\n@return (PHP 4, PHP 5)\n
msql_fieldflags msql_fieldflags\nAlias of msql_field_flags.\n
msql_fieldlen msql_fieldlen\nAlias of msql_field_len.\n
msql_fieldname msql_fieldname\nAlias of msql_field_name.\n
msql_fieldtable msql_fieldtable\nAlias of msql_field_table.\n
msql_fieldtype msql_fieldtype\nAlias of msql_field_type.\n
msql_free_result msql_free_result(resource $result) [bool]\nFree result memory. msql_free_result() frees the memory associated with\n`query_identifier`. When PHP completes a request, this memory is freed\nautomatically, so you only need to call this function when you want to make\nsure you don&#039;t use too much memory while the script is running.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n
msql_list_dbs msql_list_dbs([resource $link_identifier]) [resource]\nList mSQL databases on server. msql_list_tables() lists the databases\navailable on the specified `link_identifier`.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_list_tables() - List tables in an mSQL database\n@see msql_list_fields() - List result fields\n
msql_list_fields msql_list_fields(string $database, string $tablename [,\nresource $link_identifier]) [resource]\nList result fields. msql_list_fields() returns information about the given\ntable.\n@param database The name of the database.\n@param tablename The name of the table.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_list_tables() - List tables in an mSQL database\n@see msql_list_dbs() - List mSQL databases on server\n
msql_list_tables msql_list_tables(string $database [, resource\n$link_identifier]) [resource]\nList tables in an mSQL database. msql_list_tables() lists the tables on the\nspecified `database`.\n@param database The name of the database.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_list_fields() - List result fields\n@see msql_list_dbs() - List mSQL databases on server\n
msql_num_fields msql_num_fields(resource $result) [int]\nGet number of fields in result. msql_num_fields() returns the number of\nfields in a result set.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n@see msql_query() - Send mSQL query\n@see msql_fetch_field() - Get field information\n@see msql_num_rows() - Get number of rows in result\n
msql_num_rows msql_num_rows(resource $query_identifier) [int]\nGet number of rows in result. msql_num_rows() returns the number of rows in\na result set.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@return (PHP 4, PHP 5)\n@see msql_num_fields() - Get number of fields in result\n
msql_numfields msql_numfields\nAlias of msql_num_fields.\n
msql_numrows msql_numrows\nAlias of msql_num_rows.\n
msql_pconnect msql_pconnect([string $hostname]) [resource]\nOpen persistent mSQL connection. msql_pconnect() acts very much like\nmsql_connect() with two major differences. First, when connecting, the function\nwould first try to find a (persistent) link that&#039;s already open with the\nsame host. If one is found, an identifier for it will be returned instead\nof opening a new connection. Second, the connection to the SQL server will\nnot be closed when the execution of the script ends. Instead, the link will\nremain open for future use (msql_close() will not close links established\nby this function).\n@param hostname The hostname can also include a port\nnumber. e.g. `hostname,port`. If not specified, the connection is established\nby the means of a Unix domain socket, being more efficient than a localhost\nTCP socket connection. Note: While this function will accept a colon (`:`)\nas a host/port separator, a comma (`,`) is the preferred method.\n@return (PHP 4, PHP 5)\n@see msql_connect() - Open mSQL connection\n@see msql_close() - Close mSQL connection\n
msql_query msql_query(string $query [, resource $link_identifier]) [resource]\nSend mSQL query. msql_query() sends a query to the currently active database\non the server that&#039;s associated with the specified link identifier.\n@param query The SQL query.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_db_query() - Send mSQL query\n@see msql_select_db() - Select mSQL database\n@see msql_connect() - Open mSQL connection\n
msql_regcase msql_regcase\nAlias of sql_regcase.\n
msql_result msql_result(resource $result, int $row [, mixed $field]) [string]\nGet result data. msql_result() returns the contents of one cell from a\nmSQL result set. When working on large result sets, you should consider\nusing one of the functions that fetch an entire row (specified below). As\nthese functions return the contents of multiple cells in one function call,\nthey are often much quicker than msql_result(). Recommended high-performance\nalternatives: msql_fetch_row(), msql_fetch_array(), and msql_fetch_object().\n@param  result The result resource that is being evaluated. This result\ncomes from a call to msql_query().\n@param row The row offset.\n@param field Can be the field&#039;s offset, or the field&#039;s name,\nor the field&#039;s table dot field&#039;s name (tablename.fieldname.). If\nthe column name has been aliased (&#039;select foo as bar from ...&#039;),\nuse the alias instead of the column name. Note: Specifying a numeric field\noffset is much quicker than specifying a fieldname or tablename.fieldname.\n@return (PHP 4, PHP 5)\n
msql_select_db msql_select_db(string $database_name [, resource\n$link_identifier]) [bool]\nSelect mSQL database. msql_select_db() sets the current active database on the\nserver that&#039;s associated with the specified `link_identifier`. Subsequent\ncalls to msql_query() will be made on the active database.\n@param database_name The database name.\n@param  link_identifier The mSQL connection. If not specified, the last link\nopened by msql_connect() is assumed. If no such link is found, the function\nwill try to establish a link as if msql_connect() was called, and use it.\n@return (PHP 4, PHP 5)\n@see msql_connect() - Open mSQL connection\n@see msql_pconnect() - Open persistent mSQL connection\n@see msql_query() - Send mSQL query\n
msql_tablename msql_tablename\nAlias of msql_result.\n
msql msql\nAlias of msql_db_query.\n
mssql_bind mssql_bind(resource $stmt, string $param_name, mixed &$var, int\n$type [, bool $is_output=false [, bool $is_null=false [, int $maxlen=-1]]])\n[bool]\nAdds a parameter to a stored procedure or a remote stored procedure. Binds\na parameter to a stored procedure or a remote stored procedure.\n@param stmt Statement resource, obtained with mssql_init().\n@param param_name The parameter name, as a string. Note: You have to include\nthe `@` character, like in the T-SQL syntax. See the explanation included\nin mssql_execute().\n@param var The PHP variable you&#039;ll bind the MSSQL parameter to. It\nis passed by reference, to retrieve OUTPUT and RETVAL values after the\nprocedure execution.\n@param type One of: SQLTEXT, SQLVARCHAR, SQLCHAR, SQLINT1, SQLINT2, SQLINT4,\nSQLBIT, SQLFLT4, SQLFLT8, SQLFLTN.\n@param is_output Whether the value is an OUTPUT parameter or not. If it&#039;s\nan OUTPUT parameter and you don&#039;t mention it, it will be treated as a\nnormal input parameter and no error will be thrown.\n@param is_null Whether the parameter is NULL or not. Passing the NULL value as\n`var` will not do the job.\n@param maxlen Used with char/varchar values. You have to indicate the length\nof the data so if the parameter is a varchar(50), the type must be SQLVARCHAR\nand this value `50`.\n@return (PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_execute() - Executes a stored procedure on a MS SQL server database\n@see mssql_free_statement() - Free statement memory\n@see mssql_init() - Initializes a stored procedure or a remote stored procedure\n
mssql_close mssql_close([resource $link_identifier]) [bool]\nClose MS SQL Server connection. Closes the link to a MS SQL Server database\nthat&#039;s associated with the specified link identifier. If the link\nidentifier isn&#039;t specified, the last opened link is assumed. Note\nthat this isn&#039;t usually necessary, as non-persistent open links are\nautomatically closed at the end of the script&#039;s execution.\n@param link_identifier A MS SQL link identifier, returned by\nmssql_connect(). This function will not close persistent links generated\nby mssql_pconnect().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_connect() - Open MS SQL server connection\n@see mssql_pconnect() - Open persistent MS SQL connection\n
mssql_connect mssql_connect([string $servername [, string $username [,\nstring $password [, bool $new_link=false]]]]) [resource]\nOpen MS SQL server connection. mssql_connect() establishes a connection\nto a MS SQL server. The link to the server will be closed as soon as the\nexecution of the script ends, unless it&#039;s closed earlier by explicitly\ncalling mssql_close().\n@param servername The MS SQL server. It can also include a port number,\ne.g. `hostname:port` (Linux), or `hostname,port` (Windows).\n@param username The username.\n@param password The password.\n@param new_link If a second call is made to mssql_connect() with the\nsame arguments, no new link will be established, but instead, the link\nidentifier of the already opened link will be returned. This parameter\nmodifies this behavior and makes mssql_connect() always open a new link,\neven if mssql_connect() was called before with the same parameters.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_close() - Close MS SQL Server connection\n@see mssql_pconnect() - Open persistent MS SQL connection\n
mssql_data_seek mssql_data_seek(resource $result_identifier, int $row_number)\n[bool]\nMoves internal row pointer. mssql_data_seek() moves the internal row pointer\nof the MS SQL result associated with the specified result identifier to\npoint to the specified row number, first row being number 0. The next call\nto mssql_fetch_row() would return that row.\n@param result_identifier The result resource that is being evaluated.\n@param row_number The desired row number of the new result pointer.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_execute mssql_execute(resource $stmt [, bool $skip_results=false])\n[mixed]\nExecutes a stored procedure on a MS SQL server database. Executes a stored\nprocedure on a MS SQL server database\n@param stmt Statement handle obtained with mssql_init().\n@param skip_results Whenever to skip the results or not.\n@note Note: If the stored procedure returns parameters or a return value these\nwill be available after the call to mssql_execute() unless the stored procedure\nreturns more than one result set. In that case use mssql_next_result()\nto shift through the results. When the last result has been processed the\noutput parameters and return values will be available.\n@see mssql_bind() - Adds a parameter to a stored procedure or a remote\nstored procedure\n@see mssql_free_statement() - Free statement memory\n@see mssql_init() - Initializes a stored procedure or a remote stored procedure\n
mssql_fetch_array mssql_fetch_array(resource $result [, int\n$result_type=MSSQL_BOTH]) [array]\nFetch a result row as an associative array, a numeric array, or\nboth. mssql_fetch_array() is an extended version of mssql_fetch_row(). In\naddition to storing the data in the numeric indices of the result array,\nit also stores the data in associative indices, using the field names as\nkeys. An important thing to note is that using mssql_fetch_array() is NOT\nsignificantly slower than using mssql_fetch_row(), while it provides a\nsignificant added value.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param result_type The type of array that is to be fetched. It&#039;s\na constant and can take the following values: MSSQL_ASSOC, MSSQL_NUM,\nand MSSQL_BOTH.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mssql_fetch_row() - Get row as enumerated array\n
mssql_fetch_assoc mssql_fetch_assoc(resource $result_id) [array]\nReturns an associative array of the current row in the result. Returns\nan associative array that corresponds to the fetched row and moves the\ninternal data pointer ahead. mssql_fetch_assoc() is equivalent to calling\nmssql_fetch_array() with MSSQL_ASSOC for the optional second parameter.\n@param result_id The result resource that is being evaluated. This result\ncomes from a call to mssql_query().\n@return (PHP 4 >= 4.2.0, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_fetch_batch mssql_fetch_batch(resource $result) [int]\nReturns the next batch of records. Returns the next batch of records\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@return (PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_fetch_field mssql_fetch_field(resource $result [, int $field_offset=-1])\n[object]\nGet field information. mssql_fetch_field() can be used in order to obtain\ninformation about fields in a certain query result.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param field_offset The numerical field offset. If the field offset is not\nspecified, the next field that was not yet retrieved by this function is\nretrieved. The `field_offset` starts at 0.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_field_seek() - Seeks to the specified field offset\n
mssql_fetch_object mssql_fetch_object(resource $result) [object]\nFetch row as object. mssql_fetch_object() is similar to mssql_fetch_array(),\nwith one difference - an object is returned, instead of an array. Indirectly,\nthat means that you can only access the data by the field names, and not by\ntheir offsets (numbers are illegal property names). Speed-wise, the function\nis identical to mssql_fetch_array(), and almost as quick as mssql_fetch_row()\n(the difference is insignificant).\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mssql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mssql_fetch_row() - Get row as enumerated array\n
mssql_fetch_row mssql_fetch_row(resource $result) [array]\nGet row as enumerated array. mssql_fetch_row() fetches one row of data\nfrom the result associated with the specified result identifier. The row\nis returned as an array. Each result column is stored in an array offset,\nstarting at offset 0. Subsequent call to mssql_fetch_row() would return the\nnext row in the result set, or FALSE if there are no more rows.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mssql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mssql_fetch_object() - Fetch row as object\n@see mssql_data_seek() - Moves internal row pointer\n@see mssql_result() - Get result data\n
mssql_field_length mssql_field_length(resource $result [, int $offset=-1])\n[int]\nGet the length of a field. Returns the length of field no. `offset` in\n`result`.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param offset The field offset, starts at 0. If omitted, the current field\nis used.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: Note to Windows Users Due to a limitation in the underlying API\nused by PHP (MS DBLib C API), the length of `VARCHAR` fields is limited to\n255. If you need to store more data, use a `TEXT` field instead.\n@see mssql_field_name() - Get the name of a field\n@see mssql_field_type() - Gets the type of a field\n
mssql_field_name mssql_field_name(resource $result [, int $offset=-1]) [string]\nGet the name of a field. Returns the name of field no. `offset` in `result`.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param offset The field offset, starts at 0. If omitted, the current field\nis used.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_field_length() - Get the length of a field\n@see mssql_field_type() - Gets the type of a field\n
mssql_field_seek mssql_field_seek(resource $result, int $field_offset) [bool]\nSeeks to the specified field offset. Seeks to the specified field offset. If\nthe next call to mssql_fetch_field() won&#039;t include a field offset,\nthis field would be returned.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param field_offset The field offset, starts at 0.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_fetch_field() - Get field information\n
mssql_field_type mssql_field_type(resource $result [, int $offset=-1]) [string]\nGets the type of a field. Returns the type of field no. `offset` in `result`.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param offset The field offset, starts at 0. If omitted, the current field\nis used.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_field_length() - Get the length of a field\n@see mssql_field_name() - Get the name of a field\n
mssql_free_result mssql_free_result(resource $result) [bool]\nFree result memory. mssql_free_result() only needs to be called if you\nare worried about using too much memory while your script is running. All\nresult memory will automatically be freed when the script ends. You may\ncall mssql_free_result() with the result identifier as an argument and the\nassociated result memory will be freed.\n@param result The result resource that is being freed. This result comes\nfrom a call to mssql_query().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_free_statement() - Free statement memory\n
mssql_free_statement mssql_free_statement(resource $stmt) [bool]\nFree statement memory. mssql_free_statement() only needs to be called if you\nare worried about using too much memory while your script is running. All\nstatement memory will automatically be freed when the script ends. You may\ncall mssql_free_statement() with the statement identifier as an argument\nand the associated statement memory will be freed.\n@param stmt Statement resource, obtained with mssql_init().\n@return (PHP 4 >= 4.3.2, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_bind() - Adds a parameter to a stored procedure or a remote\nstored procedure\n@see mssql_execute() - Executes a stored procedure on a MS SQL server database\n@see mssql_init() - Initializes a stored procedure or a remote stored procedure\n@see mssql_free_result() - Free result memory\n
mssql_get_last_message mssql_get_last_message(void) [string]\nReturns the last message from the server. Gets the last message from the\nMS-SQL server\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_min_error_severity() - Sets the minimum error severity\n@see mssql_min_message_severity() - Sets the minimum message severity\n
mssql_guid_string mssql_guid_string(string $binary [, bool\n$short_format=false]) [string]\nConverts a 16 byte binary GUID to a string. Converts a 16 byte binary GUID\nto a string.\n@param binary A 16 byte binary GUID.\n@param short_format Whenever to use short format.\n@return (PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_init mssql_init(string $sp_name [, resource $link_identifier]) [resource]\nInitializes a stored procedure or a remote stored procedure. Initializes a\nstored procedure or a remote stored procedure.\n@param sp_name Stored procedure name, like `ownew.sp_name` or\n`otherdb.owner.sp_name`.\n@param link_identifier A MS SQL link identifier, returned by mssql_connect().\n@return (PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_bind() - Adds a parameter to a stored procedure or a remote\nstored procedure\n@see mssql_execute() - Executes a stored procedure on a MS SQL server database\n@see mssql_free_statement() - Free statement memory\n
mssql_min_error_severity mssql_min_error_severity(int $severity) [void]\nSets the minimum error severity. Sets the minimum error severity.\n@param severity The new error severity.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_min_message_severity mssql_min_message_severity(int $severity) [void]\nSets the minimum message severity. Sets the minimum message severity.\n@param severity The new message severity.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_next_result mssql_next_result(resource $result_id) [bool]\nMove the internal result pointer to the next result. When sending more than\none SQL statement to the server or executing a stored procedure with multiple\nresults, it will cause the server to return multiple result sets. This\nfunction will test for additional results available form the server. If\nan additional result set exists it will free the existing result set and\nprepare to fetch the rows from the new result set.\n@param result_id The result resource that is being evaluated. This result\ncomes from a call to mssql_query().\n@return (PHP 4 >= 4.0.5, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_num_fields mssql_num_fields(resource $result) [int]\nGets the number of fields in result. mssql_num_fields() returns the number\nof fields in a result set.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_query() - Send MS SQL query\n@see mssql_fetch_field() - Get field information\n@see mssql_num_rows() - Gets the number of rows in result\n
mssql_num_rows mssql_num_rows(resource $result) [int]\nGets the number of rows in result. mssql_num_rows() returns the number of\nrows in a result set.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_query() - Send MS SQL query\n@see mssql_fetch_row() - Get row as enumerated array\n
mssql_pconnect mssql_pconnect([string $servername [, string $username [,\nstring $password [, bool $new_link=false]]]]) [resource]\nOpen persistent MS SQL connection. mssql_pconnect() acts very much like\nmssql_connect() with two major differences. First, when connecting, the\nfunction would first try to find a (persistent) link that&#039;s already open\nwith the same host, username and password. If one is found, an identifier\nfor it will be returned instead of opening a new connection. Second, the\nconnection to the SQL server will not be closed when the execution of the\nscript ends. Instead, the link will remain open for future use (mssql_close()\nwill not close links established by mssql_pconnect()). This type of links\nis therefore called &#039;persistent&#039;.\n@param servername The MS SQL server. It can also include a port\nnumber. e.g. `hostname:port`.\n@param username The username.\n@param password The password.\n@param new_link If a second call is made to mssql_pconnect() with the\nsame arguments, no new link will be established, but instead, the link\nidentifier of the already opened link will be returned. This parameter\nmodifies this behavior and makes mssql_pconnect() always open a new link,\neven if mssql_pconnect() was called before with the same parameters.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_query mssql_query(string $query [, resource $link_identifier [, int\n$batch_size=0]]) [mixed]\nSend MS SQL query. mssql_query() sends a query to the currently active database\non the server that&#039;s associated with the specified link identifier.\n@param query An SQL query.\n@param link_identifier A MS SQL link identifier, returned by mssql_connect()\nor mssql_pconnect(). If the link identifier isn&#039;t specified, the last\nopened link is assumed. If no link is open, the function tries to establish\na link as if mssql_connect() was called, and use it.\n@param batch_size The number of records to batch in the buffer.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: If the query returns multiple results then it is necessary to fetch\nall results by mssql_next_result() or free the results by mssql_free_result()\nbefore executing next query.\n@see mssql_select_db() - Select MS SQL database\n@see mssql_connect() - Open MS SQL server connection\n
mssql_result mssql_result(resource $result, int $row, mixed $field) [string]\nGet result data. mssql_result() returns the contents of one cell from a MS\nSQL result set.\n@param result The result resource that is being evaluated. This result comes\nfrom a call to mssql_query().\n@param row The row number.\n@param field Can be the field&#039;s offset, the field&#039;s name or the\nfield&#039;s table dot field&#039;s name (tablename.fieldname). If the\ncolumn name has been aliased (&#039;select foo as bar from...&#039;), it\nuses the alias instead of the column name. Note: Specifying a numeric offset\nfor the `field` argument is much quicker than specifying a `fieldname` or\n`tablename.fieldname` argument.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@note Note: When working on large result sets, you should consider using\none of the functions that fetch an entire row (specified below). As these\nfunctions return the contents of multiple cells in one function call,\nthey&#039;re MUCH quicker than mssql_result().\n@see mssql_fetch_row() - Get row as enumerated array\n@see mssql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mssql_fetch_assoc() - Returns an associative array of the current row\nin the result\n@see mssql_fetch_object() - Fetch row as object\n
mssql_rows_affected mssql_rows_affected(resource $link_identifier) [int]\nReturns the number of records affected by the query. Returns the number of\nrecords affected by the last write query.\n@param link_identifier A MS SQL link identifier, returned by mssql_connect()\nor mssql_pconnect().\n@return (PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1)\n
mssql_select_db mssql_select_db(string $database_name [, resource\n$link_identifier]) [bool]\nSelect MS SQL database. mssql_select_db() sets the current active database on\nthe server that&#039;s associated with the specified link identifier. Every\nsubsequent call to mssql_query() will be made on the active database.\n@param database_name The database name. To escape the name of a database that\ncontains spaces, hyphens (&quot;-&quot;), or any other exceptional characters,\nthe database name must be enclosed in brackets, as is shown in the example,\nbelow. This technique must also be applied when selecting a database name\nthat is also a reserved word (such as `primary`).\n@param link_identifier A MS SQL link identifier, returned by mssql_connect()\nor mssql_pconnect(). If no link identifier is specified, the last opened\nlink is assumed. If no link is open, the function will try to establish a\nlink as if mssql_connect() was called, and use it.\n@return (PHP 4, PHP 5, PECL odbtp >= 1.1.1)\n@see mssql_connect() - Open MS SQL server connection\n@see mssql_pconnect() - Open persistent MS SQL connection\n@see mssql_query() - Send MS SQL query\n
mt_getrandmax mt_getrandmax(void) [int]\nShow largest possible random value.\n@return (PHP 4, PHP 5)\n@see mt_rand() - Generate a better random value\n@see mt_srand() - Seed the better random number generator\n@see getrandmax() - Show largest possible random value\n
mt_rand mt_rand(void) [int]\nGenerate a better random value.\n@param min Optional lowest value to be returned (default: 0)\n@param max Optional highest value to be returned (default: mt_getrandmax())\n@return (PHP 4, PHP 5)\n@see mt_srand() - Seed the better random number generator\n@see mt_getrandmax() - Show largest possible random value\n@see rand() - Generate a random integer\n
mt_srand mt_srand([int $seed]) [void]\nSeed the better random number generator. Seeds the random number generator\nwith `seed` or with a random value if no `seed` is given. Note: As of PHP\n4.2.0, there is no need to seed the random number generator with srand()\nor mt_srand() as this is now done automatically.\n@param seed An optional seed value\n@return (PHP 4, PHP 5)\n@see mt_rand() - Generate a better random value\n@see mt_getrandmax() - Show largest possible random value\n@see srand() - Seed the random number generator\n
mysql_affected_rows mysql_affected_rows([resource $link_identifier]) [int]\nGet number of affected rows in previous MySQL operation. Get the number of\naffected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated\nwith `link_identifier`.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: Transactions If you are using transactions, you need to call\nmysql_affected_rows() after your INSERT, UPDATE, or DELETE query, not after\nthe COMMIT.\n@note Note: SELECT Statements To retrieve the number of rows returned by a\nSELECT, it is possible to use mysql_num_rows().\n@note Note: Cascaded Foreign Keys mysql_affected_rows() does not count rows\naffected implicitly through the use of ON DELETE CASCADE and/or ON UPDATE\nCASCADE in foreign key constraints.\n@see mysql_num_rows() - Get number of rows in result\n@see mysql_info() - Get information about the most recent query\n
mysql_client_encoding mysql_client_encoding([resource $link_identifier])\n[string]\nReturns the name of the character set. Retrieves the `character_set` variable\nfrom MySQL.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mysql_set_charset() - Sets the client character set\n@see mysql_real_escape_string() - Escapes special characters in a string\nfor use in an SQL statement\n
mysql_close mysql_close([resource $link_identifier]) [bool]\nClose MySQL connection. mysql_close() closes the non-persistent connection to\nthe MySQL server that&#039;s associated with the specified link identifier. If\n`link_identifier` isn&#039;t specified, the last opened link is used. Using\nmysql_close() isn&#039;t usually necessary, as non-persistent open links\nare automatically closed at the end of the script&#039;s execution. See also\nfreeing resources.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: mysql_close() will not close persistent links created by\nmysql_pconnect().\n@see mysql_connect() - Open a connection to a MySQL Server\n@see mysql_free_result() - Free result memory\n
mysql_connect mysql_connect([string\n$server=ini_get(&quot;mysql.default_host&quot;) [, string\n$username=ini_get(&quot;mysql.default_user&quot;) [, string\n$password=ini_get(&quot;mysql.default_password&quot;) [, bool $new_link=false\n[, int $client_flags=0]]]]]) [resource]\nOpen a connection to a MySQL Server. Opens or reuses a connection to a\nMySQL server.\n@param server The MySQL server. It can also include a port\nnumber. e.g. &quot;hostname:port&quot; or a path to a local socket\ne.g. &quot;:/path/to/socket&quot; for the localhost. If the PHP directive\nmysql.default_host is undefined (default), then the default value is\n&#039;localhost:3306&#039;. In SQL safe mode, this parameter is ignored and\nvalue &#039;localhost:3306&#039; is always used.\n@param username The username. Default value is defined by\nmysql.default_user. In SQL safe mode, this parameter is ignored and the name\nof the user that owns the server process is used.\n@param password The password. Default value is defined by\nmysql.default_password. In SQL safe mode, this parameter is ignored and\nempty password is used.\n@param new_link If a second call is made to mysql_connect() with the same\narguments, no new link will be established, but instead, the link identifier\nof the already opened link will be returned. The `new_link` parameter\nmodifies this behavior and makes mysql_connect() always open a new link,\neven if mysql_connect() was called before with the same parameters. In SQL\nsafe mode, this parameter is ignored.\n@param client_flags The `client_flags` parameter can be a combination\nof the following constants: 128 (enable `LOAD DATA LOCAL` handling),\nMYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or\nMYSQL_CLIENT_INTERACTIVE. Read the section about MySQL client constants for\nfurther information. In SQL safe mode, this parameter is ignored.\n@return (PHP 4, PHP 5)\n@note Note: Whenever you specify &quot;localhost&quot; or\n&quot;localhost:port&quot; as server, the MySQL client library will override\nthis and try to connect to a local socket (named pipe on Windows). If you want\nto use TCP/IP, use &quot;127.0.0.1&quot; instead of &quot;localhost&quot;. If\nthe MySQL client library tries to connect to the wrong local socket, you\nshould set the correct path as in your PHP configuration and leave the server\nfield blank.\n@note Note: The link to the server will be closed as soon as the execution\nof the script ends, unless it&#039;s closed earlier by explicitly calling\nmysql_close().\n@note Note: You can suppress the error message on failure by prepending a @\nto the function name.\n@note Note: Error &quot;Can&#039;t create TCP/IP socket (10106)&quot;\nusually means that the variables_order configure directive doesn&#039;t\ncontain character `E`. On Windows, if the environment is not copied the\n`SYSTEMROOT` environment variable won&#039;t be available and PHP will have\nproblems loading Winsock.\n@see mysql_pconnect() - Open a persistent connection to a MySQL server\n@see mysql_close() - Close MySQL connection\n
mysql_create_db mysql_create_db(string $database_name [, resource\n$link_identifier]) [bool]\nCreate a MySQL database. mysql_create_db() attempts to create a new database\non the server associated with the specified link identifier.\n@param database_name The name of the database being created.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_createdb()\n@note Note: This function will not be available if the MySQL extension was\nbuilt against a MySQL 4.x client library.\n@see mysql_query() - Send a MySQL query\n@see mysql_select_db() - Select a MySQL database\n
mysql_data_seek mysql_data_seek(resource $result, int $row_number) [bool]\nMove internal result pointer. mysql_data_seek() moves the internal row pointer\nof the MySQL result associated with the specified result identifier to point\nto the specified row number. The next call to a MySQL fetch function, such\nas mysql_fetch_assoc(), would return that row. `row_number` starts at 0. The\n`row_number` should be a value in the range from 0 to mysql_num_rows() -\n1. However if the result set is empty (mysql_num_rows() == 0), a seek to 0\nwill fail with a E_WARNING and mysql_data_seek() will return FALSE.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param row_number The desired row number of the new result pointer.\n@return (PHP 4, PHP 5)\n@note Note: The function mysql_data_seek() can be used in conjunction only\nwith mysql_query(), not with mysql_unbuffered_query().\n@see mysql_query() - Send a MySQL query\n@see mysql_num_rows() - Get number of rows in result\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mysql_fetch_object() - Fetch a result row as an object\n
mysql_db_name mysql_db_name(resource $result, int $row [, mixed $field])\n[string]\nGet result data. Retrieve the database name from a call to mysql_list_dbs().\n@param result The result pointer from a call to mysql_list_dbs().\n@param row The index into the result set.\n@param field The field name.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_dbname()\n@see mysql_list_dbs() - List databases available on a MySQL server\n@see mysql_tablename() - Get table name of field\n
mysql_db_query mysql_db_query(string $database, string $query [, resource\n$link_identifier]) [resource]\nSend a MySQL query. mysql_db_query() selects a database, and executes a\nquery on it. This function has been DEPRECATED as of PHP 5.3.0. Relying on\nthis feature is highly discouraged.\n@param database The name of the database that will be selected.\n@param query The MySQL query. Data inside the query should be properly escaped.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@note Note: Be aware that this function does NOT switch back to the database\nyou were connected before. In other words, you can&#039;t use this function to\ntemporarily run a sql query on another database, you would have to manually\nswitch back. Users are strongly encouraged to use the `database.table`\nsyntax in their sql queries or mysql_select_db() instead of this function.\n@see mysql_query() - Send a MySQL query\n@see mysql_select_db() - Select a MySQL database\n
mysql_drop_db mysql_drop_db(string $database_name [, resource\n$link_identifier]) [bool]\nDrop (delete) a MySQL database. mysql_drop_db() attempts to drop (remove)\nan entire database from the server associated with the specified link\nidentifier. This function is deprecated, it is preferable to use mysql_query()\nto issue an sql `DROP DATABASE` statement instead.\n@param database_name The name of the database that will be deleted.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@see mysql_query() - Send a MySQL query\n
mysql_errno mysql_errno([resource $link_identifier]) [int]\nReturns the numerical value of the error message from previous MySQL\noperation. Returns the error number from the last MySQL function. Errors\ncoming back from the MySQL database backend no longer issue warnings. Instead,\nuse mysql_errno() to retrieve the error code. Note that this function only\nreturns the error code from the most recently executed MySQL function (not\nincluding mysql_error() and mysql_errno()), so if you want to use it, make\nsure you check the value before calling another MySQL function.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@see mysql_error() - Returns the text of the error message from previous\nMySQL operation\n@see &raquo; MySQL error codes\n
mysql_error mysql_error([resource $link_identifier]) [string]\nReturns the text of the error message from previous MySQL operation. Returns\nthe error text from the last MySQL function. Errors coming back from the\nMySQL database backend no longer issue warnings. Instead, use mysql_error() to\nretrieve the error text. Note that this function only returns the error text\nfrom the most recently executed MySQL function (not including mysql_error()\nand mysql_errno()), so if you want to use it, make sure you check the value\nbefore calling another MySQL function.\n@param  link_identifier The MySQL connection. If the link identifier is not\nspecified, the last link opened by mysql_connect() is assumed. If no such\nlink is found, it will try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an E_WARNING\nlevel error is generated.\n@return (PHP 4, PHP 5)\n@see mysql_errno() - Returns the numerical value of the error message from\nprevious MySQL operation\n@see &raquo; MySQL error codes\n
mysql_escape_string mysql_escape_string(string $unescaped_string) [string]\nEscapes a string for use in a mysql_query. This function will\nescape the `unescaped_string`, so that it is safe to place it in a\nmysql_query(). This function is deprecated. This function is identical to\nmysql_real_escape_string() except that mysql_real_escape_string() takes a\nconnection handler and escapes the string according to the current character\nset. mysql_escape_string() does not take a connection argument and does not\nrespect the current charset setting. This function has been DEPRECATED as\nof PHP 5.3.0. Relying on this feature is highly discouraged.\n@param unescaped_string The string that is to be escaped.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@note Note: mysql_escape_string() does not escape `%` and `_`.\n@see mysql_real_escape_string() - Escapes special characters in a string\nfor use in an SQL statement\n@see addslashes() - Quote string with slashes\n@see The magic_quotes_gpc directive.\n
mysql_fetch_array mysql_fetch_array(resource $result [, int\n$result_type=MYSQL_BOTH]) [array]\nFetch a result row as an associative array, a numeric array, or both. Returns\nan array that corresponds to the fetched row and moves the internal data\npointer ahead.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param result_type The type of array that is to be fetched. It&#039;s\na constant and can take the following values: MYSQL_ASSOC, MYSQL_NUM,\nand MYSQL_BOTH.\n@return (PHP 4, PHP 5)\n@note Note: Performance An important thing to note is that using\nmysql_fetch_array() is not significantly slower than using mysql_fetch_row(),\nwhile it provides a significant added value.\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_data_seek() - Move internal result pointer\n@see mysql_query() - Send a MySQL query\n
mysql_fetch_assoc mysql_fetch_assoc(resource $result) [array]\nFetch a result row as an associative array. Returns an associative array\nthat corresponds to the fetched row and moves the internal data pointer\nahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array()\nwith MYSQL_ASSOC for the optional second parameter. It only returns an\nassociative array.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4 >= 4.0.3, PHP 5)\n@note Note: Performance An important thing to note is that using\nmysql_fetch_assoc() is not significantly slower than using mysql_fetch_row(),\nwhile it provides a significant added value.\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see mysql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mysql_data_seek() - Move internal result pointer\n@see mysql_query() - Send a MySQL query\n@see mysql_error() - Returns the text of the error message from previous\nMySQL operation\n
mysql_fetch_field mysql_fetch_field(resource $result [, int $field_offset=0])\n[object]\nGet column information from a result and return as an object. Returns an\nobject containing field information. This function can be used to obtain\ninformation about fields in the provided query result.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param field_offset The numerical field offset. If the field offset is not\nspecified, the next field that was not yet retrieved by this function is\nretrieved. The `field_offset` starts at `0`.\n@return (PHP 4, PHP 5)\n@note Note: Field names returned by this function are case-sensitive.\n@see mysql_field_seek() - Set result pointer to a specified field offset\n
mysql_fetch_lengths mysql_fetch_lengths(resource $result) [array]\nGet the length of each output in a result. Returns an array that\ncorresponds to the lengths of each field in the last row fetched by\nMySQL. mysql_fetch_lengths() stores the lengths of each result column\nin the last row returned by mysql_fetch_row(), mysql_fetch_assoc(),\nmysql_fetch_array(), and mysql_fetch_object() in an array, starting at\noffset 0.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4, PHP 5)\n@see mysql_field_len() - Returns the length of the specified field\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see strlen() - Get string length\n
mysql_fetch_object mysql_fetch_object(resource $result [, string $class_name\n[, array $params]]) [object]\nFetch a result row as an object. Returns an object with properties that\ncorrespond to the fetched row and moves the internal data pointer ahead.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param class_name The name of the class to instantiate, set the properties\nof and return. If not specified, a stdClass object is returned.\n@param params An optional array of parameters to pass to the constructor for\n`class_name` objects.\n@return (PHP 4, PHP 5)\n@note Note: Performance Speed-wise, the function is identical to\nmysql_fetch_array(), and almost as quick as mysql_fetch_row() (the difference\nis insignificant).\n@note Note: mysql_fetch_object() is similar to mysql_fetch_array(), with\none difference - an object is returned, instead of an array. Indirectly,\nthat means that you can only access the data by the field names, and not by\ntheir offsets (numbers are illegal property names).\n@note Note: Field names returned by this function are case-sensitive.\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mysql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_fetch_row() - Get a result row as an enumerated array\n@see mysql_data_seek() - Move internal result pointer\n@see mysql_query() - Send a MySQL query\n
mysql_fetch_row mysql_fetch_row(resource $result) [array]\nGet a result row as an enumerated array. Returns a numerical array that\ncorresponds to the fetched row and moves the internal data pointer ahead.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@return (PHP 4, PHP 5)\n@note Note: This function sets NULL fields to the PHP NULL value.\n@see mysql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see mysql_fetch_assoc() - Fetch a result row as an associative array\n@see mysql_fetch_object() - Fetch a result row as an object\n@see mysql_data_seek() - Move internal result pointer\n@see mysql_fetch_lengths() - Get the length of each output in a result\n@see mysql_result() - Get result data\n
mysql_field_flags mysql_field_flags(resource $result, int $field_offset)\n[string]\nGet the flags associated with the specified field in\na result. mysql_field_flags() returns the field flags of the specified\nfield. The flags are reported as a single word per flag separated by a single\nspace, so that you can split the returned value using explode().\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_fieldflags()\n@see mysql_field_type() - Get the type of the specified field in a result\n@see mysql_field_len() - Returns the length of the specified field\n
mysql_field_len mysql_field_len(resource $result, int $field_offset) [int]\nReturns the length of the specified field. mysql_field_len() returns the\nlength of the specified field.\n@param  result The result resource that is being evaluated. This result\ncomes from a call to mysql_query().\n@param  field_offset The numerical field offset. The `field_offset` starts\nat `0`. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PHP 4, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: mysql_fieldlen()\n@see mysql_fetch_lengths() - Get the length of each output in a result\n@see strlen() - Get string length\n
mb_strpos mb_strpos(string $haystack, string $needle [, int $offset=0 [,\nstring $encoding]]) [int]\nFind position of first occurrence of string in a string. Finds position of the\nfirst occurrence of a string in a string. Performs a multi-byte safe strpos()\noperation based on number of characters. The first character&#039;s position\nis 0, the second character position is 1, and so on.\n@param haystack The string being checked.\n@param needle The string to find in `haystack`. In contrast with strpos(),\nnumeric values are not applied as the ordinal value of a character.\n@param offset The search offset. If it is not specified, 0 is used.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see strpos() - Find position of first occurrence of a string\n
mb_strrchr mb_strrchr(string $haystack, string $needle [, bool $part=false\n[, string $encoding]]) [string]\nFinds the last occurrence of a character in a string within\nanother. mb_strrchr() finds the last occurrence of `needle` in `haystack` and\nreturns the portion of `haystack`. If `needle` is not found, it returns FALSE.\n@param haystack The string from which to get the last occurrence of `needle`\n@param needle The string to find in `haystack`\n@param part Determines which portion of `haystack` this function returns. If\nset to TRUE, it returns all of `haystack` from the beginning to the last\noccurrence of `needle`. If set to FALSE, it returns all of `haystack` from\nthe last occurrence of `needle` to the end,\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see strrchr() - Find the last occurrence of a character in a string\n@see mb_strstr() - Finds first occurrence of a string within another\n@see mb_strrichr() - Finds the last occurrence of a character in a string\nwithin another, case insensitive\n
mb_strrichr mb_strrichr(string $haystack, string $needle [, bool $part=false\n[, string $encoding]]) [string]\nFinds the last occurrence of a character in a string within another, case\ninsensitive. mb_strrichr() finds the last occurrence of `needle` in `haystack`\nand returns the portion of `haystack`. Unlike mb_strrchr(), mb_strrichr()\nis case-insensitive. If `needle` is not found, it returns FALSE.\n@param haystack The string from which to get the last occurrence of `needle`\n@param needle The string to find in `haystack`\n@param part Determines which portion of `haystack` this function returns. If\nset to TRUE, it returns all of `haystack` from the beginning to the last\noccurrence of `needle`. If set to FALSE, it returns all of `haystack` from\nthe last occurrence of `needle` to the end,\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see mb_stristr() - Finds first occurrence of a string within another,\ncase insensitive\n@see mb_strrchr() - Finds the last occurrence of a character in a string\nwithin another\n
mb_strripos mb_strripos(string $haystack, string $needle [, int $offset=0\n[, string $encoding]]) [int]\nFinds position of last occurrence of a string within another, case\ninsensitive. mb_strripos() performs multi-byte safe strripos() operation based\non number of characters. `needle` position is counted from the beginning of\n`haystack`. First character&#039;s position is 0. Second character position\nis 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.\n@param haystack The string from which to get the position of the last\noccurrence of `needle`\n@param needle The string to find in `haystack`\n@param offset The position in `haystack` to start searching\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see strripos() - Find position of last occurrence of a case-insensitive\nstring in a string\n@see strrpos() - Find the position of the last occurrence of a substring in\na string\n@see mb_strrpos() - Find position of last occurrence of a string in a string\n
mb_strrpos mb_strrpos(string $haystack, string $needle [, int $offset=0 [,\nstring $encoding]]) [int]\nFind position of last occurrence of a string in a string. Performs a multibyte\nsafe strrpos() operation based on the number of characters. `needle` position\nis counted from the beginning of `haystack`. First character&#039;s position\nis 0. Second character position is 1.\n@param haystack The string being checked, for the last occurrence of `needle`\n@param needle The string to find in `haystack`.\n@param offset May be specified to begin searching an arbitrary number\nof characters into the string. Negative values will stop searching at an\narbitrary point prior to the end of the string.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: The `encoding` parameter was moved from the third position to the\nfourth in PHP 5.2.0. For backward compatibility, `encoding` can be specified\nas the third parameter, but doing so is deprecated and will be removed in\nthe future.\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_strpos() - Find position of first occurrence of string in a string\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see strrpos() - Find the position of the last occurrence of a substring in\na string\n
mb_strstr mb_strstr(string $haystack, string $needle [, bool $part=false [,\nstring $encoding]]) [string]\nFinds first occurrence of a string within another. mb_strstr() finds the first\noccurrence of `needle` in `haystack` and returns the portion of `haystack`. If\n`needle` is not found, it returns FALSE.\n@param haystack The string from which to get the first occurrence of `needle`\n@param needle The string to find in `haystack`\n@param part Determines which portion of `haystack` this function returns. If\nset to TRUE, it returns all of `haystack` from the beginning to the first\noccurrence of `needle`. If set to FALSE, it returns all of `haystack` from\nthe first occurrence of `needle` to the end,\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n@see mb_stristr() - Finds first occurrence of a string within another,\ncase insensitive\n
mb_strtolower mb_strtolower(string $str [, string\n$encoding=mb_internal_encoding()]) [string]\nMake a string lowercase. Returns `str` with all alphabetic characters\nconverted to lowercase.\n@param str The string being lowercased.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mb_strtoupper() - Make a string uppercase\n@see mb_convert_case() - Perform case folding on a string\n@see strtolower() - Make a string lowercase\n
mb_strtoupper mb_strtoupper(string $str [, string\n$encoding=mb_internal_encoding()]) [string]\nMake a string uppercase. Returns `str` with all alphabetic characters\nconverted to uppercase.\n@param str The string being uppercased.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mb_strtolower() - Make a string lowercase\n@see mb_convert_case() - Perform case folding on a string\n@see strtoupper() - Make a string uppercase\n
mb_strwidth mb_strwidth(string $str [, string $encoding]) [int]\nReturn width of string. Returns the width of string `str`. Multi-byte\ncharacters are usually twice the width of single byte characters.  Characters\nwidth Chars Width U+0000 - U+0019 0 U+0020 - U+1FFF 1 U+2000 - U+FF60 2\nU+FF61 - U+FF9F 1 U+FFA0 - 2\n@param str The string being decoded.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_strimwidth() - Get truncated string with specified width\n@see mb_internal_encoding() - Set/Get internal character encoding\n
mb_substitute_character mb_substitute_character([mixed $substrchar]) [mixed]\nSet/Get substitution character. Specifies a substitution character when\ninput character encoding is invalid or character code does not exist in\noutput character encoding. Invalid characters may be substituted NULL (no\noutput), string or integer value (Unicode character code value). This setting\naffects mb_convert_encoding(), mb_convert_variables(), mb_output_handler(),\nand mb_send_mail().\n@param substrchar Specify the Unicode value as an integer, or as one of\nthe following strings: &quot;none&quot; : no output &quot;long&quot; :\nOutput character code value (Example: U+3000, JIS+7E7E) &quot;entity&quot;\n: Output character entity (Example: Ȁ)\n@return (PHP 4 >= 4.0.6, PHP 5)\n
mb_substr_count mb_substr_count(string $haystack, string $needle [, string\n$encoding]) [int]\nCount the number of substring occurrences. Counts the number of times the\n`needle` substring occurs in the `haystack` string.\n@param haystack The string being checked.\n@param needle The string being found.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mb_strpos() - Find position of first occurrence of string in a string\n@see mb_substr() - Get part of string\n@see substr_count() - Count the number of substring occurrences\n
mb_substr mb_substr(string $str, int $start [, int $length [, string\n$encoding]]) [string]\nGet part of string. Performs a multi-byte safe substr() operation based on\nnumber of characters. Position is counted from the beginning of `str`. First\ncharacter&#039;s position is 0. Second character position is 1, and so on.\n@param str The string being checked.\n@param start The first position used in `str`.\n@param length The maximum length of the returned string.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_strcut() - Get part of string\n@see mb_internal_encoding() - Set/Get internal character encoding\n
mcrypt_cbc mcrypt_cbc(int $cipher, string $key, string $data, int $mode [,\nstring $iv]) [string]\nEncrypts/decrypts data in CBC mode. The first prototype is when linked against\nlibmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The\n`mode` should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. This function\nshould not be used anymore, see mcrypt_generic() and mdecrypt_generic()\nfor replacements.\n
mcrypt_cfb mcrypt_cfb(int $cipher, string $key, string $data, int $mode,\nstring $iv) [string]\nEncrypts/decrypts data in CFB mode. The first prototype is when linked against\nlibmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The\n`mode` should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. This function\nshould not be used anymore, see mcrypt_generic() and mdecrypt_generic()\nfor replacements.\n
mcrypt_create_iv mcrypt_create_iv(int $size [, int $source=MCRYPT_DEV_RANDOM])\n[string]\nCreates an initialization vector (IV) from a random source. Creates an\ninitialization vector (IV) from a random source. The IV is only meant to\ngive an alternative seed to the encryption routines. This IV does not need\nto be secret at all, though it can be desirable. You even can send it along\nwith your ciphertext without losing security.\n@param size The size of the IV.\n@param source The source of the IV. The source can be MCRYPT_RAND (system\nrandom number generator), MCRYPT_DEV_RANDOM (read data from /dev/random)\nand MCRYPT_DEV_URANDOM (read data from /dev/urandom). Prior to 5.3.0,\nMCRYPT_RAND was the only one supported on Windows.\n@return (PHP 4, PHP 5)\n@see &raquo; http://www.ciphersbyritter.com/GLOSSARY.HTM#IV\n@see &raquo; http://www.quadibloc.com/crypto/co0409.htm\n@see Chapter 9.3 of Applied Cryptography by Schneier (ISBN 0-471-11709-9)\n
mcrypt_decrypt mcrypt_decrypt(string $cipher, string $key, string $data,\nstring $mode [, string $iv]) [string]\nDecrypts crypttext with given parameters. Decrypts the `data` and returns\nthe unencrypted data.\n@param cipher One of the MCRYPT_ciphername constants, or the name of the\nalgorithm as string.\n@param key The key with which the data was encrypted. If it&#039;s smaller\nthan the required keysize, it is padded with &#039;`\0`&#039;.\n@param data The data that will be decrypted with the given `cipher` and\n`mode`. If the size of the data is not n * blocksize, the data will be padded\nwith &#039;`\0`&#039;.\n@param mode One of the MCRYPT_MODE_modename constants, or one of the following\nstrings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;,\n&quot;nofb&quot; or &quot;stream&quot;.\n@param iv The `iv` parameter is used for the initialization in CBC, CFB,\nOFB modes, and in some algorithms in STREAM mode. If you do not supply an IV,\nwhile it is needed for an algorithm, the function issues a warning and uses\nan IV with all its bytes set to &#039;`\0`&#039;.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_ecb mcrypt_ecb(int $cipher, string $key, string $data, int $mode)\n[string]\nDeprecated: Encrypts/decrypts data in ECB mode. The first prototype is when\nlinked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x\nor higher. The `mode` should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. This\nfunction is deprecated and should not be used anymore, see mcrypt_generic()\nand mdecrypt_generic() for replacements.\n
mcrypt_enc_get_algorithms_name mcrypt_enc_get_algorithms_name(resource $td)\n[string]\nReturns the name of the opened algorithm. This function returns the name of\nthe algorithm.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_get_block_size mcrypt_enc_get_block_size(resource $td) [int]\nReturns the blocksize of the opened algorithm. Gets the blocksize of the\nopened algorithm.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_get_iv_size mcrypt_enc_get_iv_size(resource $td) [int]\nReturns the size of the IV of the opened algorithm. This function returns\nthe size of the IV of the algorithm specified by the encryption descriptor\nin bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms\nin stream mode.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_get_key_size mcrypt_enc_get_key_size(resource $td) [int]\nReturns the maximum supported keysize of the opened mode. Gets the maximum\nsupported key size of the algorithm in bytes.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_get_modes_name mcrypt_enc_get_modes_name(resource $td) [string]\nReturns the name of the opened mode. This function returns the name of\nthe mode.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_get_supported_key_sizes mcrypt_enc_get_supported_key_sizes(resource\n$td) [array]\nReturns an array with the supported keysizes of the opened algorithm. Gets\nthe supported key sizes of the opened algorithm.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm_mode(resource\n$td) [bool]\nChecks whether the encryption of the opened mode works on blocks. Tells\nwhether the algorithm of the opened mode works on blocks (e.g. FALSE for\nstream, and TRUE for cbc, cfb, ofb)..\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_algorithm(resource $td)\n[bool]\nChecks whether the algorithm of the opened mode is a block algorithm. Tells\nwhether the algorithm of the opened mode is a block algorithm.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_is_block_mode mcrypt_enc_is_block_mode(resource $td) [bool]\nChecks whether the opened mode outputs blocks. Tells whether the opened mode\noutputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_enc_self_test mcrypt_enc_self_test(resource $td) [int]\nRuns a self test on the opened module. This function runs the self test on\nthe algorithm specified by the descriptor `td`.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_encrypt mcrypt_encrypt(string $cipher, string $key, string $data,\nstring $mode [, string $iv]) [string]\nEncrypts plaintext with given parameters. Encrypts the data and returns it.\n@param cipher One of the MCRYPT_ciphername constants, or the name of the\nalgorithm as string.\n@param key The key with which the data will be encrypted. If it&#039;s\nsmaller than the required keysize, it is padded with &#039;`\0`&#039;. It\nis better not to use ASCII strings for keys. It is recommended to use the\nmhash functions to create a key from a string.\n@param data The data that will be encrypted with the given `cipher` and\n`mode`. If the size of the data is not n * blocksize, the data will be padded\nwith &#039;`\0`&#039;. The returned crypttext can be larger than the size\nof the data that was given by `data`.\n@param mode One of the MCRYPT_MODE_modename constants, or one of the following\nstrings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;,\n&quot;nofb&quot; or &quot;stream&quot;.\n@param iv Used for the initialization in CBC, CFB, OFB modes, and in some\nalgorithms in STREAM mode. If you do not supply an IV, while it is needed\nfor an algorithm, the function issues a warning and uses an IV with all its\nbytes set to &#039;`\0`&#039;.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_generic_deinit mcrypt_generic_deinit(resource $td) [bool]\nThis function deinitializes an encryption module. This function terminates\nencryption specified by the encryption descriptor (`td`). It clears all\nbuffers, but does not close the module. You need to call mcrypt_module_close()\nyourself. (But PHP does this for you at the end of the script.)\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@see mcrypt_module_open() - Opens the module of the algorithm and the mode\nto be used\n@see mcrypt_generic_init() - This function initializes all buffers needed\nfor encryption\n
mcrypt_generic_end mcrypt_generic_end(resource $td) [bool]\nThis function terminates encryption. Warning This function is deprecated,\nuse mcrypt_generic_deinit() instead. It can cause crashes when used with\nmcrypt_module_close() due to multiple buffer frees.\n
mcrypt_generic_init mcrypt_generic_init(resource $td, string $key, string $iv)\n[int]\nThis function initializes all buffers needed for encryption. You need to\ncall this function before every call to mcrypt_generic() or mdecrypt_generic().\n@param td The encryption descriptor.\n@param key The maximum length of the key should be the one obtained by\ncalling mcrypt_enc_get_key_size() and every value smaller than this is legal.\n@param iv The IV should normally have the size of the algorithms block size,\nbut you must obtain the size by calling mcrypt_enc_get_iv_size(). IV is\nignored in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It\nneeds to be random and unique (but not secret). The same IV must be used\nfor encryption/decryption. If you do not want to use it you should set it\nto zeros, but this is not recommended.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mcrypt_module_open() - Opens the module of the algorithm and the mode\nto be used\n
mcrypt_generic mcrypt_generic(resource $td, string $data) [string]\nThis function encrypts data. This function encrypts data. The data is\npadded with &quot;`\0`&quot; to make sure the length of the data is n *\nblocksize. This function returns the encrypted data. Note that the length\nof the returned string can in fact be longer then the input, due to the\npadding of the data. If you want to store the encrypted data in a database\nmake sure to store the entire string as returned by mcrypt_generic, or the\nstring will not entirely decrypt properly. If your original string is 10\ncharacters long and the block size is 8 (use mcrypt_enc_get_block_size()\nto determine the blocksize), you would need at least 16 characters in your\ndatabase field. Note the string returned by mdecrypt_generic() will be 16\ncharacters as well...use rtrim($str, &quot;\0&quot;) to remove the padding. If\nyou are for example storing the data in a MySQL database remember that varchar\nfields automatically have trailing spaces removed during insertion. As\nencrypted data can end in a space (ASCII 32), the data will be damaged by\nthis removal. Store data in a tinyblob/tinytext (or larger) field instead.\n@param td The encryption descriptor. The encryption handle should always be\ninitialized with mcrypt_generic_init() with a key and an IV before calling this\nfunction. Where the encryption is done, you should free the encryption buffers\nby calling mcrypt_generic_deinit(). See mcrypt_module_open() for an example.\n@param data The data to encrypt.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mdecrypt_generic() - Decrypts data\n@see mcrypt_generic_init() - This function initializes all buffers needed\nfor encryption\n@see mcrypt_generic_deinit() - This function deinitializes an encryption module\n
mcrypt_get_block_size mcrypt_get_block_size(int $cipher) [int]\nGets the block size of the specified cipher. The first prototype is when\nlinked against libmcrypt 2.2.x, the second when linked against libmcrypt\n2.4.x or 2.5.x. mcrypt_get_block_size() is used to get the size of a block\nof the specified `cipher` (in combination with an encryption mode). It is\nmore useful to use the mcrypt_enc_get_block_size() function as this uses\nthe resource returned by mcrypt_module_open().\n@param cipher One of the `MCRYPT_ciphername` constants or the name of the\nalgorithm as string.\n@param module The module.\n@return (PHP 4, PHP 5)\n@see mcrypt_get_key_size() - Gets the key size of the specified cipher\n@see mcrypt_enc_get_block_size() - Returns the blocksize of the opened\nalgorithm\n@see mcrypt_encrypt() - Encrypts plaintext with given parameters\n
mcrypt_get_cipher_name mcrypt_get_cipher_name(int $cipher) [string]\nGets the name of the specified cipher. mcrypt_get_cipher_name() is used to\nget the name of the specified cipher. mcrypt_get_cipher_name() takes the\ncipher number as an argument (libmcrypt 2.2.x) or takes the cipher name as\nan argument (libmcrypt 2.4.x or higher) and returns the name of the cipher\nor FALSE, if the cipher does not exist.\n@param cipher One of the `MCRYPT_ciphername` constants or the name of the\nalgorithm as string.\n@return (PHP 4, PHP 5)\n
mcrypt_get_iv_size mcrypt_get_iv_size(string $cipher, string $mode) [int]\nReturns the size of the IV belonging to a specific cipher/mode\ncombination. Gets the size of the IV belonging to a specific `cipher`/`mode`\ncombination. It is more useful to use the mcrypt_enc_get_iv_size() function\nas this uses the resource returned by mcrypt_module_open().\n@param cipher One of the MCRYPT_ciphername constants, or the name of the\nalgorithm as string.\n@param mode One of the MCRYPT_MODE_modename constants, or one of the following\nstrings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;,\n&quot;nofb&quot; or &quot;stream&quot;. The IV is ignored in ECB mode as\nthis mode does not require it. You will need to have the same IV (think:\nstarting point) both at encryption and decryption stages, otherwise your\nencryption will fail.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mcrypt_get_block_size() - Gets the block size of the specified cipher\n@see mcrypt_enc_get_iv_size() - Returns the size of the IV of the opened\nalgorithm\n@see mcrypt_create_iv() - Creates an initialization vector (IV) from a\nrandom source\n
mcrypt_get_key_size mcrypt_get_key_size(int $cipher) [int]\nGets the key size of the specified cipher. The first prototype is when linked\nagainst libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or\n2.5.x. mcrypt_get_key_size() is used to get the size of a key of the specified\n`cipher` (in combination with an encryption mode). It is more useful to use\nthe mcrypt_enc_get_key_size() function as this uses the resource returned\nby mcrypt_module_open().\n@see mcrypt_get_block_size() - Gets the block size of the specified cipher\n@see mcrypt_enc_get_key_size() - Returns the maximum supported keysize of\nthe opened mode\n@see mcrypt_encrypt() - Encrypts plaintext with given parameters\n
mcrypt_list_algorithms mcrypt_list_algorithms([string\n$lib_dir=ini_get(&quot;mcrypt.algorithms_dir&quot;)]) [array]\nGets an array of all supported ciphers. Gets the list of all supported\nalgorithms in the `lib_dir` parameter.\n@param lib_dir Specifies the directory where all algorithms are located. If not\nspecified, the value of the `mcrypt.algorithms_dir` php.ini directive is used.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_list_modes mcrypt_list_modes([string\n$lib_dir=ini_get(&quot;mcrypt.modes_dir&quot;)]) [array]\nGets an array of all supported modes. Gets the list of all supported modes\nin the `lib_dir` parameter.\n@param lib_dir Specifies the directory where all modes are located. If not\nspecified, the value of the `mcrypt.modes_dir` php.ini directive is used.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_close mcrypt_module_close(resource $td) [bool]\nCloses the mcrypt module. Closes the specified encryption handle.\n@param td The encryption descriptor.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mcrypt_module_open() - Opens the module of the algorithm and the mode\nto be used\n
mcrypt_module_get_algo_block_size mcrypt_module_get_algo_block_size(string\n$algorithm [, string $lib_dir]) [int]\nReturns the blocksize of the specified algorithm. Gets the blocksize of the\nspecified algorithm.\n@param algorithm The algorithm name.\n@param lib_dir This optional parameter can contain the location where the\nmode module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_get_algo_key_size mcrypt_module_get_algo_key_size(string\n$algorithm [, string $lib_dir]) [int]\nReturns the maximum supported keysize of the opened mode. Gets the maximum\nsupported keysize of the opened mode.\n@param algorithm The algorithm name.\n@param lib_dir This optional parameter can contain the location where the\nmode module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_get_supported_key_sizes\nmcrypt_module_get_supported_key_sizes(string $algorithm [, string $lib_dir])\n[array]\nReturns an array with the supported keysizes of the opened\nalgorithm. Returns an array with the key sizes supported by the specified\nalgorithm. If it returns an empty array then all key sizes between 1 and\nmcrypt_module_get_algo_key_size() are supported by the algorithm.\n@param algorithm The algorithm to be used.\n@param lib_dir The optional `lib_dir` parameter can contain the location\nwhere the algorithm module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mcrypt_enc_get_supported_key_sizes() - Returns an array with the\nsupported keysizes of the opened algorithm\n
mcrypt_module_is_block_algorithm_mode\nmcrypt_module_is_block_algorithm_mode(string $mode [, string $lib_dir]) [bool]\nReturns if the specified module is a block algorithm or not. This function\nreturns TRUE if the mode is for use with block algorithms, otherwise it\nreturns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).\n@param mode The mode to check.\n@param lib_dir The optional `lib_dir` parameter can contain the location\nwhere the algorithm module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_is_block_algorithm mcrypt_module_is_block_algorithm(string\n$algorithm [, string $lib_dir]) [bool]\nThis function checks whether the specified algorithm is a block algorithm. This\nfunction returns TRUE if the specified algorithm is a block algorithm,\nor FALSE if it is a stream one.\n@param algorithm The algorithm to check.\n@param lib_dir The optional `lib_dir` parameter can contain the location\nwhere the algorithm module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_is_block_mode mcrypt_module_is_block_mode(string $mode [,\nstring $lib_dir]) [bool]\nReturns if the specified mode outputs blocks or not. This function returns\nTRUE if the mode outputs blocks of bytes or FALSE if it outputs just\nbytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).\n@param mode The mode to check.\n@param lib_dir The optional `lib_dir` parameter can contain the location\nwhere the algorithm module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_module_open mcrypt_module_open(string $algorithm, string\n$algorithm_directory, string $mode, string $mode_directory) [resource]\nOpens the module of the algorithm and the mode to be used. This function\nopens the module of the algorithm and the mode to be used. The name of\nthe algorithm is specified in algorithm, e.g. `&quot;twofish&quot;` or is\none of the MCRYPT_ciphername constants. The module is closed by calling\nmcrypt_module_close().\n@param algorithm The algorithm to be used.\n@param algorithm_directory The `algorithm_directory` parameter is used\nto locate the encryption module. When you supply a directory name, it is\nused. When you set it to an empty string (`&quot;&quot;`), the value set by\nthe `mcrypt.algorithms_dir` php.ini directive is used. When it is not set,\nthe default directory that is used is the one that was compiled into libmcrypt\n(usually /usr/local/lib/libmcrypt).\n@param mode The mode to be used.\n@param mode_directory The `mode_directory` parameter is used to locate\nthe encryption module. When you supply a directory name, it is used. When\nyou set it to an empty string (`&quot;&quot;`), the value set by the\n`mcrypt.modes_dir` php.ini directive is used. When it is not set, the\ndefault directory that is used is the one that was compiled-in into libmcrypt\n(usually /usr/local/lib/libmcrypt).\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see mcrypt_module_close() - Closes the mcrypt module\n@see mcrypt_generic() - This function encrypts data\n@see mdecrypt_generic() - Decrypts data\n@see mcrypt_generic_init() - This function initializes all buffers needed\nfor encryption\n@see mcrypt_generic_deinit() - This function deinitializes an encryption module\n
mcrypt_module_self_test mcrypt_module_self_test(string $algorithm [, string\n$lib_dir]) [bool]\nThis function runs a self test on the specified module. This function runs\nthe self test on the algorithm specified.\n@param algorithm The algorithm to test.\n@param lib_dir The optional `lib_dir` parameter can contain the location\nwhere the algorithm module is on the system.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
mcrypt_ofb mcrypt_ofb(int $cipher, string $key, string $data, int $mode,\nstring $iv) [string]\nEncrypts/decrypts data in OFB mode. The first prototype is when linked against\nlibmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The\n`mode` should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. This function\nshould not be used anymore, see mcrypt_generic() and mdecrypt_generic()\nfor replacements.\n
md5_file md5_file(string $filename [, bool $raw_output=false]) [string]\nCalculates the md5 hash of a given file. Calculates the MD5 hash of the file\nspecified by the `filename` parameter using the &raquo; RSA Data Security,\nInc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a\n32-character hexadecimal number.\n@param filename The filename\n@param raw_output When TRUE, returns the digest in raw binary format with\na length of 16.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see md5() - Calculate the md5 hash of a string\n@see sha1_file() - Calculate the sha1 hash of a file\n@see crc32() - Calculates the crc32 polynomial of a string\n
md5 md5(string $str [, bool $raw_output=false]) [string]\nCalculate the md5 hash of a string. Calculates the MD5 hash of `str` using\nthe &raquo; RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns\nthat hash.\n@param str The string.\n@param raw_output If the optional `raw_output` is set to TRUE, then the md5\ndigest is instead returned in raw binary format with a length of 16.\n@return (PHP 4, PHP 5)\n@see md5_file() - Calculates the md5 hash of a given file\n@see sha1_file() - Calculate the sha1 hash of a file\n@see crc32() - Calculates the crc32 polynomial of a string\n@see sha1() - Calculate the sha1 hash of a string\n@see hash() - Generate a hash value (message digest)\n
mdecrypt_generic mdecrypt_generic(resource $td, string $data) [string]\nDecrypts data. This function decrypts data. Note that the length of the\nreturned string can in fact be longer than the unencrypted string, due to\nthe padding of the data.\n@param td An encryption descriptor returned by mcrypt_module_open()\n@param data Encrypted data.\n@see mcrypt_generic() - This function encrypts data\n@see mcrypt_generic_init() - This function initializes all buffers needed\nfor encryption\n@see mcrypt_generic_deinit() - This function deinitializes an encryption module\n
memcache_debug memcache_debug(bool $on_off) [bool]\nTurn debug output on/off. memcache_debug() turns on debug output if\nparameter `on_off` is equal to TRUE and turns off if it&#039;s FALSE. Note:\nmemcache_debug() is accessible only if PHP was built with --enable-debug\noption and always returns TRUE in this case. Otherwise, this function has\nno effect and always returns FALSE.\n@param on_off Turns debug output on if equals to TRUE. Turns debug output\noff if equals to FALSE.\n@return (PECL memcache >= 0.2.0)\n
memory_get_peak_usage memory_get_peak_usage([bool $real_usage=false]) [int]\nReturns the peak of memory allocated by PHP. Returns the peak of memory,\nin bytes, that&#039;s been allocated to your PHP script.\n@param real_usage Set this to TRUE to get the real size of memory allocated\nfrom system. If not set or FALSE only the memory used by `emalloc()`\nis reported.\n@return (PHP 5 >= 5.2.0)\n@see memory_get_usage() - Returns the amount of memory allocated to PHP\n@see memory_limit\n
memory_get_usage memory_get_usage([bool $real_usage=false]) [int]\nReturns the amount of memory allocated to PHP. Returns the amount of memory,\nin bytes, that&#039;s currently being allocated to your PHP script.\n@param real_usage Set this to TRUE to get the real size of memory allocated\nfrom system. If not set or FALSE only the memory used by `emalloc()`\nis reported.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@see memory_get_peak_usage() - Returns the peak of memory allocated by PHP\n@see memory_limit\n
metaphone metaphone(string $str [, int $phonemes=0]) [string]\nCalculate the metaphone key of a string. Calculates the metaphone key of\n`str`. Similar to soundex() metaphone creates the same key for similar\nsounding words. It&#039;s more accurate than soundex() as it knows the basic\nrules of English pronunciation. The metaphone generated keys are of variable\nlength. Metaphone was developed by Lawrence Philips &lt;lphilips at verity dot\ncom>. It is described in [&quot;Practical Algorithms for Programmers&quot;,\nBinstock &amp; Rex, Addison Wesley, 1995].\n@param str The input string.\n@param phonemes This parameter restricts the returned metaphone key to\n`phonemes` characters in length. The default value of `0` means no restriction.\n@return (PHP 4, PHP 5)\n
method_exists method_exists(mixed $object, string $method_name) [bool]\nChecks if the class method exists. Checks if the class method exists in the\ngiven `object`.\n@param object An object instance or a class name\n@param method_name The method name\n@return (PHP 4, PHP 5)\n@note Note: Using this function will use any registered autoloaders if the\nclass is not already known.\n@see function_exists() - Return TRUE if the given function has been defined\n@see is_callable() - Verify that the contents of a variable can be called\nas a function\n@see class_exists() - Checks if the class has been defined\n
mhash_count mhash_count(void) [int]\nGets the highest available hash ID. Gets the highest available hash ID.\n@return (PHP 4, PHP 5)\n
mhash_get_block_size mhash_get_block_size(int $hash) [int]\nGets the block size of the specified hash. Gets the size of a block of the\nspecified `hash`.\n@param hash The hash ID. One of the MHASH_hashname constants.\n@return (PHP 4, PHP 5)\n
mhash_get_hash_name mhash_get_hash_name(int $hash) [string]\nGets the name of the specified hash. Gets the name of the specified `hash`.\n@param hash The hash ID. One of the MHASH_hashname constants.\n@return (PHP 4, PHP 5)\n
mhash_keygen_s2k mhash_keygen_s2k(int $hash, string $password, string $salt,\nint $bytes) [string]\nGenerates a key. Generates a key according to the given `hash`, using an user\nprovided `password`. This is the Salted S2K algorithm as specified in the\nOpenPGP document (&raquo; RFC 2440). Keep in mind that user supplied passwords\nare not really suitable to be used as keys in cryptographic algorithms,\nsince users normally choose keys they can write on keyboard. These passwords\nuse only 6 to 7 bits per character (or less). It is highly recommended to\nuse some kind of transformation (like this function) to the user supplied key.\n@param hash The hash ID used to create the key. One of the MHASH_hashname\nconstants.\n@param password An user supplied password.\n@param salt Must be different and random enough for every key you generate\nin order to create different keys. Because `salt` must be known when you\ncheck the keys, it is a good idea to append the key to it. Salt has a fixed\nlength of 8 bytes and will be padded with zeros if you supply less bytes.\n@param bytes The key length, in bytes.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
mhash mhash(int $hash, string $data [, string $key]) [string]\nComputes hash. mhash() applies a hash function specified by `hash` to the\n`data`.\n@param hash The hash ID. One of the MHASH_hashname constants.\n@param data The user input, as a string.\n@param key If specified, the function will return the resulting HMAC\ninstead. HMAC is keyed hashing for message authentication, or simply a message\ndigest that depends on the specified key. Not all algorithms supported in\nmhash can be used in HMAC mode.\n@return (PHP 4, PHP 5)\n
microtime microtime([bool $get_as_float]) [mixed]\nReturn current Unix timestamp with microseconds. microtime() returns the\ncurrent Unix timestamp with microseconds. This function is only available\non operating systems that support the gettimeofday() system call.\n@param get_as_float If used and set to TRUE, microtime() will return a float\ninstead of a string, as described in the return values section below.\n@return (PHP 4, PHP 5)\n@see time() - Return current Unix timestamp\n
mime_content_type mime_content_type(string $filename) [string]\nDetect MIME Content-type for a file (deprecated). Returns the MIME content\ntype for a file as determined by using information from the magic.mime file.\n@param filename Path to the tested file.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see Fileinfo for a replacement\n
min min(array $values) [mixed]\nFind lowest value. If the first and only parameter is an array, min() returns\nthe lowest value in that array. If at least two parameters are provided, min()\nreturns the smallest of these values. Note: PHP will evaluate a non-numeric\nstring as `0` if compared to integer, but still return the string if it&#039;s\nseen as the numerically lowest value. If multiple arguments evaluate to `0`,\nmin() will return the lowest alphanumerical string value if any strings are\ngiven, else a numeric `0` is returned.\n@param values An array containing the values.\n@return (PHP 4, PHP 5)\n@see max() - Find highest value\n@see count() - Count all elements in an array, or properties in an object\n
ming_keypress ming_keypress(string $char) [int]\nReturns the action flag for keyPress(char).\n
ming_setcubicthreshold ming_setcubicthreshold(int $threshold) [void]\nSet cubic threshold. Sets the threshold error for drawing cubic beziers.\n@param threshold The Threshold. Lower is more accurate, hence larger file size.\n@return (PHP 4 >= 4.0.5, PHP 5, PECL ming SVN)\n
ming_setscale ming_setscale(float $scale) [void]\nSet the global scaling factor.. Sets the scale of the output SWF. Inside\nthe SWF file, coordinates are measured in TWIPS, rather than PIXELS. There\nare 20 TWIPS in 1 pixel.\n@param scale The scale to be set.\n@return (PHP 4 >= 4.0.5, PHP 5, PECL ming SVN)\n
ming_setswfcompression ming_setswfcompression(int $level) [void]\nSets the SWF output compression. Sets the SWF output compression level.\n@param level The new compression level. Should be a value between 1 and\n9 inclusive.\n@return (PHP 5.2.1-5.3.0, PECL ming SVN)\n
ming_useconstants ming_useconstants(int $use) [void]\nUse constant pool.\n@return (PHP 5 &lt;= 5.3.0, PECL ming SVN)\n
ming_useswfversion ming_useswfversion(int $version) [void]\nSets the SWF version. Sets the SWF version to be used in the movie. This\naffect the bahaviour of Action Script.\n@param version SWF version to use.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.3.0, PECL ming SVN)\n
mkdir mkdir(string $pathname [, int $mode=0777 [, bool $recursive=false [,\nresource $context]]]) [bool]\nMakes directory. Attempts to create the directory specified by pathname.\n@param pathname The directory path.\n@param mode The mode is 0777 by default, which means the widest possible\naccess. For more information on modes, read the details on the chmod()\npage. Note: `mode` is ignored on Windows. Note that you probably want to\nspecify the mode as an octal number, which means it should have a leading\nzero. The mode is also modified by the current umask, which you can change\nusing umask().\n@param recursive Allows the creation of nested directories specified in the\n`pathname`. Defaults to FALSE.\n@param context Note: Context support was added with PHP 5.0.0. For a\ndescription of `contexts`, refer to Stream Functions.\n@return (PHP 4, PHP 5)\n@note Note: When safe mode is enabled, PHP checks whether the directory in\nwhich the script is operating has the same UID (owner) as the script that\nis being executed.\n@see is_dir() - Tells whether the filename is a directory\n@see rmdir() - Removes directory\n
mktime mktime([int $hour=date(&quot;H&quot;) [, int $minute=date(&quot;i&quot;)\n[, int $second=date(&quot;s&quot;) [, int $month=date(&quot;n&quot;)\n[, int $day=date(&quot;j&quot;) [, int $year=date(&quot;Y&quot;) [, int\n$is_dst=-1]]]]]]]) [int]\nGet Unix timestamp for a date. Returns the Unix timestamp corresponding\nto the arguments given. This timestamp is a long integer containing the\nnumber of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and\nthe time specified. Arguments may be left out in order from right to left;\nany arguments thus omitted will be set to the current value according to\nthe local date and time.\n@param hour The number of the hour relevant to the start of the day determined\nby `month`, `day` and `year`. Negative values reference the hour before\nmidnight of the day in question. Values greater than 23 reference the\nappropriate hour in the following day(s).\n@param minute The number of the minute relevant to the start of the\n`hour`. Negative values reference the minute in the previous hour. Values\ngreater than 59 reference the appropriate minute in the following hour(s).\n@param second The number of seconds relevant to the start of the\n`minute`. Negative values reference the second in the previous minute. Values\ngreater than 59 reference the appropriate second in the following minute(s).\n@param month The number of the month relevant to the end of the previous\nyear. Values 1 to 12 reference the normal calendar months of the year in\nquestion. Values less than 1 (including negative values) reference the months\nin the previous year in reverse order, so 0 is December, -1 is November,\netc. Values greater than 12 reference the appropriate month in the following\nyear(s).\n@param day The number of the day relevant to the end of the previous\nmonth. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the\nnormal days in the relevant month. Values less than 1 (including negative\nvalues) reference the days in the previous month, so 0 is the last day of\nthe previous month, -1 is the day before that, etc. Values greater than the\nnumber of days in the relevant month reference the appropriate day in the\nfollowing month(s).\n@param year The number of the year, may be a two or four digit value, with\nvalues between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. On systems\nwhere time_t is a 32bit signed integer, as most common today, the valid\nrange for `year` is somewhere between 1901 and 2038. However, before PHP\n5.1.0 this range was limited from 1970 to 2038 on some systems (e.g. Windows).\n@param is_dst This parameter can be set to 1 if the time is during daylight\nsavings time (DST), 0 if it is not, or -1 (the default) if it is unknown\nwhether the time is within daylight savings time or not. If it&#039;s unknown,\nPHP tries to figure it out itself. This can cause unexpected (but not\nincorrect) results. Some times are invalid if DST is enabled on the system\nPHP is running on or `is_dst` is set to 1. If DST is enabled in e.g. 2:00,\nall times between 2:00 and 3:00 are invalid and mktime() returns an undefined\n(usually negative) value. Some systems (e.g. Solaris 8) enable DST at midnight\nso time 0:30 of the day when DST is enabled is evaluated as 23:30 of the\nprevious day. Note: As of PHP 5.1.0, this parameter became deprecated. As\na result, the new timezone handling features should be used instead.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.1, when called with no arguments, mktime() throws\nan E_STRICT notice: use the time() function instead.\n@see checkdate() - Validate a Gregorian date\n@see gmmktime() - Get Unix timestamp for a GMT date\n@see date() - Format a local time/date\n@see time() - Return current Unix timestamp\n
money_format money_format(string $format, float $number) [string]\nFormats a number as a currency string. money_format() returns a formatted\nversion of `number`. This function wraps the C library function strfmon(), with\nthe difference that this implementation converts only one number at a time.\n@param format The format specification consists of the following sequence:\na `%` character optional flags optional field width optional left precision\noptional right precision a required conversion character Flags One or more\nof the optional flags below can be used: `=`f The character `=` followed by\na (single byte) character f to be used as the numeric fill character. The\ndefault fill character is space.\n@param ^ Disable the use of grouping characters (as defined by the current\nlocale).\n@param + or `(` Specify the formatting style for positive and negative\nnumbers. If `+` is used, the locale&#039;s equivalent for `+` and `-` will\nbe used. If `(` is used, negative amounts are enclosed in parenthesis. If\nno specification is given, the default is `+`.\n@param ! Suppress the currency symbol from the output string.\n@param - If present, it will make all fields left-justified (padded to the\nright), as opposed to the default which is for the fields to be right-justified\n(padded to the left).\n@param w A decimal digit string specifying a minimum field width. Field will\nbe right-justified unless the flag `-` is used. Default value is 0 (zero).\n@param #n The maximum number of digits (n) expected to the left of the decimal\ncharacter (e.g. the decimal point). It is used usually to keep formatted\noutput aligned in the same columns, using the fill character if the number of\ndigits is less than n. If the number of actual digits is bigger than n, then\nthis specification is ignored. If grouping has not been suppressed using the\n`^` flag, grouping separators will be inserted before the fill characters (if\nany) are added. Grouping separators will not be applied to fill characters,\neven if the fill character is a digit. To ensure alignment, any characters\nappearing before or after the number in the formatted output such as currency\nor sign symbols are padded as necessary with space characters to make their\npositive and negative formats an equal length.\n@param .p A period followed by the number of digits (p) after the decimal\ncharacter. If the value of p is 0 (zero), the decimal character and the\ndigits to its right will be omitted. If no right precision is included,\nthe default will dictated by the current local in use. The amount being\nformatted is rounded to the specified number of digits prior to formatting.\n@param i The number is formatted according to the locale&#039;s international\ncurrency format (e.g. for the USA locale: USD 1,234.56).\n@param n The number is formatted according to the locale&#039;s national\ncurrency format (e.g. for the de_DE locale: EU1.234,56).\n@param % Returns the `%` character.\n@param number The number to be formatted.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: The function money_format() is only defined if the system has\nstrfmon capabilities. For example, Windows does not, so money_format()\nis undefined in Windows.\n@note Note: The LC_MONETARY category of the locale settings, affects the\nbehavior of this function. Use setlocale() to set to the appropriate default\nlocale before using this function.\n@see setlocale() - Set locale information\n@see sscanf() - Parses input from a string according to a format\n@see sprintf() - Return a formatted string\n@see printf() - Output a formatted string\n@see number_format() - Format a number with grouped thousands\n
move_uploaded_file move_uploaded_file(string $filename, string $destination)\n[bool]\nMoves an uploaded file to a new location. This function checks to ensure\nthat the file designated by `filename` is a valid upload file (meaning that\nit was uploaded via PHP&#039;s HTTP POST upload mechanism). If the file is\nvalid, it will be moved to the filename given by `destination`. This sort\nof check is especially important if there is any chance that anything done\nwith uploaded files could reveal their contents to the user, or even to\nother users on the same system.\n@param filename The filename of the uploaded file.\n@param destination The destination of the moved file.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@note Note: move_uploaded_file() is both safe mode and open_basedir\naware. However, restrictions are placed only on the `destination` path as\nto allow the moving of uploaded files in which `filename` may conflict with\nsuch restrictions. move_uploaded_file() ensures the safety of this operation\nby allowing only those files uploaded through PHP to be moved.\n@see is_uploaded_file() - Tells whether the file was uploaded via HTTP POST\n@see rename() - Renames a file or directory\n@see See Handling file uploads for a simple usage example\n
mqseries_back mqseries_back(resource $hconn, resource &$compCode, resource\n&$reason) [void]\nMQSeries MQBACK. The mqseries_back() (MQBACK) call indicates to the queue\nmanager that all the message gets and puts that have occurred since the last\nsyncpoint are to be backed out. Messages put as part of a unit of work are\ndeleted; messages retrieved as part of a unit of work are reinstated on the\nqueue. Using mqseries_back() only works in conjunction with mqseries_begin()\nand only function when connecting directly to a Queueu manager. Not via the\nmqclient interface.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@note Note: mqseries_back() will not function when using MQSeries Client to\nconnect to a Queueu Manager.\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_begin() - MQseries MQBEGIN\n
mqseries_begin mqseries_begin(resource $hconn, array $beginOptions, resource\n&$compCode, resource &$reason) [void]\nMQseries MQBEGIN. The mqseries_begin() (MQBEGIN) call begins a unit of work\nthat is coordinated by the queue manager, and that may involve external\nresource managers. Using mqseries_begin() starts the unit of work. Either\nmqseries_back() or mqseries_cmit() ends the unit of work.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@note Note: mqseries_begin() will not function when using MQSeries Client\nto connect to a Queueu Manager.\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_back() - MQSeries MQBACK\n@see mqseries_cmit() - MQSeries MQCMIT\n
mqseries_close mqseries_close(resource $hconn, resource $hobj, int $options,\nresource &$compCode, resource &$reason) [void]\nMQSeries MQCLOSE. The mqseries_close() (MQCLOSE) call relinquishes access\nto an object, and is the inverse of the mqseries_open() (MQOPEN) call.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `hObj` Object handle. This handle represents the object to be used.\n@param  `options`\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_open() - MQSeries MQOPEN\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n
mqseries_cmit mqseries_cmit(resource $hconn, resource &$compCode, resource\n&$reason) [void]\nMQSeries MQCMIT. The mqseries_cmit() (MQCMIT) call indicates to the queue\nmanager that the application has reached a syncpoint, and that all of the\nmessage gets and puts that have occurred since the last syncpoint are to be\nmade permanent. Messages put as part of a unit of work are made available to\nother applications; messages retrieved as part of a unit of work are deleted.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@note Note: mqseries_back() will not function when using MQSeries Client to\nconnect to a Queueu Manager.\n@see mqseries_begin() - MQseries MQBEGIN\n@see mqseries_back() - MQSeries MQBACK\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n
mqseries_conn mqseries_conn(string $qManagerName, resource &$hconn, resource\n&$compCode, resource &$reason) [void]\nMQSeries MQCONN. The mqseries_conn() (MQCONN) call connects an application\nprogram to a queue manager. It provides a queue manager connection handle,\nwhich is used by the application on subsequent message queuing calls.\n@param  `qManagerName` Name of queue manager. Name of the queue manager the\napplication wishes to connect.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_disc() - MQSeries MQDISC\n
mqseries_connx mqseries_connx(string $qManagerName, array &$connOptions,\nresource &$hconn, resource &$compCode, resource &$reason) [void]\nMQSeries MQCONNX. The mqseries_connx() (MQCONNX) call connects an application\nprogram to a queue manager. It provides a queue manager connection handle,\nwhich is used by the application on subsequent MQ calls.\n@param  `qManagerName` Name of queue manager. Name of the queue manager the\napplication wishes to connect.\n@param  `connOps` Options that control the action of function See also the\nMQCNO structure.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_disc() - MQSeries MQDISC\n
mqseries_disc mqseries_disc(resource $hconn, resource &$compCode, resource\n&$reason) [void]\nMQSeries MQDISC. The mqseries_disc() (MQDISC) call breaks the connection\nbetween the queue manager and the application program, and is the inverse\nof the mqseries_conn() (MQCONN) or mqseries_connx() (MQCONNX) call.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n
mqseries_get mqseries_get(resource $hConn, resource $hObj, array &$md,\narray &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource\n&$compCode, resource &$reason) [void]\nMQSeries MQGET. The mqseries_get() (MQGET) call retrieves a message from a\nlocal queue that has been opened using the mqseries_open() (MQOPEN) call\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `hObj` Object handle. This handle represents the object to be used.\n@param  `md` Message descriptor (MQMD).\n@param  `gmo` Get message options (MQGMO).\n@param  `bufferLength` Expected length of the result buffer\n@param  `msg` Buffer holding the message that was retrieved from the object.\n@param  `data_length` Actual buffer length\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_open() - MQSeries MQOPEN\n@see mqseries_put() - MQSeries MQPUT\n
mqseries_inq mqseries_inq(resource $hconn, resource $hobj, int $selectorCount,\narray $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength,\nresource &$charAttr, resource &$compCode, resource &$reason) [void]\nMQSeries MQINQ. The mqseries_inq() (MQINQ) call returns an array of integers\nand a set of character strings containing the attributes of an object.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `hObj` Object handle. This handle represents the object to be used.\n@param  `selectorCount` Count of selectors.\n@param  `selectors` Array of attribute selectors.\n@param  `intAttrLength` Count of integer attributes.\n@param  `intAttr` Array of integer attributes.\n@param  `charAttrLength` Length of character attributes buffer.\n@param  `charAttr` Character attributes.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_open() - MQSeries MQOPEN\n
mqseries_open mqseries_open(resource $hconn, array &$objDesc, int $option,\nresource &$hobj, resource &$compCode, resource &$reason) [void]\nMQSeries MQOPEN. The mqseries_open() (MQOPEN) call establishes access to\nan object.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `objDesc` Object descriptor. (MQOD)\n@param  `options` Options that control the action of the function.\n@param  `hObj` Object handle. This handle represents the object to be used.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_close() - MQSeries MQCLOSE\n
mqseries_put mqseries_put(resource $hConn, resource $hObj, array &$md,\narray &$pmo, string $message, resource &$compCode, resource &$reason) [void]\nMQSeries MQPUT. The mqseries_put() (MQPUT) call puts a message on a queue\nor distribution list. The queue or distribution list must already be open.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `hObj` Object handle. This handle represents the object to be used.\n@param  `md` Message descriptor (MQMD).\n@param  `pmo` Put message options (MQPMO).\n@param  `message` The actual message to put onto the queue.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_open() - MQSeries MQOPEN\n@see mqseries_get() - MQSeries MQGET\n
mqseries_put1 mqseries_put1(resource $hconn, resource &$objDesc, resource\n&$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource\n&$reason) [void]\nMQSeries MQPUT1. The mqseries_put1() (MQPUT1) call puts one message on a\nqueue. The queue need not be open.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `objDesc` Object descriptor. (MQOD) This is a structure which\nidentifies the queue to which the message is added.\n@param  `msgDesc` Message descriptor (MQMD).\n@param  `pmo` Put message options (MQPMO).\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_conn() - MQSeries MQCONN\n@see mqseries_connx() - MQSeries MQCONNX\n@see mqseries_open() - MQSeries MQOPEN\n@see mqseries_get() - MQSeries MQGET\n
mqseries_set mqseries_set(resource $hconn, resource $hobj, int $selectorcount,\narray $selectors, int $intattrcount, array $intattrs, int $charattrlength,\narray $charattrs, resource &$compCode, resource &$reason) [void]\nMQSeries MQSET. The mqseries_set() (MQSET) call is used to change the\nattributes of an object represented by a handle. The object must be a queue.\n@param  `hConn` Connection handle. This handle represents the connection to\nthe queue manager.\n@param  `compCode` Completion code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n@see mqseries_inq() - MQSeries MQINQ\n
mqseries_strerror mqseries_strerror(int $reason) [string]\nReturns the error message corresponding to a result code\n(MQRC).. mqseries_strerror() returns the message that correspond to the\nreason result code.\n@param  `reason` Reason code qualifying the compCode.\n@return (PECL mqseries >= 0.10.0)\n
msession_connect msession_connect(string $host, string $port) [bool]\nConnect to msession server.\n
msession_count msession_count(void) [int]\nGet session count.\n
msession_create msession_create(string $session [, string $classname [,\nstring $data]]) [bool]\nCreate a session.\n
msession_destroy msession_destroy(string $name) [bool]\nDestroy a session.\n
msession_disconnect msession_disconnect(void) [void]\nClose connection to msession server.\n
msession_find msession_find(string $name, string $value) [array]\nFind all sessions with name and value.\n
msession_get_array msession_get_array(string $session) [array]\nGet array of msession variables.\n
msession_get_data msession_get_data(string $session) [string]\nGet data session unstructured data.\n
msession_get msession_get(string $session, string $name, string $value)\n[string]\nGet value from session.\n
msession_inc msession_inc(string $session, string $name) [string]\nIncrement value in session.\n
msession_list msession_list(void) [array]\nList all sessions.\n
msession_listvar msession_listvar(string $name) [array]\nList sessions with variable. Used for searching sessions with common\nattributes.\n@param name The name being searched.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.1.2)\n
msession_lock msession_lock(string $name) [int]\nLock a session.\n
msession_plugin msession_plugin(string $session, string $val [, string $param])\n[string]\nCall an escape function within the msession personality plugin.\n
msession_randstr msession_randstr(int $param) [string]\nGet random string.\n
msession_set_array msession_set_array(string $session, array $tuples) [void]\nSet msession variables from an array.\n
maxdb_get_metadata maxdb_get_metadata\nAlias of maxdb_stmt_result_metadata.\n
maxdb_get_proto_info maxdb_get_proto_info(resource $link) [int]\nReturns the version of the MaxDB protocol used. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_host_info() - Returns a string representing the type of\nconnection used\n
maxdb_get_server_info maxdb_get_server_info(resource $link) [string]\nReturns the version of the MaxDB server. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_client_info() - Returns the MaxDB client version as a string\n@see maxdb_get_client_version() - Get MaxDB client info\n@see maxdb_get_server_version() - Returns the version of the MaxDB server\nas an integer\n
maxdb_get_server_version maxdb_get_server_version(resource $link) [int]\nReturns the version of the MaxDB server as an integer. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_client_info() - Returns the MaxDB client version as a string\n@see maxdb_get_client_version() - Get MaxDB client info\n@see maxdb_get_server_info() - Returns the version of the MaxDB server\n
maxdb_info maxdb_info(resource $link) [string]\nRetrieves information about the most recently executed query. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_affected_rows() - Gets the number of affected rows in a previous\nMaxDB operation\n@see maxdb_warning_count() - Returns the number of warnings from the last\nquery for the given link\n@see maxdb_num_rows() - Gets the number of rows in a result\n
maxdb_init maxdb_init(void) [resource]\nInitializes MaxDB and returns an resource for use with\nmaxdb_real_connect. Allocates or initializes a MaxDB resource suitable for\nmaxdb_options() and maxdb_real_connect(). Note: Any subsequent calls to any\nmaxdb function (except maxdb_options()) will fail until maxdb_real_connect()\nwas called.\n@return (PECL maxdb >= 1.0)\n@see maxdb_options() - Set options\n@see maxdb_close() - Closes a previously opened database connection\n@see maxdb_real_connect() - Opens a connection to a MaxDB server\n@see maxdb_connect() - Open a new connection to the MaxDB server\n
maxdb_insert_id maxdb_insert_id(resource $link) [mixed]\nReturns the auto generated id used in the last query. Object oriented style\n@return (PECL maxdb >= 1.0)\n
maxdb_kill maxdb_kill(resource $link, int $processid) [bool]\nDisconnects from a MaxDB server. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_thread_id() - Returns the thread ID for the current connection\n
maxdb_master_query maxdb_master_query(resource $link, string $query) [bool]\nEnforce execution of a query on the master in a master/slave setup.\n
maxdb_more_results maxdb_more_results(resource $link) [bool]\nCheck if there any more query results from a multi query. maxdb_more_results()\nindicates if one or more result sets are available from a previous call\nto maxdb_multi_query().\n@return (PECL maxdb >= 1.0)\n@see maxdb_multi_query() - Performs a query on the database\n@see maxdb_next_result() - Prepare next result from multi_query\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_use_result() - Initiate a result set retrieval\n
maxdb_multi_query maxdb_multi_query(resource $link, string $query) [bool]\nPerforms a query on the database. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_use_result() - Initiate a result set retrieval\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_next_result() - Prepare next result from multi_query\n@see maxdb_more_results() - Check if there any more query results from a\nmulti query\n
maxdb_next_result maxdb_next_result(resource $link) [bool]\nPrepare next result from multi_query. Since multiple queries are not yet\nsupported, maxdb_next_result() returns always FALSE.\n@return (PECL maxdb >= 1.0)\n@see maxdb_multi_query() - Performs a query on the database\n@see maxdb_more_results() - Check if there any more query results from a\nmulti query\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_use_result() - Initiate a result set retrieval\n
maxdb_num_fields maxdb_num_fields(resource $result) [int]\nGet the number of fields in a result. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_field() - Returns the next field in the result set\n
maxdb_num_rows maxdb_num_rows(resource $result) [int]\nGets the number of rows in a result. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_affected_rows() - Gets the number of affected rows in a previous\nMaxDB operation\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_use_result() - Initiate a result set retrieval\n@see maxdb_query() - Performs a query on the database\n
maxdb_options maxdb_options(resource $link, int $option, mixed $value) [bool]\nSet options. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_init() - Initializes MaxDB and returns an resource for use with\nmaxdb_real_connect\n@see maxdb_real_connect() - Opens a connection to a MaxDB server\n
maxdb_param_count maxdb_param_count\nAlias of maxdb_stmt_param_count.\n
maxdb_ping maxdb_ping(resource $link) [bool]\nPings a server connection, or tries to reconnect if the connection has gone\ndown. Object oriented style\n@return (PECL maxdb >= 1.0)\n
maxdb_prepare maxdb_prepare(resource $link, string $query) [resource]\nPrepare an SQL statement for execution. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_execute() - Executes a prepared Query\n@see maxdb_stmt_fetch() - Fetch results from a prepared statement into the\nbound variables\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n@see maxdb_stmt_bind_result() - Binds variables to a prepared statement for\nresult storage\n@see maxdb_stmt_close() - Closes a prepared statement\n
maxdb_query maxdb_query(resource $link, string $query [, int $resultmode])\n[mixed]\nPerforms a query on the database. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_real_query() - Execute an SQL query\n@see maxdb_multi_query() - Performs a query on the database\n@see maxdb_free_result() - Frees the memory associated with a result\n
maxdb_real_connect maxdb_real_connect(resource $link [, string $hostname\n[, string $username [, string $passwd [, string $dbname [, int $port=0 [,\nstring $socket]]]]]]) [bool]\nOpens a connection to a MaxDB server. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_init() - Initializes MaxDB and returns an resource for use with\nmaxdb_real_connect\n@see maxdb_options() - Set options\n@see maxdb_ssl_set() - Used for establishing secure connections using SSL\n@see maxdb_close() - Closes a previously opened database connection\n
maxdb_real_escape_string maxdb_real_escape_string(resource $link, string\n$escapestr) [string]\nEscapes special characters in a string for use in an SQL statement, taking\ninto account the current charset of the connection. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_character_set_name() - Returns the default character set for the\ndatabase connection\n
maxdb_real_query maxdb_real_query(resource $link, string $query) [bool]\nExecute an SQL query. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_query() - Performs a query on the database\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_use_result() - Initiate a result set retrieval\n
maxdb_report maxdb_report(int $flags) [bool]\nEnables or disables internal report functions.\n@param flags One of the `MAXDB_REPORT_XXX` constants.\n@return (PECL maxdb 1.0)\n
maxdb_rollback maxdb_rollback(resource $link) [bool]\nRolls back current transaction. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_commit() - Commits the current transaction\n@see maxdb_autocommit() - Turns on or off auto-commiting database modifications\n
maxdb_rpl_parse_enabled maxdb_rpl_parse_enabled(resource $link) [int]\nCheck if RPL parse is enabled.\n
maxdb_rpl_probe maxdb_rpl_probe(resource $link) [bool]\nRPL probe.\n
maxdb_rpl_query_type maxdb_rpl_query_type(resource $link) [int]\nReturns RPL query type. Object oriented style\n
maxdb_select_db maxdb_select_db(resource $link, string $dbname) [bool]\nSelects the default database for database queries. The maxdb_select_db()\nfunction selects the default database (specified by the `dbname` parameter)\nto be used when performing queries against the database connection represented\nby the `link` parameter. Note: This function should only be used to change\nthe default database for the connection. You can select the default database\nwith 4th parameter in maxdb_connect().\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_real_connect() - Opens a connection to a MaxDB server\n
maxdb_send_long_data maxdb_send_long_data\nAlias of maxdb_stmt_send_long_data.\n
maxdb_send_query maxdb_send_query(resource $link, string $query) [bool]\nSend the query and return. Object oriented style\n
maxdb_server_end maxdb_server_end(void) [void]\nShut down the embedded server.\n
maxdb_server_init maxdb_server_init([array $server [, array $groups]]) [bool]\nInitialize embedded server.\n
maxdb_set_opt maxdb_set_opt\nAlias of maxdb_options.\n
maxdb_sqlstate maxdb_sqlstate(resource $link) [string]\nReturns the SQLSTATE error from previous MaxDB operation. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_errno() - Returns the error code for the most recent function call\n@see maxdb_error() - Returns a string description of the last error\n
maxdb_ssl_set maxdb_ssl_set(resource $link, string $key, string $cert,\nstring $ca, string $capath, string $cipher) [bool]\nUsed for establishing secure connections using SSL. Object oriented style\n
maxdb_stat maxdb_stat(resource $link) [string]\nGets the current system status. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_server_info() - Returns the version of the MaxDB server\n
maxdb_stmt_affected_rows maxdb_stmt_affected_rows(resource $stmt) [int]\nReturns the total number of rows changed, deleted, or\n  inserted by the last executed statement. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_num_rows() - Return the number of rows in statements result set\n@see maxdb_prepare() - Prepare an SQL statement for execution\n
maxdb_stmt_bind_param maxdb_stmt_bind_param(resource $stmt, string $types,\nmixed &$var1 [, mixed &$...]) [bool]\nBinds variables to a prepared statement as parameters. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_bind_result() - Binds variables to a prepared statement for\nresult storage\n@see maxdb_stmt_execute() - Executes a prepared Query\n@see maxdb_stmt_fetch() - Fetch results from a prepared statement into the\nbound variables\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_send_long_data() - Send data in blocks\n@see maxdb_stmt_errno() - Returns the error code for the most recent\nstatement call\n@see maxdb_stmt_error() - Returns a string description for last statement error\n
maxdb_stmt_bind_result maxdb_stmt_bind_result(resource $stmt, mixed &$var1\n[, mixed &$...]) [bool]\nBinds variables to a prepared statement for result storage. Object oriented\nstyle\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n@see maxdb_stmt_execute() - Executes a prepared Query\n@see maxdb_stmt_fetch() - Fetch results from a prepared statement into the\nbound variables\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_init() - Initializes a statement and returns an resource\nfor use with maxdb_stmt_prepare\n@see maxdb_stmt_errno() - Returns the error code for the most recent\nstatement call\n@see maxdb_stmt_error() - Returns a string description for last statement error\n
maxdb_stmt_close_long_data maxdb_stmt_close_long_data(resource $stmt, int\n$param_nr) [bool]\nEnds a sequence of maxdb_stmt_send_long_data. Object oriented style\n@return (PECL maxdb 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n
maxdb_stmt_close maxdb_stmt_close(resource $stmt) [bool]\nCloses a prepared statement. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n
maxdb_stmt_data_seek maxdb_stmt_data_seek(resource $statement, int $offset)\n[bool]\nSeeks to an arbitray row in statement result set. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n
maxdb_stmt_errno maxdb_stmt_errno(resource $stmt) [int]\nReturns the error code for the most recent statement call. Object oriented\nstyle\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_error() - Returns a string description for last statement error\n@see maxdb_stmt_sqlstate() - Returns SQLSTATE error from previous statement\noperation\n
maxdb_stmt_error maxdb_stmt_error(resource $stmt) [string]\nReturns a string description for last statement error. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_errno() - Returns the error code for the most recent\nstatement call\n@see maxdb_stmt_sqlstate() - Returns SQLSTATE error from previous statement\noperation\n
maxdb_stmt_execute maxdb_stmt_execute(resource $stmt) [bool]\nExecutes a prepared Query. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n
maxdb_stmt_fetch maxdb_stmt_fetch(resource $stmt) [bool]\nFetch results from a prepared statement into the bound variables. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_errno() - Returns the error code for the most recent\nstatement call\n@see maxdb_stmt_error() - Returns a string description for last statement error\n@see maxdb_stmt_bind_result() - Binds variables to a prepared statement for\nresult storage\n
maxdb_stmt_free_result maxdb_stmt_free_result(resource $stmt) [void]\nFrees stored result memory for the given statement handle. Object oriented\nstyle\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_store_result() - Transfers a result set from a prepared\nstatement\n
maxdb_stmt_init maxdb_stmt_init(resource $link) [resource]\nInitializes a statement and returns an resource for use with\nmaxdb_stmt_prepare. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_prepare() - Prepare an SQL statement for execution\n
maxdb_stmt_num_rows maxdb_stmt_num_rows(resource $stmt) [int]\nReturn the number of rows in statements result set. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_affected_rows() - Returns the total number of rows changed,\ndeleted, or inserted by the last executed statement\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_store_result() - Transfers a result set from a prepared\nstatement\n
maxdb_stmt_param_count maxdb_stmt_param_count(resource $stmt) [int]\nReturns the number of parameter for the given statement. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n
maxdb_stmt_prepare maxdb_stmt_prepare(resource $stmt, string $query) [bool]\nPrepare an SQL statement for execution. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_init() - Initializes a statement and returns an resource\nfor use with maxdb_stmt_prepare\n@see maxdb_stmt_execute() - Executes a prepared Query\n@see maxdb_stmt_fetch() - Fetch results from a prepared statement into the\nbound variables\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n@see maxdb_stmt_bind_result() - Binds variables to a prepared statement for\nresult storage\n@see maxdb_stmt_close() - Closes a prepared statement\n
maxdb_stmt_reset maxdb_stmt_reset(resource $stmt) [bool]\nResets a prepared statement. Object oriented style\n
maxdb_stmt_result_metadata maxdb_stmt_result_metadata(resource $stmt)\n[resource]\nReturns result set metadata from a prepared statement. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_free_result() - Frees the memory associated with a result\n
maxdb_stmt_send_long_data maxdb_stmt_send_long_data(resource $stmt, int\n$param_nr, string $data) [bool]\nSend data in blocks. Object oriented style\n@return (PECL maxdb 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_bind_param() - Binds variables to a prepared statement\nas parameters\n
maxdb_stmt_sqlstate maxdb_stmt_sqlstate(resource $stmt) [string]\nReturns SQLSTATE error from previous statement operation. Returns a string\ncontaining the SQLSTATE error code for the most recently invoked prepared\nstatement function that can succeed or fail. The error code consists of five\ncharacters. `&#039;00000&#039;` means no error. The values are specified by\nANSI SQL and ODBC. Note: Note that not all MaxDB errors are yet mapped to\nSQLSTATE&#039;s. The value `HY000` (general error) is used for unmapped errors.\n@return (PECL maxdb >= 1.0)\n@see maxdb_stmt_errno() - Returns the error code for the most recent\nstatement call\n@see maxdb_stmt_error() - Returns a string description for last statement error\n
maxdb_stmt_store_result maxdb_stmt_store_result(resource $stmt) [bool]\nTransfers a result set from a prepared statement. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_prepare() - Prepare an SQL statement for execution\n@see maxdb_stmt_result_metadata() - Returns result set metadata from a\nprepared statement\n@see maxdb_fetch() - Alias of maxdb_stmt_fetch\n
maxdb_store_result maxdb_store_result(resource $link) [resource]\nTransfers a result set from the last query. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_real_query() - Execute an SQL query\n@see maxdb_use_result() - Initiate a result set retrieval\n
maxdb_thread_id maxdb_thread_id(resource $link) [int]\nReturns the thread ID for the current connection. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_kill() - Disconnects from a MaxDB server\n
maxdb_thread_safe maxdb_thread_safe(void) [bool]\nReturns whether thread safety is given or not. maxdb_thread_safe() indicates\nwhether the client library is compiled as thread-safe.\n@return (PECL maxdb >= 7.6.06.04)\n
maxdb_use_result maxdb_use_result(resource $link) [resource]\nInitiate a result set retrieval. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_real_query() - Execute an SQL query\n@see maxdb_store_result() - Transfers a result set from the last query\n
maxdb_warning_count maxdb_warning_count(resource $link) [int]\nReturns the number of warnings from the last query for the given link. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_errno() - Returns the error code for the most recent function call\n@see maxdb_error() - Returns a string description of the last error\n@see maxdb_sqlstate() - Returns the SQLSTATE error from previous MaxDB\noperation\n
mb_check_encoding mb_check_encoding([string $var=NULL [, string\n$encoding=mb_internal_encoding()]]) [bool]\nCheck if the string is valid for the specified encoding. Checks if the\nspecified byte stream is valid for the specified encoding. It is useful to\nprevent so-called &quot;Invalid Encoding Attack&quot;.\n@param var The byte stream to check. If it is omitted, this function checks\nall the input from the beginning of the request.\n@param encoding The expected encoding.\n@return (PHP 4 >= 4.4.3, PHP 5 >= 5.1.3)\n
mb_convert_case mb_convert_case(string $str, int $mode=MB_CASE_UPPER [,\nstring $encoding=mb_internal_encoding()]) [string]\nPerform case folding on a string. Performs case folding on a string, converted\nin the way specified by `mode`.\n@param str The string being converted.\n@param mode The mode of the conversion. It can be one of MB_CASE_UPPER,\nMB_CASE_LOWER, or MB_CASE_TITLE.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mb_strtolower() - Make a string lowercase\n@see mb_strtoupper() - Make a string uppercase\n@see strtolower() - Make a string lowercase\n@see strtoupper() - Make a string uppercase\n@see ucfirst() - Make a string's first character uppercase\n@see ucwords() - Uppercase the first character of each word in a string\n
mb_convert_encoding mb_convert_encoding(string $str, string $to_encoding [,\nmixed $from_encoding]) [string]\nConvert character encoding. Converts the character encoding of string `str`\nto `to_encoding` from optionally `from_encoding`.\n@param str The string being encoded.\n@param to_encoding The type of encoding that `str` is being converted to.\n@param from_encoding Is specified by character code names before conversion. It\nis either an array, or a comma separated enumerated list. If `from_encoding`\nis not specified, the internal encoding will be used. See supported encodings.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_detect_order() - Set/Get character encoding detection order\n
mb_convert_kana mb_convert_kana(string $str [, string $option=&quot;KV&quot;\n[, string $encoding]]) [string]\nConvert &quot;kana&quot; one from another (&quot;zen-kaku&quot;,\n&quot;han-kaku&quot; and more). Performs a &quot;han-kaku&quot; -\n&quot;zen-kaku&quot; conversion for string `str`. This function is only\nuseful for Japanese.\n@param str The string being converted.\n@param option The conversion option. Specify with a combination\nof following options. Applicable Conversion Options Option Meaning\n`r` Convert &quot;zen-kaku&quot; alphabets to &quot;han-kaku&quot;\n`R` Convert &quot;han-kaku&quot; alphabets to &quot;zen-kaku&quot;\n`n` Convert &quot;zen-kaku&quot; numbers to &quot;han-kaku&quot; `N`\nConvert &quot;han-kaku&quot; numbers to &quot;zen-kaku&quot; `a` Convert\n&quot;zen-kaku&quot; alphabets and numbers to &quot;han-kaku&quot; `A`\nConvert &quot;han-kaku&quot; alphabets and numbers to &quot;zen-kaku&quot;\n(Characters included in &quot;a&quot;, &quot;A&quot; options are\nU+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E) `s` Convert\n&quot;zen-kaku&quot; space to &quot;han-kaku&quot; (U+3000 -> U+0020) `S`\nConvert &quot;han-kaku&quot; space to &quot;zen-kaku&quot; (U+0020 -> U+3000)\n`k` Convert &quot;zen-kaku kata-kana&quot; to &quot;han-kaku kata-kana&quot;\n`K` Convert &quot;han-kaku kata-kana&quot; to &quot;zen-kaku kata-kana&quot;\n`h` Convert &quot;zen-kaku hira-gana&quot; to &quot;han-kaku kata-kana&quot;\n`H` Convert &quot;han-kaku kata-kana&quot; to &quot;zen-kaku hira-gana&quot;\n`c` Convert &quot;zen-kaku kata-kana&quot; to &quot;zen-kaku hira-gana&quot;\n`C` Convert &quot;zen-kaku hira-gana&quot; to &quot;zen-kaku kata-kana&quot;\n`V` Collapse voiced sound notation and convert them into a character. Use\nwith &quot;K&quot;,&quot;H&quot;\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
mb_convert_variables mb_convert_variables(string $to_encoding, mixed\n$from_encoding, mixed &$vars [, mixed &$...]) [string]\nConvert character code in variable(s). Converts character\nencoding of variables `vars` in encoding `from_encoding` to encoding\n`to_encoding`. mb_convert_variables() join strings in Array or Object to detect\nencoding, since encoding detection tends to fail for short strings. Therefore,\nit is impossible to mix encoding in single array or object.\n@param to_encoding The encoding that the string is being converted to.\n@param from_encoding `from_encoding` is specified as an array or comma\nseparated string, it tries to detect encoding from `from-coding`. When\n`from_encoding` is omitted, `detect_order` is used.\n@param vars `vars` is the reference to the variable being converted. String,\nArray and Object are accepted. mb_convert_variables() assumes all parameters\nhave the same encoding.\n@param ... Additional `vars`.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
mb_decode_mimeheader mb_decode_mimeheader(string $str) [string]\nDecode string in MIME header field. Decodes encoded-word string `str` in\nMIME header.\n@param str The string being decoded.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_encode_mimeheader() - Encode string for MIME header\n
mb_decode_numericentity mb_decode_numericentity(string $str, array $convmap,\nstring $encoding) [string]\nDecode HTML numeric string reference to character. Convert numeric string\nreference of string `str` in a specified block to character.\n@param str The string being decoded.\n@param convmap `convmap` is an array that specifies the code area to convert.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_encode_numericentity() - Encode character to HTML numeric string\nreference\n
mb_detect_encoding mb_detect_encoding(string $str [, mixed\n$encoding_list=mb_detect_order() [, bool $strict=false]]) [string]\nDetect character encoding. Detects character encoding in string `str`.\n@param str The string being detected.\n@param encoding_list `encoding_list` is list of character encoding. Encoding\norder may be specified by array or comma separated list string. If\n`encoding_list` is omitted, detect_order is used.\n@param strict `strict` specifies whether to use the strict encoding detection\nor not. Default is FALSE.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_detect_order() - Set/Get character encoding detection order\n
mb_detect_order mb_detect_order([mixed $encoding_list]) [mixed]\nSet/Get character encoding detection order. Sets the automatic character\nencoding detection order to `encoding_list`.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see mb_http_input() - Detect HTTP input character encoding\n@see mb_http_output() - Set/Get HTTP output character encoding\n@see mb_send_mail() - Send encoded mail\n
mb_encode_mimeheader mb_encode_mimeheader(string $str [, string $charset [,\nstring $transfer_encoding [, string $linefeed [, int $indent]]]]) [string]\nEncode string for MIME header. Encodes a given string `str` by the MIME\nheader encoding scheme.\n@param str The string being encoded.\n@param charset `charset` specifies the name of the character set in which `str`\nis represented in. The default value is determined by the current NLS setting\n(`mbstring.language`). mb_internal_encoding() should be set to same encoding.\n@param transfer_encoding `transfer_encoding` specifies the scheme of MIME\nencoding. It should be either `&quot;B&quot;` (Base64) or `&quot;Q&quot;`\n(Quoted-Printable). Falls back to `&quot;B&quot;` if not given.\n@param linefeed `linefeed` specifies the EOL (end-of-line) marker with which\nmb_encode_mimeheader() performs line-folding (a &raquo; RFC term, the act of\nbreaking a line longer than a certain length into multiple lines. The length\nis currently hard-coded to 74 characters). Falls back to `&quot;\r\n&quot;`\n(CRLF) if not given.\n@param indent Indentation of the first line (number of characters in the\nheader before `str`).\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function isn&#039;t designed to break lines at higher-level\ncontextual break points (word boundaries, etc.). This behaviour may clutter\nup the original string with unexpected spaces.\n@see mb_decode_mimeheader() - Decode string in MIME header field\n
mb_encode_numericentity mb_encode_numericentity(string $str, array $convmap,\nstring $encoding) [string]\nEncode character to HTML numeric string reference. Converts specified character\ncodes in string `str` from HTML numeric character reference to character code.\n@param str The string being encoded.\n@param convmap `convmap` is array specifies code area to convert.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_decode_numericentity() - Decode HTML numeric string reference to\ncharacter\n
mb_encoding_aliases mb_encoding_aliases(string $encoding) [array]\nGet aliases of a known encoding type. Returns an array of aliases for a known\n`encoding` type.\n@param encoding The encoding type being checked, for aliases.\n@return (PHP 5 >= 5.3.0)\n@see mb_list_encodings() - Returns an array of all supported encodings\n
mb_ereg_match mb_ereg_match(string $pattern, string $string [, string\n$option=&quot;msr&quot;]) [bool]\nRegular expression match for multibyte string. A regular expression match\nfor a multibyte string\n@param pattern The regular expression pattern.\n@param string The string being evaluated.\n@param option\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg() - Regular expression match with multibyte support\n
mb_ereg_replace mb_ereg_replace(string $pattern, string $replacement, string\n$string [, string $option=&quot;msr&quot;]) [string]\nReplace regular expression with multibyte support.\n@param pattern The regular expression pattern. Multibyte characters may be\nused in `pattern`.\n@param replacement The replacement text.\n@param string The string being checked.\n@param option Matching condition can be set by `option` parameter. If `i` is\nspecified for this parameter, the case will be ignored. If `x` is specified,\nwhite space will be ignored. If `m` is specified, match will be executed\nin multiline mode and line break will be included in &#039;.&#039;. If\n`p` is specified, match will be executed in POSIX mode, line break will be\nconsidered as normal character. If `e` is specified, `replacement` string\nwill be evaluated as PHP expression.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_eregi_replace() - Replace regular expression with multibyte support\nignoring case\n
mb_ereg_search_getpos mb_ereg_search_getpos(void) [int]\nReturns start point for next regular expression match.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_setpos() - Set start point of next regular expression match\n
mb_ereg_search_getregs mb_ereg_search_getregs(void) [array]\nRetrieve the result from the last multibyte regular expression match.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_init() - Setup string and regular expression for a\nmultibyte regular expression match\n
mb_ereg_search_init mb_ereg_search_init(string $string [, string $pattern\n[, string $option=&quot;msr&quot;]]) [bool]\nSetup string and regular expression for a multibyte regular expression\nmatch. mb_ereg_search_init() sets `string` and `pattern` for a multibyte\nregular expression. These values are used for mb_ereg_search(),\nmb_ereg_search_pos(), and mb_ereg_search_regs().\n@param string The search string.\n@param pattern The search pattern.\n@param option The search option.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_regs() - Returns the matched part of a multibyte regular\nexpression\n
mb_ereg_search_pos mb_ereg_search_pos([string $pattern [, string\n$option=&quot;ms&quot;]]) [array]\nReturns position and length of a matched part of the multibyte regular\nexpression for a predefined multibyte string. Returns position and length of\na matched part of the multibyte regular expression for a predefined multibyte\nstring The string for match is specified by mb_ereg_search_init(). If it is\nnot specified, the previous one will be used.\n@param pattern The search pattern.\n@param option The search option.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_init() - Setup string and regular expression for a\nmultibyte regular expression match\n
mb_ereg_search_regs mb_ereg_search_regs([string $pattern [, string\n$option=&quot;ms&quot;]]) [array]\nReturns the matched part of a multibyte regular expression. Returns the\nmatched part of a multibyte regular expression.\n@param pattern The search pattern.\n@param option The search option.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_init() - Setup string and regular expression for a\nmultibyte regular expression match\n
mb_ereg_search_setpos mb_ereg_search_setpos(int $position) [bool]\nSet start point of next regular expression match.\n@param position The position to set.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_init() - Setup string and regular expression for a\nmultibyte regular expression match\n
mb_ereg_search mb_ereg_search([string $pattern [, string\n$option=&quot;ms&quot;]]) [bool]\nMultibyte regular expression match for predefined multibyte string. Performs\na multibyte regular expression match for a predefined multibyte string.\n@param pattern The search pattern.\n@param option The search option.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_search_init() - Setup string and regular expression for a\nmultibyte regular expression match\n
mb_ereg mb_ereg(string $pattern, string $string [, array $regs]) [int]\nRegular expression match with multibyte support.\n@param pattern The search pattern.\n@param string The search string.\n@param regs Contains a substring of the matched string.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_eregi() - Regular expression match ignoring case with multibyte support\n
mb_eregi_replace mb_eregi_replace(string $pattern, string $replace, string\n$string [, string $option=&quot;msri&quot;]) [string]\nReplace regular expression with multibyte support ignoring case.\n@param pattern The regular expression pattern. Multibyte characters may be\nused. The case will be ignored.\n@param replace The replacement text.\n@param string The searched string.\n@param option `option` has the same meaning as in mb_ereg_replace().\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg_replace() - Replace regular expression with multibyte support\n
mb_eregi mb_eregi(string $pattern, string $string [, array $regs]) [int]\nRegular expression match ignoring case with multibyte support.\n@param pattern The regular expression pattern.\n@param string The string being searched.\n@param regs Contains a substring of the matched string.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg() - Regular expression match with multibyte support\n
mb_get_info mb_get_info([string $type=&quot;all&quot;]) [mixed]\nGet internal settings of mbstring.\n@param type If `type` isn&#039;t specified or is specified to\n&quot;all&quot;, an array having the elements &quot;internal_encoding&quot;,\n&quot;http_output&quot;, &quot;http_input&quot;, &quot;func_overload&quot;,\n&quot;mail_charset&quot;, &quot;mail_header_encoding&quot;,\n&quot;mail_body_encoding&quot; will be returned. If `type` is specified as\n&quot;http_output&quot;, &quot;http_input&quot;, &quot;internal_encoding&quot;,\n&quot;func_overload&quot;, the specified setting parameter will be returned.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_http_output() - Set/Get HTTP output character encoding\n
mb_http_input mb_http_input([string $type=&quot;&quot;]) [mixed]\nDetect HTTP input character encoding.\n@param type Input string specifies the input type. &quot;G&quot; for GET,\n&quot;P&quot; for POST, &quot;C&quot; for COOKIE, &quot;S&quot; for string,\n&quot;L&quot; for list, and &quot;I&quot; for the whole list (will return\narray). If type is omitted, it returns the last input type processed.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see mb_http_output() - Set/Get HTTP output character encoding\n@see mb_detect_order() - Set/Get character encoding detection order\n
mb_http_output mb_http_output([string $encoding]) [mixed]\nSet/Get HTTP output character encoding. Set/Get the HTTP output character\nencoding. Output after this function is converted to `encoding`.\n@param encoding If `encoding` is set, mb_http_output() sets the HTTP output\ncharacter encoding to `encoding`. If `encoding` is omitted, mb_http_output()\nreturns the current HTTP output character encoding.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see mb_http_input() - Detect HTTP input character encoding\n@see mb_detect_order() - Set/Get character encoding detection order\n
mb_internal_encoding mb_internal_encoding([string\n$encoding=mb_internal_encoding()]) [mixed]\nSet/Get internal character encoding. Set/Get the internal character encoding\n@param encoding `encoding` is the character encoding name used for the\nHTTP input character encoding conversion, HTTP output character encoding\nconversion, and the default character encoding for string functions defined\nby the mbstring module.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_http_input() - Detect HTTP input character encoding\n@see mb_http_output() - Set/Get HTTP output character encoding\n@see mb_detect_order() - Set/Get character encoding detection order\n
mb_language mb_language([string $language]) [mixed]\nSet/Get current language. Set/Get the current language.\n@param language Used for encoding e-mail messages. Valid languages are\n&quot;Japanese&quot;, &quot;ja&quot;,&quot;English&quot;,&quot;en&quot;\nand &quot;uni&quot; (UTF-8). mb_send_mail() uses this setting to encode\ne-mail. Language and its setting is ISO-2022-JP/Base64 for Japanese,\nUTF-8/Base64 for uni, ISO-8859-1/quoted printable for English.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_send_mail() - Send encoded mail\n
mb_list_encodings mb_list_encodings(void) [array]\nReturns an array of all supported encodings. Returns an array containing\nall supported encodings.\n@return (PHP 5)\n
mb_output_handler mb_output_handler(string $contents, int $status) [string]\nCallback function converts character encoding in\noutput buffer. mb_output_handler() is ob_start() callback\nfunction. mb_output_handler() converts characters in the output buffer from\ninternal character encoding to HTTP output character encoding.\n@param contents The contents of the output buffer.\n@param status The status of the output buffer.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: If you want to output some binary data such as image\nfrom PHP script with PHP 4.3.0 or later, Content-Type: header must\nbe send using header() before any binary data was send to client\n(e.g. header(&quot;Content-Type: image/png&quot;)). If Content-Type: header\nwas send, output character encoding conversion will not be performed. Note that\nif &#039;Content-Type: text/*&#039; was send using header(), the sending data\nis regarded as text, encoding conversion will be performed using character\nencoding settings. If you want to output some binary data such as image\nfrom PHP script with PHP 4.2.x or earlier, you must set output encoding to\n&quot;pass&quot; using mb_http_output().\n@see ob_start() - Turn on output buffering\n
mb_parse_str mb_parse_str(string $encoded_string [, array &$result]) [bool]\nParse GET/POST/COOKIE data and set global variable. Parses GET/POST/COOKIE\ndata and sets global variables. Since PHP does not provide raw POST/COOKIE\ndata, it can only be used for GET data for now. It parses URL encoded data,\ndetects encoding, converts coding to internal encoding and set values to the\n`result` array or global variables.\n@param encoded_string The URL encoded data.\n@param result An array containing decoded and character encoded converted\nvalues.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_detect_order() - Set/Get character encoding detection order\n@see mb_internal_encoding() - Set/Get internal character encoding\n
mb_preferred_mime_name mb_preferred_mime_name(string $encoding) [string]\nGet MIME charset string. Get a MIME charset string for a specific encoding.\n@param encoding The encoding being checked.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
mb_regex_encoding mb_regex_encoding([string $encoding]) [mixed]\nReturns current encoding for multibyte regex as string. Returns the current\nencoding for a multibyte regex as a string.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see mb_ereg() - Regular expression match with multibyte support\n
mb_regex_set_options mb_regex_set_options([string $options=&quot;msr&quot;])\n[string]\nSet/Get the default options for mbregex functions.\n@param options The options to set. This is a a string where each character\nis an option. To set a mode, the mode character must be the last one set,\nhowever there can only be set one mode but multiple options. Regex options\nOption Meaning i Ambiguity match on x Enables extended pattern form m\n`&#039;.&#039;` matches with newlines s `&#039;^&#039;` -> `&#039;\A&#039;`,\n`&#039;$&#039;` -> `&#039;\Z&#039;` p Same as both the `m` and `s` options l\nFinds longest matches n Ignores empty matches e eval() resulting code Regex\nsyntax modes Mode Meaning j Java (Sun java.util.regex) u GNU regex g grep\nc Emacs r Ruby z Perl b POSIX Basic regex d POSIX Extended regex\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see mb_split() - Split multibyte string using regular expression\n@see mb_ereg() - Regular expression match with multibyte support\n@see mb_eregi() - Regular expression match ignoring case with multibyte support\n
mb_send_mail mb_send_mail(string $to, string $subject, string $message [,\nstring $additional_headers=NULL [, string $additional_parameter=NULL]]) [bool]\nSend encoded mail. Sends email. Headers and messages are converted and\nencoded according to the mb_language() setting. It&#039;s a wrapper function\nfor mail(), so see also mail() for details.\n@param to The mail addresses being sent to. Multiple recipients may be\nspecified by putting a comma between each address in `to`. This parameter\nis not automatically encoded.\n@param subject The subject of the mail.\n@param message The message of the mail.\n@param additional_headers `additional_headers` is inserted at the end of the\nheader. This is typically used to add extra headers. Multiple extra headers\nare separated with a newline (&quot;\n&quot;).\n@param additional_parameter `additional_parameter` is a MTA command line\nparameter. It is useful when setting the correct Return-Path header when\nusing sendmail.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mail() - Send mail\n@see mb_encode_mimeheader() - Encode string for MIME header\n@see mb_language() - Set/Get current language\n
mb_split mb_split(string $pattern, string $string [, int $limit=-1]) [array]\nSplit multibyte string using regular expression.\n@param pattern The regular expression pattern.\n@param string The string being split.\n@param limit If optional parameter `limit` is specified, it will be split in\n`limit` elements as maximum.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: The internal encoding or the character encoding specified by\nmb_regex_encoding() will be used as the character encoding for this function.\n@see mb_regex_encoding() - Returns current encoding for multibyte regex\nas string\n@see mb_ereg() - Regular expression match with multibyte support\n
mb_strcut mb_strcut(string $str, int $start [, int $length [, string\n$encoding]]) [string]\nGet part of string. mb_strcut() performs equivalent operation as mb_substr()\nwith different method. If `start` position is multi-byte character&#039;s\nsecond byte or larger, it starts from first byte of multi-byte character. It\nsubtracts string from `str` that is shorter than `length` AND character that\nis not part of multi-byte string or not being middle of shift sequence.\n@param str The string being cut.\n@param start The position that begins the cut.\n@param length The string being decoded.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_substr() - Get part of string\n@see mb_internal_encoding() - Set/Get internal character encoding\n
mb_strimwidth mb_strimwidth(string $str, int $start, int $width [, string\n$trimmarker [, string $encoding]]) [string]\nGet truncated string with specified width. Truncates string `str` to specified\n`width`.\n@param str The string being decoded.\n@param start The start position offset. Number of characters from the\nbeginning of string. (First character is 0)\n@param width The width of the desired trim.\n@param trimmarker A string that is added to the end of string when string\nis truncated.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_strwidth() - Return width of string\n@see mb_internal_encoding() - Set/Get internal character encoding\n
mb_stripos mb_stripos(string $haystack, string $needle [, int $offset [,\nstring $encoding]]) [int]\nFinds position of first occurrence of a string within another, case\ninsensitive. mb_stripos() returns the numeric position of the first occurrence\nof `needle` in the `haystack` string. Unlike mb_strpos(), mb_stripos()\nis case-insensitive. If `needle` is not found, it returns FALSE.\n@param haystack The string from which to get the position of the first\noccurrence of `needle`\n@param needle The string to find in `haystack`\n@param offset The position in `haystack` to start searching\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see stripos() - Find position of first occurrence of a case-insensitive string\n@see strpos() - Find position of first occurrence of a string\n@see mb_strpos() - Find position of first occurrence of string in a string\n
mb_stristr mb_stristr(string $haystack, string $needle [, bool $part=false\n[, string $encoding]]) [string]\nFinds first occurrence of a string within another, case\ninsensitive. mb_stristr() finds the first occurrence of `needle` in `haystack`\nand returns the portion of `haystack`. Unlike mb_strstr(), mb_stristr()\nis case-insensitive. If `needle` is not found, it returns FALSE.\n@param haystack The string from which to get the first occurrence of `needle`\n@param needle The string to find in `haystack`\n@param part Determines which portion of `haystack` this function returns. If\nset to TRUE, it returns all of `haystack` from the beginning to the first\noccurrence of `needle`. If set to FALSE, it returns all of `haystack` from\nthe first occurrence of `needle` to the end,\n@param encoding Character encoding name to use. If it is omitted, internal\ncharacter encoding is used.\n@return (PHP 5 >= 5.2.0)\n@see stristr() - Case-insensitive strstr\n@see strstr() - Find first occurrence of a string\n@see mb_strstr() - Finds first occurrence of a string within another\n
mb_strlen mb_strlen(string $str [, string $encoding]) [int]\nGet string length. Gets the length of a string.\n@param str The string being checked for length.\n@param encoding The `encoding` parameter is the character encoding. If it\nis omitted, the internal character encoding value will be used.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see mb_internal_encoding() - Set/Get internal character encoding\n@see strlen() - Get string length\n
lstat lstat(string $filename) [array]\nGives information about a file or symbolic link. Gathers the statistics of\nthe file or symbolic link named by `filename`.\n@param filename Path to a file or a symbolic link.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see stat() - Gives information about a file\n
ltrim ltrim(string $str [, string $charlist]) [string]\nStrip whitespace (or other characters) from the beginning of a string. Strip\nwhitespace (or other characters) from the beginning of a string.\n@param str The input string.\n@param charlist You can also specify the characters you want to strip, by\nmeans of the `charlist` parameter. Simply list all characters that you want\nto be stripped. With `..` you can specify a range of characters.\n@return (PHP 4, PHP 5)\n@see trim() - Strip whitespace (or other characters) from the beginning and\nend of a string\n@see rtrim() - Strip whitespace (or other characters) from the end of a string\n
lzf_compress lzf_compress(string $data) [string]\nLZF compression. lzf_compress() compresses the given `data` string using\nLZF encoding.\n@param data The string to compress.\n@return (PECL lzf >= 0.1.0)\n@see lzf_decompress() - LZF decompression\n
lzf_decompress lzf_decompress(string $data) [string]\nLZF decompression. lzf_compress() decompresses the given `data` string\ncontaining lzf encoded data.\n@param data The compressed string.\n@return (PECL lzf >= 0.1.0)\n@see lzf_compress() - LZF compression\n
lzf_optimized_for lzf_optimized_for(void) [int]\nDetermines what LZF extension was optimized for. Determines what was LZF\nextension optimized for during compilation.\n@return (PECL lzf >= 1.0.0)\n
m_checkstatus m_checkstatus(resource $conn, int $identifier) [int]\nCheck to see if a transaction has completed.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_completeauthorizations m_completeauthorizations(resource $conn, int &$array)\n[int]\nNumber of complete authorizations in queue, returning an array of their\nidentifiers.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param array Its description\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_connect m_connect(resource $conn) [int]\nEstablish the connection to MCVE.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_connectionerror m_connectionerror(resource $conn) [string]\nGet a textual representation of why a connection failed.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_deletetrans m_deletetrans(resource $conn, int $identifier) [bool]\nDelete specified transaction from MCVE_CONN structure.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_destroyconn m_destroyconn(resource $conn) [bool]\nDestroy the connection and MCVE_CONN structure.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n@see m_initconn() - Create and initialize an MCVE_CONN structure\n
m_destroyengine m_destroyengine(void) [void]\nFree memory associated with IP/SSL connectivity.\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_getcell m_getcell(resource $conn, int $identifier, string $column, int $row)\n[string]\nGet a specific cell from a comma delimited response by column name.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@param column\n@param row\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_getcellbynum m_getcellbynum(resource $conn, int $identifier, int $column,\nint $row) [string]\nGet a specific cell from a comma delimited response by column number.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@param column\n@param row\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_getcommadelimited m_getcommadelimited(resource $conn, int $identifier)\n[string]\nGet the RAW comma delimited data returned from MCVE.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_getheader m_getheader(resource $conn, int $identifier, int $column_num)\n[string]\nGet the name of the column in a comma-delimited response.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@param column_num\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_initconn m_initconn(void) [resource]\nCreate and initialize an MCVE_CONN structure.\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n@see m_destroyconn() - Destroy the connection and MCVE_CONN structure\n
m_initengine m_initengine(string $location) [int]\nReady the client for IP/SSL Communication.\n@param location\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_iscommadelimited m_iscommadelimited(resource $conn, int $identifier) [int]\nChecks to see if response is comma delimited.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_maxconntimeout m_maxconntimeout(resource $conn, int $secs) [bool]\nThe maximum amount of time the API will attempt a connection to MCVE.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param secs\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_monitor m_monitor(resource $conn) [int]\nPerform communication with MCVE (send/receive data) Non-blocking.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_numcolumns m_numcolumns(resource $conn, int $identifier) [int]\nNumber of columns returned in a comma delimited response.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_numrows m_numrows(resource $conn, int $identifier) [int]\nNumber of rows returned in a comma delimited response.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_parsecommadelimited m_parsecommadelimited(resource $conn, int $identifier)\n[int]\nParse the comma delimited response so m_getcell, etc will work.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_responsekeys m_responsekeys(resource $conn, int $identifier) [array]\nReturns array of strings which represents the keys that can be used\n for response parameters on this transaction.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)\n
m_responseparam m_responseparam(resource $conn, int $identifier, string $key)\n[string]\nGet a custom response parameter.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@param key\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_returnstatus m_returnstatus(resource $conn, int $identifier) [int]\nCheck to see if the transaction was successful.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_setblocking m_setblocking(resource $conn, int $tf) [int]\nSet blocking/non-blocking mode for connection.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param tf\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_setdropfile m_setdropfile(resource $conn, string $directory) [int]\nSet the connection method to Drop-File.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param directory\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_setip m_setip(resource $conn, string $host, int $port) [int]\nSet the connection method to IP.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param host\n@param port\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_setssl_cafile m_setssl_cafile(resource $conn, string $cafile) [int]\nSet SSL CA (Certificate Authority) file for verification of server\n certificate.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param cafile\n@return (PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)\n
m_setssl_files m_setssl_files(resource $conn, string $sslkeyfile, string\n$sslcertfile) [int]\nSet certificate key files and certificates if server requires client\ncertificate\n verification.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param sslkeyfile\n@param sslcertfile\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_setssl m_setssl(resource $conn, string $host, int $port) [int]\nSet the connection method to SSL.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param host\n@param port\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_settimeout m_settimeout(resource $conn, int $seconds) [int]\nSet maximum transaction time (per trans).\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param seconds\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_sslcert_gen_hash m_sslcert_gen_hash(string $filename) [string]\nGenerate hash for SSL client certificate verification.\n@param filename\n@return (PECL mcve >= 5.2.0)\n
m_transactionssent m_transactionssent(resource $conn) [int]\nCheck to see if outgoing buffer is clear.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_transinqueue m_transinqueue(resource $conn) [int]\nNumber of transactions in client-queue.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_transkeyval m_transkeyval(resource $conn, int $identifier, string $key,\nstring $value) [int]\nAdd key/value pair to a transaction. Replaces deprecated transparam().\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@param key\n@param value\n@return (PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)\n
m_transnew m_transnew(resource $conn) [int]\nStart a new transaction.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_transsend m_transsend(resource $conn, int $identifier) [int]\nFinalize and send the transaction.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param identifier\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_uwait m_uwait(int $microsecs) [int]\nWait x microsecs.\n@param microsecs\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_validateidentifier m_validateidentifier(resource $conn, int $tf) [int]\nWhether or not to validate the passed identifier on any transaction it is\npassed to.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param tf\n@return (PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)\n
m_verifyconnection m_verifyconnection(resource $conn, int $tf) [bool]\nSet whether or not to PING upon connect to verify connection.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param tf\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
m_verifysslcert m_verifysslcert(resource $conn, int $tf) [bool]\nSet whether or not to verify the server ssl certificate.\n@param  conn An MCVE_CONN resource returned by m_initengine().\n@param tf\n@return (PHP 4 >= 4.3.9, PHP 5 &lt;= 5.0.5, PECL mcve >= 1.0.0)\n
magic_quotes_runtime magic_quotes_runtime\nAlias of set_magic_quotes_runtime.\n
mail mail(string $to, string $subject, string $message [, string\n$additional_headers [, string $additional_parameters]]) [bool]\nSend mail. Sends an email.\n@param to Receiver, or receivers of the mail. The formatting of this string\nmust comply with &raquo; RFC 2822. Some examples are: user@example.com\nuser@example.com, anotheruser@example.com User &lt;user@example.com> User\n&lt;user@example.com>, Another User &lt;anotheruser@example.com>\n@return (PHP 4, PHP 5)\n@note Note: The Windows implementation of mail() differs in many ways from\nthe Unix implementation. First, it doesn&#039;t use a local binary for\ncomposing messages but only operates on direct sockets which means a `MTA`\nis needed listening on a network socket (which can either on the localhost\nor a remote machine). Second, the custom headers like `From:`, `Cc:`, `Bcc:`\nand `Date:` are not interpreted by the `MTA` in the first place, but are\nparsed by PHP. As such, the `to` parameter should not be an address in the\nform of &quot;Something &lt;someone@example.com>&quot;. The mail command\nmay not parse this properly while talking with the MTA.\n@note Note: It is worth noting that the mail() function is not suitable for\nlarger volumes of email in a loop. This function opens and closes an SMTP\nsocket for each email, which is not very efficient. For the sending of large\namounts of email, see the &raquo; PEAR::Mail, and &raquo; PEAR::Mail_Queue\npackages.\n@note Note: The following RFCs may be useful: &raquo; RFC 1896, &raquo;\nRFC 2045, &raquo; RFC 2046, &raquo; RFC 2047, &raquo; RFC 2048, &raquo;\nRFC 2049, and &raquo; RFC 2822.\n@see imap_mail() - Send an email message\n@see &raquo; PEAR::Mail\n@see &raquo; PEAR::Mail_Mime\n
mailparse_determine_best_xfer_encoding\nmailparse_determine_best_xfer_encoding(resource $fp) [string]\nGets the best way of encoding. Figures out the best way of encoding the\ncontent read from the given file pointer.\n@param fp A valid file pointer, which must be seek-able.\n@return (PECL mailparse >= 0.9.0)\n
mailparse_msg_create mailparse_msg_create(void) [resource]\nCreate a mime mail resource. Create a `MIME` mail resource.\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_free() - Frees a MIME resource\n@see mailparse_msg_parse_file() - Parses a file\n
mailparse_msg_extract_part_file mailparse_msg_extract_part_file(resource\n$mimemail, mixed $filename [, callback $callbackfunc]) [string]\nExtracts/decodes a message section. Extracts/decodes a message section from\nthe supplied filename. The contents of the section will be decoded according\nto their transfer encoding - base64, quoted-printable and uuencoded text\nare supported.\n@param mimemail A valid `MIME` resource, created with mailparse_msg_create().\n@param filename Can be a file name or a valid stream resource.\n@param callbackfunc If set, this must be either a valid callback that will\nbe passed the extracted section, or NULL to make this function return\nthe extracted section. If not specified, the contents will be sent to\n&quot;stdout&quot;.\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_extract_part() - Extracts/decodes a message section\n@see mailparse_msg_extract_whole_part_file() - Extracts a message section\nincluding headers without decoding the transfer encoding\n
mailparse_msg_extract_part mailparse_msg_extract_part(resource $mimemail,\nstring $msgbody [, callback $callbackfunc]) [void]\nExtracts/decodes a message section.\n@param mimemail A valid `MIME` resource.\n@param msgbody\n@param callbackfunc\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_extract_part_file() - Extracts/decodes a message section\n@see mailparse_msg_extract_whole_part_file() - Extracts a message section\nincluding headers without decoding the transfer encoding\n
mailparse_msg_extract_whole_part_file\nmailparse_msg_extract_whole_part_file(resource $mimemail, string $filename\n[, callback $callbackfunc]) [string]\nExtracts a message section including headers without decoding the transfer\nencoding.\n@param mimemail A valid `MIME` resource.\n@param filename\n@param callbackfunc\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_extract_part() - Extracts/decodes a message section\n@see mailparse_msg_extract_part_file() - Extracts/decodes a message section\n
mailparse_msg_free mailparse_msg_free(resource $mimemail) [bool]\nFrees a MIME resource. Frees a `MIME` resource.\n@param mimemail A valid `MIME` resource allocated by mailparse_msg_create()\nor mailparse_msg_parse_file().\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_create() - Create a mime mail resource\n@see mailparse_msg_parse_file() - Parses a file\n
mailparse_msg_get_part_data mailparse_msg_get_part_data(resource $mimemail)\n[array]\nReturns an associative array of info about the message.\n@param mimemail A valid `MIME` resource.\n
mailparse_msg_get_part mailparse_msg_get_part(resource $mimemail, string\n$mimesection) [resource]\nReturns a handle on a given section in a mimemessage.\n@param mimemail A valid `MIME` resource.\n@param mimesection\n
mailparse_msg_get_structure mailparse_msg_get_structure(resource $mimemail)\n[array]\nReturns an array of mime section names in the supplied message.\n@param mimemail A valid `MIME` resource.\n
mailparse_msg_parse_file mailparse_msg_parse_file(string $filename) [resource]\nParses a file. Parses a file. This is the optimal way of parsing a mail file\nthat you have on disk.\n@param filename Path to the file holding the message. The file is opened\nand streamed through the parser.\n@return (PECL mailparse >= 0.9.0)\n@see mailparse_msg_free() - Frees a MIME resource\n@see mailparse_msg_create() - Create a mime mail resource\n
mailparse_msg_parse mailparse_msg_parse(resource $mimemail, string $data)\n[bool]\nIncrementally parse data into buffer. Incrementally parse data into the\nsupplied mime mail resource. This function allow you to stream portions of\na file at a time, rather than read and parse the whole thing.\n@param mimemail A valid `MIME` resource.\n@param data\n@return (PECL mailparse >= 0.9.0)\n
mailparse_rfc822_parse_addresses mailparse_rfc822_parse_addresses(string\n$addresses) [array]\nParse RFC 822 compliant addresses. Parses a &raquo; RFC 822 compliant\nrecipient list, such as that found in the `To:` header.\n@param addresses A string containing addresses, like in: `Wez Furlong\n&lt;wez@example.com>, doe@example.com` Note: This string must not include\nthe header name.\n@return (PECL mailparse >= 0.9.0)\n
mailparse_stream_encode mailparse_stream_encode(resource $sourcefp, resource\n$destfp, string $encoding) [bool]\nStreams data from source file pointer, apply encoding and write to\ndestfp. Streams data from the source file pointer, apply `encoding` and\nwrite to the destination file pointer.\n@param sourcefp A valid file handle. The file is streamed through the parser.\n@param destfp The destination file handle in which the encoded data will\nbe written.\n@param encoding One of the character encodings supported by the mbstring\nmodule.\n@return (PECL mailparse >= 0.9.0)\n
mailparse_uudecode_all mailparse_uudecode_all(resource $fp) [array]\nScans the data from fp and extract each embedded uuencoded file. Scans the\ndata from the given file pointer and extract each embedded uuencoded file\ninto a temporary file.\n@param fp A valid file pointer.\n@return (PECL mailparse >= 0.9.0)\n
main main\nDummy for main.\n@see html_errors\n@see display_errors\n
max max(array $values) [mixed]\nFind highest value. If the first and only parameter is an array, max()\nreturns the highest value in that array. If at least two parameters are\nprovided, max() returns the biggest of these values. Note: PHP will evaluate\na non-numeric string as `0` if compared to integer, but still return the\nstring if it&#039;s seen as the numerically highest value. If multiple\narguments evaluate to `0`, max() will return a numeric `0` if given, else\nthe alphabetical highest string value will be returned.\n@param values An array containing the values.\n@return (PHP 4, PHP 5)\n@see min() - Find lowest value\n@see count() - Count all elements in an array, or properties in an object\n
maxdb_affected_rows maxdb_affected_rows(resource $link) [int]\nGets the number of affected rows in a previous MaxDB operation. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_num_rows() - Gets the number of rows in a result\n@see maxdb_info() - Retrieves information about the most recently executed\nquery\n
maxdb_autocommit maxdb_autocommit(resource $link, bool $mode) [bool]\nTurns on or off auto-commiting database modifications. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_commit() - Commits the current transaction\n@see maxdb_rollback() - Rolls back current transaction\n
maxdb_bind_param maxdb_bind_param\nAlias of maxdb_stmt_bind_param.\n
maxdb_bind_result maxdb_bind_result\nAlias of maxdb_stmt_bind_result.\n
maxdb_change_user maxdb_change_user(resource $link, string $user, string\n$password, string $database) [bool]\nChanges the user of the specified database connection. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_select_db() - Selects the default database for database queries\n
maxdb_character_set_name maxdb_character_set_name(resource $link) [string]\nReturns the default character set for the database connection. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_client_encoding() - Alias of maxdb_character_set_name\n@see maxdb_real_escape_string() - Escapes special characters in a string\nfor use in an SQL statement, taking into account the current charset of\nthe connection\n
maxdb_client_encoding maxdb_client_encoding\nAlias of maxdb_character_set_name.\n
maxdb_close_long_data maxdb_close_long_data\nAlias of maxdb_stmt_close_long_data.\n
maxdb_close maxdb_close(resource $link) [bool]\nCloses a previously opened database connection. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_init() - Initializes MaxDB and returns an resource for use with\nmaxdb_real_connect\n@see maxdb_real_connect() - Opens a connection to a MaxDB server\n
maxdb_commit maxdb_commit(resource $link) [bool]\nCommits the current transaction. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_autocommit() - Turns on or off auto-commiting database modifications\n@see maxdb_rollback() - Rolls back current transaction\n
maxdb_connect_errno maxdb_connect_errno(void) [int]\nReturns the error code from last connect call. The maxdb_connect_errno()\nfunction will return the last error code number for last call to\nmaxdb_connect(). If no errors have occured, this function will return zero.\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_connect_error() - Returns a string description of the last\nconnect error\n@see maxdb_errno() - Returns the error code for the most recent function call\n@see maxdb_error() - Returns a string description of the last error\n@see maxdb_sqlstate() - Returns the SQLSTATE error from previous MaxDB\noperation\n
maxdb_connect_error maxdb_connect_error(void) [string]\nReturns a string description of the last connect error. The\nmaxdb_connect_error() function is identical to the corresponding\nmaxdb_connect_errno() function in every way, except instead of returning an\ninteger error code the maxdb_connect_error() function will return a string\nrepresentation of the last error to occur for the last maxdb_connect()\ncall. If no error has occured, this function will return an empty string.\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect() - Open a new connection to the MaxDB server\n@see maxdb_connect_errno() - Returns the error code from last connect call\n@see maxdb_errno() - Returns the error code for the most recent function call\n@see maxdb_error() - Returns a string description of the last error\n@see maxdb_sqlstate() - Returns the SQLSTATE error from previous MaxDB\noperation\n
maxdb_connect maxdb_connect([string $host [, string $username [, string\n$passwd [, string $dbname [, int $port=0 [, string $socket]]]]]]) [resource]\nOpen a new connection to the MaxDB server. Object oriented style\n@return (PECL maxdb >= 1.0)\n
maxdb_data_seek maxdb_data_seek(resource $result, int $offset) [bool]\nAdjusts the result pointer to an arbitary row in the result. Object oriented\nstyle\n@return (PECL maxdb >= 1.0)\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_fetch_row() - Get a result row as an enumerated array\n@see maxdb_num_rows() - Gets the number of rows in a result\n
maxdb_debug maxdb_debug(string $debug) [void]\nPerforms debugging operations. The maxdb_debug() can be used to trace the\nSQLDBC communication. The following strings can be used as a parameter to\nmaxdb_debug():\n@return (PECL maxdb >= 1.0)\n
maxdb_disable_reads_from_master maxdb_disable_reads_from_master(resource $link)\n[bool]\nDisable reads from master. Object oriented style\n
maxdb_disable_rpl_parse maxdb_disable_rpl_parse(resource $link) [bool]\nDisable RPL parse.\n
maxdb_dump_debug_info maxdb_dump_debug_info(resource $link) [bool]\nDump debugging information into the log.\n
maxdb_embedded_connect maxdb_embedded_connect([string $dbname]) [resource]\nOpen a connection to an embedded MaxDB server.\n
maxdb_enable_reads_from_master maxdb_enable_reads_from_master(resource $link)\n[bool]\nEnable reads from master.\n
maxdb_enable_rpl_parse maxdb_enable_rpl_parse(resource $link) [bool]\nEnable RPL parse.\n
maxdb_errno maxdb_errno(resource $link) [int]\nReturns the error code for the most recent function call. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect_errno() - Returns the error code from last connect call\n@see maxdb_connect_error() - Returns a string description of the last\nconnect error\n@see maxdb_error() - Returns a string description of the last error\n@see maxdb_sqlstate() - Returns the SQLSTATE error from previous MaxDB\noperation\n
maxdb_error maxdb_error(resource $link) [string]\nReturns a string description of the last error. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_connect_errno() - Returns the error code from last connect call\n@see maxdb_connect_error() - Returns a string description of the last\nconnect error\n@see maxdb_errno() - Returns the error code for the most recent function call\n@see maxdb_sqlstate() - Returns the SQLSTATE error from previous MaxDB\noperation\n
maxdb_escape_string maxdb_escape_string\nAlias of maxdb_real_escape_string.\n
maxdb_execute maxdb_execute\nAlias of maxdb_stmt_execute.\n
maxdb_fetch_array maxdb_fetch_array(resource $result [, int $resulttype])\n[mixed]\nFetch a result row as an associative, a numeric array, or both. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_assoc() - Fetch a result row as an associative array\n@see maxdb_fetch_row() - Get a result row as an enumerated array\n@see maxdb_fetch_resource()\n
maxdb_fetch_assoc maxdb_fetch_assoc(resource $result) [array]\nFetch a result row as an associative array. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_array() - Fetch a result row as an associative, a numeric\narray, or both\n@see maxdb_fetch_row() - Get a result row as an enumerated array\n@see maxdb_fetch_resource()\n
maxdb_fetch_field_direct maxdb_fetch_field_direct(resource $result, int\n$fieldnr) [mixed]\nFetch meta-data for a single field. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_num_fields() - Get the number of fields in a result\n@see maxdb_fetch_field() - Returns the next field in the result set\n@see maxdb_fetch_fields() - Returns an array of resources representing the\nfields in a result set\n
maxdb_fetch_field maxdb_fetch_field(resource $result) [mixed]\nReturns the next field in the result set. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_num_fields() - Get the number of fields in a result\n@see maxdb_fetch_field_direct() - Fetch meta-data for a single field\n@see maxdb_fetch_fields() - Returns an array of resources representing the\nfields in a result set\n@see maxdb_field_seek() - Set result pointer to a specified field offset\n
maxdb_fetch_fields maxdb_fetch_fields(resource $result) [mixed]\nReturns an array of resources representing the fields in a result set. Object\noriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_num_fields() - Get the number of fields in a result\n@see maxdb_fetch_field() - Returns the next field in the result set\n@see maxdb_fetch_field_direct() - Fetch meta-data for a single field\n
maxdb_fetch_lengths maxdb_fetch_lengths(resource $result) [array]\nReturns the lengths of the columns of the current row in the result set. Object\noriented style\n@return (PECL maxdb >= 1.0)\n
maxdb_fetch_object maxdb_fetch_object(object $result) [object]\nReturns the current row of a result set as an object. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_array() - Fetch a result row as an associative, a numeric\narray, or both\n@see maxdb_fetch_assoc() - Fetch a result row as an associative array\n@see maxdb_fetch_row() - Get a result row as an enumerated array\n
maxdb_fetch_row maxdb_fetch_row(resource $result) [mixed]\nGet a result row as an enumerated array. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_array() - Fetch a result row as an associative, a numeric\narray, or both\n@see maxdb_fetch_assoc() - Fetch a result row as an associative array\n@see maxdb_fetch_resource()\n
maxdb_fetch maxdb_fetch\nAlias of maxdb_stmt_fetch.\n
maxdb_field_count maxdb_field_count(resource $link) [int]\nReturns the number of columns for the most recent query. Object oriented style\n@return (PECL maxdb >= 1.0)\n
maxdb_field_seek maxdb_field_seek(resource $result, int $fieldnr) [bool]\nSet result pointer to a specified field offset. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_field() - Returns the next field in the result set\n
maxdb_field_tell maxdb_field_tell(resource $result) [int]\nGet current field offset of a result pointer. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_fetch_field() - Returns the next field in the result set\n@see maxdb_field_seek() - Set result pointer to a specified field offset\n
maxdb_free_result maxdb_free_result(resource $result) [void]\nFrees the memory associated with a result. Object oriented style\n@return (PECL maxdb >= 1.0)\n@see maxdb_query() - Performs a query on the database\n@see maxdb_stmt_store_result() - Transfers a result set from a prepared\nstatement\n@see maxdb_store_result() - Transfers a result set from the last query\n@see maxdb_use_result() - Initiate a result set retrieval\n
maxdb_get_client_info maxdb_get_client_info(void) [string]\nReturns the MaxDB client version as a string. The maxdb_get_client_info()\nfunction is used to return a string representing the client version being\nused in the MaxDB extension.\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_client_version() - Get MaxDB client info\n@see maxdb_get_server_info() - Returns the version of the MaxDB server\n@see maxdb_get_server_version() - Returns the version of the MaxDB server\nas an integer\n
maxdb_get_client_version maxdb_get_client_version(void) [int]\nGet MaxDB client info. Returns client version number as an integer.\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_client_info() - Returns the MaxDB client version as a string\n@see maxdb_get_server_info() - Returns the version of the MaxDB server\n@see maxdb_get_server_version() - Returns the version of the MaxDB server\nas an integer\n
maxdb_get_host_info maxdb_get_host_info(resource $link) [string]\nReturns a string representing the type of connection used. Object oriented\nstyle\n@return (PECL maxdb >= 1.0)\n@see maxdb_get_proto_info() - Returns the version of the MaxDB protocol used\n
is_resource is_resource(mixed $var) [bool]\nFinds whether a variable is a resource. Finds whether the given variable is\na resource.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see The resource-type documentation\n@see get_resource_type() - Returns the resource type\n
is_scalar is_scalar(mixed $var) [bool]\nFinds whether a variable is a scalar. Finds whether the given variable is a\nscalar. Scalar variables are those containing an integer, float, string or\nboolean. Types array, object and resource are not scalar. Note: is_scalar()\ndoes not consider resource type values to be scalar as resources are abstract\ndatatypes which are currently based on integers. This implementation detail\nshould not be relied upon, as it may change.\n@param var The variable being evaluated.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_real() - Alias of is_float\n@see is_string() - Find whether the type of a variable is string\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_object() - Finds whether a variable is an object\n@see is_array() - Finds whether a variable is an array\n
is_soap_fault is_soap_fault(mixed $object) [bool]\nChecks if a SOAP call has failed. This function is useful to check if the SOAP\ncall failed, but without using exceptions. To use it, create a SoapClient\nobject with the `exceptions` option set to zero or FALSE. In this case, the\nSOAP method will return a special SoapFault object which encapsulates the fault\ndetails (faultcode, faultstring, faultactor and faultdetails). If `exceptions`\nis not set then SOAP call will throw an exception on error. is_soap_fault()\nchecks if the given parameter is a SoapFault object.\n@param object The object to test.\n@return (Unknown)\n@see SoapClient::SoapClient() - SoapClient constructor\n@see SoapFault::SoapFault() - SoapFault constructor\n
is_string is_string(mixed $var) [bool]\nFind whether the type of a variable is string. Finds whether the type given\nvariable is string.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_object() - Finds whether a variable is an object\n@see is_array() - Finds whether a variable is an array\n
is_subclass_of is_subclass_of(mixed $object, string $class_name) [bool]\nChecks if the object has this class as one of its parents. Checks if the given\n`object` has the class `class_name` as one of its parents.\n@param object A class name or an object instance\n@param class_name The class name\n@return (PHP 4, PHP 5)\n@note Note: Using this function will use any registered autoloaders if the\nclass is not already known.\n@see get_class() - Returns the name of the class of an object\n@see get_parent_class() - Retrieves the parent class name for object or class\n@see is_a() - Checks if the object is of this class or has this class as\none of its parents\n
is_uploaded_file is_uploaded_file(string $filename) [bool]\nTells whether the file was uploaded via HTTP POST. Returns TRUE if the file\nnamed by `filename` was uploaded via HTTP POST. This is useful to help ensure\nthat a malicious user hasn&#039;t tried to trick the script into working on\nfiles upon which it should not be working--for instance, /etc/passwd. This sort\nof check is especially important if there is any chance that anything done with\nuploaded files could reveal their contents to the user, or even to other users\non the same system. For proper working, the function is_uploaded_file() needs\nan argument like $_FILES['userfile']['tmp_name'], - the name of the uploaded\nfile on the client&#039;s machine $_FILES['userfile']['name'] does not work.\n@param filename The filename being checked.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see move_uploaded_file() - Moves an uploaded file to a new location\n@see $_FILES\n@see See Handling file uploads for a simple usage example.\n
is_writable is_writable(string $filename) [bool]\nTells whether the filename is writable. Returns TRUE if the `filename`\nexists and is writable. The filename argument may be a directory name\nallowing you to check if a directory is writable. Keep in mind that PHP\nmay be accessing the file as the user id that the web server runs as (often\n&#039;nobody&#039;). Safe mode limitations are not taken into account.\n@param filename The filename being checked.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_readable() - Tells whether a file exists and is readable\n@see file_exists() - Checks whether a file or directory exists\n@see fwrite() - Binary-safe file write\n
is_writeable is_writeable\nAlias of is_writable.\n
isset isset(mixed $var [, mixed $var [, $...]]) [bool]\nDetermine if a variable is set and is not NULL. Determine if a variable is\nset and is not NULL. If a variable has been unset with unset(), it will no\nlonger be set. isset() will return FALSE if testing a variable that has been\nset to NULL. Also note that a NULL byte (`&quot;\0&quot;`) is not equivalent\nto the PHP NULL constant. If multiple parameters are supplied then isset()\nwill return TRUE only if all of the parameters are set. Evaluation goes from\nleft to right and stops as soon as an unset variable is encountered.\n@param var The variable to be checked.\n@param var Another variable ..\n@param ...\n@return (PHP 4, PHP 5)\n@see empty() - Determine whether a variable is empty\n@see __isset\n@see unset() - Unset a given variable\n@see defined() - Checks whether a given named constant exists\n@see the type comparison tables\n@see array_key_exists() - Checks if the given key or index exists in the array\n@see is_null() - Finds whether a variable is NULL\n@see the error control @ operator\n
iterator_apply iterator_apply(Traversable $iterator, callback $function [,\narray $args]) [int]\nCall a function for every element in an iterator. Calls a function for every\nelement in an iterator.\n@param iterator The class to iterate over.\n@param function The callback function to call on every element. Note: The\nfunction must return TRUE in order to continue iterating over the `iterator`.\n@param args Arguments to pass to the callback function.\n@return (PHP 5 >= 5.1.0)\n@see array_walk() - Apply a user function to every member of an array\n
iterator_count iterator_count(Traversable $iterator) [int]\nCount the elements in an iterator. Count the elements in an iterator.\n@param iterator The iterator being counted.\n@return (PHP 5 >= 5.1.0)\n
iterator_to_array iterator_to_array(Traversable $iterator [, bool\n$use_keys=true]) [array]\nCopy the iterator into an array. Copy the elements of an iterator into\nan array.\n@param iterator The iterator being copied.\n@param use_keys Whether to use the iterator element keys as index.\n@return (PHP 5 >= 5.1.0)\n
java_last_exception_clear java_last_exception_clear(void) [void]\nClear last Java exception. Clears last Java exception.\n@return (PHP 4 >= 4.0.2)\n
java_last_exception_get java_last_exception_get(void) [object]\nGet last Java exception. Gets last Java exception.\n@return (PHP 4 >= 4.0.2)\n
JDDayOfWeek mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )\nReturns the day of the week. Returns the day of the week. Can return a string\nor an integer depending on the mode.\n@param julianday A julian day number as integer\n@param mode Calendar week modes Mode Meaning 0 (Default) Return the day\nnumber as an int (0=Sunday, 1=Monday, etc) 1 Returns string containing the\nday of week (English-Gregorian) 2 Return a string containing the abbreviated\nday of week (English-Gregorian)\n@return (PHP 4, PHP 5)\n
JDMonthName string jdmonthname ( int $julianday , int $mode )\nReturns a month name. Returns a string containing a month name. `mode` tells\nthis function which calendar to convert the Julian Day Count to, and what\ntype of month names are to be returned. Calendar modes Mode Meaning Values 0\nGregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov,\nDec 1 Gregorian January, February, March, April, May, June, July, August,\nSeptember, October, November, December 2 Julian - abbreviated Jan, Feb,\nMar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 3 Julian January, February,\nMarch, April, May, June, July, August, September, October, November, December\n4 Jewish Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar,\nSivan, Tammuz, Av, Elul 5 French Republican Vendemiaire, Brumaire, Frimaire,\nNivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor,\nFructidor, Extra\n@param jday The Julian Day to operate on\n@param calendar The calendar to take the month name from\n@return (PHP 4, PHP 5)\n
JDToFrench string jdtofrench ( int $juliandaycount )\nConverts a Julian Day Count to the French Republican Calendar. Converts a\nJulian Day Count to the French Republican Calendar.\n@param julianday A julian day number as integer\n@return (PHP 4, PHP 5)\n@see frenchtojd() - Converts a date from the French Republican Calendar to\na Julian Day Count\n@see cal_from_jd() - Converts from Julian Day Count to a supported calendar\n
JDToGregorian string jdtogregorian ( int $julianday )\nConverts Julian Day Count to Gregorian date. Converts Julian Day\nCount to a string containing the Gregorian date in the format of\n&quot;month/day/year&quot;.\n@param julianday A julian day number as integer\n@return (PHP 4, PHP 5)\n@see gregoriantojd() - Converts a Gregorian date to Julian Day Count\n@see cal_from_jd() - Converts from Julian Day Count to a supported calendar\n
jdtojewish jdtojewish(int $juliandaycount [, bool $hebrew=false [, int $fl=0]])\n[string]\nConverts a Julian day count to a Jewish calendar date. Converts a Julian\nDay Count to the Jewish Calendar.\n@param julianday A julian day number as integer\n@param hebrew If the `hebrew` parameter is set to TRUE, the `fl` parameter\nis used for Hebrew, string based, output format.\n@param fl The available formats are: CAL_JEWISH_ADD_ALAFIM_GERESH,\nCAL_JEWISH_ADD_ALAFIM, CAL_JEWISH_ADD_GERESHAYIM.\n@return (PHP 4, PHP 5)\n@see jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count\n@see cal_from_jd() - Converts from Julian Day Count to a supported calendar\n
JDToJulian string jdtojulian ( int $julianday )\nConverts a Julian Day Count to a Julian Calendar Date. Converts Julian\nDay Count to a string containing the Julian Calendar Date in the format of\n&quot;month/day/year&quot;.\n@param julianday A julian day number as integer\n@return (PHP 4, PHP 5)\n@see juliantojd() - Converts a Julian Calendar date to Julian Day Count\n@see cal_from_jd() - Converts from Julian Day Count to a supported calendar\n
jdtounix jdtounix(int $jday) [int]\nConvert Julian Day to Unix timestamp. This function will return a Unix\ntimestamp corresponding to the Julian Day given in `jday` or FALSE if `jday`\nis not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588\n&lt;= `jday` &lt;= 2465342 ). The time returned is localtime (and not GMT).\n@param jday A julian day number between 2440588 and 2465342.\n@return (PHP 4, PHP 5)\n@see unixtojd() - Convert Unix timestamp to Julian Day\n
JewishToJD int jewishtojd ( int $month , int $day , int $year )\nConverts a date in the Jewish Calendar to Julian Day Count. Although this\nfunction can handle dates all the way back to the year 1 (3761 B.C.), such\nuse may not be meaningful. The Jewish calendar has been in use for several\nthousand years, but in the early days there was no formula to determine the\nstart of a month. A new month was started when the new moon was first observed.\n@param month The month as a number from 1 to 13\n@param day The day as a number from 1 to 30\n@param year The year as a number between 1 and 9999\n@return (PHP 4, PHP 5)\n@see jdtojewish() - Converts a Julian day count to a Jewish calendar date\n@see cal_to_jd() - Converts from a supported calendar to Julian Day Count\n
join join\nAlias of implode.\n
jpeg2wbmp jpeg2wbmp(string $jpegname, string $wbmpname, int $dest_height,\nint $dest_width, int $threshold) [bool]\nConvert JPEG image file to WBMP image file. Converts a JPEG file into a\nWBMP file.\n@param jpegname Path to JPEG file.\n@param wbmpname Path to destination WBMP file.\n@param dest_height Destination image height.\n@param dest_width Destination image width.\n@param threshold Threshold value, between 0 and 8 (inclusive).\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: WBMP support is only available if PHP was compiled against GD-1.8\nor later.\n@note Note: JPEG support is only available if PHP was compiled against GD-1.8\nor later.\n@see png2wbmp() - Convert PNG image file to WBMP image file\n
json_decode json_decode(string $json [, bool $assoc=false [, int $depth=512\n[, int $options=0]]]) [mixed]\nDecodes a JSON string. Takes a JSON encoded string and converts it into a\nPHP variable.\n@param json The `json` string being decoded. This function only works with\nUTF-8 encoded data.\n@param assoc When TRUE, returned objects will be converted into associative\narrays.\n@param depth User specified recursion depth.\n@param options Bitmask of JSON decode options. Currently only\nJSON_BIGINT_AS_STRING is supported (default is to cast large integers as\nfloats) This change exists in the development version of PHP, and will\nprobably exist after 5.3.\n@return (PHP 5 >= 5.2.0, PECL json >= 1.2.0)\n@note Note: The JSON spec is not JavaScript, but a subset of JavaScript.\n@note Note: In the event of a failure to decode, json_last_error() can be\nused to determine the exact nature of the error.\n@see json_encode() - Returns the JSON representation of a value\n@see json_last_error() - Returns the last error occurred\n
json_encode json_encode(mixed $value [, int $options=0]) [string]\nReturns the JSON representation of a value. Returns a string containing the\nJSON representation of `value`.\n@param value The `value` being encoded. Can be any type except a resource. This\nfunction only works with UTF-8 encoded data.\n@param options Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP,\nJSON_HEX_APOS, JSON_FORCE_OBJECT.\n@return (PHP 5 >= 5.2.0, PECL json >= 1.2.0)\n@see json_decode() - Decodes a JSON string\n
json_last_error json_last_error(void) [int]\nReturns the last error occurred. Returns the last error (if any) occurred\nby last JSON parsing.\n@return (PHP 5 >= 5.3.0)\n@see json_decode() - Decodes a JSON string\n
judy_type judy_type(Judy $array) [int]\nReturn the type of a Judy array. judy_type() return an integer corresponding\nto the Judy type of the specified Judy `array`.\n@param array The Judy Array to test.\n@return (PECL judy >= 0.1.1)\n
judy_version judy_version(void) [string]\nReturn or print the current PHP Judy version. Return a string of the PHP\nJudy version. If the return value is not used, the string will be printed.\n@return (PECL judy >= 0.1.1)\n
JulianToJD int juliantojd ( int $month , int $day , int $year )\nConverts a Julian Calendar date to Julian Day Count. Valid Range for Julian\nCalendar 4713 B.C. to 9999 A.D. Although this function can handle dates all\nthe way back to 4713 B.C., such use may not be meaningful. The calendar\nwas created in 46 B.C., but the details did not stabilize until at least\n8 A.D., and perhaps as late at the 4th century. Also, the beginning of a\nyear varied from one culture to another - not all accepted January as the\nfirst month. Remember, the current calendar system being used worldwide is\nthe Gregorian calendar. gregoriantojd() can be used to convert such dates\nto their Julian Day count.\n@param month The month as a number from 1 (for January) to 12 (for December)\n@param day The day as a number from 1 to 31\n@param year The year as a number between -4713 and 9999\n@return (PHP 4, PHP 5)\n@see jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date\n@see cal_to_jd() - Converts from a supported calendar to Julian Day Count\n
kadm5_chpass_principal kadm5_chpass_principal(resource $handle, string\n$principal, string $password) [bool]\nChanges the principal's password. kadm5_chpass_principal() sets the new\npassword `password` for the `principal`.\n@param handle A KADM5 handle.\n@param principal The principal.\n@param password The new password.\n@return (PECL kadm5 >= 0.2.3)\n
kadm5_create_principal kadm5_create_principal(resource $handle, string\n$principal [, string $password [, array $options]]) [bool]\nCreates a kerberos principal with the given parameters. Creates a `principal`\nwith the given `password`.\n@param handle A KADM5 handle.\n@param principal The principal.\n@param password If `password` is omitted or is NULL, a random key will\nbe generated.\n@param options It is possible to specify several optional parameters within the\narray `options`. Allowed are the following options: KADM5_PRINC_EXPIRE_TIME,\nKADM5_PW_EXPIRATION, KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_KVNO,\nKADM5_POLICY, KADM5_CLEARPOLICY, KADM5_MAX_RLIFE.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_modify_principal() - Modifies a kerberos principal with the\ngiven parameters\n@see kadm5_delete_principal() - Deletes a kerberos principal\n
kadm5_delete_principal kadm5_delete_principal(resource $handle, string\n$principal) [bool]\nDeletes a kerberos principal. Removes the `principal` from the Kerberos\ndatabase.\n@param handle A KADM5 handle.\n@param principal The removed principal.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_modify_principal() - Modifies a kerberos principal with the\ngiven parameters\n@see kadm5_create_principal() - Creates a kerberos principal with the given\nparameters\n
kadm5_destroy kadm5_destroy(resource $handle) [bool]\nCloses the connection to the admin server and releases all related\nresources. Closes the connection to the admin server and releases all\nrelated resources.\n@param handle A KADM5 handle.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_init_with_password() - Opens a connection to the KADM5 library\n
kadm5_flush kadm5_flush(resource $handle) [bool]\nFlush all changes to the Kerberos database. Flush all changes to the Kerberos\ndatabase, leaving the connection to the Kerberos admin server open.\n@param handle A KADM5 handle.\n@return (PECL kadm5 >= 0.2.3)\n
kadm5_get_policies kadm5_get_policies(resource $handle) [array]\nGets all policies from the Kerberos database. Gets an array containing the\npolicies&#039;s names.\n@param handle A KADM5 handle.\n@return (PECL kadm5 >= 0.2.3)\n
kadm5_get_principal kadm5_get_principal(resource $handle, string $principal)\n[array]\nGets the principal's entries from the Kerberos database. Gets the\nprincipal&#039;s entries from the Kerberos database.\n@param handle A KADM5 handle.\n@param principal The principal.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_get_principals() - Gets all principals from the Kerberos database\n
kadm5_get_principals kadm5_get_principals(resource $handle) [array]\nGets all principals from the Kerberos database. kadm5_get_principals()\nreturns an array containing the principals&#039;s names.\n@param handle A KADM5 handle.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_get_principal() - Gets the principal's entries from the Kerberos\ndatabase\n
kadm5_init_with_password kadm5_init_with_password(string $admin_server,\nstring $realm, string $principal, string $password) [resource]\nOpens a connection to the KADM5 library. Opens a connection with the KADM5\nlibrary using the `principal` and the given `password` to obtain initial\ncredentials from the `admin_server`.\n@param admin_server The server.\n@param realm Defines the authentication domain for the connection.\n@param principal The principal.\n@param password If `password` is omitted or is NULL, a random key will\nbe generated.\n@return (PECL kadm5 >= 0.2.3)\n@note Note: Connection should be closed after use with kadm5_destroy().\n@see kadm5_destroy() - Closes the connection to the admin server and releases\nall related resources\n
kadm5_modify_principal kadm5_modify_principal(resource $handle, string\n$principal, array $options) [bool]\nModifies a kerberos principal with the given parameters. Modifies a `principal`\naccording to the given `options`.\n@param handle A KADM5 handle.\n@param principal The principal.\n@param options It is possible to specify several optional parameters within the\narray `options`. Allowed are the following options: KADM5_PRINC_EXPIRE_TIME,\nKADM5_PW_EXPIRATION, KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_KVNO,\nKADM5_POLICY, KADM5_CLEARPOLICY, KADM5_MAX_RLIFE. KADM5_FAIL_AUTH_COUNT.\n@return (PECL kadm5 >= 0.2.3)\n@see kadm5_create_principal() - Creates a kerberos principal with the given\nparameters\n@see kadm5_delete_principal() - Deletes a kerberos principal\n
key key(array &$array) [mixed]\nFetch a key from an array. key() returns the index element of the current\narray position.\n@param array The array.\n@return (PHP 4, PHP 5)\n@see current() - Return the current element in an array\n@see next() - Advance the internal array pointer of an array\n
krsort krsort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array by key in reverse order. Sorts an array by key in reverse\norder, maintaining key to data correlations. This is useful mainly for\nassociative arrays.\n@param array The input array.\n@param sort_flags You may modify the behavior of the sort using the optional\nparameter `sort_flags`, for details see sort().\n@return (PHP 4, PHP 5)\n@see arsort() - Sort an array in reverse order and maintain index association\n@see ksort() - Sort an array by key\n@see The comparison of array sorting functions\n
ksort ksort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array by key. Sorts an array by key, maintaining key to data\ncorrelations. This is useful mainly for associative arrays.\n@param array The input array.\n@param sort_flags You may modify the behavior of the sort using the optional\nparameter `sort_flags`, for details see sort().\n@return (PHP 4, PHP 5)\n@see asort() - Sort an array and maintain index association\n@see The comparison of array sorting functions\n
lcfirst lcfirst(string $str) [string]\nMake a string's first character lowercase. Returns a string with the first\ncharacter of `str` , lowercased if that character is alphabetic. Note that\n&#039;alphabetic&#039; is determined by the current locale. For instance,\nin the default &quot;C&quot; locale characters such as umlaut-a (ä) will\nnot be converted.\n@param str The input string.\n@return (PHP 5 >= 5.3.0)\n@see ucfirst() - Make a string's first character uppercase\n@see strtolower() - Make a string lowercase\n@see strtoupper() - Make a string uppercase\n@see ucwords() - Uppercase the first character of each word in a string\n
lcg_value lcg_value(void) [float]\nCombined linear congruential generator. lcg_value() returns a pseudo random\nnumber in the range of (0, 1). The function combines two CGs with periods\nof 2^31 - 85 and 2^31 - 249. The period of this function is equal to the\nproduct of both primes.\n@return (PHP 4, PHP 5)\n@see rand() - Generate a random integer\n@see mt_rand() - Generate a better random value\n
lchgrp lchgrp(string $filename, mixed $group) [bool]\nChanges group ownership of symlink. Attempts to change the group of the\nsymlink `filename` to `group`. Only the superuser may change the group of\na symlink arbitrarily; other users may change the group of a symlink to any\ngroup of which that user is a member.\n@param filename Path to the symlink.\n@param group The group specified by name or number.\n@return (PHP 5 >= 5.1.2)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n@note Note: This function is not implemented on Windows platforms.\n@see chgrp() - Changes file group\n@see lchown() - Changes user ownership of symlink\n@see chown() - Changes file owner\n@see chmod() - Changes file mode\n
lchown lchown(string $filename, mixed $user) [bool]\nChanges user ownership of symlink. Attempts to change the owner of the\nsymlink `filename` to user `user`. Only the superuser may change the owner\nof a symlink.\n@param filename Path to the file.\n@param user User name or number.\n@return (PHP 5 >= 5.1.2)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n@note Note: This function is not implemented on Windows platforms.\n@see chown() - Changes file owner\n@see lchgrp() - Changes group ownership of symlink\n@see chgrp() - Changes file group\n@see chmod() - Changes file mode\n
ldap_8859_to_t61 ldap_8859_to_t61(string $value) [string]\nTranslate 8859 characters to t61 characters. Translate `ISO-8859` characters\nto `t61` characters. This function is useful if you have to talk to a legacy\n`LDAPv2` server.\n@param value The text to be translated.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see ldap_t61_to_8859() - Translate t61 characters to 8859 characters\n
ldap_add ldap_add(resource $link_identifier, string $dn, array $entry) [bool]\nAdd entries to LDAP directory. Add entries in the LDAP directory.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see ldap_delete() - Delete an entry from a directory\n
ldap_bind ldap_bind(resource $link_identifier [, string $bind_rdn=NULL [,\nstring $bind_password=NULL]]) [bool]\nBind to LDAP directory. Binds to the LDAP directory with specified RDN\nand password.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param bind_rdn\n@param bind_password\n@return (PHP 4, PHP 5)\n@see ldap_unbind() - Unbind from LDAP directory\n
ldap_close ldap_close\nAlias of ldap_unbind.\n
ldap_compare ldap_compare(resource $link_identifier, string $dn, string\n$attribute, string $value) [mixed]\nCompare value of attribute found in entry specified with DN. Compare `value`\nof `attribute` with value of same attribute in an LDAP directory entry.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param attribute The attribute name.\n@param value The compared value.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
ldap_connect ldap_connect([string $hostname=NULL [, int $port=389]]) [resource]\nConnect to an LDAP server. Establishes a connection to a LDAP server on a\nspecified `hostname` and `port`.\n@param hostname If you are using OpenLDAP 2.x.x you can specify a URL instead\nof the hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL support,\nconfigure PHP with SSL, and set this parameter as `ldaps://hostname/`.\n@param port The port to connect to. Not used when using URLs.\n@return (PHP 4, PHP 5)\n@see ldap_bind() - Bind to LDAP directory\n
ldap_count_entries ldap_count_entries(resource $link_identifier, resource\n$result_identifier) [int]\nCount the number of entries in a search. Returns the number of entries stored\nin the result of previous search operations.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_identifier The internal LDAP result.\n@return (PHP 4, PHP 5)\n
ldap_delete ldap_delete(resource $link_identifier, string $dn) [bool]\nDelete an entry from a directory. Deletes a particular entry in LDAP directory.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@return (PHP 4, PHP 5)\n@see ldap_add() - Add entries to LDAP directory\n
ldap_dn2ufn ldap_dn2ufn(string $dn) [string]\nConvert DN to User Friendly Naming format. Turns the specified `dn`, into\na more user-friendly form, stripping off type names.\n@param dn The distinguished name of an LDAP entity.\n@return (PHP 4, PHP 5)\n
ldap_err2str ldap_err2str(int $errno) [string]\nConvert LDAP error number into string error message. Returns the string\nerror message explaining the error number `errno`. While LDAP errno numbers\nare standardized, different libraries return different or even localized\ntextual error messages. Never check for a specific error message text,\nbut always use an error number to check.\n@param errno The error number.\n@return (PHP 4, PHP 5)\n@see ldap_errno() - Return the LDAP error number of the last LDAP command\n@see ldap_error() - Return the LDAP error message of the last LDAP command\n
ldap_errno ldap_errno(resource $link_identifier) [int]\nReturn the LDAP error number of the last LDAP command. Returns the standardized\nerror number returned by the last LDAP command. This number can be converted\ninto a textual error message using ldap_err2str().\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@return (PHP 4, PHP 5)\n@see ldap_err2str() - Convert LDAP error number into string error message\n@see ldap_error() - Return the LDAP error message of the last LDAP command\n
ldap_error ldap_error(resource $link_identifier) [string]\nReturn the LDAP error message of the last LDAP command. Returns the string\nerror message explaining the error generated by the last LDAP command for the\ngiven `link_identifier`. While LDAP errno numbers are standardized, different\nlibraries return different or even localized textual error messages. Never\ncheck for a specific error message text, but always use an error number to\ncheck. Unless you lower your warning level in your php.ini sufficiently or\nprefix your LDAP commands with `@` (at) characters to suppress warning output,\nthe errors generated will also show up in your HTML output.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@return (PHP 4, PHP 5)\n@see ldap_err2str() - Convert LDAP error number into string error message\n@see ldap_errno() - Return the LDAP error number of the last LDAP command\n
ldap_explode_dn ldap_explode_dn(string $dn, int $with_attrib) [array]\nSplits DN into its component parts. Splits the DN returned by ldap_get_dn()\nand breaks it up into its component parts. Each part is known as Relative\nDistinguished Name, or RDN.\n@param dn The distinguished name of an LDAP entity.\n@param with_attrib Used to request if the RDNs are returned with only\nvalues or their attributes as well. To get RDNs with the attributes (i.e. in\nattribute=value format) set `with_attrib` to 0 and to get only values set\nit to 1.\n@return (PHP 4, PHP 5)\n
ldap_first_attribute ldap_first_attribute(resource $link_identifier, resource\n$result_entry_identifier) [string]\nReturn first attribute. Gets the first attribute in the given entry. Remaining\nattributes are retrieved by calling ldap_next_attribute() successively. Similar\nto reading entries, attributes are also read one by one from a particular\nentry.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@param ber_identifier `ber_identifier` is the identifier to internal memory\nlocation pointer. It is passed by reference. The same `ber_identifier`\nis passed to ldap_next_attribute() , which modifies that pointer. Note:\nThis parameter is no longer used as this is now handled automatically\nby PHP. For backwards compatibility PHP will not throw an error if this\nparameter is passed.\n@return (PHP 4, PHP 5)\n@see ldap_next_attribute() - Get the next attribute in result\n@see ldap_get_attributes() - Get attributes from a search result entry\n
ldap_first_entry ldap_first_entry(resource $link_identifier, resource\n$result_identifier) [resource]\nReturn first result id. Returns the entry identifier for first entry in the\nresult. This entry identifier is then supplied to ldap_next_entry() routine\nto get successive entries from the result. Entries in the LDAP result are\nread sequentially using the ldap_first_entry() and ldap_next_entry() functions.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_identifier\n@return (PHP 4, PHP 5)\n@see ldap_get_entries() - Get all result entries\n
ldap_first_reference ldap_first_reference(resource $link, resource $result)\n[resource]\nReturn first reference.\n
ldap_free_result ldap_free_result(resource $result_identifier) [bool]\nFree result memory. Frees up the memory allocated internally to store\nthe result. All result memory will be automatically freed when the script\nterminates. Typically all the memory allocated for the LDAP result gets freed\nat the end of the script. In case the script is making successive searches\nwhich return large result sets, ldap_free_result() could be called to keep\nthe runtime memory usage by the script low.\n@param result_identifier\n@return (PHP 4, PHP 5)\n
ldap_get_attributes ldap_get_attributes(resource $link_identifier, resource\n$result_entry_identifier) [array]\nGet attributes from a search result entry. Reads attributes and values from\nan entry in the search result.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@return (PHP 4, PHP 5)\n@see ldap_first_attribute() - Return first attribute\n@see ldap_next_attribute() - Get the next attribute in result\n
ldap_get_dn ldap_get_dn(resource $link_identifier, resource\n$result_entry_identifier) [string]\nGet the DN of a result entry. Finds out the DN of an entry in the result.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@return (PHP 4, PHP 5)\n
ldap_get_entries ldap_get_entries(resource $link_identifier, resource\n$result_identifier) [array]\nGet all result entries. Reads multiple entries from the given result, and\nthen reading the attributes and multiple values.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_identifier\n@return (PHP 4, PHP 5)\n@see ldap_first_entry() - Return first result id\n@see ldap_next_entry() - Get next result entry\n
ldap_get_option ldap_get_option(resource $link_identifier, int $option,\nmixed &$retval) [bool]\nGet the current value for given option. Sets `retval` to the value of the\nspecified option.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param option The parameter `option` can be one of: Option Type\nLDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT\ninteger LDAP_OPT_NETWORK_TIMEOUT integer LDAP_OPT_PROTOCOL_VERSION integer\nLDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool\nLDAP_OPT_HOST_NAME string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN\nstring LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array\n@param retval This will be set to the option value.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: This function is only available when using OpenLDAP 2.x.x OR\nNetscape Directory SDK x.x.\n@see ldap_set_option() - Set the value of the given option\n
ldap_get_values_len ldap_get_values_len(resource $link_identifier, resource\n$result_entry_identifier, string $attribute) [array]\nGet all binary values from a result entry. Reads all the values of the\nattribute in the entry in the result. This function is used exactly like\nldap_get_values() except that it handles binary data and not string data.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@param attribute\n@return (PHP 4, PHP 5)\n@see ldap_get_values() - Get all values from a result entry\n
ldap_get_values ldap_get_values(resource $link_identifier, resource\n$result_entry_identifier, string $attribute) [array]\nGet all values from a result entry. Reads all the values of the attribute\nin the entry in the result. This call needs a `result_entry_identifier`, so\nneeds to be preceded by one of the ldap search calls and one of the calls to\nget an individual entry. You application will either be hard coded to look\nfor certain attributes (such as &quot;surname&quot; or &quot;mail&quot;)\nor you will have to use the ldap_get_attributes() call to work out what\nattributes exist for a given entry.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@param attribute\n@return (PHP 4, PHP 5)\n@see ldap_get_values_len() - Get all binary values from a result entry\n
ldap_list ldap_list(resource $link_identifier, string $base_dn, string $filter\n[, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit\n[, int $deref]]]]]) [resource]\nSingle-level search. Performs the search for a specified `filter` on the\ndirectory with the scope LDAP_SCOPE_ONELEVEL. LDAP_SCOPE_ONELEVEL means that\nthe search should only return information that is at the level immediately\nbelow the `base_dn` given in the call. (Equivalent to typing &quot;ls&quot;\nand getting a list of files and folders in the current working directory.)\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param base_dn The base DN for the directory.\n@param filter\n@param attributes An array of the required attributes,\ne.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;). Note that the\n&quot;dn&quot; is always returned irrespective of which attributes types\nare requested. Using this parameter is much more efficient than the default\naction (which is to return all attributes and their associated values). The\nuse of this parameter should therefore be considered good practice.\n@param attrsonly Should be set to 1 if only attribute types are wanted. If\nset to 0 both attributes types and attribute values are fetched which is\nthe default behaviour.\n@param sizelimit Enables you to limit the count of entries fetched. Setting\nthis to 0 means no limit. Note: This parameter can NOT override server-side\npreset sizelimit. You can set it lower though. Some directory server hosts\nwill be configured to return no more than a preset number of entries. If\nthis occurs, the server will indicate that it has only returned a partial\nresults set. This also occurs if you use this parameter to limit the count\nof fetched entries.\n@param timelimit Sets the number of seconds how long is spend on the\nsearch. Setting this to 0 means no limit. Note: This parameter can NOT\noverride server-side preset timelimit. You can set it lower though.\n@param deref Specifies how aliases should be handled during the search. It\ncan be one of the following: LDAP_DEREF_NEVER - (default) aliases are never\ndereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the\nsearch but not when locating the base object of the search. LDAP_DEREF_FINDING\n- aliases should be dereferenced when locating the base object but not during\nthe search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.\n@return (PHP 4, PHP 5)\n@see ldap_search() - Search LDAP tree\n
ldap_mod_add ldap_mod_add(resource $link_identifier, string $dn, array $entry)\n[bool]\nAdd attribute values to current attributes. Adds one or more attributes to\nthe specified `dn`. It performs the modification at the attribute level\nas opposed to the object level. Object-level additions are done by the\nldap_add() function.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param entry\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see ldap_mod_del() - Delete attribute values from current attributes\n@see ldap_mod_replace() - Replace attribute values with new ones\n
ldap_mod_del ldap_mod_del(resource $link_identifier, string $dn, array $entry)\n[bool]\nDelete attribute values from current attributes. Removes one or more\nattributes from the specified `dn`. It performs the modification at the\nattribute level as opposed to the object level. Object-level deletions are\ndone by the ldap_delete() function.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param entry\n@return (PHP 4, PHP 5)\n@see ldap_mod_add() - Add attribute values to current attributes\n@see ldap_mod_replace() - Replace attribute values with new ones\n
ldap_mod_replace ldap_mod_replace(resource $link_identifier, string $dn,\narray $entry) [bool]\nReplace attribute values with new ones. Replaces one or more attributes\nfrom the specified `dn`. It performs the modification at the attribute level\nas opposed to the object level. Object-level modifications are done by the\nldap_modify() function.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param entry\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see ldap_mod_del() - Delete attribute values from current attributes\n@see ldap_mod_add() - Add attribute values to current attributes\n
ldap_modify ldap_modify(resource $link_identifier, string $dn, array $entry)\n[bool]\nModify an LDAP entry. Modify the existing entries in the LDAP directory. The\nstructure of the entry is same as in ldap_add().\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param entry\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see ldap_rename() - Modify the name of an entry\n
ldap_next_attribute ldap_next_attribute(resource $link_identifier, resource\n$result_entry_identifier) [string]\nGet the next attribute in result. Retrieves the attributes in an entry. The\nfirst call to ldap_next_attribute() is made with the `result_entry_identifier`\nreturned from ldap_first_attribute().\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@param ber_identifier The internal state of the pointer is maintained by this\nparameter. Note: This parameter is no longer used as this is now handled\nautomatically by PHP. For backwards compatibility PHP will not throw an\nerror if this parameter is passed.\n@return (PHP 4, PHP 5)\n@see ldap_get_attributes() - Get attributes from a search result entry\n
ldap_next_entry ldap_next_entry(resource $link_identifier, resource\n$result_entry_identifier) [resource]\nGet next result entry. Retrieve the entries stored in the result. Successive\ncalls to the ldap_next_entry() return entries one by one till there are no\nmore entries. The first call to ldap_next_entry() is made after the call\nto ldap_first_entry() with the `result_entry_identifier` as returned from\nthe ldap_first_entry().\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param result_entry_identifier\n@return (PHP 4, PHP 5)\n@see ldap_get_entries() - Get all result entries\n
ldap_next_reference ldap_next_reference(resource $link, resource $entry)\n[resource]\nGet next reference.\n
ldap_parse_reference ldap_parse_reference(resource $link, resource $entry,\narray &$referrals) [bool]\nExtract information from reference entry.\n
ldap_parse_result ldap_parse_result(resource $link, resource $result, int\n&$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals]]])\n[bool]\nExtract information from result.\n
ldap_read ldap_read(resource $link_identifier, string $base_dn, string $filter\n[, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit\n[, int $deref]]]]]) [resource]\nRead an entry. Performs the search for a specified `filter` on the directory\nwith the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from\nthe directory.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param base_dn The base DN for the directory.\n@param filter An empty filter is not allowed. If you want to retrieve\nabsolutely all information for this entry, use a filter of `objectClass=*`. If\nyou know which entry types are used on the directory server, you might use\nan appropriate filter such as `objectClass=inetOrgPerson`.\n@param attributes An array of the required attributes,\ne.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;). Note that the\n&quot;dn&quot; is always returned irrespective of which attributes types\nare requested. Using this parameter is much more efficient than the default\naction (which is to return all attributes and their associated values). The\nuse of this parameter should therefore be considered good practice.\n@param attrsonly Should be set to 1 if only attribute types are wanted. If\nset to 0 both attributes types and attribute values are fetched which is\nthe default behaviour.\n@param sizelimit Enables you to limit the count of entries fetched. Setting\nthis to 0 means no limit. Note: This parameter can NOT override server-side\npreset sizelimit. You can set it lower though. Some directory server hosts\nwill be configured to return no more than a preset number of entries. If\nthis occurs, the server will indicate that it has only returned a partial\nresults set. This also occurs if you use this parameter to limit the count\nof fetched entries.\n@param timelimit Sets the number of seconds how long is spend on the\nsearch. Setting this to 0 means no limit. Note: This parameter can NOT\noverride server-side preset timelimit. You can set it lower though.\n@param deref Specifies how aliases should be handled during the search. It\ncan be one of the following: LDAP_DEREF_NEVER - (default) aliases are never\ndereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the\nsearch but not when locating the base object of the search. LDAP_DEREF_FINDING\n- aliases should be dereferenced when locating the base object but not during\nthe search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.\n@return (PHP 4, PHP 5)\n
ldap_rename ldap_rename(resource $link_identifier, string $dn, string $newrdn,\nstring $newparent, bool $deleteoldrdn) [bool]\nModify the name of an entry. The entry specified by `dn` is renamed/moved.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param dn The distinguished name of an LDAP entity.\n@param newrdn The new RDN.\n@param newparent The new parent/superior entry.\n@param deleteoldrdn If TRUE the old RDN value(s) is removed, else the old\nRDN value(s) is retained as non-distinguished values of the entry.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: This function currently only works with LDAPv3. You may have to\nuse ldap_set_option() prior to binding to use LDAPv3. This function is only\navailable when using OpenLDAP 2.x.x OR Netscape Directory SDK x.x.\n@see ldap_modify() - Modify an LDAP entry\n
ldap_sasl_bind ldap_sasl_bind(resource $link [, string $binddn=NULL [, string\n$password=NULL [, string $sasl_mech=NULL [, string $sasl_realm=NULL [, string\n$sasl_authc_id=NULL [, string $sasl_authz_id=NULL [, string $props=NULL]]]]]]])\n[bool]\nBind to LDAP directory using SASL.\n@return (PHP 5)\n@note Note: Requirement ldap_sasl_bind() requires SASL support (sasl.h). Be\nsure `--with-ldap-sasl` is used when configuring PHP otherwise this function\nwill be undefined.\n
ldap_search ldap_search(resource $link_identifier, string $base_dn, string\n$filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int\n$timelimit [, int $deref]]]]]) [resource]\nSearch LDAP tree. Performs the search for a specified filter on the directory\nwith the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the\nentire directory. From 4.0.5 on it&#039;s also possible to do parallel\nsearches. To do this you use an array of link identifiers, rather than a\nsingle identifier, as the first argument. If you don&#039;t want the same\nbase DN and the same filter for all the searches, you can also use an array\nof base DNs and/or an array of filters. Those arrays must be of the same size\nas the link identifier array since the first entries of the arrays are used\nfor one search, the second entries are used for another, and so on. When\ndoing parallel searches an array of search result identifiers is returned,\nexcept in case of error, then the entry corresponding to the search will\nbe FALSE. This is very much like the value normally returned, except that a\nresult identifier is always returned when a search was made. There are some\nrare cases where the normal search returns FALSE while the parallel search\nreturns an identifier.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param base_dn The base DN for the directory.\n@param filter The search filter can be simple or advanced, using boolean\noperators in the format described in the LDAP documentation (see the &raquo;\nNetscape Directory SDK for full information on filters).\n@param attributes An array of the required attributes,\ne.g. `array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;)`. Note that\nthe &quot;dn&quot; is always returned irrespective of which attributes types\nare requested. Using this parameter is much more efficient than the default\naction (which is to return all attributes and their associated values). The\nuse of this parameter should therefore be considered good practice.\n@param attrsonly Should be set to 1 if only attribute types are wanted. If\nset to 0 both attributes types and attribute values are fetched which is\nthe default behaviour.\n@param sizelimit Enables you to limit the count of entries fetched. Setting\nthis to 0 means no limit. Note: This parameter can NOT override server-side\npreset sizelimit. You can set it lower though. Some directory server hosts\nwill be configured to return no more than a preset number of entries. If\nthis occurs, the server will indicate that it has only returned a partial\nresults set. This also occurs if you use this parameter to limit the count\nof fetched entries.\n@param timelimit Sets the number of seconds how long is spend on the\nsearch. Setting this to 0 means no limit. Note: This parameter can NOT\noverride server-side preset timelimit. You can set it lower though.\n@param deref Specifies how aliases should be handled during the search. It\ncan be one of the following: LDAP_DEREF_NEVER - (default) aliases are never\ndereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the\nsearch but not when locating the base object of the search. LDAP_DEREF_FINDING\n- aliases should be dereferenced when locating the base object but not during\nthe search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.\n@return (PHP 4, PHP 5)\n
ldap_set_option ldap_set_option(resource $link_identifier, int $option,\nmixed $newval) [bool]\nSet the value of the given option. Sets the value of the specified option\nto be `newval`.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@param option The parameter `option` can be one of: Option Type Available\nsince LDAP_OPT_DEREF integer &nbsp; LDAP_OPT_SIZELIMIT integer &nbsp;\nLDAP_OPT_TIMELIMIT integer &nbsp; LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0\nLDAP_OPT_PROTOCOL_VERSION integer &nbsp; LDAP_OPT_ERROR_NUMBER integer &nbsp;\nLDAP_OPT_REFERRALS bool &nbsp; LDAP_OPT_RESTART bool &nbsp; LDAP_OPT_HOST_NAME\nstring &nbsp; LDAP_OPT_ERROR_STRING string &nbsp; LDAP_OPT_MATCHED_DN string\n&nbsp; LDAP_OPT_SERVER_CONTROLS array &nbsp; LDAP_OPT_CLIENT_CONTROLS array\n&nbsp; LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list\nof controls, this means that the value must be an array of controls. A control\nconsists of an oid identifying the control, an optional value, and an optional\nflag for criticality. In PHP a control is given by an array containing an\nelement with the key oid and string value, and two optional elements. The\noptional elements are key value with string value and key iscritical with\nboolean value. iscritical defaults to FALSE if not supplied. See &raquo;\ndraft-ietf-ldapext-ldap-c-api-xx.txt for details. See also the second\nexample below.\n@param newval The new value for the specified `option`.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: This function is only available when using OpenLDAP 2.x.x OR\nNetscape Directory SDK x.x.\n@see ldap_get_option() - Get the current value for given option\n
ldap_set_rebind_proc ldap_set_rebind_proc(resource $link, callback $callback)\n[bool]\nSet a callback function to do re-binds on referral chasing.\n
ldap_sort ldap_sort(resource $link, resource $result, string $sortfilter)\n[bool]\nSort LDAP result entries.\n
ldap_start_tls ldap_start_tls(resource $link) [bool]\nStart TLS.\n
ldap_t61_to_8859 ldap_t61_to_8859(string $value) [string]\nTranslate t61 characters to 8859 characters.\n
ldap_unbind ldap_unbind(resource $link_identifier) [bool]\nUnbind from LDAP directory. Unbinds from the LDAP directory.\n@param link_identifier An LDAP link identifier, returned by ldap_connect().\n@return (PHP 4, PHP 5)\n@see ldap_bind() - Bind to LDAP directory\n
levenshtein levenshtein(string $str1, string $str2) [int]\nCalculate Levenshtein distance between two strings. The Levenshtein distance\nis defined as the minimal number of characters you have to replace, insert\nor delete to transform `str1` into `str2`. The complexity of the algorithm\nis `O(m*n)`, where `n` and `m` are the length of `str1` and `str2` (rather\ngood when compared to similar_text(), which is O(max(n,m)**3), but still\nexpensive). In its simplest form the function will take only the two strings\nas parameter and will calculate just the number of insert, replace and delete\noperations needed to transform `str1` into `str2`. A second variant will\ntake three additional parameters that define the cost of insert, replace\nand delete operations. This is more general and adaptive than variant one,\nbut not as efficient.\n@param str1 One of the strings being evaluated for Levenshtein distance.\n@param str2 One of the strings being evaluated for Levenshtein distance.\n@param cost_ins Defines the cost of insertion.\n@param cost_rep Defines the cost of replacement.\n@param cost_del Defines the cost of deletion.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see soundex() - Calculate the soundex key of a string\n@see similar_text() - Calculate the similarity between two strings\n@see metaphone() - Calculate the metaphone key of a string\n
libxml_clear_errors libxml_clear_errors(void) [void]\nClear libxml error buffer. libxml_clear_errors() clears the libxml error\nbuffer.\n@return (PHP 5 >= 5.1.0)\n@see libxml_get_errors() - Retrieve array of errors\n@see libxml_get_last_error() - Retrieve last error from libxml\n
libxml_disable_entity_loader libxml_disable_entity_loader([bool $disable=true])\n[bool]\nDisable the ability to load external entities. Disable/enable the ability\nto load external entities.\n@param disable Disable (TRUE) or enable (FALSE) libxml extensions (such as\nDOM, XMLWriter and XMLReader) to load external entities.\n@return (PHP 5 >= 5.2.11)\n@see libxml_use_internal_errors() - Disable libxml errors and allow user to\nfetch error information as needed\n@see The LIBXML_NONET constant\n
libxml_get_errors libxml_get_errors(void) [array]\nRetrieve array of errors. Retrieve array of errors.\n@return (PHP 5 >= 5.1.0)\n@see libxml_get_last_error() - Retrieve last error from libxml\n@see libxml_clear_errors() - Clear libxml error buffer\n
libxml_get_last_error libxml_get_last_error(void) [LibXMLError]\nRetrieve last error from libxml. Retrieve last error from libxml.\n@return (PHP 5 >= 5.1.0)\n@see libxml_get_errors() - Retrieve array of errors\n@see libxml_clear_errors() - Clear libxml error buffer\n
libxml_set_streams_context libxml_set_streams_context(resource\n$streams_context) [void]\nSet the streams context for the next libxml document load or write. Sets\nthe streams context for the next libxml document load or write.\n@param streams_context The stream context resource (created with\nstream_context_create())\n@return (PHP 5)\n@see stream_context_create() - Create a streams context\n
libxml_use_internal_errors libxml_use_internal_errors([bool $use_errors=false])\n[bool]\nDisable libxml errors and allow user to fetch error information as\nneeded. libxml_use_internal_errors() allows you to disable standard libxml\nerrors and enable user error handling.\n@param use_errors Whether to enable user error handling.\n@return (PHP 5 >= 5.1.0)\n@see libxml_clear_errors() - Clear libxml error buffer\n@see libxml_get_errors() - Retrieve array of errors\n
link link(string $target, string $link) [bool]\nCreate a hard link. link() creates a hard link.\n@param target Target of the link.\n@param link The link name.\n@return (PHP 4, PHP 5)\n@note Note: For Windows only: This function requires PHP to run in an elevated\nmode or with the UAC disabled.\n@see symlink() - Creates a symbolic link\n@see readlink() - Returns the target of a symbolic link\n@see linkinfo() - Gets information about a link\n
linkinfo linkinfo(string $path) [int]\nGets information about a link. Gets information about a link. This function\nis used to verify if a link (pointed to by `path`) really exists (using the\nsame method as the S_ISLNK macro defined in stat.h).\n@param path Path to the link.\n@return (PHP 4, PHP 5)\n@see symlink() - Creates a symbolic link\n@see link() - Create a hard link\n@see readlink() - Returns the target of a symbolic link\n
list list(mixed $varname [, mixed $...]) [array]\nAssign variables as if they were an array. Like array(), this is not really\na function, but a language construct. list() is used to assign a list of\nvariables in one operation.\n@param varname A variable.\n@return (PHP 4, PHP 5)\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n@see array() - Create an array\n@see extract() - Import variables into the current symbol table from an array\n
localeconv localeconv(void) [array]\nGet numeric formatting information. Returns an associative array containing\nlocalized numeric and monetary formatting information.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see setlocale() - Set locale information\n
localtime localtime([int $timestamp=time() [, bool $is_associative=false]])\n[array]\nGet the local time. The localtime() function returns an array identical to\nthat of the structure returned by the C function call.\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@param is_associative If set to FALSE or not supplied then the array is\nreturned as a regular, numerically indexed array. If the argument is set to\nTRUE then localtime() returns an associative array containing all the different\nelements of the structure returned by the C function call to localtime. The\nnames of the different keys of the associative array are as follows:\n&quot;tm_sec&quot; - seconds &quot;tm_min&quot; - minutes &quot;tm_hour&quot;\n- hour &quot;tm_mday&quot; - day of the month Months are from 0 (Jan) to 11\n(Dec) and days of the week are from 0 (Sun) to 6 (Sat). &quot;tm_mon&quot;\n- month of the year, starting with 0 for January &quot;tm_year&quot; -\nYears since 1900 &quot;tm_wday&quot; - Day of the week &quot;tm_yday&quot;\n- Day of the year &quot;tm_isdst&quot; - Is daylight savings time in effect\n
log log(float $arg [, float $base=M_E]) [float]\nNatural logarithm. If the optional `base` parameter is specified, log()\nreturns logbase `arg`, otherwise log() returns the natural logarithm of `arg`.\n@param arg The value to calculate the logarithm for\n@param base The optional logarithmic base to use (defaults to &#039;e&#039;\nand so to the natural logarithm).\n@return (PHP 4, PHP 5)\n@see log10() - Base-10 logarithm\n@see exp() - Calculates the exponent of e\n@see pow() - Exponential expression\n
log10 log10(float $arg) [float]\nBase-10 logarithm. Returns the base-10 logarithm of `arg`.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see log() - Natural logarithm\n
log1p log1p(float $number) [float]\nReturns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero. log1p() returns log(1 + `number`)\n   computed in a way that is accurate even when the value of `number` is\n   close to zero. log() might only return log(1) in this case due to lack\n   of precision.\n@param number The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see expm1() - Returns exp(number) - 1, computed in a way that is accurate\neven when the value of number is close to zero\n@see log() - Natural logarithm\n@see log10() - Base-10 logarithm\n
long2ip long2ip(string $proper_address) [string]\nConverts an (IPv4) Internet network address into a string in Internet standard\ndotted format. The function long2ip() generates an Internet address in dotted\nformat (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.\n@param proper_address A proper address representation.\n@return (PHP 4, PHP 5)\n@see ip2long() - Converts a string containing an (IPv4) Internet Protocol\ndotted address into a proper address\n
imap_ping imap_ping(resource $imap_stream) [bool]\nCheck if the IMAP stream is still active. imap_ping() pings the stream to see\nif it&#039;s still active. It may discover new mail; this is the preferred\nmethod for a periodic &quot;new mail check&quot; as well as a &quot;keep\nalive&quot; for servers which have inactivity timeout.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n
imap_qprint imap_qprint(string $string) [string]\nConvert a quoted-printable string to an 8 bit string. Convert a\nquoted-printable string to an 8 bit string according to &raquo; RFC2045,\nsection 6.7.\n@param string A quoted-printable string\n@return (PHP 4, PHP 5)\n@see imap_8bit() - Convert an 8bit string to a quoted-printable string\n
imap_renamemailbox imap_renamemailbox(resource $imap_stream, string $old_mbox,\nstring $new_mbox) [bool]\nRename an old mailbox to new mailbox. This function renames on old mailbox\nto new mailbox (see imap_open() for the format of `mbox` names).\n@param  imap_stream An IMAP stream returned by imap_open().\n@param old_mbox The old mailbox name, see imap_open() for more information\n@param new_mbox The new mailbox name, see imap_open() for more information\n@return (PHP 4, PHP 5)\n@see imap_createmailbox() - Create a new mailbox\n@see imap_deletemailbox() - Delete a mailbox\n
imap_reopen imap_reopen(resource $imap_stream, string $mailbox [, int\n$options=0 [, int $n_retries=0]]) [bool]\nReopen IMAP stream to new mailbox. Reopens the specified stream to a new\n`mailbox` on an IMAP or NNTP server.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@param options The `options` are a bit mask with one or more of the following:\nOP_READONLY - Open mailbox read-only OP_ANONYMOUS - Don&#039;t use or update\na .newsrc for news (NNTP only) OP_HALFOPEN - For IMAP and NNTP names, open\na connection but don&#039;t open a mailbox. OP_EXPUNGE - Silently expunge\nrecycle stream CL_EXPUNGE - Expunge mailbox automatically upon mailbox close\n(see also imap_delete() and imap_expunge())\n@param n_retries Number of maximum connect attempts\n@return (PHP 4, PHP 5)\n
imap_rfc822_parse_adrlist imap_rfc822_parse_adrlist(string $address, string\n$default_host) [array]\nParses an address string. Parses the address string as defined in &raquo;\nRFC2822 and for each address.\n@param address A string containing addresses\n@param default_host The default host name\n@return (PHP 4, PHP 5)\n@see imap_rfc822_parse_headers() - Parse mail headers from a string\n
imap_rfc822_parse_headers imap_rfc822_parse_headers(string $headers [,\nstring $defaulthost=&quot;UNKNOWN&quot;]) [object]\nParse mail headers from a string. Gets an object of various header elements,\nsimilar to imap_header().\n@param headers The parsed headers data\n@param defaulthost The default host name\n@return (PHP 4, PHP 5)\n@see imap_rfc822_parse_adrlist() - Parses an address string\n
imap_rfc822_write_address imap_rfc822_write_address(string $mailbox, string\n$host, string $personal) [string]\nReturns a properly formatted email address given the mailbox, host, and\npersonal info. Returns a properly formatted email address as defined in\n&raquo; RFC2822 given the needed information.\n@param mailbox The mailbox name, see imap_open() for more information\n@param host The email host part\n@param personal The name of the account owner\n@return (PHP 4, PHP 5)\n
imap_savebody imap_savebody(resource $imap_stream, mixed $file, int $msg_number\n[, string $part_number=&quot;&quot; [, int $options=0]]) [bool]\nSave a specific body section to a file. Saves a part or the whole body of\nthe specified message.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param file The path to the saved file as a string, or a valid file descriptor\nreturned by fopen().\n@param msg_number The message number\n@param part_number The part number. It is a string of integers delimited by\nperiod which index into a body part list as per the IMAP4 specification\n@param options A bitmask with one or more of the following: FT_UID - The\n`msg_number` is a UID FT_PEEK - Do not set the \Seen flag if not already set\nFT_INTERNAL - The return string is in internal format, will not canonicalize\nto CRLF.\n@return (PHP 5 >= 5.1.3)\n@see imap_fetchbody() - Fetch a particular section of the body of the message\n
imap_scanmailbox imap_scanmailbox\nAlias of imap_listscan.\n
imap_search imap_search(resource $imap_stream, string $criteria [, int\n$options=SE_FREE [, string $charset=NIL]]) [array]\nThis function returns an array of messages matching the given search\ncriteria. This function performs a search on the mailbox currently opened in\nthe given IMAP stream. For example, to match all unanswered messages sent\nby Mom, you&#039;d use: &quot;UNANSWERED FROM mom&quot;. Searches appear\nto be case insensitive. This list of criteria is from a reading of the UW\nc-client source code and may be incomplete or inaccurate (see also &raquo;\nRFC2060, section 6.4.4).\n@param  imap_stream An IMAP stream returned by imap_open().\n@param criteria A string, delimited by spaces, in which the following\nkeywords are allowed. Any multi-word arguments (e.g. `FROM &quot;joey\nsmith&quot;`) must be quoted. ALL - return all messages matching the rest\nof the criteria ANSWERED - match messages with the \\ANSWERED flag set BCC\n&quot;string&quot; - match messages with &quot;string&quot; in the Bcc: field\nBEFORE &quot;date&quot; - match messages with Date: before &quot;date&quot;\nBODY &quot;string&quot; - match messages with &quot;string&quot; in the body\nof the message CC &quot;string&quot; - match messages with &quot;string&quot;\nin the Cc: field DELETED - match deleted messages FLAGGED - match messages\nwith the \\FLAGGED (sometimes referred to as Important or Urgent) flag set\nFROM &quot;string&quot; - match messages with &quot;string&quot; in the From:\nfield KEYWORD &quot;string&quot; - match messages with &quot;string&quot; as a\nkeyword NEW - match new messages OLD - match old messages ON &quot;date&quot;\n- match messages with Date: matching &quot;date&quot; RECENT - match messages\nwith the \\RECENT flag set SEEN - match messages that have been read (the\n\\SEEN flag is set) SINCE &quot;date&quot; - match messages with Date:\nafter &quot;date&quot; SUBJECT &quot;string&quot; - match messages with\n&quot;string&quot; in the Subject: TEXT &quot;string&quot; - match messages\nwith text &quot;string&quot; TO &quot;string&quot; - match messages with\n&quot;string&quot; in the To: UNANSWERED - match messages that have not\nbeen answered UNDELETED - match messages that are not deleted UNFLAGGED -\nmatch messages that are not flagged UNKEYWORD &quot;string&quot; - match\nmessages that do not have the keyword &quot;string&quot; UNSEEN - match\nmessages which have not been read yet\n@param options Valid values for `options` are SE_UID, which causes the\nreturned array to contain UIDs instead of messages sequence numbers.\n@param charset\n@return (PHP 4, PHP 5)\n@see imap_listscan() - Returns the list of mailboxes that matches the\ngiven text\n
imap_set_quota imap_set_quota(resource $imap_stream, string $quota_root,\nint $quota_limit) [bool]\nSets a quota for a given mailbox. Sets an upper limit quota on a per mailbox\nbasis.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param quota_root The mailbox to have a quota set. This should follow the\nIMAP standard format for a mailbox: `user.name`.\n@param quota_limit The maximum size (in KB) for the `quota_root`\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see imap_open() - Open an IMAP stream to a mailbox\n@see imap_get_quota() - Retrieve the quota level settings, and usage statics\nper mailbox\n
imap_setacl imap_setacl(resource $imap_stream, string $mailbox, string $id,\nstring $rights) [bool]\nSets the ACL for a giving mailbox. Sets the ACL for a giving mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@param id The user to give the rights to.\n@param rights The rights to give to the user. Passing an empty string will\ndelete acl.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@see imap_getacl() - Gets the ACL for a given mailbox\n
imap_setflag_full imap_setflag_full(resource $imap_stream, string $sequence,\nstring $flag [, int $options=NIL]) [bool]\nSets flags on messages. Causes a store to add the specified `flag` to the\nflags set for the messages in the specified `sequence`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param sequence A sequence of message numbers. You can enumerate desired\nmessages with the `X,Y` syntax, or retrieve all messages within an interval\nwith the `X:Y` syntax\n@param flag The flags which you can set are `\Seen`, `\Answered`, `\Flagged`,\n`\Deleted`, and `\Draft` as defined by &raquo; RFC2060.\n@param options A bit mask that may contain the single option: ST_UID -\nThe sequence argument contains UIDs instead of sequence numbers\n@return (PHP 4, PHP 5)\n@see imap_clearflag_full() - Clears flags on messages\n
imap_sort imap_sort(resource $imap_stream, int $criteria, int $reverse [,\nint $options=0 [, string $search_criteria=NULL [, string $charset=NIL]]])\n[array]\nGets and sort messages. Gets and sorts message numbers by the given parameters.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param criteria Criteria can be one (and only one) of the following: SORTDATE\n- message Date SORTARRIVAL - arrival date SORTFROM - mailbox in first From\naddress SORTSUBJECT - message subject SORTTO - mailbox in first To address\nSORTCC - mailbox in first cc address SORTSIZE - size of message in octets\n@param reverse Set this to 1 for reverse sorting\n@param options The `options` are a bitmask of one or more of the following:\nSE_UID - Return UIDs instead of sequence numbers SE_NOPREFETCH - Don&#039;t\nprefetch searched messages\n@param search_criteria\n@param charset\n@return (PHP 4, PHP 5)\n
imap_status imap_status(resource $imap_stream, string $mailbox, int $options)\n[object]\nReturns status information on a mailbox. Gets status information about the\ngiven `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@param options Valid flags are: SA_MESSAGES - set $status->messages to the\nnumber of messages in the mailbox SA_RECENT - set $status->recent to the\nnumber of recent messages in the mailbox SA_UNSEEN - set $status->unseen\nto the number of unseen (new) messages in the mailbox SA_UIDNEXT - set\n$status->uidnext to the next uid to be used in the mailbox SA_UIDVALIDITY -\nset $status->uidvalidity to a constant that changes when uids for the mailbox\nmay no longer be valid SA_ALL - set all of the above\n@return (PHP 4, PHP 5)\n
imap_subscribe imap_subscribe(resource $imap_stream, string $mailbox) [bool]\nSubscribe to a mailbox. Subscribe to a new mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@return (PHP 4, PHP 5)\n@see imap_unsubscribe() - Unsubscribe from a mailbox\n
imap_thread imap_thread(resource $imap_stream [, int $options=SE_FREE]) [array]\nReturns a tree of threaded message. Gets a tree of a threaded message.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param options\n@return (PHP 4 >= 4.0.7, PHP 5)\n
imap_timeout imap_timeout(int $timeout_type [, int $timeout=-1]) [mixed]\nSet or fetch imap timeout. Sets or fetches the imap timeout.\n@param timeout_type One of the following: IMAP_OPENTIMEOUT, IMAP_READTIMEOUT,\nIMAP_WRITETIMEOUT, or IMAP_CLOSETIMEOUT.\n@param timeout The timeout, in seconds.\n@return (PHP 4 >= 4.3.3, PHP 5)\n
imap_uid imap_uid(resource $imap_stream, int $msg_number) [int]\nThis function returns the UID for the given message sequence number. This\nfunction returns the UID for the given message sequence number. An UID is\na unique identifier that will not change over time while a message sequence\nnumber may change whenever the content of the mailbox changes. This function\nis the inverse of imap_msgno().\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number.\n@return (PHP 4, PHP 5)\n@note Note: This function is not supported by POP3 mailboxes.\n@see imap_msgno() - Gets the message sequence number for the given UID\n
imap_undelete imap_undelete(resource $imap_stream, int $msg_number [, int\n$flags=0]) [bool]\nUnmark the message which is marked deleted. Removes the deletion flag for\na specified message, which is set by imap_delete() or imap_mail_move().\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param flags\n@return (PHP 4, PHP 5)\n@see imap_delete() - Mark a message for deletion from current mailbox\n@see imap_mail_move() - Move specified messages to a mailbox\n
imap_unsubscribe imap_unsubscribe(resource $imap_stream, string $mailbox)\n[bool]\nUnsubscribe from a mailbox. Unsubscribe from the specified `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@return (PHP 4, PHP 5)\n@see imap_subscribe() - Subscribe to a mailbox\n
imap_utf7_decode imap_utf7_decode(string $text) [string]\nDecodes a modified UTF-7 encoded string. Decodes modified UTF-7 `text` into\nISO-8859-1 string. This function is needed to decode mailbox names that contain\ncertain characters which are not in range of printable ASCII characters.\n@param text A modified UTF-7 encoding string, as defined in &raquo; RFC 2060,\nsection 5.1.3 (original UTF-7 was defined in &raquo; RFC1642).\n@return (PHP 4, PHP 5)\n@see imap_utf7_encode() - Converts ISO-8859-1 string to modified UTF-7 text\n
imap_utf7_encode imap_utf7_encode(string $data) [string]\nConverts ISO-8859-1 string to modified UTF-7 text. Converts `data` to\nmodified UTF-7 text. This is needed to encode mailbox names that contain\ncertain characters which are not in range of printable ASCII characters.\n@param data An ISO-8859-1 string.\n@return (PHP 4, PHP 5)\n@see imap_utf7_decode() - Decodes a modified UTF-7 encoded string\n
imap_utf8 imap_utf8(string $mime_encoded_text) [string]\nConverts MIME-encoded text to UTF-8. Converts the given `mime_encoded_text`\nto UTF-8.\n@param mime_encoded_text A MIME encoded string. MIME encoding method and\nthe UTF-8 specification are described in &raquo; RFC2047 and &raquo; RFC2044\nrespectively.\n@return (PHP 4, PHP 5)\n@see imap_mime_header_decode() - Decode MIME header elements\n
implode implode(string $glue, array $pieces) [string]\nJoin array elements with a string. Join array elements with a `glue`\nstring. Note: implode() can, for historical reasons, accept its parameters\nin either order. For consistency with explode(), however, it may be less\nconfusing to use the documented order of arguments.\n@param glue Defaults to an empty string. This is not the preferred usage of\nimplode() as `glue` would be the second parameter and thus, the bad prototype\nwould be used.\n@param pieces The array of strings to implode.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see explode() - Split a string by string\n@see preg_split() - Split string by a regular expression\n
import_request_variables import_request_variables(string $types [, string\n$prefix]) [bool]\nImport GET/POST/Cookie variables into the global scope. Imports GET/POST/Cookie\nvariables into the global scope. It is useful if you disabled register_globals,\nbut would like to see some variables in the global scope. If you&#039;re\ninterested in importing other variables into the global scope, such as\n$_SERVER, consider using extract().\n@param types Using the `types` parameter, you can specify which request\nvariables to import. You can use &#039;G&#039;, &#039;P&#039; and &#039;C&#039;\ncharacters respectively for GET, POST and Cookie. These characters are not case\nsensitive, so you can also use any combination of &#039;g&#039;, &#039;p&#039;\nand &#039;c&#039;. POST includes the POST uploaded file information. Note:\nNote that the order of the letters matters, as when using &quot;`GP`&quot;,\nthe POST variables will overwrite GET variables with the same name. Any\nother letters than GPC are discarded.\n@param prefix Variable name prefix, prepended before all variable&#039;s\nname imported into the global scope. So if you have a GET value named\n&quot;`userid`&quot;, and provide a prefix &quot;`pref_`&quot;, then\nyou&#039;ll get a global variable named $pref_userid. Note: Although the\n`prefix` parameter is optional, you will get an E_NOTICE level error if\nyou specify no prefix, or specify an empty string as a prefix. This is a\npossible security hazard. Notice level errors are not displayed using the\ndefault error reporting level.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see $_REQUEST\n@see register_globals\n@see Predefined Variables\n@see extract() - Import variables into the current symbol table from an array\n
in_array in_array(mixed $needle, array $haystack [, bool $strict]) [bool]\nChecks if a value exists in an array. Searches `haystack` for `needle`.\n@param needle The searched value. Note: If `needle` is a string, the comparison\nis done in a case-sensitive manner.\n@param haystack The array.\n@param strict If the third parameter `strict` is set to TRUE then the\nin_array() function will also check the types of the `needle` in the\n`haystack`.\n@return (PHP 4, PHP 5)\n@see array_search() - Searches the array for a given value and returns the\ncorresponding key if successful\n@see isset() - Determine if a variable is set and is not NULL\n@see array_key_exists() - Checks if the given key or index exists in the array\n
warning Security warning\ninclude.\n
inclued_get_data inclued_get_data(void) [array]\nGet the inclued data. Get the inclued data.\n@return (PECL inclued >= 0.1.0)\n@see inclued examples\n@see debug_backtrace() - Generates a backtrace\n@see include() - include\n
inet_ntop inet_ntop(string $in_addr) [string]\nConverts a packed internet address to a human readable representation.\n@param in_addr A 32bit IPv4, or 128bit IPv6 address.\n@return (PHP 5 >= 5.1.0)\n@see long2ip() - Converts an (IPv4) Internet network address into a string\nin Internet standard dotted format\n@see ip2long() - Converts a string containing an (IPv4) Internet Protocol\ndotted address into a proper address\n@see inet_pton() - Converts a human readable IP address to its packed in_addr\nrepresentation\n
inet_pton inet_pton(string $address) [string]\nConverts a human readable IP address to its packed in_addr representation. This\nfunction converts a human readable IPv4 or IPv6 address (if PHP was built\nwith IPv6 support enabled) into an address family appropriate 32bit or 128bit\nbinary structure.\n@param address A human readable IPv4 or IPv6 address.\n@return (PHP 5 >= 5.1.0)\n@see ip2long() - Converts a string containing an (IPv4) Internet Protocol\ndotted address into a proper address\n@see long2ip() - Converts an (IPv4) Internet network address into a string\nin Internet standard dotted format\n@see inet_ntop() - Converts a packed internet address to a human readable\nrepresentation\n
ingres_autocommit_state ingres_autocommit_state(resource $link) [bool]\nTest if the connection is using autocommit. ingres_autocommit_state() is\ncalled to determine whether the current link has autocommit enabled or not.\n@param link The connection link identifier\n@return (PECL ingres >= 2.0.0)\n@see ingres_autocommit() - Switch autocommit on or off\n@see ingres_query() - Send an SQL query to Ingres\n
ingres_autocommit ingres_autocommit(resource $link) [bool]\nSwitch autocommit on or off. ingres_autocommit() is called before opening a\ntransaction (before the first call to ingres_query() or just after a call to\ningres_rollback() or ingres_commit()) to switch the autocommit mode of the\nserver on or off (when the script begins the autocommit mode is off). When\nautocommit mode is on, every query is automatically committed by the server,\nas if ingres_commit() was called after every call to ingres_query(). To see\nif autocommit is enabled use, ingres_autocommit_state(). By default Ingres\nwill rollback any uncommitted transactions at the end of a request. Use this\nfunction or ingres_commit() to ensure your data is committed to the database.\n@param link The connection link identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_autocommit_state() - Test if the connection is using autocommit\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_rollback() - Roll back a transaction\n@see ingres_commit() - Commit a transaction\n
ingres_charset ingres_charset(resource $link) [string]\nReturns the installation character set. ingres_charset() is called to determine\nthe character set being used by the Ingres client, from II_CHARSETxx (where\nxx is the installation code). Note: You can override the value returned by\nusing the function putenv(). Changing the value of II_CHARSETxx in a running\nIngres installation can cause data corruption.\n@param link The connection link identifier\n@return (PECL ingres >= 2.1.0)\n@see ingres_connect() - Open a connection to an Ingres database\n@see ingres_query() - Send an SQL query to Ingres\n
ingres_close ingres_close(resource $link) [bool]\nClose an Ingres database connection. ingres_close() closes the connection to\nthe Ingres server that is associated with the specified link. ingres_close()\nis usually unnecessary, as it will not close persistent connections and all\nnon-persistent connections are automatically closed at the end of the script.\n@param link The connection link identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_connect() - Open a connection to an Ingres database\n@see ingres_pconnect() - Open a persistent connection to an Ingres database\n
ingres_commit ingres_commit(resource $link) [bool]\nCommit a transaction. ingres_commit() commits the currently open transaction,\nmaking all changes made to the database permanent. This closes the\ntransaction. A new transaction can be opened by sending a query with\ningres_query(). You can also have the server commit automatically after\nevery query by calling ingres_autocommit() before opening the transaction. By\ndefault Ingres will roll back any uncommitted transactions at the end of a\nrequest. Use this function or ingres_autocommit() to ensure your that data\nis committed to the database.\n@param link The connection link identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_rollback() - Roll back a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n
ingres_connect ingres_connect([string $database [, string $username [,\nstring $password [, array $options]]]]) [resource]\nOpen a connection to an Ingres database. ingres_connect() opens a connection\nwith the given Ingres `database`. The connection is closed when the script\nends or when ingres_close() is called on this link.\n@param database The database name. Must follow the syntax:\n[vnode::]dbname[/svr_class]\n@param username The Ingres user name\n@param password The password associated with `username`\n@param options ingres_connect() options Option name Option type Description\nExample date_century_boundary integer The threshold by which a 2-digit year\nis determined to be in the current century or in the next century. Equivalent\nto II_DATE_CENTURY_BOUNDARY. 50 group string Specifies the group ID of the\nuser, equivalent to the &quot;-G&quot; flag payroll role string The role\nID of the application. If a role password is required, the parameter value\nshould be specified as &quot;role/password&quot; effective_user string The\ningres user account being impersonated, equivalent to the &quot;-u&quot; flag\nanother_user dbms_password string The internal database password for the user\nconnecting to Ingres s3cr3t table_structure string The default structure for\nnew tables. Valid values for table_structure are: INGRES_STRUCTURE_BTREE\nINGRES_STRUCTURE_HASH INGRES_STRUCTURE_HEAP INGRES_STRUCTURE_ISAM\nINGRES_STRUCTURE_CBTREE INGRES_STRUCTURE_CISAM INGRES_STRUCTURE_CHASH\nINGRES_STRUCTURE_CHEAP INGRES_STRUCTURE_BTREE index_structure string The\ndefault structure for new secondary indexes. Valid values for index_structure\nare: INGRES_STRUCTURE_CBTREE INGRES_STRUCTURE_CISAM INGRES_STRUCTURE_CHASH\nINGRES_STRUCTURE_BTREE INGRES_STRUCTURE_HASH INGRES_STRUCTURE_ISAM\nINGRES_STRUCTURE_HASH login_local boolean Determines how the connection user\nID and password are used when a VNODE is included in the target database\nstring. If set to TRUE, the user ID and password are used to locally access\nthe VNODE, and the VNODE login information is used to establish the DBMS\nconnection. If set to FALSE, the process user ID is used to access the VNODE,\nand the connection user ID and password are used in place of the VNODE login\ninformation to establish the DBMS connection. This parameter is ignored if no\nVNODE is included in the target database string. The default is FALSE. TRUE\ntimezone string Controls the timezone of the session. If not set it will\ndefault to the value defined by II_TIMEZONE_NAME. If II_TIMEZONE_NAME is not\ndefined, NA-PACIFIC (GMT-8 with Daylight Savings) is used. date_format integer\nSets the allowable input and output format for Ingres dates. Defaults to the\nvalue defined by II_DATE_FORMAT. If II_DATE_FORMAT is not set the default date\nformat is US, e.g. mm/dd/yy. Valid values for date_format are: INGRES_DATE_DMY\nINGRES_DATE_FINISH INGRES_DATE_GERMAN INGRES_DATE_ISO INGRES_DATE_ISO4\nINGRES_DATE_MDY INGRES_DATE_MULTINATIONAL INGRES_DATE_MULTINATIONAL4\nINGRES_DATE_YMD INGRES_DATE_US INGRES_DATE_MULTINATIONAL4 decimal_separator\nstring The character identifier for decimal data &quot;,&quot; money_lort\ninteger Leading or trailing currency sign. Valid values for money_lort\nare: INGRES_MONEY_LEADING INGRES_MONEY_TRAILING INGRES_MONEY_TRAILING\nmoney_sign string The currency symbol to be used with the MONEY datatype €\nmoney_precision integer The precision of the MONEY datatype 3 float4_precision\ninteger Precision of the FLOAT4 datatype 10 float8_precision integer Precision\nof the FLOAT8 data 10 blob_segment_length integer The amount of data in bytes\nto fetch at a time when retrieving BLOB or CLOB data, defaults to 4096 bytes\nwhen not explicitly set 8192\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_pconnect() - Open a persistent connection to an Ingres database\n@see ingres_close() - Close an Ingres database connection\n
ingres_cursor ingres_cursor(resource $result) [string]\nGet a cursor name for a given result resource. Returns a string with the\nactive cursor name. If no cursor is active then NULL is returned.\n@param result The query result identifier\n@return (PECL ingres >= 1.1.0)\n@see ingres_prepare() - Prepare a query for later execution\n@see ingres_execute() - Execute a prepared query\n
ingres_errno ingres_errno([resource $link]) [int]\nGet the last Ingres error number generated. Returns an integer containing\nthe last error number. If no error was reported 0 is returned. If a `link`\nresource is passed to ingres_errno() it returns the last error recorded for\nthe link. If no link is passed, then ingres_errno() returns the last error\nreported using the default link. The function, ingres_errno(), should always\nbe called after executing a database query. Calling another function before\ningres_errno() is called will reset or change any error code from the last\nIngres function call.\n@param link The connection link identifier\n@return (PECL ingres >= 1.1.0)\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n@see ingres_errsqlstate() - Get the last SQLSTATE error code generated\n@see ingres_next_error() - Get the next Ingres error\n
ingres_error ingres_error([resource $link]) [string]\nGet a meaningful error message for the last error generated. Returns a\nstring containing the last error, or NULL if no error has occurred. If a\n`link` resource is passed to ingres_error(), it returns the last error\nrecorded for the link. If no link is passed then ingres_error() returns the\nlast error reported using the default link. The function, ingres_error(),\nshould always be called after executing any database query. Calling another\nfunction before ingres_error() is called will reset or change any error\nmessage from the last Ingres function call.\n@param link The connection link identifier\n@return (PECL ingres >= 1.1.0)\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_errsqlstate() - Get the last SQLSTATE error code generated\n@see ingres_next_error() - Get the next Ingres error\n
ingres_errsqlstate ingres_errsqlstate([resource $link]) [string]\nGet the last SQLSTATE error code generated. Returns a string containing\nthe last SQLSTATE, or NULL if no error has occurred. If a `link` resource\nis passed to ingres_errsqlstate(), it returns the last error recorded for\nthe link. If no link is passed, then ingres_errsqlstate() returns the last\nerror reported using the default link. The function, ingres_errsqlstate(),\nshould always be called after executing any database query. Calling another\nfunction before ingres_errsqlstate() is called will reset or change any\nerror message from the last Ingres function call.\n@param link The connection link identifier\n@return (PECL ingres >= 1.1.0)\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n@see ingres_next_error() - Get the next Ingres error\n
ingres_escape_string ingres_escape_string(resource $link, string\n$source_string) [string]\nEscape special characters for use in a query. ingres_escape_string() is\nused to escape certain characters within a string before it is sent to the\ndatabase server.\n@param link The connection link identifier\n@param source_string The source string to be parsed\n@return (PECL ingres >= 2.1.0)\n@see ingres_query() - Send an SQL query to Ingres\n
ingres_execute ingres_execute(resource $result [, array $params [, string\n$types]]) [bool]\nExecute a prepared query. Execute a query prepared using\ningres_prepare(). Note: Related Configurations See also the ingres.describe,\ningres.scrollable and ingres.utf8 directives in Runtime Configuration.\n@param result The result query identifier\n@param params An array of parameter values to be used with the query\n@param types A string containing a sequence of types for the parameter values\npassed. See the types parameter in ingres_query() for the list of type codes.\n@return (PECL ingres >= 1.1.0)\n@see ingres_unbuffered_query() - Send an unbuffered SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n@see ingres_commit() - Commit a transaction\n@see ingres_rollback() - Roll back a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n@see ingres_set_environment() - Set environment features controlling output\noptions\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n
ingres_fetch_array ingres_fetch_array(resource $result [, int $result_type])\n[array]\nFetch a row of result into an array. This function is an extended version of\ningres_fetch_row(). In addition to storing the data in the numeric indices\nof the result array, it also stores the data in associative indices, using\nthe field names as keys.\n@param result The query result identifier\n@param result_type The result type. This `result_type` can be INGRES_NUM for\nenumerated array, INGRES_ASSOC for associative array, or INGRES_BOTH (default).\n@return ( PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_num_fields() - Get the number of fields returned by the last query\n@see ingres_field_name() - Get the name of a field in a query result\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_fetch_assoc ingres_fetch_assoc(resource $result) [array]\nFetch a row of result into an associative array. This function is\nstores the data fetched from a query executed using ingres_query() in an\nassociative array, using the field names as keys. With regard to speed,\nthe function is identical to ingres_fetch_object(), and almost as quick as\ningres_fetch_row() (the difference is insignificant). By default, arrays\ncreated by ingres_fetch_assoc() start from position 1 and not 0 as with\nother DBMS extensions. The starting position can be adjusted to 0 using the\nconfiguration parameter ingres.array_index_start. Note: Related Configurations\nSee also the ingres.array_index_start, ingres.fetch_buffer_size and ingres.utf8\ndirectives in Runtime Configuration.\n@param result The query result identifier\n@return (PECL ingres >= 2.2.2)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_num_fields() - Get the number of fields returned by the last query\n@see ingres_field_name() - Get the name of a field in a query result\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_fetch_object ingres_fetch_object(resource $result [, int $result_type])\n[object]\nFetch a row of result into an object. This function is similar to\ningres_fetch_array(), with one difference - an object is returned instead of an\narray. Indirectly, this means that you can access the data only by the field\nnames and not by their offsets (numbers are illegal property names). With\nregard to speed, the function is identical to ingres_fetch_array(), and\nalmost as quick as ingres_fetch_row() (the difference is insignificant). Note:\nRelated Configurations See also the ingres.fetch_buffer_size and ingres.utf8\ndirectives in Runtime Configuration.\n@param link The query result identifier\n@param result_type (Optional argument.) `result_type` is a constant and can\ntake the following values: INGRES_ASSOC, INGRES_NUM, and INGRES_BOTH.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_num_fields() - Get the number of fields returned by the last query\n@see ingres_field_name() - Get the name of a field in a query result\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_fetch_proc_return ingres_fetch_proc_return(resource $result) [int]\nGet the return value from a procedure call. This function is used to\nretrieve the return value following the execution of an Ingres database\nprocedure (stored procedure). Note: If used with a row-producing procedure,\nthis function should be called after all the rows from the procedure\nhave been fetched using ingres_fetch_array(), ingres_fetch_object() or\ningres_fetch_row(). This function will eliminate any rows yet to be fetched\nshould there be any left over.\n@param result The result identifier for a query\n@return (PECL ingres >= 1.4.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_fetch_row ingres_fetch_row(resource $result) [array]\nFetch a row of result into an enumerated array. ingres_fetch_row() returns\nan array that corresponds to the fetched row, or FALSE if there are no\nmore rows. Each result column is stored in an array offset, starting at\noffset 1. Subsequent calls to ingres_fetch_row() return the next row in the\nresult set, or FALSE if there are no more rows. By default, arrays created\nby ingres_fetch_row() start from position 1 and not 0 as with other DBMS\nextensions. The starting position can be adjusted to 0 using the configuration\nparameter ingres.array_index_start. Note: Related Configurations See also the\ningres.array_index_start, ingres.fetch_buffer_size and ingres.utf8 directives\nin Runtime Configuration.\n@param result The query result identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_num_fields() - Get the number of fields returned by the last query\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n
ingres_field_length ingres_field_length(resource $result, int $index) [int]\nGet the length of a field. ingres_field_length() returns the length of a\nfield. This is the number of bytes the server uses to store the field. For\ndetailed information, see the Ingres `OpenAPI User Guide`, Appendix `&quot;Data\nTypes&quot;` in the Ingres documentation. Note: Related Configurations See\ningres.array_index_start in Runtime Configuration\n@param result The query result identifier\n@param index `index` is the column number whose length will be\nretrieved. The possible values of `index` depend upon the value\nof ingres.array_index_start. If ingres.array_index_start is `1` (the\ndefault) then `index` must be between `1` and the value returned by\ningres_num_fields(). If ingres.array_index_start is `0` then `index` must\nbe between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_field_name ingres_field_name(resource $result, int $index) [string]\nGet the name of a field in a query result. ingres_field_name() returns\nthe name of a field in a query result. Note: Related Configurations See\ningres.array_index_start in Runtime Configuration\n@param result The query result identifier\n@param index `index` is the field whose name will be retrieved. The possible\nvalues of `index` depend upon the value of ingres.array_index_start. If\ningres.array_index_start is `1` (the default) then `index` must be between `1`\nand the value returned by ingres_num_fields(). If ingres.array_index_start is\n`0` then `index` must be between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_field_nullable ingres_field_nullable(resource $result, int $index)\n[bool]\nTest if a field is nullable. Test if a field is nullable. Note: Related\nConfigurations See ingres.array_index_start in Runtime Configuration\n@param result The query result identifier\n@param index `index` is the field whose nullability will be\nretrieved. The possible values of `index` depend upon the value\nof ingres.array_index_start. If ingres.array_index_start is `1` (the\ndefault) then `index` must be between `1` and the value returned by\ningres_num_fields(). If ingres.array_index_start is `0` then `index` must\nbe between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_field_precision ingres_field_precision(resource $result, int $index)\n[int]\nGet the precision of a field. ingres_field_precision() returns the precision\nof a field. This value is used only for decimal, float, and money SQL\ndata types. For detailed information, see the Ingres `OpenAPI User Guide`,\nAppendix &quot;Data Types&quot; in the Ingres documentation. Note: Related\nConfigurations See ingres.array_index_start in Runtime Configuration\n@param result The query result identifier\n@param index `index` is the field whose precision will be\nretrieved. The possible values of `index` depend upon the value\nof ingres.array_index_start. If ingres.array_index_start is `1` (the\ndefault) then `index` must be between `1` and the value returned by\ningres_num_fields(). If ingres.array_index_start is `0` then `index` must\nbe between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_field_scale ingres_field_scale(resource $result, int $index) [int]\nGet the scale of a field. ingres_field_scale() returns the scale of a\nfield. This value is used only for the decimal SQL data type. For detailed\ninformation, see the Ingres `OpenAPI User Guide`, Appendix `&quot;Data\nTypes&quot;` in the Ingres documentation. Note: Related Configurations See\ningres.array_index_start in Runtime Configuration\n@param result The query result identifier\n@param index `index` is the field whose scale will be retrieved. The possible\nvalues of `index` depend upon the value of ingres.array_index_start. If\ningres.array_index_start is `1` (the default) then `index` must be between `1`\nand the value returned by ingres_num_fields(). If ingres.array_index_start is\n`0` then `index` must be between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_field_type ingres_field_type(resource $result, int $index) [string]\nGet the type of a field in a query result. Get the type of a field in a\nquery result. Note: Related Configurations See ingres.array_index_start in\nRuntime Configuration\n@param result The query result identifier\n@param index `index` is the field whose type will be retrieved. The possible\nvalues of `index` depend upon the value of ingres.array_index_start. If\ningres.array_index_start is `1` (the default) then `index` must be between `1`\nand the value returned by ingres_num_fields(). If ingres.array_index_start is\n`0` then `index` must be between `0` and ingres_num_fields()` - 1`.\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_free_result ingres_free_result(resource $result) [bool]\nFree the resources associated with a result identifier.\n@param result The query result identifier\n@return (PECL ingres >= 2.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n
ingres_next_error ingres_next_error([resource $link]) [bool]\nGet the next Ingres error. Get the next Ingres error for the last executed\nquery. Each call to ingres_next_error() can be followed by a call to\ningres_errno(), ingres_error() or ingres_errsqlstate() to get the respective\nerror number, error text, or SQL STATE. While ingres_next_error() returns\nTRUE, there are more errors to fetch.\n@param link The connection link identifier\n@return (PECL ingres >= 2.0.0)\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n@see ingres_errsqlstate() - Get the last SQLSTATE error code generated\n
ingres_num_fields ingres_num_fields(resource $result) [int]\nGet the number of fields returned by the last query. ingres_num_fields()\nreturns the number of fields in the results returned by the Ingres server\nafter a call to ingres_query().\n@param result The query result identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_num_rows ingres_num_rows(resource $result) [int]\nGet the number of rows affected or returned by a query. This function primarily\nis meant to get the number of rows modified in the database. However, it can\nbe used to retrieve the number of rows to fetch for a SELECT statement. Note:\nIf scrollable cursors are disabled and this function is called before\nusing ingres_fetch_array(), ingres_fetch_object(), or ingres_fetch_row(),\nthe server will delete the result&#039;s data and the script will be unable\nto get them. Instead, you should retrieve the result&#039;s data using one\nof these fetch functions in a loop until it returns FALSE, indicating that\nno more results are available.\n@param result The result identifier for a query\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_pconnect ingres_pconnect([string $database [, string $username [,\nstring $password [, array $options]]]]) [resource]\nOpen a persistent connection to an Ingres database. Open a persistent\nconnection to an Ingres database. There are only two differences between\nthis function and ingres_connect(): First, when connecting, the function\nwill initially try to find a (persistent) link that is already opened with\nthe same parameters. If one is found, an identifier for it will be returned\ninstead of opening a new connection. Second, the connection to the Ingres\nserver will not be closed when the execution of the script ends. Instead,\nthe link will remain open for future use (ingres_close() will not close\nlinks established by ingres_pconnect()). This type of link is therefore\ncalled &quot;persistent&quot;.\n@param database The database name. Must follow the syntax:\n[vnode::]dbname[/svr_class]\n@param username The Ingres user name\n@param password The password associated with `username`\n@param options See ingres_connect() for the list of options that can be passed\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_connect() - Open a connection to an Ingres database\n@see ingres_close() - Close an Ingres database connection\n
ingres_prepare ingres_prepare(resource $link, string $query) [mixed]\nPrepare a query for later execution. Prepares a query for execution by\ningres_execute(). The query becomes part of the currently open transaction. If\nthere is no open transaction, ingres_query() opens a new transaction. To close\nthe transaction, you can call either ingres_commit() to commit the changes made\nto the database or ingres_rollback() to cancel these changes. When the script\nends, any open transaction is rolled back (by calling ingres_rollback()). You\ncan also use ingres_autocommit() before opening a new transaction to have\nevery SQL query immediately committed. Note: Related Configurations See\nalso the ingres.describe, ingres.scrollable and ingres.utf8 directives in\nRuntime Configuration.\n@param link The connection link identifier\n@param query A valid SQL query (see the Ingres `SQL reference guide`) in\nthe Ingres documentation. See the query parameter in ingres_query() for a\nlist of SQL statements which cannot be executed using ingres_prepare()\n@return (PECL ingres >= 1.1.0)\n@see ingres_unbuffered_query() - Send an unbuffered SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n@see ingres_commit() - Commit a transaction\n@see ingres_rollback() - Roll back a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n@see ingres_set_environment() - Set environment features controlling output\noptions\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n
ingres_query ingres_query(resource $link, string $query [, array $params [,\nstring $types]]) [mixed]\nSend an SQL query to Ingres. ingres_query() sends the given `query` to the\nIngres server. The query becomes part of the currently open transaction. If\nthere is no open transaction, ingres_query() opens a new transaction. To close\nthe transaction, you can call either ingres_commit() to commit the changes made\nto the database or ingres_rollback() to cancel these changes. When the script\nends, any open transaction is rolled back (by calling ingres_rollback()). You\ncan also use ingres_autocommit() before opening a new transaction to have\nevery SQL query immediately committed. Note: Related Configurations See\nalso the ingres.describe, ingres.scrollable and ingres.utf8 directives in\nRuntime Configuration\n@param link The connection link identifier.\n@param query A valid SQL query (see the Ingres `SQL reference guide`) in the\nIngres documentation. Data inside the query should be properly escaped. The\nfollowing types of SQL queries cannot be sent with this function: `close` (see\ningres_close()) `commit` (see ingres_commit()) `connect` (see ingres_connect())\n`disconnect` (see ingres_close()) `get dbevent` `prepare to commit` `rollback`\n(see ingres_rollback()) `savepoint` `set autocommit` (see ingres_autocommit())\nall cursor-related queries are unsupported\n@param params An array of parameter values to be used with the query\n@param types A string containing a sequence of types for the parameter values\npassed. When ingres.describe is enabled, this parameter can be ignored\nas the driver automatically fetches the expected parameter types from the\nserver. Type code Ingres type a BOOLEAN b BYTE B LONG BYTE/BLOB c CHAR d\nDATE/ANSIDATE/TIMESTAMP/TIME f FLOAT i INTEGER L LONG TEXT m MONEY M LONG\nNVARCHAR n NCHAR N NVARCHAR t TEXT v VARCHAR V LONG VARCHAR\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_unbuffered_query() - Send an unbuffered SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n@see ingres_commit() - Commit a transaction\n@see ingres_rollback() - Roll back a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n@see ingres_set_environment() - Set environment features controlling output\noptions\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n
ingres_result_seek ingres_result_seek(resource $result, int $position) [bool]\nSet the row position before fetching data. This function is used to\nposition the cursor associated with the result resource before issuing\na fetch. If ingres.array_index_start is set to 0 then the first\nrow is 0 else it is 1. ingres_result_seek() can be used only with\nqueries that make use of scrollable cursors. It cannot be used with\ningres_unbuffered_query(). Note: Related Configurations See also the\ningres.scrollable and ingres.array_index_start directives in Runtime\nConfiguration.\n@param result The result identifier for a query\n@param position The row to position the cursor on. If ingres.array_index_start\nis set to 0, then the first row is 0, else it is 1\n@return (PECL ingres >= 2.1.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n
ingres_rollback ingres_rollback(resource $link) [bool]\nRoll back a transaction. ingres_rollback() rolls back the currently open\ntransaction, actually cancelling all changes made to the database during the\ntransaction. This closes the transaction. A new transaction can be opened\nby sending a query with ingres_query().\n@param link The connection link identifier\n@return (PHP 4 >= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres >= 1.0.0)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_commit() - Commit a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n
ingres_set_environment ingres_set_environment(resource $link, array $options)\n[bool]\nSet environment features controlling output options. ingres_set_environment()\nis called to set environmental options that affect the output of certain\nvalues from Ingres, such as the timezone, date format, decimal character\nseparator, and float precision.\n@param link The connection link identifier\n@param options An enumerated array of option name/value pairs. The following\ntable lists the option name and the expected type Option name Option\ntype Description Example date_century_boundary integer The threshold by\nwhich a 2-digit year is determined to be in the current century or in the\nnext century. Equivalent to II_DATE_CENTURY_BOUNDARY 50 timezone string\nControls the timezone of the session. If not set, it will default the value\ndefined by II_TIMEZONE_NAME. If II_TIMEZONE_NAME is not defined, NA-PACIFIC\n(GMT-8 with Daylight Savings) is used. UNITED-KINGDOM date_format integer\nSets the allowable input and output format for Ingres dates. Defaults\nto the value defined by II_DATE_FORMAT. If II_DATE_FORMAT is not set,\nthe default date format is US, for example mm/dd/yy. Valid values for\ndate_format are: INGRES_DATE_DMY INGRES_DATE_FINISH INGRES_DATE_GERMAN\nINGRES_DATE_ISO INGRES_DATE_ISO4 INGRES_DATE_MDY INGRES_DATE_MULTINATIONAL\nINGRES_DATE_MULTINATIONAL4 INGRES_DATE_YMD INGRES_DATE_US INGRES_DATE_ISO4\ndecimal_separator string The character identifier for decimal data\n&quot;,&quot; money_lort integer Leading or trailing currency sign. Valid\nvalues for money_lort are: INGRES_MONEY_LEADING INGRES_MONEY_TRAILING\nINGRES_MONEY_LEADING money_sign string The currency symbol to be used with\nthe MONEY datatype € money_precision integer The precision of the MONEY\ndatatype 2 float4_precision integer Precision of the FLOAT4 datatype 10\nfloat8_precision integer Precision of the FLOAT8 data 10 blob_segment_length\ninteger The amount of data in bytes to fetch at a time when retrieving BLOB\nor CLOB data. Defaults to 4096 bytes when not set explicitly 8192\n@return (PECL ingres >= 1.2.0)\n@see ingres_connect() - Open a connection to an Ingres database\n@see ingres_query() - Send an SQL query to Ingres\n
ingres_unbuffered_query ingres_unbuffered_query(resource $link, string $query\n[, array $params [, string $types]]) [mixed]\nSend an unbuffered  SQL query to Ingres. ingres_unbuffered_query() sends the\ngiven `query` to the Ingres server. The query becomes part of the currently\nopen transaction. If there is no open transaction, ingres_unbuffered_query()\nopens a new transaction. To close the transaction, you can call either\ningres_commit() to commit the changes made to the database or ingres_rollback()\nto cancel these changes. When the script ends, any open transaction is rolled\nback (by calling ingres_rollback()). You can also use ingres_autocommit()\nbefore opening a new transaction to have every SQL query immediately\ncommitted. Ingres allows only a single unbuffered statement to be active\nat any one time. The extension will close any active unbuffered statements\nbefore executing any SQL. In addition you cannot use ingres_result_seek()\nto position the row before fetching. Note: Related Configurations See also\nthe ingres.describe and ingres.utf8 directives in Runtime Configuration.\n@param link The connection link identifier\n@param query A valid SQL query (see the Ingres SQL reference guide) in the\nIngres documentation. See the query parameter in ingres_query() for a list\nof SQL statements that cannot be executed via ingres_unbuffered_query(). Data\ninside the query should be properly escaped.\n@param params An array of parameter values to be used with the query\n@param types A string containing a sequence of types for the parameter values\npassed. See the types parameter in ingres_query() for the list of type codes.\n@return (No version information available, might only be in SVN)\n@see ingres_query() - Send an SQL query to Ingres\n@see ingres_fetch_array() - Fetch a row of result into an array\n@see ingres_fetch_assoc() - Fetch a row of result into an associative array\n@see ingres_fetch_object() - Fetch a row of result into an object\n@see ingres_fetch_row() - Fetch a row of result into an enumerated array\n@see ingres_commit() - Commit a transaction\n@see ingres_rollback() - Roll back a transaction\n@see ingres_autocommit() - Switch autocommit on or off\n@see ingres_set_environment() - Set environment features controlling output\noptions\n@see ingres_errno() - Get the last Ingres error number generated\n@see ingres_error() - Get a meaningful error message for the last error\ngenerated\n
ini_alter ini_alter\nAlias of ini_set.\n
ini_get_all ini_get_all([string $extension [, bool $details=true]]) [array]\nGets all configuration options. Returns all the registered configuration\noptions.\n@param extension An optional extension name. If set, the function return\nonly options specific for that extension.\n@param details Retrieve details settings or only the current value for each\nsetting. Default is TRUE (retrieve details).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see How to change configuration settings\n@see ini_get() - Gets the value of a configuration option\n@see ini_restore() - Restores the value of a configuration option\n@see ini_set() - Sets the value of a configuration option\n@see get_loaded_extensions() - Returns an array with the names of all modules\ncompiled and loaded\n@see phpinfo() - Outputs information about PHP's configuration\n
ini_get ini_get(string $varname) [string]\nGets the value of a configuration option. Returns the value of the\nconfiguration option on success.\n@param varname The configuration option name.\n@return (PHP 4, PHP 5)\n@note Note: When querying boolean values A boolean ini value of `off` will\nbe returned as an empty string or &quot;0&quot; while a boolean ini value of\n`on` will be returned as &quot;1&quot;. The function can also return the\nliteral string of INI value.\n@note Note: When querying memory size values Many ini memory size values,\nsuch as upload_max_filesize, are stored in the php.ini file in shorthand\nnotation. ini_get() will return the exact string stored in the php.ini file\nand NOT its integer equivalent. Attempting normal arithmetic functions on\nthese values will not have otherwise expected results. The example above\nshows one way to convert shorthand notation into bytes, much like how the\nPHP source does it.\n@see get_cfg_var() - Gets the value of a PHP configuration option\n@see ini_get_all() - Gets all configuration options\n@see ini_restore() - Restores the value of a configuration option\n@see ini_set() - Sets the value of a configuration option\n
ini_restore ini_restore(string $varname) [void]\nRestores the value of a configuration option. Restores a given configuration\noption to its original value.\n@param varname The configuration option name.\n@return (PHP 4, PHP 5)\n@see ini_get() - Gets the value of a configuration option\n@see ini_get_all() - Gets all configuration options\n@see ini_set() - Sets the value of a configuration option\n
ini_set ini_set(string $varname, string $newvalue) [string]\nSets the value of a configuration option. Sets the value of the given\nconfiguration option. The configuration option will keep this new value during\nthe script&#039;s execution, and will be restored at the script&#039;s ending.\n@param varname Not all the available options can be changed using\nini_set(). There is a list of all available options in the appendix.\n@param newvalue The new value for the option.\n@return (PHP 4, PHP 5)\n@see get_cfg_var() - Gets the value of a PHP configuration option\n@see ini_get() - Gets the value of a configuration option\n@see ini_get_all() - Gets all configuration options\n@see ini_restore() - Restores the value of a configuration option\n@see How to change configuration settings\n
inotify_add_watch inotify_add_watch(resource $inotify_instance, string\n$pathname, int $mask) [int]\nAdd a watch to an initialized inotify instance. inotify_add_watch() adds a\nnew watch or modify an existing watch for the file or directory specified in\n`pathname`. Using inotify_add_watch() on a watched object replaces the existing\nwatch. Using the IN_MASK_ADD constant adds (OR) events to the existing watch.\n@param inotify_instance Resource returned by inotify_init()\n@param pathname File or directory to watch\n@param mask Events to watch for. See Predefined Constants.\n@return (PECL inotify >= 0.1.2)\n@see inotify_init() - Initialize an inotify instance\n
inotify_init inotify_init(void) [resource]\nInitialize an inotify instance. Initialize an inotify instance for use with\ninotify_add_watch()\n@return (PECL inotify >= 0.1.2)\n@see inotify_add_watch() - Add a watch to an initialized inotify instance\n@see inotify_rm_watch() - Remove an existing watch from an inotify instance\n@see inotify_queue_len() - Return a number upper than zero if there are\npending events\n@see inotify_read() - Read events from an inotify instance\n@see fclose() - Closes an open file pointer\n
inotify_queue_len inotify_queue_len(resource $inotify_instance) [int]\nReturn a number upper than zero if there are pending events. This function\nallows to know if inotify_read() will block or not. If a number upper than\nzero is returned, there are pending events and inotify_read() will not block.\n@param inotify_instance Resource returned by inotify_init()\n@return (PECL inotify >= 0.1.2)\n@see inotify_init() - Initialize an inotify instance\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n
inotify_read inotify_read(resource $inotify_instance) [array]\nRead events from an inotify instance. Read inotify events from an inotify\ninstance.\n@param inotify_instance Resource returned by inotify_init()\n@return (PECL inotify >= 0.1.2)\n@see inotify_init() - Initialize an inotify instance\n@see stream_select() - Runs the equivalent of the select() system call on\nthe given arrays of streams with a timeout specified by tv_sec and tv_usec\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n@see inotify_queue_len() - Return a number upper than zero if there are\npending events\n
inotify_rm_watch inotify_rm_watch(resource $inotify_instance, int\n$watch_descriptor) [bool]\nRemove an existing watch from an inotify instance. inotify_rm_watch() removes\nthe watch `watch_descriptor` from the inotify instance `inotify_instance`.\n@param inotify_instance Resource returned by inotify_init()\n@param watch_descriptor Watch to remove from the instance\n@return (PECL inotify >= 0.1.2)\n@see inotify_init() - Initialize an inotify instance\n
interface_exists interface_exists(string $interface_name [, bool\n$autoload=true]) [bool]\nChecks if the interface has been defined. Checks if the given interface has\nbeen defined.\n@param interface_name The interface name\n@param autoload Whether to call __autoload or not by default.\n@return (PHP 5 >= 5.0.2)\n@see class_exists() - Checks if the class has been defined\n
intl_error_name intl_error_name(int $error_code) [string]\nGet symbolic name for a given error code. Return ICU error code name.\n@param error_code ICU error code.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see intl_is_failure() - Check whether the given error code indicates failure\n@see intl_get_error_code() - Get the last error code\n@see intl_get_error_message() - Get description of the last error\n
intl_get_error_code intl_get_error_code(void) [int]\nGet the last error code. Useful to handle errors occurred in static methods\nwhen there&#039;s no object to get error code from.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see intl_is_failure() - Check whether the given error code indicates failure\n@see intl_error_name() - Get symbolic name for a given error code\n@see intl_get_error_message() - Get description of the last error\n@see collator_get_error_code() - Get collator's last error code\n@see numfmt_get_error_code() - Get formatter's last error code.\n
intl_get_error_message intl_get_error_message(void) [string]\nGet description of the last error. Get error message from last\ninternationalization function called.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see intl_error_name() - Get symbolic name for a given error code\n@see intl_get_error_code() - Get the last error code\n@see intl_is_failure() - Check whether the given error code indicates failure\n@see collator_get_error_message() - Get text for collator's last error code\n@see numfmt_get_error_message() - Get formatter's last error message.\n
intl_is_failure intl_is_failure(int $error_code) [bool]\nCheck whether the given error code indicates failure.\n@param error_code is a value that returned by functions: intl_get_error_code(),\ncollator_get_error_code() .\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see intl_get_error_code() - Get the last error code\n@see collator_get_error_code() - Get collator's last error code\n@see Collator-getErrorCode() - Get collator's last error code\n
intval intval(mixed $var [, int $base=10]) [int]\nGet the integer value of a variable. Returns the integer value of `var`, using\nthe specified `base` for the conversion (the default is base 10). intval()\nshould not be used on objects, as doing so will emit an E_NOTICE level error\nand return 1.\n@param var The scalar value being converted to an integer\n@param base The base for the conversion\n@return (PHP 4, PHP 5)\n@note Note: The `base` parameter has no effect unless the `var` parameter\nis a string.\n@see floatval() - Get float value of a variable\n@see strval() - Get string value of a variable\n@see settype() - Set the type of a variable\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see Type juggling\n@see BCMath Arbitrary Precision Mathematics Functions\n
ip2long ip2long(string $ip_address) [int]\nConverts a string containing an (IPv4) Internet Protocol\ndotted address into a proper address. The function ip2long()\ngenerates an IPv4 Internet network address from its Internet\nstandard format (dotted string) representation. ip2long()\nwill also work with non-complete IP addresses. Read &raquo;\nhttp://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm\nfor more info.\n@param ip_address A standard format address.\n@return (PHP 4, PHP 5)\n@note Note: Because PHP&#039;s integer type is signed, and many IP addresses\nwill result in negative integers on 32-bit architectures, you need to use\nthe &quot;%u&quot; formatter of sprintf() or printf() to get the string\nrepresentation of the unsigned IP address.\n@note Note: ip2long() will return FALSE for the IP `255.255.255.255` in PHP\n5 &lt;= 5.0.2. It was fixed in PHP 5.0.3 where it returns `-1` (same as PHP 4).\n@see long2ip() - Converts an (IPv4) Internet network address into a string\nin Internet standard dotted format\n@see sprintf() - Return a formatted string\n
iptcembed iptcembed(string $iptcdata, string $jpeg_file_name [, int $spool])\n[mixed]\nEmbeds binary IPTC data into a JPEG image. Embeds binary IPTC data into a\nJPEG image.\n@param iptcdata The data to be written.\n@param jpeg_file_name Path to the JPEG image.\n@param spool Spool flag. If the spool flag is over 2 then the JPEG will be\nreturned as a string.\n@return (PHP 4, PHP 5)\n@note Note: This function does not require the GD image library.\n
iptcparse iptcparse(string $iptcblock) [array]\nParse a binary IPTC block into single tags.. Parses an &raquo; IPTC block\ninto its single tags.\n@param iptcblock A binary IPTC block.\n@return (PHP 4, PHP 5)\n@note Note: This function does not require the GD image library.\n
is_a is_a(object $object, string $class_name) [bool]\nChecks if the object is of this class or has this class as one of its\nparents. Checks if the given `object` is of this class or has this class as\none of its parents.\n@param object The tested object\n@param class_name The class name\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see get_class() - Returns the name of the class of an object\n@see get_parent_class() - Retrieves the parent class name for object or class\n@see is_subclass_of() - Checks if the object has this class as one of\nits parents\n
is_array is_array(mixed $var) [bool]\nFinds whether a variable is an array. Finds whether the given variable is\nan array.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_string() - Find whether the type of a variable is string\n@see is_object() - Finds whether a variable is an object\n
is_bool is_bool(mixed $var) [bool]\nFinds out whether a variable is a boolean. Finds whether the given variable\nis a boolean.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_string() - Find whether the type of a variable is string\n@see is_object() - Finds whether a variable is an object\n@see is_array() - Finds whether a variable is an array\n
is_callable is_callable(callback $name [, bool $syntax_only=false [, string\n&$callable_name]]) [bool]\nVerify that the contents of a variable can be called as a function. Verify\nthat the contents of a variable can be called as a function. This can check\nthat a simple variable contains the name of a valid function, or that an\narray contains a properly encoded object and function name.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see function_exists() - Return TRUE if the given function has been defined\n@see method_exists() - Checks if the class method exists\n
is_dir is_dir(string $filename) [bool]\nTells whether the filename is a directory. Tells whether the given filename\nis a directory.\n@param filename Path to the file. If `filename` is a relative filename,\nit will be checked relative to the current working directory. If `filename`\nis a symbolic or hard link then the link will be resolved and checked. If\nyou have enabled safe mode, or open_basedir further restrictions may apply.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see chdir() - Change directory\n@see dir\n@see opendir() - Open directory handle\n@see is_file() - Tells whether the filename is a regular file\n@see is_link() - Tells whether the filename is a symbolic link\n
is_double is_double\nAlias of is_float.\n
is_executable is_executable(string $filename) [bool]\nTells whether the filename is executable. Tells whether the filename is\nexecutable.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_file() - Tells whether the filename is a regular file\n@see is_link() - Tells whether the filename is a symbolic link\n
is_file is_file(string $filename) [bool]\nTells whether the filename is a regular file. Tells whether the given file\nis a regular file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_dir() - Tells whether the filename is a directory\n@see is_link() - Tells whether the filename is a symbolic link\n
is_finite is_finite(float $val) [bool]\nFinds whether a value is a legal finite number. Checks whether `val` is a\nlegal finite on this platform.\n@param val The value to check\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see is_infinite() - Finds whether a value is infinite\n@see is_nan() - Finds whether a value is not a number\n
is_float is_float(mixed $var) [bool]\nFinds whether the type of a variable is float. Finds whether the type of\nthe given variable is float. Note: To test if a variable is a number or\na numeric string (such as form input, which is always a string), you must\nuse is_numeric().\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_int() - Find whether the type of a variable is integer\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_string() - Find whether the type of a variable is string\n@see is_array() - Finds whether a variable is an array\n@see is_object() - Finds whether a variable is an object\n
is_infinite is_infinite(float $val) [bool]\nFinds whether a value is infinite. Returns TRUE if `val` is infinite (positive\nor negative), like the result of `log(0)` or any value too big to fit into\na float on this platform.\n@param val The value to check\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see is_finite() - Finds whether a value is a legal finite number\n@see is_nan() - Finds whether a value is not a number\n
is_int is_int(mixed $var) [bool]\nFind whether the type of a variable is integer. Finds whether the type of\nthe given variable is integer. Note: To test if a variable is a number or\na numeric string (such as form input, which is always a string), you must\nuse is_numeric().\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_float() - Finds whether the type of a variable is float\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_string() - Find whether the type of a variable is string\n@see is_array() - Finds whether a variable is an array\n@see is_object() - Finds whether a variable is an object\n
is_integer is_integer\nAlias of is_int.\n
is_link is_link(string $filename) [bool]\nTells whether the filename is a symbolic link. Tells whether the given file\nis a symbolic link.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_dir() - Tells whether the filename is a directory\n@see is_file() - Tells whether the filename is a regular file\n@see readlink() - Returns the target of a symbolic link\n
is_long is_long\nAlias of is_int.\n
is_nan is_nan(float $val) [bool]\nFinds whether a value is not a number. Checks whether `val` is &#039;not a\nnumber&#039;, like the result of `acos(1.01)`.\n@param val The value to check\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see is_finite() - Finds whether a value is a legal finite number\n@see is_infinite() - Finds whether a value is infinite\n
is_null is_null(mixed $var) [bool]\nFinds whether a variable is NULL. Finds whether the given variable is NULL.\n@param var The variable being evaluated.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see The NULL type\n@see isset() - Determine if a variable is set and is not NULL\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_string() - Find whether the type of a variable is string\n@see is_object() - Finds whether a variable is an object\n@see is_array() - Finds whether a variable is an array\n
is_numeric is_numeric(mixed $var) [bool]\nFinds whether a variable is a number or a numeric string. Finds whether the\ngiven variable is numeric. Numeric strings consist of optional sign, any\nnumber of digits, optional decimal part and optional exponential part. Thus\n`+0123.45e6` is a valid numeric value. Hexadecimal notation (`0xFF`) is\nallowed too but only without sign, decimal and exponential part.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@see ctype_digit() - Check for numeric character(s)\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_null() - Finds whether a variable is NULL\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_string() - Find whether the type of a variable is string\n@see is_object() - Finds whether a variable is an object\n@see is_array() - Finds whether a variable is an array\n
is_object is_object(mixed $var) [bool]\nFinds whether a variable is an object. Finds whether the given variable is\nan object.\n@param var The variable being evaluated.\n@return (PHP 4, PHP 5)\n@note Note: This function will return FALSE if used on an unserialized\nobject where the class definition is not present (even though gettype()\nreturns object).\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_int() - Find whether the type of a variable is integer\n@see is_float() - Finds whether the type of a variable is float\n@see is_string() - Find whether the type of a variable is string\n@see is_array() - Finds whether a variable is an array\n
is_readable is_readable(string $filename) [bool]\nTells whether a file exists and is readable. Tells whether a file exists\nand is readable.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_writable() - Tells whether the filename is writable\n@see file_exists() - Checks whether a file or directory exists\n@see fgets() - Gets line from file pointer\n
is_real is_real\nAlias of is_float.\n
setFillRule ImagickDraw::setFillRule(int $fill_rule) [bool]\nSets the fill rule to use while drawing polygons.\n@param fill_rule FILLRULE_ constant\n@return (PECL imagick 2.0.0)\n
setFont ImagickDraw::setFont(string $font_name) [bool]\nSets the fully-specified font to use when annotating with text.\n@param font_name\n@return (PECL imagick 2.0.0)\n
setFontFamily ImagickDraw::setFontFamily(string $font_family) [bool]\nSets the font family to use when annotating with text.\n@param font_family the font family\n@return (PECL imagick 2.0.0)\n
setFontSize ImagickDraw::setFontSize(float $pointsize) [bool]\nSets the font pointsize to use when annotating with text.\n@param pointsize the point size\n@return (PECL imagick 2.0.0)\n
setFontStretch ImagickDraw::setFontStretch(int $fontStretch) [bool]\nSets the font stretch to use when annotating with text.\n@param fontStretch STRETCH_ constant\n@return (PECL imagick 2.0.0)\n
setFontStyle ImagickDraw::setFontStyle(int $style) [bool]\nSets the font style to use when annotating with text.\n@param style STYLETYPE_ constant\n@return (PECL imagick 2.0.0)\n
setFontWeight ImagickDraw::setFontWeight(int $font_weight) [bool]\nSets the font weight.\n@param font_weight\n@return (PECL imagick 2.0.0)\n
setGravity ImagickDraw::setGravity(int $gravity) [bool]\nSets the text placement gravity.\n@param gravity GRAVITY_ constant\n@return (PECL imagick 2.0.0)\n
setStrokeAlpha ImagickDraw::setStrokeAlpha(float $opacity) [bool]\nSpecifies the opacity of stroked object outlines.\n@param opacity opacity\n@return (PECL imagick 2.0.0)\n
setStrokeAntialias ImagickDraw::setStrokeAntialias(bool $stroke_antialias)\n[bool]\nControls whether stroked outlines are antialiased.\n@param stroke_antialias the antialias setting\n@return (PECL imagick 2.0.0)\n
setStrokeColor ImagickDraw::setStrokeColor(ImagickPixel $stroke_pixel) [bool]\nSets the color used for stroking object outlines.\n@param stroke_pixel the stroke color\n@return (PECL imagick 2.0.0)\n
setStrokeDashArray ImagickDraw::setStrokeDashArray(array $dashArray) [bool]\nSpecifies the pattern of dashes and gaps used to stroke paths.\n@param dashArray array of floats\n@return (PECL imagick 2.0.0)\n
setStrokeDashOffset ImagickDraw::setStrokeDashOffset(float $dash_offset) [bool]\nSpecifies the offset into the dash pattern to start the dash.\n@param dash_offset dash offset\n@return (PECL imagick 2.0.0)\n
setStrokeLineCap ImagickDraw::setStrokeLineCap(int $linecap) [bool]\nSpecifies the shape to be used at the end of open subpaths when they are\nstroked.\n@param linecap LINECAP_ constant\n@return (PECL imagick 2.0.0)\n
setStrokeLineJoin ImagickDraw::setStrokeLineJoin(int $linejoin) [bool]\nSpecifies the shape to be used at the corners of paths when they are stroked.\n@param linejoin LINEJOIN_ constant\n@return (PECL imagick 2.0.0)\n
setStrokeMiterLimit ImagickDraw::setStrokeMiterLimit(int $miterlimit) [bool]\nSpecifies the miter limit.\n@param miterlimit the miter limit\n@return (PECL imagick 2.0.0)\n
setStrokeOpacity ImagickDraw::setStrokeOpacity(float $stroke_opacity) [bool]\nSpecifies the opacity of stroked object outlines.\n@param stroke_opacity stroke opacity. 1.0 is fully opaque\n@return (PECL imagick 2.0.0)\n
setStrokePatternURL ImagickDraw::setStrokePatternURL(string $stroke_url) [bool]\nSets the pattern used for stroking object outlines.\n@param stroke_url stroke URL\n@return (PECL imagick 2.0.0)\n
setStrokeWidth ImagickDraw::setStrokeWidth(float $stroke_width) [bool]\nSets the width of the stroke used to draw object outlines.\n@param stroke_width stroke width\n@return (PECL imagick 2.0.0)\n
setTextAlignment ImagickDraw::setTextAlignment(int $alignment) [bool]\nSpecifies a text alignment.\n@param alignment ALIGN_ constant\n@return (PECL imagick 2.0.0)\n
setTextAntialias ImagickDraw::setTextAntialias(bool $antiAlias) [bool]\nControls whether text is antialiased.\n@param antiAlias\n@return (PECL imagick 2.0.0)\n
setTextDecoration ImagickDraw::setTextDecoration(int $decoration) [bool]\nSpecifies a decoration.\n@param decoration DECORATION_ constant\n@return (PECL imagick 2.0.0)\n
setTextEncoding ImagickDraw::setTextEncoding(string $encoding) [bool]\nSpecifies specifies the text code set.\n@param encoding the encoding name\n@return (PECL imagick 2.0.0)\n
setTextUnderColor ImagickDraw::setTextUnderColor(ImagickPixel $under_color)\n[bool]\nSpecifies the color of a background rectangle.\n@param under_color the under color\n@return (PECL imagick 2.0.0)\n
setVectorGraphics ImagickDraw::setVectorGraphics(string $xml) [bool]\nSets the vector graphics.\n@param xml xml containing the vector graphics\n@return (PECL imagick 2.0.0)\n
setViewbox ImagickDraw::setViewbox(int $x1, int $y1, int $x2, int $y2) [bool]\nSets the overall canvas size.\n@param x1 left x coordinate\n@param y1 left y coordinate\n@param x2 right x coordinate\n@param y2 right y coordinate\n@return (PECL imagick 2.0.0)\n
skewX ImagickDraw::skewX(float $degrees) [bool]\nSkews the current coordinate system in the horizontal direction.\n@param degrees degrees to skew\n@return (PECL imagick 2.0.0)\n
skewY ImagickDraw::skewY(float $degrees) [bool]\nSkews the current coordinate system in the vertical direction.\n@param degrees degrees to skew\n@return (PECL imagick 2.0.0)\n
translate ImagickDraw::translate(float $x, float $y) [bool]\nApplies a translation to the current coordinate system.\n@param x horizontal translation\n@param y vertical translation\n@return (PECL imagick 2.0.0)\n
clear ImagickPixel::clear(void) [bool]\nClears resources associated with this object.\n@return (PECL imagick 2.0.0)\n
__construct ImagickPixel::__construct([string $color]) [ImagickPixel]\nThe ImagickPixel constructor.\n@param color The optional color string to use as the initial value of\nthis object.\n@return (PECL imagick 2.0.0)\n
destroy ImagickPixel::destroy(void) [bool]\nDeallocates resources associated with this object.\n@return (PECL imagick 2.0.0)\n
getColor ImagickPixel::getColor([bool $normalized=false]) [array]\nReturns the color.\n@param normalized Normalize the color values\n@return (PECL imagick 2.0.0)\n
getColorAsString ImagickPixel::getColorAsString(void) [string]\nReturns the color as a string.\n@return (PECL imagick 2.1.0)\n
getColorCount ImagickPixel::getColorCount(void) [int]\nReturns the color count associated with this color.\n@return (PECL imagick 2.0.0)\n
getColorValue ImagickPixel::getColorValue(int $color) [float]\nGets the normalized value of the provided color channel.\n@param color The channel to check, specified as one of the Imagick channel\nconstants.\n@return (PECL imagick 2.0.0)\n
getHSL ImagickPixel::getHSL(void) [array]\nReturns the normalized HSL color of the ImagickPixel object.\n@return (PECL imagick 2.0.0)\n@note Note: Available with ImageMagick library version 6.2.9 and higher.\n
isSimilar ImagickPixel::isSimilar(ImagickPixel $color, float $fuzz) [bool]\nCheck the distance between this color and another.\n@param color The ImagickPixel object to compare this object against.\n@param fuzz The maximum distance within which to consider these colors as\nsimilar. The theoretical maximum for this value is the square root of three\n(1.732).\n@return (PECL imagick 2.0.0)\n
setColor ImagickPixel::setColor(string $color) [bool]\nSets the color.\n@param color The color definition to use in order to initialise the\nImagickPixel object.\n@return (PECL imagick 2.0.0)\n
setColorValue ImagickPixel::setColorValue(int $color, float $value) [bool]\nSets the normalized value of one of the channels.\n@param color One of the Imagick channel color constants.\n@param value The value to set this channel to, ranging from 0 to 1.\n@return (PECL imagick 2.0.0)\n
setHSL ImagickPixel::setHSL(float $hue, float $saturation, float $luminosity)\n[bool]\nSets the normalized HSL color.\n@param hue The normalized value for hue, described as a fractional arc\n(between 0 and 1) of the hue circle, where the zero value is red.\n@param saturation The normalized value for saturation, with 1 as full\nsaturation.\n@param luminosity The normalized value for luminosity, on a scale from black\nat 0 to white at 1, with the full HS value at 0.5 luminosity.\n@return (PECL imagick 2.0.0)\n@note Note: Available with ImageMagick library version 6.2.9 and higher.\n
clear ImagickPixelIterator::clear(void) [bool]\nClear resources associated with a PixelIterator.\n@return (PECL imagick 2.0.0)\n
__construct ImagickPixelIterator::__construct(Imagick $wand)\n[ImagickPixelIterator]\nThe ImagickPixelIterator constructor.\n@return (PECL imagick 2.0.0)\n
destroy ImagickPixelIterator::destroy(void) [bool]\nDeallocates resources associated with a PixelIterator.\n@return (PECL imagick 2.0.0)\n
getCurrentIteratorRow ImagickPixelIterator::getCurrentIteratorRow(void) [array]\nReturns the current row of ImagickPixel objects.\n@return (PECL imagick 2.0.0)\n
getIteratorRow ImagickPixelIterator::getIteratorRow(void) [int]\nReturns the current pixel iterator row.\n@return (PECL imagick 2.0.0)\n
getNextIteratorRow ImagickPixelIterator::getNextIteratorRow(void) [array]\nReturns the next row of the pixel iterator.\n@return (PECL imagick 2.0.0)\n
getPreviousIteratorRow ImagickPixelIterator::getPreviousIteratorRow(void)\n[array]\nReturns the previous row.\n@return (PECL imagick 2.0.0)\n
newPixelIterator ImagickPixelIterator::newPixelIterator(Imagick $wand) [bool]\nReturns a new pixel iterator.\n@return (PECL imagick 2.0.0)\n
newPixelRegionIterator ImagickPixelIterator::newPixelRegionIterator(Imagick\n$wand, int $x, int $y, int $columns, int $rows) [bool]\nReturns a new pixel iterator.\n@param wand\n@param x\n@param y\n@param columns\n@param rows\n@return (PECL imagick 2.0.0)\n
resetIterator ImagickPixelIterator::resetIterator(void) [bool]\nResets the pixel iterator.\n@return (PECL imagick 2.0.0)\n
setIteratorFirstRow ImagickPixelIterator::setIteratorFirstRow(void) [bool]\nSets the pixel iterator to the first pixel row.\n@return (PECL imagick 2.0.0)\n
setIteratorLastRow ImagickPixelIterator::setIteratorLastRow(void) [bool]\nSets the pixel iterator to the last pixel row.\n@return (PECL imagick 2.0.0)\n
setIteratorRow ImagickPixelIterator::setIteratorRow(int $row) [bool]\nSet the pixel iterator row.\n@param row\n@return (PECL imagick 2.0.0)\n
syncIterator ImagickPixelIterator::syncIterator(void) [bool]\nSyncs the pixel iterator.\n@return (PECL imagick 2.0.0)\n
imap_8bit imap_8bit(string $string) [string]\nConvert an 8bit string to a quoted-printable string. Convert an 8bit string\nto a quoted-printable string (according to &raquo; RFC2045, section 6.7).\n@param string The 8bit string to convert\n@return (PHP 4, PHP 5)\n@see imap_qprint() - Convert a quoted-printable string to an 8 bit string\n
imap_alerts imap_alerts(void) [array]\nReturns all IMAP alert messages that have occurred. Returns all of the IMAP\nalert messages generated since the last imap_alerts() call, or the beginning\nof the page. When imap_alerts() is called, the alert stack is subsequently\ncleared. The IMAP specification requires that these messages be passed to\nthe user.\n@return (PHP 4, PHP 5)\n@see imap_errors() - Returns all of the IMAP errors that have occured\n
imap_append imap_append(resource $imap_stream, string $mailbox, string $message\n[, string $options=NULL [, string $internal_date=NULL]]) [bool]\nAppend a string message to a specified mailbox. Appends a string `message`\nto the specified `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@param message The message to be append, as a string When talking to the Cyrus\nIMAP server, you must use &quot;\r\n&quot; as your end-of-line terminator\ninstead of &quot;\n&quot; or the operation will fail\n@param options If provided, the `options` will also be written to the `mailbox`\n@param internal_date If this parameter is set, it will set the INTERNALDATE\non the appended message. The parameter should be a date string that conforms\nto the rfc2060 specifications for a date_time value.\n@return (PHP 4, PHP 5)\n
imap_base64 imap_base64(string $text) [string]\nDecode BASE64 encoded text. Decodes the given BASE-64 encoded `text`.\n@param text The encoded text\n@return (PHP 4, PHP 5)\n@see imap_binary() - Convert an 8bit string to a base64 string\n@see base64_encode() - Encodes data with MIME base64\n@see base64_decode() - Decodes data encoded with MIME base64\n@see &raquo; RFC2045, Section 6.8\n
imap_binary imap_binary(string $string) [string]\nConvert an 8bit string to a base64 string. Convert an 8bit string to a base64\nstring according to &raquo; RFC2045, Section 6.8.\n@param string The 8bit string\n@return (PHP 4, PHP 5)\n@see imap_base64() - Decode BASE64 encoded text\n
imap_body imap_body(resource $imap_stream, int $msg_number [, int $options=0])\n[string]\nRead the message body. imap_body() returns the body of the message, numbered\n`msg_number` in the current mailbox. imap_body() will only return a verbatim\ncopy of the message body. To extract single parts of a multipart MIME-encoded\nmessage you have to use imap_fetchstructure() to analyze its structure and\nimap_fetchbody() to extract a copy of a single body component.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param options The optional `options` are a bit mask with one or more of the\nfollowing: FT_UID - The `msg_number` is a UID FT_PEEK - Do not set the \Seen\nflag if not already set FT_INTERNAL - The return string is in internal format,\nwill not canonicalize to CRLF.\n@return (PHP 4, PHP 5)\n
imap_bodystruct imap_bodystruct(resource $imap_stream, int $msg_number,\nstring $section) [object]\nRead the structure of a specified body section of a specific message. Read\nthe structure of a specified body section of a specific message.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param section The body section to read\n@return (PHP 4, PHP 5)\n@see imap_fetchstructure() - Read the structure of a particular message\n
imap_check imap_check(resource $imap_stream) [object]\nCheck current mailbox. Checks information about the current mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n
imap_clearflag_full imap_clearflag_full(resource $imap_stream, string\n$sequence, string $flag [, int $options=0]) [bool]\nClears flags on messages. This function causes a store to delete the specified\n`flag` to the flags set for the messages in the specified `sequence`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param sequence A sequence of message numbers. You can enumerate desired\nmessages with the `X,Y` syntax, or retrieve all messages within an interval\nwith the `X:Y` syntax\n@param flag The flags which you can unset are &quot;\\Seen&quot;,\n&quot;\\Answered&quot;, &quot;\\Flagged&quot;, &quot;\\Deleted&quot;, and\n&quot;\\Draft&quot; (as defined by &raquo; RFC2060)\n@param options `options` are a bit mask and may contain the single option:\nST_UID - The sequence argument contains UIDs instead of sequence numbers\n@return (PHP 4, PHP 5)\n@see imap_setflag_full() - Sets flags on messages\n
imap_close imap_close(resource $imap_stream [, int $flag=0]) [bool]\nClose an IMAP stream. Closes the imap stream.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param flag If set to CL_EXPUNGE, the function will silently expunge the\nmailbox before closing, removing all messages marked for deletion. You can\nachieve the same thing by using imap_expunge()\n@return (PHP 4, PHP 5)\n@see imap_open() - Open an IMAP stream to a mailbox\n
imap_createmailbox imap_createmailbox(resource $imap_stream, string $mailbox)\n[bool]\nCreate a new mailbox. Creates a new mailbox specified by `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information. Names\ncontaining international characters should be encoded by imap_utf7_encode()\n@return (PHP 4, PHP 5)\n@see imap_renamemailbox() - Rename an old mailbox to new mailbox\n@see imap_deletemailbox() - Delete a mailbox\n
imap_delete imap_delete(resource $imap_stream, int $msg_number [, int\n$options=0]) [bool]\nMark a message for deletion from current mailbox. Marks messages listed in\n`msg_number` for deletion. Messages marked for deletion will stay in the\nmailbox until either imap_expunge() is called or imap_close() is called with\nthe optional parameter CL_EXPUNGE.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param options You can set the FT_UID which tells the function to treat the\n`msg_number` argument as an `UID`.\n@return (PHP 4, PHP 5)\n@note Note: POP3 mailboxes do not have their message flags saved between\nconnections, so imap_expunge() must be called during the same connection in\norder for messages marked for deletion to actually be purged.\n@see imap_undelete() - Unmark the message which is marked deleted\n@see imap_expunge() - Delete all messages marked for deletion\n@see imap_close() - Close an IMAP stream\n
imap_deletemailbox imap_deletemailbox(resource $imap_stream, string $mailbox)\n[bool]\nDelete a mailbox. Deletes the specified `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@return (PHP 4, PHP 5)\n@see imap_createmailbox() - Create a new mailbox\n@see imap_renamemailbox() - Rename an old mailbox to new mailbox\n@see imap_open() - Open an IMAP stream to a mailbox for the format of `mbox`\n
imap_errors imap_errors(void) [array]\nReturns all of the IMAP errors that have occured. Gets all of the IMAP\nerrors (if any) that have occurred during this page request or since the\nerror stack was reset. When imap_errors() is called, the error stack is\nsubsequently cleared.\n@return (PHP 4, PHP 5)\n@see imap_last_error() - Gets the last IMAP error that occurred during this\npage request\n@see imap_alerts() - Returns all IMAP alert messages that have occurred\n
imap_expunge imap_expunge(resource $imap_stream) [bool]\nDelete all messages marked for deletion. Deletes all the messages marked\nfor deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n
imap_fetch_overview imap_fetch_overview(resource $imap_stream, string $sequence\n[, int $options=0]) [array]\nRead an overview of the information in the headers of the given message. This\nfunction fetches mail headers for the given `sequence` and returns an overview\nof their contents.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param sequence A message sequence description. You can enumerate desired\nmessages with the `X,Y` syntax, or retrieve all messages within an interval\nwith the `X:Y` syntax\n@param options `sequence` will contain a sequence of message indices or UIDs,\nif this parameter is set to FT_UID.\n@return (PHP 4, PHP 5)\n@see imap_fetchheader() - Returns header for a message\n
imap_fetchbody imap_fetchbody(resource $imap_stream, int $msg_number, string\n$section [, int $options=0]) [string]\nFetch a particular section of the body of the message. Fetch of a particular\nsection of the body of the specified messages. Body parts are not decoded\nby this function.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param section The part number. It is a string of integers delimited by\nperiod which index into a body part list as per the IMAP4 specification\n@param options A bitmask with one or more of the following: FT_UID - The\n`msg_number` is a UID FT_PEEK - Do not set the \Seen flag if not already set\nFT_INTERNAL - The return string is in internal format, will not canonicalize\nto CRLF.\n@return (PHP 4, PHP 5)\n@see imap_savebody() - Save a specific body section to a file\n@see imap_fetchstructure() - Read the structure of a particular message\n
imap_fetchheader imap_fetchheader(resource $imap_stream, int $msg_number [,\nint $options=0]) [string]\nReturns header for a message. This function causes a fetch of the complete,\nunfiltered &raquo; RFC2822 format header of the specified message.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param options The possible `options` are: FT_UID - The `msgno` argument\nis a UID FT_INTERNAL - The return string is in &quot;internal&quot; format,\nwithout any attempt to canonicalize to CRLF newlines FT_PREFETCHTEXT - The\nRFC822.TEXT should be pre-fetched at the same time. This avoids an extra RTT\non an IMAP connection if a full message text is desired (e.g. in a &quot;save\nto local file&quot; operation)\n@return (PHP 4, PHP 5)\n@see imap_fetch_overview() - Read an overview of the information in the\nheaders of the given message\n
imap_fetchmime imap_fetchmime(resource $imap_stream, int $msg_number, string\n$section [, int $options=0]) [string]\nFetch MIME headers for a particular section of the message. Fetch the MIME\nheaders of a particular section of the body of the specified messages.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param section The part number. It is a string of integers delimited by\nperiod which index into a body part list as per the IMAP4 specification\n@param options A bitmask with one or more of the following: FT_UID - The\n`msg_number` is a UID FT_PEEK - Do not set the \Seen flag if not already set\nFT_INTERNAL - The return string is in internal format, will not canonicalize\nto CRLF.\n@return (PHP 5 >= 5.3.6)\n@see imap_fetchbody() - Fetch a particular section of the body of the message\n@see imap_fetchstructure() - Read the structure of a particular message\n@see imap_fetchheader() - Returns header for a message\n
imap_fetchstructure imap_fetchstructure(resource $imap_stream, int $msg_number\n[, int $options=0]) [object]\nRead the structure of a particular message. Fetches all the structured\ninformation for a given message.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param options This optional parameter only has a single option, FT_UID,\nwhich tells the function to treat the `msg_number` argument as a `UID`.\n@return (PHP 4, PHP 5)\n@see imap_fetchbody() - Fetch a particular section of the body of the message\n@see imap_bodystruct() - Read the structure of a specified body section of\na specific message\n
imap_gc imap_gc(resource $imap_stream, int $caches) [bool]\nClears IMAP cache. Purges the cache of entries of a specific type.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param caches Specifies the cache to purge. It may one or a combination of\nthe following constants: IMAP_GC_ELT (message cache elements), IMAP_GC_ENV\n(enveloppe and bodies), IMAP_GC_TEXTS (texts).\n@return (PHP 5 >= 5.3.0)\n
imap_get_quota imap_get_quota(resource $imap_stream, string $quota_root)\n[array]\nRetrieve the quota level settings, and usage statics per mailbox. Retrieve\nthe quota level settings, and usage statics per mailbox. For a non-admin user\nversion of this function, please see the imap_get_quotaroot() function of PHP.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param quota_root `quota_root` should normally be in the form of `user.name`\nwhere name is the mailbox you wish to retrieve information about.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see imap_open() - Open an IMAP stream to a mailbox\n@see imap_set_quota() - Sets a quota for a given mailbox\n@see imap_get_quotaroot() - Retrieve the quota settings per user\n
imap_get_quotaroot imap_get_quotaroot(resource $imap_stream, string\n$quota_root) [array]\nRetrieve the quota settings per user. Retrieve the quota settings per\nuser. The limit value represents the total amount of space allowed for this\nuser&#039;s total mailbox usage. The usage value represents the user&#039;s\ncurrent total mailbox capacity.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param quota_root `quota_root` should normally be in the form of which mailbox\n(i.e. INBOX).\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see imap_open() - Open an IMAP stream to a mailbox\n@see imap_set_quota() - Sets a quota for a given mailbox\n@see imap_get_quota() - Retrieve the quota level settings, and usage statics\nper mailbox\n
imap_getacl imap_getacl(resource $imap_stream, string $mailbox) [array]\nGets the ACL for a given mailbox. Gets the ACL for a given mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param mailbox The mailbox name, see imap_open() for more information\n@return (PHP 5)\n@see imap_setacl() - Sets the ACL for a giving mailbox\n
imap_getmailboxes imap_getmailboxes(resource $imap_stream, string $ref,\nstring $pattern) [array]\nRead the list of mailboxes, returning detailed information on each one. Gets\ninformation on the mailboxes.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param ref `ref` should normally be just the server specification as described\nin imap_open()\n@param pattern Specifies where in the mailbox hierarchy to start\nsearching.There are two special characters you can pass as part of the\n`pattern`: &#039;`*`&#039; and &#039;`%`&#039;. &#039;`*`&#039; means to return\nall mailboxes. If you pass `pattern` as &#039;`*`&#039;, you will get a list\nof the entire mailbox hierarchy. &#039;`%`&#039; means to return the current\nlevel only. &#039;`%`&#039; as the `pattern` parameter will return only the\ntop level mailboxes; &#039;`~/mail/%`&#039; on `UW_IMAPD` will return every\nmailbox in the ~/mail directory, but none in subfolders of that directory.\n@return (PHP 4, PHP 5)\n@see imap_getsubscribed() - List all the subscribed mailboxes\n
imap_getsubscribed imap_getsubscribed(resource $imap_stream, string $ref,\nstring $pattern) [array]\nList all the subscribed mailboxes. Gets information about the subscribed\nmailboxes. Identical to imap_getmailboxes(), except that it only returns\nmailboxes that the user is subscribed to.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param ref `ref` should normally be just the server specification as described\nin imap_open()\n@param pattern Specifies where in the mailbox hierarchy to start\nsearching.There are two special characters you can pass as part of the\n`pattern`: &#039;`*`&#039; and &#039;`%`&#039;. &#039;`*`&#039; means to return\nall mailboxes. If you pass `pattern` as &#039;`*`&#039;, you will get a list\nof the entire mailbox hierarchy. &#039;`%`&#039; means to return the current\nlevel only. &#039;`%`&#039; as the `pattern` parameter will return only the\ntop level mailboxes; &#039;`~/mail/%`&#039; on `UW_IMAPD` will return every\nmailbox in the ~/mail directory, but none in subfolders of that directory.\n@return (PHP 4, PHP 5)\n
imap_header imap_header\nAlias of imap_headerinfo.\n
imap_headerinfo imap_headerinfo(resource $imap_stream, int $msg_number [,\nint $fromlength=0 [, int $subjectlength=0 [, string $defaulthost=NULL]]])\n[object]\nRead the header of the message. Gets information about the given message\nnumber by reading its headers.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msg_number The message number\n@param fromlength Number of characters for the `fetchfrom` property. Must\nbe greater than or equal to zero.\n@param subjectlength Number of characters for the `fetchsubject` property\nMust be greater than or equal to zero.\n@param defaulthost\n@return (PHP 4, PHP 5)\n@see imap_fetch_overview() - Read an overview of the information in the\nheaders of the given message\n
imap_headers imap_headers(resource $imap_stream) [array]\nReturns headers for all messages in a mailbox. Returns headers for all\nmessages in a mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n
imap_last_error imap_last_error(void) [string]\nGets the last IMAP error that occurred during this page request. Gets\nthe full text of the last IMAP error message that occurred on the current\npage. The error stack is untouched; calling imap_last_error() subsequently,\nwith no intervening errors, will return the same error.\n@return (PHP 4, PHP 5)\n@see imap_errors() - Returns all of the IMAP errors that have occured\n
imap_list imap_list(resource $imap_stream, string $ref, string $pattern)\n[array]\nRead the list of mailboxes. Read the list of mailboxes.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param ref `ref` should normally be just the server specification as described\nin imap_open().\n@param pattern Specifies where in the mailbox hierarchy to start\nsearching.There are two special characters you can pass as part of the\n`pattern`: &#039;`*`&#039; and &#039;`%`&#039;. &#039;`*`&#039; means to return\nall mailboxes. If you pass `pattern` as &#039;`*`&#039;, you will get a list\nof the entire mailbox hierarchy. &#039;`%`&#039; means to return the current\nlevel only. &#039;`%`&#039; as the `pattern` parameter will return only the\ntop level mailboxes; &#039;`~/mail/%`&#039; on `UW_IMAPD` will return every\nmailbox in the ~/mail directory, but none in subfolders of that directory.\n@return (PHP 4, PHP 5)\n@see imap_getmailboxes() - Read the list of mailboxes, returning detailed\ninformation on each one\n@see imap_lsub() - List all the subscribed mailboxes\n
imap_listmailbox imap_listmailbox\nAlias of imap_list.\n
imap_listscan imap_listscan(resource $imap_stream, string $ref, string\n$pattern, string $content) [array]\nReturns the list of mailboxes that matches the given text. Returns an array\ncontaining the names of the mailboxes that have `content` in the text of\nthe mailbox. This function is similar to imap_listmailbox(), but it will\nadditionally check for the presence of the string `content` inside the\nmailbox data.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param ref `ref` should normally be just the server specification as described\nin imap_open()\n@param pattern Specifies where in the mailbox hierarchy to start\nsearching.There are two special characters you can pass as part of the\n`pattern`: &#039;`*`&#039; and &#039;`%`&#039;. &#039;`*`&#039; means to return\nall mailboxes. If you pass `pattern` as &#039;`*`&#039;, you will get a list\nof the entire mailbox hierarchy. &#039;`%`&#039; means to return the current\nlevel only. &#039;`%`&#039; as the `pattern` parameter will return only the\ntop level mailboxes; &#039;`~/mail/%`&#039; on `UW_IMAPD` will return every\nmailbox in the ~/mail directory, but none in subfolders of that directory.\n@param content The searched string\n@return (PHP 4, PHP 5)\n@see imap_listmailbox() - Alias of imap_list\n@see imap_search() - This function returns an array of messages matching\nthe given search criteria\n
imap_listsubscribed imap_listsubscribed\nAlias of imap_lsub.\n
imap_lsub imap_lsub(resource $imap_stream, string $ref, string $pattern)\n[array]\nList all the subscribed mailboxes. Gets an array of all the mailboxes that\nyou have subscribed.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param ref `ref` should normally be just the server specification as described\nin imap_open()\n@param pattern Specifies where in the mailbox hierarchy to start\nsearching.There are two special characters you can pass as part of the\n`pattern`: &#039;`*`&#039; and &#039;`%`&#039;. &#039;`*`&#039; means to return\nall mailboxes. If you pass `pattern` as &#039;`*`&#039;, you will get a list\nof the entire mailbox hierarchy. &#039;`%`&#039; means to return the current\nlevel only. &#039;`%`&#039; as the `pattern` parameter will return only the\ntop level mailboxes; &#039;`~/mail/%`&#039; on `UW_IMAPD` will return every\nmailbox in the ~/mail directory, but none in subfolders of that directory.\n@return (PHP 4, PHP 5)\n@see imap_list() - Read the list of mailboxes\n@see imap_getmailboxes() - Read the list of mailboxes, returning detailed\ninformation on each one\n
imap_mail_compose imap_mail_compose(array $envelope, array $body) [string]\nCreate a MIME message based on given envelope and body sections. Create a\nMIME message based on the given `envelope` and `body` sections.\n@param envelope An associative array of headers fields. Valid keys\nare: &quot;remail&quot;, &quot;return_path&quot;, &quot;date&quot;,\n&quot;from&quot;, &quot;reply_to&quot;, &quot;in_reply_to&quot;,\n&quot;subject&quot;, &quot;to&quot;, &quot;cc&quot;, &quot;bcc&quot;,\n&quot;message_id&quot; and &quot;custom_headers&quot; (which contains\nassociative array of other headers).\n@param body An indexed array of bodies A body is an associative array which\ncan consist of the following keys: &quot;type&quot;, &quot;encoding&quot;,\n&quot;charset&quot;, &quot;type.parameters&quot;, &quot;subtype&quot;,\n&quot;id&quot;, &quot;description&quot;, &quot;disposition.type&quot;,\n&quot;disposition&quot;, &quot;contents.data&quot;, &quot;lines&quot;,\n&quot;bytes&quot; and &quot;md5&quot;.\n@return (PHP 4, PHP 5)\n
imap_mail_copy imap_mail_copy(resource $imap_stream, string $msglist, string\n$mailbox [, int $options=0]) [bool]\nCopy specified messages to a mailbox. Copies mail messages specified by\n`msglist` to specified mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msglist `msglist` is a range not just message numbers (as described\nin &raquo; RFC2060).\n@param mailbox The mailbox name, see imap_open() for more information\n@param options `options` is a bitmask of one or more of CP_UID - the sequence\nnumbers contain UIDS CP_MOVE - Delete the messages from the current mailbox\nafter copying\n@return (PHP 4, PHP 5)\n@see imap_mail_move() - Move specified messages to a mailbox\n
imap_mail_move imap_mail_move(resource $imap_stream, string $msglist, string\n$mailbox [, int $options=0]) [bool]\nMove specified messages to a mailbox. Moves mail messages specified by\n`msglist` to the specified `mailbox`.\n@param  imap_stream An IMAP stream returned by imap_open().\n@param msglist `msglist` is a range not just message numbers (as described\nin &raquo; RFC2060).\n@param mailbox The mailbox name, see imap_open() for more information\n@param options `options` is a bitmask and may contain the single option:\nCP_UID - the sequence numbers contain UIDS\n@return (PHP 4, PHP 5)\n@note Note: imap_mail_move() will flag the original mail with a delete flag,\nto successfully delete it a call to the imap_expunge() function must be made.\n@see imap_mail_copy() - Copy specified messages to a mailbox\n
imap_mail imap_mail(string $to, string $subject, string $message [, string\n$additional_headers=NULL [, string $cc=NULL [, string $bcc=NULL [, string\n$rpath=NULL]]]]) [bool]\nSend an email message. This function allows sending of emails with correct\nhandling of Cc and Bcc receivers. The parameters `to`, `cc` and `bcc` are\nall strings and are all parsed as &raquo; RFC822 address lists.\n@param to The receiver\n@param subject The mail subject\n@param message The mail body\n@param additional_headers As string with additional headers to be set on\nthe mail\n@param cc\n@param bcc The receivers specified in `bcc` will get the mail, but are\nexcluded from the headers.\n@param rpath Use this parameter to specify return path upon mail delivery\nfailure. This is useful when using PHP as a mail client for multiple users.\n@return (PHP 4, PHP 5)\n@see mail() - Send mail\n
imap_mailboxmsginfo imap_mailboxmsginfo(resource $imap_stream) [object]\nGet information about the current mailbox. Checks the current mailbox status\non the server. It is similar to imap_status(), but will additionally sum\nup the size of all messages in the mailbox, which will take some additional\ntime to execute.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n
imap_mime_header_decode imap_mime_header_decode(string $text) [array]\nDecode MIME header elements. Decodes MIME message header extensions that\nare non ASCII text (see &raquo; RFC2047).\n@param text The MIME text\n@return (PHP 4, PHP 5)\n@see imap_utf8() - Converts MIME-encoded text to UTF-8\n
imap_msgno imap_msgno(resource $imap_stream, int $uid) [int]\nGets the message sequence number for the given UID. Returns the message\nsequence number for the given `uid`. This function is the inverse of\nimap_uid().\n@param  imap_stream An IMAP stream returned by imap_open().\n@param uid The message UID\n@return (PHP 4, PHP 5)\n@see imap_uid() - This function returns the UID for the given message\nsequence number\n
imap_num_msg imap_num_msg(resource $imap_stream) [int]\nGets the number of messages in the current mailbox. Gets the number of\nmessages in the current mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n@see imap_num_recent() - Gets the number of recent messages in current mailbox\n@see imap_status() - Returns status information on a mailbox\n
imap_num_recent imap_num_recent(resource $imap_stream) [int]\nGets the number of recent messages in current mailbox. Gets the number of\nrecent messages in the current mailbox.\n@param  imap_stream An IMAP stream returned by imap_open().\n@return (PHP 4, PHP 5)\n@see imap_num_msg() - Gets the number of messages in the current mailbox\n@see imap_status() - Returns status information on a mailbox\n
imap_open imap_open(string $mailbox, string $username, string $password [,\nint $options=NIL [, int $n_retries=0 [, array $params=NULL]]]) [resource]\nOpen an IMAP stream to a mailbox. Opens an IMAP stream to a `mailbox`. This\nfunction can also be used to open streams to POP3 and NNTP servers, but some\nfunctions and features are only available on IMAP servers.\n@param mailbox A mailbox name consists of a server and a mailbox path on\nthis server. The special name `INBOX` stands for the current users personal\nmailbox. Mailbox names that contain international characters besides those\nin the printable ASCII space have to be encoded width imap_utf7_encode(). The\nserver part, which is enclosed in &#039;{&#039; and &#039;}&#039;, consists of\nthe servers name or ip address, an optional port (prefixed by &#039;:&#039;),\nand an optional protocol specification (prefixed by &#039;/&#039;). The server\npart is mandatory in all mailbox parameters. All names which start with `{`\nare remote names, and are in the form `&quot;{&quot; remote_system_name\n[&quot;:&quot; port] [flags] &quot;}&quot; [mailbox_name]` where:\n`remote_system_name` - Internet domain name or bracketed IP address of\nserver. `port` - optional TCP port number, default is the default port for\nthat service `flags` - optional flags, see following table. `mailbox_name` -\nremote mailbox name, default is INBOX Optional flags for names Flag Description\n`/service=`service mailbox access service, default is &quot;imap&quot;\n`/user=`user remote user name for login on the server `/authuser=`user remote\nauthentication user; if specified this is the user name whose password\nis used (e.g. administrator) `/anonymous` remote access as anonymous\nuser `/debug` record protocol telemetry in application&#039;s debug log\n`/secure` do not transmit a plaintext password over the network `/imap`,\n`/imap2`, `/imap2bis`, `/imap4`, `/imap4rev1` equivalent to `/service=imap`\n`/pop3` equivalent to `/service=pop3` `/nntp` equivalent to `/service=nntp`\n`/norsh` do not use rsh or ssh to establish a preauthenticated IMAP session\n`/ssl` use the `Secure Socket Layer` to encrypt the session `/validate-cert`\nvalidate certificates from TLS/SSL server (this is the default behavior)\n`/novalidate-cert` do not validate certificates from TLS/SSL server, needed\nif server uses self-signed certificates `/tls` force use of `start-TLS` to\nencrypt the session, and reject connection to servers that do not support it\n`/notls` do not do `start-TLS` to encrypt the session, even with servers\nthat support it `/readonly` request read-only mailbox open (IMAP only;\nignored on NNTP, and an error with SMTP and POP3)\n@param username The user name\n@param password The password associated with the `username`\n@param options The `options` are a bit mask with one or more of the following:\nOP_READONLY - Open mailbox read-only OP_ANONYMOUS - Don&#039;t use or update\na .newsrc for news (NNTP only) OP_HALFOPEN - For IMAP and NNTP names, open\na connection but don&#039;t open a mailbox. CL_EXPUNGE - Expunge mailbox\nautomatically upon mailbox close (see also imap_delete() and imap_expunge())\nOP_DEBUG - Debug protocol negotiations OP_SHORTCACHE - Short (`elt`-only)\ncaching OP_SILENT - Don&#039;t pass up events (internal use) OP_PROTOTYPE -\nReturn driver prototype OP_SECURE - Don&#039;t do non-secure authentication\n@param n_retries Number of maximum connect attempts\n@param params Connection parameters, the following (string) keys maybe used\nto set one or more connection parameters: `DISABLE_AUTHENTICATOR` - Disable\nauthentication properties\n@return (PHP 4, PHP 5)\n@see imap_close() - Close an IMAP stream\n
transverseImage Imagick::transverseImage(void) [bool]\nCreates a horizontal mirror image. Creates a horizontal mirror image\nby reflecting the pixels around the central y-axis while rotating them\n270-degrees. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n@see Imagick::transposeImage() - Creates a vertical mirror image\n
trimImage Imagick::trimImage(float $fuzz) [bool]\nRemove edges from the image. Remove edges that are the background color from\nthe image. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@param fuzz By default target must match a particular pixel color\nexactly. However, in many cases two colors may differ by a small amount. The\nfuzz member of image defines how much tolerance is acceptable to consider\ntwo colors as the same. This parameter represents the variation on the\nquantum range.\n@return (PECL imagick 2.0.0)\n@see Imagick::getQuantumDepth() - Gets the quantum depth\n@see Imagick::getQuantumRange() - Returns the Imagick quantum range\n
uniqueImageColors Imagick::uniqueImageColors(void) [bool]\nDiscards all but one of any pixel color. Discards all but one of any\npixel color. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n
unsharpMaskImage Imagick::unsharpMaskImage(float $radius, float $sigma,\nfloat $amount, float $threshold [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nSharpens an image.\n@param radius\n@param sigma\n@param amount\n@param threshold\n@param channel\n@return (PECL imagick 2.0.0)\n
valid Imagick::valid(void) [bool]\nChecks if the current item is valid.\n@return (PECL imagick 2.0.0)\n
vignetteImage Imagick::vignetteImage(float $blackPoint, float $whitePoint,\nint $x, int $y) [bool]\nAdds vignette filter to the image. Softens the edges of the image in\nvignette style. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@param blackPoint The black point.\n@param whitePoint The white point\n@param x X offset of the ellipse\n@param y Y offset of the ellipse\n@return (PECL imagick 2.0.0)\n@see Imagick::waveImage() - Applies wave filter to the image\n@see Imagick::swirlImage() - Swirls the pixels about the center of the image\n
waveImage Imagick::waveImage(float $amplitude, float $length) [bool]\nApplies wave filter to the image. Applies a wave filter to the image. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.2.9 or newer.\n@param amplitude The amplitude of the wave.\n@param length The length of the wave.\n@return (PECL imagick 2.0.0)\n@see Imagick::solarizeImage() - Applies a solarizing effect to the image\n@see Imagick::oilpaintImage() - Simulates an oil painting\n@see Imagick::embossImage() - Returns a grayscale image with a\nthree-dimensional effect\n@see Imagick::addNoiseImage() - Adds random noise to the image\n@see Imagick::swirlImage() - Swirls the pixels about the center of the image\n
whiteThresholdImage Imagick::whiteThresholdImage(mixed $threshold) [bool]\nForce all pixels above the threshold into white.\n@param threshold\n@return (PECL imagick 2.0.0)\n
writeImage Imagick::writeImage([string $filename]) [bool]\nWrites an image to the specified filename.\n@param filename\n@return (PECL imagick 0.9.0-0.9.9)\n
writeImageFile Imagick::writeImageFile(resource $filehandle) [bool]\nWrites an image to a filehandle. Writes the image sequence to an open\nfilehandle. The handle must be opened with for example fopen. This method\nis available if Imagick has been compiled against ImageMagick version 6.3.6\nor newer.\n@param filehandle Filehandle where to write the image\n@return (No version information available, might only be in SVN)\n
writeImages Imagick::writeImages(string $filename, bool $adjoin) [bool]\nWrites an image or image sequence.\n@param filename\n@param adjoin\n@return (PECL imagick 0.9.0-0.9.9)\n
writeImagesFile Imagick::writeImagesFile(resource $filehandle) [bool]\nWrites frames to a filehandle. Writes all image frames into an open\nfilehandle. This method can be used to write animated gifs or other multiframe\nimages into open filehandle. This method is available if Imagick has been\ncompiled against ImageMagick version 6.3.6 or newer.\n@param filehandle Filehandle where to write the images\n@return (No version information available, might only be in SVN)\n
affine ImagickDraw::affine(array $affine) [bool]\nAdjusts the current affine transformation matrix.\n@param affine Affine matrix parameters\n@return (PECL imagick 2.0.0)\n
annotation ImagickDraw::annotation(float $x, float $y, string $text) [bool]\nDraws text on the image.\n@param x The x coordinate where text is drawn\n@param y The y coordinate where text is drawn\n@param text The text to draw on the image\n@return (PECL imagick 2.0.0)\n
arc ImagickDraw::arc(float $sx, float $sy, float $ex, float $ey, float $sd,\nfloat $ed) [bool]\nDraws an arc.\n@param sx Starting x ordinate of bounding rectangle\n@param sy starting y ordinate of bounding rectangle\n@param ex ending x ordinate of bounding rectangle\n@param ey ending y ordinate of bounding rectangle\n@param sd starting degrees of rotation\n@param ed ending degrees of rotation\n@return (PECL imagick 2.0.0)\n
bezier ImagickDraw::bezier(array $coordinates) [bool]\nDraws a bezier curve.\n@param coordinates Multidimensional array like array( array( &#039;x&#039;\n=> 1, &#039;y&#039; => 2 ), array( &#039;x&#039; => 3, &#039;y&#039; => 4 ) )\n@return (PECL imagick 2.0.0)\n
circle ImagickDraw::circle(float $ox, float $oy, float $px, float $py) [bool]\nDraws a circle.\n@param ox origin x coordinate\n@param oy origin y coordinate\n@param px perimeter x coordinate\n@param py perimeter y coordinate\n@return (PECL imagick 2.0.0)\n
clear ImagickDraw::clear(void) [bool]\nClears the ImagickDraw.\n@return (PECL imagick 2.0.0)\n
clone ImagickDraw::clone(void) [ImagickDraw]\nMakes an exact copy of the specified ImagickDraw object.\n@return (PECL imagick 2.0.0)\n
color ImagickDraw::color(float $x, float $y, int $paintMethod) [bool]\nDraws color on image.\n@param x x coordinate of the paint\n@param y y coordinate of the paint\n@param paintMethod one of the PAINT_ constants\n@return (PECL imagick 2.0.0)\n
comment ImagickDraw::comment(string $comment) [bool]\nAdds a comment.\n@param comment The comment string to add to vector output stream\n@return (PECL imagick 2.0.0)\n
composite ImagickDraw::composite(int $compose, float $x, float $y, float\n$width, float $height, Imagick $compositeWand) [bool]\nComposites an image onto the current image.\n@param compose composition operator. One of COMPOSITE_ constants\n@param x x coordinate of the top left corner\n@param y y coordinate of the top left corner\n@param width width of the composition image\n@param height height of the composition image\n@param compositeWand the Imagick object where composition image is taken from\n@return (PECL imagick 2.0.0)\n
__construct ImagickDraw::__construct(void) [ImagickDraw]\nThe ImagickDraw constructor.\n@return (PECL imagick 2.0.0)\n
destroy ImagickDraw::destroy(void) [bool]\nFrees all associated resources.\n@return (PECL imagick 2.0.0)\n
ellipse ImagickDraw::ellipse(float $ox, float $oy, float $rx, float $ry,\nfloat $start, float $end) [bool]\nDraws an ellipse on the image.\n@param ox\n@param oy\n@param rx\n@param ry\n@param start\n@param end\n@return (PECL imagick 2.0.0)\n
getClipPath ImagickDraw::getClipPath(void) [string]\nObtains the current clipping path ID.\n@return (PECL imagick 2.0.0)\n
getClipRule ImagickDraw::getClipRule(void) [int]\nReturns the current polygon fill rule.\n@return (PECL imagick 2.0.0)\n
getClipUnits ImagickDraw::getClipUnits(void) [int]\nReturns the interpretation of clip path units.\n@return (PECL imagick 2.0.0)\n
getFillColor ImagickDraw::getFillColor(void) [ImagickPixel]\nReturns the fill color.\n@return (PECL imagick 2.0.0)\n
getFillOpacity ImagickDraw::getFillOpacity(void) [float]\nReturns the opacity used when drawing.\n@return (PECL imagick 2.0.0)\n
getFillRule ImagickDraw::getFillRule(void) [int]\nReturns the fill rule.\n@return (PECL imagick 2.0.0)\n
getFont ImagickDraw::getFont(void) [string]\nReturns the font.\n@return (PECL imagick 2.0.0)\n
getFontFamily ImagickDraw::getFontFamily(void) [string]\nReturns the font family.\n@return (PECL imagick 2.0.0)\n
getFontSize ImagickDraw::getFontSize(void) [float]\nReturns the font pointsize.\n@return (PECL imagick 2.0.0)\n
getFontStyle ImagickDraw::getFontStyle(void) [int]\nReturns the font style.\n@return (PECL imagick 2.0.0)\n
getFontWeight ImagickDraw::getFontWeight(void) [int]\nReturns the font weight.\n@return (PECL imagick 2.0.0)\n
getGravity ImagickDraw::getGravity(void) [int]\nReturns the text placement gravity.\n@return (PECL imagick 2.0.0)\n
getStrokeAntialias ImagickDraw::getStrokeAntialias(void) [bool]\nReturns the current stroke antialias setting.\n@return (PECL imagick 2.0.0)\n
getStrokeColor ImagickDraw::getStrokeColor(void) [ImagickPixel]\nReturns the color used for stroking object outlines.\n@param stroke_color\n@return (PECL imagick 2.0.0)\n
getStrokeDashArray ImagickDraw::getStrokeDashArray(void) [array]\nReturns an array representing the pattern of dashes and gaps used to stroke\npaths.\n@return (PECL imagick 2.0.0)\n
getStrokeDashOffset ImagickDraw::getStrokeDashOffset(void) [float]\nReturns the offset into the dash pattern to start the dash.\n@return (PECL imagick 2.0.0)\n
getStrokeLineCap ImagickDraw::getStrokeLineCap(void) [int]\nReturns the shape to be used at the end of open subpaths when they are stroked.\n@return (PECL imagick 2.0.0)\n
getStrokeLineJoin ImagickDraw::getStrokeLineJoin(void) [int]\nReturns the shape to be used at the corners of paths when they are stroked.\n@return (PECL imagick 2.0.0)\n
getStrokeMiterLimit ImagickDraw::getStrokeMiterLimit(void) [int]\nReturns the stroke miter limit.\n@return (PECL imagick 2.0.0)\n
getStrokeOpacity ImagickDraw::getStrokeOpacity(void) [float]\nReturns the opacity of stroked object outlines.\n@return (PECL imagick 2.0.0)\n
getStrokeWidth ImagickDraw::getStrokeWidth(void) [float]\nReturns the width of the stroke used to draw object outlines.\n@return (PECL imagick 2.0.0)\n
getTextAlignment ImagickDraw::getTextAlignment(void) [int]\nReturns the text alignment.\n@return (PECL imagick 2.0.0)\n
getTextAntialias ImagickDraw::getTextAntialias(void) [bool]\nReturns the current text antialias setting.\n@return (PECL imagick 2.0.0)\n
getTextDecoration ImagickDraw::getTextDecoration(void) [int]\nReturns the text decoration.\n@return (PECL imagick 2.0.0)\n
getTextEncoding ImagickDraw::getTextEncoding(void) [string]\nReturns the code set used for text annotations.\n@return (PECL imagick 2.0.0)\n
getTextUnderColor ImagickDraw::getTextUnderColor(void) [ImagickPixel]\nReturns the text under color.\n@return (PECL imagick 2.0.0)\n
getVectorGraphics ImagickDraw::getVectorGraphics(void) [string]\nReturns a string containing vector graphics.\n@return (PECL imagick 2.0.0)\n
line ImagickDraw::line(float $sx, float $sy, float $ex, float $ey) [bool]\nDraws a line.\n@param sx starting x coordinate\n@param sy starting y coordinate\n@param ex ending x coordinate\n@param ey ending y coordinate\n@return (PECL imagick 2.0.0)\n
matte ImagickDraw::matte(float $x, float $y, int $paintMethod) [bool]\nPaints on the image's opacity channel.\n@param x x coordinate of the matte\n@param y y coordinate of the matte\n@param paintMethod PAINT_ constant\n@return (PECL imagick 2.0.0)\n
pathClose ImagickDraw::pathClose(void) [bool]\nAdds a path element to the current path.\n@return (PECL imagick 2.0.0)\n
pathCurveToAbsolute ImagickDraw::pathCurveToAbsolute(float $x1, float $y1,\nfloat $x2, float $y2, float $x, float $y) [bool]\nDraws a cubic Bezier curve.\n@param x1 x coordinate of the first control point\n@param y1 y coordinate of the first control point\n@param x2 x coordinate of the second control point\n@param y2 y coordinate of the first control point\n@param x x coordinate of the curve end\n@param y y coordinate of the curve end\n@return (PECL imagick 2.0.0)\n
pathCurveToQuadraticBezierAbsolute\nImagickDraw::pathCurveToQuadraticBezierAbsolute(float $x1, float $y1, float\n$x, float $y) [bool]\nDraws a quadratic Bezier curve.\n@param x1 x coordinate of the control point\n@param y1 y coordinate of the control point\n@param x x coordinate of the end point\n@param y y coordinate of the end point\n@return (PECL imagick 2.0.0)\n
pathCurveToQuadraticBezierRelative\nImagickDraw::pathCurveToQuadraticBezierRelative(float $x1, float $y1, float\n$x, float $y) [bool]\nDraws a quadratic Bezier curve.\n@param x1 starting x coordinate\n@param y1 starting y coordinate\n@param x ending x coordinate\n@param y ending y coordinate\n@return (PECL imagick 2.0.0)\n
pathCurveToQuadraticBezierSmoothAbsolute\nImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute(float $x, float $y)\n[bool]\nDraws a quadratic Bezier curve.\n@param x ending x coordinate\n@param y ending y coordinate\n@return (PECL imagick 2.0.0)\n
pathCurveToQuadraticBezierSmoothRelative\nImagickDraw::pathCurveToQuadraticBezierSmoothRelative(float $x, float $y)\n[bool]\nDraws a quadratic Bezier curve.\n@param x ending x coordinate\n@param y ending y coordinate\n@return (PECL imagick 2.0.0)\n
pathCurveToRelative ImagickDraw::pathCurveToRelative(float $x1, float $y1,\nfloat $x2, float $y2, float $x, float $y) [bool]\nDraws a cubic Bezier curve.\n@param x1 x coordinate of starting control point\n@param y1 y coordinate of starting control point\n@param x2 x coordinate of ending control point\n@param y2 y coordinate of ending control point\n@param x ending x coordinate\n@param y ending y coordinate\n@return (PECL imagick 2.0.0)\n
pathCurveToSmoothAbsolute ImagickDraw::pathCurveToSmoothAbsolute(float $x2,\nfloat $y2, float $x, float $y) [bool]\nDraws a cubic Bezier curve.\n@param x2 x coordinate of the second control point\n@param y2 y coordinate of the second control point\n@param x x coordinate of the ending point\n@param y y coordinate of the ending point\n@return (PECL imagick 2.0.0)\n
pathCurveToSmoothRelative ImagickDraw::pathCurveToSmoothRelative(float $x2,\nfloat $y2, float $x, float $y) [bool]\nDraws a cubic Bezier curve.\n@param x2 x coordinate of the second control point\n@param y2 y coordinate of the second control point\n@param x x coordinate of the ending point\n@param y y coordinate of the ending point\n@return (PECL imagick 2.0.0)\n
pathEllipticArcAbsolute ImagickDraw::pathEllipticArcAbsolute(float $rx,\nfloat $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag,\nfloat $x, float $y) [bool]\nDraws an elliptical arc.\n@param rx x radius\n@param ry y radius\n@param x_axis_rotation x axis rotation\n@param large_arc_flag large arc flag\n@param sweep_flag sweep flag\n@param x x coordinate\n@param y y coordinate\n@return (PECL imagick 2.0.0)\n
pathEllipticArcRelative ImagickDraw::pathEllipticArcRelative(float $rx,\nfloat $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag,\nfloat $x, float $y) [bool]\nDraws an elliptical arc.\n@param rx x radius\n@param ry y radius\n@param x_axis_rotation x axis rotation\n@param large_arc_flag large arc flag\n@param sweep_flag sweep flag\n@param x x coordinate\n@param y y coordinate\n@return (PECL imagick 2.0.0)\n
pathFinish ImagickDraw::pathFinish(void) [bool]\nTerminates the current path.\n@return (PECL imagick 2.0.0)\n
pathLineToAbsolute ImagickDraw::pathLineToAbsolute(float $x, float $y) [bool]\nDraws a line path.\n@param x starting x coordinate\n@param y ending x coordinate\n@return (PECL imagick 2.0.0)\n
pathLineToHorizontalAbsolute ImagickDraw::pathLineToHorizontalAbsolute(float\n$x) [bool]\nDraws a horizontal line path.\n@param x x coordinate\n@return (PECL imagick 2.0.0)\n
pathLineToHorizontalRelative ImagickDraw::pathLineToHorizontalRelative(float\n$x) [bool]\nDraws a horizontal line.\n@param x x coordinate\n@return (PECL imagick 2.0.0)\n
pathLineToRelative ImagickDraw::pathLineToRelative(float $x, float $y) [bool]\nDraws a line path.\n@param x starting x coordinate\n@param y starting y coordinate\n@return (PECL imagick 2.0.0)\n
pathLineToVerticalAbsolute ImagickDraw::pathLineToVerticalAbsolute(float $y)\n[bool]\nDraws a vertical line.\n@param y y coordinate\n@return (PECL imagick 2.0.0)\n
pathLineToVerticalRelative ImagickDraw::pathLineToVerticalRelative(float $y)\n[bool]\nDraws a vertical line path.\n@param y y coordinate\n@return (PECL imagick 2.0.0)\n
pathMoveToAbsolute ImagickDraw::pathMoveToAbsolute(float $x, float $y) [bool]\nStarts a new sub-path.\n@param x x coordinate of the starting point\n@param y y coordinate of the starting point\n@return (PECL imagick 2.0.0)\n
pathMoveToRelative ImagickDraw::pathMoveToRelative(float $x, float $y) [bool]\nStarts a new sub-path.\n@param x target x coordinate\n@param y target y coordinate\n@return (PECL imagick 2.0.0)\n
pathStart ImagickDraw::pathStart(void) [bool]\nDeclares the start of a path drawing list.\n@return (PECL imagick 2.0.0)\n
point ImagickDraw::point(float $x, float $y) [bool]\nDraws a point.\n@param x point&#039;s x coordinate\n@param y point&#039;s y coordinate\n@return (PECL imagick 2.0.0)\n
polygon ImagickDraw::polygon(array $coordinates) [bool]\nDraws a polygon.\n@param coordinates multidimensional array like array( array( &#039;x&#039;\n=> 3, &#039;y&#039; => 4 ), array( &#039;x&#039; => 2, &#039;y&#039; => 6 ) );\n@return (PECL imagick 2.0.0)\n
polyline ImagickDraw::polyline(array $coordinates) [bool]\nDraws a polyline.\n@param coordinates array of x and y coordinates: array( array( &#039;x&#039;\n=> 4, &#039;y&#039; => 6 ), array( &#039;x&#039; => 8, &#039;y&#039; => 10 ) )\n@return (PECL imagick 2.0.0)\n
pop ImagickDraw::pop(void) [bool]\nDestroys the current ImagickDraw in the stack, and returns to the previously\npushed ImagickDraw.\n@return (PECL imagick 2.0.0)\n
popClipPath ImagickDraw::popClipPath(void) [bool]\nTerminates a clip path definition.\n@return (PECL imagick 2.0.0)\n
popDefs ImagickDraw::popDefs(void) [bool]\nTerminates a definition list.\n@return (PECL imagick 2.0.0)\n
popPattern ImagickDraw::popPattern(void) [bool]\nTerminates a pattern definition.\n@return (PECL imagick 2.0.0)\n
push ImagickDraw::push(void) [bool]\nClones the current ImagickDraw and pushes it to the stack.\n@return (PECL imagick 2.0.0)\n
pushClipPath ImagickDraw::pushClipPath(string $clip_mask_id) [bool]\nStarts a clip path definition.\n@param clip_mask_id Clip mask Id\n@return (PECL imagick 2.0.0)\n
pushDefs ImagickDraw::pushDefs(void) [bool]\nIndicates that following commands create named elements for early processing.\n@return (PECL imagick 2.0.0)\n
pushPattern ImagickDraw::pushPattern(string $pattern_id, float $x, float $y,\nfloat $width, float $height) [bool]\nIndicates that subsequent commands up to a ImagickDraw::opPattern() command\ncomprise the definition of a named pattern.\n@param pattern_id the pattern Id\n@param x x coordinate of the top-left corner\n@param y y coordinate of the top-left corner\n@param width width of the pattern\n@param height height of the pattern\n@return (PECL imagick 2.0.0)\n
rectangle ImagickDraw::rectangle(float $x1, float $y1, float $x2, float $y2)\n[bool]\nDraws a rectangle.\n@param x1 x coordinate of the top left corner\n@param y1 y coordinate of the top left corner\n@param x2 x coordinate of the bottom right corner\n@param y2 y coordinate of the bottom right corner\n@return (PECL imagick 2.0.0)\n
render ImagickDraw::render(void) [bool]\nRenders all preceding drawing commands onto the image.\n@return (PECL imagick 2.0.0)\n
rotate ImagickDraw::rotate(float $degrees) [bool]\nApplies the specified rotation to the current coordinate space.\n@param degrees degrees to rotate\n@return (PECL imagick 2.0.0)\n
roundRectangle ImagickDraw::roundRectangle(float $x1, float $y1, float $x2,\nfloat $y2, float $rx, float $ry) [bool]\nDraws a rounded rectangle.\n@param x1 x coordinate of the top left corner\n@param y1 y coordinate of the top left corner\n@param x2 x coordinate of the bottom right\n@param y2 y coordinate of the bottom right\n@param rx x rounding\n@param ry y rounding\n@return (PECL imagick 2.0.0)\n
scale ImagickDraw::scale(float $x, float $y) [bool]\nAdjusts the scaling factor.\n@param x horizontal factor\n@param y vertical factor\n@return (PECL imagick 2.0.0)\n
setClipPath ImagickDraw::setClipPath(string $clip_mask) [bool]\nAssociates a named clipping path with the image.\n@param clip_mask the clipping path name\n@return (PECL imagick 2.0.0)\n
setClipRule ImagickDraw::setClipRule(int $fill_rule) [bool]\nSet the polygon fill rule to be used by the clipping path.\n@param fill_rule FILLRULE_ constant\n@return (PECL imagick 2.0.0)\n
setClipUnits ImagickDraw::setClipUnits(int $clip_units) [bool]\nSets the interpretation of clip path units.\n@param clip_units the number of clip units\n@return (PECL imagick 2.0.0)\n
setFillAlpha ImagickDraw::setFillAlpha(float $opacity) [bool]\nSets the opacity to use when drawing using the fill color or fill texture.\n@param opacity fill alpha\n@return (PECL imagick 2.0.0)\n
setFillColor ImagickDraw::setFillColor(ImagickPixel $fill_pixel) [bool]\nSets the fill color to be used for drawing filled objects.\n@param fill_pixel ImagickPixel to use to set the color\n@return (PECL imagick 2.0.0)\n
setFillOpacity ImagickDraw::setFillOpacity(float $fillOpacity) [bool]\nSets the opacity to use when drawing using the fill color or fill texture.\n@param fillOpacity the fill opacity\n@return (PECL imagick 2.0.0)\n
setFillPatternURL ImagickDraw::setFillPatternURL(string $fill_url) [bool]\nSets the URL to use as a fill pattern for filling objects.\n@param fill_url URL to use to obtain fill pattern.\n@return (PECL imagick 2.0.0)\n
recolorImage Imagick::recolorImage(array $matrix) [bool]\nRecolors image. Translate, scale, shear, or rotate image colors. This method\nsupports variable sized matrices but normally 5x5 matrix is used for RGBA and\n6x6 is used for CMYK. The last row should contain the normalized values. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.3.6 or newer.\n@param matrix The matrix containing the color values\n@return (No version information available, might only be in SVN)\n@see Imagick::displayImage() - Displays an image\n
reduceNoiseImage Imagick::reduceNoiseImage(float $radius) [bool]\nSmooths the contours of an image.\n@param radius\n@return (PECL imagick 2.0.0)\n
removeImage Imagick::removeImage(void) [bool]\nRemoves an image from the image list.\n@return (PECL imagick 2.0.0)\n
removeImageProfile Imagick::removeImageProfile(string $name) [string]\nRemoves the named image profile and returns it.\n@param name\n@return (PECL imagick 2.0.0)\n
render Imagick::render(void) [bool]\nRenders all preceding drawing commands.\n@return (PECL imagick 2.0.0)\n
resampleImage Imagick::resampleImage(float $x_resolution, float $y_resolution,\nint $filter, float $blur) [bool]\nResample image to desired resolution.\n@param x_resolution\n@param y_resolution\n@param filter\n@param blur\n@return (PECL imagick 2.0.0)\n
resetImagePage Imagick::resetImagePage(string $page) [bool]\nReset image page. The page definition as a string. The string is in format\nWxH+x+y. This method is available if Imagick has been compiled against\nImageMagick version 6.3.6 or newer.\n@param page The page definition. For example `7168x5147+0+0`\n@return (No version information available, might only be in SVN)\n
resizeImage Imagick::resizeImage(int $columns, int $rows, int $filter,\nfloat $blur [, bool $bestfit=false]) [bool]\nScales an image.\n@param columns Width of the image\n@param rows Height of the image\n@param filter Refer to the list of filter constants.\n@param blur The blur factor where > 1 is blurry, &lt; 1 is sharp.\n@param bestfit Optional fit parameter.\n@return (PECL imagick 2.0.0)\n
rollImage Imagick::rollImage(int $x, int $y) [bool]\nOffsets an image.\n@param x The X offset.\n@param y The Y offset.\n@return (PECL imagick 2.0.0)\n
rotateImage Imagick::rotateImage(mixed $background, float $degrees) [bool]\nRotates an image.\n@param background The background color\n@param degrees The number of degrees to rotate the image\n@return (PECL imagick 2.0.0)\n
roundCorners Imagick::roundCorners(float $x_rounding, float $y_rounding [,\nfloat $stroke_width=10 [, float $displace=5 [, float $size_correction=-6]]])\n[bool]\nRounds image corners. Rounds image corners. The first two parameters control\nthe amount of rounding and the three last parameters can be used to fine-tune\nthe rounding process. This method is available if Imagick has been compiled\nagainst ImageMagick version 6.2.9 or newer.\n@param x_rounding x rounding\n@param y_rounding y rounding\n@param stroke_width stroke width\n@param displace image displace\n@param size_correction size correction\n@return (PECL imagick 2.0.0)\n
sampleImage Imagick::sampleImage(int $columns, int $rows) [bool]\nScales an image with pixel sampling.\n@param columns\n@param rows\n@return (PECL imagick 2.0.0)\n
scaleImage Imagick::scaleImage(int $cols, int $rows [, bool $bestfit=false])\n[bool]\nScales the size of an image.\n@param cols\n@param rows\n@param bestfit\n@return (PECL imagick 2.0.0)\n
separateImageChannel Imagick::separateImageChannel(int $channel) [bool]\nSeparates a channel from the image.\n@param channel\n@return (PECL imagick 2.0.0)\n
sepiaToneImage Imagick::sepiaToneImage(float $threshold) [bool]\nSepia tones an image.\n@param threshold\n@return (PECL imagick 2.0.0)\n
setBackgroundColor Imagick::setBackgroundColor(mixed $background) [bool]\nSets the object's default background color.\n@param background\n@return (PECL imagick 2.0.0)\n
setColorspace Imagick::setColorspace(int $COLORSPACE) [bool]\nSet colorspace. Sets the global colorspace value for the object. This method\nis available if Imagick has been compiled against ImageMagick version 6.5.7\nor newer.\n@param COLORSPACE One of the COLORSPACE constants\n@return (No version information available, might only be in SVN)\n
setCompression Imagick::setCompression(int $compression) [bool]\nSets the object's default compression type.\n@param compression\n@return (PECL imagick 2.0.0)\n
setCompressionQuality Imagick::setCompressionQuality(int $quality) [bool]\nSets the object's default compression quality.\n@param quality\n@return (PECL imagick 0.9.10-0.9.9)\n
setFilename Imagick::setFilename(string $filename) [bool]\nSets the filename before you read or write the image.\n@param filename\n@return (PECL imagick 2.0.0)\n
setFirstIterator Imagick::setFirstIterator(void) [bool]\nSets the Imagick iterator to the first image.\n@return (PECL imagick 2.0.0)\n
setFont Imagick::setFont(string $font) [bool]\nSets font. Sets object&#039;s font property. This method can be used\nfor example to set font for caption: pseudo-format. The font needs to be\nconfigured in ImageMagick confiration or a file by the name of `font` must\nexist. This method should not be confused with ImagickDraw::setFont() which\nsets the font for a specific ImagickDraw object. This method is available\nif Imagick has been compiled against ImageMagick version 6.3.7 or newer.\n@param font Font name or a filename\n@return (PECL imagick 2.1.0)\n@see Imagick::getFont() - Gets font\n@see ImagickDraw::setFont() - Sets the fully-specified font to use when\nannotating with text\n@see ImagickDraw::getFont() - Returns the font\n
setFormat Imagick::setFormat(string $format) [bool]\nSets the format of the Imagick object.\n@param format\n@return (PECL imagick 2.0.0)\n
setGravity Imagick::setGravity(int $gravity) [bool]\nSets the gravity. Sets the global gravity property for the Imagick object. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.4.0 or newer.\n@param gravity The gravity property. Refer to the list of gravity constants.\n@return (No version information available, might only be in SVN)\n
setImage Imagick::setImage(Imagick $replace) [bool]\nReplaces image in the object.\n@param replace The replace Imagick object\n@return (PECL imagick 2.0.0)\n
setImageAlphaChannel Imagick::setImageAlphaChannel(int $mode) [bool]\nSets image alpha channel. Activate or deactivate image alpha channel. The\n`mode` is one of the Imagick::ALPHACHANNEL_* constants. This method is\navailable if Imagick has been compiled against ImageMagick version 6.3.8\nor newer.\n@param mode One of the Imagick::ALPHACHANNEL_* constants\n@return (No version information available, might only be in SVN)\n@see Imagick::setImageMatte() - Sets the image matte channel\n
setImageArtifact Imagick::setImageArtifact(string $artifact, string $value)\n[bool]\nSet image artifact. Associates an artifact with the image. The difference\nbetween image properties and image artifacts is that properties are public\nand artifacts are private. This method is available if Imagick has been\ncompiled against ImageMagick version 6.5.7 or newer.\n@param artifact The name of the artifact\n@param value The value of the artifact\n@return (No version information available, might only be in SVN)\n@see Imagick::getImageArtifact() - Get image artifact\n@see Imagick::deleteImageArtifact() - Delete image artifact\n
setImageBackgroundColor Imagick::setImageBackgroundColor(mixed $background)\n[bool]\nSets the image background color.\n@param background\n@return (PECL imagick 2.0.0)\n
setImageBias Imagick::setImageBias(float $bias) [bool]\nSets the image bias for any method that convolves an image.\n@param bias\n@return (PECL imagick 2.0.0)\n
setImageBluePrimary Imagick::setImageBluePrimary(float $x, float $y) [bool]\nSets the image chromaticity blue primary point.\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setImageBorderColor Imagick::setImageBorderColor(mixed $border) [bool]\nSets the image border color.\n@param border The border color\n@return (PECL imagick 2.0.0)\n
setImageChannelDepth Imagick::setImageChannelDepth(int $channel, int $depth)\n[bool]\nSets the depth of a particular image channel.\n@param channel\n@param depth\n@return (PECL imagick 2.0.0)\n
setImageClipMask Imagick::setImageClipMask(Imagick $clip_mask) [bool]\nSets image clip mask. Sets image clip mask from another Imagick object. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.3.6 or newer.\n@param clip_mask The Imagick object containing the clip mask\n@return (No version information available, might only be in SVN)\n
setImageColormapColor Imagick::setImageColormapColor(int $index, ImagickPixel\n$color) [bool]\nSets the color of the specified colormap index.\n@param index\n@param color\n@return (PECL imagick 2.0.0)\n
setImageColorspace Imagick::setImageColorspace(int $colorspace) [bool]\nSets the image colorspace.\n@param colorspace\n@return (PECL imagick 2.0.0)\n
setImageCompose Imagick::setImageCompose(int $compose) [bool]\nSets the image composite operator.\n@param compose\n@return (PECL imagick 2.0.0)\n
setImageCompression Imagick::setImageCompression(int $compression) [bool]\nSets the image compression.\n@param compression One of the COMPRESSION constants\n@return (PECL imagick 2.0.0)\n
setImageCompressionQuality Imagick::setImageCompressionQuality(int $quality)\n[bool]\nSets the image compression quality. Sets the image compression quality.\n@param quality The image compression quality as an integer\n@return (No version information available, might only be in SVN)\n
setImageDelay Imagick::setImageDelay(int $delay) [bool]\nSets the image delay.\n@param delay\n@return (PECL imagick 2.0.0)\n
setImageDepth Imagick::setImageDepth(int $depth) [bool]\nSets the image depth.\n@param depth\n@return (PECL imagick 2.0.0)\n
setImageDispose Imagick::setImageDispose(int $dispose) [bool]\nSets the image disposal method.\n@param dispose\n@return (PECL imagick 2.0.0)\n
setImageExtent Imagick::setImageExtent(int $columns, int $rows) [bool]\nSets the image size.\n@param columns\n@param rows\n@return (PECL imagick 2.0.0)\n
setImageFilename Imagick::setImageFilename(string $filename) [bool]\nSets the filename of a particular image.\n@param filename\n@return (PECL imagick 2.0.0)\n
setImageFormat Imagick::setImageFormat(string $format) [bool]\nSets the format of a particular image.\n@param format String presentation of the image format. Format support depends\non the ImageMagick installation.\n@return (PECL imagick 2.0.0)\n
setImageGamma Imagick::setImageGamma(float $gamma) [bool]\nSets the image gamma.\n@param gamma\n@return (PECL imagick 2.0.0)\n
setImageGravity Imagick::setImageGravity(int $gravity) [bool]\nSets the image gravity. Sets the gravity property for the current\nimage. This method can be used to set the gravity property for a single\nimage sequence. This method is available if Imagick has been compiled against\nImageMagick version 6.4.4 or newer.\n@param gravity The gravity property. Refer to the list of gravity constants.\n@return (No version information available, might only be in SVN)\n
setImageGreenPrimary Imagick::setImageGreenPrimary(float $x, float $y) [bool]\nSets the image chromaticity green primary point.\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setImageIndex Imagick::setImageIndex(int $index) [bool]\nSet the iterator position.\n@param index The position to set the iterator to\n@return (PECL imagick 2.0.0)\n
setImageInterlaceScheme Imagick::setImageInterlaceScheme(int $interlace_scheme)\n[bool]\nSets the image compression.\n@param interlace_scheme\n@return (PECL imagick 2.0.0)\n
setImageInterpolateMethod Imagick::setImageInterpolateMethod(int $method)\n[bool]\nSets the image interpolate pixel method. Sets the image interpolate pixel\nmethod.\n@param method The method is one of the Imagick::INTERPOLATE_* constants\n@return (PECL imagick 2.0.0)\n
setImageIterations Imagick::setImageIterations(int $iterations) [bool]\nSets the image iterations.\n@param iterations\n@return (PECL imagick 2.0.0)\n
setImageMatte Imagick::setImageMatte(bool $matte) [bool]\nSets the image matte channel. Sets the image matte channel. This method is\navailable if Imagick has been compiled against ImageMagick version 6.2.9\nor newer.\n@param matte True activates the matte channel and false disables it.\n@return (PECL imagick 2.0.0)\n
setImageMatteColor Imagick::setImageMatteColor(mixed $matte) [bool]\nSets the image matte color.\n@param matte\n@return (PECL imagick 2.0.0)\n
setImageOpacity Imagick::setImageOpacity(float $opacity) [bool]\nSets the image opacity level. Sets the image to the specified opacity\nlevel. This method is available if Imagick has been compiled against\nImageMagick version 6.3.1 or newer.\n@param opacity The level of transparency: 1.0 is fully opaque and 0.0 is\nfully transparent.\n@return (PECL imagick 2.0.0)\n
setImageOrientation Imagick::setImageOrientation(int $orientation) [bool]\nSets the image orientation. Sets the image orientation.\n@param orientation One of the orientation constants\n@return (PECL imagick 2.0.0)\n
setImagePage Imagick::setImagePage(int $width, int $height, int $x, int $y)\n[bool]\nSets the page geometry of the image.\n@param width\n@param height\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setImageProfile Imagick::setImageProfile(string $name, string $profile) [bool]\nAdds a named profile to the Imagick object.\n@param name\n@param profile\n@return (PECL imagick 2.0.0)\n
setImageProperty Imagick::setImageProperty(string $name, string $value) [bool]\nSets an image property. Sets a named property to the image. This method is\navailable if Imagick has been compiled against ImageMagick version 6.3.2\nor newer.\n@param name\n@param value\n@return (PECL imagick 2.0.0)\n@see Imagick::getImageProperty() - Returns the named image property\n
setImageRedPrimary Imagick::setImageRedPrimary(float $x, float $y) [bool]\nSets the image chromaticity red primary point.\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setImageRenderingIntent Imagick::setImageRenderingIntent(int $rendering_intent)\n[bool]\nSets the image rendering intent.\n@param rendering_intent\n@return (PECL imagick 2.0.0)\n
setImageResolution Imagick::setImageResolution(float $x_resolution, float\n$y_resolution) [bool]\nSets the image resolution.\n@param x_resolution\n@param y_resolution\n@return (PECL imagick 2.0.0)\n
setImageScene Imagick::setImageScene(int $scene) [bool]\nSets the image scene.\n@param scene\n@return (PECL imagick 2.0.0)\n
setImageTicksPerSecond Imagick::setImageTicksPerSecond(int $ticks_per-second)\n[bool]\nSets the image ticks-per-second.\n@param ticks_per-second\n@return (PECL imagick 2.0.0)\n
setImageType Imagick::setImageType(int $image_type) [bool]\nSets the image type.\n@param image_type\n@return (PECL imagick 2.0.0)\n
setImageUnits Imagick::setImageUnits(int $units) [bool]\nSets the image units of resolution.\n@param units\n@return (PECL imagick 2.0.0)\n
setImageVirtualPixelMethod Imagick::setImageVirtualPixelMethod(int $method)\n[bool]\nSets the image virtual pixel method.\n@param method\n@return (PECL imagick 2.0.0)\n
setImageWhitePoint Imagick::setImageWhitePoint(float $x, float $y) [bool]\nSets the image chromaticity white point.\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setInterlaceScheme Imagick::setInterlaceScheme(int $interlace_scheme) [bool]\nSets the image compression.\n@param interlace_scheme\n@return (PECL imagick 2.0.0)\n
setIteratorIndex Imagick::setIteratorIndex(int $index) [bool]\nSet the iterator position. Set the iterator to the position in the image list\nspecified with the index parameter. This method is available if Imagick has\nbeen compiled against ImageMagick version 6.2.9 or newer.\n@param index The position to set the iterator to\n@return (PECL imagick 2.0.0)\n@see Imagick::getIteratorIndex() - Gets the index of the current active image\n@see Imagick::getImageIndex() - Gets the index of the current active image\n@see Imagick::setImageIndex() - Set the iterator position\n
setLastIterator Imagick::setLastIterator(void) [bool]\nSets the Imagick iterator to the last image.\n@return (PECL imagick 2.0.1)\n
setOption Imagick::setOption(string $key, string $value) [bool]\nSet an option.\n@param key\n@param value\n@return (PECL imagick 2.0.0)\n
setPage Imagick::setPage(int $width, int $height, int $x, int $y) [bool]\nSets the page geometry of the Imagick object.\n@param width\n@param height\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
setPointSize Imagick::setPointSize(float $point_size) [bool]\nSets point size. Sets object&#039;s point size property. This method can be\nused for example to set font size for caption: pseudo-format. This method\nis available if Imagick has been compiled against ImageMagick version 6.3.7\nor newer.\n@param point_size Point size\n@return (PECL imagick 2.1.0)\n@see Imagick::getPointSize() - Gets point size\n
setResolution Imagick::setResolution(float $x_resolution, float $y_resolution)\n[bool]\nSets the image resolution.\n@param x_resolution\n@param y_resolution\n@return (PECL imagick 2.0.0)\n
setResourceLimit Imagick::setResourceLimit(int $type, int $limit) [bool]\nSets the limit for a particular resource in megabytes.\n@param type\n@param limit\n@return (PECL imagick 2.0.0)\n
setSamplingFactors Imagick::setSamplingFactors(array $factors) [bool]\nSets the image sampling factors.\n@param factors\n@return (PECL imagick 2.0.0)\n
setSize Imagick::setSize(int $columns, int $rows) [bool]\nSets the size of the Imagick object.\n@param columns\n@param rows\n@return (PECL imagick 2.0.0)\n
setSizeOffset Imagick::setSizeOffset(int $columns, int $rows, int $offset)\n[bool]\nSets the size and offset of the Imagick object.\n@param columns The width in pixels.\n@param rows The height in pixels.\n@param offset The image offset.\n@return (PECL imagick 2.0.0)\n
setType Imagick::setType(int $image_type) [bool]\nSets the image type attribute.\n@param image_type\n@return (PECL imagick 2.0.0)\n
shadeImage Imagick::shadeImage(bool $gray, float $azimuth, float $elevation)\n[bool]\nCreates a 3D effect. Shines a distant light on an image to create a\nthree-dimensional effect. You control the positioning of the light with\nazimuth and elevation; azimuth is measured in degrees off the x axis and\nelevation is measured in pixels above the Z axis. This method is available\nif Imagick has been compiled against ImageMagick version 6.2.9 or newer.\n@param gray A value other than zero shades the intensity of each pixel.\n@param azimuth Defines the light source direction.\n@param elevation Defines the light source direction.\n@return (PECL imagick 2.0.0)\n
shadowImage Imagick::shadowImage(float $opacity, float $sigma, int $x, int $y)\n[bool]\nSimulates an image shadow.\n@param opacity\n@param sigma\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
sharpenImage Imagick::sharpenImage(float $radius, float $sigma [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nSharpens an image.\n@param radius\n@param sigma\n@param channel\n@return (PECL imagick 2.0.0)\n
shaveImage Imagick::shaveImage(int $columns, int $rows) [bool]\nShaves pixels from the image edges.\n@param columns\n@param rows\n@return (PECL imagick 2.0.0)\n
shearImage Imagick::shearImage(mixed $background, float $x_shear, float\n$y_shear) [bool]\nCreating a parallelogram.\n@param background The background color\n@param x_shear The number of degrees to shear on the x axis\n@param y_shear The number of degrees to shear on the y axis\n@return (PECL imagick 2.0.0)\n
sigmoidalContrastImage Imagick::sigmoidalContrastImage(bool $sharpen, float\n$alpha, float $beta [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nAdjusts the contrast of an image.\n@param sharpen\n@param alpha\n@param beta\n@param channel\n@return (PECL imagick 2.0.0)\n
sketchImage Imagick::sketchImage(float $radius, float $sigma, float $angle)\n[bool]\nSimulates a pencil sketch. Simulates a pencil sketch. We convolve the\nimage with a Gaussian operator of the given radius and standard deviation\n(sigma). For reasonable results, radius should be larger than sigma. Use\na radius of 0 and Imagick::sketchImage() selects a suitable radius for\nyou. Angle gives the angle of the blurring motion. This method is available\nif Imagick has been compiled against ImageMagick version 6.2.9 or newer.\n@param radius The radius of the Gaussian, in pixels, not counting the\ncenter pixel\n@param sigma The standard deviation of the Gaussian, in pixels.\n@param angle Apply the effect along this angle.\n@return (PECL imagick 2.0.0)\n
solarizeImage Imagick::solarizeImage(int $threshold) [bool]\nApplies a solarizing effect to the image.\n@param threshold\n@return (PECL imagick 2.0.0)\n
spliceImage Imagick::spliceImage(int $width, int $height, int $x, int $y)\n[bool]\nSplices a solid color into the image.\n@param width\n@param height\n@param x\n@param y\n@return (PECL imagick 2.0.0)\n
spreadImage Imagick::spreadImage(float $radius) [bool]\nRandomly displaces each pixel in a block.\n@param radius\n@return (PECL imagick 2.0.0)\n
steganoImage Imagick::steganoImage(Imagick $watermark_wand, int $offset)\n[Imagick]\nHides a digital watermark within the image.\n@param watermark_wand\n@param offset\n@return (PECL imagick 2.0.0)\n
stereoImage Imagick::stereoImage(Imagick $offset_wand) [bool]\nComposites two images.\n@param offset_wand\n@return (PECL imagick 2.0.0)\n
stripImage Imagick::stripImage(void) [bool]\nStrips an image of all profiles and comments.\n@return (PECL imagick 2.0.0)\n
swirlImage Imagick::swirlImage(float $degrees) [bool]\nSwirls the pixels about the center of the image.\n@param degrees\n@return (PECL imagick 2.0.0)\n
textureImage Imagick::textureImage(Imagick $texture_wand) [bool]\nRepeatedly tiles the texture image.\n@param texture_wand\n@return (PECL imagick 2.0.0)\n
thresholdImage Imagick::thresholdImage(float $threshold [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nChanges the value of individual pixels based on a threshold.\n@param threshold\n@param channel\n@return (PECL imagick 2.0.0)\n
thumbnailImage Imagick::thumbnailImage(int $columns, int $rows [, bool\n$bestfit=false [, bool $fill=false]]) [bool]\nChanges the size of an image.\n@param columns Image width\n@param rows Image height\n@param bestfit Whether to force maximum values\n@return (PECL imagick 2.0.0)\n
tintImage Imagick::tintImage(mixed $tint, mixed $opacity) [bool]\nApplies a color vector to each pixel in the image.\n@param tint\n@param opacity\n@return (PECL imagick 2.0.0)\n
transformImage Imagick::transformImage(string $crop, string $geometry)\n[Imagick]\nConvenience method for setting crop size and the image geometry. A convenience\nmethod for setting crop size and the image geometry from strings. This method\nis available if Imagick has been compiled against ImageMagick version 6.2.9\nor newer.\n@param crop A crop geometry string. This geometry defines a subregion of\nthe image to crop.\n@param geometry An image geometry string. This geometry defines the final\nsize of the image.\n@return (PECL imagick 2.0.0)\n@see Imagick::cropImage() - Extracts a region of the image\n@see Imagick::resizeImage() - Scales an image\n@see Imagick::thumbnailImage() - Changes the size of an image\n
transparentPaintImage Imagick::transparentPaintImage(mixed $target, float\n$alpha, float $fuzz, bool $invert) [bool]\nPaints pixels transparent. Paints pixels matching the target color\ntransparent. This method is available if Imagick has been compiled against\nImageMagick version 6.3.8 or newer.\n@param target The target color to paint\n@param alpha The level of transparency: 1.0 is fully opaque and 0.0 is\nfully transparent.\n@param fuzz The amount of fuzz. For example, set fuzz to 10 and the color\nred at intensities of 100 and 102 respectively are now interpreted as the\nsame color.\n@param invert If TRUE paints any pixel that does not match the target color.\n@return (No version information available, might only be in SVN)\n
transposeImage Imagick::transposeImage(void) [bool]\nCreates a vertical mirror image. Creates a vertical mirror image by reflecting\nthe pixels around the central x-axis while rotating them 90-degrees. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n@see Imagick::transverseImage() - Creates a horizontal mirror image\n
getImageHeight Imagick::getImageHeight(void) [int]\nReturns the image height.\n@return (PECL imagick 2.0.0)\n
getImageHistogram Imagick::getImageHistogram(void) [array]\nGets the image histogram.\n@return (PECL imagick 2.0.0)\n
getImageIndex Imagick::getImageIndex(void) [int]\nGets the index of the current active image.\n@return (PECL imagick 2.0.0)\n
getImageInterlaceScheme Imagick::getImageInterlaceScheme(void) [int]\nGets the image interlace scheme.\n@return (PECL imagick 2.0.0)\n
getImageInterpolateMethod Imagick::getImageInterpolateMethod(void) [int]\nReturns the interpolation method. Returns the interpolation method for the\nspecified image. The method is one of the Imagick::INTERPOLATE_* constants.\n@return (PECL imagick 2.0.0)\n
getImageIterations Imagick::getImageIterations(void) [int]\nGets the image iterations.\n@return (PECL imagick 2.0.0)\n
getImageLength Imagick::getImageLength(void) [int]\nReturns the image length in bytes. Returns the image length in bytes\n@return (PECL imagick 2.0.0)\n
getImageMagickLicense Imagick::getImageMagickLicense(void) [string]\nReturns a string containing the ImageMagick license.\n@return (PECL imagick 2.0.0)\n
getImageMatte Imagick::getImageMatte(void) [bool]\nReturn if the image has a matte channel. Returns TRUE if the image has a\nmatte channel otherwise false. This method is available if Imagick has been\ncompiled against ImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n
getImageMatteColor Imagick::getImageMatteColor(void) [ImagickPixel]\nReturns the image matte color.\n@return (PECL imagick 2.0.0)\n
getImageOrientation Imagick::getImageOrientation(void) [int]\nGets the image orientation. Gets the image orientation. The return value is\none of the orientation constants.\n@return (PECL imagick 2.0.0)\n
getImagePage Imagick::getImagePage(void) [array]\nReturns the page geometry.\n@return (PECL imagick 2.0.0)\n
getImagePixelColor Imagick::getImagePixelColor(int $x, int $y) [ImagickPixel]\nReturns the color of the specified pixel.\n@param x The x-coordinate of the pixel\n@param y The y-coordinate of the pixel\n@return (PECL imagick 2.0.0)\n
getImageProfile Imagick::getImageProfile(string $name) [string]\nReturns the named image profile.\n@param name The name of the profile to return.\n@return (PECL imagick 2.0.0)\n
getImageProfiles Imagick::getImageProfiles([string $pattern=&quot;*&quot;\n[, bool $only_names=true]]) [array]\nReturns the image profiles. Returns all associated profiles that match the\npattern. If TRUE is passed as second parameter only the profile names are\nreturned. This method is available if Imagick has been compiled against\nImageMagick version 6.3.6 or newer.\n@param pattern The pattern for profile names.\n@param only_names Whether to return only profile names. If FALSE then values\nare returned as well\n@return (PECL imagick 2.0.0)\n
getImageProperties Imagick::getImageProperties([string $pattern=&quot;*&quot;\n[, bool $only_names=true]]) [array]\nReturns the image properties. Returns all associated properties that match\nthe pattern. If TRUE is passed as second parameter only the property names\nare returned. This method is available if Imagick has been compiled against\nImageMagick version 6.3.6 or newer.\n@param pattern The pattern for property names.\n@param only_names Whether to return only property names. If FALSE then also\nthe values are returned\n@return (PECL imagick 2.0.0)\n
getImageProperty Imagick::getImageProperty(string $name) [string]\nReturns the named image property. Returns the named image property. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.3.2 or newer.\n@param name name of the property (for example Exif:DateTime)\n@return (PECL imagick 2.0.0)\n@see Imagick::setImageProperty() - Sets an image property\n
getImageRedPrimary Imagick::getImageRedPrimary(void) [array]\nReturns the chromaticity red primary point.\n@return (PECL imagick 2.0.0)\n
getImageRegion Imagick::getImageRegion(int $width, int $height, int $x,\nint $y) [Imagick]\nExtracts a region of the image.\n@param width The width of the extracted region.\n@param height The height of the extracted region.\n@param x X-coordinate of the top-left corner of the extracted region.\n@param y Y-coordinate of the top-left corner of the extracted region.\n@return (PECL imagick 2.0.0)\n
getImageRenderingIntent Imagick::getImageRenderingIntent(void) [int]\nGets the image rendering intent.\n@return (PECL imagick 2.0.0)\n
getImageResolution Imagick::getImageResolution(void) [array]\nGets the image X and Y resolution.\n@return (PECL imagick 2.0.0)\n
getImagesBlob Imagick::getImagesBlob(void) [string]\nReturns all image sequences as a blob.\n@return (PECL imagick 2.0.0)\n
getImageScene Imagick::getImageScene(void) [int]\nGets the image scene.\n@return (PECL imagick 2.0.0)\n
getImageSignature Imagick::getImageSignature(void) [string]\nGenerates an SHA-256 message digest.\n@return (PECL imagick 2.0.0)\n
getImageSize Imagick::getImageSize(void) [int]\nReturns the image length in bytes.\n@return (PECL imagick 2.0.0)\n
getImageTicksPerSecond Imagick::getImageTicksPerSecond(void) [int]\nGets the image ticks-per-second.\n@return (PECL imagick 2.0.0)\n
getImageTotalInkDensity Imagick::getImageTotalInkDensity(void) [float]\nGets the image total ink density.\n@return (PECL imagick 2.0.0)\n
getImageType Imagick::getImageType(void) [int]\nGets the potential image type.\n@return (PECL imagick 0.9.10-0.9.9)\n
getImageUnits Imagick::getImageUnits(void) [int]\nGets the image units of resolution.\n@return (PECL imagick 2.0.0)\n
getImageVirtualPixelMethod Imagick::getImageVirtualPixelMethod(void) [int]\nReturns the virtual pixel method.\n@return (PECL imagick 2.0.0)\n
getImageWhitePoint Imagick::getImageWhitePoint(void) [array]\nReturns the chromaticity white point.\n@return (PECL imagick 2.0.0)\n
getImageWidth Imagick::getImageWidth(void) [int]\nReturns the image width.\n@return (PECL imagick 2.0.0)\n
getInterlaceScheme Imagick::getInterlaceScheme(void) [int]\nGets the object interlace scheme.\n@return (PECL imagick 2.0.0)\n
getIteratorIndex Imagick::getIteratorIndex(void) [int]\nGets the index of the current active image. Returns the index of the current\nactive image within the Imagick object. This method is available if Imagick\nhas been compiled against ImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n@see Imagick::setIteratorIndex() - Set the iterator position\n@see Imagick::getImageIndex() - Gets the index of the current active image\n@see Imagick::setImageIndex() - Set the iterator position\n
getNumberImages Imagick::getNumberImages(void) [int]\nReturns the number of images in the object.\n@return (PECL imagick 2.0.0)\n
getOption Imagick::getOption(string $key) [string]\nReturns a value associated with the specified key.\n@param key The name of the option\n@return (PECL imagick 2.0.0)\n
getPackageName Imagick::getPackageName(void) [string]\nReturns the ImageMagick package name.\n@return (PECL imagick 2.0.0)\n
getPage Imagick::getPage(void) [array]\nReturns the page geometry.\n@return (PECL imagick 2.0.0)\n
getPixelIterator Imagick::getPixelIterator(void) [ImagickPixelIterator]\nReturns a MagickPixelIterator.\n@return (PECL imagick 2.0.0)\n
getPixelRegionIterator Imagick::getPixelRegionIterator(int $x, int $y,\nint $columns, int $rows) [ImagickPixelIterator]\nGet an ImagickPixelIterator for an image section.\n@param x The x-coordinate of the region.\n@param y The y-coordinate of the region.\n@param columns The width of the region.\n@param rows The height of the region.\n@return (PECL imagick 2.0.0)\n
getPointSize Imagick::getPointSize(void) [float]\nGets point size. Returns the objects point size property. This method is\navailable if Imagick has been compiled against ImageMagick version 6.3.7\nor newer.\n@return (No version information available, might only be in SVN)\n@see Imagick::setPointSize() - Sets point size\n
getQuantumDepth Imagick::getQuantumDepth(void) [array]\nGets the quantum depth.\n@return (PECL imagick 2.0.0)\n
getQuantumRange Imagick::getQuantumRange(void) [array]\nReturns the Imagick quantum range.\n@return (PECL imagick 2.0.0)\n
getReleaseDate Imagick::getReleaseDate(void) [string]\nReturns the ImageMagick release date.\n@return (PECL imagick 2.0.0)\n
getResource Imagick::getResource(int $type) [int]\nReturns the specified resource's memory usage.\n@param type Refer to the list of resourcetype constants.\n@return (PECL imagick 2.0.0)\n
getResourceLimit Imagick::getResourceLimit(int $type) [int]\nReturns the specified resource limit.\n@param type Refer to the list of resourcetype constants.\n@return (PECL imagick 2.0.0)\n
getSamplingFactors Imagick::getSamplingFactors(void) [array]\nGets the horizontal and vertical sampling factor.\n@return (PECL imagick 2.0.0)\n
getSize Imagick::getSize(void) [array]\nReturns the size associated with the Imagick object.\n@return (PECL imagick 2.0.0)\n
getSizeOffset Imagick::getSizeOffset(void) [int]\nReturns the size offset. Returns the size offset associated with the Imagick\nobject. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n
getVersion Imagick::getVersion(void) [array]\nReturns the ImageMagick API version.\n@return (PECL imagick 2.0.0)\n
hasNextImage Imagick::hasNextImage(void) [bool]\nChecks if the object has more images.\n@return (PECL imagick 2.0.0)\n
hasPreviousImage Imagick::hasPreviousImage(void) [bool]\nChecks if the object has a previous image.\n@return (PECL imagick 2.0.0)\n
identifyImage Imagick::identifyImage([bool $appendRawOutput=false]) [array]\nIdentifies an image and fetches attributes.\n@param appendRawOutput\n@return (PECL imagick 2.0.0)\n
implodeImage Imagick::implodeImage(float $radius) [bool]\nCreates a new image as a copy.\n@param radius The radius of the implode\n@return (PECL imagick 2.0.0)\n
labelImage Imagick::labelImage(string $label) [bool]\nAdds a label to an image.\n@param label The label to add\n@return (PECL imagick 2.0.0)\n
levelImage Imagick::levelImage(float $blackPoint, float $gamma, float\n$whitePoint [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nAdjusts the levels of an image.\n@param blackPoint The image black point\n@param gamma The gamma value\n@param whitePoint The image white point\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
linearStretchImage Imagick::linearStretchImage(float $blackPoint, float\n$whitePoint) [bool]\nStretches with saturation the image intensity. Stretches with saturation\nthe image intensity.\n@param blackPoint The image black point\n@param whitePoint The image white point\n@return (PECL imagick 2.0.0)\n
liquidRescaleImage Imagick::liquidRescaleImage(int $width, int $height,\nfloat $delta_x, float $rigidity) [bool]\nAnimates an image or images. This method scales the images using liquid\nrescaling method. This method is an implementation of a technique called\nseam carving. In order for this method to work as expected ImageMagick must\nbe compiled with liblqr support. This method is available if Imagick has\nbeen compiled against ImageMagick version 6.3.9 or newer.\n@param width The width of the target size\n@param height The height of the target size\n@param delta_x How much the seam can traverse on x-axis. Passing 0 causes\nthe seams to be straight.\n@param rigidity Introduces a bias for non-straight seams. This parameter is\ntypically 0.\n@return (No version information available, might only be in SVN)\n@see Imagick::resizeImage() - Scales an image\n
magnifyImage Imagick::magnifyImage(void) [bool]\nScales an image proportionally 2x.\n@return (PECL imagick 2.0.0)\n
mapImage Imagick::mapImage(Imagick $map, bool $dither) [bool]\nReplaces the colors of an image with the closest color from a reference image..\n@param map\n@param dither\n@return (PECL imagick 2.0.0)\n
matteFloodfillImage Imagick::matteFloodfillImage(float $alpha, float $fuzz,\nmixed $bordercolor, int $x, int $y) [bool]\nChanges the transparency value of a color.\n@param alpha The level of transparency: 1.0 is fully opaque and 0.0 is\nfully transparent.\n@param fuzz The fuzz member of image defines how much tolerance is acceptable\nto consider two colors as the same.\n@param bordercolor An ImagickPixel object or string representing the border\ncolor.\n@param x The starting x coordinate of the operation.\n@param y The starting y coordinate of the operation.\n@return (PECL imagick 2.0.0)\n
medianFilterImage Imagick::medianFilterImage(float $radius) [bool]\nApplies a digital filter.\n@param radius The radius of the pixel neighborhood.\n@return (PECL imagick 2.0.0)\n
mergeImageLayers Imagick::mergeImageLayers(int $layer_method) [bool]\nMerges image layers. Merges image layers into one. This method is useful\nwhen working with image formats that use multiple layers such as PSD. The\nmerging is controlled using the `layer_method` which defines how the layers\nare merged. This method is available if Imagick has been compiled against\nImageMagick version 6.3.7 or newer.\n@param layer_method One of the Imagick::LAYERMETHOD_* constants\n@return (PECL imagick 2.1.0)\n@see Imagick::flattenImages() - Merges a sequence of images\n
minifyImage Imagick::minifyImage(void) [bool]\nScales an image proportionally to half its size.\n@return (PECL imagick 2.0.0)\n
modulateImage Imagick::modulateImage(float $brightness, float $saturation,\nfloat $hue) [bool]\nControl the brightness, saturation, and hue.\n@param brightness\n@param saturation\n@param hue\n@return (PECL imagick 2.0.0)\n
montageImage Imagick::montageImage(ImagickDraw $draw, string $tile_geometry,\nstring $thumbnail_geometry, int $mode, string $frame) [Imagick]\nCreates a composite image.\n@param draw The font name, size, and color are obtained from this object.\n@param tile_geometry The number of tiles per row and page (e.g. 6x4+0+0).\n@param thumbnail_geometry Preferred image size and border size of each\nthumbnail (e.g. 120x120+4+3>).\n@param mode Thumbnail framing mode, see Montage Mode constants.\n@param frame Surround the image with an ornamental border (e.g. 15x15+3+3). The\nframe color is that of the thumbnail&#039;s matte color.\n@return (PECL imagick 2.0.0)\n
morphImages Imagick::morphImages(int $number_frames) [Imagick]\nMethod morphs a set of images.\n@param number_frames The number of in-between images to generate.\n@return (PECL imagick 2.0.0)\n
mosaicImages Imagick::mosaicImages(void) [Imagick]\nForms a mosaic from images.\n@return (PECL imagick 2.0.0)\n
motionBlurImage Imagick::motionBlurImage(float $radius, float $sigma, float\n$angle [, int $channel=Imagick::CHANNEL_DEFAULT]) [bool]\nSimulates motion blur.\n@param radius The radius of the Gaussian, in pixels, not counting the\ncenter pixel.\n@param sigma The standard deviation of the Gaussian, in pixels.\n@param angle Apply the effect along this angle.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants. The channel\nargument affects only if Imagick is compiled against ImageMagick version\n6.4.4 or greater.\n@return (PECL imagick 2.0.0)\n
negateImage Imagick::negateImage(bool $gray [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nNegates the colors in the reference image.\n@param gray Whether to only negate grayscale pixels within the image.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
newImage Imagick::newImage(int $cols, int $rows, mixed $background [, string\n$format]) [bool]\nCreates a new image.\n@param cols Columns in the new image\n@param rows Rows in the new image\n@param background The background color used for this image\n@param format Image format. This parameter was added in Imagick version 2.0.1.\n@return (PECL imagick 2.0.0)\n
newPseudoImage Imagick::newPseudoImage(int $columns, int $rows, string\n$pseudoString) [bool]\nCreates a new image.\n@param columns columns in the new image\n@param rows rows in the new image\n@param pseudoString string containing pseudo image definition.\n@return (PECL imagick 2.0.0)\n
nextImage Imagick::nextImage(void) [bool]\nMoves to the next image.\n@return (PECL imagick 2.0.0)\n
normalizeImage Imagick::normalizeImage([int $channel=Imagick::CHANNEL_ALL])\n[bool]\nEnhances the contrast of a color image.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
oilPaintImage Imagick::oilPaintImage(float $radius) [bool]\nSimulates an oil painting.\n@param radius The radius of the circular neighborhood.\n@return (PECL imagick 2.0.0)\n
opaquePaintImage Imagick::opaquePaintImage(mixed $target, mixed $fill,\nfloat $fuzz, bool $invert [, int $channel=Imagick::CHANNEL_DEFAULT]) [bool]\nChanges the color value of any pixel that matches target. Changes any pixel\nthat matches color with the color defined by fill. This method is available\nif Imagick has been compiled against ImageMagick version 6.3.8 or newer.\n@param target ImagickPixel object or a string containing the color to change\n@param fill The replacement color\n@param fuzz The amount of fuzz. For example, set fuzz to 10 and the color\nred at intensities of 100 and 102 respectively are now interpreted as the\nsame color.\n@param invert If TRUE paints any pixel that does not match the target color.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (No version information available, might only be in SVN)\n
optimizeImageLayers Imagick::optimizeImageLayers(void) [bool]\nRemoves repeated portions of images to optimize. Compares each image the GIF\ndisposed forms of the previous image in the sequence. From this it attempts\nto select the smallest cropped image to replace each frame, while preserving\nthe results of the animation. This method is available if Imagick has been\ncompiled against ImageMagick version 6.2.9 or newer.\n@return (PECL imagick 2.0.0)\n@see Imagick::compareImageLayers() - Returns the maximum bounding region\nbetween images\n@see Imagick::writeImages() - Writes an image or image sequence\n@see Imagick::writeImage() - Writes an image to the specified filename\n
orderedPosterizeImage Imagick::orderedPosterizeImage(string $threshold_map\n[, int $channel=Imagick::CHANNEL_ALL]) [bool]\nPerforms an ordered dither. Performs an ordered dither based on a number of\npre-defined dithering threshold maps, but over multiple intensity levels,\nwhich can be different for different channels, according to the input\narguments. This method is available if Imagick has been compiled against\nImageMagick version 6.3.1 or newer.\n@param threshold_map A string containing the name of the threshold dither\nmap to use\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.2.2)\n
paintFloodfillImage Imagick::paintFloodfillImage(mixed $fill, float $fuzz,\nmixed $bordercolor, int $x, int $y [, int $channel=Imagick::CHANNEL_ALL])\n[bool]\nChanges the color value of any pixel that matches target. Changes\nthe color value of any pixel that matches target and is an immediate\nneighbor. As of ImageMagick 6.3.8 this method has been deprecated and\nImagick::floodfillPaintImage() should be used instead.\n@param fill ImagickPixel object or a string containing the fill color\n@param fuzz The amount of fuzz. For example, set fuzz to 10 and the color\nred at intensities of 100 and 102 respectively are now interpreted as the\nsame color for the purposes of the floodfill.\n@param bordercolor ImagickPixel object or a string containing the border color\n@param x X start position of the floodfill\n@param y Y start position of the floodfill\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.1.0)\n
paintOpaqueImage Imagick::paintOpaqueImage(mixed $target, mixed $fill,\nfloat $fuzz [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nChange any pixel that matches color.\n@param target Change this target color to the fill color within the image. An\nImagickPixel object or a string representing the target color.\n@param fill An ImagickPixel object or a string representing the fill color.\n@param fuzz The fuzz member of image defines how much tolerance is acceptable\nto consider two colors as the same.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
paintTransparentImage Imagick::paintTransparentImage(mixed $target, float\n$alpha, float $fuzz) [bool]\nChanges any pixel that matches color with the color defined by fill.\n@param target Change this target color to specified opacity value within\nthe image.\n@param alpha The level of transparency: 1.0 is fully opaque and 0.0 is\nfully transparent.\n@param fuzz The fuzz member of image defines how much tolerance is acceptable\nto consider two colors as the same.\n@return (PECL imagick 2.0.0)\n
pingImage Imagick::pingImage(string $filename) [bool]\nFetch basic attributes about the image.\n@param filename The filename to read the information from.\n@return (PECL imagick 2.0.0)\n
pingImageBlob Imagick::pingImageBlob(string $image) [bool]\nQuickly fetch attributes. This method can be used to query image width,\nheight, size, and format without reading the whole image to memory. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.2.9 or newer.\n@param image A string containing the image.\n@return (PECL imagick 2.0.0)\n@see Imagick::pingImage() - Fetch basic attributes about the image\n@see Imagick::pingImageFile() - Get basic image attributes in a lightweight\nmanner\n@see Imagick::readImage() - Reads image from filename\n@see Imagick::readImageBlob() - Reads image from a binary string\n@see Imagick::readImageFile() - Reads image from open filehandle\n
pingImageFile Imagick::pingImageFile(resource $filehandle [, string $fileName])\n[bool]\nGet basic image attributes in a lightweight manner. This method can be used\nto query image width, height, size, and format without reading the whole\nimage to memory. This method is available if Imagick has been compiled\nagainst ImageMagick version 6.2.9 or newer.\n@param filehandle An open filehandle to the image.\n@param fileName Optional filename for this image.\n@return (PECL imagick 2.0.0)\n@see Imagick::pingImage() - Fetch basic attributes about the image\n@see Imagick::pingImageBlob() - Quickly fetch attributes\n@see Imagick::readImage() - Reads image from filename\n@see Imagick::readImageBlob() - Reads image from a binary string\n@see Imagick::readImageFile() - Reads image from open filehandle\n
polaroidImage Imagick::polaroidImage(ImagickDraw $properties, float $angle)\n[bool]\nSimulates a Polaroid picture. Simulates a Polaroid picture. This method is\navailable if Imagick has been compiled against ImageMagick version 6.3.2\nor newer.\n@param properties The polaroid properties\n@param angle The polaroid angle\n@return (PECL imagick 2.0.0)\n
posterizeImage Imagick::posterizeImage(int $levels, bool $dither) [bool]\nReduces the image to a limited number of color level.\n@param levels\n@param dither\n@return (PECL imagick 2.0.0)\n
previewImages Imagick::previewImages(int $preview) [bool]\nQuickly pin-point appropriate parameters for image processing.\n@param preview Preview type. See Preview type constants\n@return (PECL imagick 2.0.0)\n
previousImage Imagick::previousImage(void) [bool]\nMove to the previous image in the object.\n@return (PECL imagick 2.0.0)\n
profileImage Imagick::profileImage(string $name, string $profile) [bool]\nAdds or removes a profile from an image.\n@param name\n@param profile\n@return (PECL imagick 2.0.0)\n
quantizeImage Imagick::quantizeImage(int $numberColors, int $colorspace,\nint $treedepth, bool $dither, bool $measureError) [bool]\nAnalyzes the colors within a reference image.\n@param numberColors\n@param colorspace\n@param treedepth\n@param dither\n@param measureError\n@return (PECL imagick 2.0.0)\n
quantizeImages Imagick::quantizeImages(int $numberColors, int $colorspace,\nint $treedepth, bool $dither, bool $measureError) [bool]\nAnalyzes the colors within a sequence of images.\n@param numberColors\n@param colorspace\n@param treedepth\n@param dither\n@param measureError\n@return (PECL imagick 2.0.0)\n
queryFontMetrics Imagick::queryFontMetrics(ImagickDraw $properties, string\n$text [, bool $multiline]) [array]\nReturns an array representing the font metrics.\n@param properties ImagickDraw object containing font properties\n@param text The text\n@param multiline Multiline parameter. If left empty it is autodetected\n@return (PECL imagick 2.0.0)\n
queryFonts Imagick::queryFonts([string $pattern=&quot;*&quot;]) [array]\nReturns the configured fonts.\n@param pattern The query pattern\n@return (PECL imagick 2.0.0)\n
queryFormats Imagick::queryFormats([string $pattern=&quot;*&quot;]) [array]\nReturns formats supported by Imagick.\n@param pattern\n@return (PECL imagick 2.0.0)\n
radialBlurImage Imagick::radialBlurImage(float $angle [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nRadial blurs an image.\n@param angle\n@param channel\n@return (PECL imagick 2.0.0)\n
raiseImage Imagick::raiseImage(int $width, int $height, int $x, int $y,\nbool $raise) [bool]\nCreates a simulated 3d button-like effect.\n@param width\n@param height\n@param x\n@param y\n@param raise\n@return (PECL imagick 2.0.0)\n
randomThresholdImage Imagick::randomThresholdImage(float $low, float $high\n[, int $channel=Imagick::CHANNEL_ALL]) [bool]\nCreates a high-contrast, two-color image. Changes the value of individual\npixels based on the intensity of each pixel compared to threshold. The\nresult is a high-contrast, two color image. This method is available if\nImagick has been compiled against ImageMagick version 6.2.9 or newer.\n@param low The low point\n@param high The high point\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
readImage Imagick::readImage(string $filename) [bool]\nReads image from filename.\n@param filename\n@return (PECL imagick 0.9.0-0.9.9)\n
readImageBlob Imagick::readImageBlob(string $image [, string $filename]) [bool]\nReads image from a binary string.\n@param image\n@return (PECL imagick 2.0.0)\n
readImageFile Imagick::readImageFile(resource $filehandle [, string\n$fileName=null]) [bool]\nReads image from open filehandle.\n@param filehandle\n@param fileName\n@return (PECL imagick 2.0.0)\n
adaptiveThresholdImage Imagick::adaptiveThresholdImage(int $width, int $height,\nint $offset) [bool]\nSelects a threshold for each pixel based on a range of intensity. Selects an\nindividual threshold for each pixel based on the range of intensity values\nin its local neighborhood. This allows for thresholding of an image whose\nglobal intensity histogram doesn&#039;t contain distinctive peaks.\n@param width Width of the local neighborhood.\n@param height Height of the local neighborhood.\n@param offset The mean offset\n@return (PECL imagick 2.0.0)\n
addImage Imagick::addImage(Imagick $source) [bool]\nAdds new image to Imagick object image list.\n@param source The source Imagick object\n@return (PECL imagick 2.0.0)\n
addNoiseImage Imagick::addNoiseImage(int $noise_type [, int\n$channel=Imagick::CHANNEL_DEFAULT]) [bool]\nAdds random noise to the image.\n@param noise_type The type of the noise. Refer to this list of noise constants.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.0.0)\n
affineTransformImage Imagick::affineTransformImage(ImagickDraw $matrix) [bool]\nTransforms an image.\n@param matrix The affine matrix\n@return (PECL imagick 2.0.0)\n
animateImages Imagick::animateImages(string $x_server) [bool]\nAnimates an image or images. This method animates the image onto a local\nor remote X server. This method is not available on Windows. This method\nis available if Imagick has been compiled against ImageMagick version 6.3.6\nor newer.\n@param x_server X server address\n@return (No version information available, might only be in SVN)\n@see Imagick::displayImage() - Displays an image\n
annotateImage Imagick::annotateImage(ImagickDraw $draw_settings, float $x,\nfloat $y, float $angle, string $text) [bool]\nAnnotates an image with text. Annotates an image with text.\n@param draw_settings The ImagickDraw object that contains settings for\ndrawing the text\n@param x Horizontal offset in pixels to the left of text\n@param y Vertical offset in pixels to the baseline of text\n@param angle The angle at which to write the text\n@param text The string to draw\n@return (PECL imagick 2.0.0)\n@see ImagickDraw::annotation() - Draws text on the image\n@see ImagickDraw::setFont() - Sets the fully-specified font to use when\nannotating with text\n
appendImages Imagick::appendImages(bool $stack) [Imagick]\nAppend a set of images. Append a set of images into one larger image.\n@param stack The direction of the stack (top to bottom or bottom to top)\n@return (PECL imagick 2.0.0)\n
averageImages Imagick::averageImages(void) [Imagick]\nAverage a set of images.\n@return (PECL imagick 2.0.0)\n
blackThresholdImage Imagick::blackThresholdImage(mixed $threshold) [bool]\nForces all pixels below the threshold into black.\n@param threshold The threshold below which everything turns black\n@return (PECL imagick 2.0.0)\n
blurImage Imagick::blurImage(float $radius, float $sigma [, int $channel])\n[bool]\nAdds blur filter to image.\n@param radius Blur radius\n@param sigma Standard deviation\n@param channel The Channeltype constant. When not supplied, all channels\nare blurred.\n@return (PECL imagick 2.0.0)\n@see Imagick::adaptiveBlurImage() - Adds adaptive blur filter to image\n@see Imagick::motionBlurImage() - Simulates motion blur\n@see Imagick::radialBlurImage() - Radial blurs an image\n
borderImage Imagick::borderImage(mixed $bordercolor, int $width, int $height)\n[bool]\nSurrounds the image with a border.\n@param bordercolor ImagickPixel object or a string containing the border color\n@param width Border width\n@param height Border height\n@return (PECL imagick 2.0.0)\n
charcoalImage Imagick::charcoalImage(float $radius, float $sigma) [bool]\nSimulates a charcoal drawing.\n@param radius The radius of the Gaussian, in pixels, not counting the\ncenter pixel\n@param sigma The standard deviation of the Gaussian, in pixels\n@return (PECL imagick 2.0.0)\n
chopImage Imagick::chopImage(int $width, int $height, int $x, int $y) [bool]\nRemoves a region of an image and trims.\n@param width Width of the chopped area\n@param height Height of the chopped area\n@param x X origo of the chopped area\n@param y Y origo of the chopped area\n@return (PECL imagick 2.0.0)\n@see Imagick::cropImage() - Extracts a region of the image\n
clear Imagick::clear(void) [bool]\nClears all resources associated to Imagick object.\n@return (PECL imagick 2.0.0)\n
clipImage Imagick::clipImage(void) [bool]\nClips along the first path from the 8BIM profile.\n@return (PECL imagick 2.0.0)\n
clipPathImage Imagick::clipPathImage(string $pathname, bool $inside) [bool]\nClips along the named paths from the 8BIM profile.\n@param pathname The name of the path\n@param inside If TRUE later operations take effect inside clipping\npath. Otherwise later operations take effect outside clipping path.\n@return (PECL imagick 2.0.0)\n
clone Imagick::clone(void) [Imagick]\nMakes an exact copy of the Imagick object.\n@return (PECL imagick 2.0.0)\n
clutImage Imagick::clutImage(Imagick $lookup_table [, float\n$channel=Imagick::CHANNEL_DEFAULT]) [bool]\nReplaces colors in the image. Replaces colors in the image from a color\nlookup table. Optional second parameter to replace colors in a specific\nchannel. This method is available if Imagick has been compiled against\nImageMagick version 6.3.6 or newer.\n@param lookup_table Imagick object containing the color lookup table\n@param channel The Channeltype constant. When not supplied, default channels\nare replaced.\n@return (PECL imagick 2.0.0)\n@see Imagick::adaptiveBlurImage() - Adds adaptive blur filter to image\n@see Imagick::motionBlurImage() - Simulates motion blur\n@see Imagick::radialBlurImage() - Radial blurs an image\n
coalesceImages Imagick::coalesceImages(void) [Imagick]\nComposites a set of images.\n@return (PECL imagick 2.0.0)\n
colorFloodfillImage Imagick::colorFloodfillImage(mixed $fill, float $fuzz,\nmixed $bordercolor, int $x, int $y) [bool]\nChanges the color value of any pixel that matches target.\n@param fill ImagickPixel object containing the fill color\n@param fuzz The amount of fuzz. For example, set fuzz to 10 and the color\nred at intensities of 100 and 102 respectively are now interpreted as the\nsame color for the purposes of the floodfill.\n@param bordercolor ImagickPixel object containing the border color\n@param x X start position of the floodfill\n@param y Y start position of the floodfill\n@return (PECL imagick 2.0.0)\n
colorizeImage Imagick::colorizeImage(mixed $colorize, mixed $opacity) [bool]\nBlends the fill color with the image.\n@param colorize ImagickPixel object or a string containing the colorize color\n@param opacity ImagickPixel object or an float containing the opacity\nvalue. 1.0 is fully opaque and 0.0 is fully transparent.\n@return (PECL imagick 2.0.0)\n
combineImages Imagick::combineImages(int $channelType) [Imagick]\nCombines one or more images into a single image.\n@param channelType Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
commentImage Imagick::commentImage(string $comment) [bool]\nAdds a comment to your image.\n@param comment The comment to add\n@return (PECL imagick 2.0.0)\n
compareImageChannels Imagick::compareImageChannels(Imagick $image, int\n$channelType, int $metricType) [array]\nReturns the difference in one or more images.\n@param image Imagick object containing the image to compare.\n@param channelType Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@param metricType One of the metric type constants.\n@return (PECL imagick 2.0.0)\n
compareImageLayers Imagick::compareImageLayers(int $method) [Imagick]\nReturns the maximum bounding region between images. Compares each image\nwith the next in a sequence and returns the maximum bounding region of any\npixel differences it discovers. This method is available if Imagick has been\ncompiled against ImageMagick version 6.2.9 or newer.\n@param method One of the layer method constants.\n@return (PECL imagick 2.0.0)\n@see Imagick::optimizeImageLayers() - Removes repeated portions of images\nto optimize\n@see Imagick::writeImages() - Writes an image or image sequence\n@see Imagick::writeImage() - Writes an image to the specified filename\n
compareImages Imagick::compareImages(Imagick $compare, int $metric) [array]\nCompares an image to a reconstructed image.\n@param compare An image to compare to.\n@param metric Provide a valid metric type constant. Refer to this list of\nmetric constants.\n@return (PECL imagick 2.0.0)\n
compositeImage Imagick::compositeImage(Imagick $composite_object, int\n$composite, int $x, int $y [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nComposite one image onto another.\n@param composite_object Imagick object which holds the composite image\n@param compose Composite operator. See Composite Operator Constants\n@param x The column offset of the composited image\n@param y The row offset of the composited image\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
__construct Imagick::__construct([mixed $files]) [Imagick]\nThe Imagick constructor.\n@param files The path to an image to load or array of paths\n@return (PECL imagick 2.0.0)\n
contrastImage Imagick::contrastImage(bool $sharpen) [bool]\nChange the contrast of the image.\n@param sharpen The sharpen value\n@return (PECL imagick 2.0.0)\n
contrastStretchImage Imagick::contrastStretchImage(float $black_point,\nfloat $white_point [, int $channel=Imagick::CHANNEL_ALL]) [bool]\nEnhances the contrast of a color image. Enhances the contrast of a color\nimage by adjusting the pixels color to span the entire range of colors\navailable. This method is available if Imagick has been compiled against\nImageMagick version 6.2.9 or newer.\n@param black_point The black point.\n@param white_point The white point.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants\nusing bitwise operators. Imagick::CHANNEL_ALL. Refer to this list of channel\nconstants.\n@return (PECL imagick 2.0.0)\n
convolveImage Imagick::convolveImage(array $kernel [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nApplies a custom convolution kernel to the image.\n@param kernel The convolution kernel\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
cropImage Imagick::cropImage(int $width, int $height, int $x, int $y) [bool]\nExtracts a region of the image.\n@param width The width of the crop\n@param height The height of the crop\n@param x The X coordinate of the cropped region&#039;s top left corner\n@param y The Y coordinate of the cropped region&#039;s top left corner\n@return (PECL imagick 2.0.0)\n
cropThumbnailImage Imagick::cropThumbnailImage(int $width, int $height) [bool]\nCreates a crop thumbnail.\n@param width The width of the thumbnail\n@param height The Height of the thumbnail\n@return (PECL imagick 2.0.0)\n
current Imagick::current(void) [Imagick]\nReturns a reference to the current Imagick object.\n@return (PECL imagick 2.0.0)\n
cycleColormapImage Imagick::cycleColormapImage(int $displace) [bool]\nDisplaces an image's colormap.\n@param displace The amount to displace the colormap.\n@return (PECL imagick 2.0.0)\n
decipherImage Imagick::decipherImage(string $passphrase) [bool]\nDeciphers an image. Deciphers image that has been enciphered before. The image\nmust be enciphered using Imagick::encipherImage(). This method is available\nif Imagick has been compiled against ImageMagick version 6.3.9 or newer.\n@param passphrase The passphrase\n@return (No version information available, might only be in SVN)\n@see Imagick::encipherImage() - Enciphers an image\n
deconstructImages Imagick::deconstructImages(void) [Imagick]\nReturns certain pixel differences between images.\n@return (PECL imagick 2.0.0)\n
deleteImageArtifact Imagick::deleteImageArtifact(string $artifact) [bool]\nDelete image artifact. Deletes an artifact associated with the image. The\ndifference between image properties and image artifacts is that properties\nare public and artifacts are private. This method is available if Imagick\nhas been compiled against ImageMagick version 6.5.7 or newer.\n@param artifact The name of the artifact\n@return (No version information available, might only be in SVN)\n@see Imagick::setImageArtifact() - Set image artifact\n@see Imagick::getImageArtifact() - Get image artifact\n
despeckleImage Imagick::despeckleImage(void) [bool]\nReduces the speckle noise in an image.\n@return (PECL imagick 2.0.0)\n
destroy Imagick::destroy(void) [bool]\nDestroys the Imagick object.\n@return (PECL imagick 2.0.0)\n
displayImage Imagick::displayImage(string $servername) [bool]\nDisplays an image.\n@param servername The X server name\n@return (PECL imagick 2.0.0)\n
displayImages Imagick::displayImages(string $servername) [bool]\nDisplays an image or image sequence.\n@param servername The X server name\n@return (PECL imagick 2.0.0)\n
distortImage Imagick::distortImage(int $method, array $arguments, bool\n$bestfit) [bool]\nDistorts an image using various distortion methods. Distorts an image using\nvarious distortion methods, by mapping color lookups of the source image to\na new destination image usually of the same size as the source image, unless\n&#039;bestfit&#039; is set to TRUE. If &#039;bestfit&#039; is enabled, and\ndistortion allows it, the destination image is adjusted to ensure the whole\nsource &#039;image&#039; will just fit within the final destination image,\nwhich will be sized and offset accordingly. Also in many cases the virtual\noffset of the source image will be taken into account in the mapping. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.3.6 or newer.\n@param method The method of image distortion. See distortion constants\n@param arguments The arguments for this distortion method\n@param bestfit Attempt to resize destination to fit distorted source\n@return (PECL imagick 2.0.1)\n@see Imagick::blurImage() - Adds blur filter to image\n@see Imagick::motionBlurImage() - Simulates motion blur\n@see Imagick::radialBlurImage() - Radial blurs an image\n
drawImage Imagick::drawImage(ImagickDraw $draw) [bool]\nRenders the ImagickDraw object on the current image.\n@param draw The drawing operations to render on the image.\n@return (PECL imagick 2.0.0)\n
edgeImage Imagick::edgeImage(float $radius) [bool]\nEnhance edges within the image.\n@param radius The radius of the operation.\n@return (PECL imagick 2.0.0)\n
embossImage Imagick::embossImage(float $radius, float $sigma) [bool]\nReturns a grayscale image with a three-dimensional effect.\n@param radius The radius of the effect\n@param sigma The sigma of the effect\n@return (PECL imagick 2.0.0)\n
encipherImage Imagick::encipherImage(string $passphrase) [bool]\nEnciphers an image. Converts plain pixels to enciphered pixels. The image\nis not readable until it has been deciphered using Imagick::decipherImage()\nThis method is available if Imagick has been compiled against ImageMagick\nversion 6.3.9 or newer.\n@param passphrase The passphrase\n@return (No version information available, might only be in SVN)\n@see Imagick::decipherImage() - Deciphers an image\n
enhanceImage Imagick::enhanceImage(void) [bool]\nImproves the quality of a noisy image.\n@return (PECL imagick 2.0.0)\n
equalizeImage Imagick::equalizeImage(void) [bool]\nEqualizes the image histogram.\n@return (PECL imagick 2.0.0)\n
evaluateImage Imagick::evaluateImage(int $op, float $constant [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nApplies an expression to an image.\n@param op The operator\n@param constant The value of the operator\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
extentImage Imagick::extentImage(int $width, int $height, int $x, int $y)\n[bool]\nSet image size. Comfortability method for setting image size. The method\nsets the image size and allows setting x,y coordinates where the new area\nbegins. This method is available if Imagick has been compiled against\nImageMagick version 6.3.1 or newer.\n@param width The new width\n@param height The new height\n@param x X position for the new size\n@param y Y position for the new size\n@return (No version information available, might only be in SVN)\n@see Imagick::resizeImage() - Scales an image\n@see Imagick::thumbnailImage() - Changes the size of an image\n@see Imagick::cropImage() - Extracts a region of the image\n
flattenImages Imagick::flattenImages(void) [Imagick]\nMerges a sequence of images.\n@return (PECL imagick 2.0.0)\n
flipImage Imagick::flipImage(void) [bool]\nCreates a vertical mirror image.\n@return (PECL imagick 2.0.0)\n
floodFillPaintImage Imagick::floodFillPaintImage(mixed $fill,\nfloat $fuzz, mixed $target, int $x, int $y, bool $invert [, int\n$channel=Imagick::CHANNEL_DEFAULT]) [bool]\nChanges the color value of any pixel that matches target. Changes the color\nvalue of any pixel that matches target and is an immediate neighbor. This\nmethod is a replacement for deprecated Imagick::paintFloodFillImage(). This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.3.8 or newer.\n@param fill ImagickPixel object or a string containing the fill color\n@param fuzz The amount of fuzz. For example, set fuzz to 10 and the color\nred at intensities of 100 and 102 respectively are now interpreted as the\nsame color.\n@param target ImagickPixel object or a string containing the target color\nto paint\n@param x X start position of the floodfill\n@param y Y start position of the floodfill\n@param invert If TRUE paints any pixel that does not match the target color.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (No version information available, might only be in SVN)\n
flopImage Imagick::flopImage(void) [bool]\nCreates a horizontal mirror image.\n@return (PECL imagick 2.0.0)\n
frameImage Imagick::frameImage(mixed $matte_color, int $width, int $height,\nint $inner_bevel, int $outer_bevel) [bool]\nAdds a simulated three-dimensional border.\n@param matte_color ImagickPixel object or a string representing the matte color\n@param width The width of the border\n@param height The height of the border\n@param inner_bevel The inner bevel width\n@param outer_bevel The outer bevel width\n@return (PECL imagick 2.0.0)\n
fxImage Imagick::fxImage(string $expression [, int\n$channel=Imagick::CHANNEL_ALL]) [Imagick]\nEvaluate expression for each pixel in the image.\n@param expression The expression.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
gammaImage Imagick::gammaImage(float $gamma [, int\n$channel=Imagick::CHANNEL_ALL]) [bool]\nGamma-corrects an image.\n@param gamma The amount of gamma-correction.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
gaussianBlurImage Imagick::gaussianBlurImage(float $radius, float $sigma [,\nint $channel=Imagick::CHANNEL_ALL]) [bool]\nBlurs an image.\n@param radius The radius of the Gaussian, in pixels, not counting the\ncenter pixel.\n@param sigma The standard deviation of the Gaussian, in pixels.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
getColorspace Imagick::getColorspace(void) [int]\nGets the colorspace. Gets the global colorspace value. This method is available\nif Imagick has been compiled against ImageMagick version 6.5.7 or newer.\n@return (PECL imagick 0.9.10-0.9.9)\n
getCompression Imagick::getCompression(void) [int]\nGets the object compression type. Gets the object compression type.\n@return (PECL imagick 2.0.0)\n
getCompressionQuality Imagick::getCompressionQuality(void) [int]\nGets the object compression quality. Gets the object compression quality.\n@return (PECL imagick 2.0.0)\n
getCopyright Imagick::getCopyright(void) [string]\nReturns the ImageMagick API copyright as a string.\n@return (PECL imagick 2.0.0)\n
getFilename Imagick::getFilename(void) [string]\nThe filename associated with an image sequence.\n@return (PECL imagick 2.0.0)\n
getFont Imagick::getFont(void) [string]\nGets font. Returns the objects font property. This method is available if\nImagick has been compiled against ImageMagick version 6.3.7 or newer.\n@return (PECL imagick 2.1.0)\n@see Imagick::setFont() - Sets font\n@see ImagickDraw::setFont() - Sets the fully-specified font to use when\nannotating with text\n@see ImagickDraw::getFont() - Returns the font\n
getFormat Imagick::getFormat(void) [string]\nReturns the format of the Imagick object.\n@return (PECL imagick 2.0.0)\n
getGravity Imagick::getGravity(void) [int]\nGets the gravity. Gets the global gravity property for the Imagick object. This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.4.0 or newer.\n@return (No version information available, might only be in SVN)\n
getHomeURL Imagick::getHomeURL(void) [string]\nReturns the ImageMagick home URL.\n@return (PECL imagick 2.0.0)\n
getImage Imagick::getImage(void) [Imagick]\nReturns a new Imagick object.\n@return (PECL imagick 2.0.0)\n
getImageAlphaChannel Imagick::getImageAlphaChannel(void) [int]\nGets the image alpha channel. Gets the image alpha channel value. The returned\nvalue is one of the alpha channel constants. This method is available if\nImagick has been compiled against ImageMagick version 6.4.0 or newer.\n@return (No version information available, might only be in SVN)\n
getImageArtifact Imagick::getImageArtifact(string $artifact) [string]\nGet image artifact. Gets an artifact associated with the image. The difference\nbetween image properties and image artifacts is that properties are public\nand artifacts are private. This method is available if Imagick has been\ncompiled against ImageMagick version 6.5.7 or newer.\n@param artifact The name of the artifact\n@return (No version information available, might only be in SVN)\n@see Imagick::setImageArtifact() - Set image artifact\n@see Imagick::deleteImageArtifact() - Delete image artifact\n
getImageBackgroundColor Imagick::getImageBackgroundColor(void) [ImagickPixel]\nReturns the image background color.\n@return (PECL imagick 2.0.0)\n
getImageBlob Imagick::getImageBlob(void) [string]\nReturns the image sequence as a blob.\n@return (PECL imagick 2.0.0)\n
getImageBluePrimary Imagick::getImageBluePrimary(void) [array]\nReturns the chromaticy blue primary point.\n@param x The chromaticity blue primary x-point.\n@param y The chromaticity blue primary y-point.\n@return (PECL imagick 2.0.0)\n
getImageBorderColor Imagick::getImageBorderColor(void) [ImagickPixel]\nReturns the image border color.\n@return (PECL imagick 2.0.0)\n
getImageChannelDepth Imagick::getImageChannelDepth(int $channel) [int]\nGets the depth for a particular image channel. Gets the depth for a particular\nimage channel.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.0.0)\n
getImageChannelDistortion Imagick::getImageChannelDistortion(Imagick\n$reference, int $channel, int $metric) [float]\nCompares image channels of an image to a reconstructed image.\n@param reference Imagick object to compare to.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@param metric One of the metric type constants.\n@return (PECL imagick 2.0.0)\n
getImageChannelDistortions Imagick::getImageChannelDistortions(Imagick\n$reference, int $metric [, int $channel=Imagick::CHANNEL_DEFAULT]) [float]\nGets channel distortions. Compares one or more image channels of an image\nto a reconstructed image and returns the specified distortion metrics This\nmethod is available if Imagick has been compiled against ImageMagick version\n6.4.4 or newer.\n@param reference Imagick object containing the reference image\n@param metric Refer to this list of metric type constants.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (No version information available, might only be in SVN)\n
getImageChannelExtrema Imagick::getImageChannelExtrema(int $channel) [array]\nGets the extrema for one or more image channels.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
getImageChannelMean Imagick::getImageChannelMean(int $channel) [array]\nGets the mean and standard deviation.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channeltype constants using\nbitwise operators. Refer to this list of channel constants.\n@return (PECL imagick 2.0.0)\n
getImageChannelRange Imagick::getImageChannelRange(int $channel) [array]\nGets channel range. Gets the range for one or more image channels. This method\nis available if Imagick has been compiled against ImageMagick version 6.4.0\nor newer.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.2.1)\n
getImageChannelStatistics Imagick::getImageChannelStatistics(void) [array]\nReturns statistics for each channel in the image.\n@return (PECL imagick 2.0.0)\n
getImageClipMask Imagick::getImageClipMask(void) [Imagick]\nGets image clip mask. Returns the image clip mask. The clip mask is an\nImagick object containing the clip mask. This method is available if Imagick\nhas been compiled against ImageMagick version 6.3.6 or newer.\n@return (No version information available, might only be in SVN)\n
getImageColormapColor Imagick::getImageColormapColor(int $index) [ImagickPixel]\nReturns the color of the specified colormap index.\n@param index The offset into the image colormap.\n@return (PECL imagick 2.0.0)\n
getImageColors Imagick::getImageColors(void) [int]\nGets the number of unique colors in the image.\n@return (PECL imagick 2.0.0)\n
getImageColorspace Imagick::getImageColorspace(void) [int]\nGets the image colorspace.\n@return (PECL imagick 2.0.0)\n
getImageCompose Imagick::getImageCompose(void) [int]\nReturns the composite operator associated with the image.\n@return (PECL imagick 2.0.0)\n
getImageCompression Imagick::getImageCompression(void) [int]\nGets the current image's compression type. Gets the current image&#039;s\ncompression type.\n@return (PECL imagick 2.2.2)\n
getImageCompressionQuality int Imagick::getCompressionQuality ( void )\nGets the current image's compression quality. Gets the current image&#039;s\ncompression quality\n@return (PECL imagick 2.2.2)\n
getImageDelay Imagick::getImageDelay(void) [int]\nGets the image delay.\n@return (PECL imagick 2.0.0)\n
getImageDepth Imagick::getImageDepth(void) [int]\nGets the image depth.\n@return (PECL imagick 0.9.1-0.9.9)\n
getImageDispose Imagick::getImageDispose(void) [int]\nGets the image disposal method.\n@return (PECL imagick 2.0.0)\n
getImageDistortion Imagick::getImageDistortion(MagickWand $reference, int\n$metric) [float]\nCompares an image to a reconstructed image.\n@param reference Imagick object to compare to.\n@param metric One of the metric type constants.\n@return (PECL imagick 2.0.0)\n
getImageExtrema Imagick::getImageExtrema(void) [array]\nGets the extrema for the image.\n@return (PECL imagick 2.0.0)\n
getImageFilename Imagick::getImageFilename(void) [string]\nReturns the filename of a particular image in a sequence.\n@return (PECL imagick 2.0.0)\n
getImageFormat Imagick::getImageFormat(void) [string]\nReturns the format of a particular image in a sequence.\n@return (PECL imagick 2.0.0)\n
getImageGamma Imagick::getImageGamma(void) [float]\nGets the image gamma.\n@return (PECL imagick 2.0.0)\n
getImageGeometry Imagick::getImageGeometry(void) [array]\nGets the width and height as an associative array.\n@return (PECL imagick 2.0.0)\n
getImageGravity Imagick::getImageGravity(void) [int]\nGets the image gravity. Gets the current gravity value of the image. Unlike\nImagick::getGravity(), this method returns the gravity defined for the current\nimage sequence. This method is available if Imagick has been compiled against\nImageMagick version 6.4.4 or newer.\n@return (No version information available, might only be in SVN)\n
getImageGreenPrimary Imagick::getImageGreenPrimary(void) [array]\nReturns the chromaticy green primary point.\n@return (PECL imagick 2.0.0)\n
iis_set_server_rights iis_set_server_rights(int $server_instance, string\n$virtual_path, int $directory_flags) [int]\nSets server rights.\n
iis_start_server iis_start_server(int $server_instance) [int]\nStarts the virtual web server.\n
iis_start_service iis_start_service(string $service_id) [int]\nStarts the service defined by ServiceId.\n
iis_stop_server iis_stop_server(int $server_instance) [int]\nStops the virtual web server.\n
iis_stop_service iis_stop_service(string $service_id) [int]\nStops the service defined by ServiceId.\n
image_type_to_extension image_type_to_extension(int $imagetype [, bool\n$include_dot]) [string]\nGet file extension for image type. Returns the extension for the given\n`IMAGETYPE_XXX` constant.\n@param imagetype One of the `IMAGETYPE_XXX` constant.\n@param include_dot Whether to prepend a dot to the extension or not. Default\nto TRUE.\n@return (PHP 5)\n@note Note: This function does not require the GD image library.\n
image_type_to_mime_type image_type_to_mime_type(int $imagetype) [string]\nGet Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype. The\n   image_type_to_mime_type() function will determine the Mime-Type for an\n   IMAGETYPE constant.\n@param imagetype One of the `IMAGETYPE_XXX` constants.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function does not require the GD image library.\n@see getimagesize() - Get the size of an image\n@see exif_imagetype() - Determine the type of an image\n@see exif_read_data() - Reads the EXIF headers from JPEG or TIFF\n@see exif_thumbnail() - Retrieve the embedded thumbnail of a TIFF or JPEG image\n
image2wbmp image2wbmp(resource $image [, string $filename [, int $threshold]])\n[bool]\nOutput image to browser or file. image2wbmp() outputs or save a WBMP version\nof the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename Path to the saved file. If not given, the raw image stream\nwill be outputted directly.\n@param threshold Threshold value, between 0 and 255 (inclusive).\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: WBMP support is only available if PHP was compiled against GD-1.8\nor later.\n@see imagewbmp() - Output image to browser or file\n
imagealphablending imagealphablending(resource $image, bool $blendmode) [bool]\nSet the blending mode for an image. imagealphablending() allows for two\ndifferent modes of drawing on truecolor images. In blending mode, the alpha\nchannel component of the color supplied to all drawing function, such as\nimagesetpixel() determines how much of the underlying color should be allowed\nto shine through. As a result, gd automatically blends the existing color at\nthat point with the drawing color, and stores the result in the image. The\nresulting pixel is opaque. In non-blending mode, the drawing color is copied\nliterally with its alpha channel information, replacing the destination\npixel. Blending mode is not available when drawing on palette images.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param blendmode Whether to enable the blending mode or not. On true color\nimages the default value is TRUE otherwise the default value is FALSE\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imageantialias imageantialias(resource $image, bool $enabled) [bool]\nShould antialias functions be used or not. Activate the fast drawing\nantialiased methods for lines and wired polygons. It does not support alpha\ncomponents. It works using a direct blend operation. It works only with\ntruecolor images. Thickness and styled are not supported. Using antialiased\nprimitives with transparent background color can end with some unexpected\nresults. The blend method uses the background color as any other colors. The\nlack of alpha component support does not allow an alpha based antialiasing\nmethod.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param enabled Whether to enable antialiasing or not.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@see imagecreatetruecolor() - Create a new true color image\n
imagearc imagearc(resource $image, int $cx, int $cy, int $width, int $height,\nint $start, int $end, int $color) [bool]\nDraws an arc. imagearc() draws an arc of circle centered at the given\ncoordinates.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param cx x-coordinate of the center.\n@param cy y-coordinate of the center.\n@param width The arc width.\n@param height The arc height.\n@param start The arc start angle, in degrees.\n@param end The arc end angle, in degrees. 0° is located at the\nthree-o&#039;clock position, and the arc is drawn clockwise.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagefilledarc() - Draw a partial arc and fill it\n@see imageellipse() - Draw an ellipse\n@see imagefilledellipse() - Draw a filled ellipse\n
imagechar imagechar(resource $image, int $font, int $x, int $y, string $c,\nint $color) [bool]\nDraw a character horizontally. imagechar() draws the first character of `c`\nin the image identified by `image` with its upper-left at `x`,`y` (top left\nis 0, 0) with the color `color`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@param x x-coordinate of the start.\n@param y y-coordinate of the start.\n@param c The character to draw.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagecharup() - Draw a character vertically\n@see imageloadfont() - Load a new font\n
imagecharup imagecharup(resource $image, int $font, int $x, int $y, string\n$c, int $color) [bool]\nDraw a character vertically. Draws the character `c` vertically at the\nspecified coordinate on the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@param x x-coordinate of the start.\n@param y y-coordinate of the start.\n@param c The character to draw.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagechar() - Draw a character horizontally\n@see imageloadfont() - Load a new font\n
imagecolorallocate imagecolorallocate(resource $image, int $red, int $green,\nint $blue) [int]\nAllocate a color for an image. Returns a color identifier representing the\ncolor composed of the given RGB components. imagecolorallocate() must be\ncalled to create each color that is to be used in the image represented by\n`image`. Note: The first call to imagecolorallocate() fills the background\ncolor in palette-based images - images created using imagecreate().\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@return (PHP 4, PHP 5)\n@see imagecolorallocatealpha() - Allocate a color for an image\n@see imagecolordeallocate() - De-allocate a color for an image\n
imagecolorallocatealpha imagecolorallocatealpha(resource $image, int $red,\nint $green, int $blue, int $alpha) [int]\nAllocate a color for an image. imagecolorallocatealpha() behaves identically to\nimagecolorallocate() with the addition of the transparency parameter `alpha`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@param alpha A value between `0` and `127`. `0` indicates completely opaque\nwhile `127` indicates completely transparent.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecolorallocate() - Allocate a color for an image\n@see imagecolordeallocate() - De-allocate a color for an image\n
imagecolorat imagecolorat(resource $image, int $x, int $y) [int]\nGet the index of the color of a pixel. Returns the index of the color of the\npixel at the specified location in the image specified by `image`. If PHP is\ncompiled against GD library 2.0 or higher and the image is a truecolor image,\nthis function returns the RGB value of that pixel as integer. Use bitshifting\nand masking to access the distinct red, green and blue component values:\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x x-coordinate of the point.\n@param y y-coordinate of the point.\n@return (PHP 4, PHP 5)\n@see imagecolorset() - Set the color for the specified palette index\n@see imagecolorsforindex() - Get the colors for an index\n
imagecolorclosest imagecolorclosest(resource $image, int $red, int $green,\nint $blue) [int]\nGet the index of the closest color to the specified color. Returns the index\nof the color in the palette of the image which is &quot;closest&quot; to the\nspecified RGB value. The &quot;distance&quot; between the desired color and\neach color in the palette is calculated as if the RGB values represented\npoints in three-dimensional space. If you created the image from a file,\nonly colors used in the image are resolved. Colors present only in the\npalette are not resolved.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@return (PHP 4, PHP 5)\n@see imagecolorexact() - Get the index of the specified color\n@see imagecolorclosestalpha() - Get the index of the closest color to the\nspecified color + alpha\n@see imagecolorclosesthwb() - Get the index of the color which has the hue,\nwhite and blackness\n
imagecolorclosestalpha imagecolorclosestalpha(resource $image, int $red,\nint $green, int $blue, int $alpha) [int]\nGet the index of the closest color to the specified color + alpha. Returns the\nindex of the color in the palette of the image which is &quot;closest&quot;\nto the specified RGB value and `alpha` level.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@param alpha A value between `0` and `127`. `0` indicates completely opaque\nwhile `127` indicates completely transparent.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecolorexactalpha() - Get the index of the specified color + alpha\n@see imagecolorclosest() - Get the index of the closest color to the\nspecified color\n@see imagecolorclosesthwb() - Get the index of the color which has the hue,\nwhite and blackness\n
imagecolorclosesthwb imagecolorclosesthwb(resource $image, int $red, int\n$green, int $blue) [int]\nGet the index of the color which has the hue, white and blackness. Get\nthe index of the color which has the hue, white and blackness nearest the\ngiven color.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see imagecolorclosest() - Get the index of the closest color to the\nspecified color\n
imagecolordeallocate imagecolordeallocate(resource $image, int $color) [bool]\nDe-allocate a color for an image. De-allocates a color previously allocated\nwith imagecolorallocate() or imagecolorallocatealpha().\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param color The color identifier.\n@return (PHP 4, PHP 5)\n@see imagecolorallocate() - Allocate a color for an image\n@see imagecolorallocatealpha() - Allocate a color for an image\n
imagecolorexact imagecolorexact(resource $image, int $red, int $green,\nint $blue) [int]\nGet the index of the specified color. Returns the index of the specified\ncolor in the palette of the image. If you created the image from a file,\nonly colors used in the image are resolved. Colors present only in the\npalette are not resolved.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@return (PHP 4, PHP 5)\n@see imagecolorclosest() - Get the index of the closest color to the\nspecified color\n
imagecolorexactalpha imagecolorexactalpha(resource $image, int $red, int\n$green, int $blue, int $alpha) [int]\nGet the index of the specified color + alpha. Returns the index of the\nspecified color+alpha in the palette of the image.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@param alpha A value between `0` and `127`. `0` indicates completely opaque\nwhile `127` indicates completely transparent.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecolorclosestalpha() - Get the index of the closest color to the\nspecified color + alpha\n
imagecolormatch imagecolormatch(resource $image1, resource $image2) [bool]\nMakes the colors of the palette version of an image more closely match the\ntrue color version. Makes the colors of the palette version of an image more\nclosely match the true color version.\n@param image1 A truecolor image link resource.\n@param image2 A palette image link resource pointing to an image that has\nthe same size as `image1`.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecreatetruecolor() - Create a new true color image\n
imagecolorresolve imagecolorresolve(resource $image, int $red, int $green,\nint $blue) [int]\nGet the index of the specified color or its closest possible alternative. This\nfunction is guaranteed to return a color index for a requested color, either\nthe exact color or the closest possible alternative. If you created the image\nfrom a file, only colors used in the image are resolved. Colors present only\nin the palette are not resolved.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@return (PHP 4, PHP 5)\n@see imagecolorclosest() - Get the index of the closest color to the\nspecified color\n
imagecolorresolvealpha imagecolorresolvealpha(resource $image, int $red,\nint $green, int $blue, int $alpha) [int]\nGet the index of the specified color + alpha or its closest possible\nalternative. This function is guaranteed to return a color index for a\nrequested color, either the exact color or the closest possible alternative.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@param alpha A value between `0` and `127`. `0` indicates completely opaque\nwhile `127` indicates completely transparent.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecolorclosestalpha() - Get the index of the closest color to the\nspecified color + alpha\n
imagecolorset imagecolorset(resource $image, int $index, int $red, int $green,\nint $blue [, int $alpha=0]) [void]\nSet the color for the specified palette index. This sets the specified\nindex in the palette to the specified color. This is useful for creating\nflood-fill-like effects in palleted images without the overhead of performing\nthe actual flood-fill.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param index An index in the palette.\n@param red Value of red component.\n@param green Value of green component.\n@param blue Value of blue component.\n@param alpha Value of alpha component. This change exists in the development\nversion of PHP, and will probably exist after 5.3.\n@return (PHP 4, PHP 5)\n@see imagecolorat() - Get the index of the color of a pixel\n
imagecolorsforindex imagecolorsforindex(resource $image, int $index) [array]\nGet the colors for an index. Gets the color for a specified index.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param index The color index.\n@return (PHP 4, PHP 5)\n@see imagecolorat() - Get the index of the color of a pixel\n@see imagecolorexact() - Get the index of the specified color\n
imagecolorstotal imagecolorstotal(resource $image) [int]\nFind out the number of colors in an image's palette. Returns the number of\ncolors in an image palette.\n@param image An image resource, returned by one of the image creation\nfunctions, such as imagecreatefromgif().\n@return (PHP 4, PHP 5)\n@see imagecolorat() - Get the index of the color of a pixel\n@see imagecolorsforindex() - Get the colors for an index\n@see imageistruecolor() - Finds whether an image is a truecolor image\n
imagecolortransparent imagecolortransparent(resource $image [, int $color])\n[int]\nDefine a color as transparent. Sets the transparent color in the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@note Note: Transparency is copied only with imagecopymerge() and true color\nimages, not with imagecopy() or pallete images.\n@note Note: The transparent color is a property of the image, transparency is\nnot a property of the color. Once you have set a color to be the transparent\ncolor, any regions of the image in that color that were drawn previously\nwill be transparent.\n
imageconvolution imageconvolution(resource $image, array $matrix, float $div,\nfloat $offset) [bool]\nApply a 3x3 convolution matrix, using coefficient and offset. Applies a\nconvolution matrix on the image, using the given coefficient and offset.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param matrix A 3x3 matrix: an array of three arrays of three floats.\n@param div The divisor of the result of the convolution, used for\nnormalization.\n@param offset Color offset.\n@return (PHP 5 >= 5.1.0)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@see imagefilter() - Applies a filter to an image\n
imagecopy imagecopy(resource $dst_im, resource $src_im, int $dst_x, int\n$dst_y, int $src_x, int $src_y, int $src_w, int $src_h) [bool]\nCopy part of an image. Copy a part of `src_im` onto `dst_im` starting at\nthe x,y coordinates `src_x`, `src_y ` with a width of `src_w` and a height\nof `src_h`. The portion defined will be copied onto the x,y coordinates,\n`dst_x` and `dst_y`.\n@param dst_im Destination image link resource.\n@param src_im Source image link resource.\n@param dst_x x-coordinate of destination point.\n@param dst_y y-coordinate of destination point.\n@param src_x x-coordinate of source point.\n@param src_y y-coordinate of source point.\n@param src_w Source width.\n@param src_h Source height.\n@return (PHP 4, PHP 5)\n
imagecopymerge imagecopymerge(resource $dst_im, resource $src_im, int $dst_x,\nint $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct) [bool]\nCopy and merge part of an image. Copy a part of `src_im` onto `dst_im`\nstarting at the x,y coordinates `src_x`, `src_y ` with a width of `src_w`\nand a height of `src_h`. The portion defined will be copied onto the x,y\ncoordinates, `dst_x` and `dst_y`.\n@param dst_im Destination image link resource.\n@param src_im Source image link resource.\n@param dst_x x-coordinate of destination point.\n@param dst_y y-coordinate of destination point.\n@param src_x x-coordinate of source point.\n@param src_y y-coordinate of source point.\n@param src_w Source width.\n@param src_h Source height.\n@param pct The two images will be merged according to `pct` which can range\nfrom 0 to 100. When `pct` = 0, no action is taken, when 100 this function\nbehaves identically to imagecopy() for pallete images, while it implements\nalpha transparency for true colour images.\n@return (PHP 4 >= 4.0.1, PHP 5)\n
imagecopymergegray imagecopymergegray(resource $dst_im, resource $src_im,\nint $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h,\nint $pct) [bool]\nCopy and merge part of an image with gray scale. imagecopymergegray() copy\na part of `src_im` onto `dst_im` starting at the x,y coordinates `src_x`,\n`src_y ` with a width of `src_w` and a height of `src_h`. The portion defined\nwill be copied onto the x,y coordinates, `dst_x` and `dst_y`. This function\nis identical to imagecopymerge() except that when merging it preserves the\nhue of the source by converting the destination pixels to gray scale before\nthe copy operation.\n@param dst_im Destination image link resource.\n@param src_im Source image link resource.\n@param dst_x x-coordinate of destination point.\n@param dst_y y-coordinate of destination point.\n@param src_x x-coordinate of source point.\n@param src_y y-coordinate of source point.\n@param src_w Source width.\n@param src_h Source height.\n@param pct The `src_im` will be changed to grayscale according to `pct`\nwhere 0 is fully grayscale and 100 is unchanged. When `pct` = 100 this\nfunction behaves identically to imagecopy() for pallete images, while it\nimplements alpha transparency for true colour images.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
imagecopyresampled imagecopyresampled(resource $dst_image, resource $src_image,\nint $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h,\nint $src_w, int $src_h) [bool]\nCopy and resize part of an image with resampling. imagecopyresampled() copies\na rectangular portion of one image to another image, smoothly interpolating\npixel values so that, in particular, reducing the size of an image still\nretains a great deal of clarity. In other words, imagecopyresampled() will\ntake an rectangular area from `src_image` of width `src_w` and height `src_h`\nat position (`src_x`,`src_y`) and place it in a rectangular area of `dst_image`\nof width `dst_w` and height `dst_h` at position (`dst_x`,`dst_y`). If the\nsource and destination coordinates and width and heights differ, appropriate\nstretching or shrinking of the image fragment will be performed. The\ncoordinates refer to the upper left corner. This function can be used to copy\nregions within the same image (if `dst_image` is the same as `src_image`)\nbut if the regions overlap the results will be unpredictable.\n@param dst_image Destination image link resource.\n@param src_image Source image link resource.\n@param dst_x x-coordinate of destination point.\n@param dst_y y-coordinate of destination point.\n@param src_x x-coordinate of source point.\n@param src_y y-coordinate of source point.\n@param dst_w Destination width.\n@param dst_h Destination height.\n@param src_w Source width.\n@param src_h Source height.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: There is a problem due to palette image limitations (255+1\ncolors). Resampling or filtering an image commonly needs more colors than\n255, a kind of approximation is used to calculate the new resampled pixel\nand its color. With a palette image we try to allocate a new color, if that\nfailed, we choose the closest (in theory) computed color. This is not always\nthe closest visual color. That may produce a weird result, like blank (or\nvisually blank) images. To skip this problem, please use a truecolor image\nas a destination image, such as one created by imagecreatetruecolor().\n
imagecopyresized imagecopyresized(resource $dst_image, resource $src_image,\nint $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h,\nint $src_w, int $src_h) [bool]\nCopy and resize part of an image. imagecopyresized() copies a rectangular\nportion of one image to another image. `dst_image` is the destination image,\n`src_image` is the source image identifier. In other words, imagecopyresized()\nwill take an rectangular area from `src_image` of width `src_w` and height\n`src_h` at position (`src_x`,`src_y`) and place it in a rectangular\narea of `dst_image` of width `dst_w` and height `dst_h` at position\n(`dst_x`,`dst_y`). If the source and destination coordinates and width and\nheights differ, appropriate stretching or shrinking of the image fragment will\nbe performed. The coordinates refer to the upper left corner. This function\ncan be used to copy regions within the same image (if `dst_image` is the same\nas `src_image`) but if the regions overlap the results will be unpredictable.\n@param dst_image Destination image link resource.\n@param src_image Source image link resource.\n@param dst_x x-coordinate of destination point.\n@param dst_y y-coordinate of destination point.\n@param src_x x-coordinate of source point.\n@param src_y y-coordinate of source point.\n@param dst_w Destination width.\n@param dst_h Destination height.\n@param src_w Source width.\n@param src_h Source height.\n@return (PHP 4, PHP 5)\n@note Note: There is a problem due to palette image limitations (255+1\ncolors). Resampling or filtering an image commonly needs more colors than\n255, a kind of approximation is used to calculate the new resampled pixel\nand its color. With a palette image we try to allocate a new color, if that\nfailed, we choose the closest (in theory) computed color. This is not always\nthe closest visual color. That may produce a weird result, like blank (or\nvisually blank) images. To skip this problem, please use a truecolor image\nas a destination image, such as one created by imagecreatetruecolor().\n
imagecreate imagecreate(int $width, int $height) [resource]\nCreate a new palette based image. imagecreate() returns an image identifier\nrepresenting a blank image of specified size. We recommend the use of\nimagecreatetruecolor().\n@param width The image width.\n@param height The image height.\n@return (PHP 4, PHP 5)\n@see imagedestroy() - Destroy an image\n@see imagecreatetruecolor() - Create a new true color image\n
imagecreatefromgd imagecreatefromgd(string $filename) [resource]\nCreate a new image from GD file or URL. Create a new image from GD file\nor URL. A URL can be used as a filename with this function if the fopen\nwrappers have been enabled. See fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage, and\ninformation on any predefined variables they may provide.\n@param filename Path to the GD file.\n@return (PHP 4 >= 4.0.7, PHP 5)\n
imagecreatefromgd2 imagecreatefromgd2(string $filename) [resource]\nCreate a new image from GD2 file or URL. Create a new image from GD2 file\nor URL. A URL can be used as a filename with this function if the fopen\nwrappers have been enabled. See fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage, and\ninformation on any predefined variables they may provide.\n@param filename Path to the GD2 image.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imagecreatefromgd2part imagecreatefromgd2part(string $filename, int $srcX,\nint $srcY, int $width, int $height) [resource]\nCreate a new image from a given part of GD2 file or URL. Create a new image\nfrom a given part of GD2 file or URL. A URL can be used as a filename with this\nfunction if the fopen wrappers have been enabled. See fopen() for more details\non how to specify the filename. See the Supported Protocols and Wrappers for\nlinks to information about what abilities the various wrappers have, notes\non their usage, and information on any predefined variables they may provide.\n@param filename Path to the GD2 image.\n@param srcX x-coordinate of source point.\n@param srcY y-coordinate of source point.\n@param width Source width.\n@param height Source height.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imagecreatefromgif imagecreatefromgif(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefromgif() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the GIF image.\n@return (PHP 4, PHP 5)\n@note Note: GIF support was removed from the GD library in Version 1.6,\nand added back in Version 2.0.28. This function is not available between\nthese versions.\n
imagecreatefromjpeg imagecreatefromjpeg(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefromjpeg() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the JPEG image.\n@return (PHP 4, PHP 5)\n@note Note: JPEG support is only available if PHP was compiled against GD-1.8\nor later.\n
imagecreatefrompng imagecreatefrompng(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefrompng() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the PNG image.\n@return (PHP 4, PHP 5)\n
imagecreatefromstring imagecreatefromstring(string $data) [resource]\nCreate a new image from the image stream in the string. imagecreatefromstring()\nreturns an image identifier representing the image obtained from the given\n`data`. These types will be automatically detected if your build of PHP\nsupports them: JPEG, PNG, GIF, WBMP, and GD2.\n@param image A string containing the image data.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see imagecreatefromjpeg() - Create a new image from file or URL\n@see imagecreatefrompng() - Create a new image from file or URL\n@see imagecreatefromgif() - Create a new image from file or URL\n@see imagecreatetruecolor() - Create a new true color image\n
imagecreatefromwbmp imagecreatefromwbmp(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefromwbmp() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the WBMP image.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: WBMP support is only available if PHP was compiled against GD-1.8\nor later.\n
imagecreatefromxbm imagecreatefromxbm(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefromxbm() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the XBM image.\n@return (PHP 4 >= 4.0.1, PHP 5)\n
imagecreatefromxpm imagecreatefromxpm(string $filename) [resource]\nCreate a new image from file or URL. imagecreatefromxpm() returns an image\nidentifier representing the image obtained from the given filename. A URL\ncan be used as a filename with this function if the fopen wrappers have been\nenabled. See fopen() for more details on how to specify the filename. See\nthe Supported Protocols and Wrappers for links to information about what\nabilities the various wrappers have, notes on their usage, and information\non any predefined variables they may provide.\n@param filename Path to the XPM image.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@note Note: This function is not implemented on Windows platforms.\n
imagecreatetruecolor imagecreatetruecolor(int $width, int $height) [resource]\nCreate a new true color image. imagecreatetruecolor() returns an image\nidentifier representing a black image of the specified size. Depending on your\nPHP and GD versions this function is defined or not. With PHP 4.0.6 through\n4.1.x this function always exists if the GD module is loaded, but calling\nit without GD2 being installed PHP will issue a fatal error and exit. With\nPHP 4.2.x this behaviour is different in issuing a warning instead of an\nerror. Other versions only define this function, if the correct GD version\nis installed.\n@param width Image width.\n@param height Image height.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagedestroy() - Destroy an image\n@see imagecreate() - Create a new palette based image\n
imagedashedline imagedashedline(resource $image, int $x1, int $y1, int $x2,\nint $y2, int $color) [bool]\nDraw a dashed line. This function is deprecated. Use combination of\nimagesetstyle() and imageline() instead.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x1 Upper left x coordinate.\n@param y1 Upper left y coordinate 0, 0 is the top left corner of the image.\n@param x2 Bottom right x coordinate.\n@param y2 Bottom right y coordinate.\n@param color The fill color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagesetstyle() - Set the style for line drawing\n@see imageline() - Draw a line\n
imagedestroy imagedestroy(resource $image) [bool]\nDestroy an image. imagedestroy() frees any memory associated with image\n`image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@return (PHP 4, PHP 5)\n
imageellipse imageellipse(resource $image, int $cx, int $cy, int $width,\nint $height, int $color) [bool]\nDraw an ellipse. Draws an ellipse centered at the specified coordinates.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param cx x-coordinate of the center.\n@param cy y-coordinate of the center.\n@param width The ellipse width.\n@param height The ellipse height.\n@param color The color of the ellipse. A color identifier created with\nimagecolorallocate().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.2 or later.\n@see imagefilledellipse() - Draw a filled ellipse\n@see imagearc() - Draws an arc\n
imagefill imagefill(resource $image, int $x, int $y, int $color) [bool]\nFlood fill. Performs a flood fill starting at the given coordinate (top left\nis 0, 0) with the given `color` in the `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x x-coordinate of start point.\n@param y y-coordinate of start point.\n@param color The fill color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagecolorallocate() - Allocate a color for an image\n
imagefilledarc imagefilledarc(resource $image, int $cx, int $cy, int $width,\nint $height, int $start, int $end, int $color, int $style) [bool]\nDraw a partial arc and fill it. Draws a partial arc centered at the specified\ncoordinate in the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param cx x-coordinate of the center.\n@param cy y-coordinate of the center.\n@param width The arc width.\n@param height The arc height.\n@param start The arc start angle, in degrees.\n@param end The arc end angle, in degrees. 0° is located at the\nthree-o&#039;clock position, and the arc is drawn clockwise.\n@param color A color identifier created with imagecolorallocate().\n@param style A bitwise OR of the following possibilities: IMG_ARC_PIE\nIMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD\nare mutually exclusive; IMG_ARC_CHORD just connects the starting and\nending angles with a straight line, while IMG_ARC_PIE produces a rounded\nedge. IMG_ARC_NOFILL indicates that the arc or chord should be outlined,\nnot filled. IMG_ARC_EDGED, used together with IMG_ARC_NOFILL, indicates\nthat the beginning and ending angles should be connected to the center -\nthis is a good way to outline (rather than fill) a &#039;pie slice&#039;.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imagefilledellipse imagefilledellipse(resource $image, int $cx, int $cy,\nint $width, int $height, int $color) [bool]\nDraw a filled ellipse. Draws an ellipse centered at the specified coordinate\non the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param cx x-coordinate of the center.\n@param cy y-coordinate of the center.\n@param width The ellipse width.\n@param height The ellipse height.\n@param color The fill color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imageellipse() - Draw an ellipse\n@see imagefilledarc() - Draw a partial arc and fill it\n
imagefilledpolygon imagefilledpolygon(resource $image, array $points, int\n$num_points, int $color) [bool]\nDraw a filled polygon. imagefilledpolygon() creates a filled polygon in the\ngiven `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param points An array containing the `x` and `y` coordinates of the polygons\nvertices consecutively.\n@param num_points Total number of vertices, which must be at least 3.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n
imagefilledrectangle imagefilledrectangle(resource $image, int $x1, int $y1,\nint $x2, int $y2, int $color) [bool]\nDraw a filled rectangle. Creates a rectangle filled with `color` in the\ngiven `image` starting at point 1 and ending at point 2. 0, 0 is the top\nleft corner of the image.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x1 x-coordinate for point 1.\n@param y1 y-coordinate for point 1.\n@param x2 x-coordinate for point 2.\n@param y2 y-coordinate for point 2.\n@param color The fill color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4, PHP 5)\n
imagefilltoborder imagefilltoborder(resource $image, int $x, int $y, int\n$border, int $color) [bool]\nFlood fill to specific color. imagefilltoborder() performs a flood fill whose\nborder color is defined by `border`. The starting point for the fill is `x`,\n`y` (top left is 0, 0) and the region is filled with color `color`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x x-coordinate of start.\n@param y y-coordinate of start.\n@param border The border color. A color identifier created with\nimagecolorallocate().\n@param color The fill color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4, PHP 5)\n
imagefilter imagefilter(resource $image, int $filtertype [, int $arg1 [,\nint $arg2 [, int $arg3 [, int $arg4]]]]) [bool]\nApplies a filter to an image. imagefilter() applies the given filter\n`filtertype` on the `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filtertype `filtertype` can be one of the following: IMG_FILTER_NEGATE:\nReverses all colors of the image. IMG_FILTER_GRAYSCALE: Converts the image\ninto grayscale. IMG_FILTER_BRIGHTNESS: Changes the brightness of the\nimage. Use `arg1` to set the level of brightness. IMG_FILTER_CONTRAST:\nChanges the contrast of the image. Use `arg1` to set the level of\ncontrast. IMG_FILTER_COLORIZE: Like IMG_FILTER_GRAYSCALE, except you can\nspecify the color. Use `arg1`, `arg2` and `arg3` in the form of `red`, `blue`,\n`green` and `arg4` for the `alpha` channel. The range for each color is 0\nto 255. IMG_FILTER_EDGEDETECT: Uses edge detection to highlight the edges in\nthe image. IMG_FILTER_EMBOSS: Embosses the image. IMG_FILTER_GAUSSIAN_BLUR:\nBlurs the image using the Gaussian method. IMG_FILTER_SELECTIVE_BLUR:\nBlurs the image. IMG_FILTER_MEAN_REMOVAL: Uses mean removal to achieve a\n&quot;sketchy&quot; effect. IMG_FILTER_SMOOTH: Makes the image smoother. Use\n`arg1` to set the level of smoothness. IMG_FILTER_PIXELATE: Applies pixelation\neffect to the image, use `arg1` to set the block size and `arg2` to set the\npixelation effect mode.\n@param arg1 IMG_FILTER_BRIGHTNESS: Brightness level. IMG_FILTER_CONTRAST:\nContrast level. IMG_FILTER_COLORIZE: Value of red component. IMG_FILTER_SMOOTH:\nSmoothness level. IMG_FILTER_PIXELATE: Block size in pixels.\n@param arg2 IMG_FILTER_COLORIZE: Value of green component. IMG_FILTER_PIXELATE:\nWhether to use advanced pixelation effect or not (defaults to FALSE).\n@param arg3 IMG_FILTER_COLORIZE: Value of blue component.\n@param arg4 IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. 0\nindicates completely opaque while 127 indicates completely transparent.\n@return (PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@see imageconvolution() - Apply a 3x3 convolution matrix, using coefficient\nand offset\n
imagefontheight imagefontheight(int $font) [int]\nGet font height. Returns the pixel height of a character in the specified font.\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@return (PHP 4, PHP 5)\n@see imagefontwidth() - Get font width\n@see imageloadfont() - Load a new font\n
imagefontwidth imagefontwidth(int $font) [int]\nGet font width. Returns the pixel width of a character in font.\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@return (PHP 4, PHP 5)\n@see imagefontheight() - Get font height\n@see imageloadfont() - Load a new font\n
imageftbbox imageftbbox(float $size, float $angle, string $fontfile, string\n$text [, array $extrainfo]) [array]\nGive the bounding box of a text using fonts via freetype2. This function\ncalculates and returns the bounding box in pixels for a FreeType text.\n@param size The font size. Depending on your version of GD, this should be\nspecified as the pixel size (GD1) or point size (GD2).\n@param angle Angle in degrees in which `text` will be measured.\n@param fontfile The name of the TrueType font file (can be a URL). Depending\non which version of the GD library that PHP is using, it may attempt to\nsearch for files that do not begin with a leading &#039;/&#039; by appending\n&#039;.ttf&#039; to the filename and searching along a library-defined\nfont path.\n@param text The string to be measured.\n@param extrainfo Possible array indexes for `extrainfo` Key Type Meaning\n`linespacing` float Defines drawing linespacing\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@note Note: This function is only available if PHP is compiled with freetype\nsupport (--with-freetype-dir=DIR )\n
imagefttext imagefttext(resource $image, float $size, float $angle, int $x,\nint $y, int $color, string $fontfile, string $text [, array $extrainfo])\n[array]\nWrite text to the image using fonts using FreeType 2.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param size The font size to use in points.\n@param angle The angle in degrees, with 0 degrees being left-to-right reading\ntext. Higher values represent a counter-clockwise rotation. For example,\na value of 90 would result in bottom-to-top reading text.\n@param x The coordinates given by `x` and `y` will define the basepoint of\nthe first character (roughly the lower-left corner of the character). This\nis different from the imagestring(), where `x` and `y` define the upper-left\ncorner of the first character. For example, &quot;top left&quot; is 0, 0.\n@param y The y-ordinate. This sets the position of the fonts baseline,\nnot the very bottom of the character.\n@param color The index of the desired color for the text, see\nimagecolorexact().\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@note Note: This function is only available if PHP is compiled with freetype\nsupport (--with-freetype-dir=DIR )\n
imagegammacorrect imagegammacorrect(resource $image, float $inputgamma,\nfloat $outputgamma) [bool]\nApply a gamma correction to a GD image. Applies gamma correction to the\ngiven gd `image` given an input and an output gamma.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param inputgamma The input gamma.\n@param outputgamma The output gamma.\n@return (PHP 4, PHP 5)\n
imagegd imagegd(resource $image [, string $filename]) [bool]\nOutput GD image to browser or file. Outputs a GD image to the given `filename`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: The GD format is commonly used to allow fast loading of parts of\nimages. Note that the GD format is only usable in GD-compatible applications.\n@see imagegd2() - Output GD2 image to browser or file\n
imagegd2 imagegd2(resource $image [, string $filename [, int $chunk_size [,\nint $type]]]) [bool]\nOutput GD2 image to browser or file. Outputs a GD2 image to the given\n`filename`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly.\n@param chunk_size Chunk size.\n@param type Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Default is IMG_GD2_RAW.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@note Note: The GD2 format is commonly used to allow fast loading of parts of\nimages. Note that the GD2 format is only usable in GD2-compatible applications.\n@see imagegd() - Output GD image to browser or file\n
imagegif imagegif(resource $image [, string $filename]) [bool]\nOutput image to browser or file. imagegif() creates the GIF file in\nfilename from the image `image`. The `image` argument is the return from the\nimagecreate() or `imagecreatefrom*` function. The image format will be GIF87a\nunless the image has been made transparent with imagecolortransparent(),\nin which case the image format will be GIF89a.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly.\n@return (PHP 4, PHP 5)\n@see imagepng() - Output a PNG image to either the browser or a file\n@see imagewbmp() - Output image to browser or file\n@see imagejpeg() - Output image to browser or file\n@see imagetypes() - Return the image types supported by this PHP build\n
imagegrabscreen imagegrabscreen(void) [resource]\nCaptures the whole screen. Grabs a screenshot of the whole screen.\n@return (PHP 5 >= 5.2.2)\n@note Note: This function is only available on Windows.\n@see imagegrabwindow() - Captures a window\n
imagegrabwindow imagegrabwindow(int $window_handle [, int $client_area=0])\n[resource]\nCaptures a window. Grabs a window or its client area using a windows handle\n(HWND property in COM instance)\n@param window_handle The HWND window ID.\n@param client_area Include the client area of the application window.\n@return (PHP 5 >= 5.2.2)\n@note Note: This function is only available on Windows.\n@see imagegrabscreen() - Captures the whole screen\n
imageinterlace imageinterlace(resource $image [, int $interlace=0]) [int]\nEnable or disable interlace. imageinterlace() turns the interlace bit on\nor off. If the interlace bit is set and the image is used as a JPEG image,\nthe image is created as a progressive JPEG.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param interlace If non-zero, the image will be interlaced, else the interlace\nbit is turned off.\n@return (PHP 4, PHP 5)\n
imageistruecolor imageistruecolor(resource $image) [bool]\nFinds whether an image is a truecolor image. imageistruecolor() finds whether\nthe image `image` is a truecolor image.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@return (PHP 4 >= 4.3.2, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagecreatetruecolor() - Create a new true color image\n
imagejpeg imagejpeg(resource $image [, string $filename [, int $quality]])\n[bool]\nOutput image to browser or file. imagejpeg() creates a JPEG file from the\ngiven `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly. To skip this argument in order to\nprovide the `quality` parameter, use NULL.\n@param quality `quality` is optional, and ranges from 0 (worst quality,\nsmaller file) to 100 (best quality, biggest file). The default is the default\nIJG quality value (about 75).\n@return (PHP 4, PHP 5)\n@note Note: JPEG support is only available if PHP was compiled against GD-1.8\nor later.\n@note Note: If you want to output Progressive JPEGs, you need to set\ninterlacing on with imageinterlace().\n@see imagepng() - Output a PNG image to either the browser or a file\n@see imagegif() - Output image to browser or file\n@see imagewbmp() - Output image to browser or file\n@see imageinterlace() - Enable or disable interlace\n@see imagetypes() - Return the image types supported by this PHP build\n
imagelayereffect imagelayereffect(resource $image, int $effect) [bool]\nSet the alpha blending flag to use the bundled libgd layering effects. Set\nthe alpha blending flag to use the bundled libgd layering effects.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param effect One of the following constants: IMG_EFFECT_REPLACE Use pixel\nreplacement (equivalent of passing TRUE to imagealphablending())\n@param IMG_EFFECT_ALPHABLEND Use normal pixel blending (equivalent of passing\nFALSE to imagealphablending())\n@param IMG_EFFECT_NORMAL Same as IMG_EFFECT_ALPHABLEND.\n@param IMG_EFFECT_OVERLAY Overlay has the effect that black background\npixels will remain black, white background pixels will remain white, but\ngrey background pixels will take the colour of the foreground pixel.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imageline imageline(resource $image, int $x1, int $y1, int $x2, int $y2,\nint $color) [bool]\nDraw a line. Draws a line between the two given points.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x1 x-coordinate for first point.\n@param y1 y-coordinate for first point.\n@param x2 x-coordinate for second point.\n@param y2 y-coordinate for second point.\n@param color The line color. A color identifier created with\nimagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagecreatetruecolor() - Create a new true color image\n@see imagecolorallocate() - Allocate a color for an image\n
imageloadfont imageloadfont(string $file) [int]\nLoad a new font. imageloadfont() loads a user-defined bitmap and returns\nits identifier.\n@param file The font file format is currently binary and architecture\ndependent. This means you should generate the font files on the same type of\nCPU as the machine you are running PHP on. Font file format byte position C\ndata type description byte 0-3 int number of characters in the font byte 4-7\nint value of first character in the font (often 32 for space) byte 8-11 int\npixel width of each character byte 12-15 int pixel height of each character\nbyte 16- char array with character data, one byte per pixel in each character,\nfor a total of (nchars*width*height) bytes.\n@return (PHP 4, PHP 5)\n@see imagefontwidth() - Get font width\n@see imagefontheight() - Get font height\n
imagepalettecopy imagepalettecopy(resource $destination, resource $source)\n[void]\nCopy the palette from one image to another. imagepalettecopy() copies the\npalette from the `source` image to the `destination` image.\n@param destination The destination image resource.\n@param source The source image resource.\n@return (PHP 4 >= 4.0.1, PHP 5)\n
imagepng imagepng(resource $image [, string $filename [, int $quality [,\nint $filters]]]) [bool]\nOutput a PNG image to either the browser or a file. Outputs or saves a PNG\nimage from the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the\nraw image stream will be outputted directly. Note: NULL is invalid if the\n`quality` and `filters` arguments are not used.\n@param quality Compression level: from 0 (no compression) to 9.\n@param filters Allows reducing the PNG file size. It is a bitmask field which\nmay be set to any combination of the `PNG_FILTER_XXX` constants. PNG_NO_FILTER\nor PNG_ALL_FILTERS may also be used to respectively disable or activate\nall filters.\n@return (PHP 4, PHP 5)\n@see imagegif() - Output image to browser or file\n@see imagewbmp() - Output image to browser or file\n@see imagejpeg() - Output image to browser or file\n@see imagetypes() - Return the image types supported by this PHP build\n@see imagesavealpha() - Set the flag to save full alpha channel information\n(as opposed to single-color transparency) when saving PNG images\n
imagepolygon imagepolygon(resource $image, array $points, int $num_points,\nint $color) [bool]\nDraws a polygon. imagepolygon() creates a polygon in the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param points An array containing the polygon&#039;s vertices, e.g.: points[0]\n= x0 points[1] = y0 points[2] = x1 points[3] = y1\n@param num_points Total number of points (vertices).\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagecreate() - Create a new palette based image\n@see imagecreatetruecolor() - Create a new true color image\n
imagepsbbox imagepsbbox(string $text, resource $font, int $size) [array]\nGive the bounding box of a text rectangle using PostScript Type1 fonts. Gives\nthe bounding box of a text rectangle using PostScript Type1 fonts. The bounding\nbox is calculated using information available from character metrics, and\nunfortunately tends to differ slightly from the results achieved by actually\nrasterizing the text. If the angle is 0 degrees, you can expect the text to\nneed 1 pixel more to every direction.\n@param text The text to be written.\n@param font_index A font resource, returned by imagepsloadfont().\n@param size `size` is expressed in pixels.\n@param space Allows you to change the default value of a space in a font. This\namount is added to the normal value and can also be negative. Expressed in\ncharacter space units, where 1 unit is 1/1000th of an em-square.\n@param tightness `tightness` allows you to control the amount of white space\nbetween characters. This amount is added to the normal character width and\ncan also be negative. Expressed in character space units, where 1 unit is\n1/1000th of an em-square.\n@param angle `angle` is in degrees.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n@see imagepstext() - Draws a text over an image using PostScript Type1 fonts\n
imagepsencodefont imagepsencodefont(resource $font_index, string $encodingfile)\n[bool]\nChange the character encoding vector of a font. Loads a character encoding\nvector from a file and changes the fonts encoding vector to it. As a\nPostScript fonts default vector lacks most of the character positions above\n127, you&#039;ll definitely want to change this if you use an other language\nthan English. If you find yourself using this function all the time, a much\nbetter way to define the encoding is to set ps.default_encoding in the\nconfiguration file to point to the right encoding file and all fonts you\nload will automatically have the right encoding.\n@param font_index A font resource, returned by imagepsloadfont().\n@param encodingfile The exact format of this file is described in T1libs\ndocumentation. T1lib comes with two ready-to-use files, IsoLatin1.enc and\nIsoLatin2.enc.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n
imagepsextendfont imagepsextendfont(resource $font_index, float $extend) [bool]\nExtend or condense a font. Extend or condense a font (`font_index`), if\nthe value of the `extend` parameter is less than one you will be condensing\nthe font.\n@param font_index A font resource, returned by imagepsloadfont().\n@param extend Extension value, must be greater than 0.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n
imagepsfreefont imagepsfreefont(resource $font_index) [bool]\nFree memory used by a PostScript Type 1 font. imagepsfreefont() frees memory\nused by a PostScript Type 1 font.\n@param font_index A font resource, returned by imagepsloadfont().\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n@see imagepsloadfont() - Load a PostScript Type 1 font from file\n
imagepsloadfont imagepsloadfont(string $filename) [resource]\nLoad a PostScript Type 1 font from file. Load a PostScript Type 1 font from\nthe given `filename`.\n@param filename Path to the Postscript font file.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n@see imagepsfreefont() - Free memory used by a PostScript Type 1 font\n
imagepsslantfont imagepsslantfont(resource $font_index, float $slant) [bool]\nSlant a font. Slant a given font given.\n@param font_index A font resource, returned by imagepsloadfont().\n@param slant Slant level.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n
imagepstext imagepstext(resource $image, string $text, resource $font_index,\nint $size, int $foreground, int $background, int $x, int $y [, int $space=0\n[, int $tightness=0 [, float $angle=0.0 [, int $antialias_steps=4]]]]) [array]\nDraws a text over an image using PostScript Type1 fonts. Draws a text on\nan image using PostScript Type1 fonts. Refer to PostScript documentation\nabout fonts and their measuring system if you have trouble understanding\nhow this works.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param text The text to be written.\n@param font_index A font resource, returned by imagepsloadfont().\n@param size `size` is expressed in pixels.\n@param foreground The color in which the text will be painted.\n@param background The color to which the text will try to fade in with\nantialiasing. No pixels with the color `background` are actually painted,\nso the background image does not need to be of solid color.\n@param x x-coordinate for the lower-left corner of the first character.\n@param y y-coordinate for the lower-left corner of the first character.\n@param space Allows you to change the default value of a space in a font. This\namount is added to the normal value and can also be negative. Expressed in\ncharacter space units, where 1 unit is 1/1000th of an em-square.\n@param tightness `tightness` allows you to control the amount of white space\nbetween characters. This amount is added to the normal character width and\ncan also be negative. Expressed in character space units, where 1 unit is\n1/1000th of an em-square.\n@param angle `angle` is in degrees.\n@param antialias_steps Allows you to control the number of colours used for\nantialiasing text. Allowed values are 4 and 16. The higher value is recommended\nfor text sizes lower than 20, where the effect in text quality is quite\nvisible. With bigger sizes, use 4. It&#039;s less computationally intensive.\n@return (PHP 4, PHP 5)\n@note Note: This function is only available if PHP is compiled using\n--with-t1lib[=DIR] .\n@see imagepsbbox() - Give the bounding box of a text rectangle using PostScript\nType1 fonts\n
imagerectangle imagerectangle(resource $image, int $x1, int $y1, int $x2,\nint $y2, int $color) [bool]\nDraw a rectangle. imagerectangle() creates a rectangle starting at the\nspecified coordinates.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x1 Upper left x coordinate.\n@param y1 Upper left y coordinate 0, 0 is the top left corner of the image.\n@param x2 Bottom right x coordinate.\n@param y2 Bottom right y coordinate.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n
imagerotate imagerotate(resource $image, float $angle, int $bgd_color [,\nint $ignore_transparent=0]) [resource]\nRotate an image with a given angle. Rotates the `image` image using the\ngiven `angle` in degrees. The center of rotation is the center of the image,\nand the rotated image may have different dimensions than the original image.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param angle Rotation angle, in degrees. The rotation angle is interpreted\nas the number of degrees to rotate the image anticlockwise.\n@param bgd_color Specifies the color of the uncovered zone after the rotation\n@param ignore_transparent If set and non-zero, transparent colors are ignored\n(otherwise kept).\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n
imagesavealpha imagesavealpha(resource $image, bool $saveflag) [bool]\nSet the flag to save full alpha channel information (as opposed to\nsingle-color transparency) when saving PNG images. imagesavealpha() sets\nthe flag to attempt to save full alpha channel information (as opposed\nto single-color transparency) when saving PNG images. You have to unset\nalphablending (`imagealphablending($im, false)`), to use it. Alpha channel is\nnot supported by all browsers, if you have problem with your browser, try to\nload your script with an alpha channel compliant browser, e.g. latest Mozilla.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param saveflag Whether to save the alpha channel or not. Default to FALSE.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n@see imagealphablending() - Set the blending mode for an image\n
imagesetbrush imagesetbrush(resource $image, resource $brush) [bool]\nSet the brush image for line drawing. imagesetbrush() sets the brush\nimage to be used by all line drawing functions (such as imageline() and\nimagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or\nIMG_COLOR_STYLEDBRUSHED.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param brush An image resource.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: You need not take special action when you are finished\nwith a brush, but if you destroy the brush image, you must not use the\nIMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED colors until you have set a\nnew brush image!\n
imagesetpixel imagesetpixel(resource $image, int $x, int $y, int $color) [bool]\nSet a single pixel. imagesetpixel() draws a pixel at the specified coordinate.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param x x-coordinate.\n@param y y-coordinate.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imagecreatetruecolor() - Create a new true color image\n@see imagecolorallocate() - Allocate a color for an image\n
imagesetstyle imagesetstyle(resource $image, array $style) [bool]\nSet the style for line drawing. imagesetstyle() sets the style to be used\nby all line drawing functions (such as imageline() and imagepolygon()) when\ndrawing with the special color IMG_COLOR_STYLED or lines of images with\ncolor IMG_COLOR_STYLEDBRUSHED.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param style An array of pixel colors. You can use the IMG_COLOR_TRANSPARENT\nconstant to add a transparent pixel.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see imagesetbrush() - Set the brush image for line drawing\n@see imageline() - Draw a line\n
imagesetthickness imagesetthickness(resource $image, int $thickness) [bool]\nSet the thickness for line drawing. imagesetthickness() sets the thickness\nof the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to\n`thickness` pixels.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param thickness Thickness, in pixels.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imagesettile imagesettile(resource $image, resource $tile) [bool]\nSet the tile image for filling. imagesettile() sets the tile image to be used\nby all region filling functions (such as imagefill() and imagefilledpolygon())\nwhen filling with the special color IMG_COLOR_TILED. A tile is an image\nused to fill an area with a repeated pattern. Any GD image can be used as\na tile, and by setting the transparent color index of the tile image with\nimagecolortransparent(), a tile allows certain parts of the underlying area\nto shine through can be created. Note: You need not take special action when\nyou are finished with a tile, but if you destroy the tile image, you must\nnot use the IMG_COLOR_TILED color until you have set a new tile image!\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param tile The image resource to be used as a tile.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
imagestring imagestring(resource $image, int $font, int $x, int $y, string\n$string, int $color) [bool]\nDraw a string horizontally. Draws a `string` at the given coordinates.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@param x x-coordinate of the upper left corner.\n@param y y-coordinate of the upper left corner.\n@param string The string to be written.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imageloadfont() - Load a new font\n@see imagettftext() - Write text to the image using TrueType fonts\n
imagestringup imagestringup(resource $image, int $font, int $x, int $y,\nstring $string, int $color) [bool]\nDraw a string vertically. Draws a `string` vertically at the given coordinates.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param  font Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding\n(where higher numbers corresponding to larger fonts) or any of your own font\nidentifiers registered with imageloadfont().\n@param x x-coordinate of the bottom left corner.\n@param y y-coordinate of the bottom left corner.\n@param string The string to be written.\n@param color A color identifier created with imagecolorallocate().\n@return (PHP 4, PHP 5)\n@see imageloadfont() - Load a new font\n
imagesx imagesx(resource $image) [int]\nGet image width. Returns the width of the given `image` resource.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@return (PHP 4, PHP 5)\n@see imagecreatetruecolor() - Create a new true color image\n@see getimagesize() - Get the size of an image\n@see imagesy() - Get image height\n
imagesy imagesy(resource $image) [int]\nGet image height. Returns the height of the given `image` resource.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@return (PHP 4, PHP 5)\n@see imagecreatetruecolor() - Create a new true color image\n@see getimagesize() - Get the size of an image\n@see imagesx() - Get image width\n
imagetruecolortopalette imagetruecolortopalette(resource $image, bool $dither,\nint $ncolors) [bool]\nConvert a true color image to a palette image. imagetruecolortopalette()\nconverts a truecolor image to a palette image. The code for this function\nwas originally drawn from the Independent JPEG Group library code, which\nis excellent. The code has been modified to preserve as much alpha channel\ninformation as possible in the resulting palette, in addition to preserving\ncolors as well as possible. This does not work as well as might be hoped. It\nis usually best to simply produce a truecolor output image instead, which\nguarantees the highest output quality.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param dither Indicates if the image should be dithered - if it is TRUE then\ndithering will be used which will result in a more speckled image but with\nbetter color approximation.\n@param ncolors Sets the maximum number of colors that should be retained in\nthe palette.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@note Note: This function requires GD 2.0.1 or later (2.0.28 or later is\nrecommended).\n
imagettfbbox imagettfbbox(float $size, float $angle, string $fontfile,\nstring $text) [array]\nGive the bounding box of a text using TrueType fonts. This function calculates\nand returns the bounding box in pixels for a TrueType text.\n@param size If you created the image from a file, only colors used in the\nimage are resolved. Colors present only in the palette are not resolved.\n@param angle Angle in degrees in which `text` will be measured.\n@param fontfile The name of the TrueType font file (can be a URL). Depending\non which version of the GD library that PHP is using, it may attempt to\nsearch for files that do not begin with a leading &#039;/&#039; by appending\n&#039;.ttf&#039; to the filename and searching along a library-defined\nfont path.\n@param text The string to be measured.\n@return (PHP 4, PHP 5)\n@note Note: This function requires both the GD library and the &raquo;\nFreeType library.\n@see imagettftext() - Write text to the image using TrueType fonts\n
imagettftext imagettftext(resource $image, float $size, float $angle, int $x,\nint $y, int $color, string $fontfile, string $text) [array]\nWrite text to the image using TrueType fonts. Writes the given `text` into\nthe image using TrueType fonts.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param size The font size. Depending on your version of GD, this should be\nspecified as the pixel size (GD1) or point size (GD2).\n@param angle The angle in degrees, with 0 degrees being left-to-right reading\ntext. Higher values represent a counter-clockwise rotation. For example,\na value of 90 would result in bottom-to-top reading text.\n@param x The coordinates given by `x` and `y` will define the basepoint of\nthe first character (roughly the lower-left corner of the character). This\nis different from the imagestring(), where `x` and `y` define the upper-left\ncorner of the first character. For example, &quot;top left&quot; is 0, 0.\n@param y The y-ordinate. This sets the position of the fonts baseline,\nnot the very bottom of the character.\n@param color The color index. Using the negative of a color index has the\neffect of turning off antialiasing. See imagecolorallocate().\n@return (PHP 4, PHP 5)\n@note Note: This function requires both the GD library and the &raquo;\nFreeType library.\n@see imagettfbbox() - Give the bounding box of a text using TrueType fonts\n
imagetypes imagetypes(void) [int]\nReturn the image types supported by this PHP build. Returns the image types\nsupported by the current PHP installation.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
imagewbmp imagewbmp(resource $image [, string $filename [, int $foreground]])\n[bool]\nOutput image to browser or file. imagewbmp() outputs or save a WBMP version\nof the given `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly.\n@param foreground You can set the foreground color with this parameter\nby setting an identifier obtained from imagecolorallocate(). The default\nforeground color is black.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: WBMP support is only available if PHP was compiled against GD-1.8\nor later.\n@see image2wbmp() - Output image to browser or file\n@see imagepng() - Output a PNG image to either the browser or a file\n@see imagegif() - Output image to browser or file\n@see imagejpeg() - Output image to browser or file\n@see imagetypes() - Return the image types supported by this PHP build\n
imagexbm imagexbm(resource $image, string $filename [, int $foreground]) [bool]\nOutput XBM image to browser or file. Outputs or save an XBM version of the\ngiven `image`.\n@param  image An image resource, returned by one of the image creation\nfunctions, such as imagecreatetruecolor().\n@param filename The path to save the file to. If not set or NULL, the raw\nimage stream will be outputted directly.\n@param foreground You can set the foreground color with this parameter\nby setting an identifier obtained from imagecolorallocate(). The default\nforeground color is black.\n@return (PHP 5)\n@note Note: This function is only available if PHP is compiled with the\nbundled version of the GD library.\n
adaptiveBlurImage Imagick::adaptiveBlurImage(float $radius, float $sigma [,\nint $channel=Imagick::CHANNEL_DEFAULT]) [bool]\nAdds adaptive blur filter to image. Adds an adaptive blur filter to image. The\nintensity of an adaptive blur depends is dramatically decreased at edge of\nthe image, whereas a standard blur is uniform across the image. This method\nis available if Imagick has been compiled against ImageMagick version 6.2.9\nor newer.\n@param radius The radius of the Gaussian, in pixels, not counting the center\npixel. Provide a value of 0 and the radius will be chosen automagically.\n@param sigma The standard deviation of the Gaussian, in pixels.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.0.0)\n@see Imagick::blurImage() - Adds blur filter to image\n@see Imagick::motionBlurImage() - Simulates motion blur\n@see Imagick::radialBlurImage() - Radial blurs an image\n
adaptiveResizeImage Imagick::adaptiveResizeImage(int $columns, int $rows [,\nbool $bestfit=false]) [bool]\nAdaptively resize image with data dependent triangulation. Adaptively resize\nimage with data-dependent triangulation. Avoids blurring across sharp color\nchanges. Most useful when used to shrink images slightly to a slightly\nsmaller &quot;web size&quot;; may not look good when a full-sized image\nis adaptively resized to a thumbnail. This method is available if Imagick\nhas been compiled against ImageMagick version 6.2.9 or newer. Note: The\nbehavior of the parameter `bestfit` changed in Imagick 3.0.0. Before this\nversion given dimensions 400x400 an image of dimensions 200x150 would be\nleft untouched. In Imagick 3.0.0 and later the image would be scaled up to\nsize 400x300 as this is the &quot;best fit&quot; for the given dimensions. If\n`bestfit` parameter is used both width and height must be given.\n@param columns The number of columns in the scaled image.\n@param rows The number of rows in the scaled image.\n@param bestfit Whether to fit the image inside a bounding box.\n@return (PECL imagick 2.0.0)\n@see Imagick::chopImage() - Removes a region of an image and trims\n@see Imagick::cropImage() - Extracts a region of the image\n@see Imagick::magnifyImage() - Scales an image proportionally 2x\n@see Imagick::minifyImage() - Scales an image proportionally to half its size\n@see Imagick::resizeImage() - Scales an image\n@see Imagick::scaleImage() - Scales the size of an image\n@see Imagick::shaveImage() - Shaves pixels from the image edges\n@see Imagick::thumbnailImage() - Changes the size of an image\n@see Imagick::trimImage() - Remove edges from the image\n
adaptiveSharpenImage Imagick::adaptiveSharpenImage(float $radius, float $sigma\n[, int $channel=Imagick::CHANNEL_DEFAULT]) [bool]\nAdaptively sharpen the image. Adaptively sharpen the image by sharpening more\nintensely near image edges and less intensely far from edges. This method\nis available if Imagick has been compiled against ImageMagick version 6.2.9\nor newer.\n@param radius The radius of the Gaussian, in pixels, not counting the center\npixel. Use 0 for auto-select.\n@param sigma The standard deviation of the Gaussian, in pixels.\n@param channel Provide any channel constant that is valid for your channel\nmode. To apply to more than one channel, combine channel constants using\nbitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list\nof channel constants\n@return (PECL imagick 2.0.0)\n@see Imagick::sharpenImage() - Sharpens an image\n
ibase_drop_db ibase_drop_db([resource $connection=NULL]) [bool]\nDrops a database. This functions drops a database that was opened by either\nibase_connect() or ibase_pconnect(). The database is closed and deleted from\nthe server.\n@param connection An InterBase link identifier. If omitted, the last opened\nlink is assumed.\n@return (PHP 5)\n@see ibase_connect() - Open a connection to an InterBase database\n@see ibase_pconnect() - Open a persistent connection to an InterBase database\n
ibase_errcode ibase_errcode(void) [int]\nReturn an error code. Returns the error code that resulted from the most\nrecent InterBase function call.\n@return (PHP 5)\n@see ibase_errmsg() - Return error messages\n
ibase_errmsg ibase_errmsg(void) [string]\nReturn error messages.\n@return (PHP 4, PHP 5)\n@see ibase_errcode() - Return an error code\n
ibase_execute ibase_execute(resource $query [, mixed $bind_arg [, mixed\n$...]]) [resource]\nExecute a previously prepared query. Execute a query prepared by\nibase_prepare(). This is a lot more effective than using ibase_query()\nif you are repeating a same kind of query several times with only some\nparameters changing.\n@param query An InterBase query prepared by ibase_prepare().\n@param bind_arg\n@param ...\n@return (PHP 4, PHP 5)\n@see ibase_query() - Execute a query on an InterBase database\n
ibase_fetch_assoc ibase_fetch_assoc(resource $result [, int $fetch_flag=0])\n[array]\nFetch a result row from a query as an associative array. Fetch a result\nrow from a query as an associative array. ibase_fetch_assoc() fetches one\nrow of data from the `result`. If two or more columns of the result have\nthe same field names, the last column will take precedence. To access the\nother column(s) of the same name, you either need to access the result with\nnumeric indices by using ibase_fetch_row() or use alias names in your query.\n@param result The result handle.\n@param fetch_flag `fetch_flag` is a combination of the constants IBASE_TEXT\nand IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function\nto return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will\ncause this function to return date/time values as Unix timestamps instead\nof as formatted strings.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ibase_fetch_row() - Fetch a row from an InterBase database\n@see ibase_fetch_object() - Get an object from a InterBase database\n
ibase_fetch_object ibase_fetch_object(resource $result_id [, int\n$fetch_flag=0]) [object]\nGet an object from a InterBase database. Fetches a row as a pseudo-object\nfrom a given result identifier. Subsequent calls to ibase_fetch_object()\nreturn the next row in the result set.\n@param result_id An InterBase result identifier obtained either by\nibase_query() or ibase_execute().\n@param fetch_flag `fetch_flag` is a combination of the constants IBASE_TEXT\nand IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function\nto return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will\ncause this function to return date/time values as Unix timestamps instead\nof as formatted strings.\n@return (PHP 4, PHP 5)\n@see ibase_fetch_row() - Fetch a row from an InterBase database\n@see ibase_fetch_assoc() - Fetch a result row from a query as an associative\narray\n
ibase_fetch_row ibase_fetch_row(resource $result_identifier [, int\n$fetch_flag=0]) [array]\nFetch a row from an InterBase database. ibase_fetch_row() fetches one row\nof data from the given result set. Subsequent calls to ibase_fetch_row()\nreturn the next row in the result set, or FALSE if there are no more rows.\n@param result_identifier An InterBase result identifier.\n@param fetch_flag `fetch_flag` is a combination of the constants IBASE_TEXT\nand IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function\nto return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will\ncause this function to return date/time values as Unix timestamps instead\nof as formatted strings.\n@return (PHP 4, PHP 5)\n@see ibase_fetch_assoc() - Fetch a result row from a query as an associative\narray\n@see ibase_fetch_object() - Get an object from a InterBase database\n
ibase_field_info ibase_field_info(resource $result, int $field_number) [array]\nGet information about a field. Returns an array with information about a\nfield after a select query has been run.\n@param result An InterBase result identifier.\n@param field_number Field offset.\n@return (PHP 4, PHP 5)\n@see ibase_num_fields() - Get the number of fields in a result set\n
ibase_free_event_handler ibase_free_event_handler(resource $event) [bool]\nCancels a registered event handler. This function causes the registered\nevent handler specified by `event` to be cancelled. The callback function\nwill no longer be called for the events it was registered to handle.\n@param event An event resource, created by ibase_set_event_handler().\n@return (PHP 5)\n@see ibase_set_event_handler() - Register a callback function to be called\nwhen events are posted\n
ibase_free_query ibase_free_query(resource $query) [bool]\nFree memory allocated by a prepared query. Frees a prepared query.\n@param query A query prepared with ibase_prepare().\n@return (PHP 4, PHP 5)\n
ibase_free_result ibase_free_result(resource $result_identifier) [bool]\nFree a result set. Frees a result set.\n@param result_identifier A result set created by ibase_query() or\nibase_execute().\n@return (PHP 4, PHP 5)\n
ibase_gen_id ibase_gen_id(string $generator [, int $increment=1 [, resource\n$link_identifier=NULL]]) [mixed]\nIncrements the named generator and returns its new value.\n@return (PHP 5)\n
ibase_maintain_db ibase_maintain_db(resource $service_handle, string $db,\nint $action [, int $argument=0]) [bool]\nExecute a maintenance command on the database server.\n@return (PHP 5)\n
ibase_modify_user ibase_modify_user(resource $service_handle, string\n$user_name, string $password [, string $first_name [, string $middle_name\n[, string $last_name]]]) [bool]\nModify a user to a security database (only for IB6 or later).\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ibase_add_user() - Add a user to a security database (only for IB6\nor later)\n@see ibase_delete_user() - Delete a user from a security database (only for\nIB6 or later)\n
ibase_name_result ibase_name_result(resource $result, string $name) [bool]\nAssigns a name to a result set. This function assigns a name to a result\nset. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF\n`name` statements.\n@param result An InterBase result set.\n@param name The name to be assigned.\n@return (PHP 5)\n@see ibase_prepare() - Prepare a query for later binding of parameter\nplaceholders and execution\n@see ibase_execute() - Execute a previously prepared query\n
ibase_num_fields ibase_num_fields(resource $result_id) [int]\nGet the number of fields in a result set. Get the number of fields in a\nresult set.\n@param result_id An InterBase result identifier.\n@return (PHP 4, PHP 5)\n@see ibase_field_info() - Get information about a field\n
ibase_num_params ibase_num_params(resource $query) [int]\nReturn the number of parameters in a prepared query. This function returns the\nnumber of parameters in the prepared query specified by `query`. This is the\nnumber of binding arguments that must be present when calling ibase_execute().\n@param query The prepared query handle.\n@return (PHP 5)\n@see ibase_prepare() - Prepare a query for later binding of parameter\nplaceholders and execution\n@see ibase_param_info() - Return information about a parameter in a prepared\nquery\n
ibase_param_info ibase_param_info(resource $query, int $param_number) [array]\nReturn information about a parameter in a prepared query. Returns an array\nwith information about a parameter after a query has been prepared.\n@param query An InterBase prepared query handle.\n@param param_number Parameter offset.\n@return (PHP 5)\n@see ibase_field_info() - Get information about a field\n@see ibase_num_params() - Return the number of parameters in a prepared query\n
ibase_pconnect ibase_pconnect([string $database [, string $username [, string\n$password [, string $charset [, int $buffers [, int $dialect [, string $role\n[, int $sync]]]]]]]]) [resource]\nOpen a persistent connection to an InterBase database. Opens a persistent\nconnection to an InterBase database. ibase_pconnect() acts very much like\nibase_connect() with two major differences. First, when connecting, the\nfunction will first try to find a (persistent) link that&#039;s already\nopened with the same parameters. If one is found, an identifier for it will\nbe returned instead of opening a new connection. Second, the connection to\nthe InterBase server will not be closed when the execution of the script\nends. Instead, the link will remain open for future use (ibase_close()\nwill not close links established by ibase_pconnect()). This type of link is\ntherefore called &#039;persistent&#039;.\n@param database The `database` argument has to be a valid path to database file\non the server it resides on. If the server is not local, it must be prefixed\nwith either &#039;hostname:&#039; (TCP/IP), &#039;//hostname/&#039; (NetBEUI)\nor &#039;hostname@&#039; (IPX/SPX), depending on the connection protocol used.\n@param username The user name. Can be set with the `ibase.default_user`\nphp.ini directive.\n@param password The password for `username`. Can be set with the\n`ibase.default_password` php.ini directive.\n@param charset `charset` is the default character set for a database.\n@param buffers `buffers` is the number of database buffers to allocate for\nthe server-side cache. If 0 or omitted, server chooses its own default.\n@param dialect `dialect` selects the default SQL dialect for any statement\nexecuted within a connection, and it defaults to the highest one supported\nby client libraries. Functional only with InterBase 6 and up.\n@param role Functional only with InterBase 5 and up.\n@param sync\n@return (PHP 4, PHP 5)\n@see ibase_close() - Close a connection to an InterBase database\n@see ibase_connect() - Open a connection to an InterBase database\n
ibase_prepare ibase_prepare(string $query) [resource]\nPrepare a query for later binding of parameter placeholders and execution.\n@param query An InterBase query.\n@return (PHP 4, PHP 5)\n
ibase_query ibase_query([resource $link_identifier], string $query [, int\n$bind_args]) [resource]\nExecute a query on an InterBase database.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@param query An InterBase query.\n@param bind_args\n@return (PHP 4, PHP 5)\n@see ibase_errmsg() - Return error messages\n@see ibase_fetch_row() - Fetch a row from an InterBase database\n@see ibase_fetch_object() - Get an object from a InterBase database\n@see ibase_free_result() - Free a result set\n
ibase_restore ibase_restore(resource $service_handle, string $source_file,\nstring $dest_db [, int $options=0 [, bool $verbose=false]]) [mixed]\nInitiates a restore task in the service manager and returns immediately.\n
ibase_rollback_ret ibase_rollback_ret([resource\n$link_or_trans_identifier=NULL]) [bool]\nRoll back a transaction without closing it. Rolls back a transaction without\nclosing it.\n@param link_or_trans_identifier If called without an argument, this function\nrolls back the default transaction of the default link. If the argument\nis a connection identifier, the default transaction of the corresponding\nconnection will be rolled back. If the argument is a transaction identifier,\nthe corresponding transaction will be rolled back. The transaction context\nwill be retained, so statements executed from within this transaction will\nnot be invalidated.\n@return (PHP 5)\n
ibase_rollback ibase_rollback([resource $link_or_trans_identifier=NULL]) [bool]\nRoll back a transaction. Rolls back a transaction.\n@param link_or_trans_identifier If called without an argument, this function\nrolls back the default transaction of the default link. If the argument\nis a connection identifier, the default transaction of the corresponding\nconnection will be rolled back. If the argument is a transaction identifier,\nthe corresponding transaction will be rolled back.\n@return (PHP 4, PHP 5)\n
ibase_server_info ibase_server_info(resource $service_handle, int $action)\n[string]\nRequest information about a database server.\n
ibase_service_attach ibase_service_attach(string $host, string $dba_username,\nstring $dba_password) [resource]\nConnect to the service manager.\n
ibase_service_detach ibase_service_detach(resource $service_handle) [bool]\nDisconnect from the service manager.\n@return (PHP 5)\n
ibase_set_event_handler ibase_set_event_handler(callback $event_handler,\nstring $event_name1 [, string $event_name2 [, string $...]]) [resource]\nRegister a callback function to be called when events are posted. This function\nregisters a PHP user function as event handler for the specified events.\n@param event_handler The callback is called with the event name and the\nlink resource as arguments whenever one of the specified events is posted\nby the database. The callback must return FALSE if the event handler should\nbe canceled. Any other return value is ignored. This function accepts up to\n15 event arguments.\n@param event_name1 An event name.\n@param event_name2 At most 15 events allowed.\n@return (PHP 5)\n@see ibase_free_event_handler() - Cancels a registered event handler\n@see ibase_wait_event() - Wait for an event to be posted by the database\n
ibase_timefmt ibase_timefmt(string $format [, int $columntype]) [bool]\nSets the format of timestamp, date and time type columns returned\nfrom queries. Sets the format of timestamp, date or time type columns\nreturned from queries. You can set defaults for these formats with the\nPHP configuration directives `ibase.timestampformat`, `ibase.dateformat`\nand `ibase.timeformat`. Note: This function has been removed from PHP 5,\nuse ini_set() instead.\n@param format Internally, the columns are formatted by c-function strftime(),\nso refer to its documentation regarding to the format of the string.\n@param columntype `columntype` is one of the constants IBASE_TIMESTAMP,\nIBASE_DATE and IBASE_TIME. If omitted, defaults to IBASE_TIMESTAMP for\nbackwards compatibility.\n@return (PHP 4)\n
ibase_trans ibase_trans([int $trans_args [, resource $link_identifier]])\n[resource]\nBegin a transaction. Begins a transaction. Note: The behaviour of this\nfunction has been changed in PHP 5.0.0. The first call to ibase_trans() will\nnot return the default transaction of a connection. All transactions started\nby ibase_trans() will be rolled back at the end of the script if they were not\ncommitted or rolled back by either ibase_commit() or ibase_rollback(). Note:\nIn PHP 5.0.0. and up, this function will accept multiple `trans_args` and\n`link_identifier` arguments. This allows transactions over multiple database\nconnections, which are committed using a 2-phase commit algorithm. This\nmeans you can rely on the updates to either succeed in every database, or\nfail in every database. It does NOT mean you can use tables from different\ndatabases in the same query! If you use transactions over multiple databases,\nyou will have to specify both the `link_id` and `transaction_id` in calls\nto ibase_query() and ibase_prepare().\n@param trans_args `trans_args` can be a combination of IBASE_READ, IBASE_WRITE,\nIBASE_COMMITTED, IBASE_CONSISTENCY, IBASE_CONCURRENCY, IBASE_REC_VERSION,\nIBASE_REC_NO_VERSION, IBASE_WAIT and IBASE_NOWAIT.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@return (PHP 4, PHP 5)\n
ibase_wait_event ibase_wait_event(string $event_name1 [, string $event_name2\n[, string $...]]) [string]\nWait for an event to be posted by the database. This function suspends\nexecution of the script until one of the specified events is posted by the\ndatabase. The name of the event that was posted is returned. This function\naccepts up to 15 event arguments.\n@param event_name1 The event name.\n@param event_name2\n@param ...\n@return (PHP 5)\n@see ibase_set_event_handler() - Register a callback function to be called\nwhen events are posted\n@see ibase_free_event_handler() - Cancels a registered event handler\n
iconv_get_encoding iconv_get_encoding([string $type=&quot;all&quot;]) [mixed]\nRetrieve internal configuration variables of iconv extension. Retrieve\ninternal configuration variables of iconv extension.\n@param type The value of the optional `type` can be: all input_encoding\noutput_encoding internal_encoding\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see iconv_set_encoding() - Set current setting for character encoding\nconversion\n@see ob_iconv_handler() - Convert character encoding as output buffer handler\n
iconv_mime_decode_headers iconv_mime_decode_headers(string $encoded_headers [,\nint $mode=0 [, string $charset=ini_get(&quot;iconv.internal_encoding&quot;)]])\n[array]\nDecodes multiple MIME header fields at once. Decodes multiple `MIME` header\nfields at once.\n@param encoded_headers The encoded headers, as a string.\n@param mode `mode` determines the behaviour in the event\niconv_mime_decode_headers() encounters a malformed `MIME` header\nfield. You can specify any combination of the following bitmasks. Bitmasks\nacceptable to iconv_mime_decode_headers() Value Constant Description\n1 ICONV_MIME_DECODE_STRICT If set, the given header is decoded in full\nconformance with the standards defined in &raquo; RFC2047. This option\nis disabled by default because there are a lot of broken mail user\nagents that don&#039;t follow the specification and don&#039;t produce\ncorrect `MIME` headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set,\niconv_mime_decode_headers() attempts to ignore any grammatical errors and\ncontinue to process a given header.\n@param charset The optional `charset` parameter specifies the character set\nto represent the result by. If omitted, iconv.internal_encoding will be used.\n@return (PHP 5)\n@see iconv_mime_decode() - Decodes a MIME header field\n@see mb_decode_mimeheader() - Decode string in MIME header field\n@see imap_mime_header_decode() - Decode MIME header elements\n@see imap_base64() - Decode BASE64 encoded text\n@see imap_qprint() - Convert a quoted-printable string to an 8 bit string\n
iconv_mime_decode iconv_mime_decode(string $encoded_header [, int $mode=0\n[, string $charset=ini_get(&quot;iconv.internal_encoding&quot;)]]) [string]\nDecodes a MIME header field. Decodes a `MIME` header field.\n@param encoded_header The encoded header, as a string.\n@param mode `mode` determines the behaviour in the event iconv_mime_decode()\nencounters a malformed `MIME` header field. You can specify any combination\nof the following bitmasks. Bitmasks acceptable to iconv_mime_decode()\nValue Constant Description 1 ICONV_MIME_DECODE_STRICT If set, the given\nheader is decoded in full conformance with the standards defined in &raquo;\nRFC2047. This option is disabled by default because there are a lot of broken\nmail user agents that don&#039;t follow the specification and don&#039;t\nproduce correct `MIME` headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set,\niconv_mime_decode_headers() attempts to ignore any grammatical errors and\ncontinue to process a given header.\n@param charset The optional `charset` parameter specifies the character set\nto represent the result by. If omitted, iconv.internal_encoding will be used.\n@return (PHP 5)\n@see iconv_mime_decode_headers() - Decodes multiple MIME header fields at once\n@see mb_decode_mimeheader() - Decode string in MIME header field\n@see imap_mime_header_decode() - Decode MIME header elements\n@see imap_base64() - Decode BASE64 encoded text\n@see imap_qprint() - Convert a quoted-printable string to an 8 bit string\n
iconv_mime_encode iconv_mime_encode(string $field_name, string $field_value\n[, array $preferences=NULL]) [string]\nComposes a MIME header field.\n@param field_name The field name.\n@param field_value The field value.\n@param preferences You can control the behaviour of iconv_mime_encode()\nby specifying an associative array that contains configuration items\nto the optional third parameter `preferences`. The items supported by\niconv_mime_encode() are listed below. Note that item names are treated\ncase-sensitive. Configuration items supported by iconv_mime_encode() Item\nType Description Default value Example scheme string Specifies the method to\nencode a field value by. The value of this item may be either &quot;B&quot;\nor &quot;Q&quot;, where &quot;B&quot; stands for `base64` encoding scheme\nand &quot;Q&quot; stands for `quoted-printable` encoding scheme. B B\ninput-charset string Specifies the character set in which the first parameter\n`field_name` and the second parameter `field_value` are presented. If not\ngiven, iconv_mime_encode() assumes those parameters are presented to it in\nthe iconv.internal_encoding ini setting. iconv.internal_encoding ISO-8859-1\noutput-charset string Specifies the character set to use to compose the `MIME`\nheader. iconv.internal_encoding UTF-8 line-length integer Specifies the maximum\nlength of the header lines. The resulting header is &quot;folded&quot; to\na set of multiple lines in case the resulting header field would be longer\nthan the value of this parameter, according to &raquo; RFC2822 - Internet\nMessage Format. If not given, the length will be limited to 76 characters. 76\n996 line-break-chars string Specifies the sequence of characters to append\nto each line as an end-of-line sign when &quot;folding&quot; is performed\non a long header field. If not given, this defaults to &quot;\r\n&quot;\n(`CR` `LF`). Note that this parameter is always treated as an ASCII string\nregardless of the value of `input-charset`. \r\n \n\n@return (PHP 5)\n@see imap_binary() - Convert an 8bit string to a base64 string\n@see mb_encode_mimeheader() - Encode string for MIME header\n@see imap_8bit() - Convert an 8bit string to a quoted-printable string\n@see quoted_printable_encode() - Convert a 8 bit string to a quoted-printable\nstring\n
iconv_set_encoding iconv_set_encoding(string $type, string $charset) [bool]\nSet current setting for character encoding conversion. Changes the value of\nthe internal configuration variable specified by `type` to `charset`.\n@param type The value of `type` can be any one of those: input_encoding\noutput_encoding internal_encoding\n@param charset The character set.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see iconv_get_encoding() - Retrieve internal configuration variables of\niconv extension\n@see ob_iconv_handler() - Convert character encoding as output buffer handler\n
iconv_strlen iconv_strlen(string $str [, string\n$charset=ini_get(&quot;iconv.internal_encoding&quot;)]) [int]\nReturns the character count of string. In contrast to strlen(), iconv_strlen()\ncounts the occurrences of characters in the given byte sequence `str` on the\nbasis of the specified character set, the result of which is not necessarily\nidentical to the length of the string in byte.\n@param str The string.\n@param charset If `charset` parameter is omitted, `str` is assumed to be\nencoded in iconv.internal_encoding.\n@return (PHP 5)\n@see strlen() - Get string length\n@see mb_strlen() - Get string length\n
iconv_strpos iconv_strpos(string $haystack, string $needle [, int $offset=0\n[, string $charset=ini_get(&quot;iconv.internal_encoding&quot;)]]) [int]\nFinds position of first occurrence of a needle within a haystack. Finds\nposition of first occurrence of a needle within a haystack. In contrast to\nstrpos(), the return value of iconv_strpos() is the number of characters that\nappear before the needle, rather than the offset in bytes to the position\nwhere the needle has been found. The characters are counted on the basis of\nthe specified character set `charset`.\n@param haystack The entire string.\n@param needle The searched substring.\n@param offset The optional `offset` parameter specifies the position from\nwhich the search should be performed.\n@param charset If `charset` parameter is omitted, `string` are assumed to\nbe encoded in iconv.internal_encoding.\n@return (PHP 5)\n@see strpos() - Find position of first occurrence of a string\n@see iconv_strrpos() - Finds the last occurrence of a needle within a haystack\n@see mb_strpos() - Find position of first occurrence of string in a string\n
iconv_strrpos iconv_strrpos(string $haystack, string $needle [, string\n$charset=ini_get(&quot;iconv.internal_encoding&quot;)]) [int]\nFinds the last occurrence of a needle within a haystack. In contrast to\nstrpos(), the return value of iconv_strrpos() is the number of characters\nthat appear before the needle, rather than the offset in bytes to the position\nwhere the needle has been found.\n@param haystack The entire string.\n@param needle The searched substring.\n@param charset If `charset` parameter is omitted, `string` are assumed to\nbe encoded in iconv.internal_encoding.\n@return (PHP 5)\n@see strrpos() - Find the position of the last occurrence of a substring in\na string\n@see iconv_strpos() - Finds position of first occurrence of a needle within\na haystack\n@see mb_strrpos() - Find position of last occurrence of a string in a string\n
iconv_substr iconv_substr(string $str, int $offset\n[, int $length=iconv_strlen($str, $charset) [, string\n$charset=ini_get(&quot;iconv.internal_encoding&quot;)]]) [string]\nCut out part of a string. Cuts a portion of `str` specified by the `offset`\nand `length` parameters.\n@param str The original string.\n@param offset If `offset` is non-negative, iconv_substr() cuts the portion\nout of `str` beginning at `offset`&#039;th character, counting from zero. If\n`offset` is negative, iconv_substr() cuts out the portion beginning at the\nposition, `offset` characters away from the end of `str`.\n@param length If `length` is given and is positive, the return value will\ncontain at most `length` characters of the portion that begins at `offset`\n(depending on the length of `string`). If negative `length` is passed,\niconv_substr() cuts the portion out of `str` from the `offset`&#039;th\ncharacter up to the character that is `length` characters away from the\nend of the string. In case `offset` is also negative, the start position is\ncalculated beforehand according to the rule explained above.\n@param charset If `charset` parameter is omitted, `string` are assumed to be\nencoded in iconv.internal_encoding. Note that `offset` and `length` parameters\nare always deemed to represent offsets that are calculated on the basis of\nthe character set determined by `charset`, whilst the counterpart substr()\nalways takes these for byte offsets.\n@return (PHP 5)\n@see substr() - Return part of a string\n@see mb_substr() - Get part of string\n@see mb_strcut() - Get part of string\n
iconv iconv(string $in_charset, string $out_charset, string $str) [string]\nConvert string to requested character encoding. Performs a character set\nconversion on the string `str` from `in_charset` to `out_charset`.\n@param in_charset The input charset.\n@param out_charset The output charset. If you append the string `//TRANSLIT` to\n`out_charset` transliteration is activated. This means that when a character\ncan&#039;t be represented in the target charset, it can be approximated\nthrough one or several similarly looking characters. If you append the string\n`//IGNORE`, characters that cannot be represented in the target charset are\nsilently discarded. Otherwise, `str` is cut from the first illegal character\nand an E_NOTICE is generated.\n@param str The string to be converted.\n@return (PHP 4 >= 4.0.5, PHP 5)\n
id3_get_frame_long_name id3_get_frame_long_name(string $frameId) [string]\nGet the long name of an ID3v2 frame. id3_get_frame_long_name() returns the\nlong name for an ID3v2 frame.\n@param frameId An ID3v2 frame\n@return (PECL id3 >= 0.2)\n@see id3_get_frame_short_name() - Get the short name of an ID3v2 frame\n
id3_get_frame_short_name id3_get_frame_short_name(string $frameId) [string]\nGet the short name of an ID3v2 frame. id3_get_frame_short_name() returns\nthe short name for an ID3v2 frame.\n@param frameId An ID3v2 frame\n@return (PECL id3 >= 0.2)\n@see id3_get_frame_long_name() - Get the long name of an ID3v2 frame\n
id3_get_genre_id id3_get_genre_id(string $genre) [int]\nGet the id for a genre. id3_get_genre_id() returns the id for a genre.\n@param genre An integer ranging from 0 to 147\n@return (PECL id3 >= 0.1)\n@see id3_get_genre_name() - Get the name for a genre id\n@see id3_get_genre_list() - Get all possible genre values\n
id3_get_genre_list id3_get_genre_list(void) [array]\nGet all possible genre values. id3_get_genre_list() returns an array\ncontaining all possible genres that may be stored in an ID3 tag. This list\nhas been created by Eric Kemp and later extended by WinAmp. This function\nis useful to provide you users a list of genres from which they may choose\none. When updating the ID3 tag you will always have to specify the genre as\nan integer ranging from 0 to 147.\n@return (PECL id3 >= 0.1)\n@see id3_get_genre_name() - Get the name for a genre id\n@see id3_get_genre_id() - Get the id for a genre\n
id3_get_genre_name id3_get_genre_name(int $genre_id) [string]\nGet the name for a genre id. id3_get_genre_name() returns the name for a\ngenre id.\n@param genre_id An integer ranging from 0 to 147\n@return (PECL id3 >= 0.1)\n@see id3_get_genre_list() - Get all possible genre values\n@see id3_get_genre_id() - Get the id for a genre\n
id3_get_tag id3_get_tag(string $filename [, int $version=ID3_BEST]) [array]\nGet all information stored in an ID3 tag. id3_get_tag() is used to get all\ninformation stored in the id3 tag of the specified file.\n@param filename The path to the MP3 file Instead of a filename you may also\npass a valid stream resource\n@param version Allows you to specify the version of the tag as MP3 files may\ncontain both, version 1.x and version 2.x tags Since version 0.2 id3_get_tag()\nalso supports ID3 tags of version 2.2, 2.3 and 2.4. To extract information\nfrom these tags, pass one of the constants ID3_V2_2, ID3_V2_3 or ID3_V2_4\nas the second parameter. ID3 v2.x tags can contain a lot more information\nabout the MP3 file than ID3 v1.x tags.\n@return (PECL id3 >= 0.1)\n@see id3_set_tag() - Update information stored in an ID3 tag\n@see id3_remove_tag() - Remove an existing ID3 tag\n@see id3_get_version() - Get version of an ID3 tag\n
id3_get_version id3_get_version(string $filename) [int]\nGet version of an ID3 tag. id3_get_version() retrieves the version(s)\nof the ID3 tag(s) in the MP3 file. If a file contains an ID3 v1.1 tag,\nit always contains a 1.0 tag, as version 1.1 is just an extension of 1.0.\n@param filename The path to the MP3 file Instead of a filename you may also\npass a valid stream resource\n@return (PECL id3 >= 0.1)\n@see id3_set_tag() - Update information stored in an ID3 tag\n@see id3_get_tag() - Get all information stored in an ID3 tag\n@see id3_remove_tag() - Remove an existing ID3 tag\n
id3_remove_tag id3_remove_tag(string $filename [, int $version=ID3_V1_0])\n[bool]\nRemove an existing ID3 tag. id3_remove_tag() is used to remove the information\nstored of an ID3 tag.\n@param filename The path to the MP3 file Instead of a filename you may also\npass a valid stream resource\n@param version Allows you to specify the version of the tag as MP3 files\nmay contain both, version 1.x and version 2.x tags.\n@return (PECL id3 >= 0.1)\n@note Note: Currently id3_remove_tag() only supports version 1.0 and 1.1. If\nyou choose to remove a 1.0 tag and the file contains a 1.1 tag, this tag\nwill be removed, as v1.1 is only an extension of 1.0.\n@see id3_set_tag() - Update information stored in an ID3 tag\n@see id3_get_tag() - Get all information stored in an ID3 tag\n@see id3_get_version() - Get version of an ID3 tag\n
id3_set_tag id3_set_tag(string $filename, array $tag [, int $version=ID3_V1_0])\n[bool]\nUpdate information stored in an ID3 tag. id3_set_tag() is used to change\nthe information stored of an ID3 tag. If no tag has been present, it will\nbe added to the file.\n@param filename The path to the MP3 file Instead of a filename you may also\npass a valid stream resource\n@param tag An associative array of tag keys and values The following keys may\nbe used in the associative array: Keys in the associative array key possible\nvalue available in version title string with maximum of 30 characters v1.0,\nv1.1 artist string with maximum of 30 characters v1.0, v1.1 album string\nwith maximum of 30 characters v1.0, v1.1 year 4 digits v1.0, v1.1 genre\ninteger value between 0 and 147 v1.0, v1.1 comment string with maximum of\n30 characters (28 in v1.1) v1.0, v1.1 track integer between 0 and 255 v1.1\n@param version Allows you to specify the version of the tag as MP3 files\nmay contain both, version 1.x and version 2.x tags\n@return (PECL id3 >= 0.1)\n@note Note: Currently id3_remove_tag() only supports version 1.0 and 1.1.\n@see id3_remove_tag() - Remove an existing ID3 tag\n@see id3_get_tag() - Get all information stored in an ID3 tag\n@see id3_get_version() - Get version of an ID3 tag\n
idate idate(string $format [, int $timestamp=time()]) [int]\nFormat a local time/date as integer. Returns a number formatted according to\nthe given format string using the given integer `timestamp` or the current\nlocal time if no timestamp is given. In other words, `timestamp` is optional\nand defaults to the value of time(). Unlike the function date(), idate()\naccepts just one char in the `format` parameter.\n@param format The following characters are recognized in the `format`\nparameter string `format` character Description `B` Swatch Beat/Internet Time\n`d` Day of the month `h` Hour (12 hour format) `H` Hour (24 hour format)\n`i` Minutes `I` (uppercase i) returns `1` if DST is activated, `0` otherwise\n`L` (uppercase l) returns `1` for leap year, `0` otherwise `m` Month number\n`s` Seconds `t` Days in current month `U` Seconds since the Unix Epoch -\nJanuary 1 1970 00:00:00 UTC - this is the same as time() `w` Day of the week\n(`0` on Sunday) `W` ISO-8601 week number of year, weeks starting on Monday\n`y` Year (1 or 2 digits - check note below) `Y` Year (4 digits) `z` Day of\nthe year `Z` Timezone offset in seconds\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@return (PHP 5)\n@see date() - Format a local time/date\n@see getdate() - Get date/time information\n@see time() - Return current Unix timestamp\n
idn_to_ascii idn_to_ascii(string $domain [, int $options]) [string]\nConvert domain name to IDNA ASCII form.. This function converts Unicode\ndomain name to IDNA ASCII-compatible format.\n@param domain Domain to convert. In PHP 5 must be UTF-8 encoded.\n@param options Conversion options - combination of IDNA_* constants.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.2, PECL idn >= 0.1)\n@see idn_to_unicode() - Alias of idn_to_utf8\n
idn_to_unicode idn_to_unicode\nAlias of idn_to_utf8.\n
idn_to_utf8 idn_to_utf8(string $domain [, int $options]) [string]\nConvert domain name from IDNA ASCII to Unicode.. This function converts\nUnicode domain name from IDNA ASCII-compatible format to plain Unicode.\n@param domain Domain to convert in IDNA ASCII-compatible format.\n@param options Conversion options - combination of IDNA_* constants.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.2, PECL idn >= 0.1)\n@see idn_to_unicode() - Alias of idn_to_utf8\n
ifx_affected_rows ifx_affected_rows(resource $result_id) [int]\nGet number of rows affected by a query. Returns the number of rows affected\nby a query associated with `result_id`. For inserts, updates and deletes the\nnumber is the real number (sqlerrd[2]) of affected rows. For selects it is\nan estimate (sqlerrd[0]). Don&#039;t rely on it. The database server can\nnever return the actual number of rows that will be returned by a SELECT\nbecause it has not even begun fetching them at this stage (just after the\n&quot;PREPARE&quot; when the optimizer has determined the query plan). Useful\nafter ifx_prepare() to limit queries to reasonable result sets.\n@param result_id A valid result id returned by ifx_query() or ifx_prepare().\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_num_rows() - Count the rows already fetched from a query\n
ifx_blobinfile_mode ifx_blobinfile_mode(int $mode) [bool]\nSet the default blob mode for all select queries. Set the default blob mode\nfor all select queries.\n@param mode Mode &quot;0&quot; means save Byte-Blobs in memory, and mode\n&quot;1&quot; means save Byte-Blobs in a file.\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_byteasvarchar ifx_byteasvarchar(int $mode) [bool]\nSet the default byte mode. Sets the default byte mode for all select-queries.\n@param mode Mode &quot;0&quot; will return a blob id, and mode &quot;1&quot;\nwill return a varchar with text content.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_textasvarchar() - Set the default text mode\n
ifx_close ifx_close([resource $link_identifier]) [bool]\nClose Informix connection. ifx_close() closes the link to an Informix\ndatabase that&#039;s associated with the specified link identifier. Note\nthat this isn&#039;t usually necessary, as non-persistent open links are\nautomatically closed at the end of the script&#039;s execution. ifx_close()\nwill not close persistent links generated by ifx_pconnect().\n@param link_identifier The link identifier. If not specified, the last opened\nlink is assumed.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_connect() - Open Informix server connection\n@see ifx_pconnect() - Open persistent Informix connection\n
ifx_connect ifx_connect([string $database [, string $userid [, string\n$password]]]) [resource]\nOpen Informix server connection. ifx_connect() establishes a connection\nto an Informix server. In case a second call is made to ifx_connect()\nwith the same arguments, no new link will be established, but instead,\nthe link identifier of the already opened link will be returned. The link\nto the server will be closed as soon as the execution of the script ends,\nunless it&#039;s closed earlier by explicitly calling ifx_close().\n@param database The database name, as a string.\n@param userid The username, as a string.\n@param password The password, as a string.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_pconnect() - Open persistent Informix connection\n@see ifx_close() - Close Informix connection\n
ifx_copy_blob ifx_copy_blob(int $bid) [int]\nDuplicates the given blob object. Duplicates the given blob object.\n@param bid A BLOB identifier.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_create_blob() - Creates an blob object\n@see ifx_free_blob() - Deletes the blob object\n
ifx_create_blob ifx_create_blob(int $type, int $mode, string $param) [int]\nCreates an blob object. Creates a blob object.\n@param type 1 = TEXT, 0 = BYTE\n@param mode 0 = blob-object holds the content in memory, 1 = blob-object\nholds the content in file.\n@param param if mode = 0: pointer to the content, if mode = 1: pointer to\nthe filestring.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_copy_blob() - Duplicates the given blob object\n@see ifx_free_blob() - Deletes the blob object\n
ifx_create_char ifx_create_char(string $param) [int]\nCreates an char object. Creates an char object.\n@param param The char content.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_free_char() - Deletes the char object\n
ifx_do ifx_do(resource $result_id) [bool]\nExecute a previously prepared SQL-statement. Executes a previously prepared\nquery or opens a cursor for it. Does NOT free `result_id` on error. Also\nsets the real number of ifx_affected_rows() for non-select statements for\nretrieval by ifx_affected_rows().\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_error ifx_error([resource $link_identifier]) [string]\nReturns error code of last Informix call. Returns in a string one character\ndescribing the general results of a statement and both SQLSTATE and SQLCODE\nassociated with the most recent SQL statement executed.\n@param link_identifier The link identifier.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_errormsg() - Returns error message of last Informix call\n
ifx_errormsg ifx_errormsg([int $errorcode]) [string]\nReturns error message of last Informix call. Returns the Informix error\nmessage associated with the most recent Informix error.\n@param errorcode If specified, the function will return the message\ncorresponding to the specified code.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_error() - Returns error code of last Informix call\n
ifx_fetch_row ifx_fetch_row(resource $result_id [, mixed $position]) [array]\nGet row as an associative array. Fetches one row of data from the result\nassociated with the specified result identifier. Subsequent calls to\nifx_fetch_row() would return the next row in the result set, or FALSE if\nthere are no more rows.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@param position An optional parameter for a &quot;fetch&quot; operation on\n&quot;scroll&quot; cursors: `NEXT`, `PREVIOUS`, `CURRENT`, `FIRST`, `LAST`\nor a number. If you specify a number, an &quot;absolute&quot; row fetch is\nexecuted. This parameter is optional, and only valid for SCROLL cursors.\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_fieldproperties ifx_fieldproperties(resource $result_id) [array]\nList of SQL fieldproperties. Returns the Informix SQL fieldproperties of\nevery field in the query as an associative array. Properties are encoded as:\n&quot;SQLTYPE;length;precision;scale;ISNULLABLE&quot; where SQLTYPE = the\nInformix type like &quot;SQLVCHAR&quot; etc. and ISNULLABLE = &quot;Y&quot;\nor &quot;N&quot;.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_fieldtypes() - List of Informix SQL fields\n
ifx_fieldtypes ifx_fieldtypes(resource $result_id) [array]\nList of Informix SQL fields. Returns an associative array with fieldnames as\nkey and the SQL fieldtypes as data for the query associated with `result_id`.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_fieldproperties() - List of SQL fieldproperties\n
ifx_free_blob ifx_free_blob(int $bid) [bool]\nDeletes the blob object. Deletes the blobobject for the given blob object-id.\n@param bid The BLOB object id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_create_blob() - Creates an blob object\n
ifx_free_char ifx_free_char(int $bid) [bool]\nDeletes the char object. Deletes the charobject for the given char object-id.\n@param bid The char object id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_create_char() - Creates an char object\n
ifx_free_result ifx_free_result(resource $result_id) [bool]\nReleases resources for the query. Releases resources for the query associated\nwith `result_id`.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_do() - Execute a previously prepared SQL-statement\n
ifx_get_blob ifx_get_blob(int $bid) [string]\nReturn the content of a blob object. Returns the content of the blob object.\n@param bid The BLOB object id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_get_char() - Return the content of the char object\n
ifx_get_char ifx_get_char(int $bid) [string]\nReturn the content of the char object. Returns the content of the char object.\n@param bid The char object-id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_get_blob() - Return the content of a blob object\n
ifx_getsqlca ifx_getsqlca(resource $result_id) [array]\nGet the contents of sqlca.sqlerrd[0..5] after a query. Returns a pseudo-row\nwith sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after the query associated with\n`result_id`. For inserts, updates and deletes the values returned are those\nas set by the server after executing the query. This gives access to the\nnumber of affected rows and the serial insert value. For `SELECT`s the\nvalues are those saved after the `PREPARE` statement. This gives access to\nthe *estimated* number of affected rows. The use of this function saves\nthe overhead of executing a `SELECT dbinfo(&#039;sqlca.sqlerrdx&#039;)`\nquery, as it retrieves the values that were saved by the ifx driver at the\nappropriate moment.\n@param result_id `result_id` is a valid result id returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_htmltbl_result ifx_htmltbl_result(resource $result_id [, string\n$html_table_options]) [int]\nFormats all rows of a query into a HTML table. Formats and prints all rows\nof the `result_id` query into a HTML table.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@param html_table_options This optional argument is a string of &lt;table>\ntag options.\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_nullformat ifx_nullformat(int $mode) [bool]\nSets the default return value on a fetch row. Sets the default return value\nof a NULL-value on a fetch row.\n@param mode Mode &quot;0&quot; returns &quot;&quot;, and mode &quot;1&quot;\nreturns &quot;NULL&quot;.\n@return (PHP 4, PHP &lt;=5.2.0)\n
ifx_num_fields ifx_num_fields(resource $result_id) [int]\nReturns the number of columns in the query. After preparing or executing a\nquery, this call gives you the number of columns in the query.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_num_rows() - Count the rows already fetched from a query\n
ifx_num_rows ifx_num_rows(resource $result_id) [int]\nCount the rows already fetched from a query. Gives the number of rows fetched\nso far for a query with `result_id` after a ifx_query() or ifx_do() query.\n@param result_id `result_id` is a valid resultid returned by ifx_query()\nor ifx_prepare() (select type queries only!).\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_num_fields() - Returns the number of columns in the query\n
ifx_pconnect ifx_pconnect([string $database [, string $userid [, string\n$password]]]) [resource]\nOpen persistent Informix connection. ifx_pconnect() acts very much like\nifx_connect() with two major differences. First, when connecting, the\nfunction would first try to find a (persistent) link that&#039;s already open\nwith the same host, username and password. If one is found, an identifier\nfor it will be returned instead of opening a new connection. Second, the\nconnection to the SQL server will not be closed when the execution of the\nscript ends. Instead, the link will remain open for future use (ifx_close()\nwill not close links established by ifx_pconnect()). This type of links is\ntherefore called &#039;persistent&#039;.\n@param database The database name, as a string.\n@param userid The username, as a string.\n@param password The password, as a string.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_connect() - Open Informix server connection\n
ifx_prepare ifx_prepare(string $query, resource $link_identifier [, int\n$cursor_def], mixed $blobidarray) [resource]\nPrepare an SQL-statement for execution. Prepares a `query` for later use\nwith ifx_do(). For &quot;select-type&quot; queries a cursor is declared and\nopened. Non-select queries are &quot;execute immediate&quot;. For either query\ntype the number of (estimated or real) affected rows is saved for retrieval\nby ifx_affected_rows(). If the contents of the TEXT (or BYTE) column allow\nit, you can also use `ifx_textasvarchar(1)` and `ifx_byteasvarchar(1)`. This\nallows you to treat TEXT (or BYTE) columns just as if they were ordinary (but\nlong) VARCHAR columns for select queries, and you don&#039;t need to bother\nwith blob id&#039;s. With `ifx_textasvarchar(0)` or `ifx_byteasvarchar(0)`\n(the default situation), select queries will return BLOB columns as blob\nid&#039;s (integer value). You can get the value of the blob as a string or\nfile with the blob functions (see below).\n@param query The query string.\n@param link_identifier The link identifier.\n@param cursor_def This optional parameter allows you to make this a `scroll`\nand/or `hold` cursor. It&#039;s a bitmask and can be either IFX_SCROLL,\nIFX_HOLD, or both or&#039;ed together.\n@param blobidarray If you have BLOB (BYTE or TEXT) columns in the query,\nyou can add a `blobidarray` parameter containing the corresponding &quot;blob\nids&quot;, and you should replace those columns with a &quot;?&quot; in the\nquery text.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_do() - Execute a previously prepared SQL-statement\n
ifx_query ifx_query(string $query, resource $link_identifier [, int\n$cursor_type [, mixed $blobidarray]]) [resource]\nSend Informix query. Sends a `query` to the currently active database on\nthe server that&#039;s associated with the specified link identifier. For\n&quot;select-type&quot; queries a cursor is declared and opened. Non-select\nqueries are &quot;execute immediate&quot;. For either query type the\nnumber of (estimated or real) affected rows is saved for retrieval by\nifx_affected_rows(). If the contents of the TEXT (or BYTE) column allow it,\nyou can also use `ifx_textasvarchar(1)` and `ifx_byteasvarchar(1)`. This\nallows you to treat TEXT (or BYTE) columns just as if they were ordinary (but\nlong) VARCHAR columns for select queries, and you don&#039;t need to bother\nwith blob id&#039;s. With `ifx_textasvarchar(0)` or `ifx_byteasvarchar(0)`\n(the default situation), select queries will return BLOB columns as blob\nid&#039;s (integer value). You can get the value of the blob as a string or\nfile with the blob functions (see below).\n@param query The query string.\n@param link_identifier The link identifier.\n@param cursor_def This optional parameter allows you to make this a `scroll`\nand/or `hold` cursor. It&#039;s a bitmask and can be either IFX_SCROLL,\nIFX_HOLD, or both or&#039;ed together. I you omit this parameter the cursor\nis a normal sequential cursor.\n@param blobidarray If you have BLOB (BYTE or TEXT) columns in the query,\nyou can add a `blobidarray` parameter containing the corresponding &quot;blob\nids&quot;, and you should replace those columns with a &quot;?&quot; in the\nquery text.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_connect() - Open Informix server connection\n
ifx_textasvarchar ifx_textasvarchar(int $mode) [bool]\nSet the default text mode. Sets the default text mode for all select-queries.\n@param mode Mode &quot;0&quot; will return a blob id, and mode &quot;1&quot;\nwill return a varchar with text content.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_byteasvarchar() - Set the default byte mode\n
ifx_update_blob ifx_update_blob(int $bid, string $content) [bool]\nUpdates the content of the blob object. Updates the content of the blob\nobject for the given blob object `bid`.\n@param bid A BLOB object identifier.\n@param content The new data, as a string.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_update_char() - Updates the content of the char object\n
ifx_update_char ifx_update_char(int $bid, string $content) [bool]\nUpdates the content of the char object. Updates the content of the char\nobject for the given char object `bid`.\n@param bid A char object identifier.\n@param content The new data, as a string.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifx_update_blob() - Updates the content of the blob object\n
ifxus_close_slob ifxus_close_slob(int $bid) [bool]\nDeletes the slob object. Deletes the slob object on the given slob object-id\n`bid`.\n@param bid An existing slob id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_open_slob() - Opens an slob object\n
ifxus_create_slob ifxus_create_slob(int $mode) [int]\nCreates an slob object and opens it. Creates an slob object and opens it.\n@param mode A combination of IFX_LO_RDONLY, IFX_LO_WRONLY, IFX_LO_APPEND\nIFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_close_slob() - Deletes the slob object\n@see ifxus_free_slob() - Deletes the slob object\n
ifxus_free_slob ifxus_free_slob(int $bid) [bool]\nDeletes the slob object. Deletes the slob object.\n@param bid An existing slob id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_close_slob() - Deletes the slob object\n
ifxus_open_slob ifxus_open_slob(int $bid, int $mode) [int]\nOpens an slob object. Opens an slob object. `bid` should be an existing\nslob id.\n@param bid An existing slob id.\n@param mode A combination of IFX_LO_RDONLY, IFX_LO_WRONLY, IFX_LO_APPEND\nIFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_close_slob() - Deletes the slob object\n@see ifxus_free_slob() - Deletes the slob object\n
ifxus_read_slob ifxus_read_slob(int $bid, int $nbytes) [string]\nReads nbytes of the slob object. Reads `nbytes` of the slob object.\n@param bid An existing slob id.\n@param nbytes The number of bytes to read.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_write_slob() - Writes a string into the slob object\n
ifxus_seek_slob ifxus_seek_slob(int $bid, int $mode, int $offset) [int]\nSets the current file or seek position. Sets the current file or seek position\nof an open slob object.\n@param bid An existing slob id.\n@param mode 0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END.\n@param offset A byte offset.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_tell_slob() - Returns the current file or seek position\n
ifxus_tell_slob ifxus_tell_slob(int $bid) [int]\nReturns the current file or seek position. Returns the current file or seek\nposition of an open slob object\n@param bid An existing slob id.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_seek_slob() - Sets the current file or seek position\n
ifxus_write_slob ifxus_write_slob(int $bid, string $content) [int]\nWrites a string into the slob object. Writes a string into the slob object.\n@param bid An existing slob id.\n@param content The content to write, as a string.\n@return (PHP 4, PHP &lt;=5.2.0)\n@see ifxus_read_slob() - Reads nbytes of the slob object\n
ignore_user_abort ignore_user_abort([string $value]) [int]\nSet whether a client disconnect should abort script execution. Sets whether\na client disconnect should cause a script to be aborted. When running PHP\nas a command line script, and the script&#039;s tty goes away without the\nscript being terminated then the script will die the next time it tries to\nwrite anything, unless `value` is set to TRUE\n@param value If set, this function will set the ignore_user_abort ini setting\nto the given `value`. If not, this function will only return the previous\nsetting without changing it.\n@return (PHP 4, PHP 5)\n@see connection_aborted() - Check whether client disconnected\n@see connection_status() - Returns connection status bitfield\n@see Connection Handling for a complete description of connection handling\nin PHP.\n
iis_add_server iis_add_server(string $path, string $comment, string $server_ip,\nint $port, string $host_name, int $rights, int $start_server) [int]\nCreates a new virtual web server.\n
iis_get_dir_security iis_get_dir_security(int $server_instance, string\n$virtual_path) [int]\nGets Directory Security.\n
iis_get_script_map iis_get_script_map(int $server_instance, string\n$virtual_path, string $script_extension) [string]\nGets script mapping on a virtual directory for a specific extension.\n
iis_get_server_by_comment iis_get_server_by_comment(string $comment) [int]\nReturn the instance number associated with the Comment.\n
iis_get_server_by_path iis_get_server_by_path(string $path) [int]\nReturn the instance number associated with the Path. Each virtual server in\nIIS is associated with an instance number. iis_get_server_by_path() finds\nthe instance number from the actual path to the root directory.\n@param path The path to the root directory\n@return (PECL iisfunc SVN)\n
iis_get_server_rights iis_get_server_rights(int $server_instance, string\n$virtual_path) [int]\nGets server rights.\n
iis_get_service_state iis_get_service_state(string $service_id) [int]\nReturns the state for the service defined by ServiceId.\n
iis_remove_server iis_remove_server(int $server_instance) [int]\nRemoves the virtual web server indicated by ServerInstance.\n
iis_set_app_settings iis_set_app_settings(int $server_instance, string\n$virtual_path, string $application_scope) [int]\nCreates application scope for a virtual directory.\n
iis_set_dir_security iis_set_dir_security(int $server_instance, string\n$virtual_path, int $directory_flags) [int]\nSets Directory Security.\n
iis_set_script_map iis_set_script_map(int $server_instance, string\n$virtual_path, string $script_extension, string $engine_path, int\n$allow_scripting) [int]\nSets script mapping on a virtual directory.\n
hw_GetObjectByQuery array hw_getobjectbyquery ( int $connection , string\n$query , int $max_hits )\nSearch object. Searches for objects on the whole server and returns an array\nof object ids.\n@param connection The connection identifier.\n@param query The query will only work with indexed attributes.\n@param max_hits The maximum number of matches is limited to `max_hits`. If\n`max_hits` is set to -1 the maximum number of matches is unlimited.\n@return (PHP 4)\n@see hw_getobjectbyqueryobj() - Search object\n
hw_GetObjectByQueryColl array hw_getobjectbyquerycoll ( int $connection ,\nint $objectID , string $query , int $max_hits )\nSearch object in collection. Searches for objects in collection with ID\n`objectID` and returns an array of object ids.\n@param connection The connection identifier.\n@param objectID The collection id.\n@param query The query will only work with indexed attributes.\n@param max_hits The maximum number of matches is limited to `max_hits`. If\n`max_hits` is set to -1 the maximum number of matches is unlimited.\n@return (PHP 4)\n@see hw_getobjectbyquerycollobj() - Search object in collection\n
hw_GetObjectByQueryCollObj array hw_getobjectbyquerycollobj ( int $connection\n, int $objectID , string $query , int $max_hits )\nSearch object in collection. Searches for objects in collection with ID\n`objectID` and returns an array of object records.\n@param connection The connection identifier.\n@param objectID The collection id.\n@param query The query will only work with indexed attributes.\n@param max_hits The maximum number of matches is limited to `max_hits`. If\n`max_hits` is set to -1 the maximum number of matches is unlimited.\n@return (PHP 4)\n@see hw_getobjectbyquerycoll() - Search object in collection\n
hw_GetObjectByQueryObj array hw_getobjectbyqueryobj ( int $connection ,\nstring $query , int $max_hits )\nSearch object. Searches for objects on the whole server and returns an array\nof object records.\n@param connection The connection identifier.\n@param query The query will only work with indexed attributes.\n@param max_hits The maximum number of matches is limited to `max_hits`. If\n`max_hits` is set to -1 the maximum number of matches is unlimited.\n@return (PHP 4)\n@see hw_getobjectbyquery() - Search object\n
hw_GetParents array hw_getparents ( int $connection , int $objectID )\nObject ids of parents. Returns the object identifiers of the parents of\nan object.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n
hw_GetParentsObj array hw_getparentsobj ( int $connection , int $objectID )\nObject records of parents. Returns object records and statistical information\nabout the object records. Each object record belongs to a parent of the\nobject with ID `objectID`.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n
hw_getrellink hw_getrellink(int $link, int $rootid, int $sourceid, int $destid)\n[string]\nGet link from source to dest relative to rootid. WarningThis function is\ncurrently not documented; only its argument list is available.\n
hw_GetRemote int hw_getremote ( int $connection , int $objectID )\nGets a remote document. Gets a remote document. Remote documents in Hyperwave\nnotation are documents retrieved from an external source. Common remote\ndocuments are for example external web pages or queries in a database. In\norder to be able to access external sources through remote documents Hyperwave\nintroduces the HGI (Hyperwave Gateway Interface) which is similar to the\nCGI. Currently, only ftp, http-servers and some databases can be accessed\nby the HGI. Calling hw_getremote() returns the document from the external\nsource. If you want to use this function you should be very familiar with\nHGIs. You should also consider to use PHP instead of Hyperwave to access\nexternal sources. Adding database support by a Hyperwave gateway should be\nmore difficult than doing it in PHP.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_getremotechildren() - Gets children of remote document\n
hw_getremotechildren hw_getremotechildren(int $connection, string\n$object_record) [mixed]\nGets children of remote document. Returns the children of a remote\ndocument. Children of a remote document are remote documents itself. This makes\nsense if a database query has to be narrowed and is explained in Hyperwave\nProgrammers&#039; Guide. If you want to use this function you should be very\nfamiliar with HGIs. You should also consider to use PHP instead of Hyperwave\nto access external sources. Adding database support by a Hyperwave gateway\nshould be more difficult than doing it in PHP.\n@param connection The connection identifier.\n@param object_record The object record.\n@return (PHP 4)\n@see hw_getremote() - Gets a remote document\n
hw_GetSrcByDestObj array hw_getsrcbydestobj ( int $connection , int $objectID )\nReturns anchors pointing at object. Gets the object records of all anchors\npointing to the object with ID `objectID`.\n@param connection The connection identifier.\n@param objectID The object identifier. The object can either be a document\nor an anchor of type destination.\n@return (PHP 4)\n@see hw_getanchors() - Object ids of anchors of document\n
hw_GetText int hw_gettext ( int $connection , int $objectID [, mixed\n$rootID/prefix ] )\nRetrieve text document. Returns the document with object ID `objectID`. If\nthe document has anchors which can be inserted, they will be inserted\nalready. This function will only work for pure text documents. It will not\nopen a special data connection and therefore blocks the control connection\nduring the transfer.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@param rootID/prefix The optional parameter `rootID/prefix` can be a\nstring or an integer. If it is an integer it determines how links are\ninserted into the document. The default is 0 and will result in links\nthat are constructed from the name of the link&#039;s destination\nobject. This is useful for web applications. If a link points to an\nobject with name &#039;internet_movie&#039; the HTML link will be &lt;A\nhref=&quot;/internet_movie&quot;>. The actual location of the source\nand destination object in the document hierarchy is disregarded. You\nwill have to set up your web browser, to rewrite that URL to for example\n&#039;/my_script.php/internet_movie&#039;. &#039;my_script.php&#039; will have\nto evaluate $PATH_INFO and retrieve the document. All links will have the\nprefix &#039;/my_script.php/&#039;. If you do not want this you can set the\noptional parameter `rootID/prefix` to any prefix which is used instead. Is this\ncase it has to be a string. If `rootID/prefix` is an integer and unequal to\n0 the link is constructed from all the names starting at the object with the\nid `rootID/prefix` separated by a slash relative to the current object. If\nfor example the above document &#039;internet_movie&#039; is located at\n&#039;a-b-c-internet_movie&#039; with &#039;-&#039; being the separator\nbetween hierarchy levels on the Hyperwave server and the source document\nis located at &#039;a-b-d-source&#039; the resulting HTML link would be:\n&lt;A HREF=&quot;../c/internet_movie&quot;>. This is useful if you want to\ndownload the whole server content onto disk and map the document hierarchy\nonto the file system.\n@return (PHP 4)\n@see hw_pipedocument() - Retrieve any document\n@see hw_free_document() - Frees hw_document\n@see hw_document_bodytag() - Body tag of hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_output_document() - Prints hw_document\n
hw_getusername hw_getusername(int $connection) [string]\nName of currently logged in user. Returns the username of the connection.\n@param connection The connection identifier.\n@return (PHP 4)\n
hw_Identify string hw_identify ( int $link , string $username , string\n$password )\nIdentifies as user. Identifies as user with `username` and\n`password`. Identification is only valid for the current session. I do not\nthink this function will be needed very often. In most cases it will be\neasier to identify with the opening of the connection.\n@param link The connection identifier.\n@param username The username.\n@param password The password.\n@see hw_connect() - Opens a connection\n
hw_InCollections array hw_incollections ( int $connection , array\n$object_id_array , array $collection_id_array , int $return_collections )\nCheck if object ids in collections. Checks whether a set of objects (documents\nor collections) specified by the `object_id_array` is part of the collections\nlisted in `collection_id_array`.\n@param connection The connection identifier.\n@param object_id_array An array of object ids.\n@param collection_id_array An array of collection ids.\n@param return_collections When set to 0, the subset of object ids that is part\nof the collections (i.e., the documents or collections that are children of one\nor more collections of collection ids or their subcollections, recursively)\nis returned as an array. When set to 1, the set of collections that have\none or more objects of this subset as children are returned as an array. This\noption allows a client to, e.g., highlight the part of the collection hierarchy\nthat contains the matches of a previous query, in a graphical overview.\n@return (PHP 4)\n
hw_Info string hw_info ( int $connection )\nInfo about connection. Returns information about the current connection.\n@param connection The connection identifier.\n@return (PHP 4)\n
hw_InsColl int hw_inscoll ( int $connection , int $objectID , array\n$object_array )\nInsert collection. Inserts a new collection with attributes as in\n`object_array` into collection with object ID `objectID`.\n@param connection The connection identifier.\n@param objectID\n@param object_array\n@return (PHP 4)\n
hw_InsDoc int hw_insdoc ( resource $connection , int $parentID , string\n$object_record [, string $text ] )\nInsert document. Inserts a new document with attributes as in `object_record`\ninto acollection. If you want to insert a general document of any kind use\nhw_insertdocument() instead.\n@param connection The connection identifier.\n@param parentID The collection id.\n@param object_record Object attributes.\n@param text If provided, this ascii text will be inserted too.\n@return (PHP 4)\n@see hw_insertdocument() - Upload any document\n@see hw_inscoll() - Insert collection\n
hw_insertanchors hw_insertanchors(int $hwdoc, array $anchorecs, array $dest\n[, array $urlprefixes]) [bool]\nInserts only anchors into text. WarningThis function is currently not\ndocumented; only its argument list is available.\n
hw_InsertDocument int hw_insertdocument ( int $connection , int $parent_id ,\nint $hw_document )\nUpload any document. Uploads a document into the given collection. The\ndocument has to be created before with hw_new_document(). Make sure that the\nobject record of the new document contains at least the attributes: Type,\nDocumentType, Title and Name. Possibly you also want to set the MimeType.\n@param connection The connection identifier.\n@param parent_id The collection identifier.\n@param hw_document The document identifier.\n@return (PHP 4)\n@see hw_pipedocument() - Retrieve any document\n
hw_InsertObject int hw_insertobject ( int $connection , string $object_rec ,\nstring $parameter )\nInserts an object record. Inserts an object into the server. Note: If you\nwant to insert an Anchor, the attribute Position has always been set either\nto a start/end value or to &#039;invisible&#039;. Invisible positions are\nneeded if the annotation has no corresponding link in the annotation text.\n@param connection The connection identifier.\n@param object_rec The object can be any valid hyperwave object.\n@param parameter See the HG-CSP documentation for a detailed information on\nhow the parameters have to be.\n@see hw_pipedocument() - Retrieve any document\n@see hw_insertdocument() - Upload any document\n@see hw_insdoc() - Insert document\n@see hw_inscoll() - Insert collection\n
hw_mapid hw_mapid(int $connection, int $server_id, int $object_id) [int]\nMaps global id on virtual local id. Maps a global object id on any hyperwave\nserver, even those you did not connect to with hw_connect(), onto a virtual\nobject id. This virtual object id can then be used as any other object id,\ne.g. to obtain the object record with hw_getobject(). Note: In order to use\nthis function you will have to set the F_DISTRIBUTED flag, which can currently\nonly be set at compile time in hg_comm.c. It is not set by default. Read\nthe comment at the beginning of hg_comm.c\n@param connection The connection identifier.\n@param server_id The server id is the first part of the global object id\n(GOid) of the object which is actually the IP number as an integer.\n@param object_id The object identifier.\n@return (PHP 4)\n
hw_Modifyobject bool hw_modifyobject ( int $connection , int $object_to_change\n, array $remove , array $add [, int $mode ] )\nModifies object record. This command allows to remove, add, or modify\nindividual attributes of an object record. The object is specified by the\nObject ID `object_to_change`. In order to modify an attribute one will have\nto remove the old one and add a new one. hw_modifyobject() will always remove\nthe attributes before it adds attributes unless the value of the attribute to\nremove is not a string or array. The keys of both arrays are the attributes\nname. The value of each array element can either be an array, a string or\nanything else. If it is an array each attribute value is constructed by the key\nof each element plus a colon and the value of each element. If it is a string\nit is taken as the attribute value. An empty string will result in a complete\nremoval of that attribute. If the value is neither a string nor an array but\nsomething else, e.g. an integer, no operation at all will be performed on the\nattribute. This is necessary if you want to add a completely new attribute not\njust a new value for an existing attribute. If the remove array contained an\nempty string for that attribute, the attribute would be tried to be removed\nwhich would fail since it doesn&#039;t exist. The following addition of a\nnew value for that attribute would also fail. Setting the value for that\nattribute to e.g. 0 would not even try to remove it and the addition will\nwork. If you would like to change the attribute &#039;Name&#039; with the\ncurrent value &#039;books&#039; into &#039;articles&#039; you will have to\ncreate two arrays and call hw_modifyobject(). Example #1 modifying an attribute\n@param connection The connection identifier.\n@param object_to_change The object to be changed.\n@param remove An array of attributes to remove.\n@param add An array of attributes to add.\n@param mode The last parameter determines if the modification is performed\nrecursively. 1 means recursive modification. If some of the objects cannot\nbe modified they will be skipped without notice. hw_error() may not indicate\nan error though some of the objects could not be modified.\n@return (PHP 4)\n
hw_mv hw_mv(int $connection, array $object_id_array, int $source_id, int\n$destination_id) [int]\nMoves objects. Moves the specified objects from a collection to another.\n@param connection The connection identifier.\n@param object_id_array An array of object ids.\n@param source_id The source collection id.\n@param destination_id The target collection id. If set to 0 the objects\nwill be unlinked from the source collection. If this is the last instance of\nthat object it will be deleted. If you want to delete all instances at once,\nuse hw_deleteobject().\n@return (PHP 4)\n@see hw_cp() - Copies objects\n@see hw_deleteobject() - Deletes object\n
hw_New_Document int hw_new_document ( string $object_record , string\n$document_data , int $document_size )\nCreate new document. Returns a new Hyperwave document with the given document\ndata and object record. This function does not insert the document into the\nHyperwave server.\n@param object_record The object record.\n@param document_data The document data.\n@param document_size The document size. Must be the length of `document_data`.\n@return (PHP 4)\n@see hw_free_document() - Frees hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_document_bodytag() - Body tag of hw_document\n@see hw_output_document() - Prints hw_document\n@see hw_insertdocument() - Upload any document\n
hw_objrec2array hw_objrec2array(string $object_record [, array $format])\n[array]\nConvert attributes from object record to object array. Converts an\n`object_record` into an object array.\n@param object_record The object record.\n@param format An associative array with the attribute name as its key and\nthe value being one of `HW_ATTR_LANG` or `HW_ATTR_NONE`.\n@return (PHP 4)\n@see hw_array2objrec() - Convert attributes from object array to object record\n
hw_Output_Document bool hw_output_document ( int $hw_document )\nPrints hw_document. Prints the document without the BODY tag. For backward\ncompatibility, hw_outputdocument() is also accepted. This is deprecated,\nhowever.\n@param hw_document The document identifier.\n@return (PHP 4)\n
hw_pConnect int hw_pconnect ( string $host , int $port [, string $username ],\nstring $password )\nMake a persistent database connection. Opens a persistent connection to a\nHyperwave server. You can have multiple persistent connections open at once.\n@param host The server host name.\n@param port The server port number.\n@param username The Hyperwave user name. If omitted, no identification with\nthe server will be done. It is similar to identify as user anonymous.\n@param password The password for `username`. Keep in mind, that the password\nis not encrypted.\n@return (PHP 4)\n@see hw_connect() - Opens a connection\n
hw_PipeDocument int hw_pipedocument ( int $connection , int $objectID [,\narray $url_prefixes ] )\nRetrieve any document. Gets the Hyperwave document with the given object\nID. If the document has anchors which can be inserted, they will have\nbeen inserted already. The document will be transferred via a special data\nconnection which does not block the control connection.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@param url_prefixes\n@return (PHP 4)\n@see hw_gettext() - Retrieve text document\n@see hw_free_document() - Frees hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_document_bodytag() - Body tag of hw_document\n@see hw_output_document() - Prints hw_document\n
hw_Root int hw_root ( void )\nRoot object id. Returns the object ID of the hyperroot collection. Currently\nthis is always 0. The child collection of the hyperroot is the root collection\nof the connected server.\n@return (PHP 4)\n
hw_setlinkroot hw_setlinkroot(int $link, int $rootid) [int]\nSet the id to which links are calculated. WarningThis function is currently\nnot documented; only its argument list is available.\n
hw_stat hw_stat(int $link) [string]\nReturns status string. WarningThis function is currently not documented;\nonly its argument list is available.\n
hw_Unlock bool hw_unlock ( int $connection , int $objectID )\nUnlock object. Unlocks a document, so other users regain access.\n@param connection The connection identifier.\n@param objectID The document object identifier.\n@return (PHP 4)\n@see hw_getandlock() - Return object record and lock object\n
hw_Who array hw_who ( int $connection )\nList of currently logged in users. Gets the list of currently logged in users.\n@param connection The connection identifier.\n@return (PHP 4)\n
key string hw_api_attribute::key ( void )\nReturns key of the attribute.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_attribute->value\n
langdepvalue string hw_api_attribute::langdepvalue ( string $language )\nReturns value for a given language.\n@param language\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_attribute->value\n
value string hw_api_attribute::value ( void )\nReturns value of the attribute.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_attribute->key\n@see hw_api_attribute->values\n
values array hw_api_attribute::values ( void )\nReturns all values of the attribute.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_attribute->value\n
hw_api_attribute hw_api_attribute([string $name [, string $value]])\n[HW_API_Attribute]\nCreates instance of class hw_api_attribute. Creates a new instance of\nhw_api_attribute with the given name and value.\n@param name The attribute name.\n@param value The attribute value.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
checkin bool hw_api::checkin ( array $parameter )\nChecks in an object.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->checkout\n
checkout bool hw_api::checkout ( array $parameter )\nChecks out an object.\n@param parameter The parameters array contains the required element\n&#039;objectIdentifier&#039; and the optional element &#039;version&#039;,\n&#039;mode&#039; and &#039;objectQuery&#039;. &#039;mode&#039; can be one\nof the following values: HW_API_CHECKIN_NORMAL Checks out an object. The\nobject must be a document.\n@param HW_API_CHECKIN_RECURSIVE If the object to check out is a collection,\nall children will be checked out recursively if they are documents. Trying\nto check out a collection would result in an error.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->checkin\n
children array hw_api::children ( array $parameter )\nReturns children of an object.\n@param parameter The parameter array contains the required\nelements &#039;objectIdentifier&#039; and the optional elements\n&#039;attributeSelector&#039; and &#039;objectQuery&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->parents\n
mimetype string hw_api_content::mimetype ( void )\nReturns mimetype.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
read string hw_api_content::read ( string $buffer , int $len )\nRead content.\n@param buffer\n@param len Number of bytes to read.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
content HW_API_Content hw_api::content ( array $parameter )\nReturns content of an object.\n@param parameter The parameter array contains the required\nelements &#039;objectidentifier&#039; and the optional element\n&#039;mode&#039;. The mode can be one of the constants HW_API_CONTENT_ALLLINKS,\nHW_API_CONTENT_REACHABLELINKS or HW_API_CONTENT_PLAIN. HW_API_CONTENT_ALLLINKS\nmeans to insert all anchors even if the destination is not\nreachable. HW_API_CONTENT_REACHABLELINKS tells this method to insert only\nreachable links and HW_API_CONTENT_PLAIN will lead to document without\nany links.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
copy hw_api_content hw_api::copy ( array $parameter )\nCopies physically.\n@param parameter The parameter array contains the required elements\n&#039;objectIdentifier&#039; and &#039;destinationParentIdentifier&#039;. The\noptional parameter is &#039;attributeSelector&#039;`\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->move\n@see hw_api->link\n
dbstat hw_api_object hw_api::dbstat ( array $parameter )\nReturns statistics about database server.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dcstat\n@see hw_api->hwstat\n@see hw_api->ftstat\n
dcstat hw_api_object hw_api::dcstat ( array $parameter )\nReturns statistics about document cache server.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dbstat\n@see hw_api->hwstat\n@see hw_api->ftstat\n
dstanchors array hw_api::dstanchors ( array $parameter )\nReturns a list of all destination anchors.\n@param parameter The parameter array contains the required\nelement &#039;objectIdentifier&#039; and the optional elements\n&#039;attributeSelector&#039; and &#039;objectQuery&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->srcanchors\n
dstofsrcanchor hw_api_object hw_api::dstofsrcanchor ( array $parameter )\nReturns destination of a source anchor.\n@param parameter The parameters array contains the required\nelement &#039;objectIdentifier&#039; and the optional element\n&#039;attributeSelector&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->srcanchors\n@see hw_api->dstanchors\n@see hw_api->objectbyanchor\n
count int hw_api_error::count ( void )\nReturns number of reasons.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_error->reason\n
reason HW_API_Reason hw_api_error::reason ( void )\nReturns reason of error.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_error->count\n
find array hw_api::find ( array $parameter )\nSearch for objects.\n@param parameter The parameter array contains the &#039;keyquery&#039;\nor/and &#039;fulltextquery&#039; depending on who you would like to\nsearch. Optional parameters are &#039;objectquery&#039;, &#039;scope&#039;,\n&#039;languages&#039; and &#039;attributeselector&#039;. In case of\nan incremental search the optional parameters &#039;startIndex&#039;,\n&#039;numberOfObjectsToGet&#039; and &#039;exactMatchUnit&#039; can be passed.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
ftstat hw_api_object hw_api::ftstat ( array $parameter )\nReturns statistics about fulltext server.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dcstat\n@see hw_api->dbstat\n@see hw_api->hwstat\n
hwapi_hgcsp hwapi_hgcsp(string $hostname [, int $port]) [HW_API]\nReturns object of class hw_api. Opens a connection to the Hyperwave server\non host `hostname`. The protocol used is HGCSP.\n@param hostname The host name.\n@param port If you do not pass a port number, 418 is used.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
hwstat hw_api_object hw_api::hwstat ( array $parameter )\nReturns statistics about Hyperwave server.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dcstat\n@see hw_api->dbstat\n@see hw_api->ftstat\n
identify bool hw_api::identify ( array $parameter )\nLog into Hyperwave Server.\n@param parameter The parameter array must contain the elements\n&#039;username&#039; and &#039;password&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
info array hw_api::info ( array $parameter )\nReturns information about server configuration.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dcstat\n@see hw_api->dbstat\n@see hw_api->ftstat\n@see hw_api->hwstat\n
insert hw_api_object hw_api::insert ( array $parameter )\nInserts a new object.\n@param parameter The parameter array contains the required elements\n&#039;object&#039; and &#039;content&#039; (if the object is a document)\nand the optional parameters &#039;parameters&#039;, &#039;mode&#039;\nand &#039;attributeSelector&#039;. The &#039;object&#039; must contain\nall attributes of the object. &#039;parameters&#039; is an object\nas well holding further attributes like the destination (attribute\nkey is &#039;Parent&#039;). &#039;content&#039; is the content of the\ndocument. &#039;mode&#039; can be a combination of the following flags:\nHW_API_INSERT_NORMAL The object in inserted into the server.\n@param HW_API_INSERT_FORCE_VERSION_CONTROL\n@param HW_API_INSERT_AUTOMATIC_CHECKOUT\n@param HW_API_INSERT_PLAIN\n@param HW_API_INSERT_KEEP_TIME_MODIFIED\n@param HW_API_INSERT_DELAY_INDEXING\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->replace\n
insertanchor hw_api_object hw_api::insertanchor ( array $parameter )\nInserts a new object of type anchor.\n@param parameter The parameter array contains the required elements\n&#039;object&#039; and &#039;documentIdentifier&#039; and the optional elements\n&#039;destinationIdentifier&#039;, &#039;parameter&#039;, &#039;hint&#039; and\n&#039;attributeSelector&#039;. The &#039;documentIdentifier&#039; specifies\nthe document where the anchor shall be inserted. The target of the anchor\nis set in &#039;destinationIdentifier&#039; if it already exists. If the\ntarget does not exists the element &#039;hint&#039; has to be set to the\nname of object which is supposed to be inserted later. Once it is inserted\nthe anchor target is resolved automatically.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->insert\n@see hw_api->insertdocument\n@see hw_api->insertcollection\n
insertcollection hw_api_object hw_api::insertcollection ( array $parameter )\nInserts a new object of type collection.\n@param parameter The parameter array contains the required elements\n&#039;object&#039; and &#039;parentIdentifier&#039; and the optional elements\n&#039;parameter&#039; and &#039;attributeSelector&#039;. See hwapi_insert()\nfor the meaning of each element.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->insert\n@see hw_api->insertdocument\n@see hw_api->insertanchor\n
insertdocument hw_api_object hw_api::insertdocument ( array $parameter )\nInserts a new object of type document.\n@param parameter The parameter array contains the required elements\n&#039;object&#039;, &#039;parentIdentifier&#039; and &#039;content&#039;\nand the optional elements &#039;mode&#039;, &#039;parameter&#039; and\n&#039;attributeSelector&#039;. See hwapi_insert() for the meaning of each\nelement.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->insert\n@see hw_api->insertcollection\n@see hw_api->insertanchor\n
link bool hw_api::link ( array $parameter )\nCreates a link to an object.\n@param parameter The parameter array contains the required elements\n&#039;objectIdentifier&#039; and &#039;destinationParentIdentifier&#039;.\n&#039;destinationParentIdentifier&#039; is the target collection.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->copy\n
lock bool hw_api::lock ( array $parameter )\nLocks an object.\n@param parameter The parameter array contains the required element\n&#039;objectIdentifier&#039; and the optional parameters &#039;mode&#039;\nand &#039;objectquery&#039;. &#039;mode&#039; determines how an object\nis locked. HW_API_LOCK_NORMAL means, an object is locked until it is\nunlocked. HW_API_LOCK_RECURSIVE is only valid for collection and locks all\nobjects within the collection and possible subcollections. HW_API_LOCK_SESSION\nmeans, an object is locked only as long as the session is valid.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->unlock\n
move bool hw_api::move ( array $parameter )\nMoves object between collections.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_objrec2array() - Convert attributes from object record to object array\n
hw_api_content hw_api_content(string $content, string $mimetype)\n[HW_API_Content]\nCreate new instance of class hw_api_content. Creates a new content object\nfrom the string `content`.\n@param content\n@param mimetype The mimetype for the contents.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
assign bool hw_api_object::assign ( array $parameter )\nClones object.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
attreditable bool hw_api_object::attreditable ( array $parameter )\nChecks whether an attribute is editable.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
count int hw_api_object::count ( array $parameter )\nReturns number of attributes.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
insert bool hw_api_object::insert ( HW_API_Attribute $attribute )\nInserts new attribute.\n@param attribute\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_object->remove\n
hw_api_object hw_api_object hw_api_object(array $parameter) []\nCreates a new instance of class hw_api_object. Creates a new instance of\nthe class hw_api_object.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->lock\n
remove bool hw_api_object::remove ( string $name )\nRemoves attribute.\n@param name The attribute name.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api_object->insert\n
title string hw_api_object::title ( array $parameter )\nReturns the title attribute.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
value string hw_api_object::value ( string $name )\nReturns value of attribute.\n@param name The attribute name.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
object hw_api_object hw_api::object ( array $parameter )\nRetrieve attribute information.\n@param parameter The parameter array contains the required\nelements &#039;objectIdentifier&#039; and the optional elements\n&#039;attributeSelector&#039; and &#039;version&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->content\n
objectbyanchor hw_api_object hw_api::objectbyanchor ( array $parameter )\nReturns the object an anchor belongs to.\n@param parameter The parameter array contains the required\nelement &#039;objectIdentifier&#039; and the optional element\n&#039;attributeSelector&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dstofsrcanchor\n@see hw_api->srcanchors\n@see hw_api->dstanchors\n
parents array hw_api::parents ( array $parameter )\nReturns parents of an object.\n@param parameter The parameter array contains the required\nelements &#039;objectidentifier&#039; and the optional elements\n&#039;attributeselector&#039; and &#039;objectquery&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->children\n
description string hw_api_reason::description ( void )\nReturns description of reason.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
type HW_API_Reason hw_api_reason::type ( void )\nReturns type of reason.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n
remove bool hw_api::remove ( array $parameter )\nDelete an object.\n@param parameter You can pass an optional object query to remove only\nthose objects which match the query. An object will be deleted physically\nif it is the last instance. The parameter array contains the required\nelements &#039;objectidentifier&#039; and &#039;parentidentifier&#039;. If\nyou want to remove a user or group &#039;parentidentifier&#039; can be\nskipped. The optional parameter &#039;mode&#039; determines how the deletion\nis performed. In normal mode the object will not be removed physically until\nall instances are removed. In physical mode all instances of the object will\nbe deleted immediately. In removelinks mode all references to and from the\nobjects will be deleted as well. In nonrecursive the deletion is not performed\nrecursive. Removing a collection which is not empty will cause an error.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->move\n
replace hw_api_object hw_api::replace ( array $parameter )\nReplaces an object.\n@param parameter The parameter array contains the required elements\n&#039;objectIdentifier&#039; and &#039;object&#039; and the optional\nparameters &#039;content&#039;, &#039;parameters&#039;, &#039;mode&#039; and\n&#039;attributeSelector&#039;. &#039;objectIdentifier&#039; contains the object\nto be replaced. &#039;object&#039; contains the new object. &#039;content&#039;\ncontains the new content. &#039;parameters&#039; contain extra information for\nHTML documents. HTML_Language is the letter abbreviation of the language of the\ntitle. HTML_Base sets the base attribute of the HTML document. &#039;mode&#039;\ncan be a combination of the following flags: HW_API_REPLACE_NORMAL The object\non the server is replace with the object passed.\n@param HW_API_REPLACE_FORCE_VERSION_CONTROL\n@param HW_API_REPLACE_AUTOMATIC_CHECKOUT\n@param HW_API_REPLACE_AUTOMATIC_CHECKIN\n@param HW_API_REPLACE_PLAIN\n@param HW_API_REPLACE_REVERT_IF_NOT_CHANGED\n@param HW_API_REPLACE_KEEP_TIME_MODIFIED\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->insert\n
setcommittedversion hw_api_object hw_api::setcommittedversion ( array\n$parameter )\nCommits version other than last version.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->checkin\n@see hw_api->checkout\n
srcanchors array hw_api::srcanchors ( array $parameter )\nReturns a list of all source anchors.\n@param parameter The parameter array contains the required\nelement &#039;objectIdentifier&#039; and the optional elements\n&#039;attributeSelector&#039; and &#039;objectQuery&#039;.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dstanchors\n
srcsofdst array hw_api::srcsofdst ( array $parameter )\nReturns source of a destination object.\n@param parameter The parameters array contains the required\nelement &#039;objectIdentifier&#039; and the optional element\n&#039;attributeSelector&#039; and &#039;objectQuery&#039;. The function\nreturns an array of objects or an error.\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->dstofsrcanchor\n
unlock bool hw_api::unlock ( array $parameter )\nUnlocks a locked object.\n@param parameter The parameter array contains the required element\n&#039;objectIdentifier&#039; and the optional parameters &#039;mode&#039;\nand &#039;objectquery&#039;. The meaning of &#039;mode&#039; is the same as\nin function hwapi_lock().\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->lock\n
user hw_api_object hw_api::user ( array $parameter )\nReturns the own user object.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->userlist\n
userlist array hw_api::userlist ( array $parameter )\nReturns a list of all logged in users.\n@param parameter\n@return (PHP 4, PHP 5 &lt; 5.2.0, PECL hwapi SVN)\n@see hw_api->user\n
hypot hypot(float $x, float $y) [float]\nCalculate the length of the hypotenuse of a right-angle triangle. hypot()\nreturns the length of the hypotenuse of a right-angle triangle with sides\nof length `x` and `y`, or the distance of the point (`x`, `y`) from the\norigin. This is equivalent to `sqrt(x*x + y*y)`.\n@param x Length of first side\n@param y Length of second side\n@return (PHP 4 >= 4.1.0, PHP 5)\n
ibase_add_user ibase_add_user(resource $service_handle, string $user_name,\nstring $password [, string $first_name [, string $middle_name [, string\n$last_name]]]) [bool]\nAdd a user to a security database (only for IB6 or later). PHP 4 uses\n`server`, `dba_user_name` and `dba_user_password` instead of `service_handle`\nparameter. This function is currently not documented; only its argument list\nis available.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ibase_modify_user() - Modify a user to a security database (only for\nIB6 or later)\n@see ibase_delete_user() - Delete a user from a security database (only for\nIB6 or later)\n
ibase_affected_rows ibase_affected_rows([resource $link_identifier]) [int]\nReturn the number of rows that were affected by the previous query. This\nfunction returns the number of rows that were affected by the previous query\n(INSERT, UPDATE or DELETE) that was executed from within the specified\ntransaction context.\n@param link_identifier A transaction context. If `link_identifier` is a\nconnection resource, its default transaction is used.\n@return (PHP 5)\n@see ibase_query() - Execute a query on an InterBase database\n@see ibase_execute() - Execute a previously prepared query\n
ibase_backup ibase_backup(resource $service_handle, string $source_db,\nstring $dest_file [, int $options=0 [, bool $verbose=false]]) [mixed]\nInitiates a backup task in the service manager and returns immediately.\n
ibase_blob_add ibase_blob_add(resource $blob_handle, string $data) [void]\nAdd data into a newly created blob. ibase_blob_add() adds data into a blob\ncreated with ibase_blob_create().\n@param blob_handle A blob handle opened with ibase_blob_create().\n@param data The data to be added.\n@return (PHP 4, PHP 5)\n@see ibase_blob_cancel() - Cancel creating blob\n@see ibase_blob_close() - Close blob\n@see ibase_blob_create() - Create a new blob for adding data\n@see ibase_blob_import() - Create blob, copy file in it, and close it\n
ibase_blob_cancel ibase_blob_cancel(resource $blob_handle) [bool]\nCancel creating blob. This function will discard a BLOB if it has not yet\nbeen closed by ibase_blob_close().\n@param blob_handle A BLOB handle opened with ibase_blob_create().\n@return (PHP 4, PHP 5)\n@see ibase_blob_close() - Close blob\n@see ibase_blob_create() - Create a new blob for adding data\n@see ibase_blob_import() - Create blob, copy file in it, and close it\n
ibase_blob_close ibase_blob_close(resource $blob_handle) [mixed]\nClose blob. This function closes a BLOB that has either been opened for reading\nby ibase_blob_open() or has been opened for writing by ibase_blob_create().\n@param blob_handle A BLOB handle opened with ibase_blob_create() or\nibase_blob_open().\n@return (PHP 4, PHP 5)\n@see ibase_blob_cancel() - Cancel creating blob\n@see ibase_blob_open() - Open blob for retrieving data parts\n
ibase_blob_create ibase_blob_create([resource $link_identifier=NULL])\n[resource]\nCreate a new blob for adding data. ibase_blob_create() creates a new BLOB\nfor filling with data.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@return (PHP 4, PHP 5)\n@see ibase_blob_add() - Add data into a newly created blob\n@see ibase_blob_cancel() - Cancel creating blob\n@see ibase_blob_close() - Close blob\n@see ibase_blob_import() - Create blob, copy file in it, and close it\n
ibase_blob_echo ibase_blob_echo(string $blob_id) [bool]\nOutput blob contents to browser. This function opens a BLOB for reading and\nsends its contents directly to standard output (the browser, in most cases).\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@param blob_id\n@return (PHP 4, PHP 5)\n@see ibase_blob_open() - Open blob for retrieving data parts\n@see ibase_blob_close() - Close blob\n@see ibase_blob_get() - Get len bytes data from open blob\n
ibase_blob_get ibase_blob_get(resource $blob_handle, int $len) [string]\nGet len bytes data from open blob. This function returns at most `len` bytes\nfrom a BLOB that has been opened for reading by ibase_blob_open(). Note:\nIt is not possible to read from a BLOB that has been opened for writing\nby ibase_blob_create().\n@param blob_handle A BLOB handle opened with ibase_blob_open().\n@param len Size of returned data.\n@return (PHP 4, PHP 5)\n@see ibase_blob_open() - Open blob for retrieving data parts\n@see ibase_blob_close() - Close blob\n@see ibase_blob_echo() - Output blob contents to browser\n
ibase_blob_import ibase_blob_import(resource $link_identifier, resource\n$file_handle) [string]\nCreate blob, copy file in it, and close it. This function creates a BLOB,\nreads an entire file into it, closes it and returns the assigned BLOB id.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@param file_handle The file handle is a handle returned by fopen().\n@return (PHP 4, PHP 5)\n@see ibase_blob_add() - Add data into a newly created blob\n@see ibase_blob_cancel() - Cancel creating blob\n@see ibase_blob_close() - Close blob\n@see ibase_blob_create() - Create a new blob for adding data\n
ibase_blob_info ibase_blob_info(resource $link_identifier, string $blob_id)\n[array]\nReturn blob length and other useful info. Returns the BLOB length and other\nuseful information.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@param blob_id A BLOB id.\n@return (PHP 4, PHP 5)\n
ibase_blob_open ibase_blob_open(resource $link_identifier, string $blob_id)\n[resource]\nOpen blob for retrieving data parts. Opens an existing BLOB for reading.\n@param link_identifier An InterBase link identifier. If omitted, the last\nopened link is assumed.\n@param blob_id A BLOB id.\n@return (PHP 4, PHP 5)\n@see ibase_blob_close() - Close blob\n@see ibase_blob_echo() - Output blob contents to browser\n@see ibase_blob_get() - Get len bytes data from open blob\n
ibase_close ibase_close([resource $connection_id=NULL]) [bool]\nClose a connection to an InterBase database. Closes the link to an\nInterBase database that&#039;s associated with a connection id returned from\nibase_connect(). Default transaction on link is committed, other transactions\nare rolled back.\n@param connection_id An InterBase link identifier returned from\nibase_connect(). If omitted, the last opened link is assumed.\n@return (PHP 4, PHP 5)\n@see ibase_connect() - Open a connection to an InterBase database\n@see ibase_pconnect() - Open a persistent connection to an InterBase database\n
ibase_commit_ret ibase_commit_ret([resource $link_or_trans_identifier=NULL])\n[bool]\nCommit a transaction without closing it. Commits a transaction without\nclosing it.\n@param link_or_trans_identifier If called without an argument, this function\ncommits the default transaction of the default link. If the argument is\na connection identifier, the default transaction of the corresponding\nconnection will be committed. If the argument is a transaction identifier,\nthe corresponding transaction will be committed. The transaction context\nwill be retained, so statements executed from within this transaction will\nnot be invalidated.\n@return (PHP 5)\n
ibase_commit ibase_commit([resource $link_or_trans_identifier=NULL]) [bool]\nCommit a transaction. Commits a transaction.\n@param link_or_trans_identifier If called without an argument, this function\ncommits the default transaction of the default link. If the argument is\na connection identifier, the default transaction of the corresponding\nconnection will be committed. If the argument is a transaction identifier,\nthe corresponding transaction will be committed.\n@return (PHP 4, PHP 5)\n
ibase_connect ibase_connect([string $database [, string $username [, string\n$password [, string $charset [, int $buffers [, int $dialect [, string $role\n[, int $sync]]]]]]]]) [resource]\nOpen a connection to an InterBase database. Establishes a connection to\nan InterBase server. In case a second call is made to ibase_connect()\nwith the same arguments, no new link will be established, but instead,\nthe link identifier of the already opened link will be returned. The link\nto the server will be closed as soon as the execution of the script ends,\nunless it&#039;s closed earlier by explicitly calling ibase_close().\n@param database The `database` argument has to be a valid path to database file\non the server it resides on. If the server is not local, it must be prefixed\nwith either &#039;hostname:&#039; (TCP/IP), &#039;//hostname/&#039; (NetBEUI)\nor &#039;hostname@&#039; (IPX/SPX), depending on the connection protocol used.\n@param username The user name. Can be set with the `ibase.default_user`\nphp.ini directive.\n@param password The password for `username`. Can be set with the\n`ibase.default_password` php.ini directive.\n@param charset `charset` is the default character set for a database.\n@param buffers `buffers` is the number of database buffers to allocate for\nthe server-side cache. If 0 or omitted, server chooses its own default.\n@param dialect `dialect` selects the default SQL dialect for any statement\nexecuted within a connection, and it defaults to the highest one supported\nby client libraries. Functional only with InterBase 6 and up.\n@param role Functional only with InterBase 5 and up.\n@param sync\n@return (PHP 4, PHP 5)\n@see ibase_pconnect() - Open a persistent connection to an InterBase database\n@see ibase_close() - Close a connection to an InterBase database\n
ibase_db_info ibase_db_info(resource $service_handle, string $db, int $action\n[, int $argument=0]) [string]\nRequest statistics about a database.\n
ibase_delete_user ibase_delete_user(resource $service_handle, string\n$user_name) [bool]\nDelete a user from a security database (only for IB6 or later). PHP 4 uses\n`server`, `dba_user_name` and `dba_user_password` instead of `service_handle`\nparameter. This function is currently not documented; only its argument list\nis available.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ibase_add_user() - Add a user to a security database (only for IB6\nor later)\n@see ibase_modify_user() - Modify a user to a security database (only for\nIB6 or later)\n
getRawResponseMessage HttpRequest::getRawResponseMessage(void) [public string]\nGet raw response message. Get the entire HTTP response.\n@return (PECL pecl_http >= 0.21.0)\n
getRequestMessage HttpRequest::getRequestMessage(void) [public HttpMessage]\nGet request message. Get sent HTTP message. If redirects were allowed\nand several responses were received, the data references the last received\nresponse. Use HttpMessage::getParentMessage() to access the data of previously\nsent requests within this request cycle. Note: Note that the internal request\nmessage is immutable, that means that the request message received through\nHttpRequest::getRequestMessage() will always look the same for the same\nrequest, regardless of any changes you may have made to the returned object.\n@return (PECL pecl_http >= 0.11.0)\n
getResponseBody HttpRequest::getResponseBody(void) [public string]\nGet response body. Get the response body after the request has been sent. If\nredirects were allowed and several responses were received, the data references\nthe last received response.\n@return (PECL pecl_http >= 0.10.0)\n
getResponseCode HttpRequest::getResponseCode(void) [public int]\nGet response code. Get the response code after the request has been sent. If\nredirects were allowed and several responses were received, the data references\nthe last received response.\n@return (PECL pecl_http >= 0.10.0)\n
getResponseCookies HttpRequest::getResponseCookies([int $flags=0 [, array\n$allowed_extras]]) [public array]\nGet response cookie(s). Get response cookie(s) after the request has been\nsent. If redirects were allowed and several responses were received, the\ndata references the last received response.\n@param flags http_parse_cookie() flags\n@param allowed_extras allowed keys treated as extra information instead of\ncookie names\n@return (PECL pecl_http >= 0.23.0)\n
getResponseData HttpRequest::getResponseData(void) [public array]\nGet response data. * Get all response data after the request has been\nsent. If redirects were allowed and several responses were received, the\ndata references the last received response.\n@return (PECL pecl_http >= 0.10.0)\n
getResponseHeader HttpRequest::getResponseHeader([string $name]) [public mixed]\nGet response header(s). Get response header(s) after the request has been\nsent. If redirects were allowed and several responses were received, the\ndata references the last received response.\n@param name header to read; if empty, all response headers will be returned\n@return (PECL pecl_http >= 0.10.0)\n
getResponseInfo HttpRequest::getResponseInfo([string $name]) [public mixed]\nGet response info. Get response info after the request has been sent. See\nhttp_get() for a full list of returned info. If redirects were allowed\nand several responses were received, the data references the last received\nresponse.\n@param name the info to read; if empty or omitted, an associative array\ncontaining all available info will be returned\n@return (PECL pecl_http >= 0.10.0)\n
getResponseMessage HttpRequest::getResponseMessage(void) [public HttpMessage]\nGet response message. Get the full response as HttpMessage object after the\nrequest has been sent. If redirects were allowed and several responses\nwere received, the data references the last received response. Use\nHttpMessage::getParentMessage() to access the data of previously received\nresponses within this request cycle.\n@return (PECL pecl_http >= 0.10.0)\n
getResponseStatus HttpRequest::getResponseStatus(void) [public string]\nGet response status. Get the response status (i.e. the string after the\nresponse code) after the message has been sent.\n@return (PECL pecl_http >= 0.23.0)\n
getSslOptions HttpRequest::getSslOptions(void) [public array]\nGet ssl options. Get previously set SSL options.\n@return (PECL pecl_http >= 0.10.0)\n
getUrl HttpRequest::getUrl(void) [public string]\nGet url. Get the previously set request URL.\n@return (PECL pecl_http >= 0.10.0)\n
resetCookies HttpRequest::resetCookies([bool $session_only=false])\n[public bool]\nReset cookies. Reset all automatically received/sent cookies. Note: Note\nthat custom set cookies are not affected.\n@param session_only whether only session cookies should be reset (needs\nlibcurl >= v7.15.4, else libcurl >= v7.14.1)\n@return (PECL pecl_http >= 1.0.0)\n
send HttpRequest::send(void) [public HttpMessage]\nSend request. Send the HTTP request. Note: While an exception may be thrown,\nthe transfer could have succeeded at least partially, so you might want to\ncheck the return values of various HttpRequest::getResponse*() methods.\n@return (PECL pecl_http >= 0.10.0)\n
setContentType HttpRequest::setContentType(string $content_type) [public bool]\nSet content type. Set the content type the post request should have.\n@param content_type the content type of the request (primary/secondary)\n@return (PECL pecl_http >= 0.10.0)\n
setCookies HttpRequest::setCookies([array $cookies]) [public bool]\nSet cookies. Set custom cookies.\n@param cookies an associative array as parameter containing cookie name/value\npairs; if empty or omitted, all previously set cookies will be unset\n@return (PECL pecl_http >= 0.12.0)\n
setHeaders HttpRequest::setHeaders([array $headers]) [public bool]\nSet headers. Set request header name/value pairs.\n@param headers an associative array as parameter containing header name/value\npairs; if empty or omitted, all previously set headers will be unset\n@return (PECL pecl_http >= 0.12.0)\n
setMethod HttpRequest::setMethod(int $request_method) [public bool]\nSet method. Set the request method.\n@param request_method the request method to use\n@return (PECL pecl_http >= 0.10.0)\n
setOptions HttpRequest::setOptions([array $options]) [public bool]\nSet options. Set the request options to use. See the full list of request\noptions.\n@param options an associative array, which values will overwrite the currently\nset request options; if empty or omitted, the options of the HttpRequest\nobject will be reset\n@return (PECL pecl_http >= 0.10.0)\n
setPostFields HttpRequest::setPostFields(array $post_data) [public bool]\nSet post fields. Set the POST data entries, overwriting previously set POST\ndata. Affects only POST and custom requests.\n@param post_data an associative array containing the post fields; if empty,\nthe post data will be unset\n@return (PECL pecl_http >= 0.10.0)\n
setPostFiles HttpRequest::setPostFiles(array $post_files) [public bool]\nSet post files. Set files to post, overwriting previously set post\nfiles. Affects only POST and requests. Cannot be used with raw post data.\n@param post_files an array containing the files to post; if empty, the post\nfiles will be unset\n@return (PECL pecl_http >= 0.10.0)\n
setPutData HttpRequest::setPutData([string $put_data]) [public bool]\nSet put data. Set PUT data to send, overwriting previously set PUT\ndata. Affects only PUT requests. Only either PUT data or PUT file can be\nused for each request. PUT data has higher precedence and will be used even\nif a PUT file is set.\n@param put_data the data to upload\n@return (PECL pecl_http >= 0.25.0)\n
setPutFile HttpRequest::setPutFile([string $file=&quot;&quot;]) [public bool]\nSet put file. Set file to put. Affects only PUT requests.\n@param file the path to the file to send; if empty or omitted the put file\nwill be unset\n@return (PECL pecl_http >= 0.10.0)\n
setQueryData HttpRequest::setQueryData(mixed $query_data) [public bool]\nSet query data. Set the URL query parameters to use, overwriting previously\nset query parameters. Affects any request types.\n@param query_data a string or associative array parameter containing the\npre-encoded query string or to be encoded query fields; if empty, the query\ndata will be unset\n@return (PECL pecl_http >= 0.10.0)\n
setRawPostData HttpRequest::setRawPostData([string $raw_post_data])\n[public bool]\nSet raw post data. Set raw post data to send, overwriting previously set\nraw post data. Don&#039;t forget to specify a content type. Affects only\nPOST and custom requests. Only either post fields or raw post data can be\nused for each request. Raw post data has higher precedence and will be used\neven if post fields are set.\n@param raw_post_data raw post data\n@return (PECL pecl_http 0.14.0-1.4.1)\n
setSslOptions HttpRequest::setSslOptions([array $options]) [public bool]\nSet ssl options. Set SSL options.\n@param options an associative array containing any SSL specific options;\nif empty or omitted, the SSL options will be reset\n@return (PECL pecl_http >= 0.10.0)\n
setUrl HttpRequest::setUrl(string $url) [public bool]\nSet URL. Set the request URL.\n@param url the request url\n@return (PECL pecl_http >= 0.10.0)\n
attach HttpRequestPool::attach(HttpRequest $request) [public bool]\nAttach HttpRequest. Attach an HttpRequest object to this HttpRequestPool. Set\nall options prior attaching!\n@param request an HttpRequest object not already attached to any\nHttpRequestPool object\n@return (PECL pecl_http >= 0.10.0)\n
__construct HttpRequestPool::__construct([HttpRequest $request]) [void]\nHttpRequestPool constructor. Instantiate a new HttpRequestPool object. An\nHttpRequestPool is able to send several HttpRequests in parallel. Accepts\nvirtually infinite optional parameters each referencing an HttpRequest object.\n@param request HttpRequest object to attach\n
__destruct HttpRequestPool::__destruct(void) [void]\nHttpRequestPool destructor. Clean up HttpRequestPool object.\n
detach HttpRequestPool::detach(HttpRequest $request) [bool]\nDetach HttpRequest. Detach an HttpRequest object from this HttpRequestPool.\n@param request an HttpRequest object attached to this HttpRequestPool object\n@return (PECL pecl_http >= 0.10.0)\n
getAttachedRequests HttpRequestPool::getAttachedRequests(void) [array]\nGet attached requests. Get attached HttpRequest objects.\n@return (PECL pecl_http >= 0.16.0)\n
getFinishedRequests HttpRequestPool::getFinishedRequests(void) [array]\nGet finished requests. Get attached HttpRequest objects that already have\nfinished their work.\n@return (PECL pecl_http >= 0.16.0)\n
reset HttpRequestPool::reset(void) [void]\nReset request pool. Detach all attached HttpRequest objects.\n
send HttpRequestPool::send(void) [bool]\nSend all requests. Send all attached HttpRequest objects in parallel.\n@return (PECL pecl_http >= 0.10.0)\n
socketPerform HttpRequestPool::socketPerform(void) [protected bool]\nPerform socket actions. Returns TRUE until each request has finished its\ntransaction.\n@return (PECL pecl_http >= 0.15.0)\n
socketSelect HttpRequestPool::socketSelect([float $timeout=0]) [protected bool]\nPerform socket select.\n@return (PECL pecl_http >= 0.10.0)\n
capture HttpResponse::capture(void) [static void]\nCapture script output. Capture script output.\n@see HttpResponse::send() - Send response\n
getBufferSize HttpResponse::getBufferSize(void) [static int]\nGet buffer size. Get current buffer size.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setBufferSize() - Set buffer size\n@see HttpResponse::getThrottleDelay() - Get throttle delay\n@see HttpResponse::setThrottleDelay() - Set throttle delay\n
getCache HttpResponse::getCache(void) [static bool]\nGet cache. Get current caching setting.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setCacheControl() - Set cache control\n@see HttpResponse::getCacheControl() - Get cache control\n@see HttpResponse::setCache() - Set cache\n
getCacheControl HttpResponse::getCacheControl(void) [static string]\nGet cache control. Get current `Cache-Control` header setting.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setCacheControl() - Set cache control\n@see HttpResponse::setCache() - Set cache\n@see HttpResponse::getCache() - Get cache\n
getContentDisposition HttpResponse::getContentDisposition(void) [static string]\nGet content disposition. Get current `Content-Disposition` setting.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setContentDisposition() - Set content disposition\n@see HttpResponse::getContentType() - Get content type\n@see HttpResponse::setContentType() - Set content type\n
getContentType HttpResponse::getContentType(void) [static string]\nGet content type. Get current `Content-Type` header setting.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getContentDisposition() - Get content disposition\n@see HttpResponse::setContentDisposition() - Set content disposition\n@see HttpResponse::setContentType() - Set content type\n@see HttpResponse::guessContentType() - Guess content type\n
getData HttpResponse::getData(void) [static string]\nGet data. Get the previously set data to be sent.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setData() - Set data\n@see HttpResponse::getFile() - Get file\n@see HttpResponse::setFile() - Set file\n@see HttpResponse::getStream() - Get Stream\n@see HttpResponse::setStream() - Set stream\n
getETag HttpResponse::getETag(void) [static string]\nGet ETag. Get calculated or previously set custom `ETag`.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getLastModified() - Get last modified\n@see HttpResponse::setLastModified() - Set last modified\n@see HttpResponse::setETag() - Set ETag\n
getFile HttpResponse::getFile(void) [static string]\nGet file. Get the previously set file to be sent.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getData() - Get data\n@see HttpResponse::setData() - Set data\n@see HttpResponse::setFile() - Set file\n@see HttpResponse::getStream() - Get Stream\n@see HttpResponse::setStream() - Set stream\n
getGzip HttpResponse::getGzip(void) [static bool]\nGet gzip. Get current gzip&#039;ing setting.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setGzip() - Set gzip\n
getHeader HttpResponse::getHeader([string $name]) [static mixed]\nGet header. Get header(s) about to be sent. Note: This may not work as\nexpected with the following SAPI(s): Apache2 w/PHP &lt; 5.1.3.\n@param name specifies the name of the header to read; if empty or omitted,\nan associative array with all headers will be returned\n@return (PECL pecl_http >= 0.12.0)\n@see HttpResponse::setHeader() - Set header\n
getLastModified HttpResponse::getLastModified(void) [static int]\nGet last modified. Get calculated or previously set custom `Last-Modified`\ndate.\n@return (PECL pecl_http >= 0.12.0)\n@see HttpResponse::setLastModified() - Set last modified\n@see HttpResponse::getETag() - Get ETag\n@see HttpResponse::setETag() - Set ETag\n
getRequestBody HttpResponse::getRequestBody(void) [static string]\nGet request body. This function is an alias of: http_get_request_body().\n
getRequestBodyStream HttpResponse::getRequestBodyStream(void) [static resource]\nGet request body stream. This function is an alias of:\nhttp_get_request_body_stream().\n
getRequestHeaders HttpResponse::getRequestHeaders(void) [static array]\nGet request headers. This function is an alias of: http_get_request_headers().\n
getStream HttpResponse::getStream(void) [static resource]\nGet Stream. Get the previously set resource to be sent.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getData() - Get data\n@see HttpResponse::setData() - Set data\n@see HttpResponse::getFile() - Get file\n@see HttpResponse::setFile() - Set file\n@see HttpResponse::setStream() - Set stream\n
getThrottleDelay HttpResponse::getThrottleDelay(void) [static double]\nGet throttle delay. Get the current throttle delay.\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getBufferSize() - Get buffer size\n@see HttpResponse::setBufferSize() - Set buffer size\n@see HttpResponse::setThrottleDelay() - Set throttle delay\n
guessContentType HttpResponse::guessContentType(string $magic_file [, int\n$magic_mode=MAGIC_MIME]) [static string]\nGuess content type. Attempts to guess the content type of supplied payload\nthrough libmagic. If the attempt is successful, the guessed `Content-Type`\nwill automatically be set as response `Content-Type`.\n@param magic_file specifies the magic.mime database to use\n@param magic_mode flags for libmagic\n@return (PECL pecl_http >= 0.13.0)\n@see HttpResponse::getContentType() - Get content type\n@see HttpResponse::setContentType() - Set content type\n
redirect HttpResponse::redirect([string $url [, array $params [, bool\n$session=false [, int $status]]]]) [static void]\nRedirect. This function is an alias of: http_redirect().\n
send HttpResponse::send([bool $clean_ob=true]) [static bool]\nSend response. Finally send the entity. A successful caching attempt will\nexit PHP, and write a log entry if the INI setting http.log.cache is set. See\nthe INI setting http.force_exit for what &quot;exits&quot; means.\n@param clean_ob whether to destroy all previously started output handlers\nand their buffers\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::capture() - Capture script output\n
setBufferSize HttpResponse::setBufferSize(int $bytes) [static bool]\nSet buffer size. Sets the send buffer size of the throttling mechanism. Note:\nProvides a basic throttling mechanism, which will yield the current process\nor thread until the entity has been completely sent. Note: This may not work\nas expected with the following SAPI(s): FastCGI.\n@param bytes the chunk size in bytes\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getBufferSize() - Get buffer size\n@see HttpResponse::getThrottleDelay() - Get throttle delay\n@see HttpResponse::setThrottleDelay() - Set throttle delay\n
setCache HttpResponse::setCache(bool $cache) [static bool]\nSet cache. Whether it should be attempted to cache the entity. This will\nresult in necessary caching headers and checks of clients `If-Modified-Since`\nand `If-None-Match` headers. If one of those headers matches a `304 Not\nModified` status code will be issued. Note: If you&#039;re using sessions,\nbe sure that you set session.cache_limiter to something more appropriate\nthan &quot;no-cache&quot;!\n@param cache whether caching should be attempted\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::setCacheControl() - Set cache control\n@see HttpResponse::getCacheControl() - Get cache control\n@see HttpResponse::getCachel()\n
setCacheControl HttpResponse::setCacheControl(string $control [, int $max_age=0\n[, bool $must_revalidate=true]]) [static bool]\nSet cache control. Define a custom `Cache-Control` header, usually being\nprivate or public;\n@param control the primary cache control setting\n@param max_age the max-age in seconds, suggesting how long the cache entry\nis valid on the client side\n@param must_revalidate whether the cached entity should be revalidated by\nthe client for every request\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getCacheControl() - Get cache control\n@see HttpResponse::setCache() - Set cache\n@see HttpResponse::getCache() - Get cache\n
setContentDisposition HttpResponse::setContentDisposition(string $filename\n[, bool $inline=false]) [static bool]\nSet content disposition. Set the `Content-Disposition`. The\n`Content-Disposition` header is very useful if the data actually being sent\ncame from a file or something similar, that should be &quot;saved&quot; by the\nclient/user (i.e. by the browser&#039;s &quot;Save as...&quot; popup window).\n@param filename the file name the &quot;Save as...&quot; dialog should display\n@param inline if set to true and the user agent knows how to handle the\ncontent type, it will probably not cause the popup window to be shown\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getContentDisposition() - Get content disposition\n@see HttpResponse::getContentType() - Get content type\n@see HttpResponse::setContentType() - Set content type\n
setContentType HttpResponse::setContentType(string $content_type) [static bool]\nSet content type. Set the `Content-Type` of the sent entity.\n@param content_type the content type of the sent entity (primary/secondary)\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getContentDisposition() - Get content disposition\n@see HttpResponse::setContentDisposition() - Set content disposition\n@see HttpResponse::getContentType() - Get content type\n@see HttpResponse::guessContentType() - Guess content type\n
setData HttpResponse::setData(mixed $data) [static bool]\nSet data. Set the data to be sent. Note: Previously calculated or defined\n`ETag` and `Last-Modified` will be recalculated and redefined.\n@param data data to send\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getData() - Get data\n@see HttpResponse::getFile() - Get file\n@see HttpResponse::setFile() - Set file\n@see HttpResponse::getStream() - Get Stream\n@see HttpResponse::setStream() - Set stream\n
setETag HttpResponse::setETag(string $etag) [static bool]\nSet ETag. Set a custom `ETag`. Use this only if you know what you&#039;re\ndoing.\n@param etag unquoted string as parameter containing the ETag\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getLastModified() - Get last modified\n@see HttpResponse::setLastModified() - Set last modified\n@see HttpResponse::getETag() - Get ETag\n
setFile HttpResponse::setFile(string $file) [static bool]\nSet file. Set the file to be sent. Note: Previously calculated or defined\n`ETag` and `Last-Modified` will be recalculated and redefined.\n@param file the path to the file to send\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getData() - Get data\n@see HttpResponse::setData() - Set data\n@see HttpResponse::getFile() - Get file\n@see HttpResponse::getStream() - Get Stream\n@see HttpResponse::setStream() - Set stream\n
setGzip HttpResponse::setGzip(bool $gzip) [static bool]\nSet gzip. Enable on-thy-fly gzip&#039;ing of the sent entity.\n@param gzip whether GZip compression should be enabled\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getGzip() - Get gzip\n
setHeader HttpResponse::setHeader(string $name [, mixed $value [, bool\n$replace=true]]) [static bool]\nSet header. Send an HTTP header.\n@param name the name of the header\n@param value the value of the header; if not set, no header with this name\nwill be sent\n@param replace whether an existing header should be replaced\n@return (PECL pecl_http >= 0.12.0)\n@see HttpResponse::getHeader() - Get header\n
setLastModified HttpResponse::setLastModified(int $timestamp) [static bool]\nSet last modified. Set a custom `Last-Modified` date.\n@param timestamp Unix timestamp representing the last modification time of\nthe sent entity\n@return (PECL pecl_http >= 0.12.0)\n@see HttpResponse::getLastModified() - Get last modified\n@see HttpResponse::getETag() - Get ETag\n@see HttpResponse::setETag() - Set ETag\n
setStream HttpResponse::setStream(resource $stream) [static bool]\nSet stream. Set the resource to be sent. Note: Previously calculated or\ndefined `ETag` and `Last-Modified` will be recalculated and redefined.\n@param stream already opened stream from which the data to send will be read\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getData() - Get data\n@see HttpResponse::setData() - Set data\n@see HttpResponse::getFile() - Get file\n@see HttpResponse::setFile() - Set file\n@see HttpResponse::getStream() - Get Stream\n
setThrottleDelay HttpResponse::setThrottleDelay(float $seconds) [static bool]\nSet throttle delay. Sets the throttle delay. Note: Provides a basic throttling\nmechanism, which will yield the current process or thread until the entity has\nbeen completely sent. Note: This may not work as expected with the following\nSAPI(s): FastCGI.\n@param seconds seconds to sleep after each chunk sent\n@return (PECL pecl_http >= 0.10.0)\n@see HttpResponse::getBufferSize() - Get buffer size\n@see HttpResponse::setBufferSize() - Set buffer size\n@see HttpResponse::getThrottleDelay() - Get throttle delay\n
status HttpResponse::status(int $status) [static bool]\nSend HTTP response status. This function is an alias of: http_send_status().\n
hw_Array2Objrec string hw_array2objrec ( array $object_array )\nConvert attributes from object array to object record. Converts an\n`object_array` into an object record. Multiple attributes like\n&#039;Title&#039; in different languages are treated properly.\n@param object_array The array.\n@return (PHP 4)\n@see hw_objrec2array() - Convert attributes from object record to object array\n
hw_changeobject hw_changeobject(int $link, int $objid, array $attributes)\n[bool]\nChanges attributes of an object (obsolete). WarningThis function is currently\nnot documented; only its argument list is available.\n
hw_Children array hw_children ( int $connection , int $objectID )\nObject ids of children. Returns the identifiers of the collection children.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n
hw_ChildrenObj array hw_childrenobj ( int $connection , int $objectID )\nObject records of children. Returns the object records of the collection\nchildren.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n
hw_Close bool hw_close ( int $connection )\nCloses the Hyperwave connection. Closes down the connection to a Hyperwave\nserver.\n@param connection The connection identifier.\n@return (PHP 4)\n
hw_Connect int hw_connect ( string $host , int $port [, string $username ],\nstring $password )\nOpens a connection. Opens a connection to a Hyperwave server. You can have\nmultiple connections open at once.\n@param host The server host name.\n@param port The server port number.\n@param username The Hyperwave user name. If omitted, no identification with\nthe server will be done. It is similar to identify as user anonymous.\n@param password The password for `username`. Keep in mind, that the password\nis not encrypted.\n@return (PHP 4)\n@see hw_pconnect() - Make a persistent database connection\n
hw_connection_info hw_connection_info(int $link) [void]\nPrints information about the connection to Hyperwave server. WarningThis\nfunction is currently not documented; only its argument list is available.\n
hw_cp hw_cp(int $connection, array $object_id_array, int $destination_id) [int]\nCopies objects. Copies the objects with object ids as specified in the second\nparameter to the collection with the id `destination id`.\n@param connection The connection identifier.\n@param object_id_array An array of object ids.\n@param destination_id The target collection id.\n@return (PHP 4)\n@see hw_mv() - Moves objects\n
hw_Deleteobject bool hw_deleteobject ( int $connection , int $object_to_delete\n)\nDeletes object. Deletes the object with the given object id in the second\nparameter. It will delete all instances of the object.\n@param connection The connection identifier.\n@param object_to_delete The object identifier.\n@return (PHP 4)\n@see hw_mv() - Moves objects\n
hw_DocByAnchor int hw_docbyanchor ( int $connection , int $anchorID )\nObject id object belonging to anchor. Returns an th object id of the document\nto which `anchorID` belongs.\n@param connection The connection identifier.\n@param anchorID The anchor identifier.\n@return (PHP 4)\n
hw_DocByAnchorObj string hw_docbyanchorobj ( int $connection , int $anchorID )\nObject record object belonging to anchor. Returns an th object record of\nthe document to which `anchorID` belongs.\n@param connection The connection identifier.\n@param anchorID The anchor identifier.\n@return (PHP 4)\n
hw_Document_Attributes string hw_document_attributes ( int $hw_document )\nObject record of hw_document. Returns the object record of the document. For\nbackward compatibility, hw_documentattributes() is also accepted. This is\ndeprecated, however.\n@param hw_document The document identifier.\n@return (PHP 4)\n@see hw_document_bodytag() - Body tag of hw_document\n@see hw_document_size() - Size of hw_document\n
hw_Document_BodyTag string hw_document_bodytag ( int $hw_document [, string\n$prefix ] )\nBody tag of hw_document. Returns the BODY tag of the document. If the document\nis an HTML document the BODY tag should be printed before the document. For\nbackward compatibility, hw_documentbodytag() is also accepted. This is\ndeprecated, however.\n@param hw_document The document identifier.\n@param prefix\n@return (PHP 4)\n@see hw_document_attributes() - Object record of hw_document\n@see hw_document_size() - Size of hw_document\n
hw_Document_Content string hw_document_content ( int $hw_document )\nReturns content of hw_document. Gets the content of the document.\n@param hw_document The document identifier.\n@return (PHP 4)\n@see hw_document_attributes() - Object record of hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_document_setcontent() - Sets/replaces content of hw_document\n
hw_Document_SetContent bool hw_document_setcontent ( int $hw_document ,\nstring $content )\nSets/replaces content of hw_document. Sets or replaces the content of the\ndocument. If the document is an HTML document the content is everything after\nthe BODY tag. Information from the HEAD and BODY tag is in the stored in the\nobject record. If you provide this information in the content of the document\ntoo, the Hyperwave server will change the object record accordingly when\nthe document is inserted. Probably not a very good idea. If this functions\nfails the document will retain its old content.\n@param hw_document The document identifier.\n@param content\n@return (PHP 4)\n@see hw_document_attributes() - Object record of hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_document_content() - Returns content of hw_document\n
hw_Document_Size int hw_document_size ( int $hw_document )\nSize of hw_document. Gets the size of the document. For backward compatibility,\nhw_documentsize() is also accepted. This is deprecated, however.\n@param hw_document The document identifier.\n@return (PHP 4)\n@see hw_document_attributes() - Object record of hw_document\n@see hw_document_bodytag() - Body tag of hw_document\n
hw_dummy hw_dummy(int $link, int $id, int $msgid) [string]\nHyperwave dummy function. WarningThis function is currently not documented;\nonly its argument list is available.\n
hw_EditText bool hw_edittext ( int $connection , int $hw_document )\nRetrieve text document. Uploads the text document to the server. The\nobject record of the document may not be modified while the document is\nedited. This function will only works for pure text documents. It will not\nopen a special data connection and therefore blocks the control connection\nduring the transfer.\n@param connection The connection identifier.\n@param hw_document The document identifier.\n@return (PHP 4)\n@see hw_pipedocument() - Retrieve any document\n@see hw_free_document() - Frees hw_document\n@see hw_document_bodytag() - Body tag of hw_document\n@see hw_document_size() - Size of hw_document\n@see hw_output_document() - Prints hw_document\n@see hw_gettext() - Retrieve text document\n
hw_Error int hw_error ( int $connection )\nError number. Returns the last error number, for the last command.\n@param connection The connection identifier.\n@return (PHP 4)\n@see hw_errormsg() - Returns error message\n
hw_ErrorMsg string hw_errormsg ( int $connection )\nReturns error message. Returns a string containing the last error message\nrelated to the last command.\n@param connection The connection identifier.\n@return (PHP 4)\n@see hw_error() - Error number\n
hw_Free_Document bool hw_free_document ( int $hw_document )\nFrees hw_document. Frees the memory occupied by the Hyperwave document.\n@param hw_document The document identifier.\n@return (PHP 4)\n
hw_GetAnchors array hw_getanchors ( int $connection , int $objectID )\nObject ids of anchors of document. Returns an array of object ids with\nanchors of the specified document.\n@param connection The connection identifier.\n@param objectID The document object id.\n@return (PHP 4)\n
hw_GetAnchorsObj array hw_getanchorsobj ( int $connection , int $objectID )\nObject records of anchors of document. Returns records with anchors of the\ndocument with object ID `objectID`.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n
hw_GetAndLock string hw_getandlock ( int $connection , int $objectID )\nReturn object record and lock object. Returns the object record for the\nobject with ID `objectID`. It will also lock the object, so other users\ncannot access it until it is unlocked.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_unlock() - Unlock object\n@see hw_getobject() - Object record\n
hw_GetChildColl array hw_getchildcoll ( int $connection , int $objectID )\nObject ids of child collections. Returns object ids. Each object ID belongs\nto a child collection of the collection with ID `objectID`. The function\nwill not return child documents.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_children() - Object ids of children\n@see hw_getchilddoccoll() - Object ids of child documents of collection\n
hw_GetChildCollObj array hw_getchildcollobj ( int $connection , int $objectID )\nObject records of child collections. Returns object records. Each object\nrecords belongs to a child collection of the collection with ID `objectID`. The\nfunction will not return child documents.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_childrenobj() - Object records of children\n@see hw_getchilddoccollobj() - Object records of child documents of collection\n
hw_GetChildDocColl array hw_getchilddoccoll ( int $connection , int $objectID )\nObject ids of child documents of collection. Returns array of object ids\nfor child documents of a collection.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_children() - Object ids of children\n@see hw_getchildcoll() - Object ids of child collections\n
hw_GetChildDocCollObj array hw_getchilddoccollobj ( int $connection , int\n$objectID )\nObject records of child documents of collection. Returns an array of object\nrecords for child documents of a collection.\n@param connection The connection identifier.\n@param objectID The object identifier.\n@return (PHP 4)\n@see hw_childrenobj() - Object records of children\n@see hw_getchildcollobj() - Object records of child collections\n
hw_GetObject mixed hw_getobject ( int $connection , mixed $objectID [,\nstring $query ] )\nObject record. Gets an object record. If the second parameter is an array\nof integer the function will\n@param connection The connection identifier.\n@param objectID The object identifier, or an array of identifiers.\n@return (PHP 4)\n@see hw_getandlock() - Return object record and lock object\n@see hw_getobjectbyquery() - Search object\n
http_parse_cookie http_parse_cookie(string $cookie [, int $flags [, array\n$allowed_extras]]) [object]\nParse HTTP cookie. Parses HTTP cookies like sent in a response into a struct.\n@param cookie string containing the value of a `Set-Cookie` response header\n@param flags parse flags (HTTP_COOKIE_PARSE_RAW)\n@param allowed_extras array containing recognized extra keys; by default\nall unknown keys will be treated as cookie names\n@return (PECL pecl_http >= 0.20.0)\n@see http_parse_headers() - Parse HTTP headers\n@see http_parse_message() - Parse HTTP messages\n@see http_build_cookie() - Build cookie string\n
http_parse_headers http_parse_headers(string $header) [array]\nParse HTTP headers. Parses HTTP headers into an associative array.\n@param header string containing HTTP headers\n@return (PECL pecl_http >= 0.10.0)\n@see http_parse_message() - Parse HTTP messages\n@see http_parse_cookie() - Parse HTTP cookie\n
http_parse_message http_parse_message(string $message) [object]\nParse HTTP messages. Parses the HTTP `message` into a simple recursive object.\n@param message string containing a single HTTP message or several consecutive\nHTTP messages\n@return (PECL pecl_http >= 0.12.0)\n@see http_parse_headers() - Parse HTTP headers\n@see the HttpMessage class\n
http_parse_params http_parse_params(string $param [, int\n$flags=HTTP_PARAMS_DEFAULT]) [object]\nParse parameter list. Parse parameter list. See the params parsing constants\ntable for possible values of the `flags` argument.\n@param param Parameters\n@param flags Parse flags\n@return (PECL pecl_http >= 1.0.0)\n@see http_parse_headers() - Parse HTTP headers\n@see http_parse_cookie() - Parse HTTP cookie\n@see http_parse_message() - Parse HTTP messages\n
http_persistent_handles_clean http_persistent_handles_clean([string $ident])\n[string]\nClean up persistent handles. Clean up (close) persistent handles, optionally\nidentified with ident.\n@param clean the identification string\n@return (PECL pecl_http >= 1.5.0)\n@see http_persistent_handles_ident() - Get/set ident of persistent handles\n@see http_persistent_handles_count() - Stat persistent handles\n
http_persistent_handles_count http_persistent_handles_count(void) [object]\nStat persistent handles. List statistics about persistent handles usage.\n@return (PECL pecl_http >= 1.5.0)\n@see http_persistent_handles_ident() - Get/set ident of persistent handles\n@see http_persistent_handles_clean() - Clean up persistent handles\n
http_persistent_handles_ident http_persistent_handles_ident([string $ident])\n[string]\nGet/set ident of persistent handles. Query or define the ident of persistent\nhandles.\n@param ident the identification string\n@return (PECL pecl_http >= 1.5.0)\n@see http_persistent_handles_count() - Stat persistent handles\n@see http_persistent_handles_clean() - Clean up persistent handles\n
http_post_data http_post_data(string $url, string $data [, array $options\n[, array &$info]]) [string]\nPerform POST request with pre-encoded data. Performs an HTTP POST request\non the supplied url. See the full list of request options.\n@param url URL\n@param data String containing the pre-encoded post data\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.1.0)\n
http_post_fields http_post_fields(string $url, array $data [, array $files\n[, array $options [, array &$info]]]) [string]\nPerform POST request with data to be encoded. Performs an HTTP POST request\non the supplied url. See the full list of request options.\n@param url URL\n@param data Associative array of POST values\n@param files Array of files to post\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.10.0)\n
http_put_data http_put_data(string $url, string $data [, array $options [,\narray &$info]]) [string]\nPerform PUT request with data. Performs an HTTP PUT request on the supplied\nurl. See the full list of request options.\n@param url URL\n@param data PUT request body\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.25.0)\n
http_put_file http_put_file(string $url, string $file [, array $options [,\narray &$info]]) [string]\nPerform PUT request with file. Performs an HTTP PUT request on the supplied\nurl. See the full list of request options.\n@param url URL\n@param file The file to put\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.10.0)\n
http_put_stream http_put_stream(string $url, resource $stream [, array $options\n[, array &$info]]) [string]\nPerform PUT request with stream. Performs an HTTP PUT request on the supplied\nurl. See the full list of request options.\n@param url URL\n@param stream The stream to read the PUT request body from\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.10.0)\n
http_redirect http_redirect([string $url [, array $params [, bool\n$session=false [, int $status=0]]]]) [bool]\nIssue HTTP redirect. Redirect to the given url. The supplied `url` will\nbe expanded with http_build_url(), the `params` array will be treated with\nhttp_build_str() and the session identification will be appended if `session`\nis true. The HTTP response code will be set according to `status`. You\ncan use one of the redirect constants for convenience. Please see &raquo;\nRFC 2616 for which redirect response code to use in which situation. By\ndefault PHP will decide which response status fits best. To be RFC compliant,\n&quot;Redirecting to &lt;a>URL&lt;/a>.&quot; will be displayed, if the client\ndoesn&#039;t redirect immediately, and the request method was another one\nthan HEAD. A log entry will be written to the redirect log, if the INI\nsetting http.log.redirect is set and the redirect attempt was successful.\n@param url the URL to redirect to\n@param params associative array of query parameters\n@param session whether to append session information\n@param status custom response status code\n@return (PECL pecl_http >= 0.1.0)\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_request_body_encode http_request_body_encode(array $fields, array $files)\n[string]\nEncode request body. Generate x-www-form-urlencoded resp. form-data encoded\nrequest body.\n@param fields POST fields\n@param files POST files\n@return (PECL pecl_http >= 1.0.0)\n
http_request_method_exists http_request_method_exists(mixed $method) [int]\nCheck whether request method exists. Check if a request method is registered\n(or available by default).\n@param method request method name or ID\n@return (PECL pecl_http >= 0.10.0)\n
http_request_method_name http_request_method_name(int $method) [string]\nGet request method name. Get the literal string representation of a standard\nor registered request method.\n@param method request method ID\n@return (PECL pecl_http >= 0.10.0)\n
http_request_method_register http_request_method_register(string $method) [int]\nRegister request method. Register a custom request method.\n@param method the request method name to register\n@return (PECL pecl_http >= 0.10.0)\n
http_request_method_unregister http_request_method_unregister(mixed $method)\n[bool]\nUnregister request method. Unregister a previously registered custom request\nmethod.\n@param method The request method name or ID\n@return (PECL pecl_http >= 0.10.0)\n
http_request http_request(int $method, string $url [, string $body [, array\n$options [, array &$info]]]) [string]\nPerform custom request. Performs a custom HTTP request on the supplied\nurl. See the full list of request options.\n@param method Request method\n@param url URL\n@param body Request body\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 1.0.0)\n
http_send_content_disposition http_send_content_disposition(string $filename\n[, bool $inline=false]) [bool]\nSend Content-Disposition. Send the `Content-Disposition`. The\n`Content-Disposition` header is very useful if the data actually being sent\ncame from a file or something similar, that should be &quot;saved&quot;\nby the client/user (i.e. by the browser&#039;s &quot;Save as...&quot;\npopup window). Note: This function should be used in conjunction with\nhttp_send_data(), http_send_file() and http_send_stream().\n@param filename the file name the &quot;Save as...&quot; dialog should display\n@param inline if set to TRUE and the user agent knows how to handle the\ncontent type, it will probably not cause the popup window to be shown\n@return (PECL pecl_http >= 0.10.0)\n@see http_send_data() - Send arbitrary data\n@see http_send_file() - Send file\n@see http_send_stream() - Send stream\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_content_type http_send_content_type([string\n$content_type=&quot;application/x-octetstream&quot;]) [bool]\nSend Content-Type. Send the `Content-Type` of the sent entity. Note: This\nfunction should be used in conjunction with http_send_data(), http_send_file()\nand http_send_stream().\n@param content_type the desired content type (primary/secondary)\n@return (PECL pecl_http >= 0.10.0)\n@see http_send_data() - Send arbitrary data\n@see http_send_file() - Send file\n@see http_send_stream() - Send stream\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_data http_send_data(string $data) [bool]\nSend arbitrary data. Sends raw data with support for (multiple) range requests.\n@param data data to send\n@return (PECL pecl_http >= 0.1.0)\n@see http_send_file() - Send file\n@see http_send_stream() - Send stream\n@see http_throttle() - HTTP throttling\n@see http_send_content_type() - Send Content-Type\n@see http_send_content_disposition() - Send Content-Disposition\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_file http_send_file(string $file) [bool]\nSend file. Sends a file with support for (multiple) range requests. This\nfunctions behaviour and further action is dependent on the following INI\nsettings: http.send.not_found_404 and http.log.not_found. If the INI setting\nhttp.send.not_found_404 is enabled and the INI setting http.log.not_found\npoints to a writable file, a log message is written when the `file` was\nnot found.\n@param file the file to send\n@return (PECL pecl_http >= 0.1.0)\n@see http_send_data() - Send arbitrary data\n@see http_send_stream() - Send stream\n@see http_throttle() - HTTP throttling\n@see http_send_content_type() - Send Content-Type\n@see http_send_content_disposition() - Send Content-Disposition\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_last_modified http_send_last_modified([int $timestamp]) [bool]\nSend Last-Modified. Send a `Last-Modified` header with a valid HTTP\ndate. Note: This function should be used in conjunction with http_send_data(),\nhttp_send_file() and http_send_stream().\n@param timestamp a Unix timestamp, converted to a valid HTTP date; if omitted,\nthe current time will be sent\n@return (PECL pecl_http >= 0.1.0)\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_status http_send_status(int $status) [bool]\nSend HTTP response status. Send HTTP status code.\n@param status HTTP status code (100-599)\n@return (PECL pecl_http >= 0.1.0)\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_send_stream http_send_stream(resource $stream) [bool]\nSend stream. Sends an already opened stream with support for (multiple)\nrange requests.\n@param stream stream to read from (must be seekable)\n@return (PECL pecl_http >= 0.1.0)\n@see http_send_data() - Send arbitrary data\n@see http_send_file() - Send file\n@see http_throttle() - HTTP throttling\n@see http_send_content_type() - Send Content-Type\n@see http_send_content_disposition() - Send Content-Disposition\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_support http_support([int $feature=0]) [int]\nCheck built-in HTTP support. Check for features that require external\nlibraries. See the feature support constants table for possible values for\nthe `feature` argument.\n@param feature feature to probe for\n@return (PECL pecl_http >= 0.15.0)\n
http_throttle http_throttle(float $sec [, int $bytes=40960]) [void]\nHTTP throttling. Sets the throttle delay and send buffer size. Note: This\nfunction should be used in conjunction with http_send_data(), http_send_file()\nand http_send_stream(). Note: Provides a basic throttling mechanism, which\nwill yield the current process or thread until the entity has been completely\nsent. Note: This may not work as expected with the following SAPI(s): FastCGI.\n@param sec seconds to sleep after each chunk sent\n@param bytes the chunk size in bytes\n@see http_send_data() - Send arbitrary data\n@see http_send_file() - Send file\n@see http_send_stream() - Send stream\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
__construct HttpDeflateStream::__construct([int $flags=0]) [public void]\nHttpDeflateStream class constructor. Creates a new HttpDeflateStream object\ninstance. See the deflate stream constants table for possible `flags`.\n@param flags initialization flags\n@see HttpDeflateStream::factory() - HttpDeflateStream class factory\n
factory HttpDeflateStream::factory([int $flags=0 [, string\n$class_name=&quot;HttpDeflateStream&quot;]]) [public HttpDeflateStream]\nHttpDeflateStream class factory. Creates a new HttpDeflateStream object\ninstance. See the deflate stream constants table for possible `flags`.\n@param flags initialization flags\n@param class_name name of a subclass of HttpDeflateStream\n@see HttpDeflateStream::__construct() - HttpDeflateStream class constructor\n
finish HttpDeflateStream::finish([string $data]) [public string]\nFinalize deflate stream. Finalizes the deflate stream. The deflate stream\ncan be reused after finalizing.\n@param data data to deflate\n@return (PECL pecl_http >= 0.21.0)\n
flush HttpDeflateStream::flush([string $data]) [public string]\nFlush deflate stream. Flushes the deflate stream.\n@param data more data to deflate\n@return (PECL pecl_http >= 0.21.0)\n
update HttpDeflateStream::update(string $data) [public string]\nUpdate deflate stream. Passes more data through the deflate stream.\n@param data data to deflate\n@return (PECL pecl_http >= 0.21.0)\n
__construct HttpInflateStream::__construct([int $flags=0]) [public void]\nHttpInflateStream class constructor. Creates a new HttpInflateStream object\ninstance. See the inflate constants table for possible `flags`.\n@param flags initialization flags\n@see HttpInflateStream::factory() - HttpInflateStream class factory\n
factory HttpInflateStream::factory([int $flags=0 [, string\n$class_name=&quot;HttpInflateStream&quot;]]) [public HttpInflateStream]\nHttpInflateStream class factory. Creates a new HttpInflateStream object\ninstance. See the inflate constants table for possible `flags`.\n@param flags initialization flags\n@param class_name name of a subclass of HttpInflateStream\n@see HttpInflateStream::__construct() - HttpInflateStream class constructor\n
finish HttpInflateStream::finish([string $data]) [public string]\nFinalize inflate stream. Finalizes the inflate stream. The inflate stream\ncan be reused after finalizing.\n@param data data to inflate\n@return (PECL pecl_http >= 0.21.0)\n
flush HttpInflateStream::flush([string $data]) [public string]\nFlush inflate stream. Flushes the inflate stream. Note: Flushing usually\nhas no effect on inflate streams.\n@param data more data to inflate\n@return (PECL pecl_http >= 0.21.0)\n
update HttpInflateStream::update(string $data) [public string]\nUpdate inflate stream. Passes more data through the inflate stream.\n@param data data to inflate\n@return (PECL pecl_http >= 0.21.0)\n
addHeaders HttpMessage::addHeaders(array $headers [, bool $append=false])\n[public void]\nAdd headers. Add headers. If append is true, headers with the same name will\nbe separated, else overwritten.\n@param headers associative array containing the additional HTTP headers to\nadd to the messages existing headers\n@param append if true, and a header with the same name of one to add exists\nalready, this respective header will be converted to an array containing\nboth header values, otherwise it will be overwritten with the new header value\n@return (PECL pecl_http >= 0.10.0)\n
__construct HttpMessage::__construct([string $message]) [public void]\nHttpMessage constructor. Instantiate a new HttpMessage object. The constructed\nobject will actually represent the last message of the passed string. If there\nwere prior messages, those can be accessed by HttpMessage::getParentMessage().\n@param message a single or several consecutive HTTP messages\n
detach HttpMessage::detach(void) [public HttpMessage]\nDetach HttpMessage. Returns a clone of an HttpMessage object detached from\nany parent messages.\n@return (PECL pecl_http >= 0.22.0)\n
factory HttpMessage::factory([string $raw_message [, string\n$class_name=&quot;HttpMessage&quot;]]) [static public HttpMessage]\nCreate HttpMessage from string. Create an HttpMessage object from a string.\n@param raw_message a single or several consecutive HTTP messages\n@param class_name a class extending HttpMessage\n@return (PECL pecl_http >= 1.4.0)\n@see HttpMessage::fromEnv() - Create HttpMessage from environment.\n
fromEnv HttpMessage::fromEnv(int $message_type [, string\n$class_name=&quot;HttpMessage&quot;]) [static public HttpMessage]\nCreate HttpMessage from environment. Create an HttpMessage object from\nscript environment.\n@param message_type The message type. See HttpMessage type constants.\n@param class_name a class extending HttpMessage\n@return (PECL pecl_http >= 1.5.0)\n@see HttpMessage::factory() - Create HttpMessage from string.\n
fromString HttpMessage::fromString([string $raw_message [, string\n$class_name=&quot;HttpMessage&quot;]]) [static public HttpMessage]\nCreate HttpMessage from string. Create an HttpMessage object from a\nstring. This function alias is deprecated and only exists for backwards\ncompatibility reasons. The use of this function is not recommended, as it\nmay be removed from PHP in the future.\n@param raw_message a single or several consecutive HTTP messages\n@param class_name a class extending HttpMessage\n@return (PECL pecl_http 0.10.0-1.3.3)\n@see HttpMessage::factory() - Create HttpMessage from string.\n
getBody HttpMessage::getBody(void) [public string]\nGet message body. Get the body of the parsed HttpMessage.\n@return (PECL pecl_http >= 0.10.0)\n
getHeader HttpMessage::getHeader(string $header) [public string]\nGet header. Get message header.\n@param header header name\n@return (PECL pecl_http >= 1.1.0)\n
getHeaders HttpMessage::getHeaders(void) [public array]\nGet message headers. Get message headers.\n@return (PECL pecl_http >= 0.10.0)\n
getHttpVersion HttpMessage::getHttpVersion(void) [public string]\nGet HTTP version. Get the HTTP Protocol Version of the Message.\n@return (PECL pecl_http >= 0.10.0)\n
getParentMessage HttpMessage::getParentMessage(void) [public HttpMessage]\nGet parent message. Get parent Message.\n@return (PECL pecl_http >= 0.10.0)\n
getRequestMethod HttpMessage::getRequestMethod(void) [public string]\nGet request method. Get the Request Method of the Message.\n@return (PECL pecl_http >= 0.10.0)\n
getRequestUrl HttpMessage::getRequestUrl(void) [public string]\nGet request URL. Get the Request URL of the Message.\n@return (PECL pecl_http >= 0.21.0)\n
getResponseCode HttpMessage::getResponseCode(void) [public int]\nGet response code. Get the Response Code of the Message.\n@return (PECL pecl_http >= 0.10.0)\n
getResponseStatus HttpMessage::getResponseStatus(void) [public string]\nGet response status. Get the Response Status of the message (i.e. the string\nfollowing the response code).\n@return (PECL pecl_http >= 0.23.0)\n
getType HttpMessage::getType(void) [public int]\nGet message type. Get Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST\nor HTTP_MSG_RESPONSE.\n@return (PECL pecl_http >= 0.10.0)\n
guessContentType HttpMessage::guessContentType(string $magic_file [, int\n$magic_mode=MAGIC_MIME]) [public string]\nGuess content type. Attempts to guess the content type of the message body\nthrough libmagic.\n@param magic_file the magic.mime database to use\n@param magic_mode flags for libmagic\n@return (PECL pecl_http >= 1.0.0)\n
prepend HttpMessage::prepend(HttpMessage $message [, bool $top=true])\n[public void]\nPrepend message(s). Prepends message(s) to the HTTP message.\n@param message HttpMessage object to prepend\n@param top whether to prepend to the top most or right this message\n
reverse HttpMessage::reverse(void) [public HttpMessage]\nReverse message chain. Reorders the message chain in reverse order.\n@return (PECL pecl_http >= 0.23.0)\n
send HttpMessage::send(void) [public bool]\nSend message. Send the Message according to its type as Response or\nRequest. This provides limited functionality compared to HttpRequest and\nHttpResponse.\n@return (PECL pecl_http >= 0.10.0)\n
setBody HttpMessage::setBody(string $body) [public void]\nSet message body. Set the body of the HttpMessage. Note: Don&#039;t forget\nto update any headers accordingly.\n@param body the new body of the message\n
setHeaders HttpMessage::setHeaders(array $headers) [public void]\nSet headers. Sets new headers.\n@param headers associative array containing the new HTTP headers, which will\nreplace all previous HTTP headers of the message\n
setHttpVersion HttpMessage::setHttpVersion(string $version) [public bool]\nSet HTTP version. Set the HTTP Protocol version of the Message.\n@param version the HTTP protocol version\n@return (PECL pecl_http >= 0.10.0)\n
setRequestMethod HttpMessage::setRequestMethod(string $method) [public bool]\nSet request method. Set the Request Method of the HTTP Message.\n@param method the request method name\n@return (PECL pecl_http >= 0.10.0)\n
setRequestUrl HttpMessage::setRequestUrl(string $url) [public bool]\nSet request URL. Set the Request URL of the HTTP Message.\n@param url the request URL\n@return (PECL pecl_http >= 0.21.0)\n
setResponseCode HttpMessage::setResponseCode(int $code) [public bool]\nSet response code. Set the response code of an HTTP Response Message.\n@param code HTTP response code\n@return (PECL pecl_http >= 0.10.0)\n
setResponseStatus HttpMessage::setResponseStatus(string $status) [public bool]\nSet response status. Set the Response Status of the HTTP message (i.e. the\nstring following the response code).\n@param status the response status text\n@return (PECL pecl_http >= 0.23.0)\n
setType HttpMessage::setType(int $type) [public void]\nSet message type. Set Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST\nor HTTP_MSG_RESPONSE.\n@param type the HttpMessage::TYPE\n
toMessageTypeObject HttpMessage::toMessageTypeObject(void) [public\nHttpRequest|HttpResponse]\nCreate HTTP object regarding message type. Creates an object regarding to\nthe type of the message.\n@return (PECL pecl_http >= 0.22.0)\n
toString HttpMessage::toString([bool $include_parent=false]) [public string]\nGet string representation. Get the string representation of the Message.\n@param include_parent specifies whether the returned string should also\ncontain any parent messages\n@return (PECL pecl_http >= 0.10.0)\n
__construct HttpQueryString::__construct([bool $global=true [, mixed $add]])\n[final public void]\nHttpQueryString constructor. Creates a new HttpQueryString object\ninstance. Operates on and modifies $_GET and $_SERVER['QUERY_STRING'] if\nglobal is TRUE.\n@param global whether to operate on $_GET and $_SERVER['QUERY_STRING']\n@param add additional/initial query string parameters\n
get HttpQueryString::get([string $key [, mixed $type=0 [, mixed $defval=NULL\n[, bool $delete=false]]]]) [public mixed]\nGet (part of) query string. Get (part of) the query string. The type parameter\nis either one of the HttpQueryString::TYPE_* constants or a type abbreviation\nlike &quot;b&quot; for bool, &quot;i&quot; for int, &quot;f&quot; for float,\n&quot;s&quot; for string, &quot;a&quot; for array and &quot;o&quot; for a\nstdClass object.\n@param key key of the query string param to retrieve\n@param type which variable type to enforce\n@param defval default value if key does not exist\n@param delete whether to remove the key/value pair from the query string\n@return (PECL pecl_http >= 0.22.0)\n
mod HttpQueryString::mod(mixed $params) [public HttpQueryString]\nModifiy query string copy. Copies the query string object and sets provided\nparams at the clone.\n@param params query string params to add\n@return (PECL pecl_http >= 1.1.0)\n
set HttpQueryString::set(mixed $params) [public string]\nSet query string params. Set query string entry/entries. NULL values will\nunset the variable.\n@param params query string params to add\n@return (PECL pecl_http >= 0.22.0)\n
singleton HttpQueryString::singleton([bool $global=true]) [static public\nHttpQueryString]\nHttpQueryString singleton. Get a single instance (differentiates between\nthe global setting).\n@param global whether to operate on $_GET and $_SERVER['QUERY_STRING']\n@return (PECL pecl_http >= 0.25.0)\n
toArray HttpQueryString::toArray(void) [public array]\nGet query string as array. Get the query string represented as associative\narray.\n@return (PECL pecl_http >= 0.22.0)\n
toString HttpQueryString::toString(void) [public string]\nGet query string. Get the query string.\n@return (PECL pecl_http >= 0.22.0)\n
xlate HttpQueryString::xlate(string $ie, string $oe) [public bool]\nChange query strings charset. Converts the query string from the source\nencoding ie to the target encoding oe. Don&#039;t use any character set that\ncan contain NUL bytes like UTF-16.\n@param ie input encoding\n@param oe output encoding\n@return (PECL pecl_http >= 0.25.0)\n
addCookies HttpRequest::addCookies(array $cookies) [public bool]\nAdd cookies. Add custom cookies. Note: The request option `encodecookies`\ncontrols whether the cookie values should be urlencode()d. Note: Affects\nany request method.\n@param cookies an associative array containing any cookie name/value pairs\nto add\n@return (PECL pecl_http >= 0.10.0)\n@see HttpRequest::setCookies() - Set cookies\n
addHeaders HttpRequest::addHeaders(array $headers) [public bool]\nAdd headers. Add request header name/value pairs.\n@param headers an associative array as parameter containing additional header\nname/value pairs\n@return (PECL pecl_http >= 0.10.0)\n
addPostFields HttpRequest::addPostFields(array $post_data) [public bool]\nAdd post fields. Adds POST data entries, leaving previously set unchanged,\nunless a post entry with the same name already exists. Affects only POST\nand custom requests.\n@param post_data an associative array as parameter containing the post fields\n@return (PECL pecl_http >= 0.10.0)\n
addPostFile HttpRequest::addPostFile(string $name, string $file [, string\n$content_type=&quot;application/x-octetstream&quot;]) [public bool]\nAdd post file. Add a file to the POST request, leaving previously set files\nunchanged. Affects only POST and custom requests. Cannot be used with raw\npost data.\n@param name the form element name\n@param file the path to the file\n@param content_type the content type of the file\n@return (PECL pecl_http >= 0.10.0)\n
addPutData HttpRequest::addPutData(string $put_data) [public bool]\nAdd put data. Add PUT data, leaving previously set PUT data unchanged. Affects\nonly PUT requests.\n@param put_data the data to concatenate\n@return (PECL pecl_http >= 0.25.0)\n
addQueryData HttpRequest::addQueryData(array $query_params) [public bool]\nAdd query data. Add parameters to the query parameter list, leaving previously\nset unchanged. Affects any request type.\n@param query_params an associative array as parameter containing the query\nfields to add\n@return (PECL pecl_http >= 0.10.0)\n
addRawPostData HttpRequest::addRawPostData(string $raw_post_data) [public bool]\nAdd raw post data. Add raw post data, leaving previously set raw post data\nunchanged. Affects only POST and custom requests.\n@param raw_post_data the raw post data to concatenate\n@return (PECL pecl_http 0.14.0-1.4.1)\n
addSslOptions HttpRequest::addSslOptions(array $options) [public bool]\nAdd ssl options. Set additional SSL options.\n@param options an associative array as parameter containing additional SSL\nspecific options\n@return (PECL pecl_http >= 0.12.0)\n
clearHistory HttpRequest::clearHistory(void) [public void]\nClear history. Clears all history messages. Note: History is only logged if\nrecordHistory was enabled.\n
__construct HttpRequest::__construct([string $url [, int\n$request_method=HTTP_METH_GET [, array $options]]]) [public void]\nHttpRequest constructor. Instantiate a new HttpRequest object.\n@param url the target request url\n@param request_method the request method to use\n@param options an associative array with request options\n
enableCookies HttpRequest::enableCookies(void) [public bool]\nEnable cookies. Enable automatic sending of received cookies. Note: Note\nthat custom set cookies will be sent anyway.\n@return (PECL pecl_http >= 1.0.0)\n
getContentType HttpRequest::getContentType(void) [public string]\nGet content type. Get the previously set content type.\n@return (PECL pecl_http >= 0.10.0)\n
getCookies HttpRequest::getCookies(void) [public array]\nGet cookies. Get previously set cookies.\n@return (PECL pecl_http >= 0.10.0)\n
getHeaders HttpRequest::getHeaders(void) [public array]\nGet headers. Get previously set request headers.\n@return (PECL pecl_http >= 0.10.0)\n
getHistory HttpRequest::getHistory(void) [public HttpMessage]\nGet history. Get all sent requests and received responses as an\nHttpMessage object. If you want to record history, set the instance variable\nHttpRequest::recordHistory to TRUE. The returned object references the last\nreceived response, use HttpMessage::getParentMessage() to access the data\nof previously sent requests and received responses.\n@return (PECL pecl_http >= 0.15.0)\n
getMethod HttpRequest::getMethod(void) [public int]\nGet method. Get the previously set request method.\n@return (PECL pecl_http >= 0.10.0)\n
getOptions HttpRequest::getOptions(void) [public array]\nGet options. Get currently set options.\n@return (PECL pecl_http >= 0.10.0)\n
getPostFields HttpRequest::getPostFields(void) [public array]\nGet post fields. Get previously set POST data.\n@return (PECL pecl_http >= 0.10.0)\n
getPostFiles HttpRequest::getPostFiles(void) [public array]\nGet post files. Get all previously added POST files.\n@return (PECL pecl_http >= 0.10.0)\n
getPutData HttpRequest::getPutData(void) [public string]\nGet put data. Get previously set PUT data.\n@return (PECL pecl_http >= 0.25.0)\n
getPutFile HttpRequest::getPutFile(void) [public string]\nGet put file. Get previously set put file.\n@return (PECL pecl_http >= 0.10.0)\n
getQueryData HttpRequest::getQueryData(void) [public string]\nGet query data. Get the current query data in form of an urlencoded query\nstring.\n@return (PECL pecl_http >= 0.10.0)\n
getRawPostData HttpRequest::getRawPostData(void) [public string]\nGet raw post data. Get previously set raw post data.\n@return (PECL pecl_http 0.14.0-1.4.1)\n
getRawRequestMessage HttpRequest::getRawRequestMessage(void) [public string]\nGet raw request message. Get sent HTTP message.\n@return (PECL pecl_http >= 0.21.0)\n
getFillingColorSpace HaruPage::getFillingColorSpace(void) [int]\nGet the current filling color space. Get the current filling color space.\n@return (PECL haru >= 0.0.1)\n
getFlatness HaruPage::getFlatness(void) [float]\nGet the flatness of the page. Get the flatness of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setFlatness() - Set flatness for the page\n
getGMode HaruPage::getGMode(void) [int]\nGet the current graphics mode. Get the current graphics mode.\n@return (PECL haru >= 0.0.1)\n
getGrayFill HaruPage::getGrayFill(void) [float]\nGet the current filling color. Get the current filling color.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setGrayFill() - Set filling color for the page\n
getGrayStroke HaruPage::getGrayStroke(void) [float]\nGet the current stroking color. Get the current stroking color.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setGrayStroke() - Sets stroking color for the page\n
getHeight HaruPage::getHeight(void) [float]\nGet the height of the page. Get the height of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setHeight() - Set height of the page\n
getHorizontalScaling HaruPage::getHorizontalScaling(void) [float]\nGet the current value of horizontal scaling. Get the current value of the\nhorizontal scaling.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setHorizontalScaling() - Set horizontal scaling for the page\n
getLineCap HaruPage::getLineCap(void) [int]\nGet the current line cap style. Get the current line cap style.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setLineCap() - Set the shape to be used at the ends of lines\n
getLineJoin HaruPage::getLineJoin(void) [int]\nGet the current line join style. Get the current line join style.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setLineJoin() - Set line join style for the page\n
getLineWidth HaruPage::getLineWidth(void) [float]\nGet the current line width. Get the current line width.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setLineWidth() - Set line width for the page\n
getMiterLimit HaruPage::getMiterLimit(void) [float]\nGet the value of miter limit. Get the value of the miter limit.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setMiterLimit() - Set the current value of the miter limit\nof the page\n
getRGBFill HaruPage::getRGBFill(void) [array]\nGet the current filling color. Get the current filling color.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setRGBFill() - Set filling color for the page\n
getRGBStroke HaruPage::getRGBStroke(void) [array]\nGet the current stroking color. Get the current stroking color.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setRGBStroke() - Set stroking color for the page\n
getStrokingColorSpace HaruPage::getStrokingColorSpace(void) [int]\nGet the current stroking color space. Get the current stroking color space.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getFillingColorSpace() - Get the current filling color space\n
getTextLeading HaruPage::getTextLeading(void) [float]\nGet the current value of line spacing. Get the current value of line spacing.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setTextLeading() - Set text leading (line spacing) for the page\n
getTextMatrix HaruPage::getTextMatrix(void) [array]\nGet the current text transformation matrix of the page. Get the current text\ntransformation matrix of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setTextMatrix() - Set the current text transformation matrix\nof the page\n
getTextRenderingMode HaruPage::getTextRenderingMode(void) [int]\nGet the current text rendering mode. Get the current text rendering mode.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setTextRenderingMode() - Set text rendering mode for the page\n
getTextRise HaruPage::getTextRise(void) [float]\nGet the current value of text rising. Get the current value of text rising.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setTextRise() - Set the current value of text rising\n
getTextWidth HaruPage::getTextWidth(string $text) [float]\nGet the width of the text using current fontsize, character spacing and word\nspacing. Get the width of the text using current fontsize, character spacing\nand word spacing\n@param text The text to measure.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::measureText() - Calculate the number of characters which can\nbe included within the specified width\n
getTransMatrix HaruPage::getTransMatrix(void) [array]\nGet the current transformation matrix of the page. Get the current\ntransformation matrix of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::concat() - Concatenate current transformation matrix of the\npage and the specified matrix\n
getWidth HaruPage::getWidth(void) [float]\nGet the width of the page. Get the width of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setWidth() - Set width of the page\n
getWordSpace HaruPage::getWordSpace(void) [float]\nGet the current value of word spacing. Get the current value of word spacing.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setWordSpace() - Set word spacing for the page\n
lineTo HaruPage::lineTo(float $x, float $y) [bool]\nDraw a line from the current point to the specified point. Draws a line from\nthe current point to the specified point.\n@param x\n@param y\n@return (PECL haru >= 0.0.1)\n@see HaruPage::curveTo() - Append a Bezier curve to the current path\n@see HaruPage::curveTo2() - Append a Bezier curve to the current path\n@see HaruPage::curveTo3() - Append a Bezier curve to the current path\n
measureText HaruPage::measureText(string $text, float $width [, bool\n$wordwrap=false]) [int]\nCalculate the number of characters which can be included within the\nspecified width. Get the number of characters which can be included within\nthe specified width.\n@param text The text to measure.\n@param width The width of the area to put the text to.\n@param wordwrap When this parameter is set to TRUE the function\n&quot;emulates&quot; word wrapping and doesn&#039;t include the part of the\ncurrent word if reached the end of the area.\n@return (PECL haru >= 0.0.1)\n@see HaruFont::measureText() - Calculate the number of characters which can\nbe included within the specified width\n
moveTextPos HaruPage::moveTextPos(float $x, float $y [, bool\n$set_leading=false]) [bool]\nMove text position to the specified offset. Moves text position to the\nspecified offset. If the start position of the current line is (x1, y1),\nthe start of the next line is (x1 + `x`, y1 + `y`).\n@param x The specified text position offset.\n@param y The specified text position offset.\n@param set_leading If set to TRUE, the function sets the text leading to -`y`.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::moveToNextLine() - Move text position to the start of the\nnext line\n
moveTo HaruPage::moveTo(float $x, float $y) [bool]\nSet starting point for new drawing path. Defines starting point for new\ndrawing path.\n@param x A new starting point coordinate.\n@param y A new starting point coordinate.\n@return (PECL haru >= 0.0.1)\n
moveToNextLine HaruPage::moveToNextLine(void) [bool]\nMove text position to the start of the next line. Moves text position to\nthe start of the next line.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::moveTextPos() - Move text position to the specified offset\n
rectangle HaruPage::rectangle(float $x, float $y, float $width, float $height)\n[bool]\nAppend a rectangle to the current path. Appends a rectangle to the current\ndrawing path.\n@param x The left border of the rectangle.\n@param y The lower border of the rectangle.\n@param width The width of the rectangle.\n@param height The height of the rectangle.\n@return (PECL haru >= 0.0.1)\n
setCharSpace HaruPage::setCharSpace(float $char_space) [bool]\nSet character spacing for the page. Defines character spacing for the page.\n@param char_space The new character spacing for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getCharSpace() - Get the current value of character spacing\n
setCMYKFill HaruPage::setCMYKFill(float $c, float $m, float $y, float $k)\n[bool]\nSet filling color for the page. Defines filling color for the page.\n@param c\n@param m\n@param y\n@param k\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getCMYKFill() - Get the current filling color\n
setCMYKStroke HaruPage::setCMYKStroke(float $c, float $m, float $y, float $k)\n[bool]\nSet stroking color for the page. Defines stroking color for the page.\n@param c\n@param m\n@param y\n@param k\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getCMYKStroke() - Get the current stroking color\n
setDash HaruPage::setDash(array $pattern, int $phase) [bool]\nSet the dash pattern for the page. Defines the dash pattern for the page.\n@param pattern An array (8 elements max) which contains a pattern of dashes\nand gaps used for lines on the page.\n@param phase The phase on which the pattern begins.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getDash() - Get the current dash pattern\n
setFlatness HaruPage::setFlatness(float $flatness) [bool]\nSet flatness for the page. Defines flatness for the page.\n@param flatness The defined flatness for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getFlatness() - Get the flatness of the page\n
setFontAndSize HaruPage::setFontAndSize(object $font, float $size) [bool]\nSet font and fontsize for the page. Defines current font and its size for\nthe page.\n@param font A valid HaruFont instance.\n@param size The size of the font.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::getFont() - Get HaruFont instance\n
setGrayFill HaruPage::setGrayFill(float $value) [bool]\nSet filling color for the page. Defines filling color for the page.\n@param value The value of gray level between 0 and 1.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getGrayFill() - Get the current filling color\n
setGrayStroke HaruPage::setGrayStroke(float $value) [bool]\nSets stroking color for the page. Defines stroking color for the page.\n@param value The value of gray level between 0 and 1.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getGrayStroke() - Get the current stroking color\n
setHeight HaruPage::setHeight(float $height) [bool]\nSet height of the page. Defines height of the page.\n@param height The defined height for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getHeight() - Get the height of the page\n
setHorizontalScaling HaruPage::setHorizontalScaling(float $scaling) [bool]\nSet horizontal scaling for the page. Set the horizontal scaling for the page.\n@param scaling The horizontal scaling for text showing on the page. The\ninitial value is 100.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getHorizontalScaling() - Get the current value of horizontal\nscaling\n
setLineCap HaruPage::setLineCap(int $cap) [bool]\nSet the shape to be used at the ends of lines. Defines the shape to be used\nat the ends of lines.\n@param cap Must be one of the following values: HaruPage::BUTT_END - the\nline is squared off at the endpoint of the path. HaruPage::ROUND_END - the\nend of the line becomes a semicircle with center in the end point of the\npath. HaruPage::PROJECTING_SCUARE_END - the line continues to the point that\nexceeds half of the stroke width the end point.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getLineCap() - Get the current line cap style\n
setLineJoin HaruPage::setLineJoin(int $join) [bool]\nSet line join style for the page. Defines line join style for the page.\n@param join Must be one of the following values: HaruPage::MITER_JOIN\nHaruPage::ROUND_JOIN HaruPage::BEVEL_JOIN\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getLineJoin() - Get the current line join style\n
setLineWidth HaruPage::setLineWidth(float $width) [bool]\nSet line width for the page. Defines line width for the page.\n@param width The defined line width for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getLineWidth() - Get the current line width\n
setMiterLimit HaruPage::setMiterLimit(float $limit) [bool]\nSet the current value of the miter limit of the page. Set the current value\nof the miter limit of the page.\n@param limit Defines the current value of the miter limit of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getMiterLimit() - Get the value of miter limit\n
setRGBFill HaruPage::setRGBFill(float $r, float $g, float $b) [bool]\nSet filling color for the page. Defines filling color for the page. All\nvalues must be between 0 and 1.\n@param r\n@param g\n@param b\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getRGBFill() - Get the current filling color\n
setRGBStroke HaruPage::setRGBStroke(float $r, float $g, float $b) [bool]\nSet stroking color for the page. Defines stroking color for the page. All\nvalues must be between 0 and 1.\n@param r\n@param g\n@param b\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getRGBStroke() - Get the current stroking color\n
setRotate HaruPage::setRotate(int $angle) [bool]\nSet rotation angle of the page. Defines rotation angle of the page.\n@param angle Must be a multiple of 90 degrees.\n@return (PECL haru >= 0.0.1)\n
setSize HaruPage::setSize(int $size, int $direction) [bool]\nSet size and direction of the page. Changes size and direction of the page\nto a predefined format.\n@param size Must be one of the following values: HaruPage::SIZE_LETTER\nHaruPage::SIZE_LEGAL HaruPage::SIZE_A3 HaruPage::SIZE_A4 HaruPage::SIZE_A5\nHaruPage::SIZE_B4 HaruPage::SIZE_B5 HaruPage::SIZE_EXECUTIVE\nHaruPage::SIZE_US4x6 HaruPage::SIZE_US4x8 HaruPage::SIZE_US5x7\nHaruPage::SIZE_COMM10\n@param direction Must be one of the following values: HaruPage::PORTRAIT\nHaruPage::LANDSCAPE\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setWidth() - Set width of the page\n@see HaruPage::setHeight() - Set height of the page\n
setSlideShow HaruPage::setSlideShow(int $type, float $disp_time, float\n$trans_time) [bool]\nSet transition style for the page. Defines transition style for the page.\n@param type Must be one of the following values: HaruPage::TS_WIPE_RIGHT\nHaruPage::TS_WIPE_LEFT HaruPage::TS_WIPE_UP HaruPage::TS_WIPE_DOWN\nHaruPage::TS_BARN_DOORS_HORIZONTAL_OUT HaruPage::TS_BARN_DOORS_HORIZONTAL_IN\nHaruPage::TS_BARN_DOORS_VERTICAL_OUT HaruPage::TS_BARN_DOORS_VERTICAL_IN\nHaruPage::TS_BOX_OUT HaruPage::TS_BOX_IN HaruPage::TS_BLINDS_HORIZONTAL\nHaruPage::TS_BLINDS_VERTICAL HaruPage::TS_DISSOLVE HaruPage::TS_GLITTER_RIGHT\nHaruPage::TS_GLITTER_DOWN HaruPage::TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT\nHaruPage::TS_REPLACE\n@param disp_time The display duration of the page in seconds.\n@param trans_time The duration of the transition effect in seconds.\n@return (PECL haru >= 0.0.1)\n
setTextLeading HaruPage::setTextLeading(float $text_leading) [bool]\nSet text leading (line spacing) for the page. Set the text leading (line\nspacing) for the page.\n@param text_leading Defines line spacing for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getTextLeading() - Get the current value of line spacing\n
setTextMatrix HaruPage::setTextMatrix(float $a, float $b, float $c, float $d,\nfloat $x, float $y) [bool]\nSet the current text transformation matrix of the page. Defines the text\ntransformation matrix of the page.\n@param a Width multiplier.\n@param b Vertical skew in radians.\n@param c Horizontal skew in radians.\n@param d Height multiplier.\n@param x Horizontal position for text.\n@param y Vertical position for text.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getTextMatrix() - Get the current text transformation matrix\nof the page\n
setTextRenderingMode HaruPage::setTextRenderingMode(int $mode) [bool]\nSet text rendering mode for the page. Defines text rendering mode for the page.\n@param mode Must be one of the following values: HaruPage::FILL\nHaruPage::STROKE HaruPage::FILL_THEN_STROKE HaruPage::INVISIBLE\nHaruPage::FILL_CLIPPING HaruPage::STROKE_CLIPPING\nHaruPage::FILL_STROKE_CLIPPING HaruPage::CLIPPING\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getTextRenderingMode() - Get the current text rendering mode\n
setTextRise HaruPage::setTextRise(float $rise) [bool]\nSet the current value of text rising. Set the current value of text rising.\n@param rise Defines the current value of text rising.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getTextRise() - Get the current value of text rising\n
setWidth HaruPage::setWidth(float $width) [bool]\nSet width of the page. Set the width of the page.\n@param width Defines width of the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getWidth() - Get the width of the page\n
setWordSpace HaruPage::setWordSpace(float $word_space) [bool]\nSet word spacing for the page. Set the word spacing for the page.\n@param word_space Defines word spacing for the page.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::getWordSpace() - Get the current value of word spacing\n
showText HaruPage::showText(string $text) [bool]\nPrint text at the current position of the page. Prints out the text at the\ncurrent position of the page.\n@param text The text to show.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::showTextNextLine() - Move the current position to the start\nof the next line and print the text\n@see HaruPage::textOut() - Print the text on the specified position\n
showTextNextLine HaruPage::showTextNextLine(string $text [, float $word_space=0\n[, float $char_space=0]]) [bool]\nMove the current position to the start of the next line and print the\ntext. Moves the current position to the start of the next line and print\nout the text.\n@param text The text to show.\n@param word_space The word spacing.\n@param char_space The character spacing.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::showText() - Print text at the current position of the page\n@see HaruPage::textOut() - Print the text on the specified position\n
stroke HaruPage::stroke([bool $close_path=false]) [bool]\nPaint current path. Paints the current path.\n@param close_path Closes the current path if set to TRUE.\n@return (PECL haru >= 0.0.1)\n
textOut HaruPage::textOut(float $x, float $y, string $text) [bool]\nPrint the text on the specified position. Prints the text on the specified\nposition.\n@param x\n@param y\n@param text\n@return (PECL haru >= 0.0.1)\n@see HaruPage::showTextNextLine() - Move the current position to the start\nof the next line and print the text\n@see HaruPage::showText() - Print text at the current position of the page\n
textRect HaruPage::textRect(float $left, float $top, float $right, float\n$bottom, string $text [, int $align=HaruPage::TALIGN_LEFT]) [bool]\nPrint the text inside the specified region. Prints the text inside the\nspecified region.\n@param left Left border of the text area.\n@param top Top border of the text area.\n@param right Right border of the text area.\n@param bottom Lower border of the text area.\n@param text The text to print.\n@param align Text alignment. Must be one of the following values:\nHaruPage::TALIGN_LEFT HaruPage::TALIGN_RIGHT HaruPage::TALIGN_CENTER\nHaruPage::TALIGN_JUSTIFY\n@return (PECL haru >= 0.0.1)\n@see HaruPage::showTextNextLine() - Move the current position to the start\nof the next line and print the text\n@see HaruPage::showText() - Print text at the current position of the page\n@see HaruPage::textOut() - Print the text on the specified position\n
hash_algos hash_algos(void) [array]\nReturn a list of registered hashing algorithms.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n
hash_copy hash_copy(resource $context) [resource]\nCopy hashing context.\n@param context Hashing context returned by hash_init().\n@return (PHP 5 >= 5.3.0)\n
hash_file hash_file(string $algo, string $filename [, bool $raw_output=false])\n[string]\nGenerate a hash value using the contents of a given file.\n@param algo Name of selected hashing algorithm (i.e. &quot;md5&quot;,\n&quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n@param filename URL describing location of file to be hashed; Supports\nfopen wrappers.\n@param raw_output When set to TRUE, outputs raw binary data. FALSE outputs\nlowercase hexits.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash() - Generate a hash value (message digest)\n@see hash_hmac_file() - Generate a keyed hash value using the HMAC method\nand the contents of a given file\n@see hash_update_file() - Pump data into an active hashing context from a file\n@see md5_file() - Calculates the md5 hash of a given file\n@see sha1_file() - Calculate the sha1 hash of a file\n
hash_final hash_final(resource $context [, bool $raw_output=false]) [string]\nFinalize an incremental hash and return resulting digest.\n@param context Hashing context returned by hash_init().\n@param raw_output When set to TRUE, outputs raw binary data. FALSE outputs\nlowercase hexits.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_init() - Initialize an incremental hashing context\n@see hash_update() - Pump data into an active hashing context\n@see hash_update_stream() - Pump data into an active hashing context from\nan open stream\n@see hash_update_file() - Pump data into an active hashing context from a file\n
hash_hmac_file hash_hmac_file(string $algo, string $filename, string $key\n[, bool $raw_output=false]) [string]\nGenerate a keyed hash value using the HMAC method and the contents of a\ngiven file.\n@param algo Name of selected hashing algorithm (i.e. &quot;md5&quot;,\n&quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a\nlist of supported algorithms.\n@param filename URL describing location of file to be hashed; Supports\nfopen wrappers.\n@param key Shared secret key used for generating the HMAC variant of the\nmessage digest.\n@param raw_output When set to TRUE, outputs raw binary data. FALSE outputs\nlowercase hexits.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_algos() - Return a list of registered hashing algorithms\n@see hash_hmac() - Generate a keyed hash value using the HMAC method\n@see hash_file() - Generate a hash value using the contents of a given file\n
hash_hmac hash_hmac(string $algo, string $data, string $key [, bool\n$raw_output=false]) [string]\nGenerate a keyed hash value using the HMAC method.\n@param algo Name of selected hashing algorithm (i.e. &quot;md5&quot;,\n&quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a\nlist of supported algorithms.\n@param data Message to be hashed.\n@param key Shared secret key used for generating the HMAC variant of the\nmessage digest.\n@param raw_output When set to TRUE, outputs raw binary data. FALSE outputs\nlowercase hexits.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash() - Generate a hash value (message digest)\n@see hash_algos() - Return a list of registered hashing algorithms\n@see hash_init() - Initialize an incremental hashing context\n@see hash_hmac_file() - Generate a keyed hash value using the HMAC method\nand the contents of a given file\n
hash_init hash_init(string $algo [, int $options=0 [, string $key=NULL]])\n[resource]\nInitialize an incremental hashing context.\n@param algo Name of selected hashing algorithm (i.e. &quot;md5&quot;,\n&quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n@param options Optional settings for hash generation, currently supports\nonly one option: HASH_HMAC. When specified, the `key` must be specified.\n@param key When HASH_HMAC is specified for `options`, a shared secret key\nto be used with the HMAC hashing method must be supplied in this parameter.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash() - Generate a hash value (message digest)\n@see hash_file() - Generate a hash value using the contents of a given file\n@see hash_hmac() - Generate a keyed hash value using the HMAC method\n@see hash_hmac_file() - Generate a keyed hash value using the HMAC method\nand the contents of a given file\n
hash_update_file hash_update_file(resource $context, string $filename [,\nresource $context=NULL]) [bool]\nPump data into an active hashing context from a file.\n@param context Hashing context returned by hash_init().\n@param filename URL describing location of file to be hashed; Supports\nfopen wrappers.\n@param context Stream context as returned by stream_context_create().\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_init() - Initialize an incremental hashing context\n@see hash_update() - Pump data into an active hashing context\n@see hash_update_stream() - Pump data into an active hashing context from\nan open stream\n@see hash_final() - Finalize an incremental hash and return resulting digest\n@see hash() - Generate a hash value (message digest)\n@see hash_file() - Generate a hash value using the contents of a given file\n
hash_update_stream hash_update_stream(resource $context, resource $handle\n[, int $length=-1]) [int]\nPump data into an active hashing context from an open stream.\n@param context Hashing context returned by hash_init().\n@param handle Open file handle as returned by any stream creation function.\n@param length Maximum number of characters to copy from `handle` into the\nhashing context.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_init() - Initialize an incremental hashing context\n@see hash_update() - Pump data into an active hashing context\n@see hash_final() - Finalize an incremental hash and return resulting digest\n@see hash() - Generate a hash value (message digest)\n@see hash_file() - Generate a hash value using the contents of a given file\n
hash_update hash_update(resource $context, string $data) [bool]\nPump data into an active hashing context.\n@param context Hashing context returned by hash_init().\n@param data Message to be included in the hash digest.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_init() - Initialize an incremental hashing context\n@see hash_update_file() - Pump data into an active hashing context from a file\n@see hash_update_stream() - Pump data into an active hashing context from\nan open stream\n@see hash_final() - Finalize an incremental hash and return resulting digest\n
hash hash(string $algo, string $data [, bool $raw_output=false]) [string]\nGenerate a hash value (message digest).\n@param algo Name of selected hashing algorithm (i.e. &quot;md5&quot;,\n&quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n@param data Message to be hashed.\n@param raw_output When set to TRUE, outputs raw binary data. FALSE outputs\nlowercase hexits.\n@return (PHP 5 >= 5.1.2, PECL hash >= 1.1)\n@see hash_file() - Generate a hash value using the contents of a given file\n@see hash_hmac() - Generate a keyed hash value using the HMAC method\n@see hash_init() - Initialize an incremental hashing context\n@see md5() - Calculate the md5 hash of a string\n@see sha1() - Calculate the sha1 hash of a string\n
header_remove header_remove([string $name]) [void]\nRemove previously set headers. Removes an HTTP header previously set using\nheader().\n@param name The header name to be removed. Note: This parameter is\ncase-insensitive.\n@return (PHP 5 >= 5.3.0)\n@see header() - Send a raw HTTP header\n@see headers_sent() - Checks if or where headers have been sent\n
header header(string $string [, bool $replace=true [, int\n$http_response_code]]) [void]\nSend a raw HTTP header. header() is used to send a raw HTTP header. See the\n&raquo; HTTP/1.1 specification for more information on HTTP headers.\n@return (PHP 4, PHP 5)\n@note Note: You can use output buffering to get around this problem, with the\noverhead of all of your output to the browser being buffered in the server\nuntil you send it. You can do this by calling ob_start() and ob_end_flush()\nin your script, or setting the `output_buffering` configuration directive\non in your php.ini or server configuration files.\n@note Note: The HTTP status header line will always be the first sent to the\nclient, regardless of the actual header() call being the first or not. The\nstatus may be overridden by calling header() with a new status line at any\ntime unless the HTTP headers have already been sent.\n@note Note: There is a bug in Microsoft Internet Explorer 4.01 that prevents\nthis from working. There is no workaround. There is also a bug in Microsoft\nInternet Explorer 5.5 that interferes with this, which can be resolved by\nupgrading to Service Pack 2 or later.\n@note Note: If safe mode is enabled the uid of the script is added to the\n`realm` part of the `WWW-Authenticate` header if you set this header (used\nfor HTTP Authentication).\n@see headers_sent() - Checks if or where headers have been sent\n@see setcookie() - Send a cookie\n@see The section on HTTP authentication\n
headers_list headers_list(void) [array]\nReturns a list of response headers sent (or ready to send). headers_list()\nwill return a list of headers to be sent to the browser / client. To determine\nwhether or not these headers have been sent yet, use headers_sent().\n@return (PHP 5)\n@see headers_sent() - Checks if or where headers have been sent\n@see header() - Send a raw HTTP header\n@see setcookie() - Send a cookie\n@see apache_response_headers() - Fetch all HTTP response headers\n
headers_sent headers_sent([string &$file [, int &$line]]) [bool]\nChecks if or where headers have been sent. Checks if or where headers have\nbeen sent. You can&#039;t add any more header lines using the header()\nfunction once the header block has already been sent. Using this function\nyou can at least prevent getting HTTP header related error messages. Another\noption is to use Output Buffering.\n@param file If the optional `file` and `line` parameters are set,\nheaders_sent() will put the PHP source file name and line number where output\nstarted in the `file` and `line` variables.\n@param line The line number where the output started.\n@return (PHP 4, PHP 5)\n@see ob_start() - Turn on output buffering\n@see trigger_error() - Generates a user-level error/warning/notice message\n@see headers_list() - Returns a list of response headers sent (or ready\nto send)\n@see header() - Send a raw HTTP header for a more detailed discussion of\nthe matters involved.\n
hebrev hebrev(string $hebrew_text [, int $max_chars_per_line=0]) [string]\nConvert logical Hebrew text to visual text. Converts logical Hebrew text to\nvisual text. The function tries to avoid breaking words.\n@param hebrew_text A Hebrew input string.\n@param max_chars_per_line This optional parameter indicates maximum number\nof characters per line that will be returned.\n@return (PHP 4, PHP 5)\n@see hebrevc() - Convert logical Hebrew text to visual text with newline\nconversion\n
hebrevc hebrevc(string $hebrew_text [, int $max_chars_per_line=0]) [string]\nConvert logical Hebrew text to visual text with newline conversion. This\nfunction is similar to hebrev() with the difference that it converts newlines\n(\n) to &quot;&lt;br>\n&quot;. The function tries to avoid breaking words.\n@param hebrew_text A Hebrew input string.\n@param max_chars_per_line This optional parameter indicates maximum number\nof characters per line that will be returned.\n@return (PHP 4, PHP 5)\n@see hebrev() - Convert logical Hebrew text to visual text\n
hexdec hexdec(string $hex_string) [number]\nHexadecimal to decimal. Returns the decimal equivalent of the hexadecimal\nnumber represented by the `hex_string` argument. hexdec() converts\na hexadecimal string to a decimal number. hexdec() will ignore any\nnon-hexadecimal characters it encounters.\n@param hex_string The hexadecimal string to convert\n@return (PHP 4, PHP 5)\n@see dechex() - Decimal to hexadecimal\n@see bindec() - Binary to decimal\n@see octdec() - Octal to decimal\n@see base_convert() - Convert a number between arbitrary bases\n
highlight_file highlight_file(string $filename [, bool $return=false]) [mixed]\nSyntax highlighting of a file. Prints out or returns a syntax highlighted\nversion of the code contained in `filename` using the colors defined in\nthe built-in syntax highlighter for PHP. Many servers are configured to\nautomatically highlight files with a phps extension. For example, example.phps\nwhen viewed will show the syntax highlighted source of the file. To enable\nthis, add this line to the httpd.conf:\n@param filename Path to the PHP file to be highlighted.\n@param return Set this parameter to TRUE to make this function return the\nhighlighted code.\n@return (PHP 4, PHP 5)\n@see highlight_string() - Syntax highlighting of a string\n
highlight_string highlight_string(string $str [, bool $return=false]) [mixed]\nSyntax highlighting of a string.\n@param str The PHP code to be highlighted. This should include the opening tag.\n@param return Set this parameter to TRUE to make this function return the\nhighlighted code.\n@return (PHP 4, PHP 5)\n@note Note: This function uses internal output buffering with this parameter\nso it can not be used inside an ob_start() callback function.\n@see highlight_file() - Syntax highlighting of a file\n
html_entity_decode html_entity_decode(string $string [, int\n$quote_style=ENT_COMPAT [, string $charset=&#039;UTF-8&#039;]]) [string]\nConvert all HTML entities to their applicable characters. html_entity_decode()\nis the opposite of htmlentities() in that it converts all HTML entities to\ntheir applicable characters from `string`.\n@param string The input string.\n@param quote_style The optional second `quote_style` parameter lets you define\nwhat will be done with &#039;single&#039; and &quot;double&quot; quotes. It\ntakes on one of three constants: Available `quote_style` constants Constant\nName Description ENT_COMPAT Will convert double-quotes and leave single-quotes\nalone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES\nWill leave both double and single quotes unconverted.\n@param charset This defines the character set used in conversion. Following\ncharacter sets are supported in PHP 4.3.0 and later. Supported charsets\nCharset Aliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1\nISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign,\nFrench and Finnish letters missing in Latin-1(ISO-8859-1). UTF-8 &nbsp;\nASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific\nCyrillic charset. This charset is supported in 4.3.2. cp1251 Windows-1251,\nwin-1251, 1251 Windows-specific Cyrillic charset. This charset is supported\nin 4.3.2. cp1252 Windows-1252, 1252 Windows specific charset for Western\nEuropean. KOI8-R koi8-ru, koi8r Russian. This charset is supported in\n4.3.2. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936\nSimplified Chinese, national standard character set. BIG5-HKSCS &nbsp; Big5\nwith Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, 932 Japanese\nEUC-JP EUCJP Japanese Note: Any other character sets are not recognized and\nISO-8859-1 will be used instead.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: You might wonder why\ntrim(html_entity_decode(&#039;&amp;nbsp;&#039;)); doesn&#039;t reduce the\nstring to an empty string, that&#039;s because the &#039;&amp;nbsp;&#039;\nentity is not ASCII code 32 (which is stripped by trim()) but ASCII code 160\n(0xa0) in the default ISO 8859-1 characterset.\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see get_html_translation_table() - Returns the translation table used by\nhtmlspecialchars and htmlentities\n@see urldecode() - Decodes URL-encoded string\n
htmlentities htmlentities(string $string [, int $flags=ENT_COMPAT [, string\n$charset [, bool $double_encode=true]]]) [string]\nConvert all applicable characters to HTML entities. This function is\nidentical to htmlspecialchars() in all ways, except with htmlentities(),\nall characters which have HTML character entity equivalents are translated\ninto these entities. If you&#039;re wanting to decode instead (the reverse)\nyou can use html_entity_decode().\n@param string The input string.\n@param flags Like htmlspecialchars(), the optional second `flags`\nparameter lets you define what will be done with &#039;single&#039; and\n&quot;double&quot; quotes. It takes on one of three constants with the default\nbeing ENT_COMPAT, optionally combined with a fourth ENT_IGNORE (since PHP\n5.3.0): Available `flags` constants Constant Name Description ENT_COMPAT Will\nconvert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert\nboth double and single quotes. ENT_NOQUOTES Will leave both double and single\nquotes unconverted. ENT_IGNORE Silently discard invalid code unit sequences\ninstead of returning an empty string. Added in PHP 5.3.0. This is provided for\nbackwards compatibility; avoid using it as it may have security implications.\n@param charset Like htmlspecialchars(), it takes an optional third argument\n`charset` which defines character set used in conversion. Presently,\nthe ISO-8859-1 character set is used as the default. Following character\nsets are supported in PHP 4.3.0 and later. Supported charsets Charset\nAliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1\nISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign,\nFrench and Finnish letters missing in Latin-1(ISO-8859-1). UTF-8 &nbsp;\nASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific\nCyrillic charset. This charset is supported in 4.3.2. cp1251 Windows-1251,\nwin-1251, 1251 Windows-specific Cyrillic charset. This charset is supported\nin 4.3.2. cp1252 Windows-1252, 1252 Windows specific charset for Western\nEuropean. KOI8-R koi8-ru, koi8r Russian. This charset is supported in\n4.3.2. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936\nSimplified Chinese, national standard character set. BIG5-HKSCS &nbsp; Big5\nwith Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, 932 Japanese\nEUC-JP EUCJP Japanese Note: Any other character sets are not recognized and\nISO-8859-1 will be used instead.\n@param double_encode When `double_encode` is turned off PHP will not encode\nexisting html entities. The default is to convert everything.\n@return (PHP 4, PHP 5)\n@see html_entity_decode() - Convert all HTML entities to their applicable\ncharacters\n@see get_html_translation_table() - Returns the translation table used by\nhtmlspecialchars and htmlentities\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see nl2br() - Inserts HTML line breaks before all newlines in a string\n@see urlencode() - URL-encodes string\n
htmlspecialchars_decode htmlspecialchars_decode(string $string [, int\n$quote_style=ENT_COMPAT]) [string]\nConvert special HTML entities back to characters. This function is the\nopposite of htmlspecialchars(). It converts special HTML entities back to\ncharacters. The converted entities are: `&amp;amp;`, `&amp;quot;` (when\nENT_NOQUOTES is not set), `&amp;#039;` (when ENT_QUOTES is set), `&amp;lt;`\nand `&amp;gt;`.\n@param string The string to decode\n@param quote_style The quote style. One of the following constants: quote_style\nconstants Constant Name Description ENT_COMPAT Will convert double-quotes and\nleave single-quotes alone (default) ENT_QUOTES Will convert both double and\nsingle quotes ENT_NOQUOTES Will leave both double and single quotes unconverted\n@return (PHP 5 >= 5.1.0)\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see html_entity_decode() - Convert all HTML entities to their applicable\ncharacters\n@see get_html_translation_table() - Returns the translation table used by\nhtmlspecialchars and htmlentities\n
htmlspecialchars htmlspecialchars(string $string [, int $flags=ENT_COMPAT\n[, string $charset [, bool $double_encode=true]]]) [string]\nConvert special characters to HTML entities. Certain characters have special\nsignificance in HTML, and should be represented by HTML entities if they are\nto preserve their meanings. This function returns a string with some of these\nconversions made; the translations made are those most useful for everyday web\nprogramming. If you require all HTML character entities to be translated, use\nhtmlentities() instead. This function is useful in preventing user-supplied\ntext from containing HTML markup, such as in a message board or guest book\napplication. The translations performed are: &#039;&amp;&#039; (ampersand)\nbecomes &#039;&amp;amp;&#039; &#039;&quot;&#039; (double quote) becomes\n&#039;&amp;quot;&#039; when ENT_NOQUOTES is not set. &#039;&#039;&#039;\n(single quote) becomes &#039;&amp;#039;&#039; only when ENT_QUOTES is\nset. &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039; &#039;>&#039;\n(greater than) becomes &#039;&amp;gt;&#039;\n@param string The string being converted.\n@param flags The optional second argument, `flags`, tells the function what\nto do with single and double quote characters and with invalid multi-byte\nsequences. The default mode, ENT_COMPAT, is the backwards compatible mode\nwhich only translates the double-quote character and leaves the single-quote\nuntranslated. If ENT_QUOTES is set, both single and double quotes are\ntranslated and if ENT_NOQUOTES is set neither single nor double quotes are\ntranslated. In addition, since 5.3.0, these constants can be combined with\nENT_IGNORE. In that case, strings that contain invalid code unit sequences\nhave those invalid sequences discarded instead of having the function return\nan empty string. Avoid using it, as it may have introduce vulnerabilities.\n@param charset Defines character set used in conversion. The default\ncharacter set is ISO-8859-1. For the purposes of this function, the charsets\n`ISO-8859-1`, `ISO-8859-15`, `UTF-8`, `cp866`, `cp1251`, `cp1252`, and `KOI8-R`\nare effectively equivalent, provided the `string` itself is valid for the\ncharacter set, as the characters affected by htmlspecialchars() occupy the same\npositions in all of these charsets. Following character sets are supported\nin PHP 4.3.0 and later. Supported charsets Charset Aliases Description\nISO-8859-1 ISO8859-1 Western European, Latin-1 ISO-8859-15 ISO8859-15 Western\nEuropean, Latin-9. Adds the Euro sign, French and Finnish letters missing\nin Latin-1(ISO-8859-1). UTF-8 &nbsp; ASCII compatible multi-byte 8-bit\nUnicode. cp866 ibm866, 866 DOS-specific Cyrillic charset. This charset is\nsupported in 4.3.2. cp1251 Windows-1251, win-1251, 1251 Windows-specific\nCyrillic charset. This charset is supported in 4.3.2. cp1252 Windows-1252,\n1252 Windows specific charset for Western European. KOI8-R koi8-ru, koi8r\nRussian. This charset is supported in 4.3.2. BIG5 950 Traditional Chinese,\nmainly used in Taiwan. GB2312 936 Simplified Chinese, national standard\ncharacter set. BIG5-HKSCS &nbsp; Big5 with Hong Kong extensions, Traditional\nChinese. Shift_JIS SJIS, 932 Japanese EUC-JP EUCJP Japanese Note: Any other\ncharacter sets are not recognized and ISO-8859-1 will be used instead.\n@param double_encode When `double_encode` is turned off PHP will not encode\nexisting html entities, the default is to convert everything.\n@return (PHP 4, PHP 5)\n@note Note: Note that this function does not translate anything beyond what\nis listed above. For full entity translation, see htmlentities().\n@see get_html_translation_table() - Returns the translation table used by\nhtmlspecialchars and htmlentities\n@see htmlspecialchars_decode() - Convert special HTML entities back to\ncharacters\n@see strip_tags() - Strip HTML and PHP tags from a string\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see nl2br() - Inserts HTML line breaks before all newlines in a string\n
http_build_cookie http_build_cookie(array $cookie) [string]\nBuild cookie string. Build a cookie string from an array/object like returned\nby http_parse_cookie().\n@param cookie a cookie list like returned from http_parse_cookie()\n@return (PECL pecl_http >= 1.2.0)\n@see http_parse_cookie() - Parse HTTP cookie\n
http_build_query http_build_query(mixed $query_data [, string $numeric_prefix\n[, string $arg_separator [, int $enc_type=PHP_QUERY_RFC1738]]]) [string]\nGenerate URL-encoded query string. Generates a URL-encoded query string from\nthe associative (or indexed) array provided.\n@param query_data May be an array or object containing properties. If\n`query_data` is an array, it may be a simple one-dimensional structure, or\nan array of arrays (which in turn may contain other arrays). If `query_data`\nis an object, then only public properties will be incorporated into the result.\n@param numeric_prefix If numeric indices are used in the base array and\nthis parameter is provided, it will be prepended to the numeric index for\nelements in the base array only. This is meant to allow for legal variable\nnames when the data is decoded by PHP or another CGI application later on.\n@param arg_separator arg_separator.output is used to separate arguments,\nunless this parameter is specified, and is then used.\n@param enc_type By default, PHP_QUERY_RFC1738. If `enc_type` is\nPHP_QUERY_RFC1738, then encoding is performed per &raquo; RFC 1738 and the\n`application/x-www-form-urlencoded` media type, which implies that spaces\nare encoded as plus (`+`) signs. If `enc_type` is PHP_QUERY_RFC3986, then\nencoding is performed according to &raquo; RFC 3986, and spaces will be\npercent encoded (`%20`).\n@return (PHP 5)\n@see parse_str() - Parses the string into variables\n@see parse_url() - Parse a URL and return its components\n@see urlencode() - URL-encodes string\n@see array_walk() - Apply a user function to every member of an array\n
http_build_str http_build_str(array $query [, string $prefix [, string\n$arg_separator=ini_get(&quot;arg_separator.output&quot;)]]) [string]\nBuild query string. Opponent to parse_str().\n@param query associative array of query string parameters\n@param prefix top level prefix\n@param arg_separator argument separator to use (by default the INI setting\narg_separator.output will be used, or &quot;&amp;&quot; if neither is set\n@return (PECL pecl_http >= 0.23.0)\n@see standard http_build_query() - Generate URL-encoded query string\n@see http_build_url() - Build a URL\n
http_build_url http_build_url([mixed $url [, mixed $parts [, int\n$flags=HTTP_URL_REPLACE [, array &$new_url]]]]) [string]\nBuild a URL. Build a URL. The parts of the second URL will be merged into\nthe first according to the flags argument.\n@param url (part(s) of) an URL in form of a string or associative array like\nparse_url() returns\n@param parts same as the first argument\n@param flags a bitmask of binary or&#039;ed HTTP_URL constants;\nHTTP_URL_REPLACE is the default\n@param new_url if set, it will be filled with the parts of the composed url\nlike parse_url() would return\n@return (PECL pecl_http >= 0.21.0)\n@see parse_url() - Parse a URL and return its components\n@see http_build_str() - Build query string\n
http_cache_etag http_cache_etag([string $etag]) [bool]\nCaching by ETag. Attempts to cache the sent entity by its `ETag`,\neither supplied or generated by the hash algorithm specified by the INI\nsetting http.etag.mode. If the clients `If-None-Match` header matches the\nsupplied/calculated ETag, the body is considered cached on the clients side\nand a `304 Not Modified` status code is issued. A log entry is written\nto the cache log if the INI setting http.log.cache is set and the cache\nattempt was successful. Note: This function may be used in conjunction with\nhttp_send_data(), http_send_file() and http_send_stream(). If this function\nis used outside the http_send_*() API, it facilitates the ob_etaghandler().\n@param etag custom `ETag`\n@return (PECL pecl_http >= 0.1.0)\n@see http_cache_last_modified() - Caching by last modification\n@see ob_etaghandler() - ETag output handler\n@see http_match_etag() - Match ETag\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_cache_last_modified http_cache_last_modified([int $timestamp_or_expires])\n[bool]\nCaching by last modification. Attempts to cache the sent entity by its last\nmodification date. If the supplied argument is greater than 0, it is handled\nas timestamp and will be sent as date of last modification. If it is 0 or\nomitted, the current time will be sent as `Last-Modified` date. If it&#039;s\nnegative, it is handled as expiration time in seconds, which means that if\nthe requested last modification date is not between the calculated timespan,\nthe `Last-Modified` header is updated and the actual body will be sent. A\nlog entry will be written to the cache log if the INI setting http.log.cache\nis set and the cache attempt was successful. Note: This function may be used\nin conjunction with http_send_data(), http_send_file() and http_send_stream().\n@param timestamp_or_expires Unix timestamp\n@return (PECL pecl_http >= 0.1.0)\n@see http_cache_etag() - Caching by ETag\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_chunked_decode http_chunked_decode(string $encoded) [string]\nDecode chunked-encoded data. Decodes a string which is HTTP-chunked encoded.\n@param encoded chunked encoded string\n@return (PECL pecl_http >= 0.1.0)\n
http_date http_date([int $timestamp]) [string]\nCompose HTTP RFC compliant date. Compose a valid HTTP date regarding RFC\n1123 looking like: `Wed, 22 Dec 2004 11:34:47 GMT`.\n@param timestamp Unix timestamp; current time if omitted\n@return (PECL pecl_http >= 0.1.0)\n@see date() - Format a local time/date\n
http_deflate http_deflate(string $data [, int $flags=0]) [string]\nDeflate data. Compress data with `gzip`, `zlib` AKA `deflate` or `raw deflate`\nencoding. See the deflate constants table for possible values for the flags\nparameter.\n@param data String containing the data that should be encoded\n@param flags deflate options\n@return (PECL pecl_http >= 0.15.0)\n@see http_inflate() - Inflate data\n@see HttpDeflateStream\n
http_get_request_body_stream http_get_request_body_stream(void) [resource]\nGet request body as stream. Create a stream to read the raw request body\n(e.g. POST or PUT data). This function can only be used once if the request\nmethod was another than POST.\n@return (PECL pecl_http >= 0.22.0)\n@see http_get_request_body() - Get request body as string\n@see http_get_request_headers() - Get request headers as array\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_get_request_body http_get_request_body(void) [string]\nGet request body as string. Get the raw request body (e.g. POST or PUT\ndata). This function can not be used after http_get_request_body_stream()\nif the request method was another than POST.\n@return (PECL pecl_http >= 0.10.0)\n@see http_get_request_body_stream() - Get request body as stream\n@see http_get_request_headers() - Get request headers as array\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_get_request_headers http_get_request_headers(void) [array]\nGet request headers as array. Get a list of incoming HTTP headers.\n@return (PECL pecl_http >= 0.10.0)\n@see http_get_request_body() - Get request body as string\n@see http_get_request_body_stream() - Get request body as stream\n@see the HttpResponse class if you are using PHP 5.1.0 and above\n
http_get http_get(string $url [, array $options [, array &$info]]) [string]\nPerform GET request. Performs an HTTP GET request on the supplied url. See\nthe full list of request options.\n@param url URL\n@param options request options\n@param info Will be filled with request/response information\n@return (PECL pecl_http >= 0.1.0)\n
http_head http_head(string $url [, array $options [, array &$info]]) [string]\nPerform HEAD request. Performs an HTTP HEAD request on the supplied url. See\nthe full list of request options.\n@param url URL\n@param options request options\n@param info Request/response information\n@return (PECL pecl_http >= 0.1.0)\n
http_inflate http_inflate(string $data) [string]\nInflate data. Decompress data compressed with either `gzip`, `deflate` AKA\n`zlib` or `raw deflate` encoding.\n@param data string containing the compressed data\n@return (PECL pecl_http >= 0.15.0)\n@see http_deflate() - Deflate data\n@see HttpInflateStream\n
http_match_etag http_match_etag(string $etag [, bool $for_range=false]) [bool]\nMatch ETag. Matches the given `ETag` against the clients `If-Match`\nresp. `If-None-Match` HTTP headers.\n@param etag the `ETag` to match\n@param for_range if set to TRUE, the header usually used to validate HTTP\nranges will be checked\n@return (PECL pecl_http >= 0.1.0)\n@see http_match_last_modified()\n@see http_match_request_header() - Match any header\n@see http_cache_etag() - Caching by ETag\n@see http_cache_last_modified() - Caching by last modification\n@see ob_etaghandler() - ETag output handler\n
http_match_modified http_match_modified([int $timestamp=-1 [, bool\n$for_range=false]]) [bool]\nMatch last modification. Matches the given Unix timestamp against the clients\n`If-Modified-Since` resp. `If-Unmodified-Since` HTTP headers.\n@param timestamp Unix timestamp; current time, if omitted\n@param for_range if set to TRUE, the header usually used to validate HTTP\nranges will be checked\n@return (PECL pecl_http >= 0.1.0)\n@see http_match_etag() - Match ETag\n@see http_match_request_header() - Match any header\n@see http_cache_etag() - Caching by ETag\n@see http_cache_last_modified() - Caching by last modification\n
http_match_request_header http_match_request_header(string $header, string\n$value [, bool $match_case=false]) [bool]\nMatch any header. Match an incoming HTTP header.\n@param header the header name (case-insensitive)\n@param value the header value that should be compared\n@param match_case whether the value should be compared case sensitively\n@return (PECL pecl_http >= 0.10.0)\n@see http_match_etag() - Match ETag\n@see http_match_last_modified()\n
http_negotiate_charset http_negotiate_charset(array $supported [, array\n&$result]) [string]\nNegotiate clients preferred character set. This function negotiates the\nclients preferred charset based on its `Accept-Charset` HTTP header. The\nqualifier is recognized and charsets without qualifier are rated highest.\n@param supported array containing the supported charsets as values\n@param result will be filled with an array containing the negotiation results\n@return (PECL pecl_http >= 0.1.0)\n
http_negotiate_content_type http_negotiate_content_type(array $supported [,\narray &$result]) [string]\nNegotiate clients preferred content type. This function negotiates the clients\npreferred content type based on its `Accept` HTTP header. The qualifier is\nrecognized and content types without qualifier are rated highest.\n@param supported array containing the supported content types as values\n@param result will be filled with an array containing the negotiation results\n@return (PECL pecl_http >= 0.19.0)\n
http_negotiate_language http_negotiate_language(array $supported [, array\n&$result]) [string]\nNegotiate clients preferred language. This function negotiates the clients\npreferred language based on its `Accept-Language` HTTP header. The qualifier\nis recognized and languages without qualifier are rated highest. The qualifier\nwill be decreased by 10% for partial matches (i.e. matching primary language).\n@param supported array containing the supported languages as values\n@param result will be filled with an array containing the negotiation results\n@return (PECL pecl_http >= 0.1.0)\n
setFitB HaruDestination::setFitB(void) [bool]\nSet the appearance of the page to fit the bounding box of the page within\nthe window. Defines the appearance of the page to fit the bounding box of\nthe page within the window.\n@return (PECL haru >= 0.0.1)\n
setFitBH HaruDestination::setFitBH(float $top) [bool]\nSet the appearance of the page to fit the width of the bounding box. Defines\nthe appearance of the page to magnifying to fit the width of the bounding\nbox and setting the top position of the page to the value of `top`.\n@param top The top coordinates of the page.\n@return (PECL haru >= 0.0.1)\n
setFitBV HaruDestination::setFitBV(float $left) [bool]\nSet the appearance of the page to fit the height of the boudning box. Defines\nthe appearance of the page to magnifying to fit the height of the bounding\nbox and setting the left position of the page to the value of `left`.\n@param left The left coordinates of the page.\n@return (PECL haru >= 0.0.1)\n
setFitH HaruDestination::setFitH(float $top) [bool]\nSet the appearance of the page to fit the window width. Defines the appearance\nof the page to fit the window width and sets the top position of the page\nto the value of `top`.\n@param top The top position of the page.\n@return (PECL haru >= 0.0.1)\n
setFitR HaruDestination::setFitR(float $left, float $bottom, float $right,\nfloat $top) [bool]\nSet the appearance of the page to fit the specified rectangle. Defines the\nappearance of the page to fit the rectangle by the parameters.\n@param left The left coordinates of the page.\n@param bottom The bottom coordinates of the page.\n@param right The right coordinates of the page.\n@param top The top coordinates of the page.\n@return (PECL haru >= 0.0.1)\n
setFitV HaruDestination::setFitV(float $left) [bool]\nSet the appearance of the page to fit the window height. Defines the appearance\nof the page to fit the window height.\n@param left The left position of the page.\n@return (PECL haru >= 0.0.1)\n
setXYZ HaruDestination::setXYZ(float $left, float $top, float $zoom) [bool]\nSet the appearance of the page. Defines the appearance of the page using\nthree parameters: `left`, `top` and `zoom`.\n@param left The left position of the page.\n@param top The top position of the page.\n@param zoom The magnification factor. The value must be between 0.08 (8%)\nand 32 (3200%).\n@return (PECL haru >= 0.0.1)\n
addPage HaruDoc::addPage(void) [object]\nAdd new page to the document. Adds a new page to the document.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::insertPage() - Insert new page just before the specified page\n
addPageLabel HaruDoc::addPageLabel(int $first_page, int $style, int $first_num\n[, string $prefix=&quot;&quot;]) [bool]\nSet the numbering style for the specified range of pages. Set the numbering\nstyle for the specified range of pages.\n@param first_page The first page included into the labeling range.\n@param style The numbering style. The following values are allowed:\nHaruPage::NUM_STYLE_DECIMAL - page label is displayed using decimal\nnumerals. HaruPage::NUM_STYLE_UPPER_ROMAN - page label is displayed using\nuppercase Roman numerals. HaruPage::NUM_STYLE_LOWER_ROMAN - page label is\ndisplayed using lowercase Roman numerals. HaruPage::NUM_STYLE_UPPER_LETTER\n- page label is displayed using uppercase letters (from A to\nZ). HaruPage::NUM_STYLE_LOWER_LETTERS - page label is displayed using\nlowercase letters (from a to z).\n@param first_num The first page number in this range.\n@param prefix The prefix for the page label.\n@return (PECL haru >= 0.0.1)\n
__construct HaruDoc::__construct(void) [void]\nConstruct new HaruDoc instance. Constructs new HaruDoc instance.\n@return (PECL haru >= 0.0.1)\n
createOutline HaruDoc::createOutline(string $title [, object $parent_outline\n[, object $encoder]]) [object]\nCreate a HaruOutline instance. Create a HaruOutline instance.\n@param title The caption of new outline object.\n@param parent_outline A valid HaruOutline instance or NULL.\n@param encoder A valid HaruEncoder instance or NULL.\n@return (PECL haru >= 0.0.1)\n
getCurrentEncoder HaruDoc::getCurrentEncoder(void) [object]\nGet HaruEncoder currently used in the document. Get the HaruEncoder currently\nused in the document.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setCurrentEncoder() - Set the current encoder for the document\n
getCurrentPage HaruDoc::getCurrentPage(void) [object]\nReturn current page of the document. Get current page of the document.\n@return (PECL haru >= 0.0.1)\n
getEncoder HaruDoc::getEncoder(string $encoding) [object]\nGet HaruEncoder instance for the specified encoding. Get the HaruEncoder\ninstance for the specified encoding.\n@param encoding The encoding name. See Builtin Encodings for the list of\nallowed values.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setCurrentEncoder() - Set the current encoder for the document\n@see HaruDoc::getCurrentEncoder() - Get HaruEncoder currently used in the\ndocument\n
getFont HaruDoc::getFont(string $fontname [, string $encoding]) [object]\nGet HaruFont instance. Get a HaruFont instance.\n@param fontname The name of the font. See Builtin Fonts for the list of builtin\nfonts. You can also use the name of a font loaded via HaruDoc::loadTTF(),\nHaruDoc::loadTTC() and HaruDoc::loadType1().\n@param encoding The encoding to use. See Builtin Encodings for the list of\nsupported encodings.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setFontAndSize() - Set font and fontsize for the page\n@see HaruPage::setCurrentFont()\n
getInfoAttr HaruDoc::getInfoAttr(int $type) [string]\nGet current value of the specified document attribute. Get the current value\nof the specified document attribute.\n@param type The type of the attribute. The following values are\navailable: HaruDoc::INFO_AUTHOR HaruDoc::INFO_CREATOR HaruDoc::INFO_TITLE\nHaruDoc::INFO_SUBJECT HaruDoc::INFO_KEYWORDS HaruDoc::INFO_CREATION_DATE\nHaruDoc::INFO_MOD_DATE\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setInfoAttr() - Set the info attribute of the document\n@see HaruDoc::setInfoDateAttr() - Set the datetime info attributes of the\ndocument\n
getPageLayout HaruDoc::getPageLayout(void) [int]\nGet current page layout. Get the current page layout. See\nHaruDoc::setPageLayout() for the list of possible values.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setPageLayout() - Set how pages should be displayed\n
getPageMode HaruDoc::getPageMode(void) [int]\nGet current page mode. Get the current page mode. See HaruDoc::setPageMode()\nfor the list of possible values.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setPageMode() - Set how the document should be displayed\n
getStreamSize HaruDoc::getStreamSize(void) [int]\nGet the size of the temporary stream. Get the size of the temporary stream.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::saveToStream() - Save the document into a temporary stream\n@see HaruDoc::resetStream() - Rewind the temporary stream\n@see HaruDoc::readFromStream() - Read data from the temporary stream\n
insertPage HaruDoc::insertPage(object $page) [object]\nInsert new page just before the specified page. Creates a new page and\ninserts just before the specified page.\n@param page A valid HaruPage instance.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::addPage() - Add new page to the document\n
loadJPEG HaruDoc::loadJPEG(string $filename) [object]\nLoad a JPEG image. Loads the specified JPEG image.\n@param filename A valid JPEG image file.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadPNG() - Load PNG image and return HaruImage instance\n@see HaruDoc::loadRAW() - Load a RAW image\n
loadPNG HaruDoc::loadPNG(string $filename [, bool $deferred=false]) [object]\nLoad PNG image and return HaruImage instance. Loads a PNG image. Libharu\nmight be built without libpng support, in this case each call to this function\nwould result in exception.\n@param filename The name of a PNG image file.\n@param deferred Do not load data immediately. You can set `deferred`\nparameter to TRUE for deferred data loading, in this case only size and\ncolor are loaded immediately.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadJPEG() - Load a JPEG image\n@see HaruDoc::loadRAW() - Load a RAW image\n
loadRaw HaruDoc::loadRaw(string $filename, int $width, int $height, int\n$color_space) [object]\nLoad a RAW image. Loads a RAW image.\n@param filename The name of a RAW image file.\n@param width The width of the image.\n@param height The height of the image.\n@param color_space The color space of the image. Can be one of the following\nvalues: HaruDoc::CS_DEVICE_GRAY HaruDoc::CS_DEVICE_RGB HaruDoc::CS_DEVICE_CMYK\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadJPEG() - Load a JPEG image\n@see HaruDoc::loadPNG() - Load PNG image and return HaruImage instance\n
loadTTC HaruDoc::loadTTC(string $fontfile, int $index [, bool $embed=false])\n[string]\nLoad the font with the specified index from TTC file. Loads the TrueType\nfont with the specified index from a TrueType collection file.\n@param fontfile The TrueType collection file.\n@param index The index of the font in the collection file.\n@param embed When set to TRUE, the glyph data of the font is embedded into\nthe PDF file, otherwise only the matrix data is included.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadTTF() - Load TTF font file\n@see HaruDoc::loadType1() - Load Type1 font\n
loadTTF HaruDoc::loadTTF(string $fontfile [, bool $embed=false]) [string]\nLoad TTF font file. Loads the given TTF file and (optionally) embed its data\ninto the document.\n@param fontfile The TTF file to load.\n@param embed When set to TRUE, the glyph data of the font is embedded into\nthe PDF file, otherwise only the matrix data is included.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadTTC() - Load the font with the specified index from TTC file\n@see HaruDoc::loadType1() - Load Type1 font\n
loadType1 HaruDoc::loadType1(string $afmfile [, string $pfmfile]) [string]\nLoad Type1 font. Loads Type1 font from the given file and registers it in\nthe PDF document.\n@param afmfile Path to an AFM file.\n@param pfmfile Path to a PFA/PFB file, optional. If it&#039;s not set only\nthe glyph data of the font is embedded into the PDF document.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::loadTTC() - Load the font with the specified index from TTC file\n@see HaruDoc::loadTTF() - Load TTF font file\n
output HaruDoc::output(void) [bool]\nWrite the document data to the output buffer. Writes the document data into\nstandard output.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::save() - Save the document into the specified file\n
readFromStream HaruDoc::readFromStream(int $bytes) [string]\nRead data from the temporary stream. Read data from the temporary stream.\n@param bytes The `bytes` parameter specifies how many bytes to read, though\nthe stream may contain less bytes than requested.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::saveToStream() - Save the document into a temporary stream\n@see HaruDoc::resetStream() - Rewind the temporary stream\n@see HaruDoc::getStreamSize() - Get the size of the temporary stream\n
resetError HaruDoc::resetError(void) [bool]\nReset error state of the document handle. Once an error code is set, most of\nthe operations, including I/O processing functions cannot be performed. In\ncase if you want to continue after the cause of the error has been fixed,\nyou have to invoke this function in order to reset the document error state.\n@return (PECL haru >= 0.0.1)\n
resetStream HaruDoc::resetStream(void) [bool]\nRewind the temporary stream. Rewinds the temporary stream of the document.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::saveToStream() - Save the document into a temporary stream\n@see HaruDoc::getStreamSize() - Get the size of the temporary stream\n@see HaruDoc::readFromStream() - Read data from the temporary stream\n
save HaruDoc::save(string $file) [bool]\nSave the document into the specified file. Saves the document into the\nspecified file.\n@param file The file to save the document to.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::output() - Write the document data to the output buffer\n
saveToStream HaruDoc::saveToStream(void) [bool]\nSave the document into a temporary stream. Saves the document data into a\ntemporary stream.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::resetStream() - Rewind the temporary stream\n@see HaruDoc::getStreamSize() - Get the size of the temporary stream\n@see HaruDoc::readFromStream() - Read data from the temporary stream\n
setCompressionMode HaruDoc::setCompressionMode(int $mode) [bool]\nSet compression mode for the document. Defines compression mode for the\ndocument. In case when libharu was compiled without Zlib support this function\nwill always throw HaruException.\n@param mode The compression mode to use. The value is a combination\nof the following flags: HaruDoc::COMP_NONE - all contents is not\ncompressed. HaruDoc::COMP_TEXT - compress the text data. HaruDoc::COMP_IMAGE -\ncompress the image data. HaruDoc::COMP_METADATA - compress other data (fonts,\ncmaps). HaruDoc::COMP_ALL - compress all data.\n@return (PECL haru >= 0.0.1)\n
setCurrentEncoder HaruDoc::setCurrentEncoder(string $encoding) [bool]\nSet the current encoder for the document. Defines the encoder currently used\nin the document.\n@param encoding The name of the encoding to use. See Builtin Encodings for\nthe list of allowed values.\n@return (PECL haru >= 0.0.1)\n
setEncryptionMode HaruDoc::setEncryptionMode(int $mode [, int $key_len=5])\n[bool]\nSet encryption mode for the document. Defines encryption mode for the\ndocument. The encryption mode cannot be set before setting the password.\n@param mode The encryption mode to use. Can be one of the following:\nHaruDoc::ENCRYPT_R2 - use &quot;revision2&quot; algorithm. HaruDoc::ENCRYPT_R3\n- use &quot;revision3&quot; algorithm. Using this value bumps the version\nof PDF to 1.4.\n@param key_len The encryption key length in bytes. This parameter is optional\nand used only when mode is HaruDoc::ENCRYPT_R3. The default value is 5 (40bit).\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setPassword() - Set owner and user passwords for the document\n@see HaruDoc::setPermission() - Set permissions for the document\n
setInfoAttr HaruDoc::setInfoAttr(int $type, string $info) [bool]\nSet the info attribute of the document. Defines an info attribute. Uses the\ncurrent encoding of the document.\n@param type The type of the attribute. Can be one of the following:\nHaruDoc::INFO_AUTHOR HaruDoc::INFO_CREATOR HaruDoc::INFO_TITLE\nHaruDoc::INFO_SUBJECT HaruDoc::INFO_KEYWORDS\n@param info The value of the attribute.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setInfoDateAttr() - Set the datetime info attributes of the\ndocument\n
setInfoDateAttr HaruDoc::setInfoDateAttr(int $type, int $year, int $month,\nint $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int\n$off_min) [bool]\nSet the datetime info attributes of the document. Sets the datetime info\nattributes of the document.\n@param type The type of the attribute. Can be one of the following:\nHaruDoc::INFO_CREATION_DATE HaruDoc::INFO_MOD_DATE\n@param year\n@param month Between 1 and 12.\n@param day Between 1 and 31, 30, 29 or 28 (different for each month).\n@param hour Between 0 and 23.\n@param min Between 0 and 59.\n@param sec Between 0 and 59.\n@param ind The timezone relation to UTC, can be &quot;&quot;, &quot; &quot;,\n&quot;+&quot;, &quot;-&quot; and &quot;Z&quot;.\n@param off_hour If `ind` is not &quot; &quot; or &quot;&quot;, values between\n0 and 23 are valid. Otherwise, this parameter is ignored.\n@param off_min If `ind` is not &quot; &quot; or &quot;&quot;, values between\n0 and 59 are valid. Otherwise, this parameter is ignored.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setInfoAttr() - Set the info attribute of the document\n
setOpenAction HaruDoc::setOpenAction(object $destination) [bool]\nDefine which page is shown when the document is opened. Defines which page\nshould be shown when the document is opened.\n@param destination A valid HaruDestination instance.\n@return (PECL haru >= 0.0.1)\n
setPageLayout HaruDoc::setPageLayout(int $layout) [bool]\nSet how pages should be displayed. Defines how pages should be displayed.\n@param layout The following values are accepted: HaruDoc::PAGE_LAYOUT_SINGLE\n- only one page is displayed. HaruDoc::PAGE_LAYOUT_ONE_COLUMN - display the\npages in one column. HaruDoc::PAGE_LAYOUT_TWO_COLUMN_LEFT - display pages\nin two columns, first page left. HaruDoc::PAGE_LAYOUT_TWO_COLUMN_RIGHT -\ndisplay pages in two columns, first page right.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::getPageLayout() - Get current page layout\n
setPageMode HaruDoc::setPageMode(int $mode) [bool]\nSet how the document should be displayed. Defines how the document should\nbe displayed.\n@param mode The following values are accepted:\nHaruDoc::PAGE_MODE_USE_NONE - display the document with neither outline\nnor thumbnail. HaruDoc::PAGE_MODE_USE_OUTLINE - display the document with\noutline pane. HaruDoc::PAGE_MODE_USE_THUMBS - display the document with\nthumbnail pane. HaruDoc::PAGE_MODE_FULL_SCREEN - display the document with\nfull screen mode.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::getPageMode() - Get current page mode\n
setPagesConfiguration HaruDoc::setPagesConfiguration(int $page_per_pages)\n[bool]\nSet the number of pages per set of pages. By default the document has one\npages object as a root for all pages. All page objects are create as branches\nof this object. One pages object can contain only 8191, therefore the maximum\nnumber of pages per document is 8191. But you can change that fact by setting\n`page_per_pages` parameter, so that the root pages object contains 8191\nmore pages (not page) objects, which in turn contain 8191 pages each. So\nthe maximum number of pages in the document becomes 8191*`page_per_pages`.\n@param page_per_pages The numbers of pages that a pages object can contain.\n@return (PECL haru >= 0.0.1)\n
setPassword HaruDoc::setPassword(string $owner_password, string $user_password)\n[bool]\nSet owner and user passwords for the document. Defines owner and user passwords\nfor the document. Setting the passwords makes the document contents encrypted.\n@param owner_password The password of the owner, which can change permissions\nof the document. Empty password is not accepted. Owner&#039;s password cannot\nbe the same as the user&#039;s password.\n@param user_password The password of the user. Can be empty.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setEncryptionMode() - Set encryption mode for the document\n@see HaruDoc::setPermission() - Set permissions for the document\n
setPermission HaruDoc::setPermission(int $permission) [bool]\nSet permissions for the document. Defines permissions for the document.\n@param permission The values is a combination of these flags:\nHaruDoc::ENABLE_READ - user can read the document. HaruDoc::ENABLE_PRINT - user\ncan print the document. HaruDoc::ENABLE_EDIT_ALL - user can edit the contents\nof the document other than annotations and form fields. HaruDoc::ENABLE_COPY -\nuser can copy the text and the graphics of the document. HaruDoc::ENABLE_EDIT\n- user can add or modify the annotations and form fields of the document.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::setPassword() - Set owner and user passwords for the document\n@see HaruDoc::setEncryptionMode() - Set encryption mode for the document\n
useCNSEncodings HaruDoc::useCNSEncodings(void) [bool]\nEnable Chinese simplified encodings. Enables Chinese simplified encodings.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useCNSFonts() - Enable builtin Chinese simplified fonts\n
useCNSFonts HaruDoc::useCNSFonts(void) [bool]\nEnable builtin Chinese simplified fonts. Enables builtin Chinese simplified\nfonts.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useCNSEncodings() - Enable Chinese simplified encodings\n
useCNTEncodings HaruDoc::useCNTEncodings(void) [bool]\nEnable Chinese traditional encodings. Enables Chinese traditional encodings.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useCNTFonts() - Enable builtin Chinese traditional fonts\n
useCNTFonts HaruDoc::useCNTFonts(void) [bool]\nEnable builtin Chinese traditional fonts. Enables builtin Chinese traditional\nfonts.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useCNTEncodings() - Enable Chinese traditional encodings\n
useJPEncodings HaruDoc::useJPEncodings(void) [bool]\nEnable Japanese encodings. Enables Japanese encodings.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useJPFonts() - Enable builtin Japanese fonts\n
useJPFonts HaruDoc::useJPFonts(void) [bool]\nEnable builtin Japanese fonts. Enables builtin Japanese fonts.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useJPEncodings() - Enable Japanese encodings\n
useKREncodings HaruDoc::useKREncodings(void) [bool]\nEnable Korean encodings. Enables Korean encodings.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useKRFonts() - Enable builtin Korean fonts\n
useKRFonts HaruDoc::useKRFonts(void) [bool]\nEnable builtin Korean fonts. Enables builtin Korean fonts.\n@return (PECL haru >= 0.0.1)\n@see HaruDoc::useKREncodings() - Enable Korean encodings\n
getByteType HaruEncoder::getByteType(string $text, int $index) [int]\nGet the type of the byte in the text. Get the type of the byte in the text.\n@param text The text.\n@param index The position in the text.\n@return (PECL haru >= 0.0.1)\n
getType HaruEncoder::getType(void) [int]\nGet the type of the encoder. Get the type of the encoder.\n@return (PECL haru >= 0.0.1)\n
getUnicode HaruEncoder::getUnicode(int $character) [int]\nConvert the specified character to unicode. Converts the specified character\nto unicode.\n@param character The character code to convert.\n@return (PECL haru >= 0.0.1)\n
getWritingMode HaruEncoder::getWritingMode(void) [int]\nGet the writing mode of the encoder. Get the writing mode of the encoder.\n@return (PECL haru >= 0.0.1)\n
getAscent HaruFont::getAscent(void) [int]\nGet the vertical ascent of the font. Get the vertical ascent of the font.\n@return (PECL haru >= 0.0.1)\n
getCapHeight HaruFont::getCapHeight(void) [int]\nGet the distance from the baseline of uppercase letters. Get the distance\nfrom the baseline of uppercase letters.\n@return (PECL haru >= 0.0.1)\n
getDescent HaruFont::getDescent(void) [int]\nGet the vertical descent of the font. Get the vertical descent of the font.\n@return (PECL haru >= 0.0.1)\n
getEncodingName HaruFont::getEncodingName(void) [string]\nGet the name of the encoding. Get the name of the font encoding.\n@return (PECL haru >= 0.0.1)\n
getFontName HaruFont::getFontName(void) [string]\nGet the name of the font. Get the name of the font.\n@return (PECL haru >= 0.0.1)\n
getTextWidth HaruFont::getTextWidth(string $text) [array]\nGet the total width of the text, number of characters, number of words and\nnumber of spaces. Get the total width of the text, number of characters,\nnumber of words and number of spaces.\n@param text The text to measure.\n@return (PECL haru >= 0.0.1)\n
getUnicodeWidth HaruFont::getUnicodeWidth(int $character) [int]\nGet the width of the character in the font. Get the width of the character\nin the font.\n@param character The code of the character.\n@return (PECL haru >= 0.0.1)\n
getXHeight HaruFont::getXHeight(void) [int]\nGet the distance from the baseline of lowercase letters. Gets the distance\nfrom the baseline of lowercase letters.\n@return (PECL haru >= 0.0.1)\n
measureText HaruFont::measureText(string $text, float $width, float $font_size,\nfloat $char_space, float $word_space [, bool $word_wrap=false]) [int]\nCalculate the number of characters which can be included within the specified\nwidth. Calculate the number of characters which can be included within the\nspecified width.\n@param text The text to fit the width.\n@param width The width of the area to put the text to.\n@param font_size The size of the font.\n@param char_space The character spacing.\n@param word_space The word spacing.\n@param word_wrap When this parameter is set to TRUE the function\n&quot;emulates&quot; word wrapping and doesn&#039;t include the part of the\ncurrent word if reached the end of the area.\n@return (PECL haru >= 0.0.1)\n
getBitsPerComponent HaruImage::getBitsPerComponent(void) [int]\nGet the number of bits used to describe each color component of the image. Gets\nthe number of bits used to describe each color component of the image.\n@return (PECL haru >= 0.0.1)\n
getColorSpace HaruImage::getColorSpace(void) [string]\nGet the name of the color space. Get the name of the color space.\n@return (PECL haru >= 0.0.1)\n
getHeight HaruImage::getHeight(void) [int]\nGet the height of the image. Get the height of the image.\n@return (PECL haru >= 0.0.1)\n
getSize HaruImage::getSize(void) [array]\nGet size of the image. Get the size of the image.\n@return (PECL haru >= 0.0.1)\n
getWidth HaruImage::getWidth(void) [int]\nGet the width of the image. Get the width of the image.\n@return (PECL haru >= 0.0.1)\n
setColorMask HaruImage::setColorMask(int $rmin, int $rmax, int $gmin, int\n$gmax, int $bmin, int $bmax) [bool]\nSet the color mask of the image. Defines the transparent color of the image\nusing the RGB range values. The color within the range is displayed as a\ntransparent color. The color space of the image must be RGB.\n@param rmin The lower limit of red. Must be between 0 and 255.\n@param rmax The upper limit of red. Must be between 0 and 255.\n@param gmin The lower limit of green. Must be between 0 and 255.\n@param gmax The upper limit of green. Must be between 0 and 255.\n@param bmin The lower limit of blue. Must be between 0 and 255.\n@param bmax The upper limit of blue. Must be between 0 and 255.\n@return (PECL haru >= 0.0.1)\n
setMaskImage HaruImage::setMaskImage(object $mask_image) [bool]\nSet the image mask. Sets the image used as image-mask. It must be 1bit\ngray-scale color image.\n@param mask_image A valid HaruImage instance.\n@return (PECL haru >= 0.0.1)\n
setDestination HaruOutline::setDestination(object $destination) [bool]\nSet the destination for the outline. Sets a destination object which becomes\na target to jump to when the outline is clicked.\n@param destination A valid HaruDestination instance.\n@return (PECL haru >= 0.0.1)\n
setOpened HaruOutline::setOpened(bool $opened) [bool]\nSet the initial state of the outline. Defines whether this node is opened\nor not when the outline is displayed for the first time.\n@param opened TRUE means open, FALSE - closed.\n@return (PECL haru >= 0.0.1)\n
arc HaruPage::arc(float $x, float $y, float $ray, float $ang1, float $ang2)\n[bool]\nAppend an arc to the current path. Appends an arc to the current path.\n@param x Horizontal coordinate of the center.\n@param y Vertical coordinate of the center.\n@param ray The ray of the arc.\n@param ang1 The angle of the beginning.\n@param ang2 The angle of the end. Must be greater than `ang1`.\n@return (PECL haru >= 0.0.1)\n
beginText HaruPage::beginText(void) [bool]\nBegin a text object and set the current text position to (0,0). Begins new\ntext object and sets the current text position to (0,0).\n@return (PECL haru >= 0.0.1)\n
circle HaruPage::circle(float $x, float $y, float $ray) [bool]\nAppend a circle to the current path. Appends a circle to the current path.\n@param x Horizontal coordinate of the center point.\n@param y Vertical coordinate of the center point.\n@param ray The ray of the circle.\n@return (PECL haru >= 0.0.1)\n
closePath HaruPage::closePath(void) [bool]\nAppend a straight line from the current point to the start point of the\npath. Appends a straight line from the current point to the start point of\nthe path.\n@return (PECL haru >= 0.0.1)\n
concat HaruPage::concat(float $a, float $b, float $c, float $d, float $x,\nfloat $y) [bool]\nConcatenate current transformation matrix of the page and the specified\nmatrix. Concatenates current transformation matrix of the page and the\nspecified matrix.\n@param a\n@param b\n@param c\n@param d\n@param x\n@param y\n@return (PECL haru >= 0.0.1)\n
createDestination HaruPage::createDestination(void) [object]\nCreate new HaruDestination instance. Create a new HaruDestination instance.\n@return (PECL haru >= 0.0.1)\n
createLinkAnnotation HaruPage::createLinkAnnotation(array $rectangle, object\n$destination) [object]\nCreate new HaruAnnotation instance. Creates a new HaruAnnotation instance.\n@param rectangle An array with 4 coordinates of the clickable area.\n@param destination Valid HaruDestination instance.\n@return (PECL haru >= 0.0.1)\n
createTextAnnotation HaruPage::createTextAnnotation(array $rectangle, string\n$text [, object $encoder]) [object]\nCreate new HaruAnnotation instance. Creates a new HaruAnnotation instance.\n@param rectangle An array with 4 coordinates of the annotation area.\n@param text The text to be displayed.\n@param encoder Optional HaruEncoder instance.\n@return (PECL haru >= 0.0.1)\n
createURLAnnotation HaruPage::createURLAnnotation(array $rectangle, string\n$url) [object]\nCreate and return new HaruAnnotation instance. Creates a new HaruAnnotation\ninstance.\n@param rectangle An array with 4 coordinates of the clickable area.\n@param url The URL to open.\n@return (PECL haru >= 0.0.1)\n
curveTo HaruPage::curveTo(float $x1, float $y1, float $x2, float $y2, float\n$x3, float $y3) [bool]\nAppend a Bezier curve to the current path. Append a Bezier curve to the\ncurrent path. The point (x1, y1) and the point (x2, y2) are used as the control\npoints for a Bezier curve and current point is moved to the point (x3, y3).\n@param x1 A Bezier curve control point.\n@param y1 A Bezier curve control point.\n@param x2 A Bezier curve control point.\n@param y2 A Bezier curve control point.\n@param x3 The current point moves here.\n@param x3 The current point moves here.\n@return (PECL haru >= 0.0.1)\n
curveTo2 HaruPage::curveTo2(float $x2, float $y2, float $x3, float $y3) [bool]\nAppend a Bezier curve to the current path. Appends a Bezier curve to the\ncurrent path. The current point and the point (x2, y2) are used as the control\npoints for the Bezier curve and current point is moved to the point (x3, y3).\n@param x2 A Bezier curve control point.\n@param y2 A Bezier curve control point.\n@param x3 The current point moves here.\n@param x3 The current point moves here.\n@return (PECL haru >= 0.0.1)\n
curveTo3 HaruPage::curveTo3(float $x1, float $y1, float $x3, float $y3) [bool]\nAppend a Bezier curve to the current path. Appends a Bezier curve to the\ncurrent path. The point (x1, y1) and the point (x3, y3) are used as the control\npoints for a Bezier curve and current point is moved to the point (x3, y3).\n@param x1 A Bezier curve control point.\n@param y1 A Bezier curve control point.\n@param x3 The current point moves here.\n@param x3 The current point moves here.\n@return (PECL haru >= 0.0.1)\n
drawImage HaruPage::drawImage(object $image, float $x, float $y, float $width,\nfloat $height) [bool]\nShow image at the page. Show image at the page.\n@param image Valid HaruImage instance.\n@param x The left border of the area where the image is displayed.\n@param y The lower border of the area where the image is displayed.\n@param width The width of the image area.\n@param height The height of the image area.\n@return (PECL haru >= 0.0.1)\n
ellipse HaruPage::ellipse(float $x, float $y, float $xray, float $yray) [bool]\nAppend an ellipse to the current path. Appends an ellipse to the current path.\n@param x Horizontal coordinate of the center.\n@param y Vertical coordinate of the center.\n@param xray The ray of the ellipse in the x direction.\n@param yray The ray of the ellipse in the y direction.\n@return (PECL haru >= 0.0.1)\n
endPath HaruPage::endPath(void) [bool]\nEnd current path object without filling and painting operations. Ends current\npath object without performing filling and painting operations.\n@return (PECL haru >= 0.0.1)\n
endText HaruPage::endText(void) [bool]\nEnd current text object. Finalizes current text object.\n@return (PECL haru >= 0.0.1)\n
eofill HaruPage::eofill(void) [bool]\nFill current path using even-odd rule. Fills current path using even-odd rule.\n@return (PECL haru >= 0.0.1)\n
eoFillStroke HaruPage::eoFillStroke([bool $close_path=false]) [bool]\nFill current path using even-odd rule, then paint the path. Fills current\npath using even-odd rule, then paints the path.\n@param close_path Optional parameter. When set to TRUE, the function closes\nthe current path. Default to FALSE.\n@return (PECL haru >= 0.0.1)\n
fill HaruPage::fill(void) [bool]\nFill current path using nonzero winding number rule. Fills current path\nusing nonzero winding number rule.\n@return (PECL haru >= 0.0.1)\n
fillStroke HaruPage::fillStroke([bool $close_path=false]) [bool]\nFill current path using nonzero winding number rule, then paint the path. Fills\ncurrent path using nonzero winding number rule, then paints the path.\n@param close_path Optional parameter. When set to TRUE, the function closes\nthe current path. Default to FALSE.\n@return (PECL haru >= 0.0.1)\n
getCharSpace HaruPage::getCharSpace(void) [float]\nGet the current value of character spacing. Get the current value of\ncharacter spacing.\n@return (PECL haru >= 0.0.1)\n
getCMYKFill HaruPage::getCMYKFill(void) [array]\nGet the current filling color. Returns the current filling color.\n@return (PECL haru >= 0.0.1)\n
getCMYKStroke HaruPage::getCMYKStroke(void) [array]\nGet the current stroking color. Get the current stroking color.\n@return (PECL haru >= 0.0.1)\n
getCurrentFont HaruPage::getCurrentFont(void) [object]\nGet the currently used font. Get the currently used font.\n@return (PECL haru >= 0.0.1)\n
getCurrentFontSize HaruPage::getCurrentFontSize(void) [float]\nGet the current font size. Get the current font size.\n@return (PECL haru >= 0.0.1)\n
getCurrentPos HaruPage::getCurrentPos(void) [array]\nGet the current position for path painting. Get the current position for\npath painting.\n@return (PECL haru >= 0.0.1)\n
getCurrentTextPos HaruPage::getCurrentTextPos(void) [array]\nGet the current position for text printing. Get the current position for\ntext printing.\n@return (PECL haru >= 0.0.1)\n
getDash HaruPage::getDash(void) [array]\nGet the current dash pattern. Get the current dash pattern. See\nHaruPage::setDash() for more information on dash patterns.\n@return (PECL haru >= 0.0.1)\n@see HaruPage::setDash() - Set the dash pattern for the page\n
gmp_sqrtrem gmp_sqrtrem(resource $a) [array]\nSquare root with remainder. Calculate the square root of a number, with\nremainder.\n@param a The number being square rooted. It can be either a GMP number\nresource, or a numeric string given that it is possible to convert the latter\nto a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_strval gmp_strval(resource $gmpnumber [, int $base]) [string]\nConvert GMP number to string. Convert GMP number to string representation\nin base `base`. The default base is 10.\n@param gmpnumber The GMP number that will be converted to a string. It can be\neither a GMP number resource, or a numeric string given that it is possible\nto convert the latter to a number.\n@param base The base of the returned number. The default base is 10. Allowed\nvalues for the base are from 2 to 62 and -2 to -36.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: To use the extended base introduced in PHP 5.3.2, then PHP must\nbe compiled against GMP 4.2.0 or greater.\n
gmp_sub gmp_sub(resource $a, resource $b) [resource]\nSubtract numbers. Subtracts `b` from `a` and returns the result.\n@param a The number being subtracted from. It can be either a GMP number\nresource, or a numeric string given that it is possible to convert the latter\nto a number.\n@param b The number subtracted from `a`. It can be either a GMP number\nresource, or a numeric string given that it is possible to convert the latter\nto a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_testbit gmp_testbit(resource $a, int $index) [bool]\nTests if a bit is set. Tests if the specified bit is set.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param index The bit to test\n@return (PHP 5 >= 5.3.0)\n@see gmp_setbit() - Set bit\n@see gmp_clrbit() - Clear bit\n
gmp_xor gmp_xor(resource $a, resource $b) [resource]\nBitwise XOR. Calculates bitwise exclusive OR (XOR) of two GMP numbers.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmstrftime gmstrftime(string $format [, int $timestamp=time()]) [string]\nFormat a GMT/UTC time/date according to locale settings. Behaves the same as\nstrftime() except that the time returned is Greenwich Mean Time (GMT). For\nexample, when run in Eastern Standard Time (GMT -0500), the first line below\nprints &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan\n01 1999 01:00:00&quot;.\n@param format See description in strftime().\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@return (PHP 4, PHP 5)\n@see strftime() - Format a local time/date according to locale settings\n
gnupg_adddecryptkey gnupg_adddecryptkey(resource $identifier, string\n$fingerprint, string $passphrase) [bool]\nAdd a key for decryption.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param fingerprint The fingerprint key.\n@param passphrase The pass phrase.\n@return (PECL gnupg >= 0.5)\n
gnupg_addencryptkey gnupg_addencryptkey(resource $identifier, string\n$fingerprint) [bool]\nAdd a key for encryption.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param fingerprint The fingerprint key.\n@return (PECL gnupg >= 0.5)\n
gnupg_addsignkey gnupg_addsignkey(resource $identifier, string $fingerprint\n[, string $passphrase]) [bool]\nAdd a key for signing.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param fingerprint The fingerprint key.\n@param passphrase The pass phrase.\n@return (PECL gnupg >= 0.5)\n
gnupg_cleardecryptkeys gnupg_cleardecryptkeys(resource $identifier) [bool]\nRemoves all keys which were set for decryption before.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@return (PECL gnupg >= 0.5)\n
gnupg_clearencryptkeys gnupg_clearencryptkeys(resource $identifier) [bool]\nRemoves all keys which were set for encryption before.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@return (PECL gnupg >= 0.5)\n
gnupg_clearsignkeys gnupg_clearsignkeys(resource $identifier) [bool]\nRemoves all keys which were set for signing before.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@return (PECL gnupg >= 0.5)\n
gnupg_decrypt gnupg_decrypt(resource $identifier, string $text) [string]\nDecrypts a given text. Decrypts the given text with the keys, which were\nset with gnupg_adddecryptkey before.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param text The text being decrypted.\n@return (PECL gnupg >= 0.1)\n
gnupg_decryptverify gnupg_decryptverify(resource $identifier, string $text,\nstring &$plaintext) [array]\nDecrypts and verifies a given text. Decrypts and verifies a given text and\nreturns information about the signature.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param text The text being decrypted.\n@param plaintext The parameter `plaintext` gets filled with the decrypted text.\n@return (PECL gnupg >= 0.2)\n
gnupg_encrypt gnupg_encrypt(resource $identifier, string $plaintext) [string]\nEncrypts a given text. Encrypts the given `plaintext` with the keys, which\nwere set with gnupg_addencryptkey before and returns the encrypted text.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param plaintext The text being encrypted.\n@return (PECL gnupg >= 0.1)\n
gnupg_encryptsign gnupg_encryptsign(resource $identifier, string $plaintext)\n[string]\nEncrypts and signs a given text. Encrypts and signs the given `plaintext`\nwith the keys, which were set with gnupg_addsignkey and gnupg_addencryptkey\nbefore and returns the encrypted and signed text.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param plaintext The text being encrypted.\n@return (PECL gnupg >= 0.2)\n
gnupg_export gnupg_export(resource $identifier, string $fingerprint) [string]\nExports a key. Exports the key `fingerprint`.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param fingerprint The fingerprint key.\n@return (PECL gnupg >= 0.1)\n
gnupg_geterror gnupg_geterror(resource $identifier) [string]\nReturns the errortext, if a function fails.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@return (PECL gnupg >= 0.1)\n
gnupg_getprotocol gnupg_getprotocol(resource $identifier) [int]\nReturns the currently active protocol for all operations.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@return (PECL gnupg >= 0.1)\n
gnupg_import gnupg_import(resource $identifier, string $keydata) [array]\nImports a key. Imports the key `keydata` and returns an array with information\nabout the importprocess.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param keydata The data key that is being imported.\n@return (PECL gnupg >= 0.3)\n
gnupg_init gnupg_init(void) [resource]\nInitialize a connection.\n@return (PECL gnupg >= 0.4)\n
gnupg_keyinfo gnupg_keyinfo(resource $identifier, string $pattern) [array]\nReturns an array with information about all keys that matches the given\npattern.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param pattern The pattern being checked against the keys.\n@return (PECL gnupg >= 0.1)\n
gnupg_setarmor gnupg_setarmor(resource $identifier, int $armor) [bool]\nToggle armored output. Toggle the armored output.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param armor Pass a non-zero integer-value to this function to enable\narmored-output (default). Pass 0 to disable armored output.\n@return (PECL gnupg >= 0.1)\n
gnupg_seterrormode gnupg_seterrormode(resource $identifier, int $errormode)\n[void]\nSets the mode for error_reporting. Sets the mode for error_reporting.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param errormode The error mode. `errormode` takes a constant indicating\nwhat type of error_reporting should be used. The possible values are\nGNUPG_ERROR_WARNING, GNUPG_ERROR_EXCEPTION and GNUPG_ERROR_SILENT. By default\nGNUPG_ERROR_SILENT is used.\n@return (PECL gnupg >= 0.6)\n
gnupg_setsignmode gnupg_setsignmode(resource $identifier, int $signmode) [bool]\nSets the mode for signing. Sets the mode for signing.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param sigmode The mode for signing. `signmode` takes a constant indicating\nwhat type of signature should be produced. The possible values are\nGNUPG_SIG_MODE_NORMAL, GNUPG_SIG_MODE_DETACH and GNUPG_SIG_MODE_CLEAR. By\ndefault GNUPG_SIG_MODE_CLEAR is used.\n@return (PECL gnupg >= 0.1)\n
gnupg_sign gnupg_sign(resource $identifier, string $plaintext) [string]\nSigns a given text. Signs the given `plaintext` with the keys, which were set\nwith gnupg_addsignkey before and returns the signed text or the signature,\ndepending on what was set with gnupg_setsignmode.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param plaintext The plain text being signed.\n@return (PECL gnupg >= 0.1)\n
gnupg_verify gnupg_verify(resource $identifier, string $signed_text, string\n$signature [, string &$plaintext]) [array]\nVerifies a signed text. Verifies the given `signed_text` and returns\ninformation about the signature.\n@param identifier The gnupg identifier, from a call to gnupg_init() or gnupg.\n@param signed_text The signed text.\n@param signature The signature. To verify a clearsigned text, set signature\nto FALSE.\n@param plaintext The plain text. If this optional parameter is passed,\nit is filled with the plain text.\n@return (PECL gnupg >= 0.1)\n
gopher_parsedir gopher_parsedir(string $dirent) [array]\nTranslate a gopher formatted directory entry into an associative\narray.. gopher_parsedir() parses a gopher formatted directory entry into\nan associative array. While gopher returns `text/plain` documents for\nactual document requests. A request to a directory (such as /) will return\nspecially encoded series of lines with each line being one directory entry\nor information line.\n@param dirent The directory entry.\n@return (PECL net_gopher >= 0.1)\n
grapheme_extract grapheme_extract(string $haystack, int $size [, int\n$extract_type [, int $start=0 [, int &$next]]]) [string]\nFunction to extract a sequence of default grapheme clusters from a text\nbuffer, which must be encoded in UTF-8.. Function to extract a sequence of\ndefault grapheme clusters from a text buffer, which must be encoded in UTF-8.\n@param haystack String to search.\n@param size Maximum number items - based on the $extract_type - to return.\n@param extract_type Defines the type of units referred to by the $size\nparameter: GRAPHEME_EXTR_COUNT (default) - $size is the number of default\ngrapheme clusters to extract. GRAPHEME_EXTR_MAXBYTES - $size is the maximum\nnumber of bytes returned. GRAPHEME_EXTR_MAXCHARS - $size is the maximum\nnumber of UTF-8 characters returned.\n@param start Starting position in $haystack in bytes - if given, it must be\nzero or a positive value that is less than or equal to the length of $haystack\nin bytes. If $start does not point to the first byte of a UTF-8 character,\nthe start position is moved to the next character boundary.\n@param next Reference to a value that will be set to the next starting\nposition. When the call returns, this may point to the first byte position\npast the end of the string.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_substr() - Return part of a string\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_stripos grapheme_stripos(string $haystack, string $needle [, int\n$offset=0]) [int]\nFind position (in grapheme units) of first occurrence of a case-insensitive\nstring. Find position (in grapheme units) of first occurrence of a\ncase-insensitive string\n@param haystack The string to look in. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param offset The optional $offset parameter allows you to specify where\nin haystack to start searching as an offset in grapheme units (not bytes\nor characters). The position returned is still relative to the beginning of\nhaystack regardless of the value of $offset.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stristr() - Returns part of haystack string from the first\noccurrence of case-insensitive needle to the end of haystack.\n@see grapheme_strpos() - Find position (in grapheme units) of first occurrence\nof a string\n@see grapheme_strripos() - Find position (in grapheme units) of last occurrence\nof a case-insensitive string\n@see grapheme_strrpos() - Find position (in grapheme units) of last occurrence\nof a string\n@see grapheme_strstr() - Returns part of haystack string from the first\noccurrence of needle to the end of haystack.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_stristr grapheme_stristr(string $haystack, string $needle [, bool\n$before_needle=false]) [string]\nReturns part of haystack string from the first occurrence of case-insensitive\nneedle to the end of haystack.. Returns part of haystack string from the\nfirst occurrence of case-insensitive needle to the end of haystack.\n@param haystack The input string. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param before_needle If TRUE, grapheme_strstr() returns the part of the\nhaystack before the first occurrence of the needle.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stripos() - Find position (in grapheme units) of first occurrence\nof a case-insensitive string\n@see grapheme_strpos() - Find position (in grapheme units) of first occurrence\nof a string\n@see grapheme_strripos() - Find position (in grapheme units) of last occurrence\nof a case-insensitive string\n@see grapheme_strrpos() - Find position (in grapheme units) of last occurrence\nof a string\n@see grapheme_strstr() - Returns part of haystack string from the first\noccurrence of needle to the end of haystack.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_strlen grapheme_strlen(string $input) [int]\nGet string length in grapheme units. Get string length in grapheme units\n(not bytes or characters)\n@param input The string being measured for length. It must be a valid\nUTF-8 string.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_strpos grapheme_strpos(string $haystack, string $needle [, int\n$offset=0]) [int]\nFind position (in grapheme units) of first occurrence of a string. Find\nposition (in grapheme units) of first occurrence of a string\n@param haystack The string to look in. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param offset The optional $offset parameter allows you to specify where\nin $haystack to start searching as an offset in grapheme units (not bytes\nor characters). The position returned is still relative to the beginning of\nhaystack regardless of the value of $offset.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stripos() - Find position (in grapheme units) of first occurrence\nof a case-insensitive string\n@see grapheme_stristr() - Returns part of haystack string from the first\noccurrence of case-insensitive needle to the end of haystack.\n@see grapheme_strripos() - Find position (in grapheme units) of last occurrence\nof a case-insensitive string\n@see grapheme_strrpos() - Find position (in grapheme units) of last occurrence\nof a string\n@see grapheme_strstr() - Returns part of haystack string from the first\noccurrence of needle to the end of haystack.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_strripos grapheme_strripos(string $haystack, string $needle [,\nint $offset=0]) [int]\nFind position (in grapheme units) of last occurrence of a case-insensitive\nstring. Find position (in grapheme units) of last occurrence of a\ncase-insensitive string\n@param haystack The string to look in. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param offset The optional $offset parameter allows you to specify where\nin $haystack to start searching as an offset in grapheme units (not bytes\nor characters). The position returned is still relative to the beginning of\nhaystack regardless of the value of $offset.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stripos() - Find position (in grapheme units) of first occurrence\nof a case-insensitive string\n@see grapheme_stristr() - Returns part of haystack string from the first\noccurrence of case-insensitive needle to the end of haystack.\n@see grapheme_strpos() - Find position (in grapheme units) of first occurrence\nof a string\n@see grapheme_strrpos() - Find position (in grapheme units) of last occurrence\nof a string\n@see grapheme_strstr() - Returns part of haystack string from the first\noccurrence of needle to the end of haystack.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_strrpos grapheme_strrpos(string $haystack, string $needle [, int\n$offset=0]) [int]\nFind position (in grapheme units) of last occurrence of a string. Find position\n(in grapheme units) of last occurrence of a string\n@param haystack The string to look in. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param offset The optional $offset parameter allows you to specify where\nin $haystack to start searching as an offset in grapheme units (not bytes\nor characters). The position returned is still relative to the beginning of\nhaystack regardless of the value of $offset.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stripos() - Find position (in grapheme units) of first occurrence\nof a case-insensitive string\n@see grapheme_stristr() - Returns part of haystack string from the first\noccurrence of case-insensitive needle to the end of haystack.\n@see grapheme_strpos() - Find position (in grapheme units) of first occurrence\nof a string\n@see grapheme_strripos() - Find position (in grapheme units) of last occurrence\nof a case-insensitive string\n@see grapheme_strstr() - Returns part of haystack string from the first\noccurrence of needle to the end of haystack.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_strstr grapheme_strstr(string $haystack, string $needle [, bool\n$before_needle=false]) [string]\nReturns part of haystack string from the first occurrence of needle to the\nend of haystack.. Returns part of haystack string from the first occurrence\nof needle to the end of haystack.\n@param haystack The input string. Must be valid UTF-8.\n@param needle The string to look for. Must be valid UTF-8.\n@param before_needle If TRUE, grapheme_strstr() returns the part of the\nhaystack before the first occurrence of the needle.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_stristr() - Returns part of haystack string from the first\noccurrence of case-insensitive needle to the end of haystack.\n@see grapheme_stripos() - Find position (in grapheme units) of first occurrence\nof a case-insensitive string\n@see grapheme_strpos() - Find position (in grapheme units) of first occurrence\nof a string\n@see grapheme_strripos() - Find position (in grapheme units) of last occurrence\nof a case-insensitive string\n@see grapheme_strrpos() - Find position (in grapheme units) of last occurrence\nof a string\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
grapheme_substr grapheme_substr(string $string, int $start [, int $length])\n[int]\nReturn part of a string. Return part of a string\n@param string The input string. Must be valid UTF-8.\n@param start Start position in default grapheme units. If $start is\nnon-negative, the returned string will start at the $start&#039;th position\nin $string, counting from zero. If $start is negative, the returned string\nwill start at the $start&#039;th grapheme unit from the end of string.\n@param length Length in grapheme units. If $length is given and is positive,\nthe string returned will contain at most $length grapheme units beginning\nfrom $start (depending on the length of string). If $string is less than\nor equal to $start grapheme units long, FALSE will be returned. If $length\nis given and is negative, then that many grapheme units will be omitted\nfrom the end of string (after the start position has been calculated when\na start is negative). If $start denotes a position beyond this truncation,\nan empty string will be returned.\n@return (PHP 5 >= 5.3.0, PECL intl >= 1.0.0)\n@see grapheme_extract() - Function to extract a sequence of default grapheme\nclusters from a text buffer, which must be encoded in UTF-8.\n@see &raquo; Unicode Text Segmentation: Grapheme Cluster Boundaries\n
GregorianToJD int gregoriantojd ( int $month , int $day , int $year )\nConverts a Gregorian date to Julian Day Count. Valid Range for Gregorian\nCalendar 4714 B.C. to 9999 A.D. Although this function can handle dates all\nthe way back to 4714 B.C., such use may not be meaningful. The Gregorian\ncalendar was not instituted until October 15, 1582 (or October 5, 1582 in\nthe Julian calendar). Some countries did not accept it until much later. For\nexample, Britain converted in 1752, The USSR in 1918 and Greece in 1923. Most\nEuropean countries used the Julian calendar prior to the Gregorian.\n@param month The month as a number from 1 (for January) to 12 (for December)\n@param day The day as a number from 1 to 31\n@param year The year as a number between -4714 and 9999\n@return (PHP 4, PHP 5)\n@see jdtogregorian() - Converts Julian Day Count to Gregorian date\n@see cal_to_jd() - Converts from a supported calendar to Julian Day Count\n
gupnp_context_get_host_ip gupnp_context_get_host_ip(resource $context) [string]\nGet the IP address. Get the IP address we advertise ourselves as using.\n@param context A context identifier, returned by gupnp_context_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_get_port() - Get the port\n
gupnp_context_get_port gupnp_context_get_port(resource $context) [int]\nGet the port. Get the port that the SOAP server is running on.\n@param context A context identifier, returned by gupnp_context_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_get_host_ip() - Get the IP address\n
gupnp_context_get_subscription_timeout\ngupnp_context_get_subscription_timeout(resource $context) [int]\nGet the event subscription timeout. Get the event subscription timeout\n(in seconds), or 0 meaning there is no timeout.\n@param context A context identifier, returned by gupnp_context_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_set_subscription_timeout() - Sets the event subscription\ntimeout\n
gupnp_context_host_path gupnp_context_host_path(resource $context, string\n$local_path, string $server_path) [bool]\nStart hosting. Start hosting `local_path` at `server_path`. Files with the\npath `local_path`.LOCALE (if they exist) will be served up when LOCALE is\nspecified in the request&#039;s Accept-Language header.\n@param context A context identifier, returned by gupnp_context_new().\n@param local_path Path to the local file or folder to be hosted.\n@param server_path Web server path where `local_path` should be hosted.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_unhost_path() - Stop hosting\n
gupnp_context_new gupnp_context_new([string $host_ip [, int $port=0]])\n[resource]\nCreate a new context. Create a new context with the specified host_ip and port.\n@param host_ip The local host&#039;s IP address, or NULL to use the IP\naddress of the first non-loopback network interface.\n@param port Port to run on, or 0 if you don&#039;t care what port is used.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_context_set_subscription_timeout\ngupnp_context_set_subscription_timeout(resource $context, int $timeout) [void]\nSets the event subscription timeout. Sets the event subscription timeout\n(in seconds) to time out. Note that any client side subscriptions will\nautomatically be renewed.\n@param context A context identifier, returned by gupnp_context_new().\n@param timeout The event subscription timeout in seconds. Use 0 if you\ndon&#039;t want subscriptions to time out.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_get_subscription_timeout() - Get the event subscription\ntimeout\n
gupnp_context_timeout_add gupnp_context_timeout_add(resource $context,\nint $timeout, mixed $callback [, mixed $arg]) [bool]\nSets a function to be called at regular intervals. Sets a function to be\ncalled at regular intervals.\n@param context A context identifier, returned by gupnp_context_new().\n@param timeout A timeout in miliseconds.\n@param callback The callback function calling every `timeout` period of\ntime. Typically, callback function takes on `arg` parameter.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n
gupnp_context_unhost_path gupnp_context_unhost_path(resource $context,\nstring $server_path) [bool]\nStop hosting. Stop hosting the file or folder at `server_path`.\n@param context A context identifier, returned by gupnp_context_new().\n@param server_path Web server path where the file or folder is hosted.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_context_new() - Create a new context\n@see gupnp_context_host_path() - Start hosting\n
gupnp_control_point_browse_start gupnp_control_point_browse_start(resource\n$cpoint) [bool]\nStart browsing. Start the search and calls user-defined callback.\n@param cpoint A control point identifier, returned by\ngupnp_control_point_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_control_point_new() - Create a new control point\n@see gupnp_control_point_browse_stop() - Stop browsing\n
gupnp_control_point_browse_stop gupnp_control_point_browse_stop(resource\n$cpoint) [bool]\nStop browsing. Stop the search and calls user-defined callback.\n@param cpoint A control point identifier, returned by\ngupnp_control_point_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_control_point_new() - Create a new control point\n@see gupnp_control_point_browse_start() - Start browsing\n
gupnp_control_point_callback_set gupnp_control_point_callback_set(resource\n$cpoint, int $signal, mixed $callback [, mixed $arg]) [bool]\nSet control point callback. Set control point callback function for signal.\n@param cpoint A control point identifier, returned by\ngupnp_control_point_new().\n@param signal The value of signal. Signal can be one of the following values:\nGUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE Emitted whenever a new device has become\navailable.\n@param GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE Emitted whenever a device is\nnot available any more.\n@param GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE Emitted whenever a new service\nhas become available.\n@param GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE Emitted whenever a service is\nnot available any more.\n@param callback The callback function for the certain signal. Typically,\ncallback function takes on two parameters. The `proxy` parameter&#039;s\nidentifier being the first, and the `arg` second.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_control_point_new() - Create a new control point\n@see gupnp_control_point_browse_start() - Start browsing\n
gupnp_control_point_new gupnp_control_point_new(resource $context, string\n$target) [resource]\nCreate a new control point. Create a new control point with the specified\ntarget.\n@param context A context identifier, returned by gupnp_context_new().\n@param target The search target. `target` should be a service or\ndevice name, such as urn:schemas-upnp-org:service:WANIPConnection:1 or\nurn:schemas-upnp-org:device:MediaRenderer:1.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_device_action_callback_set gupnp_device_action_callback_set(resource\n$root_device, int $signal, string $action_name, mixed $callback [, mixed $arg])\n[bool]\nSet device callback function. Set device callback function for signal\nand action.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@param signal The value of signal. Signal can be one of the following values:\nGUPNP_SIGNAL_ACTION_INVOKED Emitted whenever an action is invoked. Handler\nshould process action and must call either gupnp_service_action_return()\nor gupnp_service_action_return_error().\n@param GUPNP_SIGNAL_NOTIFY_FAILED Emitted whenever notification of a client\nfails.\n@param action_name The name of action.\n@param callback The callback function for the certain signal. Typically,\ncallback function takes on three parameters. The `service` parameter&#039;s\nidentifier being the first, `action` parameter&#039;s identifier (in case\nGUPNP_SIGNAL_ACTION_INVOKED signal) or `error` parameter&#039;s message\n(in case GUPNP_SIGNAL_NOTIFY_FAILED signal) being the second, and the `arg`\nis third.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_new() - Create a new root device\n
gupnp_device_info_get_service gupnp_device_info_get_service(resource\n$root_device, string $type) [resource]\nGet the service with type. Get the service with type or false if no such\ndevice was found.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@param type The type of the service to be retrieved.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_device_info_get gupnp_device_info_get(resource $root_device) [array]\nGet info of root device. Get info of root device.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@return (PECL gupnp >= 0.1.0)\n
gupnp_root_device_get_available gupnp_root_device_get_available(resource\n$root_device) [bool]\nCheck whether root device is available. Get whether or not `root_device`\nis available (announcing its presence).\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_set_available() - Set whether or not root_device\nis available\n
gupnp_root_device_get_relative_location\ngupnp_root_device_get_relative_location(resource $root_device) [string]\nGet the relative location of root device.. Get the relative location of\nroot device.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@return (PECL gupnp >= 0.1.0)\n
gupnp_root_device_new gupnp_root_device_new(resource $context, string\n$location, string $description_dir) [resource]\nCreate a new root device. Create a new root device, automatically downloading\nand parsing location.\n@param context A context identifier, returned by gupnp_context_new().\n@param location Location of the description file for this device, relative\nto the HTTP root\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_set_available() - Set whether or not root_device\nis available\n@see gupnp_root_device_start() - Start main loop\n@see gupnp_root_device_stop() - Stop main loop\n
gupnp_root_device_set_available gupnp_root_device_set_available(resource\n$root_device, bool $available) [bool]\nSet whether or not root_device is available. Controls whether or not\nroot_device is available (announcing its presence).\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@param available Set TRUE if `root_device` should be available.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_get_available() - Check whether root device is available\n
gupnp_root_device_start gupnp_root_device_start(resource $root_device) [bool]\nStart main loop. Start root server&#039;s main loop.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_stop() - Stop main loop\n
gupnp_root_device_stop gupnp_root_device_stop(resource $root_device) [bool]\nStop main loop. Stop root server&#039;s main loop.\n@param root_device A root device identifier, returned by\ngupnp_root_device_new().\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_root_device_start() - Start main loop\n
gupnp_service_action_get gupnp_service_action_get(resource $action, string\n$name, int $type) [mixed]\nRetrieves the specified action arguments. Retrieves the specified action\narguments.\n@param action A service action identifier.\n@param name The name of the variable to retrieve.\n@param type The type of the variable to retrieve. Type can be one of the\nfollowing values: GUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_action_set() - Sets the specified action return values\n
gupnp_service_action_return_error gupnp_service_action_return_error(resource\n$action, int $error_code [, string $error_description]) [bool]\nReturn error code. Return error code.\n@param action A service action identifier.\n@param error_code The error code. Signal can be one of the following values or\nuser defined: GUPNP_CONTROL_ERROR_INVALID_ACTION The action name was invalid.\n@param GUPNP_CONTROL_ERROR_INVALID_ARGS The action arguments were invalid.\n@param GUPNP_CONTROL_ERROR_OUT_OF_SYNC Out of sync (deprecated).\n@param GUPNP_CONTROL_ERROR_ACTION_FAILED The action failed.\n@param error_description The error description.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_action_return() - Return succesfully\n
gupnp_service_action_return gupnp_service_action_return(resource $action)\n[bool]\nReturn succesfully. Return succesfully.\n@param action A service action identifier.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_action_return_error() - Return error code\n
gupnp_service_action_set gupnp_service_action_set(resource $action, string\n$name, int $type, mixed $value) [bool]\nSets the specified action return values. Sets the specified action return\nvalues.\n@param action A service action identifier.\n@param name The name of the variable to retrieve.\n@param type The type of the variable to retrieve. Type can be one of the\nfollowing values: GUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@param value The value of the variable to retrieve.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_action_get() - Retrieves the specified action arguments\n
gupnp_service_freeze_notify gupnp_service_freeze_notify(resource $service)\n[bool]\nFreeze new notifications. Causes new notifications to be queued up until\ngupnp_service_thaw_notify() is called.\n@param service A service identifier.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_notify() - Notifies listening clients\n@see gupnp_service_thaw_notify() - Sends out any pending notifications and\nstops queuing of new ones.\n
gupnp_service_info_get_introspection\ngupnp_service_info_get_introspection(resource $proxy [, mixed $callback [,\nmixed $arg]]) [mixed]\nGet resource introspection of service. Get resource introspection of service\nor register callback if corresponding parameter was passed.\n@param proxy A service proxy identifier.\n@param callback The callback function to be called when introspection object\nis ready. Typically, callback function takes on three parameters. The\n`introspection` parameter&#039;s identifier being the first, `error`\nparameter&#039;s message being the second, and the `arg` is third.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_service_info_get gupnp_service_info_get(resource $proxy) [array]\nGet full info of service. Get full info of service.\n@param proxy A service proxy identifier.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_service_introspection_get_state_variable\ngupnp_service_introspection_get_state_variable(resource $introspection,\nstring $variable_name) [array]\nReturns the state variable data. Returns the state variable data by the name\n`variable_name` in this service.\n@param introspection A introspection identifier.\n@param variable_name The name of the variable to retreive.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_service_notify gupnp_service_notify(resource $service, string $name,\nint $type, mixed $value) [bool]\nNotifies listening clients. Notifies listening clients that the property\nhave changed to the specified values.\n@param service A service identifier.\n@param name The name of the variable.\n@param type The type of the variable. Type can be one of the following values:\nGUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@param value The value of the variable.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_freeze_notify() - Freeze new notifications\n@see gupnp_service_thaw_notify() - Sends out any pending notifications and\nstops queuing of new ones.\n
gupnp_service_proxy_action_get gupnp_service_proxy_action_get(resource $proxy,\nstring $action, string $name, int $type) [mixed]\nSend action to the service and get value. Send action with parameters to\nthe service exposed by proxy synchronously and get value.\n@param proxy A service proxy identifier.\n@param action An action.\n@param name The action name.\n@param type The type of the variable to retrieve. Type can be one of the\nfollowing values: GUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_action_set() - Send action to the service and\nset value\n@see gupnp_service_proxy_send_action() - Send action with multiple parameters\nsynchronously\n
gupnp_service_proxy_action_set gupnp_service_proxy_action_set(resource $proxy,\nstring $action, string $name, mixed $value, int $type) [bool]\nSend action to the service and set value. Send action with parameters to\nthe service exposed by proxy synchronously and set value.\n@param proxy A service proxy identifier.\n@param action An action.\n@param name The action name.\n@param value The action value.\n@param type The type of the action. Type can be one of the following values:\nGUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_action_get() - Send action to the service and\nget value\n@see gupnp_service_proxy_send_action() - Send action with multiple parameters\nsynchronously\n
gupnp_service_proxy_add_notify gupnp_service_proxy_add_notify(resource $proxy,\nstring $value, int $type, mixed $callback [, mixed $arg]) [bool]\nSets up callback for variable change notification. Sets up callback to be\ncalled whenever a change notification for variable is recieved.\n@param proxy A service proxy identifier.\n@param value The variable to add notification for.\n@param type The type of the variable. Type can be one of the following values:\nGUPNP_TYPE_BOOLEAN Type of the variable is boolean.\n@param GUPNP_TYPE_INT Type of the variable is integer.\n@param GUPNP_TYPE_LONG Type of the variable is long.\n@param GUPNP_TYPE_DOUBLE Type of the variable is double.\n@param GUPNP_TYPE_FLOAT Type of the variable is float.\n@param GUPNP_TYPE_STRING Type of the variable is string.\n@param callback The callback to call when variable changes. Typically, callback\nfunction takes on three parameters. The `variable` parameter being the first,\n`value` parameter being the second, and the `arg` is third.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_remove_notify() - Cancels the variable change\nnotification\n
gupnp_service_proxy_callback_set gupnp_service_proxy_callback_set(resource\n$proxy, int $signal, mixed $callback [, mixed $arg]) [bool]\nSet service proxy callback for signal. Set service proxy callback for signal.\n@param proxy A service proxy identifier.\n@param signal The value of signal. GUPNP_SIGNAL_SUBSCRIPTION_LOST Emitted\nwhenever the subscription to this service has been lost due to an error\ncondition.\n@param callback The callback function for the certain signal. Typically,\ncallback function takes on two parameters. `error` parameter&#039;s message\nbeing the first, and the `arg` is second.\n@param arg User data for `callback`.\n@return (PECL gupnp >= 0.1.0)\n
gupnp_service_proxy_get_subscribed gupnp_service_proxy_get_subscribed(resource\n$proxy) [bool]\nCheck whether subscription is valid to the service. Check whether subscription\nis valid to the service.\n@param proxy A service proxy identifier.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_set_subscribed() - (Un)subscribes to the service.\n
gupnp_service_proxy_remove_notify gupnp_service_proxy_remove_notify(resource\n$proxy, string $value) [bool]\nCancels the variable change notification. Cancels the variable change\nnotification.\n@param proxy A service proxy identifier.\n@param value The variable to add notification for.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_add_notify() - Sets up callback for variable change\nnotification\n
gupnp_service_proxy_set_subscribed gupnp_service_proxy_set_subscribed(resource\n$proxy, bool $subscribed) [bool]\n(Un)subscribes to the service.. (Un)subscribes to the service.\n@param proxy A service proxy identifier.\n@param subscribed Set TRUE to subscribe to this service.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_proxy_get_subscribed() - Check whether subscription is\nvalid to the service\n
gupnp_service_thaw_notify gupnp_service_thaw_notify(resource $service) [bool]\nSends out any pending notifications and stops queuing of new ones.. Sends\nout any pending notifications and stops queuing of new ones.\n@param service A service identifier.\n@return (PECL gupnp >= 0.1.0)\n@see gupnp_service_notify() - Notifies listening clients\n@see gupnp_service_freeze_notify() - Freeze new notifications\n
gzclose gzclose(resource $zp) [bool]\nClose an open gz-file pointer. Closes the given gz-file pointer.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n@see gzopen() - Open gz-file\n
gzcompress gzcompress(string $data [, int $level=-1]) [string]\nCompress a string. This function compress the given string using the `ZLIB`\ndata format. For details on the ZLIB compression algorithm see the document\n&quot;&raquo; ZLIB Compressed Data Format Specification version 3.3&quot;\n(RFC 1950). Note: This is not the same as gzip compression, which includes\nsome header data. See gzencode() for gzip compression.\n@param data The data to compress.\n@param level The level of compression. Can be given as 0 for no compression\nup to 9 for maximum compression.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see gzdeflate() - Deflate a string\n@see gzinflate() - Inflate a deflated string\n@see gzuncompress() - Uncompress a compressed string\n@see gzencode() - Create a gzip compressed string\n
gzdecode gzdecode(string $data [, int $length]) [string]\nDecodes a gzip compressed string. This function returns a decoded version\nof the input `data`.\n@param data The data to decode, encoded by gzencode().\n@param length The maximum length of data to decode.\n@return (No version information available, might only be in SVN)\n@see gzencode() - Create a gzip compressed string\n
gzdeflate gzdeflate(string $data [, int $level=-1]) [string]\nDeflate a string. This function compress the given string using the `DEFLATE`\ndata format. For details on the DEFLATE compression algorithm see the document\n&quot;&raquo; DEFLATE Compressed Data Format Specification version 1.3&quot;\n(RFC 1951).\n@param data The data to deflate.\n@param level The level of compression. Can be given as 0 for no compression\nup to 9 for maximum compression. If not given, the default compression level\nwill be the default compression level of the zlib library.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gzinflate() - Inflate a deflated string\n@see gzcompress() - Compress a string\n@see gzuncompress() - Uncompress a compressed string\n@see gzencode() - Create a gzip compressed string\n
gzencode gzencode(string $data [, int $level=-1 [, int\n$encoding_mode=FORCE_GZIP]]) [string]\nCreate a gzip compressed string. This function returns a compressed version\nof the input `data` compatible with the output of the gzip program. For\nmore information on the GZIP file format, see the document: &raquo; GZIP\nfile format specification version 4.3 (RFC 1952).\n@param data The data to encode.\n@param level The level of compression. Can be given as 0 for no compression\nup to 9 for maximum compression. If not given, the default compression level\nwill be the default compression level of the zlib library.\n@param encoding_mode The encoding mode. Can be FORCE_GZIP (the default) or\nFORCE_DEFLATE. If you use FORCE_DEFLATE, you get a standard zlib deflated\nstring (inclusive zlib headers) after the gzip file header but without the\ntrailing crc32 checksum.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gzdecode() - Decodes a gzip compressed string\n@see gzdeflate() - Deflate a string\n@see gzinflate() - Inflate a deflated string\n@see gzuncompress() - Uncompress a compressed string\n@see gzcompress() - Compress a string\n
gzeof gzeof(resource $zp) [int]\nTest for EOF on a gz-file pointer. Tests the given GZ file pointer for EOF.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n
gzfile gzfile(string $filename [, int $use_include_path=0]) [array]\nRead entire gz-file into an array. This function is identical to readgzfile(),\nexcept that it returns the file in an array.\n@param filename The file name.\n@param use_include_path You can set this optional parameter to `1`, if you\nwant to search for the file in the include_path too.\n@return (PHP 4, PHP 5)\n@see readgzfile() - Output a gz-file\n@see gzopen() - Open gz-file\n
gzgetc gzgetc(resource $zp) [string]\nGet character from gz-file pointer. Returns a string containing a single\n(uncompressed) character read from the given gz-file pointer.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n@see gzopen() - Open gz-file\n@see gzgets() - Get line from file pointer\n
gzgets gzgets(resource $zp, int $length) [string]\nGet line from file pointer. Gets a (uncompressed) string of up to length -\n1 bytes read from the given file pointer. Reading ends when length - 1 bytes\nhave been read, on a newline, or on EOF (whichever comes first).\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@param length The length of data to get.\n@return (PHP 4, PHP 5)\n@see gzopen() - Open gz-file\n@see gzgetc() - Get character from gz-file pointer\n@see gzwrite() - Binary-safe gz-file write\n
gzgetss gzgetss(resource $zp, int $length [, string $allowable_tags]) [string]\nGet line from gz-file pointer and strip HTML tags. Identical to gzgets(),\nexcept that gzgetss() attempts to strip any HTML and PHP tags from the text\nit reads.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@param length The length of data to get.\n@param allowable_tags You can use this optional parameter to specify tags\nwhich should not be stripped.\n@return (PHP 4, PHP 5)\n@see gzopen() - Open gz-file\n@see gzgets() - Get line from file pointer\n@see strip_tags() - Strip HTML and PHP tags from a string\n
gzinflate gzinflate(string $data [, int $length=0]) [string]\nInflate a deflated string. This function inflate a deflated string.\n@param data The data compressed by gzdeflate().\n@param length The maximum length of data to decode.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gzdeflate() - Deflate a string\n@see gzcompress() - Compress a string\n@see gzuncompress() - Uncompress a compressed string\n@see gzencode() - Create a gzip compressed string\n
gzopen gzopen(string $filename, string $mode [, int $use_include_path=0])\n[resource]\nOpen gz-file. Opens a gzip (.gz) file for reading or writing. gzopen() can\nbe used to read a file which is not in gzip format; in this case gzread()\nwill directly read from the file without decompression.\n@param filename The file name.\n@param mode As in fopen() (`rb` or `wb`) but can also include a compression\nlevel (`wb9`) or a strategy: `f` for filtered data as in `wb6f`, `h` for\n`Huffman only compression` as in `wb1h`. (See the description of `deflateInit2`\nin zlib.h for more information about the strategy parameter.)\n@param use_include_path You can set this optional parameter to `1`, if you\nwant to search for the file in the include_path too.\n@return (PHP 4, PHP 5)\n@see gzclose() - Close an open gz-file pointer\n
gzpassthru gzpassthru(resource $zp) [int]\nOutput all remaining data on a gz-file pointer. Reads to EOF on the given\ngz-file pointer from the current position and writes the (uncompressed)\nresults to standard output. Note: You may need to call gzrewind() to reset\nthe file pointer to the beginning of the file if you have already written\ndata to it. If you just want to dump the contents of a file to the output\nbuffer, without first modifying it or seeking to a particular offset, you\nmay want to use the readgzfile() function, which saves you the gzopen() call.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n
gzputs gzputs\nAlias of gzwrite.\n
gzread gzread(resource $zp, int $length) [string]\nBinary-safe gz-file read. gzread() reads up to `length` bytes from the given\ngz-file pointer. Reading stops when `length` (uncompressed) bytes have been\nread or EOF is reached, whichever comes first.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@param length The number of bytes to read.\n@return (PHP 4, PHP 5)\n@see gzwrite() - Binary-safe gz-file write\n@see gzopen() - Open gz-file\n@see gzgets() - Get line from file pointer\n@see gzgetss() - Get line from gz-file pointer and strip HTML tags\n@see gzfile() - Read entire gz-file into an array\n@see gzpassthru() - Output all remaining data on a gz-file pointer\n
gzrewind gzrewind(resource $zp) [bool]\nRewind the position of a gz-file pointer. Sets the file position indicator\nof the given gz-file pointer to the beginning of the file stream.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n@see gzseek() - Seek on a gz-file pointer\n@see gztell() - Tell gz-file pointer read/write position\n
gzseek gzseek(resource $zp, int $offset [, int $whence=SEEK_SET]) [int]\nSeek on a gz-file pointer. Sets the file position indicator for the given file\npointer to the given offset byte into the file stream. Equivalent to calling\n(in C) `gzseek(zp, offset, SEEK_SET)`. If the file is opened for reading,\nthis function is emulated but can be extremely slow. If the file is opened\nfor writing, only forward seeks are supported; gzseek() then compresses a\nsequence of zeroes up to the new starting position.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@param offset The seeked offset.\n@param whence `whence` values are: SEEK_SET - Set position equal to `offset`\nbytes. SEEK_CUR - Set position to current location plus `offset`. If `whence`\nis not specified, it is assumed to be SEEK_SET.\n@return (PHP 4, PHP 5)\n@see gztell() - Tell gz-file pointer read/write position\n@see gzrewind() - Rewind the position of a gz-file pointer\n
gztell gztell(resource $zp) [int]\nTell gz-file pointer read/write position. Gets the position of the given\nfile pointer; i.e., its offset into the uncompressed file stream.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@return (PHP 4, PHP 5)\n@see gzopen() - Open gz-file\n@see gzseek() - Seek on a gz-file pointer\n@see gzrewind() - Rewind the position of a gz-file pointer\n
gzuncompress gzuncompress(string $data [, int $length=0]) [string]\nUncompress a compressed string. This function uncompress a compressed string.\n@param data The data compressed by gzcompress().\n@param length The maximum length of data to decode.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see gzcompress() - Compress a string\n@see gzinflate() - Inflate a deflated string\n@see gzdeflate() - Deflate a string\n@see gzencode() - Create a gzip compressed string\n
gzwrite gzwrite(resource $zp, string $string [, int $length]) [int]\nBinary-safe gz-file write. gzwrite() writes the contents of `string` to the\ngiven gz-file.\n@param zp The gz-file pointer. It must be valid, and must point to a file\nsuccessfully opened by gzopen().\n@param string The string to write.\n@param length The number of uncompressed bytes to write. If supplied, writing\nwill stop after `length` (uncompressed) bytes have been written or the end of\n`string` is reached, whichever comes first. Note: Note that if the `length`\nargument is given, then the magic_quotes_runtime configuration option will\nbe ignored and no slashes will be stripped from `string`.\n@return (PHP 4, PHP 5)\n@see gzread() - Binary-safe gz-file read\n@see gzopen() - Open gz-file\n
__halt_compiler __halt_compiler(void) [void]\nHalts the compiler execution. Halts the execution of the compiler. This can\nbe useful to embed data in PHP scripts, like the installation files. Byte\nposition of the data start can be determined by the __COMPILER_HALT_OFFSET__\nconstant which is defined only if there is a __halt_compiler() presented in\nthe file.\n@return (PHP 5 >= 5.1.0)\n@note Note: __halt_compiler() can only be used from the outermost scope.\n
setBorderStyle HaruAnnotation::setBorderStyle(float $width, int $dash_on,\nint $dash_off) [bool]\nSet the border style of the annotation. Defines the style of the border of\nthe annotation. This function may be used with link annotations only.\n@param width The width of the border line.\n@param dash_on The dash style.\n@param dash_off The dash style.\n@return (PECL haru >= 0.0.1)\n
setHighlightMode HaruAnnotation::setHighlightMode(int $mode) [bool]\nSet the highlighting mode of the annotation. Defines the appearance of the\nannotation when clicked. This function may be used with link annotations only.\n@param mode The highlighting mode of the annotation. Can\ntake only these values: HaruAnnotation::NO_HIGHLIGHT - no\nhighlighting. HaruAnnotation::INVERT_BOX - invert the contents of the\nannotation. HaruAnnotation::INVERT_BORDER - invert the border of the\nannotation. HaruAnnotation::DOWN_APPEARANCE - dent the annotation.\n@return (PECL haru >= 0.0.1)\n
setIcon HaruAnnotation::setIcon(int $icon) [bool]\nSet the icon style of the annotation. Defines the style of the annotation\nicon. This function may be used with text annotations only.\n@param icon The style of the icon. Can take only these values:\nHaruAnnotation::ICON_COMMENT HaruAnnotation::ICON_KEY HaruAnnotation::ICON_NOTE\nHaruAnnotation::ICON_HELP HaruAnnotation::ICON_NEW_PARAGRAPH\nHaruAnnotation::ICON_PARAGRAPH HaruAnnotation::ICON_INSERT\n@return (PECL haru >= 0.0.1)\n
setOpened HaruAnnotation::setOpened(bool $opened) [bool]\nSet the initial state of the annotation. Defines whether the annotation is\ninitially displayed open. This function may be used with text annotations only.\n@param opened TRUE means the annotation is initially displayed open, FALSE -\nmeans it&#039;s closed.\n@return (PECL haru >= 0.0.1)\n
setFit HaruDestination::setFit(void) [bool]\nSet the appearance of the page to fit the window. Defines the appearance of\nthe page to fit the window.\n@return (PECL haru >= 0.0.1)\n
gc_enabled gc_enabled(void) [bool]\nReturns status of the circular reference collector.\n@return (PHP 5 >= 5.3.0)\n
gd_info gd_info(void) [array]\nRetrieve information about the currently installed GD library. Gets information\nabout the version and capabilities of the installed GD library.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see imagepng() - Output a PNG image to either the browser or a file\n@see imagejpeg() - Output image to browser or file\n@see imagegif() - Output image to browser or file\n@see imagewbmp() - Output image to browser or file\n@see imagetypes() - Return the image types supported by this PHP build\n
geoip_continent_code_by_name geoip_continent_code_by_name(string $hostname)\n[string]\nGet the two letter continent code. The geoip_continent_code_by_name() function\nwill return the two letter continent code corresponding to a hostname or an\nIP address.\n@param hostname The hostname or IP address whose location is to be looked-up.\n@return (PECL geoip >= 1.0.3)\n@see geoip_country_code_by_name() - Get the two letter country code\n
geoip_country_code_by_name geoip_country_code_by_name(string $hostname)\n[string]\nGet the two letter country code. The geoip_country_code_by_name() function\nwill return the two letter country code corresponding to a hostname or an\nIP address.\n@param hostname The hostname or IP address whose location is to be looked-up.\n@return (PECL geoip >= 0.2.0)\n@see geoip_country_code3_by_name() - Get the three letter country code\n@see geoip_country_name_by_name() - Get the full country name\n
geoip_country_code3_by_name geoip_country_code3_by_name(string $hostname)\n[string]\nGet the three letter country code. The geoip_country_code3_by_name() function\nwill return the three letter country code corresponding to a hostname or an\nIP address.\n@param hostname The hostname or IP address whose location is to be looked-up.\n@return (PECL geoip >= 0.2.0)\n@see geoip_country_code_by_name() - Get the two letter country code\n@see geoip_country_name_by_name() - Get the full country name\n
geoip_country_name_by_name geoip_country_name_by_name(string $hostname)\n[string]\nGet the full country name. The geoip_country_name_by_name() function will\nreturn the full country name corresponding to a hostname or an IP address.\n@param hostname The hostname or IP address whose location is to be looked-up.\n@return (PECL geoip >= 0.2.0)\n@see geoip_country_code_by_name() - Get the two letter country code\n@see geoip_country_code3_by_name() - Get the three letter country code\n
geoip_database_info geoip_database_info([int $database=GEOIP_COUNTRY_EDITION])\n[string]\nGet GeoIP Database information. The geoip_database_info() function returns\nthe corresponding GeoIP Database version as it is defined inside the binary\nfile. If this function is called without arguments, it returns the version\nof the GeoIP Free Country Edition.\n@param database The database type as an integer. You can use the various\nconstants defined with this extension (ie: GEOIP_*_EDITION).\n@return (PECL geoip >= 0.2.0)\n
geoip_db_avail geoip_db_avail(int $database) [bool]\nDetermine if GeoIP Database is available. The geoip_db_avail() function returns\nif the corresponding GeoIP Database is available and can be opened on disk. It\ndoes not indicate if the file is a proper database, only if it is readable.\n@param database The database type as an integer. You can use the various\nconstants defined with this extension (ie: GEOIP_*_EDITION).\n@return (PECL geoip >= 1.0.1)\n
geoip_db_filename geoip_db_filename(int $database) [string]\nReturns the filename of the corresponding GeoIP Database. The\ngeoip_db_filename() function returns the filename of the corresponding GeoIP\nDatabase. It does not indicate if the file exists or not on disk, only where\nthe library is looking for the database.\n@param database The database type as an integer. You can use the various\nconstants defined with this extension (ie: GEOIP_*_EDITION).\n@return (PECL geoip >= 1.0.1)\n
geoip_db_get_all_info geoip_db_get_all_info(void) [array]\nReturns detailed information about all GeoIP database types. The\ngeoip_db_get_all_info() function will return detailed information as a\nmulti-dimensional array about all the GeoIP database types. This function\nis available even if no databases are installed. It will simply list them as\nnon-available. The names of the different keys of the returning associative\narray are as follows:  &quot;available&quot; -- Boolean, indicate if DB is\navailable (see geoip_db_avail()) &quot;description&quot; -- The database\ndescription &quot;filename&quot; -- The database filename on disk (see\ngeoip_db_filename())\n@return (PECL geoip >= 1.0.1)\n
geoip_id_by_name geoip_id_by_name(string $hostname) [int]\nGet the Internet connection type. The geoip_id_by_name() function will\nreturn the Internet connection type corresponding to a hostname or an IP\naddress. The return value is numeric and can be compared to the following\nconstants:  GEOIP_UNKNOWN_SPEED GEOIP_DIALUP_SPEED GEOIP_CABLEDSL_SPEED\nGEOIP_CORPORATE_SPEED\n@param hostname The hostname or IP address whose connection type is to\nbe looked-up.\n@return (PECL geoip >= 0.2.0)\n
geoip_isp_by_name geoip_isp_by_name(string $hostname) [string]\nGet the Internet Service Provider (ISP) name. The geoip_isp_by_name()\nfunction will return the name of the Internet Service Provider (ISP) that\nan IP is assigned to. This function is currently only available to users who\nhave bought a commercial GeoIP ISP Edition. A warning will be issued if the\nproper database cannot be located.\n@param hostname The hostname or IP address.\n@return (PECL geoip >= 1.0.2)\n
geoip_org_by_name geoip_org_by_name(string $hostname) [string]\nGet the organization name. The geoip_org_by_name() function will return the\nname of the organization that an IP is assigned to. This function is currently\nonly available to users who have bought a commercial GeoIP Organization, ISP or\nAS Edition. A warning will be issued if the proper database cannot be located.\n@param hostname The hostname or IP address.\n@return (PECL geoip >= 0.2.0)\n
geoip_record_by_name geoip_record_by_name(string $hostname) [array]\nReturns the detailed City information found in the GeoIP Database. The\ngeoip_record_by_name() function will return the record information\ncorresponding to a hostname or an IP address. This function is available\nfor both GeoLite City Edition and commercial GeoIP City Edition. A\nwarning will be issued if the proper database cannot be located. The\nnames of the different keys of the returning associative array are as\nfollows:  &quot;continent_code&quot; -- Two letter continent code (as of\nversion 1.0.4 with libgeoip 1.4.3 or newer) &quot;country_code&quot;\n-- Two letter country code (see geoip_country_code_by_name())\n&quot;country_code3&quot; -- Three letter country code (see\ngeoip_country_code3_by_name()) &quot;country_name&quot; -- The country name\n(see geoip_country_name_by_name()) &quot;region&quot; -- The region code (ex:\nCA for California) &quot;city&quot; -- The city. &quot;postal_code&quot;\n-- The Postal Code, FSA or Zip Code. &quot;latitude&quot; -- The Latitude\nas signed double. &quot;longitude&quot; -- The Longitude as signed\ndouble. &quot;dma_code&quot; -- Designated Market Area code (USA and Canada\nonly) &quot;area_code&quot; -- The PSTN area code (ex: 212)\n@param hostname The hostname or IP address whose record is to be looked-up.\n@return (PECL geoip >= 0.2.0)\n
geoip_region_by_name geoip_region_by_name(string $hostname) [array]\nGet the country code and region. The geoip_region_by_name() function\nwill return the country and region corresponding to a hostname or an IP\naddress. This function is currently only available to users who have bought\na commercial GeoIP Region Edition. A warning will be issued if the proper\ndatabase cannot be located. The names of the different keys of the returning\nassociative array are as follows:  &quot;country_code&quot; -- Two letter\ncountry code (see geoip_country_code_by_name()) &quot;region&quot; -- The\nregion code (ex: CA for California)\n@param hostname The hostname or IP address whose region is to be looked-up.\n@return (PECL geoip >= 0.2.0)\n
geoip_region_name_by_code geoip_region_name_by_code(string $country_code,\nstring $region_code) [string]\nReturns the region name for some country and region code combo. The\ngeoip_region_name_by_code() function will return the region name corresponding\nto a country and region code combo. In the United States, the region code\ncorresponds to the two-letter abbreviation of each state. In Canada, the region\ncode corresponds to the two-letter province or territory code as attributed\nby Canada Post. For the rest of the world, GeoIP uses FIPS 10-4 codes to\nrepresent regions. You can check &raquo; http://www.maxmind.com/app/fips10_4\nfor a detailed list of FIPS 10-4 codes. This function is always available\nif using GeoIP Library version 1.4.1 or newer. The data is taken directly\nfrom the GeoIP Library and not from any database.\n@param country_code The two-letter country code (see\ngeoip_country_code_by_name())\n@param region_code The two-letter (or digit) region code (see\ngeoip_region_by_name())\n@return (PECL geoip >= 1.0.4)\n
geoip_time_zone_by_country_and_region\ngeoip_time_zone_by_country_and_region(string $country_code [, string\n$region_code]) [string]\nReturns the time zone for some country and region code combo. The\ngeoip_time_zone_by_country_and_region() function will return the time\nzone corresponding to a country and region code combo. In the United\nStates, the region code corresponds to the two-letter abbreviation of each\nstate. In Canada, the region code corresponds to the two-letter province\nor territory code as attributed by Canada Post. For the rest of the world,\nGeoIP uses FIPS 10-4 codes to represent regions. You can check &raquo;\nhttp://www.maxmind.com/app/fips10_4 for a detailed list of FIPS 10-4\ncodes. This function is always available if using GeoIP Library version\n1.4.1 or newer. The data is taken directly from the GeoIP Library and not\nfrom any database.\n@param country_code The two-letter country code (see\ngeoip_country_code_by_name())\n@param region_code The two-letter (or digit) region code (see\ngeoip_region_by_name())\n@return (PECL geoip >= 1.0.4)\n
get_browser get_browser([string $user_agent [, bool $return_array=false]])\n[mixed]\nTells what the user's browser is capable of. Attempts to determine the\ncapabilities of the user&#039;s browser, by looking up the browser&#039;s\ninformation in the browscap.ini file.\n@param user_agent The User Agent to be analyzed. By default, the value of\nHTTP User-Agent header is used; however, you can alter this (i.e., look up\nanother browser&#039;s info) by passing this parameter. You can bypass this\nparameter with a NULL value.\n@param return_array If set to TRUE, this function will return an array\ninstead of an object.\n@return (PHP 4, PHP 5)\n@note Note: In order for this to work, your browscap configuration setting in\nphp.ini must point to the correct location of the browscap.ini file on your\nsystem. browscap.ini is not bundled with PHP, but you may find an up-to-date\n&raquo; php_browscap.ini file here. While browscap.ini contains information\non many browsers, it relies on user updates to keep the database current. The\nformat of the file is fairly self-explanatory.\n
get_called_class get_called_class(void) [string]\nthe &quot;Late Static Binding&quot; class name. Gets the name of the class\nthe static method is called in.\n@return (PHP 5 >= 5.3.0)\n@see get_parent_class() - Retrieves the parent class name for object or class\n@see get_class() - Returns the name of the class of an object\n@see is_subclass_of() - Checks if the object has this class as one of\nits parents\n
get_cfg_var get_cfg_var(string $option) [string]\nGets the value of a PHP configuration option. Gets the value of a PHP\nconfiguration `option`. This function will not return configuration information\nset when the PHP was compiled, or read from an Apache configuration file. To\ncheck whether the system is using a configuration file, try retrieving the\nvalue of the cfg_file_path configuration setting. If this is available,\na configuration file is being used.\n@param option The configuration option name.\n@return (PHP 4, PHP 5)\n@see ini_get() - Gets the value of a configuration option\n@see ini_get_all() - Gets all configuration options\n
get_class_methods get_class_methods(mixed $class_name) [array]\nGets the class methods' names. Gets the class methods names.\n@param class_name The class name or an object instance\n@return (PHP 4, PHP 5)\n@see get_class() - Returns the name of the class of an object\n@see get_class_vars() - Get the default properties of the class\n@see get_object_vars() - Gets the properties of the given object\n
get_class_vars get_class_vars(string $class_name) [array]\nGet the default properties of the class. Get the default properties of the\ngiven class.\n@param class_name The class name\n@return (PHP 4, PHP 5)\n@see get_class_methods() - Gets the class methods' names\n@see get_object_vars() - Gets the properties of the given object\n
get_class get_class([object $object=NULL]) [string]\nReturns the name of the class of an object. Gets the name of the class of\nthe given `object`.\n@param object The tested object. This parameter may be omitted when inside\na class.\n@return (PHP 4, PHP 5)\n@see get_called_class() - the &quot;Late Static Binding&quot; class name\n@see get_parent_class() - Retrieves the parent class name for object or class\n@see gettype() - Get the type of a variable\n@see is_subclass_of() - Checks if the object has this class as one of\nits parents\n
get_current_user get_current_user(void) [string]\nGets the name of the owner of the current PHP script.\n@return (PHP 4, PHP 5)\n@see getmyuid() - Gets PHP script owner's UID\n@see getmygid() - Get PHP script owner's GID\n@see getmypid() - Gets PHP's process ID\n@see getmyinode() - Gets the inode of the current script\n@see getlastmod() - Gets time of last page modification\n
get_declared_classes get_declared_classes(void) [array]\nReturns an array with the name of the defined classes. Gets the declared\nclasses.\n@return (PHP 4, PHP 5)\n@see class_exists() - Checks if the class has been defined\n@see get_declared_interfaces() - Returns an array of all declared interfaces\n@see get_defined_functions() - Returns an array of all defined functions\n
get_declared_interfaces get_declared_interfaces(void) [array]\nReturns an array of all declared interfaces. Gets the declared interfaces.\n@return (PHP 5)\n@see get_declared_classes() - Returns an array with the name of the defined\nclasses\n@see class_implements() - Return the interfaces which are implemented by\nthe given class\n
get_defined_constants get_defined_constants([bool $categorize=false]) [array]\nReturns an associative array with the names of all the constants and\ntheir values. Returns the names and values of all the constants currently\ndefined. This includes those created by extensions as well as those created\nwith the define() function.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see defined() - Checks whether a given named constant exists\n@see get_loaded_extensions() - Returns an array with the names of all modules\ncompiled and loaded\n@see get_defined_functions() - Returns an array of all defined functions\n@see get_defined_vars() - Returns an array of all defined variables\n
get_defined_functions get_defined_functions(void) [array]\nReturns an array of all defined functions. Gets an array of all defined\nfunctions.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see function_exists() - Return TRUE if the given function has been defined\n@see get_defined_vars() - Returns an array of all defined variables\n@see get_defined_constants() - Returns an associative array with the names\nof all the constants and their values\n@see get_declared_classes() - Returns an array with the name of the defined\nclasses\n
get_defined_vars get_defined_vars(void) [array]\nReturns an array of all defined variables. This function returns a\nmultidimensional array containing a list of all defined variables, be\nthem environment, server or user-defined variables, within the scope that\nget_defined_vars() is called.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see isset() - Determine if a variable is set and is not NULL\n@see get_defined_functions() - Returns an array of all defined functions\n@see get_defined_constants() - Returns an associative array with the names\nof all the constants and their values\n
get_extension_funcs get_extension_funcs(string $module_name) [array]\nReturns an array with the names of the functions of a module. This function\nreturns the names of all the functions defined in the module indicated by\n`module_name`.\n@param module_name The module name. Note: This parameter must be in lowercase.\n@return (PHP 4, PHP 5)\n@see get_loaded_extensions() - Returns an array with the names of all modules\ncompiled and loaded\n
get_headers get_headers(string $url [, int $format=0]) [array]\nFetches all the headers sent by the server in response to a HTTP\nrequest. get_headers() returns an array with the headers sent by the server\nin response to a HTTP request.\n@param url The target URL.\n@param format If the optional `format` parameter is set to non-zero,\nget_headers() parses the response and sets the array&#039;s keys.\n@return (PHP 5)\n
get_html_translation_table get_html_translation_table([int\n$table=HTML_SPECIALCHARS [, int $quote_style=ENT_COMPAT [, string\n$charset_hint]]]) [array]\nReturns the translation table used by htmlspecialchars and\nhtmlentities. get_html_translation_table() will return the translation\ntable that is used internally for htmlspecialchars() and htmlentities()\nwith the default charset. Note: Special characters can be encoded in\nseveral ways. E.g. `&quot;` can be encoded as `&amp;quot;`, `&amp;#34;` or\n`&amp;#x22`. get_html_translation_table() returns only the most common form\nfor them.\n@param table There are two new constants (HTML_ENTITIES, HTML_SPECIALCHARS)\nthat allow you to specify the table you want.\n@param quote_style Like the htmlspecialchars() and htmlentities() functions\nyou can optionally specify the `quote_style` you are working with. See the\ndescription of these modes in htmlspecialchars().\n@param charset_hint Like htmlentities(), it takes an optional third argument\n`charset` which defines character set used in conversion. Presently,\nthe ISO-8859-1 character set is used as the default. Following character\nsets are supported in PHP 4.3.0 and later. Supported charsets Charset\nAliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1\nISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign,\nFrench and Finnish letters missing in Latin-1(ISO-8859-1). UTF-8 &nbsp;\nASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific\nCyrillic charset. This charset is supported in 4.3.2. cp1251 Windows-1251,\nwin-1251, 1251 Windows-specific Cyrillic charset. This charset is supported\nin 4.3.2. cp1252 Windows-1252, 1252 Windows specific charset for Western\nEuropean. KOI8-R koi8-ru, koi8r Russian. This charset is supported in\n4.3.2. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936\nSimplified Chinese, national standard character set. BIG5-HKSCS &nbsp; Big5\nwith Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, 932 Japanese\nEUC-JP EUCJP Japanese Note: Any other character sets are not recognized and\nISO-8859-1 will be used instead.\n@return (PHP 4, PHP 5)\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see html_entity_decode() - Convert all HTML entities to their applicable\ncharacters\n
get_include_path get_include_path(void) [string]\nGets the current include_path configuration option.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ini_get() - Gets the value of a configuration option\n@see restore_include_path() - Restores the value of the include_path\nconfiguration option\n@see set_include_path() - Sets the include_path configuration option\n@see include() - include\n
get_included_files get_included_files(void) [array]\nReturns an array with the names of included or required files. Gets the\nnames of all files that have been included using include(), include_once(),\nrequire() or require_once().\n@return (PHP 4, PHP 5)\n@note Note: Files included using the `auto_prepend_file` configuration\ndirective are not included in the returned array.\n@see include() - include\n@see include_once() - include_once\n@see require() - require\n@see require_once() - require_once\n@see get_required_files() - Alias of get_included_files\n
get_loaded_extensions get_loaded_extensions([bool $zend_extensions=false])\n[array]\nReturns an array with the names of all modules compiled and loaded. This\nfunction returns the names of all the modules compiled and loaded in the\nPHP interpreter.\n@param zend_extensions Only return Zend extensions, if not then regular\nextensions, like mysqli are listed. Defaults to FALSE (return regular\nextensions).\n@return (PHP 4, PHP 5)\n@see get_extension_funcs() - Returns an array with the names of the functions\nof a module\n@see extension_loaded() - Find out whether an extension is loaded\n@see dl() - Loads a PHP extension at runtime\n@see phpinfo() - Outputs information about PHP's configuration\n
get_magic_quotes_gpc get_magic_quotes_gpc(void) [int]\nGets the current configuration setting of magic_quotes_gpc. Returns the current\nconfiguration setting of magic_quotes_gpc Keep in mind that attempting to\nset magic_quotes_gpc at runtime will not work. For more information about\nmagic_quotes, see this security section.\n@return (PHP 4, PHP 5)\n@note Note: If the directive magic_quotes_sybase is ON it will completely\noverride magic_quotes_gpc. So even when get_magic_quotes_gpc() returns TRUE\nneither double quotes, backslashes or NUL&#039;s will be escaped. Only single\nquotes will be escaped. In this case they&#039;ll look like: &#039;&#039;\n@see addslashes() - Quote string with slashes\n@see stripslashes() - Un-quotes a quoted string\n@see get_magic_quotes_runtime() - Gets the current active configuration\nsetting of magic_quotes_runtime\n@see ini_get() - Gets the value of a configuration option\n
get_magic_quotes_runtime get_magic_quotes_runtime(void) [int]\nGets the current active configuration setting of magic_quotes_runtime.\n@return (PHP 4, PHP 5)\n@see get_magic_quotes_gpc() - Gets the current configuration setting of\nmagic_quotes_gpc\n@see set_magic_quotes_runtime() - Sets the current active configuration\nsetting of magic_quotes_runtime\n
get_meta_tags get_meta_tags(string $filename [, bool $use_include_path=false])\n[array]\nExtracts all meta tag content attributes from a file and returns an\narray. Opens `filename` and parses it line by line for &lt;meta> tags in\nthe file. The parsing stops at `&lt;/head>`.\n@return (PHP 4, PHP 5)\n@note Note: Only meta tags with name attributes will be parsed.\n@see htmlentities() - Convert all applicable characters to HTML entities\n@see urlencode() - URL-encodes string\n
get_object_vars get_object_vars(object $object) [array]\nGets the properties of the given object. Gets the accessible non-static\nproperties of the given `object` according to scope.\n@param object An object instance.\n@return (PHP 4, PHP 5)\n@see get_class_methods() - Gets the class methods' names\n@see get_class_vars() - Get the default properties of the class\n
get_parent_class get_parent_class([mixed $object]) [string]\nRetrieves the parent class name for object or class. Retrieves the parent\nclass name for object or class.\n@param object The tested object or class name\n@return (PHP 4, PHP 5)\n@see get_class() - Returns the name of the class of an object\n@see is_subclass_of() - Checks if the object has this class as one of\nits parents\n
get_required_files get_required_files\nAlias of get_included_files.\n
get_resource_type get_resource_type(resource $handle) [string]\nReturns the resource type. This function gets the type of the given resource.\n@param handle The evaluated resource handle.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
getallheaders getallheaders(void) [array]\nFetch all HTTP request headers. Fetches all HTTP headers from the current\nrequest. This function is an alias for apache_request_headers(). Please read\nthe apache_request_headers() documentation for more information on how this\nfunction works. This function is only supported when PHP is installed as an\nApache module.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 4.3.3 you can use this function with the NSAPI server\nmodule in Netscape/iPlanet/SunONE webservers, too.\n@see apache_response_headers() - Fetch all HTTP response headers\n
getcwd getcwd(void) [string]\nGets the current working directory. Gets the current working directory.\n@return (PHP 4, PHP 5)\n@see chdir() - Change directory\n@see chmod() - Changes file mode\n
getdate getdate([int $timestamp=time()]) [array]\nGet date/time information. Returns an associative array containing the date\ninformation of the `timestamp`, or the current local time if no `timestamp`\nis given.\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@return (PHP 4, PHP 5)\n@see date() - Format a local time/date\n@see idate() - Format a local time/date as integer\n@see time() - Return current Unix timestamp\n@see setlocale() - Set locale information\n
getenv getenv(string $varname) [string]\nGets the value of an environment variable. Gets the value of an environment\nvariable. You can see a list of all the environmental variables by using\nphpinfo(). Many of these variables are listed within &raquo; RFC 3875,\nspecifically section 4.1, &quot;Request Meta-Variables&quot;.\n@param varname The variable name.\n@return (PHP 4, PHP 5)\n@see putenv() - Sets the value of an environment variable\n@see apache_getenv() - Get an Apache subprocess_env variable\n@see Superglobals\n
gethostbyaddr gethostbyaddr(string $ip_address) [string]\nGet the Internet host name corresponding to a given IP address. Returns the\nhost name of the Internet host specified by `ip_address`.\n@param ip_address The host IP address.\n@return (PHP 4, PHP 5)\n@see gethostbyname() - Get the IPv4 address corresponding to a given Internet\nhost name\n@see gethostbynamel() - Get a list of IPv4 addresses corresponding to a\ngiven Internet host name\n
gethostbyname gethostbyname(string $hostname) [string]\nGet the IPv4 address corresponding to a given Internet host name. Returns\nthe IPv4 address of the Internet host specified by `hostname`.\n@param hostname The host name.\n@return (PHP 4, PHP 5)\n@see gethostbyaddr() - Get the Internet host name corresponding to a given\nIP address\n@see gethostbynamel() - Get a list of IPv4 addresses corresponding to a\ngiven Internet host name\n@see inet_pton() - Converts a human readable IP address to its packed in_addr\nrepresentation\n@see inet_ntop() - Converts a packed internet address to a human readable\nrepresentation\n
gethostbynamel gethostbynamel(string $hostname) [array]\nGet a list of IPv4 addresses corresponding to a given Internet host\n   name. Returns a list of IPv4 addresses to which the Internet host specified\n   by `hostname` resolves.\n@param hostname The host name.\n@return (PHP 4, PHP 5)\n@see gethostbyname() - Get the IPv4 address corresponding to a given Internet\nhost name\n@see gethostbyaddr() - Get the Internet host name corresponding to a given\nIP address\n@see checkdnsrr() - Check DNS records corresponding to a given Internet host\nname or IP address\n@see getmxrr() - Get MX records corresponding to a given Internet host name\n@see the `named(8)` manual page\n
gethostname gethostname(void) [string]\nGets the host name. gethostname() gets the standard host name for the local\nmachine.\n@return (PHP >= 5.3.0)\n@see gethostbyname() - Get the IPv4 address corresponding to a given Internet\nhost name\n@see gethostbyaddr() - Get the Internet host name corresponding to a given\nIP address\n@see php_uname() - Returns information about the operating system PHP is\nrunning on\n
getimagesize getimagesize(string $filename [, array &$imageinfo]) [array]\nGet the size of an image. The getimagesize() function will determine the\nsize of any given image file and return the dimensions along with the file\ntype and a `height/width` text string to be used inside a normal HTML IMG\ntag and the correspondant HTTP content type. getimagesize() can also return\nsome more information in `imageinfo` parameter. Note: Note that JPC and JP2\nare capable of having components with different bit depths. In this case,\nthe value for &quot;bits&quot; is the highest bit depth encountered. Also,\nJP2 files may contain `multiple JPEG 2000 codestreams`. In this case,\ngetimagesize() returns the values for the first codestream it encounters in\nthe root of the file.  Note: The information about icons are retrieved from\nthe icon with the highest bitrate.\n@param filename This parameter specifies the file you wish to retrieve\ninformation about. It can reference a local file or (configuration permitting)\na remote file using one of the supported streams.\n@param imageinfo This optional parameter allows you to extract some extended\ninformation from the image file. Currently, this will return the different\nJPG APP markers as an associative array. Some programs use these APP markers\nto embed text information in images. A very common one is to embed &raquo;\nIPTC information in the APP13 marker. You can use the iptcparse() function\nto parse the binary APP13 marker into something readable.\n@return (PHP 4, PHP 5)\n@note Note: This function does not require the GD image library.\n@see image_type_to_mime_type() - Get Mime-Type for image-type returned by\ngetimagesize, exif_read_data, exif_thumbnail, exif_imagetype\n@see exif_imagetype() - Determine the type of an image\n@see exif_read_data() - Reads the EXIF headers from JPEG or TIFF\n@see exif_thumbnail() - Retrieve the embedded thumbnail of a TIFF or JPEG image\n
getlastmod getlastmod(void) [int]\nGets time of last page modification. Gets the time of the last modification of\nthe current page. If you&#039;re interested in getting the last modification\ntime of a different file, consider using filemtime().\n@return (PHP 4, PHP 5)\n@see date() - Format a local time/date\n@see getmyuid() - Gets PHP script owner's UID\n@see getmygid() - Get PHP script owner's GID\n@see get_current_user() - Gets the name of the owner of the current PHP script\n@see getmyinode() - Gets the inode of the current script\n@see getmypid() - Gets PHP's process ID\n@see filemtime() - Gets file modification time\n
getmxrr getmxrr(string $hostname, array &$mxhosts [, array &$weight]) [bool]\nGet MX records corresponding to a given Internet host name. Searches DNS\nfor MX records corresponding to `hostname`.\n@param hostname The Internet host name.\n@param mxhosts A list of the MX records found is placed into the array\n`mxhosts`.\n@param weight If the `weight` array is given, it will be filled with the\nweight information gathered.\n@return (PHP 4, PHP 5)\n@note Note: This function should not be used for the purposes of address\nverification. Only the mailexchangers found in DNS are returned, however,\naccording to &raquo; RFC 2821 when no mail exchangers are listed, `hostname`\nitself should be used as the only mail exchanger with a priority of `0`.\n@note Note: For compatibility with Windows before this was implemented,\nthen try the &raquo; PEAR class &raquo; Net_DNS.\n@see checkdnsrr() - Check DNS records corresponding to a given Internet host\nname or IP address\n@see dns_get_record() - Fetch DNS Resource Records associated with a hostname\n@see gethostbyname() - Get the IPv4 address corresponding to a given Internet\nhost name\n@see gethostbynamel() - Get a list of IPv4 addresses corresponding to a\ngiven Internet host name\n@see gethostbyaddr() - Get the Internet host name corresponding to a given\nIP address\n@see the `named(8)` manual page\n
getmygid getmygid(void) [int]\nGet PHP script owner's GID.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see getmyuid() - Gets PHP script owner's UID\n@see getmypid() - Gets PHP's process ID\n@see get_current_user() - Gets the name of the owner of the current PHP script\n@see getmyinode() - Gets the inode of the current script\n@see getlastmod() - Gets time of last page modification\n
getmyinode getmyinode(void) [int]\nGets the inode of the current script. Gets the inode of the current script.\n@return (PHP 4, PHP 5)\n@see getmygid() - Get PHP script owner's GID\n@see getmyuid() - Gets PHP script owner's UID\n@see getmypid() - Gets PHP's process ID\n@see get_current_user() - Gets the name of the owner of the current PHP script\n@see getlastmod() - Gets time of last page modification\n
getmypid getmypid(void) [int]\nGets PHP's process ID. Gets the current PHP process ID.\n@return (PHP 4, PHP 5)\n@see getmygid() - Get PHP script owner's GID\n@see getmyuid() - Gets PHP script owner's UID\n@see get_current_user() - Gets the name of the owner of the current PHP script\n@see getmyinode() - Gets the inode of the current script\n@see getlastmod() - Gets time of last page modification\n
getmyuid getmyuid(void) [int]\nGets PHP script owner's UID.\n@return (PHP 4, PHP 5)\n@see getmygid() - Get PHP script owner's GID\n@see getmypid() - Gets PHP's process ID\n@see get_current_user() - Gets the name of the owner of the current PHP script\n@see getmyinode() - Gets the inode of the current script\n@see getlastmod() - Gets time of last page modification\n
getopt getopt(string $options [, array $longopts]) [array]\nGets options from the command line argument list. Parses options passed to\nthe script.\n@param options Each character in this string will be used as option characters\nand matched against options passed to the script starting with a single hyphen\n(`-`). For example, an option string `&quot;x&quot;` recognizes an option\n`-x`. Only a-z, A-Z and 0-9 are allowed.\n@param longopts An array of options. Each element in this array will be used\nas option strings and matched against options passed to the script starting\nwith two hyphens (`--`). For example, an longopts element `&quot;opt&quot;`\nrecognizes an option `--opt`. Note: Prior to PHP5.3.0 this parameter was\nonly available on few systems\n@return (PHP 4 >= 4.3.0, PHP 5)\n
getprotobyname getprotobyname(string $name) [int]\nGet protocol number associated with protocol name. getprotobyname() returns\nthe protocol number associated with the protocol `name` as per /etc/protocols.\n@param name The protocol name.\n@return (PHP 4, PHP 5)\n@see getprotobynumber() - Get protocol name associated with protocol number\n
getprotobynumber getprotobynumber(int $number) [string]\nGet protocol name associated with protocol number. getprotobynumber() returns\nthe protocol name associated with protocol `number` as per /etc/protocols.\n@param number The protocol number.\n@return (PHP 4, PHP 5)\n@see getprotobyname() - Get protocol number associated with protocol name\n
getrandmax getrandmax(void) [int]\nShow largest possible random value.\n@return (PHP 4, PHP 5)\n@see rand() - Generate a random integer\n@see srand() - Seed the random number generator\n@see mt_getrandmax() - Show largest possible random value\n
getrusage getrusage([int $who=0]) [array]\nGets the current resource usages. This is an interface to getrusage(2). It\ngets data returned from the system call.\n@param who If `who` is 1, getrusage will be called with RUSAGE_CHILDREN.\n@return (PHP 4, PHP 5)\n@note Note: This function is not implemented on Windows platforms.\n@see Your system&#039;s man page on getrusage(2)\n
getservbyname getservbyname(string $service, string $protocol) [int]\nGet port number associated with an Internet service and\nprotocol. getservbyname() returns the Internet port which corresponds to\n`service` for the specified `protocol` as per /etc/services.\n@param service The Internet service name, as a string.\n@param protocol `protocol` is either `&quot;tcp&quot;` or `&quot;udp&quot;`\n(in lowercase).\n@return (PHP 4, PHP 5)\n@see getservbyport() - Get Internet service which corresponds to port and\nprotocol\n@see &raquo; http://www.iana.org/assignments/port-numbers for a complete\nlist of port numbers.\n
getservbyport getservbyport(int $port, string $protocol) [string]\nGet Internet service which corresponds to port and protocol. getservbyport()\nreturns the Internet service associated with `port` for the specified\n`protocol` as per /etc/services.\n@param port The port number.\n@param protocol `protocol` is either `&quot;tcp&quot;` or `&quot;udp&quot;`\n(in lowercase).\n@return (PHP 4, PHP 5)\n@see getservbyname() - Get port number associated with an Internet service\nand protocol\n
gettext gettext(string $message) [string]\nLookup a message in the current domain. Looks up a message in the current\ndomain.\n@param message The message being translated.\n@return (PHP 4, PHP 5)\n@note Note: You may use the underscore character &#039;_&#039; as an alias\nto this function.\n@note Note: Setting a language isn&#039;t enough for some systems and the\nputenv() should be used to define the current locale.\n@see setlocale() - Set locale information\n
gettimeofday gettimeofday([bool $return_float]) [mixed]\nGet current time. This is an interface to gettimeofday(2). It returns an\nassociative array containing the data returned from the system call.\n@param return_float When set to TRUE, a float instead of an array is returned.\n@return (PHP 4, PHP 5)\n
gettype gettype(mixed $var) [string]\nGet the type of a variable. Returns the type of the PHP variable `var`. Never\nuse gettype() to test for a certain type, since the returned string may be\nsubject to change in a future version. In addition, it is slow too, as it\ninvolves string comparison. Instead, use the `is_*` functions.\n@param var The variable being type checked.\n@return (PHP 4, PHP 5)\n@see settype() - Set the type of a variable\n@see get_class() - Returns the name of the class of an object\n@see is_array() - Finds whether a variable is an array\n@see is_bool() - Finds out whether a variable is a boolean\n@see is_float() - Finds whether the type of a variable is float\n@see is_int() - Find whether the type of a variable is integer\n@see is_null() - Finds whether a variable is NULL\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_object() - Finds whether a variable is an object\n@see is_resource() - Finds whether a variable is a resource\n@see is_scalar() - Finds whether a variable is a scalar\n@see is_string() - Find whether the type of a variable is string\n@see function_exists() - Return TRUE if the given function has been defined\n@see method_exists() - Checks if the class method exists\n
glob glob(string $pattern [, int $flags=0]) [array]\nFind pathnames matching a pattern. The glob() function searches for all the\npathnames matching `pattern` according to the rules used by the libc glob()\nfunction, which is similar to the rules used by common shells.\n@param pattern The pattern. No tilde expansion or parameter substitution\nis done.\n@param flags Valid flags: GLOB_MARK - Adds a slash to each directory returned\nGLOB_NOSORT - Return files as they appear in the directory (no sorting)\nGLOB_NOCHECK - Return the search pattern if no files matching it were found\nGLOB_NOESCAPE - Backslashes do not quote metacharacters GLOB_BRACE - Expands\n{a,b,c} to match &#039;a&#039;, &#039;b&#039;, or &#039;c&#039; GLOB_ONLYDIR\n- Return only directory entries which match the pattern GLOB_ERR - Stop on\nread errors (like unreadable directories), by default errors are ignored.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: This function isn&#039;t available on some systems (e.g. old\nSun OS).\n@note Note: The GLOB_BRACE flag is not available on some non GNU systems,\nlike Solaris.\n@see opendir() - Open directory handle\n@see readdir() - Read entry from directory handle\n@see closedir() - Close directory handle\n@see fnmatch() - Match filename against a pattern\n
gmdate gmdate(string $format [, int $timestamp]) [string]\nFormat a GMT/UTC date/time. Identical to the date() function except that\nthe time returned is Greenwich Mean Time (GMT).\n@param format The format of the outputted date string. See the formatting\noptions for the date() function.\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@return (PHP 4, PHP 5)\n@see date() - Format a local time/date\n@see mktime() - Get Unix timestamp for a date\n@see gmmktime() - Get Unix timestamp for a GMT date\n@see strftime() - Format a local time/date according to locale settings\n
gmmktime gmmktime([int $hour=gmdate(&quot;H&quot;) [, int\n$minute=gmdate(&quot;i&quot;) [, int $second=gmdate(&quot;s&quot;) [,\nint $month=gmdate(&quot;n&quot;) [, int $day=gmdate(&quot;j&quot;) [, int\n$year=gmdate(&quot;Y&quot;) [, int $is_dst=-1]]]]]]]) [int]\nGet Unix timestamp for a GMT date. Identical to mktime() except the passed\nparameters represents a GMT date. gmmktime() internally uses mktime() so only\ntimes valid in derived local time can be used. Like mktime(), arguments may\nbe left out in order from right to left, with any omitted arguments being\nset to the current corresponding GMT value.\n@param hour The number of the hour relevant to the start of the day determined\nby `month`, `day` and `year`. Negative values reference the hour before\nmidnight of the day in question. Values greater than 23 reference the\nappropriate hour in the following day(s).\n@param minute The number of the minute relevant to the start of the\n`hour`. Negative values reference the minute in the previous hour. Values\ngreater than 59 reference the appropriate minute in the following hour(s).\n@param second The number of seconds relevant to the start of the\n`minute`. Negative values reference the second in the previous minute. Values\ngreater than 59 reference the appropriate second in the following minute(s).\n@param month The number of the month relevant to the end of the previous\nyear. Values 1 to 12 reference the normal calendar months of the year in\nquestion. Values less than 1 (including negative values) reference the months\nin the previous year in reverse order, so 0 is December, -1 is November,\netc. Values greater than 12 reference the appropriate month in the following\nyear(s).\n@param day The number of the day relevant to the end of the previous\nmonth. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the\nnormal days in the relevant month. Values less than 1 (including negative\nvalues) reference the days in the previous month, so 0 is the last day of\nthe previous month, -1 is the day before that, etc. Values greater than the\nnumber of days in the relevant month reference the appropriate day in the\nfollowing month(s).\n@param year The year\n@param is_dst Parameters always represent a GMT date so `is_dst` doesn&#039;t\ninfluence the result.\n@return (PHP 4, PHP 5)\n@see mktime() - Get Unix timestamp for a date\n@see date() - Format a local time/date\n@see time() - Return current Unix timestamp\n
gmp_abs gmp_abs(resource $a) [resource]\nAbsolute value. Get the absolute value of a number.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_add gmp_add(resource $a, resource $b) [resource]\nAdd numbers. Add two numbers.\n@param a A number that will be added. It can be either a GMP number resource,\nor a numeric string given that it is possible to convert the latter to\na number.\n@param b A number that will be added. It can be either a GMP number resource,\nor a numeric string given that it is possible to convert the latter to\na number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_and gmp_and(resource $a, resource $b) [resource]\nBitwise AND. Calculates bitwise AND of two GMP numbers.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_clrbit gmp_clrbit(resource $a, int $index) [void]\nClear bit. Clears (sets to 0) bit `index` in `a`. The index starts at 0.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param index It can be either a GMP number resource, or a numeric string\ngiven that it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: Unlike most of the other GMP functions, gmp_clrbit() must be called\nwith a GMP resource that already exists (using gmp_init() for example). One\nwill not be automatically created.\n@see gmp_setbit() - Set bit\n@see gmp_testbit() - Tests if a bit is set\n
gmp_cmp gmp_cmp(resource $a, resource $b) [int]\nCompare numbers. Compares two numbers.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_com gmp_com(resource $a) [resource]\nCalculates one's complement. Returns the one&#039;s complement of `a`.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_div_q gmp_div_q(resource $a, resource $b [, int $round=GMP_ROUND_ZERO])\n[resource]\nDivide numbers. Divides `a` by `b` and returns the integer result.\n@param a The number being divided. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@param b The number that `a` is being divided by. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@param round The result rounding is defined by the `round`,\nwhich can have the following values: GMP_ROUND_ZERO: The result is\ntruncated towards 0. GMP_ROUND_PLUSINF: The result is rounded towards\n`+infinity`. GMP_ROUND_MINUSINF: The result is rounded towards `-infinity`. It\ncan be either a GMP number resource, or a numeric string given that it is\npossible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: This function can also be called as gmp_div().\n@see gmp_div_r() - Remainder of the division of numbers\n@see gmp_div_qr() - Divide numbers and get quotient and remainder\n
gmp_div_qr gmp_div_qr(resource $n, resource $d [, int $round=GMP_ROUND_ZERO])\n[array]\nDivide numbers and get quotient and remainder. The function divides `n` by `d`.\n@param n The number being divided. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@param d The number that `n` is being divided by. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@param round See the gmp_div_q() function for description of the `round`\nargument.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gmp_div_q() - Divide numbers\n@see gmp_div_r() - Remainder of the division of numbers\n
gmp_div_r gmp_div_r(resource $n, resource $d [, int $round=GMP_ROUND_ZERO])\n[resource]\nRemainder of the division of numbers. Calculates remainder of the integer\ndivision of `n` by `d`. The remainder has the sign of the `n` argument,\nif not zero.\n@param n The number being divided. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@param d The number that `n` is being divided by. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@param round See the gmp_div_q() function for description of the `round`\nargument.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gmp_div_q() - Divide numbers\n@see gmp_div_qr() - Divide numbers and get quotient and remainder\n
gmp_div gmp_div\nAlias of gmp_div_q.\n
gmp_divexact gmp_divexact(resource $n, resource $d) [resource]\nExact division of numbers. Divides `n` by `d`, using fast &quot;exact\ndivision&quot; algorithm. This function produces correct results only when\nit is known in advance that `d` divides `n`.\n@param n The number being divided. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@param d The number that `a` is being divided by. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_fact gmp_fact(mixed $a) [resource]\nFactorial. Calculates factorial (`a!`) of `a`.\n@param a The factorial number. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_gcd gmp_gcd(resource $a, resource $b) [resource]\nCalculate GCD. Calculate greatest common divisor of `a` and `b`. The result\nis always positive even if either of, or both, input operands are negative.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_gcdext gmp_gcdext(resource $a, resource $b) [array]\nCalculate GCD and multipliers. Calculates g, s, and t, such that `a*s + b*t =\ng = gcd(a,b)`, where gcd is the greatest common divisor. Returns an array with\nrespective elements g, s and t. This function can be used to solve linear\nDiophantine equations in two variables. These are equations that allow only\ninteger solutions and have the form: `a*x + b*y = c`. For more information,\ngo to the &raquo; &quot;Diophantine Equation&quot; page at MathWorld\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_hamdist gmp_hamdist(resource $a, resource $b) [int]\nHamming distance. Returns the hamming distance between `a` and `b`. Both\noperands should be non-negative.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number. It should be positive.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number. It should be positive.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gmp_popcount() - Population count\n@see gmp_xor() - Bitwise XOR\n
gmp_init gmp_init(mixed $number [, int $base=0]) [resource]\nCreate GMP number. Creates a GMP number from an integer or string.\n@param number An integer or a string. The string representation can be decimal,\nhexadecimal or octal.\n@param base The base. The base may vary from 2 to 36. If base is 0 (default\nvalue), the actual base is determined from the leading characters: if the first\ntwo characters are `0x` or `0X`, hexadecimal is assumed, otherwise if the first\ncharacter is &quot;0&quot;, octal is assumed, otherwise decimal is assumed.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: To use the extended base introduced in PHP 5.3.2, then PHP must\nbe compiled against GMP 4.2.0 or greater.\n
gmp_intval gmp_intval(resource $gmpnumber) [int]\nConvert GMP number to integer. This function allows to convert GMP number\nto integer.\n@param gmpnumber A GMP number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_invert gmp_invert(resource $a, resource $b) [resource]\nInverse by modulo. Computes the inverse of `a` modulo `b`.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_jacobi gmp_jacobi(resource $a, resource $p) [int]\nJacobi symbol. Computes &raquo; Jacobi symbol of `a` and `p`. `p` should be\nodd and must be positive.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param p It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number. Should be odd and\nmust be positive.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_legendre gmp_legendre(resource $a, resource $p) [int]\nLegendre symbol. Compute the &raquo; Legendre symbol of `a` and `p`. `p`\nshould be odd and must be positive.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param p It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number. Should be odd and\nmust be positive.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_mod gmp_mod(resource $n, resource $d) [resource]\nModulo operation. Calculates `n` modulo `d`. The result is always non-negative,\nthe sign of `d` is ignored.\n@param n It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param d The modulo that is being evaluated. It can be either a GMP number\nresource, or a numeric string given that it is possible to convert the latter\nto a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_mul gmp_mul(resource $a, resource $b) [resource]\nMultiply numbers. Multiplies `a` by `b` and returns the result.\n@param a A number that will be multiplied by `b`. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@param b A number that will be multiplied by `a`. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_neg gmp_neg(resource $a) [resource]\nNegate number. Returns the negative value of a number.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_nextprime gmp_nextprime(int $a) [resource]\nFind next prime number. Find next prime number\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 5 >= 5.2.0)\n@note Note: This function uses a probabilistic algorithm to identify primes\nand chances to get a composite number are extremely small.\n
gmp_or gmp_or(resource $a, resource $b) [resource]\nBitwise OR. Calculates bitwise inclusive OR of two GMP numbers.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@param b It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_perfect_square gmp_perfect_square(resource $a) [bool]\nPerfect square check. Check if a number is a perfect square.\n@param a The number being checked as a perfect square. It can be either\na GMP number resource, or a numeric string given that it is possible to\nconvert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gmp_sqrt() - Calculate square root\n@see gmp_sqrtrem() - Square root with remainder\n
gmp_popcount gmp_popcount(resource $a) [int]\nPopulation count. Get the population count.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_pow gmp_pow(resource $base, int $exp) [resource]\nRaise number into power. Raise `base` into power `exp`.\n@param base The base number. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@param exp The positive power to raise the `base`.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_powm gmp_powm(resource $base, resource $exp, resource $mod) [resource]\nRaise number into power with modulo. Calculate (`base` raised into power\n`exp`) modulo `mod`. If `exp` is negative, result is undefined.\n@param base The base number. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@param exp The positive power to raise the `base`. It can be either a GMP\nnumber resource, or a numeric string given that it is possible to convert\nthe latter to a number.\n@param mod The modulo. It can be either a GMP number resource, or a numeric\nstring given that it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_prob_prime gmp_prob_prime(resource $a [, int $reps=10]) [int]\nCheck if number is &quot;probably prime&quot;. The function uses\nMiller-Rabin&#039;s probabilistic test to check if a number is a prime.\n@param a The number being checked as a prime. It can be either a GMP number\nresource, or a numeric string given that it is possible to convert the latter\nto a number.\n@param reps Reasonable values of `reps` vary from 5 to 10 (default being\n10); a higher value lowers the probability for a non-prime to pass as a\n&quot;probable&quot; prime. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_random gmp_random([int $limiter=20]) [resource]\nRandom number. Generate a random number. The number will be between zero and\nthe number of bits per limb multiplied by `limiter`. If `limiter` is negative,\nnegative numbers are generated. A limb is an internal GMP mechanism. The number\nof bits in a limb is not static, and can vary from system to system. Generally,\nthe number of bits in a limb is either 16 or 32, but this is not guaranteed.\n@param limiter The limiter. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_scan0 gmp_scan0(resource $a, int $start) [int]\nScan for 0. Scans `a`, starting with bit `start`, towards more significant\nbits, until the first clear bit is found.\n@param a The number to scan. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@param start The starting bit.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_scan1 gmp_scan1(resource $a, int $start) [int]\nScan for 1. Scans `a`, starting with bit `start`, towards more significant\nbits, until the first set bit is found.\n@param a The number to scan. It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number.\n@param start The starting bit.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
gmp_setbit gmp_setbit(resource $a, int $index [, bool $set_clear=true]) [void]\nSet bit. Sets bit `index` in `a`.\n@param a The number being set to. It can be either a GMP number resource, or\na numeric string given that it is possible to convert the latter to a number.\n@param index The set bit.\n@param set_clear Defines if the bit is set to 0 or 1. By default the bit is\nset to 1. Index starts at 0.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: Unlike most of the other GMP functions, gmp_setbit() must be called\nwith a GMP resource that already exists (using gmp_init() for example). One\nwill not be automatically created.\n@see gmp_clrbit() - Clear bit\n@see gmp_testbit() - Tests if a bit is set\n
gmp_sign gmp_sign(resource $a) [int]\nSign of number. Checks the sign of a number.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see gmp_abs() - Absolute value\n@see abs() - Absolute value\n
gmp_sqrt gmp_sqrt(resource $a) [resource]\nCalculate square root. Calculates square root of `a`.\n@param a It can be either a GMP number resource, or a numeric string given\nthat it is possible to convert the latter to a number.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
fdf_set_status fdf_set_status(resource $fdf_document, string $status) [bool]\nSet the value of the /STATUS key. Sets the value of the `/STATUS` key. When\na client receives a FDF with a status set it will present the value in an\nalert box.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param status\n@return (PHP 4, PHP 5)\n@see fdf_get_status() - Get the value of the /STATUS key\n
fdf_set_submit_form_action fdf_set_submit_form_action(resource $fdf_document,\nstring $fieldname, int $trigger, string $script, int $flags) [bool]\nSets a submit form action of a field. Sets a submit form action for the\ngiven field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param trigger\n@param script\n@param flags\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see fdf_set_javascript_action() - Sets an javascript action of a field\n
fdf_set_target_frame fdf_set_target_frame(resource $fdf_document, string\n$frame_name) [bool]\nSet target frame for form display. Sets the target frame to display a result\nPDF defined with fdf_save_file() in.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param frame_name The frame name, as a string.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_save_file()\n
fdf_set_value fdf_set_value(resource $fdf_document, string $fieldname,\nmixed $value [, int $isName]) [bool]\nSet the value of a field. Sets the `value` for the given field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param value This parameter will be stored as a string unless it is an\narray. In this case all array elements will be stored as a value array.\n@param isName Note: In older versions of the FDF toolkit last parameter\ndetermined if the field value was to be converted to a PDF Name (= 1) or set\nto a PDF String (= 0). The value is no longer used in the current toolkit\nversion 5.0. For compatibility reasons it is still supported as an optional\nparameter beginning with PHP 4.3, but ignored internally.\n@return (PHP 4, PHP 5)\n@see fdf_get_value() - Get the value of a field\n@see fdf_remove_item() - Sets target frame for form\n
fdf_set_version fdf_set_version(resource $fdf_document, string $version) [bool]\nSets version number for a FDF file. Sets the FDF `version` for the given\ndocument. Some features supported by this extension are only available in\nnewer FDF versions.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param version The version number. For the current FDF toolkit 5.0, this\nmay be either `1.2`, `1.3` or `1.4`.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_get_version() - Gets version number for FDF API or file\n
feof feof(resource $handle) [bool]\nTests for end-of-file on a file pointer. Tests for end-of-file on a file\npointer.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@return (PHP 4, PHP 5)\n
fflush fflush(resource $handle) [bool]\nFlushes the output to a file. This function forces a write of all buffered\noutput to the resource pointed to by the file `handle`.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see clearstatcache() - Clears file status cache\n@see fwrite() - Binary-safe file write\n
fgetc fgetc(resource $handle) [string]\nGets character from file pointer. Gets a character from the given file pointer.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see fread() - Binary-safe file read\n@see fopen() - Opens file or URL\n@see popen() - Opens process file pointer\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see fgets() - Gets line from file pointer\n
fgetcsv fgetcsv(resource $handle [, int $length=0 [, string\n$delimiter=&#039;,&#039; [, string $enclosure=&#039;&quot;&#039; [, string\n$escape=&#039;\\&#039;]]]]) [array]\nGets line from file pointer and parse for CSV fields. Similar to fgets()\nexcept that fgetcsv() parses the line it reads for fields in CSV format and\nreturns an array containing the fields read.\n@param handle A valid file pointer to a file successfully opened by fopen(),\npopen(), or fsockopen().\n@param length Must be greater than the longest line (in characters) to be\nfound in the CSV file (allowing for trailing line-end characters). It became\noptional in PHP 5. Omitting this parameter (or setting it to 0 in PHP 5.0.4\nand later) the maximum line length is not limited, which is slightly slower.\n@param delimiter Set the field delimiter (one character only).\n@param enclosure Set the field enclosure character (one character only).\n@param escape Set the escape character (one character only). Defaults as\na backslash.\n@return (PHP 4, PHP 5)\n@note Note: Locale setting is taken into account by this function. If LANG is\ne.g. `en_US.UTF-8`, files in one-byte encoding are read wrong by this function.\n@see str_getcsv() - Parse a CSV string into an array\n@see explode() - Split a string by string\n@see file() - Reads entire file into an array\n@see pack() - Pack data into binary string\n@see fputcsv() - Format line as CSV and write to file pointer\n
fgets fgets(resource $handle [, int $length]) [string]\nGets line from file pointer. Gets a line from file pointer.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@param length Reading ends when `length` - 1 bytes have been read, on a\nnewline (which is included in the return value), or on EOF (whichever comes\nfirst). If no length is specified, it will keep reading from the stream\nuntil it reaches the end of the line. Note: Until PHP 4.3.0, omitting it\nwould assume 1024 as the line length. If the majority of the lines in the\nfile are all larger than 8KB, it is more resource efficient for your script\nto specify the maximum line length.\n@return (PHP 4, PHP 5)\n@note Note: If PHP is not properly recognizing the line endings when\nreading files either on or created by a Macintosh computer, enabling the\nauto_detect_line_endings run-time configuration option may help resolve\nthe problem.\n@note Note: People used to the &#039;C&#039; semantics of fgets() should\nnote the difference in how `EOF` is returned.\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fread() - Binary-safe file read\n@see fgetc() - Gets character from file pointer\n@see stream_get_line() - Gets line from stream resource up to a given delimiter\n@see fopen() - Opens file or URL\n@see popen() - Opens process file pointer\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see stream_set_timeout() - Set timeout period on a stream\n
fgetss fgetss(resource $handle [, int $length [, string $allowable_tags]])\n[string]\nGets line from file pointer and strip HTML tags. Identical to fgets(), except\nthat fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the\ntext it reads.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@param length Length of the data to be retrieved.\n@param allowable_tags You can use the optional third parameter to specify\ntags which should not be stripped.\n@return (PHP 4, PHP 5)\n@note Note: If PHP is not properly recognizing the line endings when\nreading files either on or created by a Macintosh computer, enabling the\nauto_detect_line_endings run-time configuration option may help resolve\nthe problem.\n@see fgets() - Gets line from file pointer\n@see fopen() - Opens file or URL\n@see popen() - Opens process file pointer\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see strip_tags() - Strip HTML and PHP tags from a string\n
file_exists file_exists(string $filename) [bool]\nChecks whether a file or directory exists. Checks whether a file or directory\nexists.\n@param filename Path to the file or directory. On windows, use\n//computername/share/filename or \\computername\share\filename to check\nfiles on network shares.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_readable() - Tells whether a file exists and is readable\n@see is_writable() - Tells whether the filename is writable\n@see is_file() - Tells whether the filename is a regular file\n@see file() - Reads entire file into an array\n
file_get_contents file_get_contents(string $filename [, bool\n$use_include_path=false [, resource $context [, int $offset=-1 [, int\n$maxlen]]]]) [string]\nReads entire file into a string. This function is similar to file(), except\nthat file_get_contents() returns the file in a string, starting at the\nspecified `offset` up to `maxlen` bytes. On failure, file_get_contents()\nwill return FALSE. file_get_contents() is the preferred way to read the\ncontents of a file into a string. It will use memory mapping techniques if\nsupported by your OS to enhance performance. Note: If you&#039;re opening\na URI with special characters, such as spaces, you need to encode the URI\nwith urlencode().\n@param filename Name of the file to read.\n@param use_include_path Note: As of PHP 5 the FILE_USE_INCLUDE_PATH can be\nused to trigger include path search.\n@param context A valid context resource created with\nstream_context_create(). If you don&#039;t need to use a custom context,\nyou can skip this parameter by NULL.\n@param offset The offset where the reading starts on the original\nstream. Seeking (`offset`) is not supported with remote files. Attempting to\nseek on non-local files may work with small offsets, but this is unpredictable\nbecause it works on the buffered stream.\n@param maxlen Maximum length of data read. The default is to read until\nend of file is reached. Note that this parameter is applied to the stream\nprocessed by the filters.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function is binary-safe.\n@see file() - Reads entire file into an array\n@see fgets() - Gets line from file pointer\n@see fread() - Binary-safe file read\n@see readfile() - Outputs a file\n@see file_put_contents() - Write a string to a file\n@see stream_get_contents() - Reads remainder of a stream into a string\n@see stream_context_create() - Create a streams context\n@see $http_response_header\n
file_put_contents file_put_contents(string $filename, mixed $data [, int\n$flags=0 [, resource $context]]) [int]\nWrite a string to a file. This function is identical to calling fopen(),\nfwrite() and fclose() successively to write data to a file. If `filename` does\nnot exist, the file is created. Otherwise, the existing file is overwritten,\nunless the FILE_APPEND flag is set.\n@param filename Path to the file where to write the data.\n@param data The data to write. Can be either a string, an array or a stream\nresource. If `data` is a stream resource, the remaining buffer of that\nstream will be copied to the specified file. This is similar with using\nstream_copy_to_stream(). You can also specify the `data` parameter as a\nsingle dimension array. This is equivalent to `file_put_contents($filename,\nimplode(&#039;&#039;, $array))`.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (`|`) operator. Available flags Flag\nDescription FILE_USE_INCLUDE_PATH Search for `filename` in the include\ndirectory. See include_path for more information. FILE_APPEND If file\n`filename` already exists, append the data to the file instead of overwriting\nit. LOCK_EX Acquire an exclusive lock on the file while proceeding to the\nwriting.\n@param context A valid context resource created with stream_context_create().\n@return (PHP 5)\n@note Note: This function is binary-safe.\n@see fopen() - Opens file or URL\n@see fwrite() - Binary-safe file write\n@see file_get_contents() - Reads entire file into a string\n@see stream_context_create() - Create a streams context\n
file file(string $filename [, int $flags=0 [, resource $context]]) [array]\nReads entire file into an array. Reads an entire file into an array. Note:\nYou can use file_get_contents() to return the contents of a file as a string.\n@return (PHP 4, PHP 5)\n@see readfile() - Outputs a file\n@see fopen() - Opens file or URL\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see popen() - Opens process file pointer\n@see file_get_contents() - Reads entire file into a string\n@see include() - include\n@see stream_context_create() - Create a streams context\n
fileatime fileatime(string $filename) [int]\nGets last access time of file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The atime of a file is supposed to change whenever the data\nblocks of a file are being read. This can be costly performance-wise\nwhen an application regularly accesses a very large number of files or\ndirectories. Some Unix filesystems can be mounted with atime updates disabled\nto increase the performance of such applications; USENET news spools are a\ncommon example. On such filesystems this function will be useless.\n@note Note: Note that time resolution may differ from one file system\nto another.\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see filemtime() - Gets file modification time\n@see fileinode() - Gets file inode\n@see date() - Format a local time/date\n
filectime filectime(string $filename) [int]\nGets inode change time of file. Gets the inode change time of a file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: Note: In most Unix filesystems, a file is considered changed\nwhen its inode data is changed; that is, when the permissions, owner, group,\nor other metadata from the inode is updated. See also filemtime() (which\nis what you want to use when you want to create &quot;Last Modified&quot;\nfooters on web pages) and fileatime().\n@note Note: Note also that in some Unix texts the ctime of a file is referred\nto as being the creation time of the file. This is wrong. There is no creation\ntime for Unix files in most Unix filesystems.\n@note Note: Note that time resolution may differ from one file system\nto another.\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see filemtime() - Gets file modification time\n
filegroup filegroup(string $filename) [int]\nGets file group. Gets the file group. The group ID is returned in numerical\nformat, use posix_getgrgid() to resolve it to a group name.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see fileowner() - Gets file owner\n@see posix_getgrgid() - Return info about a group by group id\n@see safe_mode_gid\n
fileinode fileinode(string $filename) [int]\nGets file inode. Gets the file inode.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see getmyinode() - Gets the inode of the current script\n@see stat() - Gives information about a file\n
filemtime filemtime(string $filename) [int]\nGets file modification time. This function returns the time when the data\nblocks of a file were being written to, that is, the time when the content\nof the file was changed.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: Note that time resolution may differ from one file system\nto another.\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see filectime() - Gets inode change time of file\n@see stat() - Gives information about a file\n@see touch() - Sets access and modification time of file\n@see getlastmod() - Gets time of last page modification\n
fileowner fileowner(string $filename) [int]\nGets file owner. Gets the file owner.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see filegroup() - Gets file group\n@see stat() - Gives information about a file\n@see posix_getpwuid() - Return info about a user by user id\n
fileperms fileperms(string $filename) [int]\nGets file permissions. Gets permissions for the given file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see chmod() - Changes file mode\n@see is_readable() - Tells whether a file exists and is readable\n@see stat() - Gives information about a file\n
filepro_fieldcount filepro_fieldcount(void) [int]\nFind out how many fields are in a filePro database. Returns the number of\nfields (columns) in the opened filePro database.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n@see filepro() - Read and verify the map file\n
filepro_fieldname filepro_fieldname(int $field_number) [string]\nGets the name of a field. Returns the name of the field corresponding to\n`field_number`.\n@param field_number The field number.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n
filepro_fieldtype filepro_fieldtype(int $field_number) [string]\nGets the type of a field. Returns the edit type of the field corresponding to\n`field_number`.\n@param field_number The field number.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n
filepro_fieldwidth filepro_fieldwidth(int $field_number) [int]\nGets the width of a field. Returns the width of the field corresponding to\n`field_number`.\n@param field_number The field number.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n
filepro_retrieve filepro_retrieve(int $row_number, int $field_number) [string]\nRetrieves data from a filePro database. Returns the data from the specified\nlocation in the database. Note: When safe mode is enabled, PHP checks\nwhether the files or directories being operated upon have the same UID\n(owner) as the script that is being executed.\n@param row_number The row number. Must be between zero and the total number\nof rows minus one (0..filepro_rowcount() - 1)\n@param field_number The field number. Accepts values between zero and the\ntotal number of fields minus one (0..filepro_fieldcount() - 1)\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n
filepro_rowcount filepro_rowcount(void) [int]\nFind out how many rows are in a filePro database. Returns the number of\nrows in the opened filePro database. Note: When safe mode is enabled, PHP\nchecks whether the files or directories being operated upon have the same UID\n(owner) as the script that is being executed.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n@see filepro() - Read and verify the map file\n
filepro filepro(string $directory) [bool]\nRead and verify the map file. This reads and verifies the map file, storing\nthe field count and info. No locking is done, so you should avoid modifying\nyour filePro database while it may be opened in PHP. Note: When safe mode\nis enabled, PHP checks whether the files or directories being operated upon\nhave the same UID (owner) as the script that is being executed.\n@param directory The map directory.\n@return (PHP 4, PHP 5 &lt;= 5.1.6)\n
filesize filesize(string $filename) [int]\nGets file size. Gets the size for the given file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see file_exists() - Checks whether a file or directory exists\n
filetype filetype(string $filename) [string]\nGets file type. Returns the type of the given file.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The results of this function are cached. See clearstatcache()\nfor more details.\n@see is_dir() - Tells whether the filename is a directory\n@see is_file() - Tells whether the filename is a regular file\n@see is_link() - Tells whether the filename is a symbolic link\n@see file_exists() - Checks whether a file or directory exists\n@see stat() - Gives information about a file\n@see mime_content_type() - Detect MIME Content-type for a file (deprecated)\n
filter_has_var filter_has_var(int $type, string $variable_name) [bool]\nChecks if variable of specified type exists.\n@param type One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER,\nor INPUT_ENV.\n@param variable_name Name of a variable to check.\n@return (PHP 5 >= 5.2.0)\n
filter_id filter_id(string $filtername) [int]\nReturns the filter ID belonging to a named filter.\n@param filtername Name of a filter to get.\n@return (PHP 5 >= 5.2.0)\n@see filter_list() - Returns a list of all supported filters\n
filter_input_array filter_input_array(int $type [, mixed $definition]) [mixed]\nGets external variables and optionally filters them. This function is useful\nfor retrieving many values without repetitively calling filter_input().\n@param type One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER,\nor INPUT_ENV.\n@param definition An array defining the arguments. A valid key is a string\ncontaining a variable name and a valid value is either a filter type, or an\narray optionally specifying the filter, flags and options. If the value is\nan array, valid keys are `filter` which specifies the filter type, `flags`\nwhich specifies any flags that apply to the filter, and `options` which\nspecifies any options that apply to the filter. See the example below for a\nbetter understanding. This parameter can be also an integer holding a filter\nconstant. Then all values in the input array are filtered by this filter.\n@return (PHP 5 >= 5.2.0)\n@note Note: There is no `REQUEST_TIME` key in INPUT_SERVER array because it\nis inserted into the $_SERVER later.\n@see filter_input() - Gets a specific external variable by name and optionally\nfilters it\n@see filter_var_array() - Gets multiple variables and optionally filters them\n@see Types of filters\n
filter_input filter_input(int $type, string $variable_name [, int\n$filter=FILTER_DEFAULT [, mixed $options]]) [mixed]\nGets a specific external variable by name and optionally filters it.\n@param type One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER,\nor INPUT_ENV.\n@param variable_name Name of a variable to get.\n@param filter The ID of the filter to apply. The Types of filters manual\npage lists the available filters.\n@param options Associative array of options or bitwise disjunction of\nflags. If filter accepts options, flags can be provided in &quot;flags&quot;\nfield of array.\n@return (PHP 5 >= 5.2.0)\n@see filter_var() - Filters a variable with a specified filter\n@see filter_input_array() - Gets external variables and optionally filters them\n@see filter_var_array() - Gets multiple variables and optionally filters them\n@see Types of filters\n
filter_list filter_list(void) [array]\nReturns a list of all supported filters.\n@return (PHP 5 >= 5.2.0)\n
filter_var_array filter_var_array(array $data [, mixed $definition]) [mixed]\nGets multiple variables and optionally filters them. This function is useful\nfor retrieving many values without repetitively calling filter_var().\n@param data An array with string keys containing the data to filter.\n@param definition An array defining the arguments. A valid key is a string\ncontaining a variable name and a valid value is either a filter type, or an\narray optionally specifying the filter, flags and options. If the value is\nan array, valid keys are `filter` which specifies the filter type, `flags`\nwhich specifies any flags that apply to the filter, and `options` which\nspecifies any options that apply to the filter. See the example below for a\nbetter understanding. This parameter can be also an integer holding a filter\nconstant. Then all values in the input array are filtered by this filter.\n@return (PHP 5 >= 5.2.0)\n@see filter_input_array() - Gets external variables and optionally filters them\n@see filter_var() - Filters a variable with a specified filter\n@see filter_input() - Gets a specific external variable by name and optionally\nfilters it\n@see Types of filters\n
filter_var filter_var(mixed $variable [, int $filter=FILTER_DEFAULT [,\nmixed $options]]) [mixed]\nFilters a variable with a specified filter.\n@param variable Value to filter.\n@param filter The ID of the filter to apply. The Types of filters manual\npage lists the available filters.\n@return (PHP 5 >= 5.2.0)\n@see filter_var_array() - Gets multiple variables and optionally filters them\n@see filter_input() - Gets a specific external variable by name and optionally\nfilters it\n@see filter_input_array() - Gets external variables and optionally filters them\n@see Types of filters\n@see information about the callback type\n
finfo_buffer finfo_buffer(resource $finfo, string $string=NULL [, int\n$options=FILEINFO_NONE [, resource $context=NULL]]) [string]\nReturn information about a string buffer. Object oriented style\n@param finfo Fileinfo resource returned by finfo_open().\n@param string Content of a file to be checked.\n@param options One or disjunction of more Fileinfo constants.\n@param context\n@return (PHP 5 >= 5.3.0, PECL fileinfo >= 0.1.0)\n@see finfo_file() - Return information about a file\n
finfo_close finfo_close(resource $finfo) [bool]\nClose fileinfo resource. Object oriented style\n@param finfo Fileinfo resource returned by finfo_open().\n@return (PHP >= 5.3.0, PECL fileinfo >= 0.1.0)\n
finfo_file finfo_file(resource $finfo, string $file_name=NULL [, int\n$options=FILEINFO_NONE [, resource $context=NULL]]) [string]\nReturn information about a file. Object oriented style\n@param finfo Fileinfo resource returned by finfo_open().\n@param file_name Name of a file to be checked.\n@param options One or disjunction of more Fileinfo constants.\n@param context For a description of `contexts`, refer to Stream Functions.\n@return (PHP >= 5.3.0, PECL fileinfo >= 0.1.0)\n@see finfo_buffer() - Return information about a string buffer\n
finfo_open finfo_open([int $options=FILEINFO_NONE [, string $magic_file=NULL]])\n[resource]\nCreate a new fileinfo resource. Object oriented style (constructor):\n@param options One or disjunction of more Fileinfo constants.\n@param magic_file Name of a magic database file, usually something like\n/path/to/magic.mime. If not specified, the `MAGIC` environment variable is\nused. If this variable is not set either, /usr/share/misc/magic is used by\ndefault. A `.mime` and/or `.mgc` suffix is added if needed. Passing NULL or\nan empty string will be equivalent to the default value.\n@return (PHP >= 5.3.0, PECL fileinfo >= 0.1.0)\n@see finfo_close() - Close fileinfo resource\n
finfo_set_flags finfo_set_flags(resource $finfo, int $options) [bool]\nSet libmagic configuration options. Object oriented style\n@param finfo Fileinfo resource returned by finfo_open().\n@param options One or disjunction of more Fileinfo constants.\n@return (PHP >= 5.3.0, PECL fileinfo >= 0.1.0)\n
floatval floatval(mixed $var) [float]\nGet float value of a variable. Gets the float value of `var`.\n@param var May be any scalar type. floatval() should not be used on objects,\nas doing so will emit an E_NOTICE level error and return 1.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see intval() - Get the integer value of a variable\n@see strval() - Get string value of a variable\n@see settype() - Set the type of a variable\n@see Type juggling\n
flock flock(resource $handle, int $operation [, int &$wouldblock]) [bool]\nPortable advisory file locking. flock() allows you to perform a simple\nreader/writer model which can be used on virtually every platform (including\nmost Unix derivatives and even Windows). On versions of PHP before 5.3.2,\nthe lock is released also by fclose() (which is also called automatically\nwhen script finished). PHP supports a portable way of locking complete files\nin an advisory way (which means all accessing programs have to use the same\nway of locking or it will not work). By default, this function will block\nuntil the requested lock is acquired; this may be controlled (on non-Windows\nplatforms) with the LOCK_NB option documented below.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param operation `operation` is one of the following: LOCK_SH to acquire a\nshared lock (reader). LOCK_EX to acquire an exclusive lock (writer). LOCK_UN\nto release a lock (shared or exclusive). It is also possible to add LOCK_NB\nas a bitmask to one of the above operations if you don&#039;t want flock()\nto block while locking. (not supported on Windows)\n@param wouldblock The optional third argument is set to TRUE if the lock\nwould block (EWOULDBLOCK errno condition). (not supported on Windows)\n@return (PHP 4, PHP 5)\n@note Note: flock() uses mandatory locking instead of advisory locking on\nWindows. Mandatory locking is also supported on Linux and System V based\noperating systems via the usual mechanism supported by the fcntl() system\ncall: that is, if the file in question has the setgid permission bit set\nand the group execution bit cleared. On Linux, the file system will also\nneed to be mounted with the mand option for this to work.\n@note Note: Because flock() requires a file pointer, you may have to use a\nspecial lock file to protect access to a file that you intend to truncate\nby opening it in write mode (with a &quot;w&quot; or &quot;w+&quot; argument\nto fopen()).\n@note Note: May only be used on file pointers returned by fopen() for local\nfiles, or file pointers pointing to userspace streams that implement the\nstreamWrapper::stream_lock() method.\n
floor floor(float $value) [float]\nRound fractions down.\n@param value The numeric value to round\n@return (PHP 4, PHP 5)\n@see ceil() - Round fractions up\n@see round() - Rounds a float\n
flush flush(void) [void]\nFlush the output buffer. Flushes the write buffers of PHP and whatever backend\nPHP is using (CGI, a web server, etc). This attempts to push current output all\nthe way to the browser with a few caveats. flush() may not be able to override\nthe buffering scheme of your web server and it has no effect on any client-side\nbuffering in the browser. It also doesn&#039;t affect PHP&#039;s userspace\noutput buffering mechanism. This means you will have to call both ob_flush()\nand flush() to flush the ob output buffers if you are using those. Several\nservers, especially on Win32, will still buffer the output from your script\nuntil it terminates before transmitting the results to the browser. Server\nmodules for Apache like mod_gzip may do buffering of their own that will cause\nflush() to not result in data being sent immediately to the client. Even the\nbrowser may buffer its input before displaying it. Netscape, for example,\nbuffers text until it receives an end-of-line or the beginning of a tag,\nand it won&#039;t render tables until the &lt;/table> tag of the outermost\ntable is seen. Some versions of Microsoft Internet Explorer will only start\nto display the page after they have received 256 bytes of output, so you\nmay need to send extra whitespace before flushing to get those browsers to\ndisplay the page.\n@return (PHP 4, PHP 5)\n
fmod fmod(float $x, float $y) [float]\nReturns the floating point remainder (modulo) of the division\n  of the arguments. Returns the floating point remainder of dividing the\n  dividend (`x`) by the divisor (`y`). The reminder (r) is defined as: x =\n  i * y + r, for some integer i. If `y` is non-zero, r has the same sign as\n  `x` and a magnitude less than the magnitude of `y`.\n@param x The dividend\n@param y The divisor\n@return (PHP 4 >= 4.2.0, PHP 5)\n
fnmatch fnmatch(string $pattern, string $string [, int $flags=0]) [bool]\nMatch filename against a pattern. fnmatch() checks if the passed `string`\nwould match the given shell wildcard `pattern`.\n@param pattern The shell wildcard pattern.\n@param string The tested string. This function is especially useful for\nfilenames, but may also be used on regular strings. The average user may be\nused to shell patterns or at least in their simplest form to `&#039;?&#039;`\nand `&#039;*&#039;` wildcards so using fnmatch() instead of preg_match()\nfor frontend search expression input may be way more convenient for\nnon-programming users.\n@param flags The value of `flags` can be any combination of the following\nflags, joined with the binary OR (|) operator. A list of possible\nflags for fnmatch() `Flag` Description FNM_NOESCAPE Disable backslash\nescaping. FNM_PATHNAME Slash in string only matches slash in the given\npattern. FNM_PERIOD Leading period in string must be exactly matched by period\nin the given pattern. FNM_CASEFOLD Caseless match. Part of the GNU extension.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see glob() - Find pathnames matching a pattern\n@see preg_match() - Perform a regular expression match\n@see sscanf() - Parses input from a string according to a format\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n
fopen fopen(string $filename, string $mode [, bool $use_include_path=false\n[, resource $context]]) [resource]\nOpens file or URL. fopen() binds a named resource, specified by `filename`,\nto a stream.\n@return (PHP 4, PHP 5)\n@see Supported Protocols and Wrappers\n@see fclose() - Closes an open file pointer\n@see fgets() - Gets line from file pointer\n@see fread() - Binary-safe file read\n@see fwrite() - Binary-safe file write\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see file() - Reads entire file into an array\n@see file_exists() - Checks whether a file or directory exists\n@see is_readable() - Tells whether a file exists and is readable\n@see stream_set_timeout() - Set timeout period on a stream\n@see popen() - Opens process file pointer\n@see stream_context_create() - Create a streams context\n
forward_static_call_array forward_static_call_array(callback $function,\narray $parameters) [mixed]\nCall a static method and pass the arguments as array. Calls a user defined\nfunction or method given by the `function` parameter. This function must be\ncalled within a method context, it can&#039;t be used outside a class. It\nuses the late static binding. All arguments of the forwarded method are\npassed as values, and as an array, similarly to call_user_func_array().\n@param function The function or method to be called. This parameter may be\nan array, with the name of the class, and the method, or a string, with a\nfunction name.\n@param parameter One parameter, gathering all the method parameter in one\narray. Note: Note that the parameters for forward_static_call_array() are\nnot passed by reference.\n@return (PHP 5 >= 5.3.0)\n@see forward_static_call() - Call a static method\n@see call_user_func() - Call a user function given by the first parameter\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see is_callable() - Verify that the contents of a variable can be called\nas a function\n@see information about the callback type\n
forward_static_call forward_static_call(callback $function [, mixed $parameter\n[, mixed $...]]) [mixed]\nCall a static method. Calls a user defined function or method given by the\n`function` parameter, with the following arguments. This function must be\ncalled within a method context, it can&#039;t be used outside a class. It\nuses the late static binding.\n@param function The function or method to be called. This parameter may be\nan array, with the name of the class, and the method, or a string, with a\nfunction name.\n@param parameter Zero or more parameters to be passed to the function.\n@return (PHP 5 >= 5.3.0)\n@see forward_static_call_array() - Call a static method and pass the arguments\nas array\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see call_user_func() - Call a user function given by the first parameter\n@see is_callable() - Verify that the contents of a variable can be called\nas a function\n@see information about the callback type\n
fpassthru fpassthru(resource $handle) [int]\nOutput all remaining data on a file pointer. Reads to EOF on the given\nfile pointer from the current position and writes the results to the\noutput buffer. You may need to call rewind() to reset the file pointer to\nthe beginning of the file if you have already written data to the file. If\nyou just want to dump the contents of a file to the output buffer, without\nfirst modifying it or seeking to a particular offset, you may want to use\nthe readfile(), which saves you the fopen() call.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@return (PHP 4, PHP 5)\n@note Note: When using fpassthru() on a binary file on Windows systems,\nyou should make sure to open the file in binary mode by appending a `b`\nto the mode used in the call to fopen(). You are encouraged to use the `b`\nflag when dealing with binary files, even if your system does not require it,\nso that your scripts will be more portable.\n@see readfile() - Outputs a file\n@see fopen() - Opens file or URL\n@see popen() - Opens process file pointer\n@see fsockopen() - Open Internet or Unix domain socket connection\n
fprintf fprintf(resource $handle, string $format [, mixed $args [, mixed\n$...]]) [int]\nWrite a formatted string to a stream. Write a string produced according to\n`format` to the stream resource specified by `handle`.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param format See sprintf() for a description of `format`.\n@param args\n@param ...\n@return (PHP 5)\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n@see sscanf() - Parses input from a string according to a format\n@see fscanf() - Parses input from a file according to a format\n@see vsprintf() - Return a formatted string\n@see number_format() - Format a number with grouped thousands\n
fputcsv fputcsv(resource $handle, array $fields [, string\n$delimiter=&#039;,&#039; [, string $enclosure=&#039;&quot;&#039;]]) [int]\nFormat line as CSV and write to file pointer. fputcsv() formats a line\n(passed as a `fields` array) as CSV and write it (terminated by a newline)\nto the specified file `handle`.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen() (and not yet closed by fclose()).\n@param fields An array of values.\n@param delimiter The optional `delimiter` parameter sets the field delimiter\n(one character only).\n@param enclosure The optional `enclosure` parameter sets the field enclosure\n(one character only).\n@return (PHP 5 >= 5.1.0)\n@note Note: If PHP is not properly recognizing the line endings when\nreading files either on or created by a Macintosh computer, enabling the\nauto_detect_line_endings run-time configuration option may help resolve\nthe problem.\n@see fgetcsv() - Gets line from file pointer and parse for CSV fields\n
fputs fputs\nAlias of fwrite.\n
fread fread(resource $handle, int $length) [string]\nBinary-safe file read. fread() reads up to `length` bytes from the file\npointer referenced by `handle`. Reading stops as soon as one of the following\nconditions is met: `length` bytes have been read EOF (end of file) is reached\na packet becomes available or the socket timeout occurs (for network streams)\nif the stream is read buffered and it does not represent a plain file, at\nmost one read of up to a number of bytes equal to the chunk size (usually\n8192) is made; depending on the previously buffered data, the size of the\nreturned data may be larger than the chunk size.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param length Up to `length` number of bytes read.\n@return (PHP 4, PHP 5)\n@note Note: If you just want to get the contents of a file into a string,\nuse file_get_contents() as it has much better performance than the code above.\n@note Note: Note that fread() reads from the current position of the file\npointer. Use ftell() to find the current position of the pointer and rewind()\nto rewind the pointer position.\n@see fwrite() - Binary-safe file write\n@see fopen() - Opens file or URL\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see popen() - Opens process file pointer\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fscanf() - Parses input from a file according to a format\n@see file() - Reads entire file into an array\n@see fpassthru() - Output all remaining data on a file pointer\n@see ftell() - Returns the current position of the file read/write pointer\n@see rewind() - Rewind the position of a file pointer\n
FrenchToJD int frenchtojd ( int $month , int $day , int $year )\nConverts a date from the French Republican Calendar to a Julian Day\nCount. Converts a date from the French Republican Calendar to a Julian Day\nCount. These routines only convert dates in years 1 through 14 (Gregorian\ndates 22 September 1792 through 22 September 1806). This more than covers\nthe period when the calendar was in use.\n@param month The month as a number from 1 (for Vendémiaire) to 13 (for the\nperiod of 5-6 days at the end of each year)\n@param day The day as a number from 1 to 30\n@param year The year as a number between 1 and 14\n@return (PHP 4, PHP 5)\n@see jdtofrench() - Converts a Julian Day Count to the French Republican\nCalendar\n@see cal_to_jd() - Converts from a supported calendar to Julian Day Count\n
fribidi_log2vis fribidi_log2vis(string $str, string $direction, int $charset)\n[string]\nConvert a logical string to a visual one. Converts a logical string to a\nvisual one.\n@param str The logical string.\n@param direction One of FRIBIDI_RTL, FRIBIDI_LTR or FRIBIDI_AUTO.\n@param charset One of the `FRIBIDI_CHARSET_XXX` constants.\n@return (PHP 4 >= 4.0.4 and PHP 4 &lt;= 4.1.0, PECL fribidi >= 1.0)\n
fscanf fscanf(resource $handle, string $format [, mixed &$...]) [mixed]\nParses input from a file according to a format. The function fscanf()\nis similar to sscanf(), but it takes its input from a file associated with\n`handle` and interprets the input according to the specified `format`, which\nis described in the documentation for sprintf(). Any whitespace in the format\nstring matches any whitespace in the input stream. This means that even a tab\n`\t` in the format string can match a single space character in the input\nstream. Each call to fscanf() reads one line from the file.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param format The specified format as described in the sprintf() documentation.\n@param ... The optional assigned values.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see fread() - Binary-safe file read\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see sscanf() - Parses input from a string according to a format\n@see printf() - Output a formatted string\n@see sprintf() - Return a formatted string\n
fseek fseek(resource $handle, int $offset [, int $whence=SEEK_SET]) [int]\nSeeks on a file pointer. Sets the file position indicator for the file\nreferenced by `handle`. The new position, measured in bytes from the beginning\nof the file, is obtained by adding `offset` to the position specified by\n`whence`. In general, it is allowed to seek past the end-of-file; if data\nis then written, reads in any unwritten region between the end-of-file and\nthe sought position will yield bytes with value 0. However, certain streams\nmay not support this behavior, especially when they have an underlying fixed\nsize storage.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param offset The offset. To move to a position before the end-of-file,\nyou need to pass a negative value in `offset` and set `whence` to SEEK_END.\n@param whence `whence` values are: SEEK_SET - Set position equal to `offset`\nbytes. SEEK_CUR - Set position to current location plus `offset`. SEEK_END -\nSet position to end-of-file plus `offset`.\n@return (PHP 4, PHP 5)\n@note Note: If you have opened the file in append (`a` or `a+`) mode, any\ndata you write to the file will always be appended, regardless of the file\nposition, and the result of calling fseek() will be undefined.\n@note Note: Not all streams support seeking. For those that do not support\nseeking, forward seeking from the current position is accomplished by reading\nand discarding data; other forms of seeking will fail.\n@see ftell() - Returns the current position of the file read/write pointer\n@see rewind() - Rewind the position of a file pointer\n
fsockopen fsockopen(string $hostname [, int $port=-1 [, int &$errno [, string\n&$errstr [, float $timeout=ini_get(&quot;default_socket_timeout&quot;)]]]])\n[resource]\nOpen Internet or Unix domain socket connection. Initiates a socket connection\nto the resource specified by `hostname`. PHP supports targets in the Internet\nand Unix domains as described in List of Supported Socket Transports. A list of\nsupported transports can also be retrieved using stream_get_transports(). The\nsocket will by default be opened in blocking mode. You can switch it to\nnon-blocking mode by using stream_set_blocking().\n@param hostname If OpenSSL support is installed, you may prefix the `hostname`\nwith either `ssl://` or `tls://` to use an SSL or TLS client connection over\nTCP/IP to connect to the remote host.\n@param port The port number.\n@param errno If provided, holds the system level error number that occurred\nin the system-level `connect()` call. If the value returned in `errno` is\n`0` and the function returned FALSE, it is an indication that the error\noccurred before the `connect()` call. This is most likely due to a problem\ninitializing the socket.\n@param errstr The error message as a string.\n@param timeout The connection timeout, in seconds. Note: If you need to set a\ntimeout for reading/writing data over the socket, use stream_set_timeout(),\nas the `timeout` parameter to fsockopen() only applies while connecting\nthe socket.\n@return (PHP 4, PHP 5)\n@note Note: Depending on the environment, the Unix domain or the optional\nconnect timeout may not be available.\n@see pfsockopen() - Open persistent Internet or Unix domain socket connection\n@see stream_set_blocking() - Set blocking/non-blocking mode on a stream\n@see stream_set_timeout() - Set timeout period on a stream\n@see fgets() - Gets line from file pointer\n@see fgetss() - Gets line from file pointer and strip HTML tags\n@see fwrite() - Binary-safe file write\n@see fclose() - Closes an open file pointer\n@see feof() - Tests for end-of-file on a file pointer\n@see The Curl extension\n
fstat fstat(resource $handle) [array]\nGets information about a file using an open file pointer. Gathers the\nstatistics of the file opened by the file pointer `handle`. This function\nis similar to the stat() function except that it operates on an open file\npointer instead of a filename.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@return (PHP 4, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n
ftell ftell(resource $handle) [int]\nReturns the current position of the file read/write pointer. Returns the\nposition of the file pointer referenced by `handle`.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or popen(). ftell() gives undefined results\nfor append-only streams (opened with &quot;a&quot; flag).\n@return (PHP 4, PHP 5)\n@see fopen() - Opens file or URL\n@see popen() - Opens process file pointer\n@see fseek() - Seeks on a file pointer\n@see rewind() - Rewind the position of a file pointer\n
ftok ftok(string $pathname, string $proj) [int]\nConvert a pathname and a project identifier to a System V IPC key. The\nfunction converts the `pathname` of an existing accessible file and a project\nidentifier into an `integer` for use with for example shmop_open() and other\nSystem V IPC keys.\n@param pathname Path to an accessible file.\n@param proj Project identifier. This must be a one character string.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see shmop_open() - Create or open shared memory block\n@see sem_get() - Get a semaphore id\n
ftp_alloc ftp_alloc(resource $ftp_stream, int $filesize [, string &$result])\n[bool]\nAllocates space for a file to be uploaded. Sends an `ALLO` command to the\nremote FTP server to allocate space for a file to be uploaded. Note: Many FTP\nservers do not support this command. These servers may return a failure code\n(FALSE) indicating the command is not supported or a success code (TRUE) to\nindicate that pre-allocation is not necessary and the client should continue\nas though the operation were successful. Because of this, it may be best to\nreserve this function for servers which explicitly require preallocation.\n@param ftp_stream The link identifier of the FTP connection.\n@param filesize The number of bytes to allocate.\n@param result A textual representation of the servers response will be\nreturned by reference in `result` if a variable is provided.\n@return (PHP 5)\n@see ftp_put() - Uploads a file to the FTP server\n@see ftp_fput() - Uploads from an open file to the FTP server\n
ftp_cdup ftp_cdup(resource $ftp_stream) [bool]\nChanges to the parent directory. Changes to the parent directory.\n@param ftp_stream The link identifier of the FTP connection.\n@return (PHP 4, PHP 5)\n@see ftp_chdir() - Changes the current directory on a FTP server\n@see ftp_pwd() - Returns the current directory name\n
ftp_chdir ftp_chdir(resource $ftp_stream, string $directory) [bool]\nChanges the current directory on a FTP server. Changes the current directory\nto the specified one.\n@param ftp_stream The link identifier of the FTP connection.\n@param directory The target directory.\n@return (PHP 4, PHP 5)\n@see ftp_cdup() - Changes to the parent directory\n@see ftp_pwd() - Returns the current directory name\n
ftp_chmod ftp_chmod(resource $ftp_stream, int $mode, string $filename) [int]\nSet permissions on a file via FTP. Sets the permissions on the specified\nremote file to `mode`.\n@param ftp_stream The link identifier of the FTP connection.\n@param mode The new permissions, given as an octal value.\n@param filename The remote file.\n@return (PHP 5)\n@see chmod() - Changes file mode\n
ftp_close ftp_close(resource $ftp_stream) [bool]\nCloses an FTP connection. ftp_close() closes the given link identifier and\nreleases the resource. Note: After calling this function, you can no longer\nuse the FTP connection and must create a new one with ftp_connect().\n@param ftp_stream The link identifier of the FTP connection.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ftp_connect() - Opens an FTP connection\n
ftp_connect ftp_connect(string $host [, int $port=21 [, int $timeout=90]])\n[resource]\nOpens an FTP connection. ftp_connect() opens an FTP connection to the specified\n`host`.\n@param host The FTP server address. This parameter shouldn&#039;t have any\ntrailing slashes and shouldn&#039;t be prefixed with `ftp://`.\n@param port This parameter specifies an alternate port to connect to. If it\nis omitted or set to zero, then the default FTP port, 21, will be used.\n@param timeout This parameter specifies the timeout for all subsequent network\noperations. If omitted, the default value is 90 seconds. The timeout can be\nchanged and queried at any time with ftp_set_option() and ftp_get_option().\n@return (PHP 4, PHP 5)\n@see ftp_close() - Closes an FTP connection\n@see ftp_ssl_connect() - Opens an Secure SSL-FTP connection\n
ftp_delete ftp_delete(resource $ftp_stream, string $path) [bool]\nDeletes a file on the FTP server. ftp_delete() deletes the file specified by\n`path` from the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param path The file to delete.\n@return (PHP 4, PHP 5)\n
ftp_exec ftp_exec(resource $ftp_stream, string $command) [bool]\nRequests execution of a command on the FTP server. Sends a SITE EXEC `command`\nrequest to the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param command The command to execute.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see ftp_raw() - Sends an arbitrary command to an FTP server\n
ftp_fget ftp_fget(resource $ftp_stream, resource $handle, string $remote_file,\nint $mode [, int $resumepos=0]) [bool]\nDownloads a file from the FTP server and saves to an open file. ftp_fget()\nretrieves `remote_file` from the FTP server, and writes it to the given\nfile pointer.\n@param ftp_stream The link identifier of the FTP connection.\n@param handle An open file pointer in which we store the data.\n@param remote_file The remote file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param resumepos The position in the remote file to start downloading from.\n@return (PHP 4, PHP 5)\n@see ftp_get() - Downloads a file from the FTP server\n@see ftp_nb_get() - Retrieves a file from the FTP server and writes it to\na local file (non-blocking)\n@see ftp_nb_fget() - Retrieves a file from the FTP server and writes it to\nan open file (non-blocking)\n
ftp_fput ftp_fput(resource $ftp_stream, string $remote_file, resource $handle,\nint $mode [, int $startpos=0]) [bool]\nUploads from an open file to the FTP server. ftp_fput() uploads the data\nfrom a file pointer to a remote file on the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The remote file path.\n@param handle An open file pointer on the local file. Reading stops at end\nof file.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param startpos The position in the remote file to start uploading to.\n@return (PHP 4, PHP 5)\n@see ftp_put() - Uploads a file to the FTP server\n@see ftp_nb_fput() - Stores a file from an open file to the FTP server\n(non-blocking)\n@see ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n
ftp_get_option ftp_get_option(resource $ftp_stream, int $option) [mixed]\nRetrieves various runtime behaviours of the current FTP stream. This function\nreturns the value for the requested `option` from the specified FTP connection.\n@param ftp_stream The link identifier of the FTP connection.\n@param option Currently, the following options are supported: Supported\nruntime FTP options FTP_TIMEOUT_SEC Returns the current timeout used for\nnetwork related operations. FTP_AUTOSEEK Returns TRUE if this option is on,\nFALSE otherwise.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ftp_set_option() - Set miscellaneous runtime FTP options\n
ftp_get ftp_get(resource $ftp_stream, string $local_file, string $remote_file,\nint $mode [, int $resumepos=0]) [bool]\nDownloads a file from the FTP server. ftp_get() retrieves a remote file from\nthe FTP server, and saves it into a local file.\n@param ftp_stream The link identifier of the FTP connection.\n@param local_file The local file path (will be overwritten if the file\nalready exists).\n@param remote_file The remote file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param resumepos The position in the remote file to start downloading from.\n@return (PHP 4, PHP 5)\n@see ftp_pasv() - Turns passive mode on or off\n@see ftp_fget() - Downloads a file from the FTP server and saves to an\nopen file\n@see ftp_nb_get() - Retrieves a file from the FTP server and writes it to\na local file (non-blocking)\n@see ftp_nb_fget() - Retrieves a file from the FTP server and writes it to\nan open file (non-blocking)\n
ftp_login ftp_login(resource $ftp_stream, string $username, string $password)\n[bool]\nLogs in to an FTP connection. Logs in to the given FTP stream.\n@param ftp_stream The link identifier of the FTP connection.\n@param username The username (`USER`).\n@param password The password (`PASS`).\n@return (PHP 4, PHP 5)\n
ftp_mdtm ftp_mdtm(resource $ftp_stream, string $remote_file) [int]\nReturns the last modified time of the given file. ftp_mdtm() gets the\nlast modified time for a remote file. Note: Not all servers support this\nfeature! Note: ftp_mdtm() does not work with directories.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The file from which to extract the last modification time.\n@return (PHP 4, PHP 5)\n
ftp_mkdir ftp_mkdir(resource $ftp_stream, string $directory) [string]\nCreates a directory. Creates the specified `directory` on the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param directory The name of the directory that will be created.\n@return (PHP 4, PHP 5)\n@see ftp_rmdir() - Removes a directory\n
ftp_nb_continue ftp_nb_continue(resource $ftp_stream) [int]\nContinues retrieving/sending a file (non-blocking). Continues\nretrieving/sending a file non-blocking.\n@param ftp_stream The link identifier of the FTP connection.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
ftp_nb_fget ftp_nb_fget(resource $ftp_stream, resource $handle, string\n$remote_file, int $mode [, int $resumepos=0]) [int]\nRetrieves a file from the FTP server and writes it to an open file\n(non-blocking). ftp_nb_fget() retrieves a remote file from the FTP server. The\ndifference between this function and ftp_fget() is that this function retrieves\nthe file asynchronously, so your program can perform other operations while\nthe file is being downloaded.\n@param ftp_stream The link identifier of the FTP connection.\n@param handle An open file pointer in which we store the data.\n@param remote_file The remote file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param resumepos The position in the remote file to start downloading from.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ftp_nb_get() - Retrieves a file from the FTP server and writes it to\na local file (non-blocking)\n@see ftp_nb_continue() - Continues retrieving/sending a file (non-blocking)\n@see ftp_fget() - Downloads a file from the FTP server and saves to an\nopen file\n@see ftp_get() - Downloads a file from the FTP server\n
ftp_nb_fput ftp_nb_fput(resource $ftp_stream, string $remote_file, resource\n$handle, int $mode [, int $startpos=0]) [int]\nStores a file from an open file to the FTP server (non-blocking). ftp_nb_fput()\nuploads the data from a file pointer to a remote file on the FTP server. The\ndifference between this function and the ftp_fput() is that this function\nuploads the file asynchronously, so your program can perform other operations\nwhile the file is being uploaded.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The remote file path.\n@param handle An open file pointer on the local file. Reading stops at end\nof file.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param startpos The position in the remote file to start uploading to.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n@see ftp_nb_continue() - Continues retrieving/sending a file (non-blocking)\n@see ftp_put() - Uploads a file to the FTP server\n@see ftp_fput() - Uploads from an open file to the FTP server\n
ftp_nb_get ftp_nb_get(resource $ftp_stream, string $local_file, string\n$remote_file, int $mode [, int $resumepos=0]) [int]\nRetrieves a file from the FTP server and writes it to a local file\n(non-blocking). ftp_nb_get() retrieves a remote file from the FTP server,\nand saves it into a local file. The difference between this function and\nftp_get() is that this function retrieves the file asynchronously, so your\nprogram can perform other operations while the file is being downloaded.\n@param ftp_stream The link identifier of the FTP connection.\n@param local_file The local file path (will be overwritten if the file\nalready exists).\n@param remote_file The remote file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param resumepos The position in the remote file to start downloading from.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ftp_nb_fget() - Retrieves a file from the FTP server and writes it to\nan open file (non-blocking)\n@see ftp_nb_continue() - Continues retrieving/sending a file (non-blocking)\n@see ftp_fget() - Downloads a file from the FTP server and saves to an\nopen file\n@see ftp_get() - Downloads a file from the FTP server\n
ftp_nb_put ftp_nb_put(resource $ftp_stream, string $remote_file, string\n$local_file, int $mode [, int $startpos=0]) [int]\nStores a file on the FTP server (non-blocking). ftp_nb_put() stores a local\nfile on the FTP server. The difference between this function and the ftp_put()\nis that this function uploads the file asynchronously, so your program can\nperform other operations while the file is being uploaded.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The remote file path.\n@param local_file The local file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param startpos The position in the remote file to start uploading to.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ftp_nb_fput() - Stores a file from an open file to the FTP server\n(non-blocking)\n@see ftp_nb_continue() - Continues retrieving/sending a file (non-blocking)\n@see ftp_put() - Uploads a file to the FTP server\n@see ftp_fput() - Uploads from an open file to the FTP server\n
ftp_nlist ftp_nlist(resource $ftp_stream, string $directory) [array]\nReturns a list of files in the given directory.\n@param ftp_stream The link identifier of the FTP connection.\n@param directory The directory to be listed. This parameter can also include\narguments, eg. ftp_nlist($conn_id, &quot;-la /your/dir&quot;); Note that\nthis parameter isn&#039;t escaped so there may be some issues with filenames\ncontaining spaces and other characters.\n@return (PHP 4, PHP 5)\n@see ftp_rawlist() - Returns a detailed list of files in the given directory\n
ftp_pasv ftp_pasv(resource $ftp_stream, bool $pasv) [bool]\nTurns passive mode on or off. ftp_pasv() turns on or off passive mode. In\npassive mode, data connections are initiated by the client, rather than by\nthe server. It may be needed if the client is behind firewall. Please note\nthat ftp_pasv() can only be called after a successfull login or otherwise\nit will fail.\n@param ftp_stream The link identifier of the FTP connection.\n@param pasv If TRUE, the passive mode is turned on, else it&#039;s turned off.\n@return (PHP 4, PHP 5)\n
ftp_put ftp_put(resource $ftp_stream, string $remote_file, string $local_file,\nint $mode [, int $startpos=0]) [bool]\nUploads a file to the FTP server. ftp_put() stores a local file on the\nFTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The remote file path.\n@param local_file The local file path.\n@param mode The transfer mode. Must be either FTP_ASCII or FTP_BINARY.\n@param startpos The position in the remote file to start uploading to.\n@return (PHP 4, PHP 5)\n@see ftp_pasv() - Turns passive mode on or off\n@see ftp_fput() - Uploads from an open file to the FTP server\n@see ftp_nb_fput() - Stores a file from an open file to the FTP server\n(non-blocking)\n@see ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n
ftp_pwd ftp_pwd(resource $ftp_stream) [string]\nReturns the current directory name.\n@param ftp_stream The link identifier of the FTP connection.\n@return (PHP 4, PHP 5)\n@see ftp_chdir() - Changes the current directory on a FTP server\n@see ftp_cdup() - Changes to the parent directory\n
ftp_quit ftp_quit\nAlias of ftp_close.\n
ftp_raw ftp_raw(resource $ftp_stream, string $command) [array]\nSends an arbitrary command to an FTP server. Sends an arbitrary `command`\nto the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param command The command to execute.\n@return (PHP 5)\n@see ftp_exec() - Requests execution of a command on the FTP server\n
ftp_rawlist ftp_rawlist(resource $ftp_stream, string $directory [, bool\n$recursive=false]) [array]\nReturns a detailed list of files in the given directory. ftp_rawlist()\nexecutes the FTP LIST command, and returns the result as an array.\n@param ftp_stream The link identifier of the FTP connection.\n@param directory The directory path.\n@param recursive If set to TRUE, the issued command will be LIST -R.\n@return (PHP 4, PHP 5)\n@see ftp_nlist() - Returns a list of files in the given directory\n
ftp_rename ftp_rename(resource $ftp_stream, string $oldname, string $newname)\n[bool]\nRenames a file or a directory on the FTP server. ftp_rename() renames a file\nor a directory on the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param oldname The old file/directory name.\n@param newname The new name.\n@return (PHP 4, PHP 5)\n
ftp_rmdir ftp_rmdir(resource $ftp_stream, string $directory) [bool]\nRemoves a directory. Removes the specified `directory` on the FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@param directory The directory to delete. This must be either an absolute\nor relative path to an empty directory.\n@return (PHP 4, PHP 5)\n@see ftp_mkdir() - Creates a directory\n
ftp_set_option ftp_set_option(resource $ftp_stream, int $option, mixed $value)\n[bool]\nSet miscellaneous runtime FTP options. This function controls various runtime\noptions for the specified FTP stream.\n@param ftp_stream The link identifier of the FTP connection.\n@param option Currently, the following options are supported: Supported\nruntime FTP options FTP_TIMEOUT_SEC Changes the timeout in seconds used for\nall network related functions. `value` must be an integer that is greater\nthan 0. The default timeout is 90 seconds. FTP_AUTOSEEK When enabled, GET\nor PUT requests with a `resumepos` or `startpos` parameter will first seek\nto the requested position within the file. This is enabled by default.\n@param value This parameter depends on which `option` is chosen to be altered.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ftp_get_option() - Retrieves various runtime behaviours of the current\nFTP stream\n
ftp_site ftp_site(resource $ftp_stream, string $command) [bool]\nSends a SITE command to the server. ftp_site() sends the given `SITE` command\nto the FTP server. `SITE` commands are not standardized, and vary from server\nto server. They are useful for handling such things as file permissions and\ngroup membership.\n@param ftp_stream The link identifier of the FTP connection.\n@param command The SITE command. Note that this parameter isn&#039;t escaped so\nthere may be some issues with filenames containing spaces and other characters.\n@return (PHP 4, PHP 5)\n@see ftp_raw() - Sends an arbitrary command to an FTP server\n
ftp_size ftp_size(resource $ftp_stream, string $remote_file) [int]\nReturns the size of the given file. ftp_size() returns the size of the given\nfile in bytes. Note: Not all servers support this feature.\n@param ftp_stream The link identifier of the FTP connection.\n@param remote_file The remote file.\n@return (PHP 4, PHP 5)\n@see ftp_rawlist() - Returns a detailed list of files in the given directory\n
ftp_ssl_connect ftp_ssl_connect(string $host [, int $port=21 [, int\n$timeout=90]]) [resource]\nOpens an Secure SSL-FTP connection. ftp_ssl_connect() opens an explicit\nSSL-FTP connection to the specified `host`. Note: Why this function may not\nexist ftp_ssl_connect() is only available if both the ftp module and the\nOpenSSL support is built statically into php, this means that on Windows\nthis function will be undefined in the official PHP builds. To make this\nfunction available on Windows you must compile your own PHP binaries. Note:\nftp_ssl_connect() is not intended for use with sFTP. To use sFTP with PHP,\nplease see ssh2_sftp().\n@param host The FTP server address. This parameter shouldn&#039;t have any\ntrailing slashes and shouldn&#039;t be prefixed with `ftp://`.\n@param port This parameter specifies an alternate port to connect to. If it\nis omitted or set to zero, then the default FTP port, 21, will be used.\n@param timeout This parameter specifies the timeout for all subsequent network\noperations. If omitted, the default value is 90 seconds. The timeout can be\nchanged and queried at any time with ftp_set_option() and ftp_get_option().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see ftp_connect() - Opens an FTP connection\n
ftp_systype ftp_systype(resource $ftp_stream) [string]\nReturns the system type identifier of the remote FTP server. Returns the\nsystem type identifier of the remote FTP server.\n@param ftp_stream The link identifier of the FTP connection.\n@return (PHP 4, PHP 5)\n
ftruncate ftruncate(resource $handle, int $size) [bool]\nTruncates a file to a given length. Takes the filepointer, `handle`, and\ntruncates the file to length, `size`.\n@param handle The file pointer. Note: The `handle` must be open for writing.\n@param size The size to truncate to. Note: If `size` is larger than the\nfile then the file is extended with null bytes. If `size` is smaller than\nthe file then the file is truncated to that size.\n@return (PHP 4, PHP 5)\n@note Note: The file pointer is not changed.\n@see fopen() - Opens file or URL\n@see fseek() - Seeks on a file pointer\n
func_get_arg func_get_arg(int $arg_num) [mixed]\nReturn an item from the argument list. Gets the specified argument from a\nuser-defined function&#039;s argument list. This function may be used in\nconjunction with func_get_args() and func_num_args() to allow user-defined\nfunctions to accept variable-length argument lists.\n@param arg_num The argument offset. Function arguments are counted starting\nfrom zero.\n@return (PHP 4, PHP 5)\n@note Note: Because this function depends on the current scope to determine\nparameter details, it cannot be used as a function parameter in versions\nprior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n@note Note: This function returns a copy of the passed arguments only,\nand does not account for default (non-passed) arguments.\n@see func_get_args() - Returns an array comprising a function's argument list\n@see func_num_args() - Returns the number of arguments passed to the function\n
func_get_args func_get_args(void) [array]\nReturns an array comprising a function's argument list. Gets an array of\nthe function&#039;s argument list. This function may be used in conjunction\nwith func_get_arg() and func_num_args() to allow user-defined functions to\naccept variable-length argument lists.\n@return (PHP 4, PHP 5)\n@note Note: Because this function depends on the current scope to determine\nparameter details, it cannot be used as a function parameter in versions\nprior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n@note Note: This function returns a copy of the passed arguments only,\nand does not account for default (non-passed) arguments.\n@see func_get_arg() - Return an item from the argument list\n@see func_num_args() - Returns the number of arguments passed to the function\n
func_num_args func_num_args(void) [int]\nReturns the number of arguments passed to the function. Gets the number of\narguments passed to the function. This function may be used in conjunction\nwith func_get_arg() and func_get_args() to allow user-defined functions to\naccept variable-length argument lists.\n@return (PHP 4, PHP 5)\n@note Note: Because this function depends on the current scope to determine\nparameter details, it cannot be used as a function parameter in versions\nprior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n@see func_get_arg() - Return an item from the argument list\n@see func_get_args() - Returns an array comprising a function's argument list\n
function_exists function_exists(string $function_name) [bool]\nReturn TRUE if the given function has been defined. Checks the list of defined\nfunctions, both built-in (internal) and user-defined, for `function_name`.\n@param function_name The function name, as a string.\n@return (PHP 4, PHP 5)\n@note Note: A function name may exist even if the function itself is unusable\ndue to configuration or compiling options (with the image functions being\nan example).\n@see method_exists() - Checks if the class method exists\n@see is_callable() - Verify that the contents of a variable can be called\nas a function\n@see get_defined_functions() - Returns an array of all defined functions\n@see class_exists() - Checks if the class has been defined\n
fwrite fwrite(resource $handle, string $string [, int $length]) [int]\nBinary-safe file write.\n@param handle A file system pointer resource that is typically created\nusing fopen().\n@param string The string that is to be written.\n@param length If the `length` argument is given, writing will stop after\n`length` bytes have been written or the end of `string` is reached,\nwhichever comes first. Note that if the `length` argument is given, then\nthe magic_quotes_runtime configuration option will be ignored and no slashes\nwill be stripped from `string`.\n@return (PHP 4, PHP 5)\n@see fread() - Binary-safe file read\n@see fopen() - Opens file or URL\n@see fsockopen() - Open Internet or Unix domain socket connection\n@see popen() - Opens process file pointer\n@see file_get_contents() - Reads entire file into a string\n
gc_collect_cycles gc_collect_cycles(void) [int]\nForces collection of any existing garbage cycles.\n@return (PHP 5 >= 5.3.0)\n
gc_disable gc_disable(void) [void]\nDeactivates the circular reference collector.\n@return (PHP 5 >= 5.3.0)\n
gc_enable gc_enable(void) [void]\nActivates the circular reference collector.\n@return (PHP 5 >= 5.3.0)\n
expm1 expm1(float $arg) [float]\nReturns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero. expm1() returns the equivalent\n   to &#039;exp(`arg`) - 1&#039; computed in a way that is accurate even if\n   the value of `arg` is near zero, a case where &#039;exp (`arg`) - 1&#039;\n   would be inaccurate due to subtraction of two numbers that are nearly equal.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see log1p() - Returns log(1 + number), computed in a way that is accurate\neven when the value of number is close to zero\n@see exp() - Calculates the exponent of e\n
extension_loaded extension_loaded(string $name) [bool]\nFind out whether an extension is loaded. Finds out whether the extension\nis loaded.\n@return (PHP 4, PHP 5)\n@see get_loaded_extensions() - Returns an array with the names of all modules\ncompiled and loaded\n@see get_extension_funcs() - Returns an array with the names of the functions\nof a module\n@see phpinfo() - Outputs information about PHP's configuration\n@see dl() - Loads a PHP extension at runtime\n
extract extract(array $var_array [, int $extract_type=EXTR_OVERWRITE [,\nstring $prefix]]) [int]\nImport variables into the current symbol table from an array. Import variables\nfrom an array into the current symbol table. Checks each key to see whether\nit has a valid variable name. It also checks for collisions with existing\nvariables in the symbol table.\n@param var_array An associative array. This function treats keys as variable\nnames and values as variable values. For each key/value pair it will create a\nvariable in the current symbol table, subject to `extract_type` and `prefix`\nparameters. You must use an associative array; a numerically indexed array\nwill not produce results unless you use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.\n@param extract_type The way invalid/numeric keys and collisions are treated\nis determined by the `extract_type`. It can be one of the following values:\nEXTR_OVERWRITE If there is a collision, overwrite the existing variable.\n@param EXTR_SKIP If there is a collision, don&#039;t overwrite the existing\nvariable.\n@param EXTR_PREFIX_SAME If there is a collision, prefix the variable name with\n`prefix`.\n@param EXTR_PREFIX_ALL Prefix all variable names with `prefix`.\n@param EXTR_PREFIX_INVALID Only prefix invalid/numeric variable names with\n`prefix`.\n@param EXTR_IF_EXISTS Only overwrite the variable if it already exists in\nthe current symbol table, otherwise do nothing. This is useful for defining\na list of valid variables and then extracting only those variables you have\ndefined out of $_REQUEST, for example.\n@param EXTR_PREFIX_IF_EXISTS Only create prefixed variable names if the\nnon-prefixed version of the same variable exists in the current symbol table.\n@param EXTR_REFS Extracts variables as references. This effectively means\nthat the values of the imported variables are still referencing the values\nof the `var_array` parameter. You can use this flag on its own or combine\nit with any other flag by OR&#039;ing the `extract_type`.\n@param prefix Note that `prefix` is only required if `extract_type`\nis EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or\nEXTR_PREFIX_IF_EXISTS. If the prefixed result is not a valid variable name,\nit is not imported into the symbol table. Prefixes are automatically separated\nfrom the array key by an underscore character.\n@return (PHP 4, PHP 5)\n@see compact() - Create array containing variables and their values\n
ezmlm_hash ezmlm_hash(string $addr) [int]\nCalculate the hash value needed by EZMLM.\n@param addr The email address that&#039;s being hashed.\n@return (PHP 4 >= 4.0.2, PHP 5)\n
fam_cancel_monitor fam_cancel_monitor(resource $fam, resource $fam_monitor)\n[bool]\nTerminate monitoring. Terminates monitoring on a resource. In addition an\nFAMAcknowledge event occurs.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param fam_monitor A resource returned by one of the `fam_monitor_XXX`\nfunctions\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_monitor_file() - Monitor a regular file for changes\n@see fam_monitor_directory() - Monitor a directory for changes\n@see fam_monitor_collection() - Monitor a collection of files in a directory\nfor changes\n@see fam_suspend_monitor() - Temporarily suspend monitoring\n
fam_close fam_close(resource $fam) [void]\nClose FAM connection. Closes a connection to the FAM service.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_monitor_open()\n
fam_monitor_collection fam_monitor_collection(resource $fam, string $dirname,\nint $depth, string $mask) [resource]\nMonitor a collection of files in a directory for changes. Requests monitoring\nfor a collection of files within a directory. A FAM event will be generated\nwhenever the status of the files change. The possible event codes are\ndescribed in detail in the constants part of this section.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param dirname Directory path to the monitored files\n@param depth The maximum search `depth` starting from this directory\n@param mask A shell pattern `mask` restricting the file names to look for\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_monitor_file() - Monitor a regular file for changes\n@see fam_monitor_directory() - Monitor a directory for changes\n@see fam_cancel_monitor() - Terminate monitoring\n@see fam_suspend_monitor() - Temporarily suspend monitoring\n@see fam_resume_monitor() - Resume suspended monitoring\n
fam_monitor_directory fam_monitor_directory(resource $fam, string $dirname)\n[resource]\nMonitor a directory for changes. Requests monitoring for a directory and\nall contained files. A FAM event will be generated whenever the status of\nthe directory (i.e. the result of function stat() on that directory) or its\ncontent (i.e. the results of readdir()) changes. The possible event codes\nare described in detail in the constants part of this section.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param dirname Path to the monitored directory\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_monitor_file() - Monitor a regular file for changes\n@see fam_monitor_collection() - Monitor a collection of files in a directory\nfor changes\n@see fam_cancel_monitor() - Terminate monitoring\n@see fam_suspend_monitor() - Temporarily suspend monitoring\n@see fam_resume_monitor() - Resume suspended monitoring\n
fam_monitor_file fam_monitor_file(resource $fam, string $filename) [resource]\nMonitor a regular file for changes. Requests monitoring for a single file. A\nFAM event will be generated whenever the file status changes (i.e. the result\nof function stat() on that file). The possible event codes are described in\ndetail in the constants part of this section.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param filename Path to the monitored file\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_monitor_directory() - Monitor a directory for changes\n@see fam_monitor_collection() - Monitor a collection of files in a directory\nfor changes\n@see fam_cancel_monitor() - Terminate monitoring\n@see fam_suspend_monitor() - Temporarily suspend monitoring\n@see fam_resume_monitor() - Resume suspended monitoring\n
fam_next_event fam_next_event(resource $fam) [array]\nGet next pending FAM event. Returns the next pending FAM event. The\nfunction will block until an event is available which can be checked for\nusing fam_pending().\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_pending() - Check for pending FAM events\n
fam_open fam_open([string $appname]) [resource]\nOpen connection to FAM daemon. Opens a connection to the FAM service daemon.\n@param appname A string identifying the application for logging reasons\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_close() - Close FAM connection\n
fam_pending fam_pending(resource $fam) [int]\nCheck for pending FAM events. Checks for pending FAM events.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_next_event() - Get next pending FAM event\n
fam_resume_monitor fam_resume_monitor(resource $fam, resource $fam_monitor)\n[bool]\nResume suspended monitoring. Resumes monitoring of a resource previously\nsuspended using fam_suspend_monitor().\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param fam_monitor A resource returned by one of the `fam_monitor_XXX`\nfunctions\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_suspend_monitor() - Temporarily suspend monitoring\n
fam_suspend_monitor fam_suspend_monitor(resource $fam, resource $fam_monitor)\n[bool]\nTemporarily suspend monitoring. fam_suspend_monitor() temporarily\nsuspend monitoring of a resource. Monitoring can later be continued using\nfam_resume_monitor() without the need of requesting a complete new monitor.\n@param fam A resource representing a connection to the FAM service returned\nby fam_open()\n@param fam_monitor A resource returned by one of the `fam_monitor_XXX`\nfunctions\n@return (PHP 5 &lt;= 5.0.5)\n@see fam_cancel_monitor() - Terminate monitoring\n@see fam_resume_monitor() - Resume suspended monitoring\n
fbsql_affected_rows fbsql_affected_rows([resource $link_identifier]) [int]\nGet number of affected rows in previous FrontBase\noperation. fbsql_affected_rows() returns the number of rows affected by the\nlast INSERT, UPDATE or DELETE query associated with `link_identifier`. Note:\nIf you are using transactions, you need to call fbsql_affected_rows() after\nyour INSERT, UPDATE, or DELETE query, not after the commit. If the last query\nwas a DELETE query with no WHERE clause, all of the records will have been\ndeleted from the table but this function will return zero. Note: When using\nUPDATE, FrontBase will not update columns where the new value is the same\nas the old value. This creates the possibility that fbsql_affected_rows()\nmay not actually equal the number of rows matched, only the number of rows\nthat were literally affected by the query.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_num_rows() - Get number of rows in result\n
fbsql_autocommit fbsql_autocommit(resource $link_identifier [, bool $OnOff])\n[bool]\nEnable or disable autocommit. Returns the current autocommit status.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param OnOff If this optional parameter is given the auto commit status\nwill be changed. With `OnOff` set to TRUE each statement will be committed\nautomatically, if no errors was found. With OnOff set to FALSE the user\nmust commit or rollback the transaction using either fbsql_commit() or\nfbsql_rollback().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_commit() - Commits a transaction to the database\n@see fbsql_rollback() - Rollback a transaction to the database\n
fbsql_blob_size fbsql_blob_size(string $blob_handle [, resource\n$link_identifier]) [int]\nGet the size of a BLOB. Returns the size of the given BLOB.\n@param blob_handle A BLOB handle, returned by fbsql_create_blob().\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_clob_size() - Get the size of a CLOB\n
fbsql_change_user fbsql_change_user(string $user, string $password [, string\n$database [, resource $link_identifier]]) [bool]\nChange logged in user of the active connection. fbsql_change_user() changes\nthe logged in user of the specified connection. If the new user and password\nauthorization fails, the current connected user stays active.\n@param user The new user name.\n@param password The new user password.\n@param database If specified, this will be the default or current database\nafter the user has been changed.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_clob_size fbsql_clob_size(string $clob_handle [, resource\n$link_identifier]) [int]\nGet the size of a CLOB. Returns the size of the given CLOB.\n@param clob_handle A CLOB handle, returned by fbsql_create_clob().\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_blob_size() - Get the size of a BLOB\n
fbsql_close fbsql_close([resource $link_identifier]) [bool]\nClose FrontBase connection. Closes the connection to the FrontBase server\nthat&#039;s associated with the specified link identifier. Using fbsql_close()\nisn&#039;t usually necessary, as non-persistent open links are automatically\nclosed at the end of the script&#039;s execution.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_connect() - Open a connection to a FrontBase Server\n@see fbsql_pconnect() - Open a persistent connection to a FrontBase Server\n
fbsql_commit fbsql_commit([resource $link_identifier]) [bool]\nCommits a transaction to the database. Ends the current transaction by writing\nall inserts, updates and deletes to the disk and unlocking all row and table\nlocks held by the transaction. This command is only needed if autocommit is\nset to false.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_autocommit() - Enable or disable autocommit\n@see fbsql_rollback() - Rollback a transaction to the database\n
fbsql_connect fbsql_connect([string\n$hostname=ini_get(&quot;fbsql.default_host&quot;) [, string\n$username=ini_get(&quot;fbsql.default_user&quot;) [, string\n$password=ini_get(&quot;fbsql.default_password&quot;)]]]) [resource]\nOpen a connection to a FrontBase Server. fbsql_connect() establishes a\nconnection to a FrontBase server. If a second call is made to fbsql_connect()\nwith the same arguments, no new link will be established, but instead,\nthe link identifier of the already opened link will be returned. The link\nto the server will be closed as soon as the execution of the script ends,\nunless it&#039;s closed earlier by explicitly calling fbsql_close().\n@param hostname The server host name.\n@param username The user name for the connection.\n@param password The password for the connection.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_pconnect() - Open a persistent connection to a FrontBase Server\n@see fbsql_close() - Close FrontBase connection\n
fbsql_create_blob fbsql_create_blob(string $blob_data [, resource\n$link_identifier]) [string]\nCreate a BLOB. Creates a BLOB from the given data.\n@param blob_data The BLOB data.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_create_clob() - Create a CLOB\n@see fbsql_read_blob() - Read a BLOB from the database\n@see fbsql_read_clob() - Read a CLOB from the database\n@see fbsql_set_lob_mode() - Set the LOB retrieve mode for a FrontBase\nresult set\n
fbsql_create_clob fbsql_create_clob(string $clob_data [, resource\n$link_identifier]) [string]\nCreate a CLOB. Creates a CLOB from the given data.\n@param clob_data The CLOB data.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_create_blob() - Create a BLOB\n@see fbsql_read_blob() - Read a BLOB from the database\n@see fbsql_read_clob() - Read a CLOB from the database\n@see fbsql_set_lob_mode() - Set the LOB retrieve mode for a FrontBase\nresult set\n
fbsql_create_db fbsql_create_db(string $database_name [, resource\n$link_identifier [, string $database_options]]) [bool]\nCreate a FrontBase database. Attempts to create a new database on the\nspecified server.\n@param database_name The database name, as a string.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param database_options\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_drop_db() - Drop (delete) a FrontBase database\n
fbsql_data_seek fbsql_data_seek(resource $result, int $row_number) [bool]\nMove internal result pointer. Moves the internal row pointer of the FrontBase\nresult associated with the specified result identifier to point to the\nspecified row number. The next call to fbsql_fetch_row() would return that row.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param row_number The row number. Starts at 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_database_password fbsql_database_password(resource $link_identifier\n[, string $database_password]) [string]\nSets or retrieves the password for a FrontBase database. Sets and retrieves\nthe database password used by the connection. If a database is protected\nby a database password, the user must call this function before calling\nfbsql_select_db(). If no link is open, the function will try to establish\na link as if fbsql_connect() was called, and use it. This function does not\nchange the database password in the database nor can it be used to retrieve\nthe database password for a database.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param database_password The database password, as a string. If given,\nthe function sets the database password for the specified link identifier.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_connect() - Open a connection to a FrontBase Server\n@see fbsql_pconnect() - Open a persistent connection to a FrontBase Server\n@see fbsql_select_db() - Select a FrontBase database\n
fbsql_database fbsql_database(resource $link_identifier [, string $database])\n[string]\nGet or set the database name used with a connection. Get or set the database\nname used with the connection.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param database The database name. If given, the default database of the\nconnexion will be changed to `database`.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_db_query fbsql_db_query(string $database, string $query [, resource\n$link_identifier]) [resource]\nSend a FrontBase query. Selects a database and executes a query on it.\n@param database The database to be selected.\n@param query The SQL query to be executed. Note: The query string shall\nalways end with a semicolon.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_query() - Send a FrontBase query\n@see fbsql_connect() - Open a connection to a FrontBase Server\n
fbsql_db_status fbsql_db_status(string $database_name [, resource\n$link_identifier]) [int]\nGet the status for a given database. Gets the current status of the specified\ndatabase.\n@param database_name The database name.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@see fbsql_start_db() - Start a database on local or remote server\n@see fbsql_stop_db() - Stop a database on local or remote server\n
fbsql_drop_db fbsql_drop_db(string $database_name [, resource\n$link_identifier]) [bool]\nDrop (delete) a FrontBase database. fbsql_drop_db() attempts to drop\n(remove) an entire database from the server associated with the specified\nlink identifier.\n@param database_name The database name, as a string.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_create_db() - Create a FrontBase database\n
fbsql_errno fbsql_errno([resource $link_identifier]) [int]\nReturns the error number from previous operation. Returns the numerical\nvalue of the error message from previous FrontBase operation. Errors coming\nback from the fbsql database backend don&#039;t issue warnings. Instead,\nuse fbsql_errno() to retrieve the error code. Note that this function only\nreturns the error code from the most recently executed fbsql function (not\nincluding fbsql_error() and fbsql_errno()), so if you want to use it, make\nsure you check the value before calling another fbsql function.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_error() - Returns the error message from previous operation\n@see fbsql_warnings() - Enable or disable FrontBase warnings\n
fbsql_error fbsql_error([resource $link_identifier]) [string]\nReturns the error message from previous operation. Returns the error message\nfrom previous FrontBase operation. Errors coming back from the fbsql database\nbackend don&#039;t issue warnings. Instead, use fbsql_error() to retrieve\nthe error text. Note that this function only returns the error code from\nthe most recently executed fbsql function (not including fbsql_error()\nand fbsql_errno()), so if you want to use it, make sure you check the value\nbefore calling another fbsql function.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_errno() - Returns the error number from previous operation\n@see fbsql_warnings() - Enable or disable FrontBase warnings\n
fbsql_fetch_array fbsql_fetch_array(resource $result [, int $result_type])\n[array]\nFetch a result row as an associative array, a numeric array, or\nboth. fbsql_fetch_array() is a combination of fbsql_fetch_row()\nand fbsql_fetch_assoc(). An important thing to note is that using\nfbsql_fetch_array() is NOT significantly slower than using fbsql_fetch_row(),\nwhile it provides a significant added value.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param result_type A constant and can take the following values: FBSQL_ASSOC,\nFBSQL_NUM, or FBSQL_BOTH. When using FBSQL_BOTH, in addition to storing the\ndata in the numeric indices of the result array, it also stores the data in\nassociative indices, using the field names as keys.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_row() - Get a result row as an enumerated array\n@see fbsql_fetch_assoc() - Fetch a result row as an associative array\n@see fbsql_fetch_object() - Fetch a result row as an object\n
fbsql_fetch_assoc fbsql_fetch_assoc(resource $result) [array]\nFetch a result row as an associative array. Calling fbsql_fetch_assoc()\nis equivalent to calling fbsql_fetch_array() with FBSQL_ASSOC as\nsecond parameter. It only returns an associative array. This is the way\nfbsql_fetch_array() originally worked. If you need the numeric indices as\nwell as the associative, use fbsql_fetch_array(). An important thing to note\nis that using fbsql_fetch_assoc() is NOT significantly slower than using\nfbsql_fetch_row(), while it provides a significant added value.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_row() - Get a result row as an enumerated array\n@see fbsql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see fbsql_fetch_object() - Fetch a result row as an object\n
fbsql_fetch_field fbsql_fetch_field(resource $result [, int $field_offset])\n[object]\nGet column information from a result and return as an object. Used in order\nto obtain information about fields in a certain query result.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param field_offset The numerical offset of the field. The field index starts\nat 0. If not specified, the next field that wasn&#039;t yet retrieved by\nfbsql_fetch_field() is retrieved.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_field_seek() - Set result pointer to a specified field offset\n
fbsql_fetch_lengths fbsql_fetch_lengths(resource $result) [array]\nGet the length of each output in a result. Stores the lengths of each result\ncolumn in the last row returned by fbsql_fetch_row(), fbsql_fetch_array()\nand fbsql_fetch_object() in an array.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_row() - Get a result row as an enumerated array\n
fbsql_fetch_object fbsql_fetch_object(resource $result) [object]\nFetch a result row as an object. fbsql_fetch_object() is similar to\nfbsql_fetch_array(), with one difference - an object is returned, instead\nof an array. Indirectly, that means that you can only access the data by\nthe field names, and not by their offsets (numbers are illegal property\nnames). Speed-wise, the function is identical to fbsql_fetch_array(), and\nalmost as quick as fbsql_fetch_row() (the difference is insignificant).\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see fbsql_fetch_row() - Get a result row as an enumerated array\n@see fbsql_fetch_assoc() - Fetch a result row as an associative array\n
fbsql_fetch_row fbsql_fetch_row(resource $result) [array]\nGet a result row as an enumerated array. fbsql_fetch_row() fetches\none row of data from the result associated with the specified result\nidentifier. Subsequent call to fbsql_fetch_row() would return the next row\nin the result set, or FALSE if there are no more rows.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see fbsql_fetch_assoc() - Fetch a result row as an associative array\n@see fbsql_fetch_object() - Fetch a result row as an object\n@see fbsql_data_seek() - Move internal result pointer\n@see fbsql_fetch_lengths() - Get the length of each output in a result\n@see fbsql_result() - Get result data\n
fbsql_field_flags fbsql_field_flags(resource $result [, int $field_offset])\n[string]\nGet the flags associated with the specified field in a result. Gets the\nflags associated with the specified field in a result.\n@param result A result pointer returned by fbsql_list_fields().\n@param field_offset The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_field_len fbsql_field_len(resource $result [, int $field_offset]) [int]\nReturns the length of the specified field. Returns the length of the\nspecified field.\n@param result A result pointer returned by fbsql_list_fields().\n@param field_offset The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_field_name fbsql_field_name(resource $result [, int $field_index])\n[string]\nGet the name of the specified field in a result. Returns the name of the\nspecified field index.\n@param result A result pointer returned by fbsql_list_fields().\n@param field_index The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_field_type() - Get the type of the specified field in a result\n
fbsql_field_seek fbsql_field_seek(resource $result [, int $field_offset])\n[bool]\nSet result pointer to a specified field offset. Seeks to the specified field\noffset. If the next call to fbsql_fetch_field() doesn&#039;t include a field\noffset, the field offset specified in fbsql_field_seek() will be returned.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param field_offset The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_field() - Get column information from a result and return\nas an object\n
fbsql_field_table fbsql_field_table(resource $result [, int $field_offset])\n[string]\nGet name of the table the specified field is in. Returns the name of the\ntable that the specified field is in.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param field_offset The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_field_type fbsql_field_type(resource $result [, int $field_offset])\n[string]\nGet the type of the specified field in a result. fbsql_field_type() is similar\nto the fbsql_field_name() function, but the field type is returned instead.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param field_offset The numerical offset of the field. The field index starts\nat 0.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_field_name() - Get the name of the specified field in a result\n
fbsql_free_result fbsql_free_result(resource $result) [bool]\nFree result memory. Frees all memory associated with the given `result`\nidentifier. fbsql_free_result() only needs to be called if you are concerned\nabout how much memory is being used for queries that return large result\nsets. All associated result memory is automatically freed at the end of the\nscript&#039;s execution.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_get_autostart_info fbsql_get_autostart_info([resource $link_identifier])\n[array]\nDescription.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n
fbsql_hostname fbsql_hostname(resource $link_identifier [, string $host_name])\n[string]\nGet or set the host name used with a connection. Gets or sets the host name\nused with a connection.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param host_name If provided, this will be the new connection host name.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_username() - Get or set the username for the connection\n@see fbsql_password() - Get or set the user password used with a connection\n
fbsql_insert_id fbsql_insert_id([resource $link_identifier]) [int]\nGet the id generated from the previous INSERT operation. Gets the id generated\nfrom the previous INSERT operation which created a DEFAULT UNIQUE value. Note:\nThe value of the FrontBase SQL function fbsql_insert_id() always contains the\nmost recently generated DEFAULT UNIQUE value, and is not reset between queries.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_affected_rows() - Get number of affected rows in previous\nFrontBase operation\n
fbsql_list_dbs fbsql_list_dbs([resource $link_identifier]) [resource]\nList databases available on a FrontBase server. Return a result pointer\ncontaining the databases available from the current fbsql daemon. Use the\nfbsql_tablename() to traverse this result pointer.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_list_fields() - List FrontBase result fields\n@see fbsql_list_tables() - List tables in a FrontBase database\n
fbsql_list_fields fbsql_list_fields(string $database_name, string $table_name\n[, resource $link_identifier]) [resource]\nList FrontBase result fields. Retrieves information about the given table.\n@param database_name The database name.\n@param table_name The table name.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_field_len() - Returns the length of the specified field\n@see fbsql_field_name() - Get the name of the specified field in a result\n@see fbsql_field_type() - Get the type of the specified field in a result\n@see fbsql_field_flags() - Get the flags associated with the specified field\nin a result\n
fbsql_list_tables fbsql_list_tables(string $database [, resource\n$link_identifier]) [resource]\nList tables in a FrontBase database. Returns a result pointer describing the\n`database`.\n@param database The database name.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_list_fields() - List FrontBase result fields\n@see fbsql_list_dbs() - List databases available on a FrontBase server\n
fbsql_next_result fbsql_next_result(resource $result) [bool]\nMove the internal result pointer to the next result. When sending more than\none SQL statement to the server or executing a stored procedure with multiple\nresults will cause the server to return multiple result sets. This function\nwill test for additional results available form the server. If an additional\nresult set exists it will free the existing result set and prepare to fetch\nthe words from the new result set.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n
fbsql_num_fields fbsql_num_fields(resource $result) [int]\nGet number of fields in result. Returns the number of fields in the given\n`result` set.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_db_query() - Send a FrontBase query\n@see fbsql_query() - Send a FrontBase query\n@see fbsql_fetch_field() - Get column information from a result and return\nas an object\n@see fbsql_num_rows() - Get number of rows in result\n
fbsql_num_rows fbsql_num_rows(resource $result) [int]\nGet number of rows in result. Gets the number of rows in the given `result`\nset. This function is only valid for SELECT statements. To retrieve\nthe number of rows returned from a INSERT, UPDATE or DELETE query, use\nfbsql_affected_rows().\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_affected_rows() - Get number of affected rows in previous\nFrontBase operation\n@see fbsql_connect() - Open a connection to a FrontBase Server\n@see fbsql_select_db() - Select a FrontBase database\n@see fbsql_query() - Send a FrontBase query\n
fbsql_password fbsql_password(resource $link_identifier [, string $password])\n[string]\nGet or set the user password used with a connection. Get or set the user\npassword used with a connection.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param password If provided, this will be the new connection password.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_username() - Get or set the username for the connection\n@see fbsql_hostname() - Get or set the host name used with a connection\n
fbsql_pconnect fbsql_pconnect([string\n$hostname=ini_get(&quot;fbsql.default_host&quot;) [, string\n$username=ini_get(&quot;fbsql.default_user&quot;) [, string\n$password=ini_get(&quot;fbsql.default_password&quot;)]]]) [resource]\nOpen a persistent connection to a FrontBase Server. Establishes a persistent\nconnection to a FrontBase server. To set the server port number, use\nfbsql_select_db(). fbsql_pconnect() acts very much like fbsql_connect()\nwith two major differences: First, when connecting, the function would first\ntry to find a (persistent) link that&#039;s already open with the same host,\nusername and password. If one is found, an identifier for it will be returned\ninstead of opening a new connection. Second, the connection to the SQL\nserver will not be closed when the execution of the script ends. Instead,\nthe link will remain open for future use. This type of links is therefore\ncalled &#039;persistent&#039;.\n@param hostname The server host name.\n@param username The user name for the connection.\n@param password The password for the connection.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_connect() - Open a connection to a FrontBase Server\n
fbsql_query fbsql_query(string $query [, resource $link_identifier [, int\n$batch_size]]) [resource]\nSend a FrontBase query. Sends a `query` to the currently active database on\nthe server. If the query succeeds, you can call fbsql_num_rows() to find out\nhow many rows were returned for a SELECT statement or fbsql_affected_rows()\nto find out how many rows were affected by a DELETE, INSERT, REPLACE, or\nUPDATE statement.\n@param query The SQL query to be executed. Note: The query string shall\nalways end with a semicolon.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param batch_size\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_affected_rows() - Get number of affected rows in previous\nFrontBase operation\n@see fbsql_db_query() - Send a FrontBase query\n@see fbsql_free_result() - Free result memory\n@see fbsql_result() - Get result data\n@see fbsql_select_db() - Select a FrontBase database\n@see fbsql_connect() - Open a connection to a FrontBase Server\n
fbsql_read_blob fbsql_read_blob(string $blob_handle [, resource\n$link_identifier]) [string]\nRead a BLOB from the database. Reads BLOB data from the database. If a select\nstatement contains BLOB and/or CLOB columns FrontBase will return the data\ndirectly when data is fetched. This default behavior can be changed with\nfbsql_set_lob_mode() so the fetch functions will return handles to BLOB\nand CLOB data. If a handle is fetched a user must call fbsql_read_blob()\nto get the actual BLOB data from the database.\n@param blob_handle A BLOB handle, returned by fbsql_create_blob().\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_create_blob() - Create a BLOB\n@see fbsql_read_clob() - Read a CLOB from the database\n@see fbsql_set_lob_mode() - Set the LOB retrieve mode for a FrontBase\nresult set\n
fbsql_read_clob fbsql_read_clob(string $clob_handle [, resource\n$link_identifier]) [string]\nRead a CLOB from the database. Reads CLOB data from the database. If a select\nstatement contains BLOB and/or CLOB columns FrontBase will return the data\ndirectly when data is fetched. This default behavior can be changed with\nfbsql_set_lob_mode() so the fetch functions will return handles to BLOB\nand CLOB data. If a handle is fetched a user must call fbsql_read_clob()\nto get the actual CLOB data from the database.\n@param clob_handle A CLOB handle, returned by fbsql_create_clob().\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_create_clob() - Create a CLOB\n@see fbsql_read_blob() - Read a BLOB from the database\n@see fbsql_set_lob_mode() - Set the LOB retrieve mode for a FrontBase\nresult set\n
fbsql_result fbsql_result(resource $result [, int $row [, mixed $field]])\n[mixed]\nGet result data. Returns the contents of one cell from a FrontBase `result`\nset. When working on large result sets, you should consider using one of the\nfunctions that fetch an entire row (specified below). As these functions\nreturn the contents of multiple cells in one function call, they&#039;re\nMUCH quicker than fbsql_result(). Calls to fbsql_result() should not be\nmixed with calls to other functions that deal with the result set.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param row\n@param field Can be the field&#039;s offset, or the field&#039;s name,\nor the field&#039;s table dot field&#039;s name (tablename.fieldname). If\nthe column name has been aliased (&#039;select foo as bar from...&#039;),\nuse the alias instead of the column name. Note: Specifying a numeric offset\nfor the field argument is much quicker than specifying a fieldname or\ntablename.fieldname argument.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_fetch_row() - Get a result row as an enumerated array\n@see fbsql_fetch_array() - Fetch a result row as an associative array,\na numeric array, or both\n@see fbsql_fetch_assoc() - Fetch a result row as an associative array\n@see fbsql_fetch_object() - Fetch a result row as an object\n
fbsql_rollback fbsql_rollback([resource $link_identifier]) [bool]\nRollback a transaction to the database. Ends the current transaction by\nrolling back all statements issued since last commit. This command is only\nneeded if autocommit is set to false.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_autocommit() - Enable or disable autocommit\n@see fbsql_commit() - Commits a transaction to the database\n
fbsql_rows_fetched fbsql_rows_fetched(resource $result) [int]\nGet the number of rows affected by the last statement. Gets the number of\nrows affected by the last statement.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@return (PHP 5 >= 5.1.0)\n
fbsql_select_db fbsql_select_db([string $database_name [, resource\n$link_identifier]]) [bool]\nSelect a FrontBase database. Sets the current active database on the given link\nidentifier. The client contacts FBExec to obtain the port number to use for the\nconnection to the database. If the database name is a number the system will\nuse that as a port number and it will not ask FBExec for the port number. The\nFrontBase server can be stared as FRontBase -FBExec=No -port=&lt;port number>\n&lt;database name>. Every subsequent call to fbsql_query() will be made on\nthe active database.\n@param database_name The name of the database to be selected. If the\ndatabase is protected with a database password, the you must call\nfbsql_database_password() before selecting the database.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_connect() - Open a connection to a FrontBase Server\n@see fbsql_pconnect() - Open a persistent connection to a FrontBase Server\n@see fbsql_database_password() - Sets or retrieves the password for a\nFrontBase database\n@see fbsql_query() - Send a FrontBase query\n
fbsql_set_characterset fbsql_set_characterset(resource $link_identifier,\nint $characterset [, int $in_out_both]) [void]\nChange input/output character set.\n@return (PHP 5 >= 5.1.0)\n
fbsql_set_lob_mode fbsql_set_lob_mode(resource $result, int $lob_mode) [bool]\nSet the LOB retrieve mode for a FrontBase result set. Sets the mode for\nretrieving LOB data from the database. When BLOB and CLOB data is retrieved\nin FrontBase it can be retrieved direct or indirect. Direct retrieved LOB\ndata will always be fetched no matter the setting of the lob mode. If the\nLOB data is less than 512 bytes it will always be retrieved directly.\n@param  result A result identifier returned by fbsql_query() or\nfbsql_db_query().\n@param lob_mode Can be one of: FBSQL_LOB_DIRECT - LOB data is retrieved\ndirectly. When data is fetched from the database with fbsql_fetch_row(), and\nother fetch functions, all CLOB and BLOB columns will be returned as ordinary\ncolumns. This is the default value on a new FrontBase result. FBSQL_LOB_HANDLE\n- LOB data is retrieved as handles to the data. When data is fetched from\nthe database with fbsql_fetch_row(), and other fetch functions, LOB data\nwill be returned as a handle to the data if the data is stored indirect or\nthe data if it is stored direct. If a handle is returned it will be a 27\nbyte string formatted as `@&#039;000000000000000000000000&#039;`.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see fbsql_create_blob() - Create a BLOB\n@see fbsql_create_clob() - Create a CLOB\n@see fbsql_read_blob() - Read a BLOB from the database\n@see fbsql_read_clob() - Read a CLOB from the database\n
fbsql_set_password fbsql_set_password(resource $link_identifier, string $user,\nstring $password, string $old_password) [bool]\nChange the password for a given user. Changes the password for the given\n`user`.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param user The user name.\n@param password The new password to be set.\n@param old_password The old password to be replaced.\n@return (PHP 5)\n
fbsql_set_transaction fbsql_set_transaction(resource $link_identifier,\nint $locking, int $isolation) [void]\nSet the transaction locking and isolation. Sets the transaction `locking`\nand `isolation`.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param locking The type of locking to be set. It can be one of the\nfollowing constants: FBSQL_LOCK_DEFERRED, FBSQL_LOCK_OPTIMISTIC, or\nFBSQL_LOCK_PESSIMISTIC.\n@param isolation The type of isolation to be set. It can be one of the\nfollowing constants: FBSQL_ISO_READ_UNCOMMITTED, FBSQL_ISO_READ_COMMITTED,\nFBSQL_ISO_REPEATABLE_READ, FBSQL_ISO_SERIALIZABLE, or FBSQL_ISO_VERSIONED.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
fbsql_start_db fbsql_start_db(string $database_name [, resource\n$link_identifier [, string $database_options]]) [bool]\nStart a database on local or remote server. Start a database on local or\nremote server.\n@param database_name The database name.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param database_options\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_db_status() - Get the status for a given database\n@see fbsql_stop_db() - Stop a database on local or remote server\n
fbsql_stop_db fbsql_stop_db(string $database_name [, resource\n$link_identifier]) [bool]\nStop a database on local or remote server. Stops a database on local or\nremote server.\n@param database_name The database name.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_db_status() - Get the status for a given database\n@see fbsql_start_db() - Start a database on local or remote server\n
fbsql_table_name fbsql_table_name(resource $result, int $index) [string]\nGet table name of field. fbsql_table_name() gets the name of the current\ntable in the given `result` set. The fbsql_num_rows() function may be used\nto determine the number of tables in the result pointer.\n@param result A result pointer returned by fbsql_list_tables().\n@param index Integer index for the current table.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
fbsql_tablename fbsql_tablename\nAlias of fbsql_table_name.\n
fbsql_username fbsql_username(resource $link_identifier [, string $username])\n[string]\nGet or set the username for the connection. Get or set the username used\nfor the connection.\n@param  link_identifier A FrontBase link identifier returned by fbsql_connect()\nor fbsql_pconnect().If optional and not specified, the function will try to\nfind an open link to the FrontBase server and if no such link is found it\nwill try to create one as if fbsql_connect() was called with no arguments.\n@param username If provided, this is the new username to set.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_password() - Get or set the user password used with a connection\n@see fbsql_hostname() - Get or set the host name used with a connection\n
fbsql_warnings fbsql_warnings([bool $OnOff]) [bool]\nEnable or disable FrontBase warnings. Enables or disables FrontBase warnings.\n@param OnOff Whether to enable warnings or no.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see fbsql_errno() - Returns the error number from previous operation\n@see fbsql_error() - Returns the error message from previous operation\n
fclose fclose(resource $handle) [bool]\nCloses an open file pointer. The file pointed to by `handle` is closed.\n@param handle The file pointer must be valid, and must point to a file\nsuccessfully opened by fopen() or fsockopen().\n@return (PHP 4, PHP 5)\n@see fopen() - Opens file or URL\n@see fsockopen() - Open Internet or Unix domain socket connection\n
fdf_add_doc_javascript fdf_add_doc_javascript(resource $fdf_document, string\n$script_name, string $script_code) [bool]\nAdds javascript code to the FDF document. Adds a script to the FDF, which\nAcrobat then adds to the doc-level scripts of a document, once the FDF is\nimported into it.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param script_name The script name.\n@param script_code The script code. It is strongly suggested to use `\r`\nfor linebreaks within the script code.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
fdf_add_template fdf_add_template(resource $fdf_document, int $newpage,\nstring $filename, string $template, int $rename) [bool]\nAdds a template into the FDF document.\n
fdf_close fdf_close(resource $fdf_document) [void]\nClose an FDF document. Closes the FDF document.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4, PHP 5)\n@see fdf_open() - Open a FDF document\n
fdf_create fdf_create(void) [resource]\nCreate a new FDF document. Creates a new FDF document. This function is\nneeded if one would like to populate input fields in a PDF document with data.\n@return (PHP 4, PHP 5)\n@see fdf_close() - Close an FDF document\n@see fdf_save() - Save a FDF document\n@see fdf_open() - Open a FDF document\n
fdf_enum_values fdf_enum_values(resource $fdf_document, callback $function\n[, mixed $userdata]) [bool]\nCall a user defined function for each document value.\n
fdf_errno fdf_errno(void) [int]\nReturn error code for last fdf operation. Gets the error code set by the\nlast FDF function call. A textual description of the error may be obtained\nusing with fdf_error().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_error() - Return error description for FDF error code\n
fdf_error fdf_error([int $error_code=-1]) [string]\nReturn error description for FDF error code. Gets a textual description for\nthe FDF error code given in `error_code`.\n@param error_code An error code obtained with fdf_errno(). If not provided,\nthis function uses the internal error code set by the last operation.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_errno() - Return error code for last fdf operation\n
fdf_get_ap fdf_get_ap(resource $fdf_document, string $field, int $face,\nstring $filename) [bool]\nGet the appearance of a field. Gets the appearance of a `field` (i.e. the\nvalue of the /AP key) and stores it in a file.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param field\n@param face The possible values are FDFNormalAP, FDFRolloverAP and FDFDownAP.\n@param filename The appearance will be stored in this parameter.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
fdf_get_attachment fdf_get_attachment(resource $fdf_document, string\n$fieldname, string $savepath) [array]\nExtracts uploaded file embedded in the FDF. Extracts a file uploaded by\nmeans of the &quot;file selection&quot; field `fieldname` and stores it under\n`savepath`.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname\n@param savepath May be the name of a plain file or an existing directory in\nwhich the file is to be created under its original name. Any existing file\nunder the same name will be overwritten. Note: There seems to be no other way\nto find out the original filename but to store the file using a directory as\n`savepath` and check for the basename it was stored under.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
fdf_get_encoding fdf_get_encoding(resource $fdf_document) [string]\nGet the value of the /Encoding key. Gets the value of the `/Encoding` key.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_set_encoding() - Sets FDF character encoding\n
fdf_get_file fdf_get_file(resource $fdf_document) [string]\nGet the value of the /F key. Gets the value of the `/F` key.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4, PHP 5)\n@see fdf_set_file() - Set PDF document to display FDF data in\n
fdf_get_flags fdf_get_flags(resource $fdf_document, string $fieldname,\nint $whichflags) [int]\nGets the flags of a field.\n
fdf_get_opt fdf_get_opt(resource $fdf_document, string $fieldname [, int\n$element=-1]) [mixed]\nGets a value from the opt array of a field.\n
fdf_get_status fdf_get_status(resource $fdf_document) [string]\nGet the value of the /STATUS key. Gets the value of the `/STATUS` key.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4, PHP 5)\n@see fdf_set_status() - Set the value of the /STATUS key\n
fdf_get_value fdf_get_value(resource $fdf_document, string $fieldname [,\nint $which=-1]) [mixed]\nGet the value of a field. Gets the value for the requested field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param which Elements of an array field can be retrieved by passing this\noptional parameter, starting at zero. For non-array fields, this parameter\nwill be ignored.\n@return (PHP 4, PHP 5)\n@see fdf_set_value() - Set the value of a field\n
fdf_get_version fdf_get_version([resource $fdf_document]) [string]\nGets version number for FDF API or file. Return the FDF version for the\ngiven document, or the toolkit API version number if no parameter is given.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_set_version() - Sets version number for a FDF file\n
fdf_header fdf_header(void) [void]\nSets FDF-specific output headers. This is a convenience function to set\nappropriate HTTP headers for FDF output. It sets the `Content-type:` to\n`application/vnd.fdf`.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
fdf_next_field_name fdf_next_field_name(resource $fdf_document [, string\n$fieldname]) [string]\nGet the next field name. Gets the name of the field after the given field. This\nname can be used with several functions.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string. If not given, the first\nfield will be assumed.\n@return (PHP 4, PHP 5)\n@see fdf_get_value() - Get the value of a field\n
fdf_open_string fdf_open_string(string $fdf_data) [resource]\nRead a FDF document from a string. Reads form data from a string. You can\nuse fdf_open_string() together with $HTTP_FDF_DATA to process FDF form input\nfrom a remote client.\n@param fdf_data The data as returned from a PDF form or created using\nfdf_create() and fdf_save_string().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_open() - Open a FDF document\n@see fdf_close() - Close an FDF document\n@see fdf_create() - Create a new FDF document\n@see fdf_save_string() - Returns the FDF document as a string\n
fdf_open fdf_open(string $filename) [resource]\nOpen a FDF document. Opens a file with form data. You can also use\nfdf_open_string() to process the results of a PDF form POST request.\n@param filename Path to the FDF file. This file must contain the data as\nreturned from a PDF form or created using fdf_create() and fdf_save().\n@return (PHP 4, PHP 5)\n@see fdf_open_string() - Read a FDF document from a string\n@see fdf_close() - Close an FDF document\n@see fdf_create() - Create a new FDF document\n@see fdf_save() - Save a FDF document\n
fdf_remove_item fdf_remove_item(resource $fdf_document, string $fieldname,\nint $item) [bool]\nSets target frame for form.\n
fdf_save_string fdf_save_string(resource $fdf_document) [string]\nReturns the FDF document as a string. Returns the FDF document as a string.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see fdf_open_string() - Read a FDF document from a string\n@see fdf_close() - Close an FDF document\n@see fdf_create() - Create a new FDF document\n@see fdf_save() - Save a FDF document\n
fdf_save fdf_save(resource $fdf_document [, string $filename]) [bool]\nSave a FDF document. Saves a FDF document.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param filename If provided, the resulting FDF will be written in this\nparameter. Otherwise, this function will write the FDF to the default PHP\noutput stream.\n@return (PHP 4, PHP 5)\n@see fdf_close() - Close an FDF document\n@see fdf_create() - Create a new FDF document\n@see fdf_save_string() - Returns the FDF document as a string\n
fdf_set_ap fdf_set_ap(resource $fdf_document, string $field_name, int $face,\nstring $filename, int $page_number) [bool]\nSet the appearance of a field. Sets the appearance of a field (i.e. the\nvalue of the `/AP` key).\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param field_name\n@param face The possible values FDFNormalAP, FDFRolloverAP and FDFDownAP.\n@param filename\n@param page_number\n@return (PHP 4, PHP 5)\n
fdf_set_encoding fdf_set_encoding(resource $fdf_document, string $encoding)\n[bool]\nSets FDF character encoding. Sets the character encoding for the FDF document.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param encoding The encoding name. The following values are supported:\n&quot;`Shift-JIS`&quot;, &quot;`UHC`&quot;, &quot;`GBK`&quot; and\n&quot;`BigFive`&quot;. An empty string resets the encoding to the default\n`PDFDocEncoding/Unicode` scheme.\n@return (PHP 4 >= 4.0.7, PHP 5)\n
fdf_set_file fdf_set_file(resource $fdf_document, string $url [, string\n$target_frame]) [bool]\nSet PDF document to display FDF data in. Selects a different PDF document\nto display the form results in then the form it originated from.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param url Should be given as an absolute URL.\n@param target_frame Use this parameter to specify the frame in which the\ndocument will be displayed. You can also set the default value for this\nparameter using fdf_set_target_frame().\n@return (PHP 4, PHP 5)\n@see fdf_get_file() - Get the value of the /F key\n@see fdf_set_target_frame() - Set target frame for form display\n
fdf_set_flags fdf_set_flags(resource $fdf_document, string $fieldname,\nint $whichFlags, int $newFlags) [bool]\nSets a flag of a field. Sets certain flags of the given field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param whichFlags\n@param newFlags\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see fdf_set_opt() - Sets an option of a field\n
fdf_set_javascript_action fdf_set_javascript_action(resource $fdf_document,\nstring $fieldname, int $trigger, string $script) [bool]\nSets an javascript action of a field. Sets a javascript action for the\ngiven field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param trigger\n@param script\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see fdf_set_submit_form_action() - Sets a submit form action of a field\n
fdf_set_on_import_javascript fdf_set_on_import_javascript(resource\n$fdf_document, string $script, bool $before_data_import) [bool]\nAdds javascript code to be executed when Acrobat opens the FDF.\n@see fdf_add_doc_javascript() - Adds javascript code to the FDF document\n@see fdf_set_javascript_action() - Sets an javascript action of a field\n
fdf_set_opt fdf_set_opt(resource $fdf_document, string $fieldname, int\n$element, string $str1, string $str2) [bool]\nSets an option of a field. Sets options of the given field.\n@param fdf_document The FDF document handle, returned by fdf_create(),\nfdf_open() or fdf_open_string().\n@param fieldname Name of the FDF field, as a string.\n@param element\n@param str1\n@param str2\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see fdf_set_flags() - Sets a flag of a field\n
insert_before DomNode->insert_before(domelement $newnode, domelement $refnode)\n[domelement]\nInserts new node as child. This function inserts the new node `newnode` right\nbefore the node `refnode`. The return value is the inserted node. If you plan\nto do further modifications on the appended child you must use the returned\nnode. (PHP >= 4.3 only) If `newnode` already is part of a document, it will be\nfirst unlinked from its existing context. If `refnode` is NULL, then `newnode`\nwill be inserted at the end of the list of children. domnode_insert_before()\nis very similar to domnode_append_child() as the following example shows\nwhich does the same as the example at domnode_append_child().  Example #1\nAdding a child\n
is_blank_node DomNode->is_blank_node(void) [bool]\nChecks if node is blank. WarningThis function is currently not documented;\nonly its argument list is available.\n
last_child DomNode->last_child(void) [domelement]\nReturns last child of node. Returns the last child of the node. (PHP\n>= 4.3 only) If no last child is found, NULL is returned. See also\ndomnode_first_child(), and domnode_next_sibling(), domnode_previous_sibling().\n
next_sibling DomNode->next_sibling(void) [domelement]\nReturns the next sibling of node. This function returns the next sibling of\nthe current node. If there is no next sibling it returns FALSE (&lt; 4.3)\nor null (>= 4.3). You can use this function to iterate over all children of\na node as shown in the example.  Example #1 Iterate over children\n
node_name DomNode->node_name(void) [string]\nReturns name of node. Returns name of the node. The name has different meanings\nfor the different types of nodes as illustrated in the following table. Meaning\nof value Type Meaning DomAttribute value of attribute DomAttribute &nbsp;\nDomCDataSection #cdata-section DomComment #comment DomDocument #document\nDomDocumentType document type name DomElement tag name DomEntity name of\nentity DomEntityReference name of entity reference DomNotation notation name\nDomProcessingInstruction target DomText #text\n
node_type DomNode->node_type(void) [int]\nReturns type of node. Returns the type of the node. All possible types are\nlisted in the table in the introduction.\n
node_value DomNode->node_value(void) [string]\nReturns value of a node. Returns value of the node. The value has different\nmeanings for the different types of nodes as illustrated in the following\ntable. Meaning of value Type Meaning DomAttribute value of attribute\nDomAttribute &nbsp; DomCDataSection content DomComment content of comment\nDomDocument null DomDocumentType null DomElement null DomEntity null\nDomEntityReference null DomNotation null DomProcessingInstruction entire\ncontent without target DomText content of text\n
owner_document DomNode->owner_document(void) [domdocument]\nReturns the document this node belongs to. This function returns the document\nthe current node belongs to. The following example will create two identical\nlists of children. Example #1 Finding the document of a node\n
parent_node DomNode->parent_node(void) [domnode]\nReturns the parent of the node. This function returns the parent node. (PHP >=\n4.3 only) If no parent is found, NULL is returned. The following example will\nshow two identical lists of children. Example #1 Finding the document of a node\n
prefix DomNode->prefix(void) [string]\nReturns name space prefix of node. Returns the name space prefix of the node.\n
previous_sibling DomNode->previous_sibling(void) [domelement]\nReturns the previous sibling of node. This function returns the previous\nsibling of the current node. If there is no previous sibling it returns FALSE\n(&lt; 4.3) or NULL (>= 4.3). You can use this function to iterate over all\nchildren of a node as shown in the example. See also domnode_next_sibling().\n
remove_child DomNode->remove_child(domtext $oldchild) [domtext]\nRemoves child from list of children. This functions removes a child from a\nlist of children. If child cannot be removed or is not a child the function\nwill return FALSE. If the child could be removed the functions returns the\nold child.  Example #1 Removing a child\n
replace_child DomNode->replace_child(domelement $newnode, domelement $oldnode)\n[domelement]\nReplaces a child. (PHP 4.2) This function replaces the child `oldnode`\nwith the passed new node. If the new node is already a child it will not be\nadded a second time. If the old node cannot be found the function returns\nFALSE. If the replacement succeeds the old node is returned. (PHP 4.3)\nThis function replaces the child `oldnode` with the passed `newnode`, even\nif the new node already is a child of the DomNode. If `newnode` was already\ninserted in the document it is first unlinked from its existing context. If\nthe old node cannot be found the function returns FALSE. If the replacement\nsucceeds the old node is returned. (This behaviour is according to the W3C\nspecs). See also domnode_append_child()\n
replace_node DomNode->replace_node(domelement $newnode) [domelement]\nReplaces node. (PHP 4.2) This function replaces an existing node with the\npassed new node. Before the replacement `newnode` is copied if it has a\nparent to make sure a node which is already in the document will not be\ninserted a second time. This behaviour enforces doing all modifications on\nthe node before the replacement or to refetch the inserted node afterwards\nwith functions like domnode_first_child(), domnode_child_nodes() etc.. (PHP\n4.3) This function replaces an existing node with the passed new node. It is\nnot copied anymore. If `newnode` was already inserted in the document it is\nfirst unlinked from its existing context. If the replacement succeeds the\nold node is returned. See also domnode_append_child()\n
set_content DomNode->set_content(string $content) [bool]\nSets content of node. WarningThis function is currently not documented;\nonly its argument list is available.\n
set_name DomNode->set_name(void) [bool]\nSets name of node. Sets name of node. See also domnode_node_name().\n
set_namespace DomNode->set_namespace(string $uri [, string $prefix]) [void]\nSets namespace of a node. Sets the namespace of a node to `uri`. If there\nis already a namespace declaration with the same uri in one of the parent\nnodes of the node, the prefix of this is taken, otherwise it will take the\none provided in the optional parameter `prefix` or generate a random one. See\nalso domdocument_create_element_ns(), and domnode_add_namespace()\n
unlink_node DomNode->unlink_node(void) [void]\nDeletes node. WarningThis function is currently not documented; only its\nargument list is available.\n
data string DomProcessingInstruction::data ( void )\nReturns the data of ProcessingInstruction node.\n@return (PHP 4 >= 4.1.0)\n
target string DomProcessingInstruction::target ( void )\nReturns the target of a ProcessingInstruction node.\n@return (PHP 4 >= 4.1.0)\n
domxml_new_doc domxml_new_doc(string $version) [DomDocument]\nCreates new empty XML document. Creates a new Dom document from scratch and\nreturns it.\n@param version The XML version number of the document.\n@return (PHP 4 >= 4.2.0)\n
domxml_open_file domxml_open_file(string $filename [, int $mode [, array\n&$error]]) [DomDocument]\nCreates a DOM object from an XML file. The function parses the XML document\nin the given file.\n@param filename The path to the XML file. The file is accessed in read-only\nmode.\n@param mode This optional parameter can be used to change the\nbehavior of this function. You can use one of the following constants\nfor it: DOMXML_LOAD_PARSING (default), DOMXML_LOAD_VALIDATING or\nDOMXML_LOAD_RECOVERING. You can add to it also DOMXML_LOAD_DONT_KEEP_BLANKS,\nDOMXML_LOAD_SUBSTITUTE_ENTITIES and DOMXML_LOAD_COMPLETE_ATTRS by bitwise or.\n@param error If used, it will contain the error messages. `error` must be\npassed in by reference.\n@return (PHP 4 >= 4.2.0)\n@see domxml_open_mem() - Creates a DOM object of an XML document\n@see domxml_new_doc() - Creates new empty XML document\n
domxml_open_mem domxml_open_mem(string $str [, int $mode [, array &$error]])\n[DomDocument]\nCreates a DOM object of an XML document. The function parses the XML document\nin the given string.\n@param str The contents of the XML file.\n@param mode This optional parameter can be used to change the\nbehavior of this function. You can use one of the following constants\nfor it: DOMXML_LOAD_PARSING (default), DOMXML_LOAD_VALIDATING or\nDOMXML_LOAD_RECOVERING. You can add to it also DOMXML_LOAD_DONT_KEEP_BLANKS,\nDOMXML_LOAD_SUBSTITUTE_ENTITIES and DOMXML_LOAD_COMPLETE_ATTRS by bitwise or.\n@param error If used, it will contain the error messages. `error` must be\npassed in by reference.\n@return (PHP 4 >= 4.2.0)\n@see domxml_open_file() - Creates a DOM object from an XML file\n@see domxml_new_doc() - Creates new empty XML document\n
domxml_version domxml_version(void) [string]\nGets the XML library version. Gets the version of the XML library currently\nused.\n@return (PHP 4 >= 4.1.0)\n
domxml_xmltree domxml_xmltree(string $str) [DomDocument]\nCreates a tree of PHP objects from an XML document. The function parses\nthe XML document in `str` and returns a tree PHP objects as the parsed\ndocument. This function is isolated from the other functions, which means\nyou cannot access the tree with any of the other functions. Modifying it,\nfor example by adding nodes, makes no sense since there is currently no way\nto dump it as an XML file. However this function may be valuable if you want\nto read a file and investigate the content.\n@param str The contents of the XML file.\n@return (PHP 4 >= 4.2.0)\n
domxml_xslt_stylesheet_doc domxml_xslt_stylesheet_doc(DomDocument $xsl_doc)\n[DomXsltStylesheet]\nCreates a DomXsltStylesheet Object from a DomDocument Object. Creates a\nDomXsltStylesheet object from the given XSL document.\n@param xsl_doc The XSL document, as a DomDocument object.\n@return (PHP 4 >= 4.2.0)\n@see DomXsltStylesheet->process\n@see domxml_xslt_stylesheet() - Creates a DomXsltStylesheet object from an\nXSL document in a string\n@see domxml_xslt_stylesheet_file() - Creates a DomXsltStylesheet Object from\nan XSL document in a file\n
domxml_xslt_stylesheet_file domxml_xslt_stylesheet_file(string $xsl_file)\n[DomXsltStylesheet]\nCreates a DomXsltStylesheet Object from an XSL document in a file. Creates\na DomXsltStylesheet object from the given XSL file.\n@param xsl_file The path to the XSL document, as a string.\n@return (PHP 4 >= 4.2.0)\n@see DomXsltStylesheet->process\n@see domxml_xslt_stylesheet() - Creates a DomXsltStylesheet object from an\nXSL document in a string\n@see domxml_xslt_stylesheet_doc() - Creates a DomXsltStylesheet Object from\na DomDocument Object\n
domxml_xslt_stylesheet domxml_xslt_stylesheet(string $xsl_buf)\n[DomXsltStylesheet]\nCreates a DomXsltStylesheet object from an XSL document in a string. Creates\na DomXsltStylesheet object from the given XSL buffer.\n@param xsl_buf The XSL document, as a string.\n@return (PHP 4 >= 4.2.0)\n@see DomXsltStylesheet->process\n@see domxml_xslt_stylesheet_file() - Creates a DomXsltStylesheet Object from\nan XSL document in a file\n@see domxml_xslt_stylesheet_doc() - Creates a DomXsltStylesheet Object from\na DomDocument Object\n
domxml_xslt_version domxml_xslt_version(void) [int]\nGets the XSLT library version. Gets the XSLT library version.\n@return (PHP 4 >= 4.2.0)\n@see domxml_version() - Gets the XML library version\n
process DomDocument DomXsltStylesheet::process ( DomDocument $xml_doc [,\narray $xslt_params [, bool $is_xpath_param [, string $profile_filename ]]] )\nApplies the XSLT-Transformation on a DomDocument Object.\n@param xml_doc The XML document being transformed, as a DomDocument object.\n@param xslt_params An associative array that takes pairs of parameter names\nand values.\n@param is_xpath_param If set to FALSE the values of the `xslt_params` will be\nquoted. This is the default behavior. It allows you to pass the values as PHP\nstrings. Note: If your strings contains both single and double quotes, you must\ntake care of quoting all the values by yourself and set this parameter to TRUE.\n@param profile_filename Set this to the path of a filename, if you want\nprofiling information.\n@return (PHP 4 >= 4.1.0)\n@see domxml_xslt_stylesheet() - Creates a DomXsltStylesheet object from an\nXSL document in a string\n@see domxml_xslt_stylesheet_file() - Creates a DomXsltStylesheet Object from\nan XSL document in a file\n@see domxml_xslt_stylesheet_doc() - Creates a DomXsltStylesheet Object from\na DomDocument Object\n
result_dump_file string DomXsltStylesheet::result_dump_file ( DomDocument\n$xmldoc , string $filename )\nDumps the result from a XSLT-Transformation into a file.\n@see DomXsltStylesheet->result_dump_mem\n@see DomXsltStylesheet->process\n
result_dump_mem string DomXsltStylesheet::result_dump_mem ( DomDocument\n$xmldoc )\nDumps the result from a XSLT-Transformation back into a string.\n@see DomXsltStylesheet->result_dump_file\n@see DomXsltStylesheet->process\n
dotnet_load dotnet_load(string $assembly_name [, string $datatype_name [,\nint $codepage]]) [int]\nLoads a DOTNET module.\n
doubleval doubleval\nAlias of floatval.\n
each each(array &$array) [array]\nReturn the current key and value pair from an array and advance the array\ncursor. Return the current key and value pair from an array and advance\nthe array cursor. After each() has executed, the array cursor will be left\non the next element of the array, or past the last element if it hits the\nend of the array. You have to use reset() if you want to traverse the array\nagain using each.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see key() - Fetch a key from an array\n@see list() - Assign variables as if they were an array\n@see current() - Return the current element in an array\n@see reset() - Set the internal pointer of an array to its first element\n@see next() - Advance the internal array pointer of an array\n@see prev() - Rewind the internal array pointer\n@see foreach\n@see Object Iteration\n
easter_date easter_date([int $year]) [int]\nGet Unix timestamp for midnight on Easter of a given year. Returns the\nUnix timestamp corresponding to midnight on Easter of the given year. This\nfunction will generate a warning if the year is outside of the range for\nUnix timestamps (i.e. before 1970 or after 2037).\n@param year The year as a number between 1970 an 2037\n@return (PHP 4, PHP 5)\n@see easter_days() - Get number of days after March 21 on which Easter falls\nfor a given year for calculating Easter before 1970 or after 2037\n
easter_days easter_days([int $year [, int $method=CAL_EASTER_DEFAULT]]) [int]\nGet number of days after March 21 on which Easter falls for a given\nyear. Returns the number of days after March 21 on which Easter falls for\na given year. If no year is specified, the current year is assumed. This\nfunction can be used instead of easter_date() to calculate Easter for\nyears which fall outside the range of Unix timestamps (i.e. before 1970 or\nafter 2037). The date of Easter Day was defined by the Council of Nicaea in\nAD325 as the Sunday after the first full moon which falls on or after the\nSpring Equinox. The Equinox is assumed to always fall on 21st March, so the\ncalculation reduces to determining the date of the full moon and the date of\nthe following Sunday. The algorithm used here was introduced around the year\n532 by Dionysius Exiguus. Under the Julian Calendar (for years before 1753)\na simple 19-year cycle is used to track the phases of the Moon. Under the\nGregorian Calendar (for years after 1753 - devised by Clavius and Lilius,\nand introduced by Pope Gregory XIII in October 1582, and into Britain and\nits then colonies in September 1752) two correction factors are added to\nmake the cycle more accurate.\n@param year The year as a positive number\n@param method Allows to calculate easter dates based on the Gregorian calendar\nduring the years 1582 - 1752 when set to CAL_EASTER_ROMAN. See the calendar\nconstants for more valid constants.\n@return (PHP 4, PHP 5)\n@see easter_date() - Get Unix timestamp for midnight on Easter of a given year\n
echo echo(string $arg1 [, string $...]) [void]\nOutput one or more strings.\n@param arg1 The parameter to output.\n@param ...\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@see print() - Output a string\n@see printf() - Output a formatted string\n@see flush() - Flush the output buffer\n@see Heredoc syntax\n
empty empty(mixed $var) [bool]\nDetermine whether a variable is empty. Determine whether a variable is\nconsidered to be empty.\n@param var Variable to be checked Note: empty() only checks variables as\nanything else will result in a parse error. In other words, the following\nwill not work: empty(trim($name)). empty() is the opposite of `(boolean)\nvar`, except that no warning is generated when the variable is not set.\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@note Note: When using empty() on inaccessible object properties, the __isset\noverloading method will be called, if declared.\n@see isset() - Determine if a variable is set and is not NULL\n@see __isset\n@see unset() - Unset a given variable\n@see array_key_exists() - Checks if the given key or index exists in the array\n@see count() - Count all elements in an array, or properties in an object\n@see strlen() - Get string length\n@see The type comparison tables\n
enchant_broker_describe enchant_broker_describe(resource $broker) [array]\nEnumerates the Enchant providers. Enumerates the Enchant providers and\ntells you some rudimentary information about them. The same info is provided\nthrough phpinfo().\n@param broker Broker resource\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0)\n
enchant_broker_dict_exists enchant_broker_dict_exists(resource $broker,\nstring $tag) [bool]\nWhether a dictionary exists or not. Using non-empty tag. Tells if a dictionary\nexists or not, using a non-empty tags\n@param broker Broker resource\n@param tag non-empty tag in the LOCALE format, ex: us_US, ch_DE, etc.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_describe() - Enumerates the Enchant providers\n
enchant_broker_free_dict enchant_broker_free_dict(resource $dict) [bool]\nFree a dictionary resource. Free a dictionary resource.\n@param dict Dictionary resource.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_request_dict() - create a new dictionary using a tag\n@see enchant_broker_request_pwl_dict() - creates a dictionary using a PWL file\n
enchant_broker_free enchant_broker_free(resource $broker) [bool]\nFree the broker resource and its dictionnaries. Free a broker resource with\nall its dictionaries.\n@param broker Broker resource\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_init() - create a new broker object capable of requesting\n
enchant_broker_get_error enchant_broker_get_error(resource $broker) [string]\nReturns the last error of the broker. Returns the last error which occurred\nin this broker.\n@param broker Broker resource.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_broker_init enchant_broker_init(void) [resource]\ncreate a new broker object capable of requesting.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_free() - Free the broker resource and its dictionnaries\n
enchant_broker_list_dicts enchant_broker_list_dicts(resource $broker) [mixed]\nReturns a list of available dictionaries. Returns a list of available\ndictionaries with their details.\n@param broker Broker resource\n@return (PHP 5 >= 5.3.0, PECL enchant >= 1.0.1)\n@see enchant_broker_describe() - Enumerates the Enchant providers\n
enchant_broker_request_dict enchant_broker_request_dict(resource $broker,\nstring $tag) [resource]\ncreate a new dictionary using a tag. create a new dictionary using tag, the\nnon-empty language tag you wish to request a dictionary for (&quot;en_US&quot;,\n&quot;de_DE&quot;, ...)\n@param broker Broker resource\n@param tag A tag describing the locale, for example en_US, de_DE\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_dict_describe() - Describes an individual dictionary\n@see enchant_broker_dict_exists() - Whether a dictionary exists or not. Using\nnon-empty tag\n@see enchant_broker_free_dict() - Free a dictionary resource\n
enchant_broker_request_pwl_dict enchant_broker_request_pwl_dict(resource\n$broker, string $filename) [resource]\ncreates a dictionary using a PWL file. Creates a dictionary using a PWL\nfile. A PWL file is personal word file one word per line.\n@param broker Broker resource\n@param filename Path to the PWL file.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_dict_describe() - Describes an individual dictionary\n@see enchant_broker_dict_exists() - Whether a dictionary exists or not. Using\nnon-empty tag\n@see enchant_broker_free_dict() - Free a dictionary resource\n
enchant_broker_set_ordering enchant_broker_set_ordering(resource $broker,\nstring $tag, string $ordering) [bool]\nDeclares a preference of dictionaries to use for the language. Declares a\npreference of dictionaries to use for the language described/referred to by\n&#039;tag&#039;. The ordering is a comma delimited list of provider names. As\na special exception, the &quot;*&quot; tag can be used as a language tag to\ndeclare a default ordering for any language that does not explicitly declare\nan ordering.\n@param broker Broker resource\n@param tag Language tag. The special &quot;*&quot; tag can be used as a\nlanguage tag to declare a default ordering for any language that does not\nexplicitly declare an ordering.\n@param ordering Comma delimited list of provider names\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_dict_add_to_personal enchant_dict_add_to_personal(resource $dict,\nstring $word) [void]\nadd a word to personal word list. Add a word to personal word list of the\ngiven dictionary.\n@param dict Dictionary resource\n@param word The word to add\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_request_pwl_dict() - creates a dictionary using a PWL file\n@see enchant_broker_request_dict() - create a new dictionary using a tag\n
enchant_dict_add_to_session enchant_dict_add_to_session(resource $dict,\nstring $word) [void]\nadd 'word' to this spell-checking session. Add a word to the given\ndictionary. It will be added only for the active spell-checking session.\n@param dict Dictionary resource\n@param word The word to add\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_broker_request_dict() - create a new dictionary using a tag\n
enchant_dict_check enchant_dict_check(resource $dict, string $word) [bool]\nCheck whether a word is correctly spelled or not. If the word is correctly\nspelled return TRUE, otherwise return FALSE\n@param dict Dictionary resource\n@param word The word to check\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_dict_describe enchant_dict_describe(resource $dict) [mixed]\nDescribes an individual dictionary. Returns the details of the dictionary.\n@param dict Dictinaray resource\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_dict_get_error enchant_dict_get_error(resource $dict) [string]\nReturns the last error of the current spelling-session. Returns the last\nerror of the current spelling-session\n@param dict Dictinaray resource\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_dict_is_in_session enchant_dict_is_in_session(resource $dict, string\n$word) [bool]\nwhether or not 'word' exists in this spelling-session. Tells whether or not\na word already exists in the current session.\n@param dict Dictionary resource\n@param word The word to lookup\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_dict_add_to_session() - add 'word' to this spell-checking session\n
enchant_dict_quick_check enchant_dict_quick_check(resource $dict, string $word\n[, array &$suggestions]) [bool]\nCheck the word is correctly spelled and provide suggestions. If the word\nis correctly spelled return TRUE, otherwise return FALSE, if suggestions\nvariable is provided, fill it with spelling alternatives.\n@param dict Dictionary resource\n@param word The word to check\n@param suggestions If the word is not correctly spelled, this variable will\ncontain an array of suggestions.\n@return (PHP 5 >= 5.3.0, PECL enchant:0.2.0-1.0.1)\n@see enchant_dict_check() - Check whether a word is correctly spelled or not\n@see enchant_dict_suggest() - Will return a list of values if any of those\npre-conditions are not met\n
enchant_dict_store_replacement enchant_dict_store_replacement(resource $dict,\nstring $mis, string $cor) [void]\nAdd a correction for a word. Add a correction for &#039;mis&#039; using\n&#039;cor&#039;. Notes that you replaced @mis with @cor, so it&#039;s possibly\nmore likely that future occurrences of @mis will be replaced with @cor. So\nit might bump @cor up in the suggestion list.\n@param dict Dictionary resource\n@param mis The work to fix\n@param cor The correct word\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n
enchant_dict_suggest enchant_dict_suggest(resource $dict, string $word) [array]\nWill return a list of values if any of those pre-conditions are not met.\n@param dict Dictionary resource\n@param word Word to use for the suggestions.\n@return (PHP 5 >= 5.3.0, PECL enchant >= 0.1.0 )\n@see enchant_dict_check() - Check whether a word is correctly spelled or not\n@see enchant_dict_quick_check() - Check the word is correctly spelled and\nprovide suggestions\n
end end(array &$array) [mixed]\nSet the internal pointer of an array to its last element. end() advances\n`array`&#039;s internal pointer to the last element, and returns its value.\n@param array The array. This array is passed by reference because it is\nmodified by the function. This means you must pass it a real variable and\nnot a function returning an array because only actual variables may be passed\nby reference.\n@return (PHP 4, PHP 5)\n@see current() - Return the current element in an array\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n@see prev() - Rewind the internal array pointer\n@see reset() - Set the internal pointer of an array to its first element\n@see next() - Advance the internal array pointer of an array\n
ereg_replace ereg_replace(string $pattern, string $replacement, string $string)\n[string]\nReplace regular expression.\n@param pattern A POSIX extended regular expression.\n@param replacement If `pattern` contains parenthesized substrings,\n`replacement` may contain substrings of the form `\\digit`, which will be\nreplaced by the text matching the digit&#039;th parenthesized substring;\n`\\0` will produce the entire contents of string. Up to nine substrings may\nbe used. Parentheses may be nested, in which case they are counted by the\nopening parenthesis.\n@param string The input string.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@see ereg() - Regular expression match\n@see eregi() - Case insensitive regular expression match\n@see eregi_replace() - Replace regular expression case insensitive\n@see str_replace() - Replace all occurrences of the search string with the\nreplacement string\n@see preg_match() - Perform a regular expression match\n
ereg ereg(string $pattern, string $string [, array &$regs]) [int]\nRegular expression match.\n@param pattern Case sensitive regular expression.\n@param string The input string.\n@param regs If matches are found for parenthesized substrings of `pattern`\nand the function is called with the third argument `regs`, the matches will\nbe stored in the elements of the array `regs`. $regs[1] will contain the\nsubstring which starts at the first left parenthesis; $regs[2] will contain\nthe substring starting at the second, and so on. $regs[0] will contain a\ncopy of the complete string matched.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@note Note: preg_match(), which uses a Perl-compatible regular expression\nsyntax, is often a faster alternative to ereg().\n@see eregi() - Case insensitive regular expression match\n@see ereg_replace() - Replace regular expression\n@see eregi_replace() - Replace regular expression case insensitive\n@see preg_match() - Perform a regular expression match\n@see strpos() - Find position of first occurrence of a string\n@see strstr() - Find first occurrence of a string\n@see quotemeta() - Quote meta characters\n
eregi_replace eregi_replace(string $pattern, string $replacement, string\n$string) [string]\nReplace regular expression case insensitive. This function is identical to\nereg_replace() except that this ignores case distinction when matching\nalphabetic characters. This function has been DEPRECATED as of PHP\n5.3.0. Relying on this feature is highly discouraged.\n@param pattern A POSIX extended regular expression.\n@param replacement If `pattern` contains parenthesized substrings,\n`replacement` may contain substrings of the form `\\digit`, which will be\nreplaced by the text matching the digit&#039;th parenthesized substring;\n`\\0` will produce the entire contents of string. Up to nine substrings may\nbe used. Parentheses may be nested, in which case they are counted by the\nopening parenthesis.\n@param string The input string.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@see ereg() - Regular expression match\n@see eregi() - Case insensitive regular expression match\n@see ereg_replace() - Replace regular expression\n
eregi eregi(string $pattern, string $string [, array &$regs]) [int]\nCase insensitive regular expression match. This function is identical to\nereg() except that it ignores case distinction when matching alphabetic\ncharacters. This function has been DEPRECATED as of PHP 5.3.0. Relying on\nthis feature is highly discouraged.\n@param pattern Case insensitive regular expression.\n@param string The input string.\n@param regs If matches are found for parenthesized substrings of `pattern`\nand the function is called with the third argument `regs`, the matches will\nbe stored in the elements of the array `regs`. $regs[1] will contain the\nsubstring which starts at the first left parenthesis; $regs[2] will contain\nthe substring starting at the second, and so on. $regs[0] will contain a\ncopy of the complete string matched.\n@return (PHP 4, PHP 5)\n@note Note: As of PHP 5.3.0, the regex extension is deprecated in favor\nof the PCRE extension. Calling this function will issue an E_DEPRECATED\nnotice. See the list of differences for help on converting to PCRE.\n@see ereg() - Regular expression match\n@see ereg_replace() - Replace regular expression\n@see eregi_replace() - Replace regular expression case insensitive\n@see stripos() - Find position of first occurrence of a case-insensitive string\n@see stristr() - Case-insensitive strstr\n
error_get_last error_get_last(void) [array]\nGet the last occurred error. Gets information about the last error that\noccurred.\n@return (PHP 5 >= 5.2.0)\n@see Error constants\n@see Variable $php_errormsg\n@see Directive `display_errors`\n@see Directive `html_errors`\n@see Directive `xmlrpc_errors`\n
error_log error_log(string $message [, int $message_type=0 [, string\n$destination [, string $extra_headers]]]) [bool]\nSend an error message somewhere. Sends an error message to the web\nserver&#039;s error log or to a file.\n@param message The error message that should be logged.\n@param message_type Says where the error should go. The possible message types\nare as follows: error_log() log types 0 `message` is sent to PHP&#039;s system\nlogger, using the Operating System&#039;s system logging mechanism or a file,\ndepending on what the error_log configuration directive is set to. This\nis the default option. 1 `message` is sent by email to the address in the\n`destination` parameter. This is the only message type where the fourth\nparameter, `extra_headers` is used. 2 No longer an option. 3 `message` is\nappended to the file `destination`. A newline is not automatically added to\nthe end of the `message` string. 4 `message` is sent directly to the SAPI\nlogging handler.\n@param destination The destination. Its meaning depends on the `message_type`\nparameter as described above.\n@param extra_headers The extra headers. It&#039;s used when the `message_type`\nparameter is set to `1`. This message type uses the same internal function\nas mail() does.\n@return (PHP 4, PHP 5)\n
error_reporting error_reporting([int $level]) [int]\nSets which PHP errors are reported. The error_reporting() function sets the\nerror_reporting directive at runtime. PHP has many levels of errors, using\nthis function sets that level for the duration (runtime) of your script. If\nthe optional `level` is not set, error_reporting() will just return the\ncurrent error reporting level.\n@param level The new error_reporting level. It takes on either a bitmask,\nor named constants. Using named constants is strongly encouraged to ensure\ncompatibility for future versions. As error levels are added, the range of\nintegers increases, so older integer-based error levels will not always behave\nas expected. The available error level constants and the actual meanings of\nthese error levels are described in the predefined constants.\n@return (PHP 4, PHP 5)\n@see The display_errors directive\n@see The html_errors directive\n@see The xmlrpc_errors directive\n@see ini_set() - Sets the value of a configuration option\n
escapeshellarg escapeshellarg(string $arg) [string]\nEscape a string to be used as a shell argument. escapeshellarg() adds single\nquotes around a string and quotes/escapes any existing single quotes allowing\nyou to pass a string directly to a shell function and having it be treated\nas a single safe argument. This function should be used to escape individual\narguments to shell functions coming from user input. The shell functions\ninclude exec(), system() and the backtick operator.\n@param arg The argument that will be escaped.\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see escapeshellcmd() - Escape shell metacharacters\n@see exec() - Execute an external program\n@see popen() - Opens process file pointer\n@see system() - Execute an external program and display the output\n@see backtick operator\n
escapeshellcmd escapeshellcmd(string $command) [string]\nEscape shell metacharacters. escapeshellcmd() escapes any characters in a\nstring that might be used to trick a shell command into executing arbitrary\ncommands. This function should be used to make sure that any data coming from\nuser input is escaped before this data is passed to the exec() or system()\nfunctions, or to the backtick operator. Following characters are preceded\nby a backslash: `#&amp;;`|*?~&lt;>^()[]{}$\`, `\x0A` and `\xFF`. `&#039;`\nand `&quot;` are escaped only if they are not paired. In Windows, all these\ncharacters plus `%` are replaced by a space instead.\n@param command The command that will be escaped.\n@return (PHP 4, PHP 5)\n@see escapeshellarg() - Escape a string to be used as a shell argument\n@see exec() - Execute an external program\n@see popen() - Opens process file pointer\n@see system() - Execute an external program and display the output\n@see backtick operator\n
eval eval(string $code_str) [mixed]\nEvaluate a string as PHP code. Evaluates the string given in `code_str`\nas PHP code. Among other things, this can be useful for storing code in a\ndatabase text field for later execution. There are some factors to keep in\nmind when using eval(). Remember that the string passed must be valid PHP\ncode, including things like terminating statements with a semicolon so the\nparser doesn&#039;t die on the line after the eval(), and properly escaping\nthings in `code_str`. To mix HTML output and PHP code you can use a closing\nPHP tag to leave PHP mode. Also remember that variables given values under\neval() will retain these values in the main script afterwards.\n@param code_str The code string to be evaluated. `code_str` does not have\nto contain PHP Opening tags. A `return` statement will immediately terminate\nthe evaluation of the string .\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@see call_user_func() - Call a user function given by the first parameter\n
event_base_free event_base_free(resource $event_base) [void]\nDestroy event base. Destroys the specified `event_base` and frees all the\nresources associated. Note that it&#039;s not possible to destroy an event\nbase with events attached to it.\n@param event_base Valid event base resource.\n
event_base_loop event_base_loop(resource $event_base [, int $flags=0]) [int]\nHandle events. Starts event loop for the specified event base.\n@param event_base Valid event base resource.\n@param flags Optional parameter, which can take any combination of EVLOOP_ONCE\nand EVLOOP_NONBLOCK.\n@return (PECL libevent >= 0.0.1)\n
event_base_loopbreak event_base_loopbreak(resource $event_base) [bool]\nAbort event loop. Abort the active event loop immediately. The behaviour is\nsimilar to `break` statement.\n@param event_base Valid event base resource.\n@return (PECL libevent >= 0.0.1)\n
event_base_loopexit event_base_loopexit(resource $event_base [, int\n$timeout=-1]) [bool]\nExit loop after a time. The next event loop iteration after the given timer\nexpires will complete normally, then exit without blocking for events again.\n@param event_base Valid event base resource.\n@param timeout Optional timeout parameter (in microseconds).\n@return (PECL libevent >= 0.0.1)\n
event_base_new event_base_new(void) [resource]\nCreate and initialize new event base. Returns new event base, which can be\nused later in event_base_set(), event_base_loop() and other functions.\n@return (PECL libevent >= 0.0.1)\n
event_base_priority_init event_base_priority_init(resource $event_base,\nint $npriorities) [bool]\nSet the number of event priority levels. Sets the number of different event\npriority levels. By default all events are scheduled with the same priority\n(`npriorities`/2). Using event_base_priority_init() you can change the number\nof event priority levels and then set a desired priority for each event.\n@param event_base Valid event base resource.\n@param npriorities The number of event priority levels.\n@return (PECL libevent >= 0.0.2)\n
event_base_set event_base_set(resource $event, resource $event_base) [bool]\nAssociate event base with an event. Associates the `event_base` with the\n`event`.\n@param event Valid event resource.\n@param event_base Valid event base resource.\n@return (PECL libevent >= 0.0.1)\n
event_buffer_base_set event_buffer_base_set(resource $bevent, resource\n$event_base) [bool]\nAssociate buffered event with an event base. Assign the specified `bevent`\nto the `event_base`.\n@param bevent Valid buffered event resource.\n@param event_base Valid event base resource.\n@return (PECL libevent >= 0.0.1)\n
event_buffer_disable event_buffer_disable(resource $bevent, int $events) [bool]\nDisable a buffered event. Disables the specified buffered event.\n@param bevent Valid buffered event resource.\n@param events Any combination of EV_READ and EV_WRITE.\n@return (PECL libevent >= 0.0.1)\n
event_buffer_enable event_buffer_enable(resource $bevent, int $events) [bool]\nEnable a buffered event. Enables the specified buffered event.\n@param bevent Valid buffered event resource.\n@param events Any combination of EV_READ and EV_WRITE.\n@return (PECL libevent >= 0.0.1)\n
event_buffer_fd_set event_buffer_fd_set(resource $bevent, resource $fd) [void]\nChange a buffered event file descriptor. Changes the file descriptor on\nwhich the buffered event operates.\n@param bevent Valid buffered event resource.\n@param fd Valid PHP stream, must be castable to file descriptor.\n
event_buffer_free event_buffer_free(resource $bevent) [void]\nDestroy buffered event. Destroys the specified buffered event and frees all\nthe resources associated.\n@param bevent Valid buffered event resource.\n
event_buffer_new event_buffer_new(resource $stream, mixed $readcb, mixed\n$writecb, mixed $errorcb [, mixed $arg]) [resource]\nCreate new buffered event. Libevent provides an abstraction layer on top\nof the regular event API. Using buffered event you don&#039;t need to deal\nwith the I/O manually, instead it provides input and output buffers that\nget filled and drained automatically.\n@param stream Valid PHP stream resource. Must be castable to file descriptor.\n@param readcb Callback to invoke where there is data to read, or NULL if no\ncallback is desired.\n@param writecb Callback to invoke where the descriptor is ready for writing,\nor NULL if no callback is desired.\n@param errorcb Callback to invoke where there is an error on the descriptor,\ncannot be NULL.\n@param arg An argument that will be passed to each of the callbacks (optional).\n@return (PECL libevent >= 0.0.1)\n
event_buffer_priority_set event_buffer_priority_set(resource $bevent, int\n$priority) [bool]\nAssign a priority to a buffered event. Assign a priority to the `bevent`.\n@param bevent Valid buffered event resource.\n@param priority Priority level. Cannot be less than zero and cannot exceed\nmaximum priority level of the event base (see event_base_priority_init()).\n@return (PECL libevent >= 0.0.1)\n
event_buffer_read event_buffer_read(resource $bevent, int $data_size) [string]\nRead data from a buffered event. Reads data from the input buffer of the\nbuffered event.\n@param bevent Valid buffered event resource.\n@param data_size Data size in bytes.\n
event_buffer_set_callback event_buffer_set_callback(resource $event, mixed\n$readcb, mixed $writecb, mixed $errorcb [, mixed $arg]) [bool]\nSet or reset callbacks for a buffered event. Sets or changes existing\ncallbacks for the buffered `event`.\n@param event Valid buffered event resource.\n@param readcb Callback to invoke where there is data to read, or NULL if no\ncallback is desired.\n@param writecb Callback to invoke where the descriptor is ready for writing,\nor NULL if no callback is desired.\n@param errorcb Callback to invoke where there is an error on the descriptor,\ncannot be NULL.\n@param arg An argument that will be passed to each of the callbacks (optional).\n@return (PECL libevent >= 0.0.4)\n
event_buffer_timeout_set event_buffer_timeout_set(resource $bevent, int\n$read_timeout, int $write_timeout) [void]\nSet read and write timeouts for a buffered event. Sets the read and write\ntimeouts for the specified buffered event.\n@param bevent Valid buffered event resource.\n@param read_timeout Read timeout (in seconds).\n@param write_timeout Write timeout (in seconds).\n
event_buffer_watermark_set event_buffer_watermark_set(resource $bevent,\nint $events, int $lowmark, int $highmark) [void]\nSet the watermarks for read and write events. Sets the watermarks for read\nand write events. Libevent does not invoke read callback unless there is at\nleast `lowmark` bytes in the input buffer; if the read buffer is beyond the\n`highmark`, reading is stopped. On output, the write callback is invoked\nwhenever the buffered data falls below the `lowmark`.\n@param bevent Valid buffered event resource.\n@param events Any combination of EV_READ and EV_WRITE.\n@param lowmark Low watermark.\n@param highmark High watermark.\n
event_buffer_write event_buffer_write(resource $bevent, string $data [,\nint $data_size=-1]) [bool]\nWrite data to a buffered event. Writes data to the specified buffered\nevent. The data is appended to the output buffer and written to the descriptor\nwhen it becomes available for writing.\n@param bevent Valid buffered event resource.\n@param data The data to be written.\n@param data_size Optional size parameter. event_buffer_write() writes all the\n`data` by default.\n@return (PECL libevent >= 0.0.1)\n
event_del event_del(resource $event) [bool]\nRemove an event from the set of monitored events. Cancels the `event`.\n@param event Valid event resource.\n@return (PECL libevent >= 0.0.1)\n
event_free event_free(resource $event) [void]\nFree event resource. Frees previously created event resource.\n@param event Valid event resource.\n
event_new event_new(void) [resource]\nCreate new event. Creates and returns a new event resource.\n@return (PECL libevent >= 0.0.1)\n
event_set event_set(resource $event, mixed $fd, int $events, mixed $callback\n[, mixed $arg]) [bool]\nPrepare an event. Prepares the event to be used in event_add(). The event\nis prepared to call the function specified by the `callback` on the events\nspecified in parameter `events`, which is a set of the following flags:\nEV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE, EV_PERSIST and EV_SIGNAL. If\nEV_SIGNAL bit is set in parameter `events`, the `fd` is interpreted as signal\nnumber. After initializing the event, use event_base_set() to associate the\nevent with its event base. In case of matching event, these three arguments are\npassed to the `callback` function: `fd` Signal number or resource indicating\nthe stream. A flag indicating the event. Consists of the following flags:\nEV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE, EV_PERSIST and EV_SIGNAL. Optional\nparameter, previously passed to event_set() as `arg`.\n@param event Valid event resource.\n@param fd Valid PHP stream resource. The stream must be castable to file\ndescriptor, so you most likely won&#039;t be able to use any of filtered\nstreams.\n@param events A set of flags indicating the desired event, can be EV_READ\nand/or EV_WRITE. The additional flag EV_PERSIST makes the event to persist\nuntil event_del() is called, otherwise the callback is invoked only once.\n@param callback Callback function to be called when the matching event occurs.\n@param arg Optional callback parameter.\n@return (PECL libevent >= 0.0.1)\n
exec exec(string $command [, array &$output [, int &$return_var]]) [string]\nExecute an external program. exec() executes the given `command`.\n@param command The command that will be executed.\n@param output If the `output` argument is present, then the specified\narray will be filled with every line of output from the command. Trailing\nwhitespace, such as `\n`, is not included in this array. Note that if the\narray already contains some elements, exec() will append to the end of the\narray. If you do not want the function to append elements, call unset()\non the array before passing it to exec().\n@param return_var If the `return_var` argument is present along with the\n`output` argument, then the return status of the executed command will be\nwritten to this variable.\n@return (PHP 4, PHP 5)\n@see system() - Execute an external program and display the output\n@see passthru() - Execute an external program and display raw output\n@see escapeshellcmd() - Escape shell metacharacters\n@see pcntl_exec() - Executes specified program in current process space\n@see backtick operator\n
exif_imagetype exif_imagetype(string $filename) [int]\nDetermine the type of an image. exif_imagetype() reads the first bytes of an\nimage and checks its signature. exif_imagetype() can be used to avoid calls\nto other exif functions with unsupported file types or in conjunction with\n$_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to see\na specific image in the browser.\n@param filename The image being checked.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see image_type_to_mime_type() - Get Mime-Type for image-type returned by\ngetimagesize, exif_read_data, exif_thumbnail, exif_imagetype\n@see getimagesize() - Get the size of an image\n
exif_read_data exif_read_data(string $filename [, string $sections=NULL [,\nbool $arrays=false [, bool $thumbnail=false]]]) [array]\nReads the EXIF headers from JPEG or TIFF. exif_read_data() reads the EXIF\nheaders from a JPEG or TIFF image file. This way you can read meta data\ngenerated by digital cameras. EXIF headers tend to be present in JPEG/TIFF\nimages generated by digital cameras, but unfortunately each digital camera\nmaker has a different idea of how to actually tag their images, so you\ncan&#039;t always rely on a specific Exif header being present. `Height`\nand `Width` are computed the same way getimagesize() does so their values\nmust not be part of any header returned. Also, `html` is a height/width\ntext string to be used inside normal HTML. When an Exif header contains\na Copyright note, this itself can contain two values. As the solution is\ninconsistent in the Exif 2.10 standard, the `COMPUTED` section will return\nboth entries `Copyright.Photographer` and `Copyright.Editor` while the\n`IFD0` sections contains the byte array with the NULL character that splits\nboth entries. Or just the first entry if the datatype was wrong (normal\nbehaviour of Exif). The `COMPUTED` will also contain the entry `Copyright`\nwhich is either the original copyright string, or a comma separated list of\nthe photo and editor copyright. The tag `UserComment` has the same problem\nas the Copyright tag. It can store two values. First the encoding used,\nand second the value itself. If so the `IFD` section only contains the\nencoding or a byte array. The `COMPUTED` section will store both in the\nentries `UserCommentEncoding` and `UserComment`. The entry `UserComment` is\navailable in both cases so it should be used in preference to the value in\n`IFD0` section. exif_read_data() also validates EXIF data tags according to\nthe EXIF specification (&raquo; http://exif.org/Exif2-2.PDF, page 20). Note:\nWindows Me/XP can both wipe the Exif headers when connecting to a camera.\n@param filename The name of the image file being read. This cannot be an URL.\n@param sections Is a comma separated list of sections that need to\nbe present in file to produce a result array. If none of the requested\nsections could be found the return value is FALSE. FILE FileName, FileSize,\nFileDateTime, SectionsFound COMPUTED html, Width, Height, IsColor, and more\nif available. Height and Width are computed the same way getimagesize()\ndoes so their values must not be part of any header returned. Also, `html`\nis a height/width text string to be used inside normal HTML. ANY_TAG Any\ninformation that has a Tag e.g. `IFD0`, `EXIF`, ... IFD0 All tagged data of\nIFD0. In normal imagefiles this contains image size and so forth. THUMBNAIL A\nfile is supposed to contain a thumbnail if it has a second `IFD`. All tagged\ninformation about the embedded thumbnail is stored in this section. COMMENT\nComment headers of JPEG images. EXIF The EXIF section is a sub section of\n`IFD0`. It contains more detailed information about an image. Most of these\nentries are digital camera related.\n@param arrays Specifies whether or not each section becomes an array. The\n`sections` `COMPUTED`, `THUMBNAIL`, and `COMMENT` always become arrays as\nthey may contain values whose names conflict with other sections.\n@param thumbnail When set to TRUE the thumbnail itself is read. Otherwise,\nonly the tagged data is read.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see exif_thumbnail() - Retrieve the embedded thumbnail of a TIFF or JPEG image\n@see getimagesize() - Get the size of an image\n
exif_tagname exif_tagname(int $index) [string]\nGet the header name for an index.\n@param index The Tag ID for which a Tag Name will be looked up.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see exif_imagetype() - Determine the type of an image\n@see &raquo; EXIF Specification\n@see &raquo; EXIF Tags\n
exif_thumbnail exif_thumbnail(string $filename [, int &$width [, int &$height\n[, int &$imagetype]]]) [string]\nRetrieve the embedded thumbnail of a TIFF or JPEG image. exif_thumbnail()\nreads the embedded thumbnail of a TIFF or JPEG image. If you want to deliver\nthumbnails through this function, you should send the mimetype information\nusing the header() function. It is possible that exif_thumbnail() cannot\ncreate an image but can determine its size. In this case, the return value\nis FALSE but `width` and `height` are set.\n@param filename The name of the image file being read. This image contains\nan embedded thumbnail.\n@param width The return width of the returned thumbnail.\n@param height The returned height of the returned thumbnail.\n@param imagetype The returned image type of the returned thumbnail. This is\neither TIFF or JPEG.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see exif_read_data() - Reads the EXIF headers from JPEG or TIFF\n@see image_type_to_mime_type() - Get Mime-Type for image-type returned by\ngetimagesize, exif_read_data, exif_thumbnail, exif_imagetype\n
exit exit([string $status]) [void]\nOutput a message and terminate the current script. Terminates execution of\nthe script. Shutdown functions and object destructors will always be executed\neven if exit() is called.\n@param status If `status` is a string, this function prints the `status` just\nbefore exiting. If `status` is an integer, that value will be used as the\nexit status and not printed. Exit statuses should be in the range 0 to 254,\nthe exit status 255 is reserved by PHP and shall not be used. The status 0\nis used to terminate the program successfully. Note: PHP >= 4.2.0 does NOT\nprint the `status` if it is an integer.\n@return (PHP 4, PHP 5)\n@note Note: Because this is a language construct and not a function, it\ncannot be called using variable functions\n@note Note: This language construct is equivalent to die().\n@see register_shutdown_function() - Register a function for execution\non shutdown\n
exp exp(float $arg) [float]\nCalculates the exponent of e. Returns e raised to the power of `arg`. Note:\n&#039;e&#039; is the base of the natural system of logarithms, or approximately\n2.718282.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see log() - Natural logarithm\n@see pow() - Exponential expression\n
expect_expectl expect_expectl(resource $expect, array $cases [, array &$match])\n[int]\nWaits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an EOF is seen. Waits\n  until the output from a process matches one of the patterns, a specified\n  time period has passed, or an EOF is seen. If `match` is provided, then it\n  is filled with the result of search. The matched string can be found in\n  `match[0]`. The match substrings (according to the parentheses) in the\n  original pattern can be found in `match[1]`, `match[2]`, and so on, up to\n  `match[9]` (the limitation of libexpect).\n@param expect An Expect stream, previously opened with expect_popen().\n@param cases An array of expect cases. Each expect case is an indexed array,\nas described in the following table: Expect Case Array Index Key Value\nType Description Is Mandatory Default Value 0 string pattern, that will\nbe matched against the output from the stream yes &nbsp; 1 mixed value,\nthat will be returned by this function, if the pattern matches yes &nbsp;\n2 integer pattern type, one of: EXP_GLOB, EXP_EXACT or EXP_REGEXP no EXP_GLOB\n@return (PECL expect >= 0.1.0)\n@see expect_popen() - Execute command via Bourne shell, and open the PTY\nstream to the process\n
expect_popen expect_popen(string $command) [resource]\nExecute command via Bourne shell, and open the PTY stream to\n  the process. Execute command via Bourne shell, and open the PTY stream to\n  the process.\n@param command Command to execute.\n@return (PECL expect >= 0.1.0)\n@see popen() - Opens process file pointer\n
explode explode(string $delimiter, string $string [, int $limit]) [array]\nSplit a string by string. Returns an array of strings, each of which is a\nsubstring of `string` formed by splitting it on boundaries formed by the\nstring `delimiter`.\n@param delimiter The boundary string.\n@param string The input string.\n@param limit If `limit` is set and positive, the returned array will contain\na maximum of `limit` elements with the last element containing the rest of\n`string`. If the `limit` parameter is negative, all components except the\nlast -`limit` are returned. If the `limit` parameter is zero, then this is\ntreated as 1.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n@see preg_split() - Split string by a regular expression\n@see str_split() - Convert a string to an array\n@see str_word_count() - Return information about words used in a string\n@see strtok() - Tokenize string\n@see implode() - Join array elements with a string\n
dbplus_rzap dbplus_rzap(resource $relation) [int]\nRemove all tuples from relation. dbplus_rzap() will remove all tuples from\n`relation`.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_savepos dbplus_savepos(resource $relation) [int]\nSave position.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_setindex dbplus_setindex(resource $relation, string $idx_name) [int]\nSet index.\n@param relation A relation opened by dbplus_open().\n@param idx_name\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_setindexbynumber dbplus_setindexbynumber(resource $relation, int\n$idx_number) [int]\nSet index by number.\n@param relation A relation opened by dbplus_open().\n@param idx_number\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_sql dbplus_sql(string $query [, string $server [, string $dbpath]])\n[resource]\nPerform SQL query.\n@param query\n@param server\n@param dbpath\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_tcl dbplus_tcl(int $sid, string $script) [string]\nExecute TCL code on server side. A db++ server will prepare a TCL interpreter\nfor each client connection. This interpreter will enable the server to\nexecute TCL code provided by the client as a sort of stored procedures to\nimprove the performance of database operations by avoiding client/server\ndata transfers and context switches. dbplus_tcl() needs to pass the client\nconnection id the TCL `script` code should be executed by. dbplus_resolve()\nwill provide this connection id. The function will return whatever the TCL\ncode returns or a TCL error message if the TCL code fails.\n@param sid\n@param script\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_resolve() - Resolve host information for relation\n
dbplus_tremove dbplus_tremove(resource $relation, array $tuple [, array\n&$current]) [int]\nRemove tuple and return new current tuple. dbplus_tremove() removes `tuple`\nfrom `relation` if it perfectly matches a tuple within the relation. `current`,\nif given, will contain the data of the new current tuple after calling\ndbplus_tremove().\n@param relation A relation opened by dbplus_open().\n@param tuple\n@param current\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_undo dbplus_undo(resource $relation) [int]\nUndo.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_undoprepare dbplus_undoprepare(resource $relation) [int]\nPrepare undo.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_unlockrel dbplus_unlockrel(resource $relation) [int]\nGive up write lock on relation. Release a write lock previously obtained\nby dbplus_lockrel().\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_unselect dbplus_unselect(resource $relation) [int]\nRemove a constraint from relation. Calling dbplus_unselect() will remove a\nconstraint previously set by dbplus_find() on `relation`.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_update dbplus_update(resource $relation, array $old, array $new) [int]\nUpdate specified tuple in relation. dbplus_update() replaces the `old` tuple\nwith the data from the `new` one, only if the `old` completely matches a\ntuple within `relation`.\n@param relation A relation opened by dbplus_open().\n@param old The old tuple.\n@param new The new tuple.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_xlockrel dbplus_xlockrel(resource $relation) [int]\nRequest exclusive lock on relation. Request an exclusive lock on `relation`\npreventing even read access from other clients.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_xunlockrel() - Free exclusive lock on relation\n
dbplus_xunlockrel dbplus_xunlockrel(resource $relation) [int]\nFree exclusive lock on relation. Releases an exclusive lock previously\nobtained by dbplus_xlockrel().\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbx_close dbx_close(object $link_identifier) [int]\nClose an open connection/database.\n@param link_identifier The DBX link object to close.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@note Note: Always refer to the module-specific documentation as well.\n@see dbx_connect() - Open a connection/database\n
dbx_compare dbx_compare(array $row_a, array $row_b, string $column_key [,\nint $flags=DBX_CMP_ASC | DBX_CMP_NATIVE]) [int]\nCompare two rows for sorting purposes. dbx_compare() is a helper function\nfor dbx_sort() to ease the make and use of the custom sorting function.\n@param row_a First row\n@param row_b Second row\n@param column_key The compared column\n@param flags The `flags` can be set to specify comparison direction:\nDBX_CMP_ASC - ascending order DBX_CMP_DESC - descending order and the\npreferred comparison type: DBX_CMP_NATIVE - no type conversion DBX_CMP_TEXT -\ncompare items as strings DBX_CMP_NUMBER - compare items numerically One of\nthe direction and one of the type constant can be combined with bitwise OR\noperator (|).\n@return (PHP 4 >= 4.1.0, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@see dbx_sort() - Sort a result from a dbx_query by a custom sort function\n
dbx_connect dbx_connect(mixed $module, string $host, string $database,\nstring $username, string $password [, int $persistent]) [object]\nOpen a connection/database. Opens a connection to a database.\n@param module The `module` parameter can be either a string or a constant,\nthough the latter form is preferred. The possible values are given below, but\nkeep in mind that they only work if the module is actually loaded. DBX_MYSQL or\n&quot;mysql&quot; DBX_ODBC or &quot;odbc&quot; DBX_PGSQL or &quot;pgsql&quot;\nDBX_MSSQL or &quot;mssql&quot; DBX_FBSQL or &quot;fbsql&quot; DBX_SYBASECT\nor &quot;sybase_ct&quot; DBX_OCI8 or &quot;oci8&quot; DBX_SQLITE or\n&quot;sqlite&quot;\n@param host The SQL server host\n@param database The database name\n@param username The username\n@param password The password\n@param persistent The `persistent` parameter can be set to DBX_PERSISTENT,\nif so, a persistent connection will be created.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@note Note: Always refer to the module-specific documentation as well.\n@see dbx_close() - Close an open connection/database\n
dbx_error dbx_error(object $link_identifier) [string]\nReport the error message of the latest function call in the module. dbx_error()\nreturns the last error message.\n@param link_identifier The DBX link object returned by dbx_connect()\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@note Note: Always refer to the module-specific documentation as well. The\nerror message for Microsoft SQL Server is actually the result of the\nmssql_get_last_message() function. The error message for Oracle (oci8)\nis not implemented yet.\n
dbx_escape_string dbx_escape_string(object $link_identifier, string $text)\n[string]\nEscape a string so it can safely be used in an sql-statement. Escape the\ngiven string so that it can safely be used in an sql-statement.\n@param link_identifier The DBX link object returned by dbx_connect()\n@param text The string to escape.\n@return (PHP 4 >= 4.3.0, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@see dbx_query() - Send a query and fetch all results (if any)\n
dbx_fetch_row dbx_fetch_row(object $result_identifier) [mixed]\nFetches rows from a query-result that had the \n  DBX_RESULT_UNBUFFERED flag set. dbx_fetch_row() fetches rows from a\n  result identifier that had the DBX_RESULT_UNBUFFERED flag set. When the\n  DBX_RESULT_UNBUFFERED is not set in the query, dbx_fetch_row() will fail\n  as all rows have already been fetched into the results data property. As\n  a side effect, the rows property of the query-result object is incremented\n  for each successful call to dbx_fetch_row().\n@param result_identifier A result set returned by dbx_query().\n@return (PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@see dbx_query() - Send a query and fetch all results (if any)\n
dbx_query dbx_query(object $link_identifier, string $sql_statement [, int\n$flags]) [mixed]\nSend a query and fetch all results (if any). Sends a query and fetch all\nresults.\n@param link_identifier The DBX link object returned by dbx_connect()\n@param sql_statement SQL statement. Data inside the query should be properly\nescaped.\n@param flags The `flags` parameter is used to control the amount of information\nthat is returned. It may be any combination of the following constants\nwith the bitwise OR operator (|). The DBX_COLNAMES_* flags override the\ndbx.colnames_case setting from php.ini. DBX_RESULT_INDEX It is always set,\nthat is, the returned object has a data property which is a 2 dimensional\narray indexed numerically. For example, in the expression `data[2][3]` `2`\nstands for the row (or record) number and `3` stands for the column (or field)\nnumber. The first row and column are indexed at 0. If DBX_RESULT_ASSOC is\nalso specified, the returning object contains the information related to\nDBX_RESULT_INFO too, even if it was not specified.\n@param  DBX_RESULT_INFO It provides info about columns, such as field names\nand field types.\n@param  DBX_RESULT_ASSOC It effects that the field values can be\naccessed with the respective column names used as keys to the returned\nobject&#039;s data property. Associated results are actually references\nto the numerically indexed data, so modifying `data[0][0]` causes that\n`data[0][&#039;field_name_for_first_column&#039;]` is modified as well.\n@param  DBX_RESULT_UNBUFFERED This flag will not create the data property,\nand the rows property will initially be 0. Use this flag for large datasets,\nand use dbx_fetch_row() to retrieve the results row by row. The dbx_fetch_row()\nfunction will return rows that are conformant to the flags set with this\nquery. Incidentally, it will also update the rows each time it is called.\n@param  DBX_COLNAMES_UNCHANGED The case of the returned column names will\nnot be changed.\n@param  DBX_COLNAMES_UPPERCASE The case of the returned column names will\nbe changed to uppercase.\n@param  DBX_COLNAMES_LOWERCASE The case of the returned column names will\nbe changed to lowercase.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@note Note: Always refer to the module-specific documentation as well. Column\nnames for queries on an Oracle database are returned in lowercase.\n@see dbx_escape_string() - Escape a string so it can safely be used in\nan sql-statement\n@see dbx_fetch_row() - Fetches rows from a query-result that had the\nDBX_RESULT_UNBUFFERED flag set\n@see dbx_connect() - Open a connection/database\n
dbx_sort dbx_sort(object $result, string $user_compare_function) [bool]\nSort a result from a dbx_query by a custom sort function. Sort a result from\na dbx_query() call with a custom sort function.\n@param result A result set returned by dbx_query().\n@param user_compare_function The user-defined comparison function. It must\naccept two arguments and return an integer less than, equal to, or greater\nthan zero if the first argument is considered to be respectively less than,\nequal to, or greater than the second.\n@return (PHP 4 >= 4.0.6, PHP 5 &lt;= 5.0.5, PECL dbx >= 1.1.0)\n@note Note: It is always better to use `ORDER BY` `SQL` clause instead of\ndbx_sort() if possible.\n@see dbx_compare() - Compare two rows for sorting purposes\n
dcgettext dcgettext(string $domain, string $message, int $category) [string]\nOverrides the domain for a single lookup. This function allows you to override\nthe current domain for a single message lookup.\n@param domain The domain\n@param message The message\n@param category The category\n@return (PHP 4, PHP 5)\n@see gettext() - Lookup a message in the current domain\n
dcngettext dcngettext(string $domain, string $msgid1, string $msgid2, int $n,\nint $category) [string]\nPlural version of dcgettext. This function allows you to override the current\ndomain for a single plural message lookup.\n@param domain The domain\n@param msgid1\n@param msgid2\n@param n\n@param category\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ngettext() - Plural version of gettext\n
deaggregate deaggregate(object $object [, string $class_name]) [void]\nRemoves the aggregated methods and properties from an object. Removes the\nmethods and properties from classes that were aggregated to an object.\n@param object\n@param class_name If the optional `class_name` parameters is passed, only\nthose methods and properties defined in that class are removed, otherwise\nall aggregated methods and properties are eliminated.\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate()\n
debug_backtrace debug_backtrace([int $options=DEBUG_BACKTRACE_PROVIDE_OBJECT\n[, int $limit=0]]) [array]\nGenerates a backtrace. debug_backtrace() generates a PHP backtrace.\n@param options Since 5.3.6, this parameter is a bitmask for the following\noptions: debug_backtrace() options DEBUG_BACKTRACE_PROVIDE_OBJECT Whether or\nnot to populate the &quot;object&quot; index. DEBUG_BACKTRACE_IGNORE_ARGS\nWhether or not to omit the &quot;args&quot; index and thus all the method\narguments to save memory. Before 5.3.6, only value recognized is TRUE or FALSE,\nwhich is the same as setting and unsetting DEBUG_BACKTRACE_PROVIDE_OBJECT\noption.\n@param limit Since 5.4.0, this parameter can be used to limit the number of\nstack frames returned. By default (limit=0) it returns all stack frames.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see trigger_error() - Generates a user-level error/warning/notice message\n@see debug_print_backtrace() - Prints a backtrace\n
debug_print_backtrace debug_print_backtrace([int\n$options=DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit=0]]) [void]\nPrints a backtrace. debug_print_backtrace() prints a PHP backtrace. It prints\nthe function calls, included/required files and eval()ed stuff.\n@param options Since 5.3.6, this parameter is a bitmask for the following\noptions: debug_backtrace() options DEBUG_BACKTRACE_PROVIDE_OBJECT Whether or\nnot to populate the &quot;object&quot; index. DEBUG_BACKTRACE_IGNORE_ARGS\nWhether or not to omit the &quot;args&quot; index and thus all the method\narguments to save memory.\n@param limit Since 5.4.0, this parameter can be used to limit the number of\nstack frames printed. By default (limit=0) it prints all stack frames.\n@return (PHP 5)\n@see debug_backtrace() - Generates a backtrace\n
debug_zval_dump debug_zval_dump(mixed $variable) [void]\nDumps a string representation of an internal zend value to output. Dumps a\nstring representation of an internal zend value to output.\n@param variable The variable being evaluated.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see var_dump() - Dumps information about a variable\n@see debug_backtrace() - Generates a backtrace\n@see References Explained\n@see &raquo; References Explained (by Derick Rethans)\n
decbin decbin(int $number) [string]\nDecimal to binary. Returns a string containing a binary representation of\nthe given `number` argument.\n@param number Decimal value to convert Range of inputs on 32-bit\nmachines positive `number` negative `number` return value 0 &nbsp;\n0 1 &nbsp; 1 2 &nbsp; 10 ... normal progression ... 2147483646 &nbsp;\n1111111111111111111111111111110 2147483647 (largest signed integer) &nbsp;\n1111111111111111111111111111111 (31 1&#039;s) 2147483648 -2147483648\n10000000000000000000000000000000 ... normal progression ... 4294967294 -2\n11111111111111111111111111111110 4294967295 (largest unsigned integer)\n-1 11111111111111111111111111111111 (32 1&#039;s) Range of inputs on\n64-bit machines positive `number` negative `number` return value 0 &nbsp;\n0 1 &nbsp; 1 2 &nbsp; 10 ... normal progression ... 9223372036854775806\n&nbsp; 111111111111111111111111111111111111111111111111111111111111110\n9223372036854775807 (largest signed integer) &nbsp;\n111111111111111111111111111111111111111111111111111111111111111\n(63 1&#039;s) &nbsp; -9223372036854775808\n1000000000000000000000000000000000000000000000000000000000000000\n... normal progression ... &nbsp; -2\n1111111111111111111111111111111111111111111111111111111111111110 &nbsp; -1\n1111111111111111111111111111111111111111111111111111111111111111 (64 1&#039;s)\n@return (PHP 4, PHP 5)\n@see bindec() - Binary to decimal\n@see decoct() - Decimal to octal\n@see dechex() - Decimal to hexadecimal\n@see base_convert() - Convert a number between arbitrary bases\n@see printf() - Output a formatted string, using `%b`, `%032b` or `%064b`\nas the format\n@see sprintf(), using `%b`, `%032b` or `%064b` as the format\n
dechex dechex(int $number) [string]\nDecimal to hexadecimal. Returns a string containing a hexadecimal\nrepresentation of the given `number` argument. The largest number that can\nbe converted is 4294967295 in decimal resulting to &quot;ffffffff&quot;.\n@param number Decimal value to convert\n@return (PHP 4, PHP 5)\n@see hexdec() - Hexadecimal to decimal\n@see decbin() - Decimal to binary\n@see decoct() - Decimal to octal\n@see base_convert() - Convert a number between arbitrary bases\n
decoct decoct(int $number) [string]\nDecimal to octal. Returns a string containing an octal representation of\nthe given `number` argument. The largest number that can be converted is\n4294967295 in decimal resulting to &quot;37777777777&quot;.\n@param number Decimal value to convert\n@return (PHP 4, PHP 5)\n@see octdec() - Octal to decimal\n@see decbin() - Decimal to binary\n@see dechex() - Decimal to hexadecimal\n@see base_convert() - Convert a number between arbitrary bases\n
define_syslog_variables define_syslog_variables(void) [void]\nInitializes all syslog related variables. Initializes all variables used in\nthe syslog functions.\n@return (PHP 4, PHP 5)\n@see openlog() - Open connection to system logger\n@see syslog() - Generate a system log message\n@see closelog() - Close connection to system logger\n
define define(string $name, mixed $value [, bool $case_insensitive=false])\n[bool]\nDefines a named constant. Defines a named constant at runtime.\n@param name The name of the constant.\n@param value The value of the constant; only scalar and null values are\nallowed. Scalar values are integer, float, string or boolean values. It is\npossible to define resource constants, however it is not recommended and\nmay cause unpredictable behavior.\n@param case_insensitive If set to TRUE, the constant will be defined\ncase-insensitive. The default behavior is case-sensitive; i.e. `CONSTANT`\nand `Constant` represent different values. Note: Case-insensitive constants\nare stored as lower-case.\n@return (PHP 4, PHP 5)\n@see defined() - Checks whether a given named constant exists\n@see constant() - Returns the value of a constant\n@see The section on Constants\n
defined defined(string $name) [bool]\nChecks whether a given named constant exists. Checks whether the given constant\nexists and is defined. Note: If you want to see if a variable exists, use\nisset() as defined() only applies to constants. If you want to see if a\nfunction exists, use function_exists().\n@param name The constant name.\n@return (PHP 4, PHP 5)\n@see define() - Defines a named constant\n@see constant() - Returns the value of a constant\n@see get_defined_constants() - Returns an associative array with the names\nof all the constants and their values\n@see function_exists() - Return TRUE if the given function has been defined\n@see The section on Constants\n
deg2rad deg2rad(float $number) [float]\nConverts the number in degrees to the radian equivalent. This function converts\n`number` from degrees to the radian equivalent.\n@param number Angular value in degrees\n@return (PHP 4, PHP 5)\n@see rad2deg() - Converts the radian number to the equivalent number in degrees\n
delete delete(void) [void]\nSee unlink or unset. This is a dummy manual entry to satisfy those people\nwho are looking for unlink() or unset() in the wrong place.\n@return delete &mdash; See unlink() or unset()\n@see unlink() - Deletes a file\n@see unset() - Unset a given variable\n
dgettext dgettext(string $domain, string $message) [string]\nOverride the current domain. The dgettext() function allows you to override\nthe current `domain` for a single message lookup.\n@param domain The domain\n@param message The message\n@return (PHP 4, PHP 5)\n@see gettext() - Lookup a message in the current domain\n
die die\nEquivalent to exit.\n
dio_close dio_close(resource $fd) [void]\nCloses the file descriptor given by fd. The function dio_close() closes the\nfile descriptor `fd`.\n@param fd The file descriptor returned by dio_open().\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@see dio_open() - Opens a file (creating it if necessary) at a lower level\nthan the C library input/ouput stream functions allow.\n
dio_fcntl dio_fcntl(resource $fd, int $cmd [, mixed $args]) [mixed]\nPerforms a c library fcntl on fd. The dio_fcntl() function performs the\noperation specified by `cmd` on the file descriptor `fd`. Some commands\nrequire additional arguments `args` to be supplied.\n@param fd The file descriptor returned by dio_open().\n@param cmd Can be one of the following operations: F_SETLK - Lock is\nset or cleared. If the lock is held by someone else dio_fcntl() returns\n-1. F_SETLKW - like F_SETLK, but in case the lock is held by someone else,\ndio_fcntl() waits until the lock is released. F_GETLK - dio_fcntl() returns\nan associative array (as described above) if someone else prevents lock. If\nthere is no obstruction key &quot;type&quot; will set to F_UNLCK. F_DUPFD -\nfinds the lowest numbered available file descriptor greater than or equal to\n`args` and returns them. F_SETFL - Sets the file descriptors flags to the\nvalue specified by `args`, which can be O_APPEND, O_NONBLOCK or O_ASYNC. To\nuse O_ASYNC you will need to use the PCNTL extension.\n@param args `args` is an associative array, when `cmd` is F_SETLK or\nF_SETLLW, with the following keys: &quot;start&quot; - offset where lock\nbegins &quot;length&quot; - size of locked area. zero means to end of file\n&quot;wenth&quot; - Where l_start is relative to: can be SEEK_SET, SEEK_END\nand SEEK_CUR &quot;type&quot; - type of lock: can be F_RDLCK (read lock),\nF_WRLCK (write lock) or F_UNLCK (unlock)\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@note Note: This function is not implemented on Windows platforms.\n
dio_open dio_open(string $filename, int $flags [, int $mode=0]) [resource]\nOpens a file (creating it if necessary) at a lower level than the\n   C library input/ouput stream functions allow.. dio_open() opens a file\n   and returns a new file descriptor for it.\n@param filename The pathname of the file to open.\n@param flags The `flags` parameter is a bitwise-ORed value comprising flags\nfrom the following list. This value must include one of O_RDONLY, O_WRONLY,\nor O_RDWR. Additionally, it may include any combination of the other flags from\nthis list. O_RDONLY - opens the file for read access. O_WRONLY - opens the file\nfor write access. O_RDWR - opens the file for both reading and writing. O_CREAT\n- creates the file, if it doesn&#039;t already exist. O_EXCL - if both\nO_CREAT and O_EXCL are set and the file already exists, causes dio_open()\nto fail. O_TRUNC - if the file exists and is opened for write access, the\nfile will be truncated to zero length. O_APPEND - write operations write\ndata at the end of the file. O_NONBLOCK - sets non blocking mode. O_NOCTTY -\nprevent the OS from assigning the opened file as the process&#039;s controlling\nterminal when opening a TTY device file.\n@param mode If `flags` contains O_CREAT, `mode` will set the permissions of\nthe file (creation permissions). `Mode` is required for correct operation when\nO_CREAT is specified in mode and is ignored otherwise. The actual permissions\nassigned to the created file will be affected by the process&#039;s umask\nsetting as per usual.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@see dio_close() - Closes the file descriptor given by fd\n
dio_read dio_read(resource $fd [, int $len=1024]) [string]\nReads bytes from a file descriptor. The function dio_read() reads and returns\n`len` bytes from file with descriptor `fd`.\n@param fd The file descriptor returned by dio_open().\n@param len The number of bytes to read. If not specified, dio_read() reads\n1K sized block.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@see dio_write() - Writes data to fd with optional truncation at length\n
dio_seek dio_seek(resource $fd, int $pos [, int $whence=SEEK_SET]) [int]\nSeeks to pos on fd from whence. The function dio_seek() is used to change\nthe file position of the given file descriptor.\n@param fd The file descriptor returned by dio_open().\n@param pos The new position.\n@param whence Specifies how the position `pos` should be interpreted:\nSEEK_SET (default) - specifies that `pos` is specified from the beginning of\nthe file. SEEK_CUR - Specifies that `pos` is a count of characters from the\ncurrent file position. This count may be positive or negative. SEEK_END -\nSpecifies that `pos` is a count of characters from the end of the file. A\nnegative count specifies a position within the current extent of the file;\na positive count specifies a position past the current end. If you set the\nposition past the current end, and actually write data, you will extend the\nfile with zeros up to that position.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n
dio_stat dio_stat(resource $fd) [array]\nGets stat information about the file descriptor fd. dio_stat() returns\ninformation about the given file descriptor.\n@param fd The file descriptor returned by dio_open().\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n
dio_tcsetattr dio_tcsetattr(resource $fd, array $options) [bool]\nSets terminal attributes and baud rate for a serial port. dio_tcsetattr()\nsets the terminal attributes and baud rate of the open `fd`.\n@param fd The file descriptor returned by dio_open().\n@param options The currently available options are: &#039;baud&#039;\n- baud rate of the port - can be 38400,19200,9600,4800,2400,1800,\n1200,600,300,200,150,134,110,75 or 50, default value is 9600. &#039;bits&#039;\n- data bits - can be 8,7,6 or 5. Default value is 8. &#039;stop&#039; -\nstop bits - can be 1 or 2. Default value is 1. &#039;parity&#039; - can be\n0,1 or 2. Default value is 0.\n@return (PHP 4 >= 4.3.0, PHP 5 &lt;= 5.0.5)\n@note Note: This function is not implemented on Windows platforms.\n
dio_truncate dio_truncate(resource $fd, int $offset) [bool]\nTruncates file descriptor fd to offset bytes. dio_truncate() truncates a\nfile to at most `offset` bytes in size. If the file previously was larger\nthan this size, the extra data is lost. If the file previously was shorter,\nit is unspecified whether the file is left unchanged or is extended. In the\nlatter case the extended part reads as zero bytes.\n@param fd The file descriptor returned by dio_open().\n@param offset The offset in bytes.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@note Note: This function is not implemented on Windows platforms.\n
dio_write dio_write(resource $fd, string $data [, int $len=0]) [int]\nWrites data to fd with optional truncation at length. dio_write() writes up to\n`len` bytes from `data` to file `fd`.\n@param fd The file descriptor returned by dio_open().\n@param data The written data.\n@param len The length of data to write in bytes. If not specified, the\nfunction writes all the data to the specified file.\n@return (PHP 4 >= 4.2.0, PHP 5 &lt;= 5.0.5)\n@see dio_read() - Reads bytes from a file descriptor\n
dirname dirname(string $path) [string]\nReturns parent directory's path. Given a string containing the path of a\nfile or directory, this function will return the parent directory&#039;s path.\n@param path A path. On Windows, both slash (`/`) and backslash (`\`) are\nused as directory separator character. In other environments, it is the\nforward slash (`/`).\n@return (PHP 4, PHP 5)\n@note Note: dirname() operates naively on the input string, and is not aware\nof the actual filesystem, or path components such as &quot;`..`&quot;.\n@note Note: dirname() is locale aware, so for it to see the correct directory\nname with multibyte character paths, the matching locale must be set using\nthe setlocale() function.\n@note Note: Since PHP 4.3.0, you will often get a slash or a dot back from\ndirname() in situations where the older functionality would have given you\nthe empty string.\n@see basename() - Returns trailing name component of path\n@see pathinfo() - Returns information about a file path\n@see realpath() - Returns canonicalized absolute pathname\n
disk_free_space disk_free_space(string $directory) [float]\nReturns available space on filesystem or disk partition. Given a string\ncontaining a directory, this function will return the number of bytes\navailable on the corresponding filesystem or disk partition.\n@param directory A directory of the filesystem or disk partition. Note:\nGiven a file name instead of a directory, the behaviour of the function is\nunspecified and may differ between operating systems and PHP versions.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@see disk_total_space() - Returns the total size of a filesystem or disk\npartition\n
disk_total_space disk_total_space(string $directory) [float]\nReturns the total size of a filesystem or disk partition. Given a string\ncontaining a directory, this function will return the total number of bytes\non the corresponding filesystem or disk partition.\n@param directory A directory of the filesystem or disk partition.\n@return (PHP 4 >= 4.1.0, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@see disk_free_space() - Returns available space on filesystem or disk\npartition\n
diskfreespace diskfreespace\nAlias of disk_free_space.\n
dl dl(string $library) [bool]\nLoads a PHP extension at runtime. Loads the PHP extension given by the\nparameter `library`. Use extension_loaded() to test whether a given extension\nis already available or not. This works on both built-in extensions and\ndynamically loaded ones (either through php.ini or dl()). This function has\nbeen removed from some SAPI&#039;s in PHP 5.3.\n@param library This parameter is only the filename of the extension\nto load which also depends on your platform. For example, the sockets\nextension (if compiled as a shared module, not the default!) would be\ncalled sockets.so on Unix platforms whereas it is called php_sockets.dll\non the Windows platform. The directory where the extension is loaded from\ndepends on your platform: Windows - If not explicitly set in the php.ini,\nthe extension is loaded from C:\php4\extensions\ (PHP4) or C:\php5\ (PHP5) by\ndefault. Unix - If not explicitly set in the php.ini, the default extension\ndirectory depends on whether PHP has been built with `--enable-debug` or\nnot whether PHP has been built with (experimental) ZTS (Zend Thread Safety)\nsupport or not the current internal `ZEND_MODULE_API_NO` (Zend internal\nmodule API number, which is basically the date on which a major module\nAPI change happened, e.g. `20010901`) Taking into account the above,\nthe directory then defaults to `&lt;install-dir>/lib/php/extensions/\n&lt;debug-or-not>-&lt;zts-or-not>-ZEND_MODULE_API_NO`,\ne.g. /usr/local/php/lib/php/extensions/debug-non-zts-20010901 or\n/usr/local/php/lib/php/extensions/no-debug-zts-20010901.\n@return (PHP 4, PHP 5)\n@note Note: dl() is not supported when PHP is built with ZTS support. Use\nthe Extension Loading Directives instead.\n@note Note: dl() is case sensitive on Unix platforms.\n@note Note: This function is disabled when PHP is running in safe mode.\n@see Extension Loading Directives\n@see extension_loaded() - Find out whether an extension is loaded\n
dngettext dngettext(string $domain, string $msgid1, string $msgid2, int $n)\n[string]\nPlural version of dgettext. The dngettext() function allows you to override\nthe current `domain` for a single plural message lookup.\n@param domain The domain\n@param msgid1\n@param msgid2\n@param n\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see ngettext() - Plural version of gettext\n
dns_check_record dns_check_record\nAlias of checkdnsrr.\n
dns_get_mx dns_get_mx\nAlias of getmxrr.\n
dns_get_record dns_get_record(string $hostname [, int $type=DNS_ANY [,\narray &$authns [, array &$addtl]]]) [array]\nFetch DNS Resource Records associated with a hostname. Fetch DNS Resource\nRecords associated with the given `hostname`.\n@param hostname `hostname` should be a valid DNS hostname such as\n&quot;`www.example.com`&quot;. Reverse lookups can be generated using\n`in-addr.arpa` notation, but gethostbyaddr() is more suitable for the majority\nof reverse lookups. Note: Per DNS standards, email addresses are given in\n`user.host` format (for example: `hostmaster.example.com` as opposed to\n`hostmaster@example.com`), be sure to check this value and modify if necessary\nbefore using it with a functions such as mail().\n@param type By default, dns_get_record() will search for any resource records\nassociated with `hostname`. To limit the query, specify the optional `type`\nparameter. May be any one of the following: DNS_A, DNS_CNAME, DNS_HINFO,\nDNS_MX, DNS_NS, DNS_PTR, DNS_SOA, DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR,\nDNS_A6, DNS_ALL or DNS_ANY. Note: Because of eccentricities in the performance\nof libresolv between platforms, DNS_ANY will not always return every record,\nthe slower DNS_ALL will collect all records more reliably.\n@param authns Passed by reference and, if given, will be populated with\nResource Records for the Authoritative Name Servers.\n@param addtl Passed by reference and, if given, will be populated with any\nAdditional Records.\n@return (PHP 5)\n@note Note: For compatibility with versions before this function was\nimplemented on such platforms as Windows, *BSD and MAC. Try the &raquo;\nPEAR class &raquo; Net_DNS.\n@see dns_get_mx() - Alias of getmxrr\n@see dns_check_record() - Alias of checkdnsrr\n
dom_import_simplexml dom_import_simplexml(SimpleXMLElement $node) [DOMElement]\nGets a DOMElement object from a\n   SimpleXMLElement object. This function takes the node `node` of class\n   SimpleXML and makes it into a DOMElement node. This new object can then\n   be used as a native DOMElement node.\n@param node The SimpleXMLElement node.\n@return (PHP 5)\n@see simplexml_import_dom() - Get a SimpleXMLElement object from a DOM node.\n
name string DomAttribute::name ( void )\nReturns the name of attribute.\n@return (PHP 4 >= 4.1.0)\n@see DomAttribute->value for an example\n
set_value bool DomAttribute::set_value ( string $content )\nSets the value of an attribute.\n@param content The new value.\n@return (PHP 4 >= 4.1.0)\n@see DomAttribute->value\n
specified bool DomAttribute::specified ( void )\nChecks if attribute is specified.\n@return (PHP 4 >= 4.1.0)\n@see The definition of &raquo; specified in the DOM Recommendations\n
value string DomAttribute::value ( void )\nReturns value of attribute.\n@return (PHP 4 >= 4.1.0)\n@see DomAttribute->set_value\n@see DomAttribute->name\n
add_root DomDocument->add_root(string $name) [domelement]\nAdds a root node [deprecated]. Adds a root element node to a dom document\nand returns the new node. The element name is given in the passed parameter.\nExample #1 Creating a simple HTML document header\n
create_attribute DomDocument->create_attribute(string $name, string $value)\n[domattribute]\nCreate new attribute. This function returns a new instance of class\nDomAttribute. The name of the attribute is the value of the first\nparameter. The value of the attribute is the value of the second\nparameter. This node will not show up in the document unless it is inserted\nwith (e.g.) domnode_append_child(). The return value is FALSE if an error\noccurred. See also domnode_append_child(), domdocument_create_element(),\ndomdocument_create_text(), domdocument_create_cdata_section(),\ndomdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
create_cdata_section DomDocument->create_cdata_section(string $content)\n[domcdata]\nCreate new cdata node. This function returns a new instance of\nclass DomCData. The content of the cdata is the value of the passed\nparameter. This node will not show up in the document unless it\nis inserted with (e.g.) domnode_append_child(). The return value\nis FALSE if an error occurred. See also domnode_append_child(),\ndomdocument_create_element(), domdocument_create_text(),\ndomdocument_create_attribute(), domdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
create_comment DomDocument->create_comment(string $content) [domcomment]\nCreate new comment node. This function returns a new instance of\nclass DomComment. The content of the comment is the value of the\npassed parameter. This node will not show up in the document unless\nit is inserted with (e.g.) domnode_append_child(). The return value\nis FALSE if an error occurred. See also domnode_append_child(),\ndomdocument_create_element(), domdocument_create_text(),\ndomdocument_create_attribute(), domdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
create_element_ns DomDocument->create_element_ns(string $uri, string $name\n[, string $prefix]) [domelement]\nCreate new element node with an associated namespace. This function returns\na new instance of class DomElement. The tag name of the element is the value\nof the passed parameter `name`. The URI of the namespace is the value of\nthe passed parameter `uri`. If there is already a namespace declaration\nwith the same uri in the root-node of the document, the prefix of this is\ntaken, otherwise it will take the one provided in the optional parameter\n`prefix` or generate a random one. This node will not show up in the document\nunless it is inserted with (e.g.) domnode_append_child(). The return value\nis FALSE if an error occurred. See also domdocument_create_element_ns(),\ndomnode_add_namespace(), domnode_set_namespace(), domnode_append_child(),\ndomdocument_create_text(), domdocument_create_comment(),\ndomdocument_create_attribute(), domdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
create_element DomDocument->create_element(string $name) [domelement]\nCreate new element node. This function returns a new instance of class\nDomElement. The tag name of the element is the value of the passed\nparameter. This node will not show up in the document unless it is inserted\nwith (e.g.) domnode_append_child(). The return value is FALSE if an error\noccurred. See also domdocument_create_element_ns(), domnode_append_child(),\ndomdocument_create_text(), domdocument_create_comment(),\ndomdocument_create_attribute(), domdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
create_entity_reference DomDocument->create_entity_reference(string $content)\n[domentityreference]\nCreate an entity reference. This function returns a new instance of class\nDomEntityReference. The content of the entity reference is the value of the\npassed parameter. This node will not show up in the document unless it is\ninserted with (e.g.) domnode_append_child(). The return value is FALSE if an\nerror occurred. See also domnode_append_child(), domdocument_create_element(),\ndomdocument_create_text(), domdocument_create_cdata_section(),\ndomdocument_create_processing_instruction(), domdocument_create_attribute(),\nand domnode_insert_before().\n
create_processing_instruction DomDocument->create_processing_instruction(string\n$content) [domprocessinginstruction]\nCreates new PI node. This function returns a new instance of class\nDomCData. The content of the pi is the value of the passed parameter. This\nnode will not show up in the document unless it is inserted with\n(e.g.) domnode_append_child(). The return value is FALSE if an error\noccurred. See also domnode_append_child(), domdocument_create_element(),\ndomdocument_create_text(), domdocument_create_cdata_section(),\ndomdocument_create_attribute(), domdocument_create_entity_reference(),\nand domnode_insert_before().\n
create_text_node DomDocument->create_text_node(string $content) [domtext]\nCreate new text node. This function returns a new instance of class\nDomText. The content of the text is the value of the passed parameter. This\nnode will not show up in the document unless it is inserted with\n(e.g.) domnode_append_child(). The return value is FALSE if an error\noccurred. See also domnode_append_child(), domdocument_create_element(),\ndomdocument_create_comment(), domdocument_create_text(),\ndomdocument_create_attribute(), domdocument_create_processing_instruction(),\ndomdocument_create_entity_reference(), and domnode_insert_before().\n
doctype DomDocument->doctype(void) [domdocumenttype]\nReturns the document type. This function returns an object of class\nDomDocumentType. In versions of PHP before 4.3 this has been the class Dtd,\nbut the DOM Standard does not know such a class. See also the methods of\nclass DomDocumentType.\n
document_element DomDocument->document_element(void) [domelement]\nReturns root element node. This function returns the root element node of a\ndocument. The following example returns just the element with name CHAPTER\nand prints it. The other node -- the comment -- is not returned. Example #1\nRetrieving root element\n
dump_file DomDocument->dump_file(string $filename [, bool $compressionmode\n[, bool $format]]) [string]\nDumps the internal XML tree back into a file. Creates an XML document from\nthe dom representation. This function usually is called after building a new\ndom document from scratch as in the example below. The `format` specifies\nwhether the output should be neatly formatted, or not. The first parameter\nspecifies the name of the filename and the second parameter, whether it\nshould be compressed or not.  Example #1 Creating a simple HTML document header\n
dump_mem DomDocument->dump_mem([bool $format [, string $encoding]]) [string]\nDumps the internal XML tree back into a string. Creates an XML document from\nthe dom representation. This function usually is called after building a new\ndom document from scratch as in the example below. The `format` specifies\nwhether the output should be neatly formatted, or not.  Example #1 Creating\na simple HTML document header\n
get_element_by_id DomDocument->get_element_by_id(string $id) [domelement]\nSearches for an element with a certain id. This function is similar to\ndomdocument_get_elements_by_tagname() but searches for an element with a\ngiven id. According to the DOM standard this requires a DTD which defines\nthe attribute ID to be of type ID, though the current implementation simply\ndoes an xpath search for &quot;//*[@ID = &#039;%s&#039;]&quot;. This does not\ncomply to the DOM standard which requires to return null if it is not known\nwhich attribute is of type id. This behaviour is likely to be fixed, so do not\nrely on the current behaviour. See also domdocument_get_elements_by_tagname()\n
get_elements_by_tagname DomDocument->get_elements_by_tagname(string $name)\n[array]\nReturns array with nodes with given tagname in document or empty array,\nif not found.  See also domdocument_add_root()\n
html_dump_mem DomDocument->html_dump_mem(void) [string]\nDumps the internal XML tree back into a string as HTML. Creates an HTML\ndocument from the dom representation. This function usually is called\nafter building a new dom document from scratch as in the example below.\nExample #1 Creating a simple HTML document header\n
xinclude DomDocument->xinclude(void) [int]\nSubstitutes XIncludes in a DomDocument Object. This function substitutes\n&raquo; XIncludes in a DomDocument object.  Example #1 Substituting Xincludes\n
entities array DomDocumentType::entities ( void )\nReturns list of entities.\n
internal_subset bool DomDocumentType::internal_subset ( void )\nReturns internal subset.\n
name string DomDocumentType::name ( void )\nReturns name of document type.\n@return (PHP 4 >= 4.1.0)\n
notations array DomDocumentType::notations ( void )\nReturns list of notations.\n
public_id string DomDocumentType::public_id ( void )\nReturns public id of document type.\n@return (PHP 4 >= 4.1.0)\n
system_id string DomDocumentType::system_id ( void )\nReturns the system id of document type.\n@return (PHP 4 >= 4.1.0)\n
get_attribute_node DomAttribute DomElement::get_attribute_node ( string $name )\nReturns the node of the given attribute.\n@param name The name of the seeked attribute. This parameter is case sensitive.\n@return (PHP 4 >= 4.1.0)\n@see DomElement->get_attribute\n@see DomElement->set_attribute\n
get_attribute string DomElement::get_attribute ( string $name )\nReturns the value of the given attribute.\n@param name The name of the seeked attribute. This parameter is case sensitive.\n@return (PHP 4 >= 4.1.0)\n@see DomElement->get_attribute_node\n@see DomElement->set_attribute\n
get_elements_by_tagname array DomElement::get_elements_by_tagname ( string\n$name )\nGets elements by tagname.\n@param name The name of the seeked element.\n@return (PHP 4 >= 4.1.0)\n
has_attribute bool DomElement::has_attribute ( string $name )\nChecks to see if an attribute exists in the current node.\n@param name The name of the tested attribute.\n@return (PHP 4 >= 4.1.0)\n
remove_attribute bool DomElement::remove_attribute ( string $name )\nRemoves attribute.\n@param name The name of the attribute to remove.\n@return (PHP 4 >= 4.1.0)\n
set_attribute_node DomNode DomElement::set_attribute_node ( DomNode $attr )\nAdds new attribute.\n
set_attribute DomAttribute DomElement::set_attribute ( string $name , string\n$value )\nSets the value of an attribute.\n@param name The name of the attribute. If this attribute doesn&#039;t exist,\nit will be created.\n@param value The value of the attribute.\n@return (PHP 4 >= 4.1.0)\n@see DomElement->get_attribute_node\n@see DomElement->get_attribute\n
tagname string DomElement::tagname ( void )\nReturns the name of the current element.\n@return (PHP 4 >= 4.1.0)\n
add_namespace bool DOMNode::add_namespace ( string $uri , string $prefix )\nAdds a namespace declaration to a node.\n@param uri The namespace URI of the node.\n@param prefix The namespace prefix of the node.\n@return (PHP 4 >= 4.3.0)\n@see DomDocument->create_element_ns\n@see DomNode->set_namespace\n
append_child DOMNode DOMNode::append_child ( DOMNode $newnode )\nAdds a new child at the end of the children.\n@param newnode The node being appended. It can be created with\ne.g. DomDocument->create_element, DomDocument->create_text_node etc. or\nsimply by using any other node. Note: You can not append a DOMAttribute\nusing this method. Use DomElement->set_attribute instead.\n@return (PHP 4 >= 4.1.0)\n@see DomNode->insert_before\n@see DomNode->clone_node\n
append_sibling DomNode->append_sibling(domelement $newnode) [domelement]\nAdds new sibling to a node. This functions appends a sibling to an existing\nnode. The child can be created with e.g. domdocument_create_element(),\ndomdocument_create_text() etc. or simply by using any other node. Before a\nnew sibling is added it is first duplicated. Therefore the new child is a\ncompletely new copy which can be modified without changing the node which was\npassed to this function. If the node passed has children itself, they will\nbe duplicated as well, which makes it quite easy to duplicate large parts\nof an XML document. The return value is the added sibling. If you plan to do\nfurther modifications on the added sibling you must use the returned node. This\nfunction has been added to provide the behaviour of domnode_append_child()\nas it works till PHP 4.2. See also domnode_append_before().\n
attributes DomNode->attributes(void) [array]\nReturns list of attributes. This function only returns an array of attributes\nif the node is of type XML_ELEMENT_NODE. (PHP >= 4.3 only) If no attributes\nare found, NULL is returned.\n
child_nodes DomNode->child_nodes(void) [array]\nReturns children of node. Returns all children of the node. See also\ndomnode_next_sibling(), and domnode_previous_sibling().\n
clone_node DomNode->clone_node(void) [domelement]\nClones a node. WarningThis function is currently not documented; only its\nargument list is available.\n
dump_node DomNode->dump_node(void) [string]\nDumps a single node. WarningThis function is currently not documented;\nonly its argument list is available.\n
first_child DomNode->first_child(void) [domelement]\nReturns first child of node. Returns the first child of the node. (PHP\n>= 4.3 only) If no first child is found, NULL is returned. See also\ndomnode_last_child(), and domnode_next_sibling(), domnode_previous_sibling().\n
get_content DomNode->get_content(void) [string]\nGets content of node. This function returns the content of the actual node.\nExample #1 Getting a content\n
has_attributes DomNode->has_attributes(void) [bool]\nChecks if node has attributes. This function checks if the node has\nattributes. See also domnode_has_child_nodes().\n
has_child_nodes DomNode->has_child_nodes(void) [bool]\nChecks if node has children. This function checks if the node has children. See\nalso domnode_child_nodes().\n
db2_commit db2_commit(resource $connection) [bool]\nCommits a transaction. Commits an in-progress transaction on the specified\nconnection resource and begins a new transaction. PHP applications normally\ndefault to AUTOCOMMIT mode, so db2_commit() is not necessary unless AUTOCOMMIT\nhas been turned off for the connection resource.\n@param connection A valid database connection resource variable as returned\nfrom db2_connect() or db2_pconnect().\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_autocommit() - Returns or sets the AUTOCOMMIT state for a database\nconnection\n@see db2_rollback() - Rolls back a transaction\n
db2_conn_error db2_conn_error([resource $connection]) [string]\nReturns a string containing the SQLSTATE returned by the last connection\nattempt. db2_conn_error() returns an SQLSTATE value representing the reason the\nlast attempt to connect to a database failed. As db2_connect() returns FALSE\nin the event of a failed connection attempt, you do not pass any parameters to\ndb2_conn_error() to retrieve the SQLSTATE value. If, however, the connection\nwas successful but becomes invalid over time, you can pass the `connection`\nparameter to retrieve the SQLSTATE value for a specific connection. To learn\nwhat the SQLSTATE value means, you can issue the following command at a DB2\nCommand Line Processor prompt: db2 &#039;? `sqlstate-value`&#039;. You can\nalso call db2_conn_errormsg() to retrieve an explicit error message and the\nassociated SQLCODE value.\n@param connection A connection resource associated with a connection that\ninitially succeeded, but which over time became invalid.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_conn_errormsg() - Returns the last connection error message and\nSQLCODE value\n@see db2_connect() - Returns a connection to a database\n@see db2_stmt_error() - Returns a string containing the SQLSTATE returned\nby an SQL statement\n@see db2_stmt_errormsg() - Returns a string containing the last SQL statement\nerror message\n
db2_conn_errormsg db2_conn_errormsg([resource $connection]) [string]\nReturns the last connection error message and SQLCODE\nvalue. db2_conn_errormsg() returns an error message and SQLCODE value\nrepresenting the reason the last database connection attempt failed. As\ndb2_connect() returns FALSE in the event of a failed connection attempt,\ndo not pass any parameters to db2_conn_errormsg() to retrieve the associated\nerror message and SQLCODE value. If, however, the connection was successful but\nbecomes invalid over time, you can pass the `connection` parameter to retrieve\nthe associated error message and SQLCODE value for a specific connection.\n@param connection A connection resource associated with a connection that\ninitially succeeded, but which over time became invalid.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_conn_error() - Returns a string containing the SQLSTATE returned\nby the last connection attempt\n@see db2_connect() - Returns a connection to a database\n@see db2_stmt_error() - Returns a string containing the SQLSTATE returned\nby an SQL statement\n@see db2_stmt_errormsg() - Returns a string containing the last SQL statement\nerror message\n
db2_connect db2_connect(string $database, string $username, string $password\n[, array $options]) [resource]\nReturns a connection to a database. Creates a new connection to an IBM DB2\nUniversal Database, IBM Cloudscape, or Apache Derby database.\n@param database For a cataloged connection to a database,\n`database` represents the database alias in the DB2 client\ncatalog. For an uncataloged connection to a database, `database`\nrepresents a complete connection string in the following format:\nDATABASE=`database`;HOSTNAME=`hostname`;PORT=`port`;PROTOCOL=TCPIP;UID=`username`;PWD=`password`;\nwhere the parameters represent the following values: `database` The name of\nthe database.\n@param hostname The hostname or IP address of the database server.\n@param port The TCP/IP port on which the database is listening for requests.\n@param username The username with which you are connecting to the database.\n@param password The password with which you are connecting to the database.\n@param username The username with which you are connecting to the database. For\nuncataloged connections, you must pass a NULL value or empty string.\n@param password The password with which you are connecting to the database. For\nuncataloged connections, you must pass a NULL value or empty string.\n@param options An associative array of connection options that affect the\nbehavior of the connection, where valid array keys include: `autocommit`\nPassing the `DB2_AUTOCOMMIT_ON` value turns autocommit on for this connection\nhandle. Passing the `DB2_AUTOCOMMIT_OFF` value turns autocommit off for this\nconnection handle.\n@param DB2_ATTR_CASE Passing the `DB2_CASE_NATURAL` value specifies that\ncolumn names are returned in natural case. Passing the `DB2_CASE_LOWER`\nvalue specifies that column names are returned in lower case. Passing the\n`DB2_CASE_UPPER` value specifies that column names are returned in upper case.\n@param CURSOR Passing the `DB2_FORWARD_ONLY` value specifies a forward-only\ncursor for a statement resource. This is the default cursor type and is\nsupported on all database servers. Passing the `DB2_SCROLLABLE` value\nspecifies a scrollable cursor for a statement resource. This mode enables\nrandom access to rows in a result set, but currently is supported only by\nIBM DB2 Universal Database.\n@param trustedcontext Passing the DB2_TRUSTED_CONTEXT_ENABLE value turns\ntrusted context on for this connection handle. This parameter cannot be set\nusing db2_set_option(). This key works only if the database is cataloged\n(even if the database is local), or if you specify the full DSN when you\ncreate the connection. To catalog the database, use following commands: db2\ncatalog tcpip node loopback remote &lt;SERVERNAME> server &lt;SERVICENAME>\ndb2 catalog database &lt;LOCALDBNAME> as &lt;REMOTEDBNAME> at node loopback db2\n&quot;update dbm cfg using svcename &lt;SERVICENAME>&quot; db2set DB2COMM=TCPIP\n@param i5_lib A character value that indicates the default library that will\nbe used for resolving unqualified file references. This is not valid if the\nconnection is using system naming mode.\n@param i5_naming `DB2_I5_NAMING_ON` value turns on DB2 UDB CLI iSeries system\nnaming mode. Files are qualified using the slash (/) delimiter. Unqualified\nfiles are resolved using the library list for the job. `DB2_I5_NAMING_OFF`\nvalue turns off DB2 UDB CLI default naming mode, which is SQL naming. Files\nare qualified using the period (.) delimiter. Unqualified files are resolved\nusing either the default library or the current user ID.\n@param i5_commit The `i5_commit` attribute should be set before the\ndb2_connect(). If the value is changed after the connection has been\nestablished, and the connection is to a remote data source, the change\ndoes not take effect until the next successful db2_connect() for the\nconnection handle. Note: The php.ini setting `ibm_db2.i5_allow_commit`==0\nor `DB2_I5_TXN_NO_COMMIT` is the default, but may be overridden with\nthe `i5_commit` option. `DB2_I5_TXN_NO_COMMIT` - Commitment control is\nnot used. `DB2_I5_TXN_READ_UNCOMMITTED` - Dirty reads, nonrepeatable\nreads, and phantoms are possible. `DB2_I5_TXN_READ_COMMITTED` -\nDirty reads are not possible. Nonrepeatable reads, and phantoms are\npossible. `DB2_I5_TXN_REPEATABLE_READ` - Dirty reads and nonrepeatable\nreads are not possible. Phantoms are possible. `DB2_I5_TXN_SERIALIZABLE`\n- Transactions are serializable. Dirty reads, non-repeatable reads, and\nphantoms are not possible\n@param i5_query_optimize `DB2_FIRST_IO` All queries are optimized with\nthe goal of returning the first page of output as fast as possible. This\ngoal works well when the output is controlled by a user who is most likely\nto cancel the query after viewing the first page of output data. Queries\ncoded with an OPTIMIZE FOR nnn ROWS clause honor the goal specified by the\nclause. `DB2_ALL_IO` All queries are optimized with the goal of running the\nentire query to completion in the shortest amount of elapsed time. This is a\ngood option when the output of a query is being written to a file or report,\nor the interface is queuing the output data. Queries coded with an OPTIMIZE FOR\nnnn ROWS clause honor the goal specified by the clause. This is the default.\n@param i5_dbcs_alloc `DB2_I5_DBCS_ALLOC_ON` value turns on DB2 6X allocation\nscheme for DBCS translation column size growth. `DB2_I5_DBCS_ALLOC_OFF`\nvalue turns off DB2 6X allocation scheme for DBCS translation column\nsize growth. Note: php.ini setting `ibm_db2.i5_dbcs_alloc`==0 or\n`DB2_I5_DBCS_ALLOC_OFF` is the default, but may be overridden with the\n`i5_dbcs_alloc` option.\n@param i5_date_fmt `DB2_I5_FMT_ISO` - The International Organization\nfor Standardization (ISO) date format yyyy-mm-dd is used. This is the\ndefault. `DB2_I5_FMT_USA` - The United States date format mm/dd/yyyy\nis used. `DB2_I5_FMT_EUR` - The European date format dd.mm.yyyy is\nused. `DB2_I5_FMT_JIS` - The Japanese Industrial Standard date format\nyyyy-mm-dd is used. `DB2_I5_FMT_MDY` - The date format mm/dd/yyyy is\nused. `DB2_I5_FMT_DMY` - The date format dd/mm/yyyy is used. `DB2_I5_FMT_YMD`\n- The date format yy/mm/dd is used. `DB2_I5_FMT_JUL` - The Julian date format\nyy/ddd is used. `DB2_I5_FMT_JOB` - The job default is used.\n@param i5_date_sep `DB2_I5_SEP_SLASH` - A slash ( / ) is used as the\ndate separator. This is the default. `DB2_I5_SEP_DASH` - A dash ( - )\nis used as the date separator. `DB2_I5_SEP_PERIOD` - A period ( . ) is\nused as the date separator. `DB2_I5_SEP_COMMA` - A comma ( , ) is used\nas the date separator. `DB2_I5_SEP_BLANK` - A blank is used as the date\nseparator. `DB2_I5_SEP_JOB` - The job default is used\n@param i5_time_fmt `DB2_I5_FMT_ISO` - The International Organization\nfor Standardization (ISO) time format hh.mm.ss is used. This is the\ndefault. `DB2_I5_FMT_USA` - The United States time format hh:mmxx is used,\nwhere xx is AM or PM. `DB2_I5_FMT_EUR` - The European time format hh.mm.ss\nis used. `DB2_I5_FMT_JIS` - The Japanese Industrial Standard time format\nhh:mm:ss is used. `DB2_I5_FMT_HMS` - The hh:mm:ss format is used.\n@param i5_time_sep `DB2_I5_SEP_COLON` - A colon ( : ) is used as the time\nseparator. This is the default. `DB2_I5_SEP_PERIOD` - A period ( . ) is\nused as the time separator. `DB2_I5_SEP_COMMA` - A comma ( , ) is used\nas the time separator. `DB2_I5_SEP_BLANK` - A blank is used as the time\nseparator. `DB2_I5_SEP_JOB` - The job default is used.\n@param i5_decimal_sep `DB2_I5_SEP_PERIOD` - A period ( . ) is used as the\ndecimal separator. This is the default. `DB2_I5_SEP_COMMA` - A comma ( , )\nis used as the decimal separator. `DB2_I5_SEP_JOB` - The job default is used.\n@param i5_libl A character value that indicates the library list that will\nbe used for resolving unqualified file references. Specify the library\nlist elements separated by blanks &#039;i5_libl&#039;=>&quot;MYLIB YOURLIB\nANYLIB&quot;. Note: `i5_libl` calls qsys2/qcmdexc(&#039;cmd&#039;,cmdlen),\nwhich is only available in i5/OS V5R4 and later.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_close() - Closes a database connection\n@see db2_pconnect() - Returns a persistent connection to a database\n
db2_cursor_type db2_cursor_type(resource $stmt) [int]\nReturns the cursor type used by a statement resource. Returns the cursor\ntype used by a statement resource. Use this to determine if you are working\nwith a forward-only cursor or scrollable cursor.\n@param stmt A valid statement resource.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_prepare() - Prepares an SQL statement to be executed\n
db2_escape_string db2_escape_string(string $string_literal) [string]\nUsed to escape certain characters. Prepends backslashes to special characters\nin the string argument.\n@param string_literal The string that contains special characters that need\nto be modified. Characters that are prepended with a backslash are `\x00`,\n`\n`, `\r`, `\`, `&#039;`, `&quot;` and `\x1a`.\n@return (PECL ibm_db2 >= 1.6.0)\n@see db2_prepare() - Prepares an SQL statement to be executed\n
db2_exec db2_exec(resource $connection, string $statement [, array $options])\n[resource]\nExecutes an SQL statement directly. Executes an SQL statement directly. If\nyou plan to interpolate PHP variables into the SQL statement, understand\nthat this is one of the more common security exposures. Consider calling\ndb2_prepare() to prepare an SQL statement with parameter markers for input\nvalues. Then you can call db2_execute() to pass in the input values and avoid\nSQL injection attacks. If you plan to repeatedly issue the same SQL statement\nwith different parameters, consider calling db2_prepare() and db2_execute()\nto enable the database server to reuse its access plan and increase the\nefficiency of your database access.\n@param connection A valid database connection resource variable as returned\nfrom db2_connect() or db2_pconnect().\n@param statement An SQL statement. The statement cannot contain any parameter\nmarkers.\n@param options An associative array containing statement options. You can\nuse this parameter to request a scrollable cursor on database servers that\nsupport this functionality. For a description of valid statement options,\nsee db2_set_option().\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_execute() - Executes a prepared SQL statement\n@see db2_prepare() - Prepares an SQL statement to be executed\n
db2_execute db2_execute(resource $stmt [, array $parameters]) [bool]\nExecutes a prepared SQL statement. db2_execute() executes an SQL statement\nthat was prepared by db2_prepare(). If the SQL statement returns a result\nset, for example, a SELECT statement or a CALL to a stored procedure\nthat returns one or more result sets, you can retrieve a row as an array\nfrom the `stmt` resource using db2_fetch_assoc(), db2_fetch_both(), or\ndb2_fetch_array(). Alternatively, you can use db2_fetch_row() to move the\nresult set pointer to the next row and fetch a column at a time from that\nrow with db2_result(). Refer to db2_prepare() for a brief discussion of the\nadvantages of using db2_prepare() and db2_execute() rather than db2_exec().\n@param stmt A prepared statement returned from db2_prepare().\n@param parameters An array of input parameters matching any parameter markers\ncontained in the prepared statement.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_exec() - Executes an SQL statement directly\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_prepare() - Prepares an SQL statement to be executed\n@see db2_result() - Returns a single column from a row in the result set\n
db2_fetch_array db2_fetch_array(resource $stmt [, int $row_number=-1]) [array]\nReturns an array, indexed by column position, representing a row in a result\nset. Returns an array, indexed by column position, representing a row in a\nresult set. The columns are 0-indexed.\n@param stmt A valid `stmt` resource containing a result set.\n@param row_number Requests a specific 1-indexed row from the result\nset. Passing this parameter results in a PHP warning if the result set uses\na forward-only cursor.\n@return (PECL ibm_db2 >= 1.0.1)\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_object() - Returns an object with properties representing\ncolumns in the fetched row\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_result() - Returns a single column from a row in the result set\n
db2_fetch_assoc db2_fetch_assoc(resource $stmt [, int $row_number=-1]) [array]\nReturns an array, indexed by column name, representing a row in a result\nset. Returns an array, indexed by column name, representing a row in a\nresult set.\n@param stmt A valid `stmt` resource containing a result set.\n@param row_number Requests a specific 1-indexed row from the result\nset. Passing this parameter results in a PHP warning if the result set uses\na forward-only cursor.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_object() - Returns an object with properties representing\ncolumns in the fetched row\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_result() - Returns a single column from a row in the result set\n
db2_fetch_both db2_fetch_both(resource $stmt [, int $row_number=-1]) [array]\nReturns an array, indexed by both column name and position, representing\na row in a result set. Returns an array, indexed by both column name and\nposition, representing a row in a result set. Note that the row returned by\ndb2_fetch_both() requires more memory than the single-indexed arrays returned\nby db2_fetch_assoc() or db2_fetch_array().\n@param stmt A valid `stmt` resource containing a result set.\n@param row_number Requests a specific 1-indexed row from the result\nset. Passing this parameter results in a PHP warning if the result set uses\na forward-only cursor.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_object() - Returns an object with properties representing\ncolumns in the fetched row\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_result() - Returns a single column from a row in the result set\n
db2_fetch_object db2_fetch_object(resource $stmt [, int $row_number=-1])\n[object]\nReturns an object with properties representing columns in the fetched\nrow. Returns an object in which each property represents a column returned\nin the row fetched from a result set.\n@param stmt A valid `stmt` resource containing a result set.\n@param row_number Requests a specific 1-indexed row from the result\nset. Passing this parameter results in a PHP warning if the result set uses\na forward-only cursor.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_result() - Returns a single column from a row in the result set\n
db2_fetch_row db2_fetch_row(resource $stmt [, int $row_number]) [bool]\nSets the result set pointer to the next row or requested row. Use\ndb2_fetch_row() to iterate through a result set, or to point to a specific row\nin a result set if you requested a scrollable cursor. To retrieve individual\nfields from the result set, call the db2_result() function. Rather than\ncalling db2_fetch_row() and db2_result(), most applications will call one\nof db2_fetch_assoc(), db2_fetch_both(), or db2_fetch_array() to advance the\nresult set pointer and return a complete row as an array.\n@param stmt A valid `stmt` resource.\n@param row_number With scrollable cursors, you can request a specific row\nnumber in the result set. Row numbering is 1-indexed.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_object() - Returns an object with properties representing\ncolumns in the fetched row\n@see db2_result() - Returns a single column from a row in the result set\n
db2_field_display_size db2_field_display_size(resource $stmt, mixed $column)\n[int]\nReturns the maximum number of bytes required to display a column. Returns\nthe maximum number of bytes required to display a column in a result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_name db2_field_name(resource $stmt, mixed $column) [string]\nReturns the name of the column in the result set. Returns the name of the\nspecified column in the result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_num db2_field_num(resource $stmt, mixed $column) [int]\nReturns the position of the named column in a result set. Returns the position\nof the named column in a result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_precision db2_field_precision(resource $stmt, mixed $column) [int]\nReturns the precision of the indicated column in a result set. Returns the\nprecision of the indicated column in a result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_scale db2_field_scale(resource $stmt, mixed $column) [int]\nReturns the scale of the indicated column in a result set. Returns the scale\nof the indicated column in a result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_type db2_field_type(resource $stmt, mixed $column) [string]\nReturns the data type of the indicated column in a result set. Returns the\ndata type of the indicated column in a result set.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_field_width db2_field_width(resource $stmt, mixed $column) [int]\nReturns the width of the current value of the indicated column in a result\nset. Returns the width of the current value of the indicated column in a\nresult set. This is the maximum width of the column for a fixed-length data\ntype, or the actual width of the column for a variable-length data type.\n@param stmt Specifies a statement resource containing a result set.\n@param column Specifies the column in the result set. This can either be\nan integer representing the 0-indexed position of the column, or a string\ncontaining the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n
db2_foreign_keys db2_foreign_keys(resource $connection, string $qualifier,\nstring $schema, string $table-name) [resource]\nReturns a result set listing the foreign keys for a table. Returns a result\nset listing the foreign keys for a table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. If `schema` is NULL,\ndb2_foreign_keys() matches the schema for the current connection.\n@param table-name The name of the table.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_free_result db2_free_result(resource $stmt) [bool]\nFrees resources associated with a result set. Frees the system and database\nresources that are associated with a result set. These resources are freed\nimplicitly when a script finishes, but you can call db2_free_result() to\nexplicitly free the result set resources before the end of the script.\n@param stmt A valid statement resource.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_free_stmt() - Frees resources associated with the indicated\nstatement resource\n
db2_free_stmt db2_free_stmt(resource $stmt) [bool]\nFrees resources associated with the indicated statement resource. Frees\nthe system and database resources that are associated with a statement\nresource. These resources are freed implicitly when a script finishes,\nbut you can call db2_free_stmt() to explicitly free the statement resources\nbefore the end of the script.\n@param stmt A valid statement resource.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_free_result() - Frees resources associated with a result set\n
db2_get_option db2_get_option(resource $resource, string $option) [string]\nRetrieves an option value for a statement resource or a connection\nresource. Retrieves the value of a specified option value for a statement\nresource or a connection resource.\n@param resource A valid statement resource as returned from db2_prepare() or\na valid connection resource as returned from db2_connect() or db2_pconnect().\n@param option A valid statement or connection options. The following new\noptions are available as of ibm_db2 version 1.6.0. They provide useful tracking\ninformation that can be set during execution with db2_get_option(). Note:\nPrior versions of ibm_db2 do not support these new options. When the value\nin each option is being set, some servers might not handle the entire length\nprovided and might truncate the value. To ensure that the data specified\nin each option is converted correctly when transmitted to a host system,\nuse only the characters A through Z, 0 through 9, and the underscore (_) or\nperiod (.). `userid` `SQL_ATTR_INFO_USERID` - A pointer to a null-terminated\ncharacter string used to identify the client user ID sent to the host database\nserver when using DB2 Connect. Note: DB2 for z/OS and OS/390 servers support\nup to a length of 16 characters. This user-id is not to be confused with\nthe authentication user-id, it is for identification purposes only and is\nnot used for any authorization.\n@param acctstr `SQL_ATTR_INFO_ACCTSTR` - A pointer to a null-terminated\ncharacter string used to identify the client accounting string sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 200 characters.\n@param applname `SQL_ATTR_INFO_APPLNAME` - A pointer to a null-terminated\ncharacter string used to identify the client application name sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 32 characters.\n@param wrkstnname `SQL_ATTR_INFO_WRKSTNNAME` - A pointer to a null-terminated\ncharacter string used to identify the client workstation name sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 18 characters.\n@return (PECL ibm_db2 >= 1.6.0)\n@see db2_connect() - Returns a connection to a database\n@see db2_cursor_type() - Returns the cursor type used by a statement resource\n@see db2_exec() - Executes an SQL statement directly\n@see db2_set_option() - Set options for connection or statement resources\n@see db2_pconnect() - Returns a persistent connection to a database\n@see db2_prepare() - Prepares an SQL statement to be executed\n
db2_last_insert_id db2_last_insert_id(resource $resource) [string]\nReturns the auto generated ID of the last insert query that successfully \n  executed on this connection. Returns the auto generated ID of the last\n  insert query that successfully executed on this connection. The result of\n  this function is not affected by any of the following: A single row INSERT\n  statement with a VALUES clause for a table without an identity column. A\n  multiple row INSERT statement with a VALUES clause. An INSERT statement\n  with a fullselect. A ROLLBACK TO SAVEPOINT statement.\n@param resource A valid connection resource as returned from db2_connect()\nor db2_pconnect(). The value of this parameter cannot be a statement resource\nor result set resource.\n@return (PECL ibm_db2 >= 1.7.1)\n
db2_lob_read db2_lob_read(resource $stmt, int $colnum, int $length) [string]\nGets a user defined size of LOB files with each invocation. Use db2_lob_read()\nto iterate through a specified column of a result set and retrieve a user\ndefined size of LOB data.\n@param stmt A valid `stmt` resource containing LOB data.\n@param colnum A valid column number in the result set of the `stmt` resource.\n@param length The size of the LOB data to be retrieved from the `stmt`\nresource.\n@return (PECL ibm_db2 >= 1.6.0)\n@see db2_bind_param() - Binds a PHP variable to an SQL statement parameter\n@see db2_exec() - Executes an SQL statement directly\n@see db2_execute() - Executes a prepared SQL statement\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n@see db2_prepare() - Prepares an SQL statement to be executed\n@see db2_result() - Returns a single column from a row in the result set\n
db2_next_result db2_next_result(resource $stmt) [resource]\nRequests the next result set from a stored procedure. A stored procedure\ncan return zero or more result sets. While you handle the first result set\nin exactly the same way you would handle the results returned by a simple\nSELECT statement, to fetch the second and subsequent result sets from a\nstored procedure you must call the db2_next_result() function and return\nthe result to a uniquely named PHP variable.\n@param stmt A prepared statement returned from db2_exec() or db2_execute().\n@return (PECL ibm_db2 >= 1.0.0)\n
db2_num_fields db2_num_fields(resource $stmt) [int]\nReturns the number of fields contained in a result set. Returns the number\nof fields contained in a result set. This is most useful for handling the\nresult sets returned by dynamically generated queries, or for result sets\nreturned by stored procedures, where your application cannot otherwise know\nhow to retrieve and use the results.\n@param stmt A valid statement resource containing a result set.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_execute() - Executes a prepared SQL statement\n@see db2_field_display_size() - Returns the maximum number of bytes required\nto display a column\n@see db2_field_name() - Returns the name of the column in the result set\n@see db2_field_num() - Returns the position of the named column in a result set\n@see db2_field_precision() - Returns the precision of the indicated column\nin a result set\n@see db2_field_scale() - Returns the scale of the indicated column in a\nresult set\n@see db2_field_type() - Returns the data type of the indicated column in a\nresult set\n@see db2_field_width() - Returns the width of the current value of the\nindicated column in a result set\n
db2_num_rows db2_num_rows(resource $stmt) [int]\nReturns the number of rows affected by an SQL statement. Returns the number of\nrows deleted, inserted, or updated by an SQL statement. To determine the number\nof rows that will be returned by a SELECT statement, issue SELECT COUNT(*)\nwith the same predicates as your intended SELECT statement and retrieve\nthe value. If your application logic checks the number of rows returned\nby a SELECT statement and branches if the number of rows is 0, consider\nmodifying your application to attempt to return the first row with one of\ndb2_fetch_assoc(), db2_fetch_both(), db2_fetch_array(), or db2_fetch_row(),\nand branch if the fetch function returns FALSE. Note: If you issue a SELECT\nstatement using a scrollable cursor, db2_num_rows() returns the number of\nrows returned by the SELECT statement. However, the overhead associated with\nscrollable cursors significantly degrades the performance of your application,\nso if this is the only reason you are considering using scrollable cursors,\nyou should use a forward-only cursor and either call SELECT COUNT(*) or rely\non the boolean return value of the fetch functions to achieve the equivalent\nfunctionality with much better performance.\n@param stmt A valid `stmt` resource containing a result set.\n@return (PECL ibm_db2 >= 1.0.0)\n
db2_pclose db2_pclose(resource $resource) [bool]\nCloses a persistent database connection. This function closes a DB2 client\nconnection created with db2_pconnect() and returns the corresponding resources\nto the database server. Note: This function is only available on i5/OS in\nresponse to i5/OS system administration requests. If you have a persistent DB2\nclient connection created with db2_pconnect(), you may use this function to\nclose the connection. To avoid substantial connection performance penalties,\nthis function should only be used in rare cases when the persistent connection\nhas become unresponsive or the persistent connection will not be needed for\na long period of time.\n@param connection Specifies an active DB2 client connection.\n@return (PECL ibm_db2 >= 1.8.0)\n@see db2_close() - Closes a database connection\n@see db2_pconnect() - Returns a persistent connection to a database\n
db2_pconnect db2_pconnect(string $database, string $username, string $password\n[, array $options]) [resource]\nReturns a persistent connection to a database. Returns a persistent connection\nto an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. For\nmore information on persistent connections, refer to Persistent Database\nConnections. Calling db2_close() on a persistent connection always returns\nTRUE, but the underlying DB2 client connection remains open and waiting\nto serve the next matching db2_pconnect() request. Users running version\n1.9.0 or later of ibm_db2 should be aware that the extension will perform a\ntransaction rollback on persistent connections at the end of a request, thus\nending the transaction. This prevents the transaction block from carrying\nover to the next request which uses that connection if script execution ends\nbefore the transaction block does.\n@param database The database alias in the DB2 client catalog.\n@param username The username with which you are connecting to the database.\n@param password The password with which you are connecting to the database.\n@param options An associative array of connection options that affect the\nbehavior of the connection, where valid array keys include: `autocommit`\nPassing the `DB2_AUTOCOMMIT_ON` value turns autocommit on for this connection\nhandle. Passing the `DB2_AUTOCOMMIT_OFF` value turns autocommit off for this\nconnection handle.\n@param DB2_ATTR_CASE Passing the `DB2_CASE_NATURAL` value specifies that\ncolumn names are returned in natural case. Passing the `DB2_CASE_LOWER`\nvalue specifies that column names are returned in lower case. Passing the\n`DB2_CASE_UPPER` value specifies that column names are returned in upper case.\n@param CURSOR Passing the `DB2_FORWARD_ONLY` value specifies a forward-only\ncursor for a statement resource. This is the default cursor type and is\nsupported on all database servers. Passing the `DB2_SCROLLABLE` value\nspecifies a scrollable cursor for a statement resource. This mode enables\nrandom access to rows in a result set, but currently is supported only by\nIBM DB2 Universal Database.\n@param trustedcontext Passing the DB2_TRUSTED_CONTEXT_ENABLE value turns\ntrusted context on for this connection handle. This parameter cannot be set\nusing db2_set_option(). This key works only if the database is cataloged\n(even if the database is local), or if you specify the full DSN when you\ncreate the connection. To catalog the database, use following commands: db2\ncatalog tcpip node loopback remote &lt;SERVERNAME> server &lt;SERVICENAME>\ndb2 catalog database &lt;LOCALDBNAME> as &lt;REMOTEDBNAME> at node loopback db2\n&quot;update dbm cfg using svcename &lt;SERVICENAME>&quot; db2set DB2COMM=TCPIP\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_connect() - Returns a connection to a database\n
db2_prepare db2_prepare(resource $connection, string $statement [, array\n$options]) [resource]\nPrepares an SQL statement to be executed. db2_prepare() creates a prepared\nSQL statement which can include 0 or more parameter markers (`?` characters)\nrepresenting parameters for input, output, or input/output. You can pass\nparameters to the prepared statement using db2_bind_param(), or for input\nvalues only, as an array passed to db2_execute(). There are three main\nadvantages to using prepared statements in your application: Performance:\nwhen you prepare a statement, the database server creates an optimized access\nplan for retrieving data with that statement. Subsequently issuing the prepared\nstatement with db2_execute() enables the statements to reuse that access plan\nand avoids the overhead of dynamically creating a new access plan for every\nstatement you issue. Security: when you prepare a statement, you can include\nparameter markers for input values. When you execute a prepared statement\nwith input values for placeholders, the database server checks each input\nvalue to ensure that the type matches the column definition or parameter\ndefinition. Advanced functionality: Parameter markers not only enable you to\npass input values to prepared SQL statements, they also enable you to retrieve\nOUT and INOUT parameters from stored procedures using db2_bind_param().\n@param connection A valid database connection resource variable as returned\nfrom db2_connect() or db2_pconnect().\n@param statement An SQL statement, optionally containing one or more\nparameter markers..\n@param options An associative array containing statement options. You can\nuse this parameter to request a scrollable cursor on database servers that\nsupport this functionality. For a description of valid statement options,\nsee db2_set_option().\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_bind_param() - Binds a PHP variable to an SQL statement parameter\n@see db2_execute() - Executes a prepared SQL statement\n@see db2_stmt_error() - Returns a string containing the SQLSTATE returned\nby an SQL statement\n@see db2_stmt_errormsg() - Returns a string containing the last SQL statement\nerror message\n
db2_primary_keys db2_primary_keys(resource $connection, string $qualifier,\nstring $schema, string $table-name) [resource]\nReturns a result set listing primary keys for a table. Returns a result set\nlisting the primary keys for a table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. If `schema` is NULL,\ndb2_primary_keys() matches the schema for the current connection.\n@param table-name The name of the table.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_procedure_columns db2_procedure_columns(resource $connection, string\n$qualifier, string $schema, string $procedure, string $parameter) [resource]\nReturns a result set listing stored procedure parameters. Returns a result\nset listing the parameters for one or more stored procedures.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the procedures. This parameter\naccepts a search pattern containing `_` and `%` as wildcards.\n@param procedure The name of the procedure. This parameter accepts a search\npattern containing `_` and `%` as wildcards.\n@param parameter The name of the parameter. This parameter accepts a search\npattern containing `_` and `%` as wildcards. If this parameter is NULL,\nall parameters for the specified stored procedures are returned.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_procedures db2_procedures(resource $connection, string $qualifier,\nstring $schema, string $procedure) [resource]\nReturns a result set listing the stored procedures registered in a\ndatabase. Returns a result set listing the stored procedures registered in\na database.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the procedures. This parameter\naccepts a search pattern containing `_` and `%` as wildcards.\n@param procedure The name of the procedure. This parameter accepts a search\npattern containing `_` and `%` as wildcards.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_result db2_result(resource $stmt, mixed $column) [mixed]\nReturns a single column from a row in the result set. Use db2_result()\nto return the value of a specified column in the current row of a result\nset. You must call db2_fetch_row() before calling db2_result() to set the\nlocation of the result set pointer.\n@param stmt A valid `stmt` resource.\n@param column Either an integer mapping to the 0-indexed field in the result\nset, or a string matching the name of the column.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_fetch_array() - Returns an array, indexed by column position,\nrepresenting a row in a result set\n@see db2_fetch_assoc() - Returns an array, indexed by column name, representing\na row in a result set\n@see db2_fetch_both() - Returns an array, indexed by both column name and\nposition, representing a row in a result set\n@see db2_fetch_object() - Returns an object with properties representing\ncolumns in the fetched row\n@see db2_fetch_row() - Sets the result set pointer to the next row or\nrequested row\n
db2_rollback db2_rollback(resource $connection) [bool]\nRolls back a transaction. Rolls back an in-progress transaction on the\nspecified connection resource and begins a new transaction. PHP applications\nnormally default to AUTOCOMMIT mode, so db2_rollback() normally has no effect\nunless AUTOCOMMIT has been turned off for the connection resource.\n@param connection A valid database connection resource variable as returned\nfrom db2_connect() or db2_pconnect().\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_autocommit() - Returns or sets the AUTOCOMMIT state for a database\nconnection\n@see db2_commit() - Commits a transaction\n
db2_server_info db2_server_info(resource $connection) [object]\nReturns an object with properties that describe the DB2 database server. This\nfunction returns an object with read-only properties that return information\nabout the IBM DB2, Cloudscape, or Apache Derby database server. The following\ntable lists the database server properties: Database server properties Property\nname Return type Description DBMS_NAME string The name of the database\nserver to which you are connected. For DB2 servers this is a combination\nof `DB2` followed by the operating system on which the database server is\nrunning. DBMS_VER string The version of the database server, in the form\nof a string &quot;MM.mm.uuuu&quot; where MM is the major version, mm is the\nminor version, and uuuu is the update. For example, &quot;08.02.0001&quot;\nrepresents major version 8, minor version 2, update 1. DB_CODEPAGE int The\ncode page of the database to which you are connected. DB_NAME string The\nname of the database to which you are connected. DFT_ISOLATION string The\ndefault transaction isolation level supported by the server: UR Uncommitted\nread: changes are immediately visible by all concurrent transactions. Cursor\nstability: a row read by one transaction can be altered and committed by a\nsecond concurrent transaction. Read stability: a transaction can add or remove\nrows matching a search condition or a pending transaction. Repeatable read:\ndata affected by pending transaction is not available to other transactions. No\ncommit: any changes are visible at the end of a successful operation. Explicit\ncommits and rollbacks are not allowed. The level of conformance to the ANSI/ISO\nSQL-92 specification offered by the database server: ENTRY Entry-level\nSQL-92 compliance. FIPS-127-2 transitional compliance. Full level SQL-92\ncompliance. Intermediate level SQL-92 compliance.\n@param connection Specifies an active DB2 client connection.\n@return (PECL ibm_db2 >= 1.1.1)\n@see db2_client_info() - Returns an object with properties that describe\nthe DB2 database client\n
db2_set_option db2_set_option(resource $resource, array $options, int $type)\n[bool]\nSet options for connection or statement resources. Sets options for a\nstatement resource or a connection resource. You cannot set options for\nresult set resources.\n@param resource A valid statement resource as returned from db2_prepare() or\na valid connection resource as returned from db2_connect() or db2_pconnect().\n@param options An associative array containing valid statement or connection\noptions. This parameter can be used to change autocommit values, cursor\ntypes (scrollable or forward), and to specify the case of the column names\n(lower, upper, or natural) that will appear in a result set. `autocommit`\nPassing `DB2_AUTOCOMMIT_ON` turns autocommit on for the specified connection\nresource. Passing `DB2_AUTOCOMMIT_OFF` turns autocommit off for the specified\nconnection resource.\n@param cursor Passing `DB2_FORWARD_ONLY` specifies a forward-only cursor\nfor a statement resource. This is the default cursor type, and is supported\nby all database servers. Passing `DB2_SCROLLABLE` specifies a scrollable\ncursor for a statement resource. Scrollable cursors enable result set rows\nto be accessed in non-sequential order, but are only supported by IBM DB2\nUniversal Database databases.\n@param binmode Passing `DB2_BINARY` specifies that binary data will be\nreturned as is. This is the default mode. This is the equivalent of setting\n`ibm_db2.binmode=1` in php.ini. Passing `DB2_CONVERT` specifies that binary\ndata will be converted to hexadecimal encoding, and will be returned as\nsuch. This is the equivalent of setting `ibm_db2.binmode=2` in php.ini. Passing\n`DB2_PASSTHRU` specifies that binary data will be converted to NULL. This\nis the equivalent of setting `ibm_db2.binmode=3` in php.ini.\n@param db2_attr_case Passing `DB2_CASE_LOWER` specifies that column names of\nthe result set are returned in lower case. Passing `DB2_CASE_UPPER` specifies\nthat column names of the result set are returned in upper case. Passing\n`DB2_CASE_NATURAL` specifies that column names of the result set are returned\nin natural case.\n@param deferred_prepare Passing `DB2_DEFERRED_PREPARE_ON` turns\ndeferred prepare on for the specified statement resource. Passing\n`DB2_DEFERRED_PREPARE_OFF` turns deferred prepare off for the specified\nstatement resource.\n@param i5_fetch_only `DB2_I5_FETCH_ON` - Cursors are read-only\nand cannot be used for positioned updates or deletes. This is the\ndefault unless `SQL_ATTR_FOR_FETCH_ONLY` environment has been set to\n`SQL_FALSE`. `DB2_I5_FETCH_OFF` - Cursors can be used for positioned updates\nand deletes.\n@param rowcount `DB2_ROWCOUNT_PREFETCH_ON` - Client can request the full\nrow count prior to fetching, which means that db2_num_rows() returns\nthe number of rows selected even when a `ROLLFORWARD_ONLY` cursor is\nused. `DB2_ROWCOUNT_PREFETCH_OFF` - Client cannot request the full row count\nprior to fetching.\n@param trusted_user To switch the user to a trusted user, pass the User ID\n(String) of the trusted user as the value of this key. This option can be\nset on a connection resource only. To use this option, trusted context must\nbe enabled on the connection resource.\n@param trusted_password The password (String) that corresponds to the user\nspecified by the trusted_user key.\n@param userid `SQL_ATTR_INFO_USERID` - A pointer to a null-terminated character\nstring used to identify the client user ID sent to the host database server\nwhen using DB2 Connect. Note: DB2 for z/OS and OS/390 servers support up\nto a length of 16 characters. This user-id is not to be confused with the\nauthentication user-id, it is for identification purposes only and is not\nused for any authorization.\n@param acctstr `SQL_ATTR_INFO_ACCTSTR` - A pointer to a null-terminated\ncharacter string used to identify the client accounting string sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 200 characters.\n@param applname `SQL_ATTR_INFO_APPLNAME` - A pointer to a null-terminated\ncharacter string used to identify the client application name sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 32 characters.\n@param wrkstnname `SQL_ATTR_INFO_WRKSTNNAME` - A pointer to a null-terminated\ncharacter string used to identify the client workstation name sent to the\nhost database server when using DB2 Connect. Note: DB2 for z/OS and OS/390\nservers support up to a length of 18 characters.\n@param type An integer value that specifies the type of resource that\nwas passed into the function. The type of resource and this value must\ncorrespond. Passing `1` as the value specifies that a connection resource has\nbeen passed into the function. Passing any integer not equal to `1` as the\nvalue specifies that a statement resource has been passed into the function.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_connect() - Returns a connection to a database\n@see db2_pconnect() - Returns a persistent connection to a database\n@see db2_exec() - Executes an SQL statement directly\n@see db2_prepare() - Prepares an SQL statement to be executed\n@see db2_cursor_type() - Returns the cursor type used by a statement resource\n
db2_special_columns db2_special_columns(resource $connection, string\n$qualifier, string $schema, string $table_name, int $scope) [resource]\nReturns a result set listing the unique row identifier columns for a\ntable. Returns a result set listing the unique row identifier columns for\na table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables.\n@param table_name The name of the table.\n@param scope Integer value representing the minimum duration for which\nthe unique row identifier is valid. This can be one of the following\nvalues: Integer value SQL constant Description 0 SQL_SCOPE_CURROW Row\nidentifier is valid only while the cursor is positioned on the row. 1\nSQL_SCOPE_TRANSACTION Row identifier is valid for the duration of the\ntransaction. 2 SQL_SCOPE_SESSION Row identifier is valid for the duration\nof the connection.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_statistics db2_statistics(resource $connection, string $qualifier,\nstring $schema, string $table-name, bool $unique) [resource]\nReturns a result set listing the index and statistics for a table. Returns\na result set listing the index and statistics for a table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema that contains the targeted table. If this parameter\nis NULL, the statistics and indexes are returned for the schema of the\ncurrent user.\n@param table_name The name of the table.\n@param unique An integer value representing the type of index information\nto return. `0` Return only the information for unique indexes on the table.\n@param 1 Return the information for all indexes on the table.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_stmt_error db2_stmt_error([resource $stmt]) [string]\nReturns a string containing the SQLSTATE returned by an SQL statement. Returns\na string containing the SQLSTATE value returned by an SQL statement. If you\ndo not pass a statement resource as an argument to db2_stmt_error(), the\ndriver returns the SQLSTATE value associated with the last attempt to return\na statement resource, for example, from db2_prepare() or db2_exec(). To learn\nwhat the SQLSTATE value means, you can issue the following command at a DB2\nCommand Line Processor prompt: db2 &#039;? `sqlstate-value`&#039;. You can\nalso call db2_stmt_errormsg() to retrieve an explicit error message and the\nassociated SQLCODE value.\n@param stmt A valid statement resource.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_conn_error() - Returns a string containing the SQLSTATE returned\nby the last connection attempt\n@see db2_conn_errormsg() - Returns the last connection error message and\nSQLCODE value\n@see db2_stmt_errormsg() - Returns a string containing the last SQL statement\nerror message\n
db2_stmt_errormsg db2_stmt_errormsg([resource $stmt]) [string]\nReturns a string containing the last SQL statement error message. Returns a\nstring containing the last SQL statement error message. If you do not pass a\nstatement resource as an argument to db2_stmt_errormsg(), the driver returns\nthe error message associated with the last attempt to return a statement\nresource, for example, from db2_prepare() or db2_exec().\n@param stmt A valid statement resource.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_conn_error() - Returns a string containing the SQLSTATE returned\nby the last connection attempt\n@see db2_conn_errormsg() - Returns the last connection error message and\nSQLCODE value\n@see db2_stmt_error() - Returns a string containing the SQLSTATE returned\nby an SQL statement\n
db2_table_privileges db2_table_privileges(resource $connection [, string\n$qualifier [, string $schema [, string $table_name]]]) [resource]\nReturns a result set listing the tables and associated privileges in a\ndatabase. Returns a result set listing the tables and associated privileges\nin a database.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. This parameter accepts\na search pattern containing `_` and `%` as wildcards.\n@param table_name The name of the table. This parameter accepts a search\npattern containing `_` and `%` as wildcards.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_tables db2_tables(resource $connection [, string $qualifier [, string\n$schema [, string $table-name [, string $table-type]]]]) [resource]\nReturns a result set listing the tables and associated metadata in a\ndatabase. Returns a result set listing the tables and associated metadata\nin a database.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. This parameter accepts\na search pattern containing `_` and `%` as wildcards.\n@param table-name The name of the table. This parameter accepts a search\npattern containing `_` and `%` as wildcards.\n@param table-type A list of comma-delimited table type identifiers. To match\nall table types, pass NULL or an empty string. Valid table type identifiers\ninclude: ALIAS, HIERARCHY TABLE, INOPERATIVE VIEW, NICKNAME, MATERIALIZED\nQUERY TABLE, SYSTEM TABLE, TABLE, TYPED TABLE, TYPED VIEW, and VIEW.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n
dba_close dba_close(resource $handle) [void]\nClose a DBA database. dba_close() closes the established database and frees\nall resources of the specified database handle.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_open() - Open database\n@see dba_popen() - Open database persistently\n
dba_delete dba_delete(string $key, resource $handle) [bool]\nDelete DBA entry specified by key. dba_delete() deletes the specified entry\nfrom the database.\n@param key The key of the entry which is deleted.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_exists() - Check whether key exists\n@see dba_fetch() - Fetch data specified by key\n@see dba_insert() - Insert entry\n@see dba_replace() - Replace or insert entry\n
dba_exists dba_exists(string $key, resource $handle) [bool]\nCheck whether key exists. dba_exists() checks whether the specified `key`\nexists in the database.\n@param key The key the check is performed for.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_delete() - Delete DBA entry specified by key\n@see dba_fetch() - Fetch data specified by key\n@see dba_insert() - Insert entry\n@see dba_replace() - Replace or insert entry\n
dba_fetch dba_fetch(string $key, resource $handle) [string]\nFetch data specified by key. dba_fetch() fetches the data specified by `key`\nfrom the database specified with `handle`.\n@param key The key the data is specified by. Note: When working with inifiles\nthis function accepts arrays as keys where index 0 is the group and index\n1 is the value name. See: dba_key_split().\n@param skip The number of key-value pairs to ignore when using cdb\ndatabases. This value is ignored for all other databases which do not support\nmultiple keys with the same name.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_exists() - Check whether key exists\n@see dba_delete() - Delete DBA entry specified by key\n@see dba_insert() - Insert entry\n@see dba_replace() - Replace or insert entry\n@see dba_key_split() - Splits a key in string representation into array\nrepresentation\n
dba_firstkey dba_firstkey(resource $handle) [string]\nFetch first key. dba_firstkey() returns the first key of the database and\nresets the internal key pointer. This permits a linear search through the\nwhole database.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_nextkey() - Fetch next key\n@see dba_key_split() - Splits a key in string representation into array\nrepresentation\n@see Example 2 in the DBA examples\n
dba_handlers dba_handlers([bool $full_info=false]) [array]\nList all the handlers available. dba_handlers() list all the handlers\nsupported by this extension.\n@param full_info Turns on/off full information display in the result.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
dba_insert dba_insert(string $key, string $value, resource $handle) [bool]\nInsert entry. dba_insert() inserts the entry described with `key` and `value`\ninto the database.\n@param key The key of the entry to be inserted. If this key already exist\nin the database, this function will fail. Use dba_replace() if you need to\nreplace an existent key.\n@param value The value to be inserted.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_exists() - Check whether key exists\n@see dba_delete() - Delete DBA entry specified by key\n@see dba_fetch() - Fetch data specified by key\n@see dba_replace() - Replace or insert entry\n
dba_key_split dba_key_split(mixed $key) [mixed]\nSplits a key in string representation into array\nrepresentation. dba_key_split() splits a key (string representation) into\nan array representation.\n@param key The key in string representation.\n@return (PHP 5)\n@see dba_firstkey() - Fetch first key\n@see dba_nextkey() - Fetch next key\n@see dba_fetch() - Fetch data specified by key\n
dba_list dba_list(void) [array]\nList all open database files. dba_list() list all open database files.\n@return (PHP 4 >= 4.3.0, PHP 5)\n
dba_nextkey dba_nextkey(resource $handle) [string]\nFetch next key. dba_nextkey() returns the next key of the database and\nadvances the internal key pointer.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_firstkey() - Fetch first key\n@see dba_key_split() - Splits a key in string representation into array\nrepresentation\n@see Example 2 in the DBA examples\n
dba_open dba_open(string $path, string $mode [, string $handler [, mixed\n$...]]) [resource]\nOpen database. dba_open() establishes a database instance for `path` with\n`mode` using `handler`.\n@param path Commonly a regular path in your filesystem.\n@param mode It is `r` for read access, `w` for read/write access to an already\nexisting database, `c` for read/write access and database creation if it\ndoesn&#039;t currently exist, and `n` for create, truncate and read/write\naccess. The database is created in BTree mode, other modes (like Hash or Queue)\nare not supported. Additionally you can set the database lock method with the\nnext char. Use `l` to lock the database with a .lck file or `d` to lock the\ndatabasefile itself. It is important that all of your applications do this\nconsistently. If you want to test the access and do not want to wait for the\nlock you can add `t` as third character. When you are absolutely sure that you\ndo not require database locking you can do so by using `-` instead of `l` or\n`d`. When none of `d`, `l` or `-` is used, dba will lock on the database file\nas it would with `d`. Note: There can only be one writer for one database\nfile. When you use dba on a web server and more than one request requires\nwrite operations they can only be done one after another. Also read during\nwrite is not allowed. The dba extension uses locks to prevent this. See the\nfollowing table: DBA locking already open `mode` = &quot;rl&quot; `mode`\n= &quot;rlt&quot; `mode` = &quot;wl&quot; `mode` = &quot;wlt&quot; `mode`\n= &quot;rd&quot; `mode` = &quot;rdt&quot; `mode` = &quot;wd&quot; `mode` =\n&quot;wdt&quot; not open ok ok ok ok ok ok ok ok `mode` = &quot;rl&quot; ok\nok wait false illegal illegal illegal illegal `mode` = &quot;wl&quot; wait\nfalse wait false illegal illegal illegal illegal `mode` = &quot;rd&quot;\nillegal illegal illegal illegal ok ok wait false `mode` = &quot;wd&quot;\nillegal illegal illegal illegal wait false wait false ok: the second call\nwill be successfull. wait: the second call waits until dba_close() is called\nfor the first. false: the second call returns false. illegal: you must not\nmix &quot;l&quot; and &quot;d&quot; modifiers for `mode` parameter.\n@param handler The name of the handler which shall be used for accessing\n`path`. It is passed all optional parameters given to dba_open() and can\nact on behalf of them.\n@return (PHP 4, PHP 5)\n@see dba_popen() - Open database persistently\n@see dba_close() - Close a DBA database\n
dba_optimize dba_optimize(resource $handle) [bool]\nOptimize database. dba_optimize() optimizes the underlying database.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_sync() - Synchronize database\n
dba_popen dba_popen(string $path, string $mode [, string $handler [, mixed\n$...]]) [resource]\nOpen database persistently. dba_popen() establishes a persistent database\ninstance for `path` with `mode` using `handler`.\n@param path Commonly a regular path in your filesystem.\n@param mode It is `r` for read access, `w` for read/write access to an already\nexisting database, `c` for read/write access and database creation if it\ndoesn&#039;t currently exist, and `n` for create, truncate and read/write\naccess.\n@param handler The name of the handler which shall be used for accessing\n`path`. It is passed all optional parameters given to dba_popen() and can\nact on behalf of them.\n@return (PHP 4, PHP 5)\n@see dba_open() - Open database\n@see dba_close() - Close a DBA database\n
dba_replace dba_replace(string $key, string $value, resource $handle) [bool]\nReplace or insert entry. dba_replace() replaces or inserts the entry described\nwith `key` and `value` into the database specified by `handle`.\n@param key The key of the entry to be replaced.\n@param value The value to be replaced.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_exists() - Check whether key exists\n@see dba_delete() - Delete DBA entry specified by key\n@see dba_fetch() - Fetch data specified by key\n@see dba_insert() - Insert entry\n
dba_sync dba_sync(resource $handle) [bool]\nSynchronize database. dba_sync() synchronizes the database. This will probably\ntrigger a physical write to the disk, if supported.\n@param handle The database handler, returned by dba_open() or dba_popen().\n@return (PHP 4, PHP 5)\n@see dba_optimize() - Optimize database\n
dbase_add_record dbase_add_record(int $dbase_identifier, array $record) [bool]\nAdds a record to a database. Adds the given data to the database.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@param record An indexed array of data. The number of items must be equal\nto the number of fields in the database, otherwise dbase_add_record() will\nfail. Note: If you&#039;re using dbase_get_record() return value for this\nparameter, remember to reset the key named `deleted`.\n@return (PHP 4, PHP 5)\n@see dbase_delete_record() - Deletes a record from a database\n@see dbase_replace_record() - Replaces a record in a database\n
dbase_close dbase_close(int $dbase_identifier) [bool]\nCloses a database. Closes the given database link identifier.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@return (PHP 4, PHP 5)\n@see dbase_open() - Opens a database\n@see dbase_create() - Creates a database\n
dbase_create dbase_create(string $filename, array $fields) [int]\nCreates a database. dbase_create() creates a dBase database with the given\ndefinition. Note: When safe mode is enabled, PHP checks whether the files\nor directories being operated upon have the same UID (owner) as the script\nthat is being executed. Note: This function is affected by open_basedir.\n@param filename The name of the database. It can be a relative or absolute\npath to the file where dBase will store your data.\n@param fields An array of arrays, each array describing the format of one\nfield of the database. Each field consists of a name, a character indicating\nthe field type, and optionally, a length, and a precision. Note: The fieldnames\nare limited in length and must not exceed 10 chars.\n@return (PHP 4, PHP 5)\n@see dbase_open() - Opens a database\n@see dbase_close() - Closes a database\n
dbase_delete_record dbase_delete_record(int $dbase_identifier, int\n$record_number) [bool]\nDeletes a record from a database. Marks the given record to be deleted\nfrom the database. Note: To actually remove the record from the database,\nyou must also call dbase_pack().\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@param record_number An integer which spans from 1 to the number of records\nin the database (as returned by dbase_numrecords()).\n@return (PHP 4, PHP 5)\n@see dbase_add_record() - Adds a record to a database\n@see dbase_replace_record() - Replaces a record in a database\n
dbase_get_header_info dbase_get_header_info(int $dbase_identifier) [array]\nGets the header info of a database. Returns information on the column\nstructure of the given database link identifier.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@return (PHP 5)\n
dbase_get_record_with_names dbase_get_record_with_names(int $dbase_identifier,\nint $record_number) [array]\nGets a record from a database as an associative array. Gets a record from\na dBase database as an associative array.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@param record_number The index of the record.\n@return (PHP 4, PHP 5)\n@see dbase_get_record() - Gets a record from a database as an indexed array\n
dbase_get_record dbase_get_record(int $dbase_identifier, int $record_number)\n[array]\nGets a record from a database as an indexed array. Gets a record from a\ndatabase as an indexed array.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@param record_number The index of the record.\n@return (PHP 4, PHP 5)\n@see dbase_get_record_with_names() - Gets a record from a database as an\nassociative array\n
dbase_numfields dbase_numfields(int $dbase_identifier) [int]\nGets the number of fields of a database. Gets the number of fields\n(columns) in the specified database. Note: Field numbers are between\n0 and dbase_numfields($db)-1, while record numbers are between 1 and\ndbase_numrecords($db).\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@return (PHP 4, PHP 5)\n@see dbase_numrecords() - Gets the number of records in a database\n
dbase_numrecords dbase_numrecords(int $dbase_identifier) [int]\nGets the number of records in a database. Gets the number of records\n(rows) in the specified database. Note: Record numbers are between\n1 and dbase_numrecords($db), while field numbers are between 0 and\ndbase_numfields($db)-1.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@return (PHP 4, PHP 5)\n@see dbase_numfields() - Gets the number of fields of a database\n
dbase_open dbase_open(string $filename, int $mode) [int]\nOpens a database. dbase_open() opens a dBase database with the given access\nmode. Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed. Note: This function is affected by open_basedir.\n@param filename The name of the database. It can be a relative or absolute\npath to the file where dBase will store your data.\n@param mode An integer which correspond to those for the open() system call\n(Typically 0 means read-only, 1 means write-only, and 2 means read and\nwrite). Note: You can&#039;t open a dBase file in write-only mode as the\nfunction will fail to read the headers information and thus you can&#039;t\nuse 1 as `mode`.\n@return (PHP 4, PHP 5)\n@see dbase_create() - Creates a database\n@see dbase_close() - Closes a database\n
dbase_pack dbase_pack(int $dbase_identifier) [bool]\nPacks a database. Packs the specified database by permanently deleting all\nrecords marked for deletion using dbase_delete_record().\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@return (PHP 4, PHP 5)\n@see dbase_delete_record() - Deletes a record from a database\n
dbase_replace_record dbase_replace_record(int $dbase_identifier, array $record,\nint $record_number) [bool]\nReplaces a record in a database. Replaces the given record in the database\nwith the given data.\n@param dbase_identifier The database link identifier, returned by dbase_open()\nor dbase_create().\n@param record An indexed array of data. The number of items must be equal\nto the number of fields in the database, otherwise dbase_replace_record()\nwill fail. Note: If you&#039;re using dbase_get_record() return value for\nthis parameter, remember to reset the key named `deleted`.\n@param record_number An integer which spans from 1 to the number of records\nin the database (as returned by dbase_numrecords()).\n@return (PHP 4, PHP 5)\n@see dbase_add_record() - Adds a record to a database\n@see dbase_delete_record() - Deletes a record from a database\n
dbplus_add dbplus_add(resource $relation, array $tuple) [int]\nAdd a tuple to a relation. Adds a tuple to a `relation`.\n@param relation\n@param tuple An array of attribute/value pairs to be inserted into the given\n`relation`. After successful execution this array will contain the complete\ndata of the newly created tuple, including all implicitly set domain fields\nlike sequences.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_errcode() - Get error string for given errorcode or last error\n
dbplus_aql dbplus_aql(string $query [, string $server [, string $dbpath]])\n[resource]\nPerform AQL query. Executes an AQL `query` on the given `server` and `dbpath`.\n@param query The AQL query to be executed. Further information on the AQL\n(Algebraic Query Language) is provided in the original db++ manual.\n@param server\n@param dbpath\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_chdir dbplus_chdir([string $newdir]) [string]\nGet/Set database virtual current directory. Changes the virtual current\ndirectory where relation files will be looked for by dbplus_open().\n@param newdir The new directory for relation files. You can omit this\nparameter to query the current working directory.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_close dbplus_close(resource $relation) [mixed]\nClose a relation. Closes a relation previously opened by dbplus_open().\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_curr dbplus_curr(resource $relation, array &$tuple) [int]\nGet current tuple from relation. Reads the data for the current tuple for\nthe given `relation`.\n@param relation A relation opened by dbplus_open().\n@param tuple The data will be passed back in this parameter, as an associative\narray.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_first() - Get first tuple from relation\n@see dbplus_prev() - Get previous tuple from relation\n@see dbplus_next() - Get next tuple from relation\n@see dbplus_last() - Get last tuple from relation\n@see dbplus_errcode() - Get error string for given errorcode or last error\n
dbplus_errcode dbplus_errcode([int $errno]) [string]\nGet error string for given errorcode or last error. Returns a clear error\nstring for the given error code.\n@param errno The error code. If not provided, the result code of the last db++\noperation is assumed.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_errno dbplus_errno(void) [int]\nGet error code for last operation. Returns the error code returned by the\nlast db++ operation.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_errcode() - Get error string for given errorcode or last error\n
dbplus_find dbplus_find(resource $relation, array $constraints, mixed $tuple)\n[int]\nSet a constraint on a relation. Places a constraint on the given\n`relation`. Further calls to functions like dbplus_curr() or dbplus_next()\nwill only return tuples matching the given constraints.\n@param relation A relation opened by dbplus_open().\n@param constraints Constraints are triplets of strings containing of a domain\nname, a comparison operator and a comparison value. The `constraints` parameter\narray may consist of a collection of string arrays, each of which contains\na domain, an operator and a value, or of a single string array containing a\nmultiple of three elements. The comparison operator may be one of the following\nstrings: &#039;==&#039;, &#039;>&#039;, &#039;>=&#039;, &#039;&lt;&#039;,\n&#039;&lt;=&#039;, &#039;!=&#039;, &#039;~&#039; for a regular expression\nmatch and &#039;BAND&#039; or &#039;BOR&#039; for bitwise operations.\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_unselect() - Remove a constraint from relation\n
dbplus_first dbplus_first(resource $relation, array &$tuple) [int]\nGet first tuple from relation. Reads the data for the first tuple for the given\n`relation`, makes it the current tuple and pass it back as an associative\narray in `tuple`.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_curr() - Get current tuple from relation\n@see dbplus_prev() - Get previous tuple from relation\n@see dbplus_next() - Get next tuple from relation\n@see dbplus_last() - Get last tuple from relation\n@see dbplus_errcode() - Get error string for given errorcode or last error\n
dbplus_flush dbplus_flush(resource $relation) [int]\nFlush all changes made on a relation. Writes all changes applied to `relation`\nsince the last flush to disk.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_errcode() - Get error string for given errorcode or last error\n
dbplus_freealllocks dbplus_freealllocks(void) [int]\nFree all locks held by this client. Frees all tuple locks held by this client.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_getlock() - Get a write lock on a tuple\n@see dbplus_freelock() - Release write lock on tuple\n@see dbplus_freerlocks() - Free all tuple locks on given relation\n
dbplus_freelock dbplus_freelock(resource $relation, string $tuple) [int]\nRelease write lock on tuple. Releases a write lock on the given `tuple`\npreviously obtained by dbplus_getlock().\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_getlock() - Get a write lock on a tuple\n@see dbplus_freerlocks() - Free all tuple locks on given relation\n@see dbplus_freealllocks() - Free all locks held by this client\n
dbplus_freerlocks dbplus_freerlocks(resource $relation) [int]\nFree all tuple locks on given relation. Frees all tuple locks held on the\ngiven `relation`.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_getlock() - Get a write lock on a tuple\n@see dbplus_freelock() - Release write lock on tuple\n@see dbplus_freealllocks() - Free all locks held by this client\n
dbplus_getlock dbplus_getlock(resource $relation, string $tuple) [int]\nGet a write lock on a tuple. Requests a write lock on the specified `tuple`.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_freelock() - Release write lock on tuple\n@see dbplus_freerlocks() - Free all tuple locks on given relation\n@see dbplus_freealllocks() - Free all locks held by this client\n
dbplus_getunique dbplus_getunique(resource $relation, int $uniqueid) [int]\nGet an id number unique to a relation. Obtains a number guaranteed to be\nunique for the given `relation` and will pass it back in the variable given as\n`uniqueid`.\n@param relation A relation opened by dbplus_open().\n@param uniqueid\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_info dbplus_info(resource $relation, string $key, array &$result) [int]\nGet information about a relation.\n@param relation A relation opened by dbplus_open().\n@param key\n@param result\n
dbplus_last dbplus_last(resource $relation, array &$tuple) [int]\nGet last tuple from relation. Reads the data for the last tuple for the given\n`relation`, makes it the current tuple and pass it back as an associative\narray in `tuple`.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_first() - Get first tuple from relation\n@see dbplus_curr() - Get current tuple from relation\n@see dbplus_prev() - Get previous tuple from relation\n@see dbplus_next() - Get next tuple from relation\n
dbplus_lockrel dbplus_lockrel(resource $relation) [int]\nRequest write lock on relation. Requests a write lock on the given\n`relation`. Other clients may still query the relation, but can&#039;t alter\nit while it is locked.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_next dbplus_next(resource $relation, array &$tuple) [int]\nGet next tuple from relation. Reads the data for the next tuple for the given\n`relation`, makes it the current tuple and will pass it back as an associative\narray in `tuple`.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_first() - Get first tuple from relation\n@see dbplus_curr() - Get current tuple from relation\n@see dbplus_prev() - Get previous tuple from relation\n@see dbplus_last() - Get last tuple from relation\n
dbplus_open dbplus_open(string $name) [resource]\nOpen relation file. Opens the given relation file.\n@param name Can be either a file name or a relative or absolute path name. This\nwill be mapped in any case to an absolute relation file path on a specific\nhost machine and server.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_prev dbplus_prev(resource $relation, array &$tuple) [int]\nGet previous tuple from relation. Reads the data for the previous tuple for\nthe given `relation`, makes it the current tuple and will pass it back as\nan associative array in `tuple`.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_first() - Get first tuple from relation\n@see dbplus_curr() - Get current tuple from relation\n@see dbplus_next() - Get next tuple from relation\n@see dbplus_last() - Get last tuple from relation\n
dbplus_rchperm dbplus_rchperm(resource $relation, int $mask, string $user,\nstring $group) [int]\nChange relation permissions. Changes access permissions as specified by\n`mask`, `user` and `group`. The values for these are operating system specific.\n@param relation A relation opened by dbplus_open().\n@param mask\n@param user\n@param group\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rcreate dbplus_rcreate(string $name, mixed $domlist [, bool $overwrite])\n[resource]\nCreates a new DB++ relation. Creates a new relation. Any existing relation\nsharing the same `name` will be overwritten if the relation is currently\nnot in use and `overwrite` is set to TRUE.\n@param name\n@param domlist A combination of domains. May be passed as a single domain\nname string or as an array of domain names. This parameter should contain\nthe domain specification for the new relation within an array of domain\ndescription strings. A domain description string consists of a domain name\nunique to this relation, a slash and a type specification character. See the\ndb++ documentation, especially the dbcreate(1) manpage, for a description\nof available type specifiers and their meanings. Note: This function will\nalso accept a string with space delimited domain description strings, but\nit is recommended to use an array\n@param overwrite\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rcrtexact dbplus_rcrtexact(string $name, resource $relation [, bool\n$overwrite]) [mixed]\nCreates an exact but empty copy of a relation including\nindices. dbplus_rcrtexact() will create an exact but empty copy of the given\n`relation` under a new `name`.\n@param name\n@param relation The copied relation, opened by dbplus_open().\n@param overwrite An existing relation by the same `name` will only be\noverwritten if this parameter is set to TRUE and no other process is currently\nusing the relation.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rcrtlike dbplus_rcrtlike(string $name, resource $relation [, int\n$overwrite]) [mixed]\nCreates an empty copy of a relation with default indices. dbplus_rcrtexact()\nwill create an empty copy of the given `relation` under a new `name`, but\nwith default indices.\n@param name\n@param relation The copied relation, opened by dbplus_open().\n@param overwrite An existing relation by the same `name` will only be\noverwritten if this parameter is set to TRUE and no other process is currently\nusing the relation.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_resolve dbplus_resolve(string $relation_name) [array]\nResolve host information for relation. dbplus_resolve() will try to resolve\nthe given `relation_name` and find out internal server id, real hostname\nand the database path on this host.\n@param relation_name The relation name.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n@see dbplus_tcl() - Execute TCL code on server side\n
dbplus_restorepos dbplus_restorepos(resource $relation, array $tuple) [int]\nRestore position.\n@param relation A relation opened by dbplus_open().\n@param tuple\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rkeys dbplus_rkeys(resource $relation, mixed $domlist) [mixed]\nSpecify new primary key for a relation. dbplus_rkeys() will replace the\ncurrent primary key for `relation` with the combination of domains specified\nby `domlist`.\n@param relation A relation opened by dbplus_open().\n@param domlist A combination of domains. May be passed as a single domain\nname string or as an array of domain names.\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_ropen dbplus_ropen(string $name) [resource]\nOpen relation file local. dbplus_ropen() will open the relation `file` locally\nfor quick access without any client/server overhead. Access is read only and\nonly dbplus_curr() and dbplus_next() may be applied to the returned relation.\n@param name\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rquery dbplus_rquery(string $query [, string $dbpath]) [resource]\nPerform local (raw) AQL query. dbplus_rquery() performs a local (raw) AQL query\nusing an AQL interpreter embedded into the db++ client library. dbplus_rquery()\nis faster than dbplus_aql() but will work on local data only.\n@param query\n@param dbpath\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rrename dbplus_rrename(resource $relation, string $name) [int]\nRename a relation. dbplus_rrename() will change the name of `relation` to\n`name`.\n@param relation A relation opened by dbplus_open().\n@param name\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_rsecindex dbplus_rsecindex(resource $relation, mixed $domlist, int\n$type) [mixed]\nCreate a new secondary index for a relation. dbplus_rsecindex() will create a\nnew secondary index for `relation` with consists of the domains specified by\n`domlist` and is of type `type`\n@param relation A relation opened by dbplus_open().\n@param domlist A combination of domains. May be passed as a single domain\nname string or as an array of domain names.\n@param type\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
dbplus_runlink dbplus_runlink(resource $relation) [int]\nRemove relation from filesystem. dbplus_runlink() will close and remove the\n`relation`.\n@param relation A relation opened by dbplus_open().\n@return (PHP 4 &lt;= 4.1.0, PECL dbplus >= 0.9)\n
cubrid_fetch cubrid_fetch(resource $result [, int $type=CUBRID_BOTH]) [mixed]\nFetch the next row from a result set. The cubrid_fetch() function is used\nto get a single row from the query result. The cursor automatically moves\nto the next row after getting the result.\n@param result `result` comes from a call to cubrid_execute()\n@param type Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\nCUBRID_BOTH, CUBRID_OBJECT.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_field_flags cubrid_field_flags(resource $result, int $field_offset)\n[string]\nReturn a string with the flags of the given field offset. This function\nreturns a string with the flags of the given field offset separated by\nspace. You can split the returned value using explode. The possible flags\ncould be: not_null, primary_key, unique_key, foreign_key, auto_increment,\nshared, reverse_index, reverse_unique and timestamp.\n@param result `result` comes from a call to cubrid_execute()\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_field_len cubrid_field_len(resource $result, int $field_offset) [int]\nGet the maximum length of the specified field. This function returns the\nmaximum length of the specified field on success, or it returns FALSE\non failure.\n@param result `result` comes from a call to cubrid_execute()\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_field_name cubrid_field_name(resource $result, int $field_offset)\n[string]\nReturn the name of the specified field index. This function returns the name\nof the specified field index on success or it returns FALSE on failure.\n@param result `result` comes from a call to cubrid_execute()\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_field_seek cubrid_field_seek(resource $result [, int $field_offset=0])\n[bool]\nMove the result set cursor to the specified field offset. This function\nmoves the result set cursor to the specified field offset. This offset is\nused by cubrid_fetch_field() if it doesn&#039;t include a field offset. It\nreturns TRUE on success or FALSE on failure.\n@param result `result` comes from a call to cubrid_execute()\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_field_table cubrid_field_table(resource $result, int $field_offset)\n[string]\nReturn the name of the table of the specified field. This function returns\nthe name of the table of the specified field. This is useful when using\nlarge select queries with JOINS.\n@param result Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\nCUBRID_BOTH.\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_field_type cubrid_field_type			(resource $result,\nint $field_offset) [string]\nReturn the type of the column corresponding to the given field offset. This\nfunction returns the type of the column corresponding to the given field\noffset. The returned field type could be one of the following: &quot;int&quot;,\n&quot;real&quot;, &quot;string&quot;, etc.\n@param result Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\nCUBRID_BOTH.\n@param field_offset The numerical field offset. The `field_offset` starts\nat 0. If `field_offset` does not exist, an error of level E_WARNING is\nalso issued.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_free_result cubrid_free_result(resource $req_identifier) [bool]\nFree the memory occupied by the result data. This function frees the\nmemory occupied by the result data. It returns TRUE on success or FALSE on\nfailure. Note that it can only frees the client fetch buffer now, and if\nyou want free all memory, use function cubrid_close_request().\n@param req_identifier This is the request identifier.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_get_charset cubrid_get_charset(resource $conn_identifier) [string]\nReturn the current CUBRID connection charset. This function returns This\nfunction returns the current CUBRID connection charset.\n@param conn_identifier The CUBRID connection.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_get_class_name cubrid_get_class_name(resource $conn_identifier,\nstring $oid) [string]\nGet the class name using OID. The cubrid_get_class_name() function is used\nto get the class name from `oid`.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to check the existence.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_is_instance() - Check whether the instance pointed by OID exists\n@see cubrid_drop() - Delete an instance using OID\n
cubrid_get_client_info cubrid_get_client_info(void) [string]\nReturn the client library version. This function returns a string that\nrepresents the client library version.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_get_db_parameter cubrid_get_db_parameter(resource $conn_identifier)\n[array]\nReturns the CUBRID database parameters. This function returns the CUBRID\ndatabase parameters or it returns FALSE on failure. It returns an associative\narray with the values for the following parameters:  PARAM_ISOLATION_LEVEL\nLOCK_TIMEOUT MAX_STRING_LENGTH PARAM_AUTO_COMMIT   Database parameters\nParameter Description PARAM_ISOLATION_LEVEL In current version CUBRID PHP,\nyou can set the level of transaction isolation by using isolation_level\nin the $CUBRID/conf/cubrid.conf or the SET TRANSACTION statement. In next\nversion, isolation level can be set using new CUBRID PHP API. LOCK_TIMEOUT\nCUBRID provides the lock timeout feature, which sets the waiting time\nfor the lock until the transaction lock setting is allowed. The system\nparameter lock_timeout_in_secs in the $CUBRID/conf/cubrid.conf file or the\nSET TRANSACTION statement sets the timeout (in seconds). In next version,\nlock timeout can be set using new CUBRID PHP API. The default value of the\nlock_timeout_in_secs parameter is -1, which means the application client will\nwait indefinitely until the transaction lock is allowed. PARAM_AUTO_COMMIT\nIn CUBRID PHP, an auto-commit mode is disabled by default for transaction\nmanagement, and it can&#039;t be enabled in current version CUBRID PHP. It\ncan be set in next version. And auto commit modes can be applied only for\nSELECT statements by setting broker parameters.  The following table shows the\nisolation levels from 1 to 6. It consists of table schema (row) and isolation\nlevel: Levels of Isolation Supported by CUBRID Name Description SERIALIZABLE\n(6) In this isolation level, problems concerning concurrency (e.g. dirty read,\nnon-repeatable read, phantom read, etc.) do not occur. REPEATABLE READ CLASS\nwith REPEATABLE READ INSTANCES (5) Another transaction T2 cannot update the\nschema of table A while transaction T1 is viewing table A. Transaction T1\nmay experience phantom read for the record R that was inserted by another\ntransaction T2 when it is repeatedly retrieving a specific record. REPEATABLE\nREAD CLASS with READ COMMITTED INSTANCES (or CURSOR STABILITY) (4) Another\ntransaction T2 cannot update the schema of table A while transaction T1\nis viewing table A. Transaction T1 may experience R read (non-repeatable\nread) that was updated and committed by another transaction T2 when it\nis repeatedly retrieving the record R. REPEATABLE READ CLASS with READ\nUNCOMMITTED INSTANCES (3) Default isolation level. Another transaction T2\ncannot update the schema of table A while transaction T1 is viewing table\nA. Transaction T1 may experience R&#039; read (dirty read) for the record\nthat was updated but not committed by another transaction T2. READ COMMITTED\nCLASS with READ COMMITTED INSTANCES (2) Transaction T1 may experience A&#039;\nread (non-repeatable read) for the table that was updated and committed by\nanother transaction T2 while it is viewing table A repeatedly. Transaction\nT1 may experience R&#039; read (non-repeatable read) for the record that was\nupdated and committed by another transaction T2 while it is retrieving the\nrecord R repeatedly. READ COMMITTED CLASS with READ UNCOMMITTED INSTANCES\n(1) Transaction T1 may experience A&#039; read (non-repeatable read) for\nthe table that was updated and committed by another transaction T2 while it\nis repeatedly viewing table A. Transaction T1 may experience R&#039; read\n(dirty read) for the record that was updated but not committed by another\ntransaction T2.\n@param conn_identifier The CUBRID connection. If the connection identifier\nis not specified, the last link opened by cubrid_connect() is assumed.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_get_server_info cubrid_get_server_info(resource $conn_identifier)\n[string]\nReturn the CUBRID server version. This function returns a string that\nrepresents the CUBRID server version.\n@param conn_identifier The CUBRID connection.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_get cubrid_get(resource $conn_identifier, string $oid [, mixed $attr])\n[mixed]\nGet a column using OID. The cubrid_get() function is used to get the attribute\nof the instance of the given `oid`. You can get single attribute by using\nstring data type for the `attr` argument, or many attributes by using array\ndata type for the `attr` argument.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to read.\n@param attr Name of the attribute that you want to read.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_put() - Update a column using OID\n
cubrid_insert_id cubrid_insert_id(string $class_name [, resource\n$conn_identifier]) [array]\nReturn an array with the IDs generated for the AUTO_INCREMENT columns. This\nfunction returns an array with the IDs generated for the AUTO_INCREMENT\ncolumns that were updated by the previous INSERT query. It returns an array\nwith all the AUTO_INCREMENT columns and their values. It returns 0 if the\nprevious query does not generate new rows, or it returns FALSE on failure.\n@param class_name The name of the class (table) that was used in the last\nINSERT statement for which the auto increment values are retrieved.\n@param conn_identifier The connection identifier previously obtained by a\ncall to cubrid_connect().\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_is_instance cubrid_is_instance(resource $conn_identifier, string $oid)\n[int]\nCheck whether the instance pointed by OID exists. The cubrid_is_instance()\nfunction is used to check whether the instance pointed by the given `oid`\nexists or not.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to check the existence.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_drop() - Delete an instance using OID\n@see cubrid_get_class_name() - Get the class name using OID\n
cubrid_list_dbs cubrid_list_dbs(resource $conn_identifier) [array]\nReturn an array with the list of all existing CUBRID databases. This function\nreturns an array with the list of all existing Cubrid databases.\n@param conn_identifier The CUBRID connection.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_load_from_glo cubrid_load_from_glo(resource $conn_identifier, string\n$oid, string $file_name) [int]\nRead data from a GLO instance and save it in a file. The cubrid_load_from_glo()\nfunction is used to read a data from a glo instance, and saves it in a\ndesignated file.\n@param conn_identifier Connection identifier.\n@param oid Oid of the glo instance that you want to read the data from.\n@param file_name Name of the file where you want to save the data in.\n@return (PECL CUBRID >= 8.3.0)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: cubrid_load_from_glo()\n@note Note: This function is removed from CUBRID 3.1.\n@see cubrid_new_glo() - Create a glo instance\n@see cubrid_save_to_glo() - Save requested file in a GLO instance\n@see cubrid_send_glo() - Read data from glo and send it to std output\n
cubrid_lob_close cubrid_lob_close(array $lob_identifier_array) [bool]\nClose BLOB/CLOB data. cubrid_lob_close() is used to close all BLOB/CLOB\nreturned from cubrid_lob_get().\n@param lob_identifier_array LOB identifier array return from cubrid_lob_get.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_lob_get() - Get BLOB/CLOB data\n@see cubrid_lob_size() - Get BLOB/CLOB data size\n@see cubrid_lob_export() - Export BLOB/CLOB data to file\n@see cubrid_lob_send() - Read BLOB/CLOB data and send straight to browser\n
cubrid_lob_export cubrid_lob_export(resource $conn_identifier, resource\n$lob_identifier, string $path_name) [bool]\nExport BLOB/CLOB data to file. cubrid_lob_export() is used to get BLOB/CLOB\ndata from CUBRID database, and saves its contents to a file. To use this\nfunction, you must use cubrid_lob_get() first to get BLOB/CLOB info from\nCUBRID.\n@param conn_identifier Connection identifier.\n@param lob_identifier LOB identifier.\n@param path_name Path name of the file.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_lob_get() - Get BLOB/CLOB data\n@see cubrid_lob_close() - Close BLOB/CLOB data\n@see cubrid_lob_size() - Get BLOB/CLOB data size\n@see cubrid_lob_send() - Read BLOB/CLOB data and send straight to browser\n
cubrid_lob_get cubrid_lob_get(resource $conn_identifier, string $SQL) [array]\nGet BLOB/CLOB data. cubrid_lob_get() is used to get BLOB/CLOB meta info from\nCUBRID database, CUBRID gets BLOB/CLOB by executing the SQL statement, and\nreturns all LOBs as a resource array. Be sure that the SQL retrieves only one\ncolumn and its data type is BLOB or CLOB. Remember to use cubrid_lob_close()\nto release the LOBs if you don&#039;t need it any more.\n@param conn_identifier Connection identifier.\n@param SQL SQL to be executed.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_lob_close() - Close BLOB/CLOB data\n@see cubrid_lob_size() - Get BLOB/CLOB data size\n@see cubrid_lob_export() - Export BLOB/CLOB data to file\n@see cubrid_lob_send() - Read BLOB/CLOB data and send straight to browser\n
cubrid_lob_send cubrid_lob_send(resource $conn_identifier, resource\n$lob_identifier) [bool]\nRead BLOB/CLOB data and send straight to browser. cubrid_lob_send() reads\nBLOB/CLOB data and passes it straight through to the browser. To use this\nfunction, you must use cubrid_lob_get() first to get BLOB/CLOB info from\nCUBRID.\n@param conn_identifier Connection identifier.\n@param lob_identifier LOB identifier.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_lob_get() - Get BLOB/CLOB data\n@see cubrid_lob_close() - Close BLOB/CLOB data\n@see cubrid_lob_size() - Get BLOB/CLOB data size\n@see cubrid_lob_export() - Export BLOB/CLOB data to file\n
cubrid_lob_size cubrid_lob_size(resource $lob_identifier) [int]\nGet BLOB/CLOB data size. cubrid_lob_size() is used to get BLOB/CLOB data\nsize. Note: The maximum length of BLOB/CLOB data is the maximum file size\ncreatable in an external storage. But there is no integer type such as long\nlong in PHP. If you do need it, maybe you should use 64bit PHP.\n@param lob_identifier LOB identifier.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_lob_get() - Get BLOB/CLOB data\n@see cubrid_lob_close() - Close BLOB/CLOB data\n@see cubrid_lob_export() - Export BLOB/CLOB data to file\n@see cubrid_lob_send() - Read BLOB/CLOB data and send straight to browser\n
cubrid_lock_read cubrid_lock_read(resource $conn_identifier, string $oid)\n[bool]\nSet a read lock on the given OID. The cubrid_lock_read() function is used\nto put read lock on the instance pointed by given `oid`.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to put read lock on.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_lock_write() - Set a write lock on the given OID\n
cubrid_lock_write cubrid_lock_write(resource $conn_identifier, string $oid)\n[bool]\nSet a write lock on the given OID. The cubrid_lock_write() function is used\nto put write lock on the instance pointed by the given `oid`.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to put write lock on.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_lock_read() - Set a read lock on the given OID\n
cubrid_move_cursor cubrid_move_cursor(resource $req_identifier, int $offset\n[, int $origin=CUBRID_CURSOR_CURRENT]) [int]\nMove the cursor in the result. The cubrid_move_cursor() function is used to\nmove the current cursor location of `req_identifier` by the value set in the\n`offset` argument, to the direction set in the `origin` argument. To set the\n`origin` argument, you can use CUBRID_CURSOR_FIRST for the first part of\nthe result, CUBRID_CURSOR_CURRENT for the current location of the result,\nor CUBRID_CURSOR_LAST for the last part of the result. If `origin` argument\nis not explicitly designated, then the function uses CUBRID_CURSOR_CURRENT as\nits default value. If the value of cursor movement range goes over the valid\nlimit, then the cursor moves to the next location after the valid range for\nthe cursor. For example, if you move 20 units in the result with the size\nof 10, then the cursor will move to 11th place and return CUBRID_NO_MORE_DATA.\n@param req_identifier Request identifier.\n@param offset Number of units you want to move the cursor.\n@param origin Location where you want to move the cursor from\nCUBRID_CURSOR_FIRST, CUBRID_CURSOR_CURRENT, CUBRID_CURSOR_LAST.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_new_glo cubrid_new_glo(resource $conn_identifier, string $class_name,\nstring $file_name) [string]\nCreate a glo instance. The cubrid_new_glo() function is used to create a glo\ninstance in the requested class (glo class). The glo created is a LO type,\nand is stored in the `file_name` file.\n@param conn_identifier Connection identifier.\n@param class_name Name of the class that you want to create a glo in.\n@param file_name The file name that you want to save in the newly created glo.\n@return (PECL CUBRID >= 8.3.0)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: cubrid_new_glo()\n@note Note: This function is removed from CUBRID 3.1.\n@see cubrid_save_to_glo() - Save requested file in a GLO instance\n@see cubrid_load_from_glo() - Read data from a GLO instance and save it in\na file\n@see cubrid_send_glo() - Read data from glo and send it to std output\n
cubrid_num_cols cubrid_num_cols(resource $req_identifier) [int]\nReturn the number of columns in the result set. The cubrid_num_cols() function\nis used to get the number of columns from the query result. It can only be\nused when the query executed is a select sentence.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n@see cubrid_num_rows() - Get the number of rows in the result set\n
cubrid_num_fields cubrid_num_fields(resource $result) [int]\nReturn the number of columns in the result set. This function returns\nthe number of columns in the result set, on success, or it returns FALSE\non failure.\n@param result `result` comes from a call to cubrid_execute()\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_num_rows cubrid_num_rows(resource $req_identifier) [int]\nGet the number of rows in the result set. The cubrid_num_rows() function is\nused to get the number of rows from the query result. You can use it only when\nthe query executed is a select sentence. When you want to know such value for\nINSERT, UPDATE, or DELETE query, you have to use the cubrid_affected_rows()\nfunction. Note: The cubrid_num_rows() function can only be used for synchronous\nquery; it returns 0 when it is used for asynchronous query.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n@see cubrid_num_cols() - Return the number of columns in the result set\n@see cubrid_affected_rows() - Return the number of rows affected by the last\nSQL statement\n
cubrid_ping cubrid_ping([resource $conn_identifier]) [bool]\nPing a server connection or reconnect if there is no connection. Checks\nwhether or not the connection to the server is working.\n@param conn_identifier The CUBRID connection identifier. If the connection\nidentifier is not specified, the last connection opened by cubrid_connect()\nis assumed.\n@return (PECL CUBRID >= 8.3.1)\n
cubrid_prepare cubrid_prepare(resource $conn_identifier, string $prepare_stmt\n[, int $option=0]) [resource]\nPrepare an SQL statement for execution. The cubrid_prepare() function is a\nsort of API which represents SQL statements compiled previously to a given\nconnection handle. This pre-compiled SQL statement will be included in the\ncubrid_prepare(). Accordingly, you can use this statement effectively to\nexecute several times repeatedly or to process long data. Only a single\nstatement can be used and a parameter may put a question mark (?) to\nappropriate area in the SQL statement. Add a parameter when you bind a value\nin the VALUES clause of INSERT statement or in the WHERE clause. Note that\nit is allowed to bind a value to a MARK(?) by the cubrid_bind() only.\n@param conn_identifier Connection identifier.\n@param prepare_stmt Prepare query.\n@param option OID return option CUBRID_INCLUDE_OID.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n@see cubrid_bind() - Bind variables to a prepared statement as parameters\n
cubrid_put cubrid_put(resource $conn_identifier, string $oid [, string $attr],\nmixed $value) [int]\nUpdate a column using OID. The cubrid_put() function is used to update an\nattribute of the instance of the given `oid`. You can update single attribute\nby using string data type to set `attr`. In such case, you can use integer,\nfloat-point, or string type data for the `value` argument. To update multiple\nnumber of attributes, you can disregard the `attr` argument, and set `value`\nargument with associative array data type.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to update.\n@param attr Name of the attribute that you want to update.\n@param value New value that you want to assign to the attribute.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_get() - Get a column using OID\n@see cubrid_set_add() - Insert a single element to set type column using OID\n@see cubrid_set_drop() - Delete an element from set type column using OID\n@see cubrid_seq_insert() - Insert an element to a sequence type column\nusing OID\n@see cubrid_seq_drop() - Delete an element from sequence type column using OID\n@see cubrid_seq_put() - Update the element value of sequence type column\nusing OID\n
cubrid_query cubrid_query(string $query [, resource $conn_identifier])\n[resource]\nSend a CUBRID query. cubrid_query() sends a unique query (multiple queries\nare not supported) to the currently active database on the server that&#039;s\nassociated with the specified `conn_identifier`.\n@param query An SQL query Data inside the query should be properly escaped.\n@param conn_identifier The CUBRID connection. If the connection identifier\nis not specified, the last connection opened by cubrid_connect() is assumed.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_connect() - Open a connection to a CUBRID Server\n@see cubrid_error() - Get the error message\n@see cubrid_real_escape_string() - Escape special characters in a string\nfor use in an SQL statement\n@see cubrid_result() - Return the value of a specific field in a specific row\n@see cubrid_fetch_assoc() - Return the associative array that corresponds\nto the fetched row\n@see cubrid_unbuffered_query() - Perform a query without fetching the results\ninto memory\n
cubrid_real_escape_string cubrid_real_escape_string(string $unescaped_string\n[, resource $conn_identifier]) [string]\nEscape special characters in a string for use in an SQL statement. This\nfunction returns the escaped string version of the given string. It will\nescape the following characters: &#039;. In general, single quotations are\nused to enclose character string. Double quotations may be used as well\ndepending on the value of ansi_quotes, which is a parameter related to SQL\nstatement. If the ansi_quotes value is set to no, character string enclosed by\ndouble quotations is handled as character string, not as an identifier. The\ndefault value is yes. If you want to include a single quote as part of a\ncharacter string, enter two single quotes in a row.\n@param unescaped_string The string that is to be escaped.\n@param conn_identifier The CUBRID connection. If the connection identifier\nis not specified, the last connection opened by cubrid_connect() is assumed.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_result cubrid_result(resource $result, int $row [, mixed $field=0])\n[string]\nReturn the value of a specific field in a specific row. This function returns\nthe value of a specific field in a specific row from a result set.\n@param result `result` comes from a call to cubrid_execute()\n@param row The row number from the result that is being retrieved. Row\nnumbers start at 0.\n@param field The name or offset of the `field` being retrieved. It can be\nthe field&#039;s offset, the field&#039;s name, or the field&#039;s table\ndot field name (tablename.fieldname). If the column name has been aliased\n(&#039;select foo as bar from...&#039;), use the alias instead of the column\nname. If undefined, the first field is retrieved.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_rollback cubrid_rollback(resource $conn_identifier) [bool]\nRoll back a transaction. The cubrid_rollback() function executes rollback on\nthe transaction pointed by `conn_identifier`, currently in progress. Connection\nto server is closed after calling cubrid_rollback(). Connection handle,\nhowever, is still valid.\n@param conn_identifier Connection identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_commit() - Commit a transaction\n@see cubrid_disconnect() - Close a database connection\n
cubrid_save_to_glo cubrid_save_to_glo(resource $conn_identifier, string $oid,\nstring $file_name) [int]\nSave requested file in a GLO instance. The cubrid_save_to_glo() function is\nused to save requested file in a glo instance.\n@param conn_identifier Connection identifier.\n@param oid Oid of the glo instance that you want to save a file in.\n@param file_name The name of the file that you want to save.\n@return (PECL CUBRID >= 8.3.0)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: cubrid_save_to_glo()\n@note Note: This function is removed from CUBRID 3.1.\n@see cubrid_new_glo() - Create a glo instance\n@see cubrid_load_from_glo() - Read data from a GLO instance and save it in\na file\n@see cubrid_send_glo() - Read data from glo and send it to std output\n
cubrid_schema cubrid_schema(resource $conn_identifier, int $schema_type [,\nstring $class_name [, string $attr_name]]) [array]\nGet the requested schema information. The cubrid_schema() function is used\nto get the requested schema information from database. You have to designate\n`class_name`, if you want to get information on certain class, `attr_name`,\nif you want to get information on certain attribute (can be used only with\nCUBRID_ SCH_ATTR_PRIVILEGE). The result of the cubrid_schema function is\nreturned as a two-dimensional array (column (associative array) * row (numeric\narray)). The following tables shows types of schema and the column structure of\nthe result array to be returned based on the schema type.  Result Composition\nof Each Type Schema Column Number Column Name Value CUBRID_SCH_CLASS 1 NAME\n&nbsp; &nbsp; 2 TYPE 0:system class 1:vclass 2:class CUBRID_SCH_VCLASS 1\nNAME &nbsp; &nbsp; 2 TYPE 1:vclass CUBRID_SCH_QUERY_SPEC 1 QUERY_SPEC &nbsp;\nCUBRID_SCH_ATTRIBUTE / CUBRID_SCH_CLASS_ATTRIBUTE 1 ATTR_NAME &nbsp; &nbsp;\n2 DOMAIN &nbsp; &nbsp; 3 SCALE &nbsp; &nbsp; 4 PRECISION &nbsp; &nbsp;\n5 INDEXED 1:indexed &nbsp; 6 NOT NULL 1:not null &nbsp; 7 SHARED 1:shared\n&nbsp; 8 UNIQUE 1:unique &nbsp; 9 DEFAULT &nbsp; &nbsp; 10 ATTR_ORDER\nbase:1 &nbsp; 11 CLASS_NAME &nbsp; &nbsp; 12 SOURCE_CLASS &nbsp; &nbsp;\n13 IS_KEY 1:key CUBRID_SCH_METHOD / CUBRID_SCH_CLASS_METHOD 1 NAME &nbsp;\n&nbsp; 2 RET_DOMAIN &nbsp; &nbsp; 3 ARG_DOMAIN &nbsp; CUBRID_SCH_METHOD_FILE\n1 METHOD_FILE &nbsp; CUBRID_SCH_SUPERCLASS / CUBRID_SCH_DIRECT_SUPER_CLASS\n/ CUBRID_SCH_SUBCLASS 1 CLASS_NAME &nbsp; &nbsp; 2 TYPE 0:system class\n1:vclass 2:class CUBRID_SCH_CONSTRAINT 1 TYPE 0:unique 1:index 2:reverse\nunique 3:reverse index &nbsp; 2 NAME &nbsp; &nbsp; 3 ATTR_NAME &nbsp;\n&nbsp; 4 NUM_PAGES &nbsp; &nbsp; 5 NUM_KEYS &nbsp; &nbsp; 6 PRIMARY_KEY\n1:primary key &nbsp; 7 KEY_ORDER base:1 CUBRID_SCH_TRIGGER 1 NAME &nbsp;\n&nbsp; 2 STATUS &nbsp; &nbsp; 3 EVENT &nbsp; &nbsp; 4 TARGET_CLASS &nbsp;\n&nbsp; 5 TARGET_ATTR &nbsp; &nbsp; 6 ACTION_TIME &nbsp; &nbsp; 7 ACTION\n&nbsp; &nbsp; 8 PRIORITY &nbsp; &nbsp; 9 CONDITION_TIME &nbsp; &nbsp; 10\nCONDITION &nbsp; CUBRID_SCH_CLASS_PRIVILEGE / CUBRID_SCH_ATTR_PRIVILEGE 1\nCLASS_NAME / ATTR_NAME &nbsp; &nbsp; 2 PRIVILEGE &nbsp; &nbsp; 3 GRANTABLE\n&nbsp; CUBRID_SCH_PRIMARY_KEY 1 CLASS_NAME &nbsp; &nbsp; 2 ATTR_NAME &nbsp;\n&nbsp; 3 KEY_SEQ base:1 &nbsp; 4 KEY_NAME &nbsp; CUBRID_SCH_IMPORTED_KEYS\n/ CUBRID_SCH_EXPORTED_KEYS / CUBRID_SCH_CROSS_REFERENCE 1 PKTABLE_NAME\n&nbsp; &nbsp; 2 PKCOLUMN_NAME &nbsp; &nbsp; 3 FKTABLE_NAME base:1 &nbsp; 4\nFKCOLUMN_NAME &nbsp; &nbsp; 5 KEY_SEQ base:1 &nbsp; 6 UPDATE_ACTION 0:cascade\n1:restrict 2:no action 3:set null &nbsp; 7 DELETE_ACTION 0:cascade 1:restrict\n2:no action 3:set null &nbsp; 8 FK_NAME &nbsp; &nbsp; 9 PK_NAME &nbsp;\n@param conn_identifier Connection identifier.\n@param schema_type Schema data that you want to know.\n@param class_name Class you want to know the schema of.\n@param attr_name Attribute you want to know the schema of.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_send_glo cubrid_send_glo(resource $conn_identifier, string $oid) [int]\nRead data from glo and send it to std output. The cubrid_send_glo() function\nis used to read data from glo instance and sends it to the PHP standard output.\n@param conn_identifier Connection identifier.\n@param oid Oid of the glo instance that you want to read data from.\n@return (PECL CUBRID >= 8.3.0)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: cubrid_send_glo()\n@note Note: This function is removed from CUBRID 3.1.\n@see cubrid_new_glo() - Create a glo instance\n@see cubrid_save_to_glo() - Save requested file in a GLO instance\n@see cubrid_load_from_glo() - Read data from a GLO instance and save it in\na file\n
cubrid_seq_drop cubrid_seq_drop(resource $conn_identifier, string $oid,\nstring $attr_name, int $index) [bool]\nDelete an element from sequence type column using OID. The cubrid_seq_drop()\nfunction is used to delete an element you request from the given sequence\ntype attribute in the database.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance you want to work with.\n@param attr_name Name of the attribute that you want to delete an element from.\n@param index Index of the element that you want to delete (1-based).\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_seq_insert() - Insert an element to a sequence type column\nusing OID\n@see cubrid_seq_put() - Update the element value of sequence type column\nusing OID\n
cubrid_seq_insert cubrid_seq_insert(resource $conn_identifier, string $oid,\nstring $attr_name, int $index, string $seq_element) [bool]\nInsert an element to a sequence type column using OID. The cubrid_col_insert()\nfunction is used to insert an element to a sequence type attribute in a\nrequested location.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance you want to work with.\n@param attr_name Name of the attribute you want to insert an instance to.\n@param index Location of the element, you want to insert the element to\n(1-based).\n@param seq_element Content of the element that you want to insert.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_seq_drop() - Delete an element from sequence type column using OID\n@see cubrid_seq_put() - Update the element value of sequence type column\nusing OID\n
cubrid_seq_put cubrid_seq_put(resource $conn_identifier, string $oid, string\n$attr_name, int $index, string $seq_element) [bool]\nUpdate the element value of sequence type column using OID. The\ncubrid_seq_put() function is used to update the content of the requested\nelement in a sequent type attribute using OID.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance you want to work with.\n@param attr_name Name of the attribute that you want to update an element.\n@param index Index (1-based) of the element that you want to update.\n@param seq_element New content that you want to use for the update.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_seq_drop() - Delete an element from sequence type column using OID\n@see cubrid_seq_insert() - Insert an element to a sequence type column\nusing OID\n
cubrid_set_add cubrid_set_add(resource $conn_identifier, string $oid, string\n$attr_name, string $set_element) [bool]\nInsert a single element to set type column using OID. The cubrid_set_add()\nfunction is used to insert a single element to a set type attribute (set,\nmultiset, sequence) you requested.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance you want to work with.\n@param attr_name Name of the attribute you want to insert an element.\n@param set_element Content of the element you want to insert.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_seq_drop() - Delete an element from sequence type column using OID\n
cubrid_set_drop cubrid_set_drop(resource $conn_identifier, string $oid,\nstring $attr_name, string $set_element) [bool]\nDelete an element from set type column using OID. The cubrid_set_drop()\nfunction is used to delete an element that you request from the given set type\n(set, multiset) attribute of the database.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance you want to work with.\n@param attr_name Name of the attribute you want to delete an element from.\n@param set_element Content of the element you want to delete.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_set_add() - Insert a single element to set type column using OID\n
cubrid_unbuffered_query cubrid_unbuffered_query(string $query [, resource\n$conn_identifier]) [resource]\nPerform a query without fetching the results into memory. This function\nperforms a query without waiting for that all query results have been\ncomplete. It will return when the results are being generated.\n@param query A SQL query.\n@param conn_identifier The CUBRID connection. If the connection identifier\nis not specified, the last connection opened by cubrid_connect() is assumed.\n@return (PECL CUBRID >= 8.3.0)\n@note Note: The benefits of cubrid_unbuffered_query() come at a cost: you\ncannot use cubrid_num_rows() and cubrid_data_seek() on a result set returned\nfrom cubrid_unbuffered_query().\n
cubrid_version cubrid_version(void) [string]\nGet the CUBRID PHP module's version. The cubrid_version() function is used\nto get the CUBRID PHP module&#039;s version.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_error_code() - Get error code for the most recent function call\n@see cubrid_error_code_facility() - Get the facility code of error\n
curl_close curl_close(resource $ch) [void]\nClose a cURL session. Closes a cURL session and frees all resources. The\ncURL handle, `ch`, is also deleted.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see curl_init() - Initialize a cURL session\n@see curl_multi_close() - Close a set of cURL handles\n
curl_copy_handle curl_copy_handle(resource $ch) [resource]\nCopy a cURL handle along with all of its preferences. Copies a cURL handle\nkeeping the same preferences.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 5)\n
curl_errno curl_errno(resource $ch) [int]\nReturn the last error number. Returns the error number for the last cURL\noperation.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see curl_error() - Return a string containing the last error for the\ncurrent session\n@see &raquo; Curl error codes\n
curl_error curl_error(resource $ch) [string]\nReturn a string containing the last error for the current session. Returns\na clear text error message for the last cURL operation.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 4 >= 4.0.3, PHP 5)\n@see curl_errno() - Return the last error number\n@see &raquo; Curl error codes\n
curl_exec curl_exec(resource $ch) [mixed]\nPerform a cURL session. Execute the given cURL session. This function should\nbe called after initializing a cURL session and all the options for the\nsession are set.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see curl_multi_exec() - Run the sub-connections of the current cURL handle\n
curl_getinfo curl_getinfo(resource $ch [, int $opt=0]) [mixed]\nGet information regarding a specific transfer. Gets information about the\nlast transfer.\n@param ch A cURL handle returned by curl_init().\n@param opt This may be one of the following constants: CURLINFO_EFFECTIVE_URL\n- Last effective URL CURLINFO_HTTP_CODE - Last received HTTP code\nCURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned\nthe time of the document is unknown CURLINFO_TOTAL_TIME - Total transaction\ntime in seconds for last transfer CURLINFO_NAMELOOKUP_TIME - Time in\nseconds until name resolving was complete CURLINFO_CONNECT_TIME - Time\nin seconds it took to establish the connection CURLINFO_PRETRANSFER_TIME\n- Time in seconds from start until just before file transfer begins\nCURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is\nabout to be transferred CURLINFO_REDIRECT_TIME - Time in seconds of all\nredirection steps before final transaction was started CURLINFO_SIZE_UPLOAD\n- Total number of bytes uploaded CURLINFO_SIZE_DOWNLOAD - Total number\nof bytes downloaded CURLINFO_SPEED_DOWNLOAD - Average download speed\nCURLINFO_SPEED_UPLOAD - Average upload speed CURLINFO_HEADER_SIZE - Total\nsize of all headers received CURLINFO_HEADER_OUT - The request string\nsent. For this to work, add the CURLINFO_HEADER_OUT option to the handle by\ncalling curl_setopt() CURLINFO_REQUEST_SIZE - Total size of issued requests,\ncurrently only for HTTP requests CURLINFO_SSL_VERIFYRESULT - Result of\nSSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER\nCURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from\n`Content-Length:` field CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of\nupload CURLINFO_CONTENT_TYPE - `Content-Type:` of the requested document,\nNULL indicates server did not send valid `Content-Type:` header\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: Information gathered by this function is kept if the handle is\nre-used. This means that unless a statistic is overridden internally by this\nfunction, the previous info is returned.\n
curl_init curl_init([string $url=NULL]) [resource]\nInitialize a cURL session. Initializes a new session and return a cURL handle\nfor use with the curl_setopt(), curl_exec(), and curl_close() functions.\n@param url If provided, the CURLOPT_URL option will be set to its value. You\ncan manually set this using the curl_setopt() function.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@see curl_close() - Close a cURL session\n@see curl_multi_init() - Returns a new cURL multi handle\n
curl_multi_add_handle curl_multi_add_handle(resource $mh, resource $ch) [int]\nAdd a normal cURL handle to a cURL multi handle. Adds the `ch` handle to\nthe multi handle `mh`\n@param mh A cURL multi handle returned by curl_multi_init().\n@param ch A cURL handle returned by curl_init().\n@return (PHP 5)\n@see curl_multi_remove_handle() - Remove a multi handle from a set of\ncURL handles\n@see curl_multi_init() - Returns a new cURL multi handle\n@see curl_init() - Initialize a cURL session\n
curl_multi_close curl_multi_close(resource $mh) [void]\nClose a set of cURL handles. Closes a set of cURL handles.\n@param mh A cURL multi handle returned by curl_multi_init().\n@return (PHP 5)\n@see curl_multi_init() - Returns a new cURL multi handle\n@see curl_close() - Close a cURL session\n
curl_multi_exec curl_multi_exec(resource $mh, int &$still_running) [int]\nRun the sub-connections of the current cURL handle. Processes each of the\nhandles in the stack. This method can be called whether or not a handle\nneeds to read or write data.\n@param mh A cURL multi handle returned by curl_multi_init().\n@param still_running A reference to a flag to tell whether the operations\nare still running.\n@return (PHP 5)\n@see curl_multi_init() - Returns a new cURL multi handle\n@see curl_multi_select() - Wait for activity on any curl_multi connection\n@see curl_exec() - Perform a cURL session\n
curl_multi_getcontent curl_multi_getcontent(resource $ch) [string]\nReturn the content of a cURL handle if CURLOPT_RETURNTRANSFER is set. If\nCURLOPT_RETURNTRANSFER is an option that is set for a specific handle,\nthen this function will return the content of that cURL handle in the form\nof a string.\n@param ch A cURL handle returned by curl_init().\n@return (PHP 5)\n@see curl_multi_init() - Returns a new cURL multi handle\n
curl_multi_info_read curl_multi_info_read(resource $mh [, int\n&$msgs_in_queue=NULL]) [array]\nGet information about the current transfers. Ask the multi handle if there\nare any messages or information from the individual transfers. Messages may\ninclude information such as an error code from the transfer or just the fact\nthat a transfer is completed. Repeated calls to this function will return a\nnew result each time, until a FALSE is returned as a signal that there is\nno more to get at this point. The integer pointed to with `msgs_in_queue`\nwill contain the number of remaining messages after this function was\ncalled. The data the returned resource points to will not survive calling\ncurl_multi_remove_handle().\n@param mh A cURL multi handle returned by curl_multi_init().\n@param msgs_in_queue Number of messages that are still in the queue\n@return (PHP 5)\n@see curl_multi_init() - Returns a new cURL multi handle\n
curl_multi_init curl_multi_init(void) [resource]\nReturns a new cURL multi handle. Allows the processing of multiple cURL\nhandles in parallel.\n@return (PHP 5)\n@see curl_init() - Initialize a cURL session\n@see curl_multi_close() - Close a set of cURL handles\n
curl_multi_remove_handle curl_multi_remove_handle(resource $mh, resource $ch)\n[int]\nRemove a multi handle from a set of cURL handles. Removes a given `ch`\nhandle from the given `mh` handle. When the `ch` handle has been removed,\nit is again perfectly legal to run curl_exec() on this handle. Removing the\n`ch` handle while being used, will effectively halt the transfer in progress\ninvolving that handle.\n@param mh A cURL multi handle returned by curl_multi_init().\n@param ch A cURL handle returned by curl_init().\n@return (PHP 5)\n@see curl_init() - Initialize a cURL session\n@see curl_multi_init() - Returns a new cURL multi handle\n@see curl_multi_add_handle() - Add a normal cURL handle to a cURL multi handle\n
curl_multi_select curl_multi_select(resource $mh [, float $timeout=1.0]) [int]\nWait for activity on any curl_multi connection. Blocks until there is activity\non any of the curl_multi connections.\n@param mh A cURL multi handle returned by curl_multi_init().\n@param timeout Time, in seconds, to wait for a response.\n@return (PHP 5)\n@see curl_multi_init() - Returns a new cURL multi handle\n
curl_setopt_array curl_setopt_array(resource $ch, array $options) [bool]\nSet multiple options for a cURL transfer. Sets multiple options for a cURL\nsession. This function is useful for setting a large amount of cURL options\nwithout repetitively calling curl_setopt().\n@param ch A cURL handle returned by curl_init().\n@param options An array specifying which options to set and their values. The\nkeys should be valid curl_setopt() constants or their integer equivalents.\n@return (PHP 5 >= 5.1.3)\n@note Note: As with curl_setopt(), passing an array to CURLOPT_POST will\nencode the data as multipart/form-data, while passing a URL-encoded string\nwill encode the data as application/x-www-form-urlencoded.\n@see curl_setopt() - Set an option for a cURL transfer\n
curl_setopt curl_setopt(resource $ch, int $option, mixed $value) [bool]\nSet an option for a cURL transfer. Sets an option on the given cURL session\nhandle.\n@param ch A cURL handle returned by curl_init().\n@param option The `CURLOPT_XXX` option to set.\n@param value The value to be set on `option`. `value` should be a bool for\nthe following values of the `option` parameter: Option Set `value` to Notes\nCURLOPT_AUTOREFERER TRUE to automatically set the `Referer:` field in requests\nwhere it follows a `Location:` redirect. CURLOPT_BINARYTRANSFER TRUE to return\nthe raw output when CURLOPT_RETURNTRANSFER is used. CURLOPT_COOKIESESSION\nTRUE to mark this as a new cookie &quot;session&quot;. It will force\nlibcurl to ignore all cookies it is about to load that are &quot;session\ncookies&quot; from the previous session. By default, libcurl always\nstores and loads all cookies, independent if they are session cookies or\nnot. Session cookies are cookies without expiry date and they are meant to\nbe alive and existing for this &quot;session&quot; only. CURLOPT_CERTINFO\nTRUE to output SSL certification information to `STDERR` on secure\ntransfers. Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be on to\nhave an effect. CURLOPT_CRLF TRUE to convert Unix newlines to CRLF newlines on\ntransfers. CURLOPT_DNS_USE_GLOBAL_CACHE TRUE to use a global DNS cache. This\noption is not thread-safe and is enabled by default. CURLOPT_FAILONERROR\nTRUE to fail silently if the HTTP code returned is greater than or equal\nto 400. The default behavior is to return the page normally, ignoring\nthe code. CURLOPT_FILETIME TRUE to attempt to retrieve the modification\ndate of the remote document. This value can be retrieved using the\n`CURLINFO_FILETIME` option with curl_getinfo(). CURLOPT_FOLLOWLOCATION\nTRUE to follow any `&quot;Location: &quot;` header that the server\nsends as part of the HTTP header (note this is recursive, PHP will\nfollow as many `&quot;Location: &quot;` headers that it is sent, unless\nCURLOPT_MAXREDIRS is set). CURLOPT_FORBID_REUSE TRUE to force the connection\nto explicitly close when it has finished processing, and not be pooled\nfor reuse. CURLOPT_FRESH_CONNECT TRUE to force the use of a new connection\ninstead of a cached one. CURLOPT_FTP_USE_EPRT TRUE to use EPRT (and LPRT) when\ndoing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT\nonly. CURLOPT_FTP_USE_EPSV TRUE to first try an EPSV command for FTP transfers\nbefore reverting back to PASV. Set to FALSE to disable EPSV. CURLOPT_FTPAPPEND\nTRUE to append to the remote file instead of overwriting it. CURLOPT_FTPASCII\nAn alias of CURLOPT_TRANSFERTEXT. Use that instead. CURLOPT_FTPLISTONLY\nTRUE to only list the names of an FTP directory. CURLOPT_HEADER TRUE to\ninclude the header in the output. CURLINFO_HEADER_OUT TRUE to track the\nhandle&#039;s request string. Available since PHP 5.1.3. The CURLINFO_\nprefix is intentional. CURLOPT_HTTPGET TRUE to reset the HTTP request\nmethod to GET. Since GET is the default, this is only necessary if the\nrequest method has been changed. CURLOPT_HTTPPROXYTUNNEL TRUE to tunnel\nthrough a given HTTP proxy. CURLOPT_MUTE TRUE to be completely silent with\nregards to the cURL functions. CURLOPT_NETRC TRUE to scan the ~/.netrc file\nto find a username and password for the remote site that a connection is\nbeing established with. CURLOPT_NOBODY TRUE to exclude the body from the\noutput. Request method is then set to HEAD. Changing this to FALSE does not\nchange it to GET. CURLOPT_NOPROGRESS TRUE to disable the progress meter for\ncURL transfers. Note: PHP automatically sets this option to TRUE, this should\nonly be changed for debugging purposes. CURLOPT_NOSIGNAL TRUE to ignore any\ncURL function that causes a signal to be sent to the PHP process. This is\nturned on by default in multi-threaded SAPIs so timeout options can still be\nused. Added in cURL 7.10. CURLOPT_POST TRUE to do a regular HTTP POST. This\nPOST is the normal `application/x-www-form-urlencoded` kind, most commonly\nused by HTML forms. CURLOPT_PUT TRUE to HTTP PUT a file. The file to PUT must\nbe set with CURLOPT_INFILE and CURLOPT_INFILESIZE. CURLOPT_RETURNTRANSFER TRUE\nto return the transfer as a string of the return value of curl_exec() instead\nof outputting it out directly. CURLOPT_SSL_VERIFYPEER FALSE to stop cURL from\nverifying the peer&#039;s certificate. Alternate certificates to verify against\ncan be specified with the CURLOPT_CAINFO option or a certificate directory can\nbe specified with the CURLOPT_CAPATH option. CURLOPT_SSL_VERIFYHOST may also\nneed to be TRUE or FALSE if CURLOPT_SSL_VERIFYPEER is disabled (it defaults\nto 2). TRUE by default as of cURL 7.10. Default bundle installed as of cURL\n7.10. CURLOPT_TRANSFERTEXT TRUE to use ASCII mode for FTP transfers. For\nLDAP, it retrieves data in plain text instead of HTML. On Windows systems,\nit will not set `STDOUT` to binary mode. CURLOPT_UNRESTRICTED_AUTH TRUE\nto keep sending the username and password when following locations (using\nCURLOPT_FOLLOWLOCATION), even when the hostname has changed. CURLOPT_UPLOAD\nTRUE to prepare for an upload. CURLOPT_VERBOSE TRUE to output verbose\ninformation. Writes output to `STDERR`, or the file specified using\nCURLOPT_STDERR. `value` should be an integer for the following values of\nthe `option` parameter: Option Set `value` to Notes CURLOPT_BUFFERSIZE The\nsize of the buffer to use for each read. There is no guarantee this request\nwill be fulfilled, however. Added in cURL 7.10. CURLOPT_CLOSEPOLICY Either\n`CURLCLOSEPOLICY_LEAST_RECENTLY_USED` or `CURLCLOSEPOLICY_OLDEST`. There are\nthree other `CURLCLOSEPOLICY_` constants, but cURL does not support them\nyet. CURLOPT_CONNECTTIMEOUT The number of seconds to wait while trying to\nconnect. Use 0 to wait indefinitely. CURLOPT_CONNECTTIMEOUT_MS The number of\nmilliseconds to wait while trying to connect. Use 0 to wait indefinitely. If\nlibcurl is built to use the standard system name resolver, that portion of\nthe connect will still use full-second resolution for timeouts with a minimum\ntimeout allowed of one second. Added in cURL 7.16.2. Available since PHP\n5.2.3. CURLOPT_DNS_CACHE_TIMEOUT The number of seconds to keep DNS entries in\nmemory. This option is set to 120 (2 minutes) by default. CURLOPT_FTPSSLAUTH\nThe FTP authentication method (when is activated): `CURLFTPAUTH_SSL` (try\nSSL first), `CURLFTPAUTH_TLS` (try TLS first), or `CURLFTPAUTH_DEFAULT`\n(let cURL decide). Added in cURL 7.12.2. CURLOPT_HTTP_VERSION\n`CURL_HTTP_VERSION_NONE` (default, lets CURL decide which version to use),\n`CURL_HTTP_VERSION_1_0` (forces HTTP/1.0), or `CURL_HTTP_VERSION_1_1` (forces\nHTTP/1.1). CURLOPT_HTTPAUTH The HTTP authentication method(s) to use. The\noptions are: `CURLAUTH_BASIC`, `CURLAUTH_DIGEST`, `CURLAUTH_GSSNEGOTIATE`,\n`CURLAUTH_NTLM`, `CURLAUTH_ANY`, and `CURLAUTH_ANYSAFE`. The bitwise `|`\n(or) operator can be used to combine more than one method. If this is done,\ncURL will poll the server to see what methods it supports and pick the best\none. `CURLAUTH_ANY` is an alias for `CURLAUTH_BASIC | CURLAUTH_DIGEST |\nCURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM`. `CURLAUTH_ANYSAFE` is an alias for\n`CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM`. CURLOPT_INFILESIZE\nThe expected size, in bytes, of the file when uploading a file to a\nremote site. CURLOPT_LOW_SPEED_LIMIT The transfer speed, in bytes\nper second, that the transfer should be below during the count of\nCURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow\nand aborts. CURLOPT_LOW_SPEED_TIME The number of seconds the transfer speed\nshould be below CURLOPT_LOW_SPEED_LIMIT before PHP considers the transfer\ntoo slow and aborts. CURLOPT_MAXCONNECTS The maximum amount of persistent\nconnections that are allowed. When the limit is reached, CURLOPT_CLOSEPOLICY\nis used to determine which connection to close. CURLOPT_MAXREDIRS The\nmaximum amount of HTTP redirections to follow. Use this option alongside\nCURLOPT_FOLLOWLOCATION. CURLOPT_PORT An alternative port number to connect\nto. CURLOPT_PROTOCOLS Bitmask of CURLPROTO_* values. If used, this bitmask\nlimits what protocols libcurl may use in the transfer. This allows you to have\na libcurl built to support a wide range of protocols but still limit specific\ntransfers to only be allowed to use a subset of them. By default libcurl will\naccept all protocols it supports. See also CURLOPT_REDIR_PROTOCOLS. Valid\nprotocol options are: `CURLPROTO_HTTP`, `CURLPROTO_HTTPS`, `CURLPROTO_FTP`,\n`CURLPROTO_FTPS`, `CURLPROTO_SCP`, `CURLPROTO_SFTP`, `CURLPROTO_TELNET`,\n`CURLPROTO_LDAP`, `CURLPROTO_LDAPS`, `CURLPROTO_DICT`, `CURLPROTO_FILE`,\n`CURLPROTO_TFTP`, `CURLPROTO_ALL` Added in cURL 7.19.4. CURLOPT_PROXYAUTH\nThe HTTP authentication method(s) to use for the proxy connection. Use the\nsame bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication,\nonly `CURLAUTH_BASIC` and `CURLAUTH_NTLM` are currently supported. Added\nin cURL 7.10.7. CURLOPT_PROXYPORT The port number of the proxy to connect\nto. This port number can also be set in CURLOPT_PROXY. CURLOPT_PROXYTYPE\nEither `CURLPROXY_HTTP` (default) or `CURLPROXY_SOCKS5`. Added in cURL\n7.10. CURLOPT_REDIR_PROTOCOLS Bitmask of CURLPROTO_* values. If used, this\nbitmask limits what protocols libcurl may use in a transfer that it follows\nto in a redirect when CURLOPT_FOLLOWLOCATION is enabled. This allows you to\nlimit specific transfers to only be allowed to use a subset of protocols in\nredirections. By default libcurl will allow all protocols except for FILE and\nSCP. This is a difference compared to pre-7.19.4 versions which unconditionally\nwould follow to all protocols supported. See also CURLOPT_PROTOCOLS for\nprotocol constant values. Added in cURL 7.19.4. CURLOPT_RESUME_FROM The\noffset, in bytes, to resume a transfer from. CURLOPT_SSL_VERIFYHOST 1 to\ncheck the existence of a common name in the SSL peer certificate. 2 to check\nthe existence of a common name and also verify that it matches the hostname\nprovided. CURLOPT_SSLVERSION The SSL version (2 or 3) to use. By default\nPHP will try to determine this itself, although in some cases this must be\nset manually. CURLOPT_TIMECONDITION How CURLOPT_TIMEVALUE is treated. Use\n`CURL_TIMECOND_IFMODSINCE` to return the page only if it has been modified\nsince the time specified in CURLOPT_TIMEVALUE. If it hasn&#039;t been\nmodified, a `&quot;304 Not Modified&quot;` header will be returned assuming\nCURLOPT_HEADER is TRUE. Use `CURL_TIMECOND_IFUNMODSINCE` for the reverse\neffect. `CURL_TIMECOND_IFMODSINCE` is the default. CURLOPT_TIMEOUT The maximum\nnumber of seconds to allow cURL functions to execute. CURLOPT_TIMEOUT_MS\nThe maximum number of milliseconds to allow cURL functions to execute. If\nlibcurl is built to use the standard system name resolver, that portion of\nthe connect will still use full-second resolution for timeouts with a minimum\ntimeout allowed of one second. Added in cURL 7.16.2. Available since PHP\n5.2.3. CURLOPT_TIMEVALUE The time in seconds since January 1st, 1970. The time\nwill be used by CURLOPT_TIMECONDITION. By default, `CURL_TIMECOND_IFMODSINCE`\nis used. `value` should be a string for the following values of the `option`\nparameter: Option Set `value` to Notes CURLOPT_CAINFO The name of a file\nholding one or more certificates to verify the peer with. This only makes\nsense when used in combination with CURLOPT_SSL_VERIFYPEER. Requires absolute\npath. CURLOPT_CAPATH A directory that holds multiple CA certificates. Use\nthis option alongside CURLOPT_SSL_VERIFYPEER. CURLOPT_COOKIE The contents of\nthe `&quot;Cookie: &quot;` header to be used in the HTTP request. Note that\nmultiple cookies are separated with a semicolon followed by a space (e.g.,\n&quot;`fruit=apple; colour=red`&quot;) CURLOPT_COOKIEFILE The name of the\nfile containing the cookie data. The cookie file can be in Netscape format,\nor just plain HTTP-style headers dumped into a file. CURLOPT_COOKIEJAR\nThe name of a file to save all internal cookies to when the handle is\nclosed, e.g. after a call to curl_close. CURLOPT_CUSTOMREQUEST A custom\nrequest method to use instead of `&quot;GET&quot;` or `&quot;HEAD&quot;`\nwhen doing a HTTP request. This is useful for doing `&quot;DELETE&quot;`\nor other, more obscure HTTP requests. Valid values are things like\n`&quot;GET&quot;`, `&quot;POST&quot;`, `&quot;CONNECT&quot;` and so on;\ni.e. Do not enter a whole HTTP request line here. For instance, entering\n`&quot;GET /index.html HTTP/1.0\r\n\r\n&quot;` would be incorrect. Note:\nDon&#039;t do this without making sure the server supports the custom\nrequest method first. CURLOPT_EGDSOCKET Like CURLOPT_RANDOM_FILE, except\na filename to an Entropy Gathering Daemon socket. CURLOPT_ENCODING The\ncontents of the `&quot;Accept-Encoding: &quot;` header. This enables\ndecoding of the response. Supported encodings are `&quot;identity&quot;`,\n`&quot;deflate&quot;`, and `&quot;gzip&quot;`. If an empty string,\n`&quot;&quot;`, is set, a header containing all supported encoding types\nis sent. Added in cURL 7.10. CURLOPT_FTPPORT The value which will be used\nto get the IP address to use for the FTP &quot;POST&quot; instruction. The\n&quot;POST&quot; instruction tells the remote server to connect to our\nspecified IP address. The string may be a plain IP address, a hostname,\na network interface name (under Unix), or just a plain &#039;-&#039;\nto use the systems default IP address. CURLOPT_INTERFACE The name of\nthe outgoing network interface to use. This can be an interface name,\nan IP address or a host name. CURLOPT_KRB4LEVEL The KRB4 (Kerberos 4)\nsecurity level. Any of the following values (in order from least to\nmost powerful) are valid: `&quot;clear&quot;`, `&quot;safe&quot;`,\n`&quot;confidential&quot;`, `&quot;private&quot;.`. If the string does\nnot match one of these, `&quot;private&quot;` is used. Setting this\noption to NULL will disable KRB4 security. Currently KRB4 security\nonly works with FTP transactions. CURLOPT_POSTFIELDS The full data to\npost in a HTTP &quot;POST&quot; operation. To post a file, prepend a\nfilename with `@` and use the full path. The filetype can be explicitly\nspecified by following the filename with the type in the format\n&#039;`;type=mimetype`&#039;. This parameter can either be passed as a\nurlencoded string like &#039;`para1=val1&amp;para2=val2&amp;...`&#039; or as\nan array with the field name as key and field data as value. If `value` is an\narray, the `Content-Type` header will be set to `multipart/form-data`. As\nof PHP 5.2.0, files thats passed to this option with the `@` prefix\nmust be in array form to work. CURLOPT_PROXY The HTTP proxy to tunnel\nrequests through. CURLOPT_PROXYUSERPWD A username and password formatted\nas `&quot;[username]:[password]&quot;` to use for the connection to\nthe proxy. CURLOPT_RANDOM_FILE A filename to be used to seed the random\nnumber generator for SSL. CURLOPT_RANGE Range(s) of data to retrieve in\nthe format `&quot;X-Y&quot;` where X or Y are optional. HTTP transfers\nalso support several intervals, separated with commas in the format\n`&quot;X-Y,N-M&quot;`. CURLOPT_REFERER The contents of the `&quot;Referer:\n&quot;` header to be used in a HTTP request. CURLOPT_SSL_CIPHER_LIST\nA list of ciphers to use for SSL. For example, `RC4-SHA` and `TLSv1`\nare valid cipher lists. CURLOPT_SSLCERT The name of a file containing\na PEM formatted certificate. CURLOPT_SSLCERTPASSWD The password\nrequired to use the CURLOPT_SSLCERT certificate. CURLOPT_SSLCERTTYPE\nThe format of the certificate. Supported formats are `&quot;PEM&quot;`\n(default), `&quot;DER&quot;`, and `&quot;ENG&quot;`. Added in cURL\n7.9.3. CURLOPT_SSLENGINE The identifier for the crypto engine of the\nprivate SSL key specified in CURLOPT_SSLKEY. CURLOPT_SSLENGINE_DEFAULT\nThe identifier for the crypto engine used for asymmetric crypto\noperations. CURLOPT_SSLKEY The name of a file containing a private SSL\nkey. CURLOPT_SSLKEYPASSWD The secret password needed to use the private\nSSL key specified in CURLOPT_SSLKEY. Note: Since this option contains a\nsensitive password, remember to keep the PHP script it is contained within\nsafe. CURLOPT_SSLKEYTYPE The key type of the private SSL key specified\nin CURLOPT_SSLKEY. Supported key types are `&quot;PEM&quot;` (default),\n`&quot;DER&quot;`, and `&quot;ENG&quot;`. CURLOPT_URL The URL to fetch. This\ncan also be set when initializing a session with curl_init(). CURLOPT_USERAGENT\nThe contents of the `&quot;User-Agent: &quot;` header to be used in\na HTTP request. CURLOPT_USERPWD A username and password formatted as\n`&quot;[username]:[password]&quot;` to use for the connection. `value` should\nbe an array for the following values of the `option` parameter: Option Set\n`value` to Notes CURLOPT_HTTP200ALIASES An array of HTTP 200 responses\nthat will be treated as valid responses and not as errors. Added in cURL\n7.10.3. CURLOPT_HTTPHEADER An array of HTTP header fields to set, in the\nformat array(&#039;Content-type: text/plain&#039;, &#039;Content-length:\n100&#039;) CURLOPT_POSTQUOTE An array of FTP commands to execute on the\nserver after the FTP request has been performed. CURLOPT_QUOTE An array\nof FTP commands to execute on the server prior to the FTP request. `value`\nshould be a stream resource (using fopen(), for example) for the following\nvalues of the `option` parameter: Option Set `value` to CURLOPT_FILE The\nfile that the transfer should be written to. The default is `STDOUT` (the\nbrowser window). CURLOPT_INFILE The file that the transfer should be read\nfrom when uploading. CURLOPT_STDERR An alternative location to output errors\nto instead of `STDERR`. CURLOPT_WRITEHEADER The file that the header part of\nthe transfer is written to. `value` should be a string that is the name of a\nvalid callback function for the following values of the `option` parameter:\nOption Set `value` to CURLOPT_HEADERFUNCTION The name of a callback function\nwhere the callback function takes two parameters. The first is the cURL\nresource, the second is a string with the header data to be written. The\nheader data must be written when using this callback function. Return the\nnumber of bytes written. CURLOPT_PASSWDFUNCTION The name of a callback\nfunction where the callback function takes three parameters. The first is\nthe cURL resource, the second is a string containing a password prompt, and\nthe third is the maximum password length. Return the string containing the\npassword. CURLOPT_PROGRESSFUNCTION The name of a callback function where the\ncallback function takes three parameters. The first is the cURL resource,\nthe second is a file-descriptor resource, and the third is length. Return\nthe string containing the data. CURLOPT_READFUNCTION The name of a callback\nfunction where the callback function takes three parameters. The first is\nthe cURL resource, the second is a stream resource provided to cURL through\nthe option CURLOPT_INFILE, and the third is the maximum amount of data to\nbe read. The callback function must return a string with a length equal or\nsmaller than the amount of data requested, typically by reading it from\nthe passed stream resource. It should return an empty string to signal\n`EOF`. CURLOPT_WRITEFUNCTION The name of a callback function where the\ncallback function takes two parameters. The first is the cURL resource,\nand the second is a string with the data to be written. The data must be\nsaved by using this callback function. It must return the exact number of\nbytes written or the transfer will be aborted with an error.\n@return (PHP 4 >= 4.0.2, PHP 5)\n@note Note: Passing an array to CURLOPT_POSTFIELDS will encode the data as\nmultipart/form-data, while passing a URL-encoded string will encode the data\nas application/x-www-form-urlencoded.\n@see curl_setopt_array() - Set multiple options for a cURL transfer\n
curl_version curl_version([int $age=CURLVERSION_NOW]) [array]\nGets cURL version information. Returns information about the cURL version.\n@param age\n@return (PHP 4 >= 4.0.2, PHP 5)\n
current current(array $array) [mixed]\nReturn the current element in an array. Every array has an internal pointer\nto its &quot;current&quot; element, which is initialized to the first element\ninserted into the array.\n@param array The array.\n@return (PHP 4, PHP 5)\n@note Note: You won&#039;t be able to distinguish the end of an array from\na boolean FALSE element. To properly traverse an array which may contain\nFALSE elements, see the each() function.\n@see end() - Set the internal pointer of an array to its last element\n@see key() - Fetch a key from an array\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n@see prev() - Rewind the internal array pointer\n@see reset() - Set the internal pointer of an array to its first element\n@see next() - Advance the internal array pointer of an array\n
cyrus_authenticate cyrus_authenticate(resource $connection [, string $mechlist\n[, string $service [, string $user [, int $minssf [, int $maxssf [, string\n$authname [, string $password]]]]]]]) [void]\nAuthenticate against a Cyrus IMAP server.\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
cyrus_bind cyrus_bind(resource $connection, array $callbacks) [bool]\nBind callbacks to a Cyrus IMAP connection. Binds callbacks to a Cyrus IMAP\nconnection.\n@param connection The connection handle.\n@param callbacks An array of callbacks.\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
cyrus_close cyrus_close(resource $connection) [bool]\nClose connection to a Cyrus IMAP server. Closes the connection to a Cyrus\nIMAP server.\n@param connection The connection handle.\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
cyrus_connect cyrus_connect([string $host [, string $port [, int $flags]]])\n[resource]\nConnect to a Cyrus IMAP server. Connects to a Cyrus IMAP server.\n@param host The Cyrus IMAP host name.\n@param port The port number.\n@param flags\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
cyrus_query cyrus_query(resource $connection, string $query) [array]\nSend a query to a Cyrus IMAP server. Sends a query to a Cyrus IMAP server.\n@param connection The connection handle.\n@param query The query string.\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
cyrus_unbind cyrus_unbind(resource $connection, string $trigger_name) [bool]\nUnbind ....\n@param connection The connection handle.\n@param trigger_name The trigger name.\n@return (PHP 4 >= 4.1.0, PECL cyrus 1.0)\n
date_add date_add\nAlias of DateTime::add.\n
date_create_from_format date_create_from_format\nAlias of DateTime::createFromFormat.\n
date_create date_create\nAlias of DateTime::__construct.\n
date_date_set date_date_set\nAlias of DateTime::setDate.\n
date_default_timezone_get date_default_timezone_get(void) [string]\nGets the default timezone used by all date/time functions in a script. In\norder of preference, this function returns the default timezone by: Reading\nthe timezone set using the date_default_timezone_set() function (if any)\nReading the TZ environment variable (if non empty) (Prior to PHP 5.3.0)\nReading the value of the date.timezone ini option (if set) Querying the host\noperating system (if supported and allowed by the OS). This uses an algorithm\nthat has to guess the timezone. This is by no means going to work correctly\nfor every situation. A warning is shown when this stage is reached. Do not\nrely on it to be guessed correctly, and set date.timezone to the correct\ntimezone instead. If none of the above succeed, date_default_timezone_get()\nwill return a default timezone of `UTC`.\n@return (PHP 5 >= 5.1.0)\n@see date_default_timezone_set() - Sets the default timezone used by all\ndate/time functions in a script\n@see List of Supported Timezones\n
date_default_timezone_set date_default_timezone_set(string\n$timezone_identifier) [bool]\nSets the default timezone used by all date/time functions in a\nscript. date_default_timezone_set() sets the default timezone used by all\ndate/time functions. Note: Since PHP 5.1.0 (when the date/time functions were\nrewritten), every call to a date/time function will generate a E_NOTICE if\nthe timezone isn&#039;t valid, and/or a E_WARNING message if using the system\nsettings or the TZ environment variable. Instead of using this function to\nset the default timezone in your script, you can also use the INI setting\ndate.timezone to set the default timezone.\n@param timezone_identifier The timezone identifier, like `UTC` or\n`Europe/Lisbon`. The list of valid identifiers is available in the List of\nSupported Timezones.\n@return (PHP 5 >= 5.1.0)\n@see date_default_timezone_get() - Gets the default timezone used by all\ndate/time functions in a script\n@see List of Supported Timezones\n
date_diff date_diff\nAlias of DateTime::diff.\n
date_format date_format\nAlias of DateTime::format.\n
date_get_last_errors date_get_last_errors\nAlias of DateTime::getLastErrors.\n
date_interval_create_from_date_string date_interval_create_from_date_string\nAlias of DateInterval::createFromDateString.\n
date_interval_format date_interval_format\nAlias of DateInterval::format.\n
date_isodate_set date_isodate_set\nAlias of DateTime::setISODate.\n
date_modify date_modify\nAlias of DateTime::modify.\n
date_offset_get date_offset_get\nAlias of DateTime::getOffset.\n
date_parse_from_format date_parse_from_format(string $format, string $date)\n[array]\nGet info about given date formatted according to the specified format. Returns\nassociative array with detailed info about given date.\n@param format Format accepted by DateTime::createFromFormat().\n@param date String representing the date.\n@return (PHP 5 >= 5.3.0)\n@see DateTime::createFromFormat() - Returns new DateTime object formatted\naccording to the specified format\n@see checkdate() - Validate a Gregorian date\n
date_parse date_parse(string $date) [array]\nReturns associative array with detailed info about given date.\n@param date Date in format accepted by strtotime().\n@return (PHP 5 >= 5.2.0)\n@see checkdate() - Validate a Gregorian date\n@see getdate() - Get date/time information\n
date_sub date_sub\nAlias of DateTime::sub.\n
date_sun_info date_sun_info(int $time, float $latitude, float $longitude)\n[array]\nReturns an array with information about sunset/sunrise and twilight begin/end.\n@param time Timestamp.\n@param latitude Latitude in degrees.\n@param longitude Longitude in degrees.\n@return (PHP 5 >= 5.1.2)\n@see date_sunrise() - Returns time of sunrise for a given day and location\n@see date_sunset() - Returns time of sunset for a given day and location\n
date_sunrise date_sunrise(int $timestamp [, int $format=SUNFUNCS_RET_STRING\n[, float $latitude=ini_get(&quot;date.default_latitude&quot;) [,\nfloat $longitude=ini_get(&quot;date.default_longitude&quot;) [, float\n$zenith=ini_get(&quot;date.sunrise_zenith&quot;) [, float $gmt_offset=0]]]]])\n[mixed]\nReturns time of sunrise for a given day and location. date_sunrise() returns\nthe sunrise time for a given day (specified as a `timestamp`) and location.\n@param timestamp The `timestamp` of the day from which the sunrise time\nis taken.\n@param format `format` constants constant description example\nSUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE\nreturns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\nresult as integer (timestamp) 1095034606\n@param latitude Defaults to North, pass in a negative value for South. See\nalso: `date.default_latitude`\n@param longitude Defaults to East, pass in a negative value for West. See also:\n`date.default_longitude`\n@param zenith Default: `date.sunrise_zenith`\n@param gmtoffset Specified in hours.\n@return (PHP 5)\n@see date_sunset() - Returns time of sunset for a given day and location\n
date_sunset date_sunset(int $timestamp [, int $format=SUNFUNCS_RET_STRING\n[, float $latitude=ini_get(&quot;date.default_latitude&quot;) [,\nfloat $longitude=ini_get(&quot;date.default_longitude&quot;) [, float\n$zenith=ini_get(&quot;date.sunset_zenith&quot;) [, float $gmt_offset=0]]]]])\n[mixed]\nReturns time of sunset for a given day and location. date_sunset() returns\nthe sunset time for a given day (specified as a `timestamp`) and location.\n@param timestamp The `timestamp` of the day from which the sunset time\nis taken.\n@param format `format` constants constant description example\nSUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE\nreturns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\nresult as integer (timestamp) 1095034606\n@param latitude Defaults to North, pass in a negative value for South. See\nalso: `date.default_latitude`\n@param longitude Defaults to East, pass in a negative value for West. See also:\n`date.default_longitude`\n@param zenith Default: `date.sunset_zenith`\n@param gmtoffset Specified in hours.\n@return (PHP 5)\n@see date_sunrise() - Returns time of sunrise for a given day and location\n
date_time_set date_time_set\nAlias of DateTime::setTime.\n
date_timestamp_get date_timestamp_get\nAlias of DateTime::getTimestamp.\n
date_timestamp_set date_timestamp_set\nAlias of DateTime::setTimestamp.\n
date_timezone_get date_timezone_get\nAlias of DateTime::getTimezone.\n
date_timezone_set date_timezone_set\nAlias of DateTime::setTimezone.\n
date date(string $format [, int $timestamp]) [string]\nFormat a local time/date. Returns a string formatted according to the given\nformat string using the given integer `timestamp` or the current time if no\ntimestamp is given. In other words, `timestamp` is optional and defaults to\nthe value of time().\n@param format The format of the outputted date string. See the formatting\noptions below. There are also several predefined date constants that may be\nused instead, so for example DATE_RSS contains the format string `&#039;D,\nd M Y H:i:s&#039;`. The following characters are recognized in the `format`\nparameter string `format` character Description Example returned values Day\n--- --- `d` Day of the month, 2 digits with leading zeros `01` to `31` `D`\nA textual representation of a day, three letters `Mon` through `Sun` `j` Day\nof the month without leading zeros `1` to `31` `l` (lowercase &#039;L&#039;) A\nfull textual representation of the day of the week `Sunday` through `Saturday`\n`N` ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\n`1` (for Monday) through `7` (for Sunday) `S` English ordinal suffix for the\nday of the month, 2 characters `st`, `nd`, `rd` or `th`. Works well with `j`\n`w` Numeric representation of the day of the week `0` (for Sunday) through `6`\n(for Saturday) `z` The day of the year (starting from 0) `0` through `365`\nWeek --- --- `W` ISO-8601 week number of year, weeks starting on Monday (added\nin PHP 4.1.0) Example: `42` (the 42nd week in the year) Month --- --- `F`\nA full textual representation of a month, such as January or March `January`\nthrough `December` `m` Numeric representation of a month, with leading zeros\n`01` through `12` `M` A short textual representation of a month, three letters\n`Jan` through `Dec` `n` Numeric representation of a month, without leading\nzeros `1` through `12` `t` Number of days in the given month `28` through\n`31` Year --- --- `L` Whether it&#039;s a leap year `1` if it is a leap year,\n`0` otherwise. `o` ISO-8601 year number. This has the same value as `Y`,\nexcept that if the ISO week number (`W`) belongs to the previous or next\nyear, that year is used instead. (added in PHP 5.1.0) Examples: `1999`\nor `2003` `Y` A full numeric representation of a year, 4 digits Examples:\n`1999` or `2003` `y` A two digit representation of a year Examples: `99` or\n`03` Time --- --- `a` Lowercase Ante meridiem and Post meridiem `am` or `pm`\n`A` Uppercase Ante meridiem and Post meridiem `AM` or `PM` `B` Swatch Internet\ntime `000` through `999` `g` 12-hour format of an hour without leading zeros\n`1` through `12` `G` 24-hour format of an hour without leading zeros `0`\nthrough `23` `h` 12-hour format of an hour with leading zeros `01` through\n`12` `H` 24-hour format of an hour with leading zeros `00` through `23`\n`i` Minutes with leading zeros `00` to `59` `s` Seconds, with leading zeros\n`00` through `59` `u` Microseconds (added in PHP 5.2.2) Example: `654321`\nTimezone --- --- `e` Timezone identifier (added in PHP 5.1.0) Examples:\n`UTC`, `GMT`, `Atlantic/Azores` `I` (capital i) Whether or not the date\nis in daylight saving time `1` if Daylight Saving Time, `0` otherwise. `O`\nDifference to Greenwich time (GMT) in hours Example: `+0200` `P` Difference\nto Greenwich time (GMT) with colon between hours and minutes (added in PHP\n5.1.3) Example: `+02:00` `T` Timezone abbreviation Examples: `EST`, `MDT`\n... `Z` Timezone offset in seconds. The offset for timezones west of UTC\nis always negative, and for those east of UTC is always positive. `-43200`\nthrough `50400` Full Date/Time --- --- `c` ISO 8601 date (added in PHP 5)\n2004-02-12T15:19:21+00:00 `r` &raquo; RFC 2822 formatted date Example: `Thu,\n21 Dec 2000 16:01:07 +0200` `U` Seconds since the Unix Epoch (January 1 1970\n00:00:00 GMT) See also time() Unrecognized characters in the format string\nwill be printed as-is. The `Z` format will always return `0` when using\ngmdate(). Note: Since this function only accepts integer timestamps the `u`\nformat character is only useful when using the date_format() function with\nuser based timestamps created with date_create().\n@param timestamp The optional `timestamp` parameter is an integer Unix\ntimestamp that defaults to the current local time if a `timestamp` is not\ngiven. In other words, it defaults to the value of time().\n@return (PHP 4, PHP 5)\n@note Note: To generate a timestamp from a string representation of the date,\nyou may be able to use strtotime(). Additionally, some databases have functions\nto convert their date formats into timestamps (such as MySQL&#039;s &raquo;\nUNIX_TIMESTAMP function).\n@see gmdate() - Format a GMT/UTC date/time\n@see idate() - Format a local time/date as integer\n@see getdate() - Get date/time information\n@see getlastmod() - Gets time of last page modification\n@see mktime() - Get Unix timestamp for a date\n@see strftime() - Format a local time/date according to locale settings\n@see time() - Return current Unix timestamp\n@see Predefined DateTime Constants\n
db2_autocommit db2_autocommit(resource $connection [, bool $value]) [mixed]\nReturns or sets the AUTOCOMMIT state for a database connection. Sets or gets\nthe AUTOCOMMIT behavior of the specified connection resource.\n@param connection A valid database connection resource variable as returned\nfrom db2_connect() or db2_pconnect().\n@param value One of the following constants: `DB2_AUTOCOMMIT_OFF` Turns\nAUTOCOMMIT off.\n@param DB2_AUTOCOMMIT_ON Turns AUTOCOMMIT on.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_connect() - Returns a connection to a database\n@see db2_pconnect() - Returns a persistent connection to a database\n
db2_bind_param db2_bind_param(resource $stmt, int $parameter-number, string\n$variable-name [, int $parameter-type [, int $data-type=0 [, int $precision=-1\n[, int $scale=0]]]]) [bool]\nBinds a PHP variable to an SQL statement parameter. Binds a PHP variable to an\nSQL statement parameter in a statement resource returned by db2_prepare(). This\nfunction gives you more control over the parameter type, data type, precision,\nand scale for the parameter than simply passing the variable as part of the\noptional input array to db2_execute().\n@param stmt A prepared statement returned from db2_prepare().\n@param parameter-number Specifies the 1-indexed position of the parameter\nin the prepared statement.\n@param variable-name A string specifying the name of the PHP variable to\nbind to the parameter specified by `parameter-number`.\n@param parameter-type A constant specifying whether the PHP variable should\nbe bound to the SQL parameter as an input parameter (`DB2_PARAM_IN`), an\noutput parameter (`DB2_PARAM_OUT`), or as a parameter that accepts input and\nreturns output (`DB2_PARAM_INOUT`). To avoid memory overhead, you can also\nspecify `DB2_PARAM_FILE` to bind the PHP variable to the name of a file that\ncontains large object (BLOB, CLOB, or DBCLOB) data.\n@param data-type A constant specifying the SQL data type that the PHP\nvariable should be bound as: one of `DB2_BINARY`, `DB2_CHAR`, `DB2_DOUBLE`,\nor `DB2_LONG` .\n@param precision Specifies the precision with which the variable should be\nbound to the database. This parameter can also be used for retrieving XML\noutput values from stored procedures. A non-negative value specifies the\nmaximum size of the XML data that will be retrieved from the database. If\nthis parameter is not used, a default of 1MB will be assumed for retrieving\nthe XML output value from the stored procedure.\n@param scale Specifies the scale with which the variable should be bound to\nthe database.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_execute() - Executes a prepared SQL statement\n@see db2_prepare() - Prepares an SQL statement to be executed\n
db2_client_info db2_client_info(resource $connection) [object]\nReturns an object with properties that describe the DB2 database client. This\nfunction returns an object with read-only properties that return information\nabout the DB2 database client. The following table lists the DB2 client\nproperties: DB2 client properties Property name Return type Description\nAPPL_CODEPAGE int The application code page. CONN_CODEPAGE int The code page\nfor the current connection. DATA_SOURCE_NAME string The data source name\n(DSN) used to create the current connection to the database. DRIVER_NAME\nstring The name of the library that implements the DB2 Call Level Interface\n(CLI) specification. DRIVER_ODBC_VER string The version of ODBC that the\nDB2 client supports. This returns a string &quot;MM.mm&quot; where MM is\nthe major version and mm is the minor version. The DB2 client always returns\n&quot;03.51&quot;. DRIVER_VER string The version of the client, in the form\nof a string &quot;MM.mm.uuuu&quot; where MM is the major version, mm is the\nminor version, and uuuu is the update. For example, &quot;08.02.0001&quot;\nrepresents major version 8, minor version 2, update 1. ODBC_SQL_CONFORMANCE\nstring The level of ODBC SQL grammar supported by the client: MINIMUM Supports\nthe minimum ODBC SQL grammar. Supports the core ODBC SQL grammar. Supports\nextended ODBC SQL grammar.\n@param connection Specifies an active DB2 client connection.\n@return (PECL ibm_db2 >= 1.1.1)\n@see db2_server_info() - Returns an object with properties that describe\nthe DB2 database server\n
db2_close db2_close(resource $connection) [bool]\nCloses a database connection. This function closes a DB2 client connection\ncreated with db2_connect() and returns the corresponding resources to the\ndatabase server. If you attempt to close a persistent DB2 client connection\ncreated with db2_pconnect(), the close request is ignored and the persistent\nDB2 client connection remains available for the next caller.\n@param connection Specifies an active DB2 client connection.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_connect() - Returns a connection to a database\n@see db2_pclose() - Closes a persistent database connection\n@see db2_pconnect() - Returns a persistent connection to a database\n
db2_column_privileges db2_column_privileges(resource $connection [, string\n$qualifier [, string $schema [, string $table-name [, string $column-name]]]])\n[resource]\nReturns a result set listing the columns and associated privileges for a\ntable. Returns a result set listing the columns and associated privileges\nfor a table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. To match all schemas,\npass NULL or an empty string.\n@param table-name The name of the table or view. To match all tables in the\ndatabase, pass NULL or an empty string.\n@param column-name The name of the column. To match all columns in the table,\npass NULL or an empty string.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_columns() - Returns a result set listing the columns and associated\nmetadata for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
db2_columns db2_columns(resource $connection [, string $qualifier [, string\n$schema [, string $table-name [, string $column-name]]]]) [resource]\nReturns a result set listing the columns and associated metadata for a\ntable. Returns a result set listing the columns and associated metadata for\na table.\n@param connection A valid connection to an IBM DB2, Cloudscape, or Apache\nDerby database.\n@param qualifier A qualifier for DB2 databases running on OS/390 or z/OS\nservers. For other databases, pass NULL or an empty string.\n@param schema The schema which contains the tables. To match all schemas,\npass `&#039;%&#039;`.\n@param table-name The name of the table or view. To match all tables in the\ndatabase, pass NULL or an empty string.\n@param column-name The name of the column. To match all columns in the table,\npass NULL or an empty string.\n@return (PECL ibm_db2 >= 1.0.0)\n@see db2_column_privileges() - Returns a result set listing the columns and\nassociated privileges for a table\n@see db2_foreign_keys() - Returns a result set listing the foreign keys for\na table\n@see db2_primary_keys() - Returns a result set listing primary keys for a table\n@see db2_procedure_columns() - Returns a result set listing stored procedure\nparameters\n@see db2_procedures() - Returns a result set listing the stored procedures\nregistered in a database\n@see db2_special_columns() - Returns a result set listing the unique row\nidentifier columns for a table\n@see db2_statistics() - Returns a result set listing the index and statistics\nfor a table\n@see db2_table_privileges() - Returns a result set listing the tables and\nassociated privileges in a database\n@see db2_tables() - Returns a result set listing the tables and associated\nmetadata in a database\n
call_user_func_array call_user_func_array(callback $function, array $param_arr)\n[mixed]\nCall a user function given with an array of parameters. Call a user defined\n`function` with the parameters in `param_arr`.\n@param function The function to be called.\n@param param_arr The parameters to be passed to the function, as an indexed\narray.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: Referenced variables in `param_arr` are passed to the function by\nreference, regardless of whether the function expects the respective parameter\nto be passed by reference. This form of call-time pass by reference does not\nemit a deprecation notice, but it is nonetheless deprecated, and will most\nlikely be removed in the next version of PHP. Furthermore, this does not apply\nto internal functions, for which the function signature is honored. Passing\nby value when the function expects a parameter by reference results in a\nwarning and having call_user_func() return FALSE (does not apply if the\npassed value has a reference count = 1).\n@note Note: Callbacks registered with functions such as call_user_func() and\ncall_user_func_array() will not be called if there is an uncaught exception\nthrown in a previous callback.\n@see call_user_func() - Call a user function given by the first parameter\n@see information about the callback type\n
call_user_func call_user_func(callback $function [, mixed $parameter [,\nmixed $...]]) [mixed]\nCall a user function given by the first parameter. Call a user defined\nfunction given by the `function` parameter.\n@param function The function to be called. Class methods may also be invoked\nstatically using this function by passing `array($classname, $methodname)`\nto this parameter. Additionally class methods of an object instance may be\ncalled by passing `array($objectinstance, $methodname)` to this parameter.\n@return (PHP 4, PHP 5)\n@note Note: Callbacks registered with functions such as call_user_func() and\ncall_user_func_array() will not be called if there is an uncaught exception\nthrown in a previous callback.\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see is_callable() - Verify that the contents of a variable can be called\nas a function\n@see information about the callback type\n
call_user_method_array call_user_method_array(string $method_name, object\n&$obj, array $params) [mixed]\nCall a user method given with an array of parameters [deprecated].\n@param method_name The method name being called.\n@param  `obj` The object that `method_name` is being called on.\n@param  `params` An array of parameters.\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see call_user_func() - Call a user function given by the first parameter\n
call_user_method call_user_method(string $method_name, object &$obj [,\nmixed $parameter [, mixed $...]]) [mixed]\nCall a user method on an specific object [deprecated].\n@param method_name The method name being called.\n@param  `obj` The object that `method_name` is being called on.\n@param  `parameter ...` The optional parameters.\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see call_user_func() - Call a user function given by the first parameter\n
ceil ceil(float $value) [float]\nRound fractions up.\n@param value The value to round\n@return (PHP 4, PHP 5)\n@see floor() - Round fractions down\n@see round() - Rounds a float\n
chdb_create chdb_create(string $pathname, array $data) [bool]\nCreates a chdb file. chdb_create() creates a chdb file containing the specified\nkey-value pairs. Note: chdb files are not portable across little-endian\nand big-endian environments. Except for that, they are portable across\ndifferent architectures. Also compatibility across different versions of\nchdb is not guaranteed.\n@param pathname The name of the file to create. If a file with the same name\nalready exists, it is overwritten.\n@param data An array containing the key-value pairs to store in the chdb\nfile. Keys and values are converted to strings before being written to the\nfile, as chdb only support the string type. Note that binary strings are\nsupported as well, both as keys and values.\n@return (PECL chdb >= 0.1.0)\n
chdir chdir(string $directory) [bool]\nChange directory. Changes PHP&#039;s current directory to `directory`.\n@param directory The new current directory\n@return (PHP 4, PHP 5)\n@note Note: When safe mode is enabled, PHP checks whether the directory in\nwhich the script is operating has the same UID (owner) as the script that\nis being executed.\n@see getcwd() - Gets the current working directory\n
checkdate checkdate(int $month, int $day, int $year) [bool]\nValidate a Gregorian date. Checks the validity of the date formed by the\narguments. A date is considered valid if each parameter is properly defined.\n@param month The month is between 1 and 12 inclusive.\n@param day The day is within the allowed number of days for the given\n`month`. Leap `year`s are taken into consideration.\n@param year The year is between 1 and 32767 inclusive.\n@return (PHP 4, PHP 5)\n@see mktime() - Get Unix timestamp for a date\n@see strtotime() - Parse about any English textual datetime description into\na Unix timestamp\n
checkdnsrr checkdnsrr(string $host [, string $type=&quot;MX&quot;]) [bool]\nCheck DNS records corresponding to a given Internet host name or IP\naddress. Searches DNS for records of type `type` corresponding to `host`.\n@param host `host` may either be the IP address in dotted-quad notation or\nthe host name.\n@param type `type` may be any one of: A, MX, NS, SOA, PTR, CNAME, AAAA, A6,\nSRV, NAPTR, TXT or ANY.\n@return (PHP 4, PHP 5)\n@note Note: For compatibility with Windows before this was implemented,\nthen try the &raquo; PEAR class &raquo; Net_DNS.\n@see dns_get_record() - Fetch DNS Resource Records associated with a hostname\n@see getmxrr() - Get MX records corresponding to a given Internet host name\n@see gethostbyaddr() - Get the Internet host name corresponding to a given\nIP address\n@see gethostbyname() - Get the IPv4 address corresponding to a given Internet\nhost name\n@see gethostbynamel() - Get a list of IPv4 addresses corresponding to a\ngiven Internet host name\n@see the named(8) manual page\n
chgrp chgrp(string $filename, mixed $group) [bool]\nChanges file group. Attempts to change the group of the file `filename`\nto `group`. Only the superuser may change the group of a file arbitrarily;\nother users may change the group of a file to any group of which that user\nis a member.\n@param filename Path to the file.\n@param group A group name or number.\n@return (PHP 4, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n@see chown() - Changes file owner\n@see chmod() - Changes file mode\n
chmod chmod(string $filename, int $mode) [bool]\nChanges file mode. Attempts to change the mode of the specified file to that\ngiven in `mode`.\n@param filename Path to the file.\n@return (PHP 4, PHP 5)\n@note Note: The current user is the user under which PHP runs. It is probably\nnot the same user you use for normal shell or FTP access. The mode can be\nchanged only by user who owns the file on most systems.\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories you are about to operate on have the same UID (owner) as the\nscript that is being executed. In addition, you cannot set the SUID, SGID\nand sticky bits.\n@see chown() - Changes file owner\n@see chgrp() - Changes file group\n@see fileperms() - Gets file permissions\n@see stat() - Gives information about a file\n
chop chop\nAlias of rtrim.\n@note Note: chop() is different than the Perl `chop()` function, which\nremoves the last character in the string.\n
chown chown(string $filename, mixed $user) [bool]\nChanges file owner. Attempts to change the owner of the file `filename`\nto user `user`. Only the superuser may change the owner of a file.\n@param filename Path to the file.\n@param user A user name or number.\n@return (PHP 4, PHP 5)\n@note Note: This function will not work on remote files as the file to be\nexamined must be accessible via the server&#039;s filesystem.\n@note Note: When safe mode is enabled, PHP checks whether the files or\ndirectories being operated upon have the same UID (owner) as the script that\nis being executed.\n@see chmod() - Changes file mode\n
chr chr(int $ascii) [string]\nReturn a specific character. Returns a one-character string containing the\ncharacter specified by `ascii`. This function complements ord().\n@param ascii The ascii code.\n@return (PHP 4, PHP 5)\n@see sprintf() - Return a formatted string with a format string of `%c`\n@see ord()\n@see An &raquo; ASCII-table\n
chroot chroot(string $directory) [bool]\nChange the root directory. Changes the root directory of the current process to\n`directory`, and changes the current working directory to &quot;/&quot;. This\nfunction is only available to GNU and BSD systems, and only when using the\nCLI, CGI or Embed SAPI. Also, this function requires root privileges.\n@param directory The path to change the root directory to.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: This function is not implemented on Windows platforms.\n
chunk_split chunk_split(string $body [, int $chunklen=76 [, string\n$end=&quot;\r\n&quot;]]) [string]\nSplit a string into smaller chunks. Can be used to split a string into\nsmaller chunks which is useful for e.g. converting base64_encode() output\nto match RFC 2045 semantics. It inserts `end` every `chunklen` characters.\n@param body The string to be chunked.\n@param chunklen The chunk length.\n@param end The line ending sequence.\n@return (PHP 4, PHP 5)\n@see str_split() - Convert a string to an array\n@see explode() - Split a string by string\n@see split() - Split string into array by regular expression\n@see wordwrap() - Wraps a string to a given number of characters\n@see &raquo; RFC 2045\n
class_alias class_alias([string $original [, string $alias]]) [bool]\nCreates an alias for a class. Creates an alias named `alias` based on the\ndefined class `original`. The aliased class is exactly the same as the\noriginal class.\n@param original The original class.\n@param alias The alias name for the class.\n@return (PHP 5 >= 5.3.0)\n@see get_parent_class() - Retrieves the parent class name for object or class\n@see is_subclass_of() - Checks if the object has this class as one of\nits parents\n
class_exists class_exists(string $class_name [, bool $autoload=true]) [bool]\nChecks if the class has been defined. This function checks whether or not\nthe given class has been defined.\n@param class_name The class name. The name is matched in a case-insensitive\nmanner.\n@param autoload Whether or not to call __autoload by default.\n@return (PHP 4, PHP 5)\n@see function_exists() - Return TRUE if the given function has been defined\n@see interface_exists() - Checks if the interface has been defined\n@see get_declared_classes() - Returns an array with the name of the defined\nclasses\n
class_implements class_implements(mixed $class [, bool $autoload=true]) [array]\nReturn the interfaces which are implemented by the given class. This function\nreturns an array with the names of the interfaces that the given `class`\nand its parents implement.\n@param class An object (class instance) or a string (class name).\n@param autoload Whether to allow this function to load the class automatically\nthrough the __autoload magic method.\n@return (PHP 5 >= 5.1.0)\n@see class_parents() - Return the parent classes of the given class\n@see get_declared_interfaces() - Returns an array of all declared interfaces\n
class_parents class_parents(mixed $class [, bool $autoload=true]) [array]\nReturn the parent classes of the given class. This function returns an array\nwith the name of the parent classes of the given `class`.\n@param class An object (class instance) or a string (class name).\n@param autoload Whether to allow this function to load the class automatically\nthrough the __autoload magic method.\n@return (PHP 5 >= 5.1.0)\n@see class_implements() - Return the interfaces which are implemented by\nthe given class\n
classkit_import classkit_import(string $filename) [array]\nImport new class method definitions from a file.\n@param filename The filename of the class method definitions to import\n@return (PECL classkit >= 0.3)\n@see classkit_method_add() - Dynamically adds a new method to a given class\n@see classkit_method_copy() - Copies a method from class to another\n
classkit_method_add classkit_method_add(string $classname, string $methodname,\nstring $args, string $code [, int $flags=CLASSKIT_ACC_PUBLIC]) [bool]\nDynamically adds a new method to a given class.\n@param classname The class to which this method will be added\n@param methodname The name of the method to add\n@param args Comma-delimited list of arguments for the newly-created method\n@param code The code to be evaluated when `methodname` is called\n@param flags The type of method to create, can be CLASSKIT_ACC_PUBLIC,\nCLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE Note: This parameter is only\nused as of PHP 5, because, prior to this, all methods were public.\n@return (PECL classkit >= 0.1)\n@see classkit_method_copy() - Copies a method from class to another\n@see classkit_method_redefine() - Dynamically changes the code of the\ngiven method\n@see classkit_method_remove() - Dynamically removes the given method\n@see classkit_method_rename() - Dynamically changes the name of the given\nmethod\n@see create_function() - Create an anonymous (lambda-style) function\n
classkit_method_copy classkit_method_copy(string $dClass, string $dMethod,\nstring $sClass [, string $sMethod]) [bool]\nCopies a method from class to another.\n@param dClass Destination class for copied method\n@param dMethod Destination method name\n@param sClass Source class of the method to copy\n@param sMethod Name of the method to copy from the source class. If this\nparameter is omitted, the value of `dMethod` is assumed.\n@return (PECL classkit >= 0.2)\n@see classkit_method_add() - Dynamically adds a new method to a given class\n@see classkit_method_redefine() - Dynamically changes the code of the\ngiven method\n@see classkit_method_remove() - Dynamically removes the given method\n@see classkit_method_rename() - Dynamically changes the name of the given\nmethod\n
classkit_method_redefine classkit_method_redefine(string $classname, string\n$methodname, string $args, string $code [, int $flags=CLASSKIT_ACC_PUBLIC])\n[bool]\nDynamically changes the code of the given method.\n@param classname The class in which to redefine the method\n@param methodname The name of the method to redefine\n@param args Comma-delimited list of arguments for the redefined method\n@param code The new code to be evaluated when `methodname` is called\n@param flags The redefined method can be CLASSKIT_ACC_PUBLIC,\nCLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE Note: This parameter is only\nused as of PHP 5, because, prior to this, all methods were public.\n@return (PECL classkit >= 0.1)\n@see classkit_method_add() - Dynamically adds a new method to a given class\n@see classkit_method_copy() - Copies a method from class to another\n@see classkit_method_remove() - Dynamically removes the given method\n@see classkit_method_rename() - Dynamically changes the name of the given\nmethod\n
classkit_method_remove classkit_method_remove(string $classname, string\n$methodname) [bool]\nDynamically removes the given method.\n@param classname The class in which to remove the method\n@param methodname The name of the method to remove\n@return (PECL classkit >= 0.1)\n@see classkit_method_add() - Dynamically adds a new method to a given class\n@see classkit_method_copy() - Copies a method from class to another\n@see classkit_method_redefine() - Dynamically changes the code of the\ngiven method\n@see classkit_method_rename() - Dynamically changes the name of the given\nmethod\n
classkit_method_rename classkit_method_rename(string $classname, string\n$methodname, string $newname) [bool]\nDynamically changes the name of the given method.\n@param classname The class in which to rename the method\n@param methodname The name of the method to rename\n@param newname The new name to give to the renamed method\n@return (PECL classkit >= 0.1)\n@see classkit_method_add() - Dynamically adds a new method to a given class\n@see classkit_method_copy() - Copies a method from class to another\n@see classkit_method_redefine() - Dynamically changes the code of the\ngiven method\n@see classkit_method_remove() - Dynamically removes the given method\n
clearstatcache clearstatcache([bool $clear_realpath_cache=false [, string\n$filename]]) [void]\nClears file status cache. When you use stat(), lstat(), or any of\nthe other functions listed in the affected functions list (below), PHP\ncaches the information those functions return in order to provide faster\nperformance. However, in certain cases, you may want to clear the cached\ninformation. For instance, if the same file is being checked multiple\ntimes within a single script, and that file is in danger of being removed\nor changed during that script&#039;s operation, you may elect to clear the\nstatus cache. In these cases, you can use the clearstatcache() function to\nclear the information that PHP caches about a file. You should also note that\nPHP doesn&#039;t cache information about non-existent files. So, if you call\nfile_exists() on a file that doesn&#039;t exist, it will return FALSE until\nyou create the file. If you create the file, it will return TRUE even if you\nthen delete the file. However unlink() clears the cache automatically. Note:\nThis function caches information about specific filenames, so you only need\nto call clearstatcache() if you are performing multiple operations on the\nsame filename and require the information about that particular file to\nnot be cached. Affected functions include stat(), lstat(), file_exists(),\nis_writable(), is_readable(), is_executable(), is_file(), is_dir(), is_link(),\nfilectime(), fileatime(), filemtime(), fileinode(), filegroup(), fileowner(),\nfilesize(), filetype(), and fileperms().\n@param clear_realpath_cache Whether to clear the realpath cache or not.\n@param filename Clear the realpath cache for a specific filename; only used if\n`clear_realpath_cache` is TRUE.\n@return (PHP 4, PHP 5)\n
closedir closedir([resource $dir_handle]) [void]\nClose directory handle. Closes the directory stream indicated by\n`dir_handle`. The stream must have previously been opened by opendir().\n@param dir_handle The directory handle resource previously opened with\nopendir(). If the directory handle is not specified, the last link opened\nby opendir() is assumed.\n
closelog closelog(void) [bool]\nClose connection to system logger. closelog() closes the descriptor being\nused to write to the system logger. The use of closelog() is optional.\n@return (PHP 4, PHP 5)\n@see syslog() - Generate a system log message\n@see openlog() - Open connection to system logger\n
com_addref com_addref(void) [void]\nIncreases the components reference counter [deprecated]. Increases the\ncomponents reference counter.\n@return (PHP 4 >= 4.1.0)\n
com_create_guid com_create_guid(void) [string]\nGenerate a globally unique identifier (GUID). Generates a Globally Unique\nIdentifier (GUID). A GUID is generated in the same way as DCE UUID&#039;s,\nexcept that the Microsoft convention is to enclose a GUID in curly braces.\n@return (PHP 5)\n@see uuid_create() in the PECL uuid extension\n
com_event_sink com_event_sink(variant $comobject, object $sinkobject [,\nmixed $sinkinterface]) [bool]\nConnect events from a COM object to a PHP object. Instructs COM to sink events\ngenerated by `comobject` into the PHP object `sinkobject`. Be careful how you\nuse this feature; if you are doing something similar to the example below,\nthen it doesn&#039;t really make sense to run it in a web server context.\n@param comobject\n@param sinkobject `sinkobject` should be an instance of a class with\nmethods named after those of the desired dispinterface; you may use\ncom_print_typeinfo() to help generate a template class for this purpose.\n@param sinkinterface PHP will attempt to use the default dispinterface type\nspecified by the typelibrary associated with `comobject`, but you may override\nthis choice by setting `sinkinterface` to the name of the dispinterface that\nyou want to use.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see com_print_typeinfo() - Print out a PHP class definition for a dispatchable\ninterface\n@see com_message_pump() - Process COM messages, sleeping for up to timeoutms\nmilliseconds\n
com_get_active_object com_get_active_object(string $progid [, int $code_page])\n[variant]\nReturns a handle to an already running instance of a COM\nobject. com_get_active_object() is similar to creating a new instance of\na COM object, except that it will only return an object to your script if\nthe object is already running. OLE applications use something known as the\nRunning Object Table to allow well-known applications to be launched only\nonce; this function exposes the COM library function GetActiveObject()\nto get a handle on a running instance.\n@param progid `progid` must be either the ProgID or CLSID for the object\nthat you want to access (for example `Word.Application`).\n@param code_page Acts in precisely the same way that it does for the COM class.\n@return (PHP 5)\n
com_get com_get\nGets the value of a COM Component's property [deprecated].\n@note Note: This function does not exist in PHP 5; instead, you should use\nthe regular and more natural OO syntax to access properties or call methods.\n
com_invoke com_invoke(resource $com_object, string $function_name [, mixed\n$function_parameters]) [mixed]\nCalls a COM component's method [deprecated]. com_invoke() invokes\nthe method named `function_name` of the COM component referenced\nby `com_object`. com_invoke() returns FALSE on error, returns the\n`function_name`&#039;s return value on success. All the extra parameters\n`function_parameters` are passed to the method `function_name`.  Example #1\nDon&#039;t use com_invoke(), use OO syntax instead\n
com_isenum com_isenum(variant $com_module) [bool]\nIndicates if a COM object has an IEnumVariant interface for iteration\n[deprecated]. Checks to see if a COM object can be enumerated using the\n`Next()` method hack. See COM class for more details on these methods.\n@param com_module The COM object.\n@return (PHP 4 >= 4.1.0)\n@note Note: This function does not exist in PHP 5; use the more natural\nforeach statement to iterate over the contents of COM objects. See For Each\nfor more details.\n
com_load_typelib com_load_typelib(string $typelib_name [, bool\n$case_insensitive=true]) [bool]\nLoads a Typelib. Loads a type-library and registers its constants in the\nengine, as though they were defined using define(). Note that it is much\nmore efficient to use the configuration setting to pre-load and register\nthe constants, although not so flexible. If you have turned on , then PHP\nwill attempt to automatically register the constants associated with a COM\nobject when you instantiate it. This depends on the interfaces provided by\nthe COM object itself, and may not always be possible.\n@param typelib_name `typelib_name` can be one of the following: The\nfilename of a `.tlb` file or the executable module that contains the\ntype library. The type library GUID, followed by its version number, for\nexample `{00000200-0000-0010-8000-00AA006D2EA4},2,0`. The type library name,\ne.g. `Microsoft OLE DB ActiveX Data Objects 1.0 Library`. PHP will attempt\nto resolve the type library in this order, as the process gets more and more\nexpensive as you progress down the list; searching for the type library by\nname is handled by physically enumerating the registry until we find a match.\n@param case_insensitive The `case_insensitive` behaves in the same way as\nthe parameter with the same name in the define() function.\n@return (PHP 4 >= 4.1.0, PHP 5)\n
com_load com_load\nCreates a new reference to a COM component [deprecated].\n@note Note: This function does not exist in PHP 5; instead, you should use\nthe regular and more natural OO syntax to access properties or call methods.\n
com_message_pump com_message_pump([int $timeoutms=0]) [bool]\nProcess COM messages, sleeping for up to timeoutms milliseconds. This\nfunction will sleep for up to `timeoutms` milliseconds, or until a message\narrives in the queue. The purpose of this function is to route COM calls\nbetween apartments and handle various synchronization issues. This allows\nyour script to wait efficiently for events to be triggered, while still\nhandling other events or running other code in the background. You should\nuse it in a loop, as demonstrated by the example in the com_event_sink()\nfunction, until you are finished using event bound COM objects.\n@param timeoutms The timeout, in milliseconds. If you do not specify a value\nfor `timeoutms`, then 0 will be assumed. A 0 value means that no waiting\nwill be performed; if there are messages pending they will be dispatched\nas before; if there are no messages pending, the function will return FALSE\nimmediately without sleeping.\n@return (PHP 4 >= 4.2.0, PHP 5)\n
com_print_typeinfo com_print_typeinfo(object $comobject [, string\n$dispinterface [, bool $wantsink=false]]) [bool]\nPrint out a PHP class definition for a dispatchable interface. The purpose\nof this function is to help generate a skeleton class for use as an event\nsink. You may also use it to generate a dump of any COM object, provided\nthat it supports enough of the introspection interfaces, and that you know\nthe name of the interface you want to display.\n@param comobject `comobject` should be either an instance of a COM object,\nor be the name of a typelibrary (which will be resolved according to the\nrules set out in com_load_typelib()).\n@param dispinterface The name of an IDispatch descendant interface that you\nwant to display.\n@param wantsink If set to TRUE, the corresponding sink interface will be\ndisplayed instead.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see com_event_sink() - Connect events from a COM object to a PHP object\n@see com_load_typelib() - Loads a Typelib\n
com_propget com_propget\nAlias of com_get.\n
com_propput com_propput\nAlias of com_set.\n
com_propset com_propset\nAlias of com_set.\n
com_release com_release(void) [void]\nDecreases the components reference counter [deprecated]. Decreases the\ncomponents reference counter.\n@return (PHP 4 >= 4.1.0)\n
com_set com_set\nAssigns a value to a COM component's property.\n@note Note: This function does not exist in PHP 5; instead, you should use\nthe regular and more natural OO syntax to access properties or call methods.\n
compact compact(mixed $varname [, mixed $...]) [array]\nCreate array containing variables and their values. Creates an array\ncontaining variables and their values. For each of these, compact() looks\nfor a variable with that name in the current symbol table and adds it to the\noutput array such that the variable name becomes the key and the contents of\nthe variable become the value for that key. In short, it does the opposite\nof extract(). Any strings that are not set will simply be skipped.\n@param varname compact() takes a variable number of parameters. Each parameter\ncan be either a string containing the name of the variable, or an array of\nvariable names. The array can contain other arrays of variable names inside\nit; compact() handles it recursively.\n@return (PHP 4, PHP 5)\n@note Note: Gotcha Because variable variables may not be used with PHP&#039;s\nSuperglobal arrays within functions, the Superglobal arrays may not be passed\ninto compact().\n@see extract() - Import variables into the current symbol table from an array\n
connection_aborted connection_aborted(void) [int]\nCheck whether client disconnected. Checks whether the client disconnected.\n@return (PHP 4, PHP 5)\n@see connection_status() - Returns connection status bitfield\n@see ignore_user_abort() - Set whether a client disconnect should abort\nscript execution\n@see Connection Handling for a complete description of connection handling\nin PHP.\n
connection_status connection_status(void) [int]\nReturns connection status bitfield. Gets the connection status bitfield.\n@return (PHP 4, PHP 5)\n@see connection_aborted() - Check whether client disconnected\n@see ignore_user_abort() - Set whether a client disconnect should abort\nscript execution\n@see Connection Handling for a complete description of connection handling\nin PHP.\n
connection_timeout connection_timeout(void) [int]\nCheck if the script timed out. Determines whether the script timed out.\n@return (PHP 4 &lt;= 4.0.4)\n@see connection_status() - Returns connection status bitfield\n@see Connection Handling for a complete description of connection handling\nin PHP.\n
constant constant(string $name) [mixed]\nReturns the value of a constant.\n@param name The constant name.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see define() - Defines a named constant\n@see defined() - Checks whether a given named constant exists\n@see The section on Constants\n
convert_cyr_string convert_cyr_string(string $str, string $from, string $to)\n[string]\nConvert from one Cyrillic character set to another. Converts from one Cyrillic\ncharacter set to another.\n@param str The string to be converted.\n@param from The source Cyrillic character set, as a single character.\n@param to The target Cyrillic character set, as a single character.\n@return (PHP 4, PHP 5)\n@note Note: This function is binary-safe.\n
convert_uudecode convert_uudecode(string $data) [string]\nDecode a uuencoded string. convert_uudecode() decodes a uuencoded string.\n@param data The uuencoded data.\n@return (PHP 5)\n@see convert_uuencode() - Uuencode a string\n
convert_uuencode convert_uuencode(string $data) [string]\nUuencode a string. convert_uuencode() encodes a string using the uuencode\nalgorithm. Uuencode translates all strings (including binary&#039;s ones) into\nprintable characters, making them safe for network transmissions. Uuencoded\ndata is about 35% larger than the original.\n@param data The data to be encoded.\n@return (PHP 5)\n@see convert_uudecode() - Decode a uuencoded string\n@see base64_encode() - Encodes data with MIME base64\n
copy copy(string $source, string $dest [, resource $context]) [bool]\nCopies file. Makes a copy of the file `source` to `dest`. If you wish to\nmove a file, use the rename() function.\n@param source Path to the source file.\n@return (PHP 4, PHP 5)\n@see move_uploaded_file() - Moves an uploaded file to a new location\n@see rename() - Renames a file or directory\n@see The section of the manual about handling file uploads\n
cos cos(float $arg) [float]\nCosine. cos() returns the cosine of the `arg` parameter. The `arg` parameter\nis in radians.\n@param arg An angle in radians\n@return (PHP 4, PHP 5)\n@see acos() - Arc cosine\n@see sin() - Sine\n@see tan() - Tangent\n@see deg2rad() - Converts the number in degrees to the radian equivalent\n
cosh cosh(float $arg) [float]\nHyperbolic cosine. Returns the hyperbolic cosine of `arg`, defined as\n`(exp(arg) + exp(-arg))/2`.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see cos() - Cosine\n@see acosh() - Inverse hyperbolic cosine\n@see sinh() - Hyperbolic sine\n@see cosh()\n
count_chars count_chars(string $string [, int $mode=0]) [mixed]\nReturn information about characters used in a string. Counts the number\nof occurrences of every byte-value (0..255) in `string` and returns it in\nvarious ways.\n@param string The examined string.\n@param mode See return values.\n@return (PHP 4, PHP 5)\n@see strpos() - Find position of first occurrence of a string\n@see substr_count() - Count the number of substring occurrences\n
count count(mixed $var [, int $mode=COUNT_NORMAL]) [int]\nCount all elements in an array, or properties in an object. Counts all\nelements in an array, or properties in an object. For objects, if you have SPL\ninstalled, you can hook into count() by implementing interface Countable. The\ninterface has exactly one method, count(), which returns the return value\nfor the count() function. Please see the Array section of the manual for a\ndetailed explanation of how arrays are implemented and used in PHP.\n@param var The array.\n@param mode If the optional `mode` parameter is set to COUNT_RECURSIVE (or\n1), count() will recursively count the array. This is particularly useful\nfor counting all the elements of a multidimensional array. count() does not\ndetect infinite recursion.\n@return (PHP 4, PHP 5)\n@see is_array() - Finds whether a variable is an array\n@see isset() - Determine if a variable is set and is not NULL\n@see strlen() - Get string length\n
crack_check crack_check(resource $dictionary, string $password) [bool]\nPerforms an obscure check with the given password. Performs an obscure\ncheck with the given password on the specified dictionary. This function\nis EXPERIMENTAL. The behaviour of this function, its name, and surrounding\ndocumentation may change without notice in a future release of PHP. This\nfunction should be used at your own risk.\n@param dictionary The crack lib dictionary. If not specified, the last opened\ndictionary is used.\n@param password The tested password.\n@return (PECL crack >= 0.1)\n
crack_closedict crack_closedict([resource $dictionary]) [bool]\nCloses an open CrackLib dictionary. crack_closedict() closes the specified\n`dictionary` identifier. This function is EXPERIMENTAL. The behaviour of this\nfunction, its name, and surrounding documentation may change without notice\nin a future release of PHP. This function should be used at your own risk.\n@param dictionary The dictionary to close. If not specified, the current\ndictionary is closed.\n@return (PECL crack >= 0.1)\n@see crack_opendict() - Opens a new CrackLib dictionary\n
crack_getlastmessage crack_getlastmessage(void) [string]\nReturns the message from the last obscure check. crack_getlastmessage() returns\nthe message from the last obscure check. This function is EXPERIMENTAL. The\nbehaviour of this function, its name, and surrounding documentation may\nchange without notice in a future release of PHP. This function should be\nused at your own risk.\n@return (PECL crack >= 0.1)\n@see crack_check() - Performs an obscure check with the given password\n
crack_opendict crack_opendict(string $dictionary) [resource]\nOpens a new CrackLib dictionary. crack_opendict() opens the specified CrackLib\n`dictionary` for use with crack_check(). This function is EXPERIMENTAL. The\nbehaviour of this function, its name, and surrounding documentation may\nchange without notice in a future release of PHP. This function should be\nused at your own risk.\n@param dictionary The path to the Cracklib dictionary.\n@return (PECL crack >= 0.1)\n@see crack_check() - Performs an obscure check with the given password\n@see crack_closedict() - Closes an open CrackLib dictionary\n
crc32 crc32(string $str) [int]\nCalculates the crc32 polynomial of a string. Generates the cyclic redundancy\nchecksum polynomial of 32-bit lengths of the `str`. This is usually used to\nvalidate the integrity of data being transmitted. Because PHP&#039;s integer\ntype is signed, and many crc32 checksums will result in negative integers,\nyou need to use the &quot;%u&quot; formatter of sprintf() or printf() to\nget the string representation of the unsigned crc32 checksum.\n@param str The data.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see md5() - Calculate the md5 hash of a string\n@see sha1() - Calculate the sha1 hash of a string\n
create_function create_function(string $args, string $code) [string]\nCreate an anonymous (lambda-style) function. Creates an anonymous function\nfrom the parameters passed, and returns a unique name for it.\n@param args The function arguments.\n@param code The function code.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see Anonymous functions\n
crypt crypt(string $str [, string $salt]) [string]\nOne-way string hashing. crypt() will return a hashed string using the standard\nUnix DES-based algorithm or alternative algorithms that may be available on\nthe system. Some operating systems support more than one type of hash. In\nfact, sometimes the standard DES-based algorithm is replaced by an MD5-based\nalgorithm. The hash type is triggered by the salt argument. Prior to 5.3,\nPHP would determine the available algorithms at install-time based on the\nsystem&#039;s crypt(). If no salt is provided, PHP will auto-generate either a\nstandard two character (DES) salt, or a twelve character (MD5), depending on\nthe availability of MD5 crypt(). PHP sets a constant named CRYPT_SALT_LENGTH\nwhich indicates the longest valid salt allowed by the available hashes. The\nstandard DES-based crypt() returns the salt as the first two characters\nof the output. It also only uses the first eight characters of `str`,\nso longer strings that start with the same eight characters will generate\nthe same result (when the same salt is used). On systems where the crypt()\nfunction supports multiple hash types, the following constants are set to 0\nor 1 depending on whether the given type is available: Note: As of PHP 5.3.0,\nPHP contains its own implementation and will use that if the system lacks\nof support for one or more of the algorithms.\n@param str The string to be hashed.\n@param salt An optional salt string to base the hashing on. If not provided,\nthe behaviour is defined by the algorithm implementation and can lead to\nunexpected results.\n@return (PHP 4, PHP 5)\n@note Note: There is no decrypt function, since crypt() uses a one-way\nalgorithm.\n@see md5() - Calculate the md5 hash of a string\n@see The Mcrypt extension\n@see The Unix man page for your crypt function for more information\n
ctype_alnum ctype_alnum(string $text) [bool]\nCheck for alphanumeric character(s). Checks if all of the characters in\nthe provided string, `text`, are alphanumeric. In the standard `C` locale\nletters are just `[A-Za-z]`.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_alpha() - Check for alphabetic character(s)\n@see ctype_digit() - Check for numeric character(s)\n@see setlocale() - Set locale information\n
ctype_alpha ctype_alpha(string $text) [bool]\nCheck for alphabetic character(s). Checks if all of the characters in the\nprovided string, `text`, are alphabetic. In the standard `C` locale letters\nare just `[A-Za-z]` and ctype_alpha() is equivalent to `(ctype_upper($text) ||\nctype_lower($text))` if $text is just a single character, but other languages\nhave letters that are considered neither upper nor lower case.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_upper() - Check for uppercase character(s)\n@see ctype_lower() - Check for lowercase character(s)\n@see setlocale() - Set locale information\n
ctype_cntrl ctype_cntrl(string $text) [bool]\nCheck for control character(s). Checks if all of the characters in the\nprovided string, `text`, are control characters. Control characters are\ne.g. line feed, tab, escape.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_print() - Check for printable character(s)\n
ctype_digit ctype_digit(string $text) [bool]\nCheck for numeric character(s). Checks if all of the characters in the\nprovided string, `text`, are numerical.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@note Note: This function requires a string to be useful, so for example\npassing in an integer will always return FALSE. However, also note that HTML\nforms will result in numeric strings and not integers. See also the types\nsection of the manual.\n@see ctype_alnum() - Check for alphanumeric character(s)\n@see ctype_xdigit() - Check for character(s) representing a hexadecimal digit\n@see is_numeric() - Finds whether a variable is a number or a numeric string\n@see is_int() - Find whether the type of a variable is integer\n@see is_string() - Find whether the type of a variable is string\n
ctype_graph ctype_graph(string $text) [bool]\nCheck for any printable character(s) except space. Checks if all of the\ncharacters in the provided string, `text`, creates visible output.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_alnum() - Check for alphanumeric character(s)\n@see ctype_print() - Check for printable character(s)\n@see ctype_punct() - Check for any printable character which is not whitespace\nor an alphanumeric character\n
ctype_lower ctype_lower(string $text) [bool]\nCheck for lowercase character(s). Checks if all of the characters in the\nprovided string, `text`, are lowercase letters.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_alpha() - Check for alphabetic character(s)\n@see ctype_upper() - Check for uppercase character(s)\n@see setlocale() - Set locale information\n
ctype_print ctype_print(string $text) [bool]\nCheck for printable character(s). Checks if all of the characters in the\nprovided string, `text`, are printable.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_cntrl() - Check for control character(s)\n@see ctype_graph() - Check for any printable character(s) except space\n@see ctype_punct() - Check for any printable character which is not whitespace\nor an alphanumeric character\n
ctype_punct ctype_punct(string $text) [bool]\nCheck for any printable character which is not whitespace or an\n   alphanumeric character. Checks if all of the characters in the provided\n   string, `text`, are punctuation character.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_cntrl() - Check for control character(s)\n@see ctype_graph() - Check for any printable character(s) except space\n
ctype_space ctype_space(string $text) [bool]\nCheck for whitespace character(s). Checks if all of the characters in the\nprovided string, `text`, creates whitespace.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_cntrl() - Check for control character(s)\n@see ctype_graph() - Check for any printable character(s) except space\n@see ctype_punct() - Check for any printable character which is not whitespace\nor an alphanumeric character\n
ctype_upper ctype_upper(string $text) [bool]\nCheck for uppercase character(s). Checks if all of the characters in the\nprovided string, `text`, are uppercase characters.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_alpha() - Check for alphabetic character(s)\n@see ctype_lower() - Check for lowercase character(s)\n@see setlocale() - Set locale information\n
ctype_xdigit ctype_xdigit(string $text) [bool]\nCheck for character(s) representing a hexadecimal digit. Checks if all of the\ncharacters in the provided string, `text`, are hexadecimal &#039;digits&#039;.\n@param text The tested string.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see ctype_digit() - Check for numeric character(s)\n
cubrid_affected_rows cubrid_affected_rows([resource $req_identifier]) [int]\nReturn the number of rows affected by the last SQL statement. The\ncubrid_affected_rows() function is used to get the number of rows affected\nby the SQL sentence (INSERT, DELETE, UPDATE).\n@param req_identifier Request identifier. If the request identifier is not\nspecified, the last request is assumed.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_bind cubrid_bind(resource $req_identifier, int $bind_index, string\n$bind_value [, string $bind_value_type]) [bool]\nBind variables to a prepared statement as parameters. The cubrid_bind()\nfunction is used to bind values in a cubrid_prepare() variable, a various\ntypes in PHP and corresponding types in SQL. If bind_value_type is not given,\nstring will be the default. Note: Known issue: If column data type is CLOB,\nbinding parameter will fail. This bug will fixed later. The following table\nshows the types of substitute values.  CUBRID Bind Date Types Support Bind\nType Corresponding SQL Type Supported STRING CHAR, VARCHAR &nbsp; NCHAR\nNCHAR, NVARCHAR &nbsp; BIT BIT, VARBIT &nbsp; NUMERIC or NUMBER SHORT, INT,\nNUMERIC &nbsp; FLOAT FLOAT &nbsp; DOUBLE DOUBLE &nbsp; TIME TIME &nbsp; DATE\nDATE &nbsp; TIMESTAMP TIMESTAMP &nbsp; OBJECT OBJECT &nbsp; BLOB BLOB &nbsp;\nCLOB CLOB &nbsp; NULL NULL Not supported SET SET &nbsp; MULTISET MULTISET\n&nbsp; SEQUENCE SEQUENCE\n@param req_identifier Request identifier as a result of cubrid_prepare().\n@param bind_index Index for binding.\n@param bind_value Actual value for binding.\n@param bind_index A type of the value to bind. (It is omitted by default. Thus,\nsystem internally use string by default. However, you need to specify the\nexact type of the value as an argument when they are NCHAR, BIT, or BLOB/CLOB).\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n@see cubrid_prepare() - Prepare an SQL statement for execution\n
cubrid_client_encoding cubrid_client_encoding([resource $conn_identifier])\n[string]\nReturn the current CUBRID connection charset. This function returns the\ncurrent CUBRID connection charset.\n@param conn_identifier The CUBRID connection. If the connection identifier\nis not specified, the last link opened by cubrid_connect() is assumed.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_get_charset() - Return the current CUBRID connection charset\n
cubrid_close_prepare cubrid_close_prepare(resource $req_identifier) [int]\nClose the request handle. The cubrid_close_prepare() function closes the\nrequest handle given by the `req_identifier` argument, and releases the\nmemory region related to the handle.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_close_request cubrid_close_request(resource $req_identifier) [bool]\nClose the request handle. The cubrid_close_request() function closes the\nrequest handle given by the `req_identifier` argument, and releases the\nmemory region related to the handle.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_close cubrid_close([resource $conn_identifier]) [bool]\nClose CUBRID connection. The cubrid_close() function ends the transaction\ncurrently on process, closes the connection handle and disconnects from\nserver. If there exists any request handle not closed yet at this point,\nit will be closed.\n@param conn_identifier The CUBRID connection identifier. If the connection\nidentifier is not specified, the last connection opened by cubrid_connect()\nis assumed.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_connect() - Open a connection to a CUBRID Server\n
cubrid_col_get cubrid_col_get(resource $conn_identifier, string $oid, string\n$attr_name) [array]\nGet contents of collection type column using OID. The cubrid_col_get()\nfunction is used to get contents of the elements of the collection type\n(set, multiset, sequence) attribute you requested as an array.\n@param conn_identifier Connection identifier.\n@param oid OID of the instance that you want to read.\n@param attr_name Attribute name that you want to read from the instance.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_col_size cubrid_col_size(resource $conn_identifier, string $oid,\nstring $attr_name) [int]\nGet the number of elements in collection type column using OID. The\ncubrid_col_size() function is used to get the number of elements in a\ncollection type (set, multiset, sequence) attribute.\n@param conn_identifier Connection identifier.\n@param oid OID the instance that you want to work with.\n@param attr_name Name of the attribute that you want to work with.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_column_names cubrid_column_names(resource $req_identifier) [array]\nGet the column names in result. The cubrid_column_names() function is used\nto get the column names of the query result by using `req_identifier`.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_prepare() - Prepare an SQL statement for execution\n@see cubrid_execute() - Execute a prepared SQL statement\n@see cubrid_column_types() - Get column types in result\n
cubrid_column_types cubrid_column_types				(resource\n$req_identifier) [array]\nGet column types in result. The cubrid_column_types() function gets column\ntypes of query results by using `req_identifier`.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_column_names() - Get the column names in result\n@see cubrid_prepare() - Prepare an SQL statement for execution\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_commit cubrid_commit(resource $conn_identifier) [bool]\nCommit a transaction. The cubrid_commit() function is used to execute commit on\nthe transaction pointed by `conn_identifier`, currently on progress. Connection\nto the server is closed after the cubrid_commit() function is called; the\nconnection handle is still valid, however. In CUBRID PHP, an auto-commit mode\nis disabled by default for transaction management, and it can&#039;t be enabled\nin current version CUBRID PHP. It can be set in next version. And auto commit\nmodes can be applied only for SELECT statements by setting broker parameters.\n@param conn_identifier Connection identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_rollback() - Roll back a transaction\n
cubrid_connect_with_url cubrid_connect_with_url(string $conn_url [, string\n$userid [, string $passwd]]) [resource]\nEstablish the environment for connecting to CUBRID server. The\ncubrid_connect_with_url() function is used to establish the environment\nfor connecting to your server by using connection information passed\nwith an url string argument. If the HA feature is enabled in CUBRID,\nyou must specify the connection information of the standby server,\nwhich is used for failover when failure occurs, in the url string\nargument of this function. If the user name and password is not given,\nthen the &quot;PUBLIC&quot; connection will be made by default. &lt;url> ::=\ncci:CUBRID:&lt;host>:&lt;db_name>:&lt;db_user>:&lt;db_password>:[?&lt;properties>]\n&lt;properties> ::= &lt;property> [&amp;&lt;propertygt;]\n&lt;alternative_hosts> ::= &lt;standby_broker1_host>:&lt;port>\n[,&lt;standby_broker2_host>:&lt;port>]				 &lt;host> :=\nHOSTNAME | IP_ADDR				   &lt;time> := SECOND	host\n: A host name or IP address of the master database db_name : A name of the\ndatabase db_user : A name of the database user db_password : A database user\npassword alhosts: Specifies the broker information of the standby server, which\nis used for failover when it is impossible to connect to the active server. You\ncan specify multiple brokers for failover, and the connection to the brokers\nis attempted in the order listed in alhosts rctime : An interval between the\nattempts to connect to the active broker in which failure occurred. After\na failure occurs, the system connects to the broker specified by althosts\n(failover), terminates the transaction, and then attempts to connect to the\nactive broker of the master database at every rctime. The default value is\n600 seconds.\n@param conn_url A character string that contains server connection information.\n@param userid User name for the database.\n@param passwd User password.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_connect() - Open a connection to a CUBRID Server\n@see cubrid_disconnect() - Close a database connection\n
cubrid_connect cubrid_connect(string $host, int $port, string $dbname [,\nstring $userid [, string $passwd]]) [resource]\nOpen a connection to a CUBRID Server. The cubrid_connect() function is used\nto establish the environment for connecting to your server by using your\nserver address, port number, database name, user name, and password. If the\nuser name and password is not given, then the &quot;PUBLIC&quot; connection\nwill be made by default.\n@param host Host name or IP address of CUBRID CAS server.\n@param port		 Port number of CUBRID CAS server (BROKER_PORT\nconfigured in $CUBRID/conf/cubrid_broker.conf).\n@param dbname Name of database.\n@param userid User name for the database.\n@param passwd User password.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_connect_with_url() - Establish the environment for connecting\nto CUBRID server\n@see cubrid_disconnect() - Close a database connection\n
cubrid_current_oid cubrid_current_oid(resource $req_identifier) [string]\nGet OID of the current cursor location. The cubrid_current_oid() function is\nused to get the oid of the current cursor location from the query result. To\nuse cubrid_current_oid(), the query executed must be a updatable query,\nand the CUBRID_INCLUDE_OID option must be included during the query execution.\n@param req_identifier Request identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_data_seek cubrid_data_seek(resource $req_identifier, int $row_number)\n[int]\nMove the internal row pointer of the CUBRID result. This function performs\nthe moving of the internal row pointer of the CUBRID result (associated with\nthe specified result identifier) to point to a specific row number. There\nare functions, such as cubrid_fetch_assoc(), which use the current stored\nvalue of `row number`.\n@param req_identifier This is the request identifier.\n@param row_number This is the desired row number of the new result pointer.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_db_name cubrid_db_name(array $result, int $index) [string]\nGet db name from results of cubrid_list_dbs. Retrieve the database name from\na call to cubrid_list_dbs().\n@param result The result pointer from a call to cubrid_list_dbs().\n@param index The index into the result set.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_list_dbs() - Return an array with the list of all existing\nCUBRID databases\n
cubrid_disconnect cubrid_disconnect(resource $conn_identifier) [bool]\nClose a database connection. The cubrid_disconnect() function closes the\nconnection handle and disconnects from server. If there exists any request\nhandle not closed yet at this point, it will be closed.\n@param conn_identifier Connection identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_connect() - Open a connection to a CUBRID Server\n
cubrid_drop cubrid_drop(resource $conn_identifier, string $oid) [bool]\nDelete an instance using OID. The cubrid_drop() function is used to delete\nan instance from database by using `oid`.\n@param conn_identifier Connection identifier.\n@param oid Oid of the instance that you want to delete.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_is_instance() - Check whether the instance pointed by OID exists\n
cubrid_errno cubrid_errno([resource $conn_identifier]) [int]\nReturn the numerical value of the error message from previous CUBRID\noperation. Returns the error number from the last CUBRID function. The\ncubrid_errno() function is used to get the error code of the error that\noccurred during the API execution. Usually, it gets the error code when API\nreturns false as its return value.\n@param conn_identifier The CUBRID connection identifier. If the connection\nidentifier is not specified, the last connection opened by cubrid_connect()\nis assumed.\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_error() - Get the error message\n@see cubrid_error_code() - Get error code for the most recent function call\n@see cubrid_error_msg() - Get last error message for the most recent\nfunction call\n
cubrid_error_code_facility cubrid_error_code_facility(void) [int]\nGet the facility code of error. The cubrid_error_code_facility() function\nis used to get the facility code (level in which the error occurred) from\nthe error code of the error that occurred during the API execution. Usually,\nyou can get the error code when API returns false as its return value.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_error_code() - Get error code for the most recent function call\n@see cubrid_error_msg() - Get last error message for the most recent\nfunction call\n
cubrid_error_code cubrid_error_code(void) [int]\nGet error code for the most recent function call. The cubrid_error_code()\nfunction is used to get the error code of the error that occurred during\nthe API execution. Usually, it gets the error code when API returns false\nas its return value.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_error_code_facility() - Get the facility code of error\n@see cubrid_error_msg() - Get last error message for the most recent\nfunction call\n
cubrid_error_msg cubrid_error_msg(void) [string]\nGet last error message for the most recent function call. The\ncubrid_error_msg() function is used to get the error message that occurred\nduring the use of CUBRID API. Usually, it gets error message when API returns\nfalse as its return value.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_error_code() - Get error code for the most recent function call\n@see cubrid_error_code_facility() - Get the facility code of error\n
cubrid_error cubrid_error([resource $connection]) [string]\nGet the error message. The cubrid_error() function is used to get the error\nmessage that occurred during the use of CUBRID API. Usually, it gets error\nmessage when API returns false as its return value.\n@param connection\n@return (PECL CUBRID >= 8.3.1)\n@see cubrid_errno() - Return the numerical value of the error message from\nprevious CUBRID operation\n@see cubrid_error_code() - Get error code for the most recent function call\n@see cubrid_error_msg() - Get last error message for the most recent\nfunction call\n
cubrid_execute cubrid_execute(resource $conn_identifier, string $SQL [,\nint $option]) [resource]\nExecute a prepared SQL statement. The cubrid_execute() function is\nused to execute the given SQL sentence. It executes the query by using\n`conn_identifier` and SQL, and then returns the request identifier created. It\nis used for simple execution of query, where the parameter binding is not\nneeded. In addition, the cubrid_execute() function is used to execute the\nprepared statement by means of cubrid_prepare() and cubrid_bind(). At this\ntime, you need to specify arguments of `request_identifier` and `option`. You\ncan use the `option` argument to tell whether to receive oid of the row after\nthe execution, and, whether to execute the query in asynchronous mode. You\ncan use it by setting the CUBRID_INCLUDE_OID and CUBRID_ASYNC using bitwise\nor operator. If the both variables are not explicitly given, they are not\nselected by default. If the first argument is `request_identifier` to execute\nthe cubrid_prepare() function, you can specify an option, CUBRID_ASYNC only.\n@param conn_identifier Connection identifier.\n@param SQL SQL to be executed.\n@param option Query execution option CUBRID_INCLUDE_OID, CUBRID_ASYNC.\n@param request_identifier cubrid_prepare() identifier.\n@return (PECL CUBRID >= 8.3.0)\n@see cubrid_close_request() - Close the request handle\n@see cubrid_commit() - Commit a transaction\n@see cubrid_rollback() - Roll back a transaction\n@see cubrid_prepare() - Prepare an SQL statement for execution\n@see cubrid_bind() - Bind variables to a prepared statement as parameters\n
cubrid_fetch_array cubrid_fetch_array(resource $result [, int\n$type=CUBRID_BOTH]) [array]\nFetch a result row as an associative array, a numeric array, or both. The\ncubrid_fetch_array() function is used to get a single row from the query\nresult and returns an array. The cursor automatically moves to the next row\nafter getting the result.\n@param result `Result` comes from a call to cubrid_execute()\n@param type Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\nCUBRID_BOTH.\n@return (PECL CUBRID >=8.3.0)\n@see cubrid_execute() - Execute a prepared SQL statement\n
cubrid_fetch_assoc cubrid_fetch_assoc(resource $result) [array]\nReturn the associative array that corresponds to the fetched row. This\nfunction returns the associative array, that corresponds to the fetched row,\nand then moves the internal data pointer ahead, or returns FALSE when the\nend is reached.\n@param result `result` comes from a call to cubrid_execute()\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_fetch_field cubrid_fetch_field(resource $result [, int $field_offset=0])\n[object]\nGet column information from a result and return as an object. This function\nreturns an object with certain properties of the specific column. The\nproperties of the object are:  `name` column name name of the table that the\ncolumn belongs to default value of the column maximum length of the column\n1 if the column cannot be NULL 1 if the column is an unique key 1 if the\ncolumn is a non-unique key 1 if the column is numeric the type of the column\n@param result `result` comes from a call to cubrid_execute()\n@param field_offset The numerical field offset. If the field offset is not\nspecified, the next field (that was not yet retrieved by this function)\nis retrieved. The `field_offset` starts at 0.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_fetch_lengths cubrid_fetch_lengths(resource $result) [array]\nReturn an array with the lengths of the values of each field from the current\nrow. This function returns an numeric array with the lengths of the values\nof each field from the current row of the result set or it returns FALSE on\nfailure. Note: If field data type is BLOB/CLOB, you should get its length\nby using cubrid_lob_size().\n@param result `result` comes from a call to cubrid_execute()\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_fetch_object cubrid_fetch_object(resource $result [, string $class_name\n[, array $params]]) [object]\nFetche the next row and returns it as an object. This function returns an\nobject with the column names of the result set as properties. The values of\nthese properties are extracted from the current row of the result.\n@param result `result` comes from a call to cubrid_execute()\n@param class_name The name of the class to instantiate. If not specified,\na stdClass (stdClass is PHP&#039;s generic empty class that&#039;s used when\ncasting other types to objects) object is returned.\n@param params An optional array of parameters to pass to the constructor for\n`class_name` objects.\n@return (PECL CUBRID >= 8.3.0)\n
cubrid_fetch_row cubrid_fetch_row(resource $result) [array]\nReturn a numerical array with the values of the current row. This function\nreturns a numerical array with the values of the current row from the result\nset, starting from 0, and moves the internal data pointer ahead.\n@param result `result` comes from a call to cubrid_execute()\n@return (PECL CUBRID >= 8.3.0)\n
cairo_font_options_equal cairo_font_options_equal(CairoFontOptions $options,\nCairoFontOptions $other) [bool]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param other Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_get_antialias\ncairo_font_options_get_antialias(CairoFontOptions $options) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_get_hint_metrics\ncairo_font_options_get_hint_metrics(CairoFontOptions $options) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_get_hint_style\ncairo_font_options_get_hint_style(CairoFontOptions $options) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_get_subpixel_order\ncairo_font_options_get_subpixel_order(CairoFontOptions $options) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_hash cairo_font_options_hash(CairoFontOptions $options)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_merge cairo_font_options_merge(CairoFontOptions $options,\nCairoFontOptions $other) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param other Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_set_antialias\ncairo_font_options_set_antialias(CairoFontOptions $options, int $antialias)\n[void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param antialias Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_set_hint_metrics\ncairo_font_options_set_hint_metrics(CairoFontOptions $options, int\n$hint_metrics) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param hint_metrics Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_set_hint_style\ncairo_font_options_set_hint_style(CairoFontOptions $options, int $hint_style)\n[void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param hint_style Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_set_subpixel_order\ncairo_font_options_set_subpixel_order(CairoFontOptions $options, int\n$subpixel_order) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@param subpixel_order Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_status cairo_font_options_status(CairoFontOptions $options)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param options Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_format_stride_for_width cairo_format_stride_for_width(int $format,\nint $width) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param format Description...\n@param width Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_create_for_data cairo_image_surface_create_for_data(string\n$data, int $format, int $width, int $height [, int $stride=-1])\n[CairoImageSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param data Description...\n@param format Description...\n@param width Description...\n@param height Description...\n@param stride Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_create_from_png cairo_image_surface_create_from_png(string\n$file) [CairoImageSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param file Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_create cairo_image_surface_create(int $format, int $width,\nint $height) [CairoImageSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param format Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_get_data cairo_image_surface_get_data(CairoImageSurface\n$surface) [string]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_get_format cairo_image_surface_get_format(CairoImageSurface\n$surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_get_height cairo_image_surface_get_height(CairoImageSurface\n$surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_get_stride cairo_image_surface_get_stride(CairoImageSurface\n$surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_image_surface_get_width cairo_image_surface_get_width(CairoImageSurface\n$surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_create_scale cairo_matrix_create_scale\nAlias of CairoMatrix::initScale.\n
cairo_matrix_create_translate cairo_matrix_create_translate\nAlias of CairoMatrix::initTranslate.\n
cairo_matrix_invert cairo_matrix_invert(CairoMatrix $matrix) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_multiply cairo_matrix_multiply(CairoMatrix $matrix1, CairoMatrix\n$matrix2) [CairoMatrix]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix1 Description...\n@param matrix2 Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_rotate cairo_matrix_rotate(CairoMatrix $matrix, float $radians)\n[void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix Description...\n@param radians Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_transform_distance cairo_matrix_transform_distance(CairoMatrix\n$matrix, float $dx, float $dy) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix Description...\n@param dx Description...\n@param dy Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_transform_point cairo_matrix_transform_point(CairoMatrix $matrix,\nfloat $dx, float $dy) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix Description...\n@param dx Description...\n@param dy Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_matrix_translate cairo_matrix_translate(CairoMatrix $matrix, float $tx,\nfloat $ty) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param matrix Description...\n@param tx Description...\n@param ty Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_add_color_stop_rgb\ncairo_pattern_add_color_stop_rgb(CairoGradientPattern $pattern, float $offset,\nfloat $red, float $green, float $blue) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param offset Description...\n@param red Description...\n@param green Description...\n@param blue Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_add_color_stop_rgba\ncairo_pattern_add_color_stop_rgba(CairoGradientPattern $pattern, float $offset,\nfloat $red, float $green, float $blue, float $alpha) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param offset Description...\n@param red Description...\n@param green Description...\n@param blue Description...\n@param alpha Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_create_for_surface cairo_pattern_create_for_surface(CairoSurface\n$surface) [CairoPattern]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_create_linear cairo_pattern_create_linear(float $x0, float $y0,\nfloat $x1, float $y1) [CairoPattern]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param x0 Description...\n@param y0 Description...\n@param x1 Description...\n@param y1 Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_create_radial cairo_pattern_create_radial(float $x0, float $y0,\nfloat $r0, float $x1, float $y1, float $r1) [CairoPattern]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param x0 Description...\n@param y0 Description...\n@param r0 Description...\n@param x1 Description...\n@param y1 Description...\n@param r1 Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_create_rgb cairo_pattern_create_rgb(float $red, float $green,\nfloat $blue) [CairoPattern]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param red Description...\n@param green Description...\n@param blue Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_create_rgba cairo_pattern_create_rgba(float $red, float $green,\nfloat $blue, float $alpha) [CairoPattern]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param red Description...\n@param green Description...\n@param blue Description...\n@param alpha Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_color_stop_count\ncairo_pattern_get_color_stop_count(CairoGradientPattern $pattern) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_color_stop_rgba\ncairo_pattern_get_color_stop_rgba(CairoGradientPattern $pattern, int $index)\n[array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param index Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_extend cairo_pattern_get_extend(string $pattern) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_filter cairo_pattern_get_filter(CairoSurfacePattern $pattern)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_linear_points\ncairo_pattern_get_linear_points(CairoLinearGradient $pattern) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_matrix cairo_pattern_get_matrix(CairoPattern $pattern)\n[CairoMatrix]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_radial_circles\ncairo_pattern_get_radial_circles(CairoRadialGradient $pattern) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_rgba cairo_pattern_get_rgba(CairoSolidPattern $pattern)\n[array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_surface cairo_pattern_get_surface(CairoSurfacePattern\n$pattern) [CairoSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_get_type cairo_pattern_get_type(CairoPattern $pattern) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_set_extend cairo_pattern_set_extend(string $pattern, string\n$extend) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param extend Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_set_filter cairo_pattern_set_filter(CairoSurfacePattern $pattern,\nint $filter) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param filter Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_set_matrix cairo_pattern_set_matrix(CairoPattern $pattern,\nCairoMatrix $matrix) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@param matrix Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pattern_status cairo_pattern_status(CairoPattern $pattern) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param pattern Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pdf_surface_create cairo_pdf_surface_create(string $file, float $width,\nfloat $height) [CairoPdfSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param file Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_pdf_surface_set_size cairo_pdf_surface_set_size(CairoPdfSurface $surface,\nfloat $width, float $height) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_get_levels cairo_ps_get_levels(void) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_level_to_string cairo_ps_level_to_string(int $level) [string]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param level Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_create cairo_ps_surface_create(string $file, float $width,\nfloat $height) [CairoPsSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param file Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_dsc_begin_page_setup\ncairo_ps_surface_dsc_begin_page_setup(CairoPsSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_dsc_begin_setup\ncairo_ps_surface_dsc_begin_setup(CairoPsSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_dsc_comment cairo_ps_surface_dsc_comment(CairoPsSurface\n$surface, string $comment) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param comment Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_get_eps cairo_ps_surface_get_eps(CairoPsSurface $surface)\n[bool]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_restrict_to_level\ncairo_ps_surface_restrict_to_level(CairoPsSurface $surface, int $level) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param level Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_set_eps cairo_ps_surface_set_eps(CairoPsSurface $surface,\nbool $level) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param level Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_ps_surface_set_size cairo_ps_surface_set_size(CairoPsSurface $surface,\nfloat $width, float $height) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_create cairo_scaled_font_create(CairoFontFace $fontface,\nCairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions)\n[CairoScaledFont]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param fontface Description...\n@param matrix Description...\n@param ctm Description...\n@param fontoptions Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_extents cairo_scaled_font_extents(CairoScaledFont\n$scaledfont) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_ctm cairo_scaled_font_get_ctm(CairoScaledFont\n$scaledfont) [CairoMatrix]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_font_face cairo_scaled_font_get_font_face(CairoScaledFont\n$scaledfont) [CairoFontFace]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_font_matrix\ncairo_scaled_font_get_font_matrix(CairoScaledFont $scaledfont)\n[CairoFontOptions]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_font_options\ncairo_scaled_font_get_font_options(CairoScaledFont $scaledfont)\n[CairoFontOptions]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_scale_matrix\ncairo_scaled_font_get_scale_matrix(CairoScaledFont $scaledfont) [CairoMatrix]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_get_type cairo_scaled_font_get_type(CairoScaledFont\n$scaledfont) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_glyph_extents cairo_scaled_font_glyph_extents(CairoScaledFont\n$scaledfont, array $glyphs) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@param glyphs Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_status cairo_scaled_font_status(CairoScaledFont $scaledfont)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_scaled_font_text_extents cairo_scaled_font_text_extents(CairoScaledFont\n$scaledfont, string $text) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param scaledfont Description...\n@param text Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_copy_page cairo_surface_copy_page(CairoSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_create_similar cairo_surface_create_similar(CairoSurface\n$surface, int $content, float $width, float $height) [CairoSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param content Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_finish cairo_surface_finish(CairoSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_flush cairo_surface_flush(CairoSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_get_content cairo_surface_get_content(CairoSurface $surface)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_get_device_offset cairo_surface_get_device_offset(CairoSurface\n$surface) [array]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_get_font_options cairo_surface_get_font_options(CairoSurface\n$surface) [CairoFontOptions]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_get_type cairo_surface_get_type(CairoSurface $surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_mark_dirty_rectangle\ncairo_surface_mark_dirty_rectangle(CairoSurface $surface, float $x, float $y,\nfloat $width, float $height) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param x Description...\n@param y Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_mark_dirty cairo_surface_mark_dirty(CairoSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_set_device_offset cairo_surface_set_device_offset(CairoSurface\n$surface, float $x, float $y) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param x Description...\n@param y Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_set_fallback_resolution\ncairo_surface_set_fallback_resolution(CairoSurface $surface, float $x,\nfloat $y) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param x Description...\n@param y Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_show_page cairo_surface_show_page(CairoSurface $surface) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_status cairo_surface_status(CairoSurface $surface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_surface_write_to_png cairo_surface_write_to_png(CairoSurface $surface,\nresource $stream) [void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param stream Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_svg_surface_create cairo_svg_surface_create(string $file, float $width,\nfloat $height) [CairoSvgSurface]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param file Description...\n@param width Description...\n@param height Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_svg_surface_restrict_to_version\ncairo_svg_surface_restrict_to_version(CairoSvgSurface $surface, int $version)\n[void]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param surface Description...\n@param version Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_svg_version_to_string cairo_svg_version_to_string(int $version) [string]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param version Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cal_days_in_month cal_days_in_month(int $calendar, int $month, int $year) [int]\nReturn the number of days in a month for a given year and calendar. This\nfunction will return the number of days in the `month` of `year` for the\nspecified `calendar`.\n@param calendar Calendar to use for calculation\n@param month Month in the selected calendar\n@param year Year in the selected calendar\n@return (PHP 4 >= 4.1.0, PHP 5)\n
cal_from_jd cal_from_jd(int $jd, int $calendar) [array]\nConverts from Julian Day Count to a supported calendar. cal_from_jd() converts\nthe Julian day given in `jd` into a date of the specified `calendar`. Supported\n`calendar` values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.\n@param jd Julian day as integer\n@param calendar Calendar to convert to\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see cal_to_jd() - Converts from a supported calendar to Julian Day Count\n@see jdtofrench() - Converts a Julian Day Count to the French Republican\nCalendar\n@see jdtogregorian() - Converts Julian Day Count to Gregorian date\n@see jdtojewish() - Converts a Julian day count to a Jewish calendar date\n@see jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date\n@see jdtounix() - Convert Julian Day to Unix timestamp\n
cal_info cal_info([int $calendar=-1]) [array]\nReturns information about a particular calendar. cal_info() returns information\non the specified `calendar`. Calendar information is returned as an array\ncontaining the elements `calname`, `calsymbol`, `month`, `abbrevmonth`\nand `maxdaysinmonth`. The names of the different calendars which can be\nused as `calendar` are as follows: 0 or CAL_GREGORIAN - Gregorian Calendar\n1 or CAL_JULIAN - Julian Calendar 2 or CAL_JEWISH - Jewish Calendar 3 or\nCAL_FRENCH - French Revolutionary Calendar  If no `calendar` is specified\ninformation on all supported calendars is returned as an array.\n@param calendar Calendar to return information for. If no calendar is\nspecified information about all calendars is returned.\n@return (PHP 4 >= 4.1.0, PHP 5)\n
cal_to_jd cal_to_jd(int $calendar, int $month, int $day, int $year) [int]\nConverts from a supported calendar to Julian Day Count. cal_to_jd() calculates\nthe Julian day count for a date in the specified `calendar`. Supported\n`calendar`s are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.\n@param calendar Calendar to convert from, one of CAL_GREGORIAN, CAL_JULIAN,\nCAL_JEWISH or CAL_FRENCH.\n@param month The month as a number, the valid range depends on the `calendar`\n@param day The day as a number, the valid range depends on the `calendar`\n@param year The year as a number, the valid range depends on the `calendar`\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see cal_from_jd() - Converts from Julian Day Count to a supported calendar\n@see frenchtojd() - Converts a date from the French Republican Calendar to\na Julian Day Count\n@see gregoriantojd() - Converts a Gregorian date to Julian Day Count\n@see jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count\n@see juliantojd() - Converts a Julian Calendar date to Julian Day Count\n@see unixtojd() - Convert Unix timestamp to Julian Day\n
calcul_hmac calcul_hmac(string $clent, string $siretcode, string $price,\nstring $reference, string $validity, string $taxation, string $devise,\nstring $language) [string]\nObtain a hmac key (needs 8 arguments).\n@return (PECL spplus >= 1.0.0)\n
calculhmac calculhmac(string $clent, string $data) [string]\nObtain a hmac key (needs 2 arguments).\n@return (PECL spplus >= 1.0.0)\n
array_diff_ukey array_diff_ukey(array $array1, array $array2 [, array $\n...], callback $key_compare_func) [array]\nComputes the difference of arrays using a callback function on the keys for\ncomparison. Compares the keys from `array1` against the keys from `array2`\nand returns the difference. This function is like array_diff() except the\ncomparison is done on the keys instead of the values. Unlike array_diff_key()\nan user supplied callback function is used for the indices comparison,\nnot internal function.\n@param array1 The array to compare from\n@param array2 An array to compare against\n@param ... More arrays to compare against\n@param key_compare_func callback function to use. The callback function must\nreturn an integer less than, equal to, or greater than zero if the first\nargument is considered to be respectively less than, equal to, or greater\nthan the second.\n@return (PHP 5 >= 5.1.0)\n@note Note: This function only checks one dimension of a n-dimensional\narray. Of course you can check deeper dimensions by using\n`array_diff_ukey($array1[0], $array2[0], &#039;callback_func&#039;);`.\n@see array_diff() - Computes the difference of arrays\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_diff_key() - Computes the difference of arrays using keys for\ncomparison\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_intersect_key() - Computes the intersection of arrays using keys\nfor comparison\n@see array_intersect_ukey() - Computes the intersection of arrays using a\ncallback function on the keys for comparison\n
array_diff array_diff(array $array1, array $array2 [, array $ ...]) [array]\nComputes the difference of arrays. Compares `array1` against `array2` and\nreturns the difference.\n@param array1 The array to compare from\n@param array2 An array to compare against\n@param ... More arrays to compare against\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: Two elements are considered equal if and only if `(string) $elem1\n=== (string) $elem2`. In words: when the string representation is the same.\n@note Note: This function only checks one dimension of a n-dimensional\narray. Of course you can check deeper dimensions by using\n`array_diff($array1[0], $array2[0]);`.\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n
array_fill_keys array_fill_keys(array $keys, mixed $value) [array]\nFill an array with values, specifying keys. Fills an array with the value\nof the `value` parameter, using the values of the `keys` array as keys.\n@param keys Array of values that will be used as keys. Illegal values for\nkey will be converted to string.\n@param value Value to use for filling\n@return (PHP 5 >= 5.2.0)\n@see array_fill() - Fill an array with values\n@see array_combine() - Creates an array by using one array for keys and\nanother for its values\n
array_fill array_fill(int $start_index, int $num, mixed $value) [array]\nFill an array with values. Fills an array with `num` entries of the value\nof the `value` parameter, keys starting at the `start_index` parameter.\n@param start_index The first index of the returned array. Supports non-negative\nindexes only.\n@param num Number of elements to insert\n@param value Value to use for filling\n@return (PHP 4 >= 4.2.0, PHP 5)\n@see array_fill_keys() - Fill an array with values, specifying keys\n@see str_repeat() - Repeat a string\n@see range() - Create an array containing a range of elements\n
array_filter array_filter(array $input [, callback $callback]) [array]\nFilters elements of an array using a callback function. Iterates over each\nvalue in the `input` array passing them to the `callback` function. If the `\ncallback` function returns true, the current value from `input` is returned\ninto the result array. Array keys are preserved.\n@param input The array to iterate over\n@param callback The callback function to use If no `callback` is supplied, all\nentries of `input` equal to FALSE (see converting to boolean) will be removed.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see array_map() - Applies the callback to the elements of the given arrays\n@see array_reduce() - Iteratively reduce the array to a single value using\na callback function\n@see array_walk() - Apply a user function to every member of an array\n
array_flip array_flip(array $trans) [array]\nExchanges all keys with their associated values in an array. array_flip()\nreturns an array in flip order, i.e. keys from `trans` become values and\nvalues from `trans` become keys. Note that the values of `trans` need to be\nvalid keys, i.e. they need to be either integer or string. A warning will\nbe emitted if a value has the wrong type, and the key/value pair in question\nwill not be flipped. If a value has several occurrences, the latest key will\nbe used as its values, and all others will be lost.\n@param trans An array of key/value pairs to be flipped.\n@return (PHP 4, PHP 5)\n@see array_values() - Return all the values of an array\n@see array_keys() - Return all the keys or a subset of the keys of an array\n@see array_reverse() - Return an array with elements in reverse order\n
array_intersect_assoc array_intersect_assoc(array $array1, array $array2 [,\narray $ ...]) [array]\nComputes the intersection of arrays with additional index check.\n@param array1 The array with master values to check.\n@param array2 An array to compare values against.\n@param array A variable list of arrays to compare.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see array_intersect() - Computes the intersection of arrays\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n
array_intersect_key array_intersect_key(array $array1, array $array2 [,\narray $ ...]) [array]\nComputes the intersection of arrays using keys for\ncomparison. array_intersect_key() returns an array containing all the entries\nof `array1` which have keys that are present in all the arguments.\n@param array1 The array with master keys to check.\n@param array2 An array to compare keys against.\n@param array A variable list of arrays to compare.\n@return (PHP 5 >= 5.1.0)\n@see array_diff() - Computes the difference of arrays\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_diff_key() - Computes the difference of arrays using keys for\ncomparison\n@see array_diff_ukey() - Computes the difference of arrays using a callback\nfunction on the keys for comparison\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_intersect_ukey() - Computes the intersection of arrays using a\ncallback function on the keys for comparison\n
array_intersect_uassoc array_intersect_uassoc(array $array1, array $array2\n[, array $ ...], callback $key_compare_func) [array]\nComputes the intersection of arrays with additional index check, compares\nindexes by a callback function. array_intersect_uassoc() returns an\narray containing all the values of `array1` that are present in all\nthe arguments. Note that the keys are used in the comparison unlike in\narray_intersect(). The index comparison is done by a user supplied callback\nfunction. It must return an integer less than, equal to, or greater than zero\nif the first argument is considered to be respectively less than, equal to,\nor greater than the second.\n@param array1 Initial array for comparison of the arrays.\n@param array2 First array to compare keys against.\n@param array Variable list of array arguments to compare values against.\n@param key_compare_func User supplied callback function to do the comparison.\n@return (PHP 5)\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n@see array_intersect_key() - Computes the intersection of arrays using keys\nfor comparison\n@see array_intersect_ukey() - Computes the intersection of arrays using a\ncallback function on the keys for comparison\n
array_intersect_ukey array_intersect_ukey(array $array1, array $array2 [,\narray $...], callback $key_compare_func) [array]\nComputes the intersection of arrays using a callback function on the keys\nfor comparison. array_intersect_ukey() returns an array containing all the\nvalues of `array1` which have matching keys that are present in all the\narguments. This comparison is done by a user supplied callback function. It\nmust return an integer less than, equal to, or greater than zero if the\nfirst key is considered to be respectively less than, equal to, or greater\nthan the second.\n@param array1 Initial array for comparison of the arrays.\n@param array2 First array to compare keys against.\n@param array Variable list of array arguments to compare keys against.\n@param key_compare_func User supplied callback function to do the comparison.\n@return (PHP 5 >= 5.1.0)\n@see array_diff() - Computes the difference of arrays\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_diff_key() - Computes the difference of arrays using keys for\ncomparison\n@see array_diff_ukey() - Computes the difference of arrays using a callback\nfunction on the keys for comparison\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_intersect_key() - Computes the intersection of arrays using keys\nfor comparison\n
array_intersect array_intersect(array $array1, array $array2 [, array $\n...]) [array]\nComputes the intersection of arrays. array_intersect() returns an\narray containing all the values of `array1` that are present in all the\narguments. Note that keys are preserved.\n@param array1 The array with master values to check.\n@param array2 An array to compare values against.\n@param array A variable list of arrays to compare.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: Two elements are considered equal if and only if `(string) $elem1\n=== (string) $elem2`. In words: when the string representation is the same.\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n
array_key_exists array_key_exists(mixed $key, array $search) [bool]\nChecks if the given key or index exists in the array. array_key_exists()\nreturns TRUE if the given `key` is set in the array. `key` can be any value\npossible for an array index.\n@param key Value to check.\n@param search An array with keys to check.\n@return (PHP 4 >= 4.0.7, PHP 5)\n@note Note: For backward compatibility, the following deprecated alias may\nbe used: key_exists()\n@see isset() - Determine if a variable is set and is not NULL\n@see array_keys() - Return all the keys or a subset of the keys of an array\n@see in_array() - Checks if a value exists in an array\n@see property_exists() - Checks if the object or class has a property\n
array_keys array_keys(array $input [, mixed $search_value [, bool\n$strict=false]]) [array]\nReturn all the keys or a subset of the keys of an array. array_keys()\nreturns the keys, numeric and string, from the `input` array. If the\noptional `search_value` is specified, then only the keys for that value are\nreturned. Otherwise, all the keys from the `input` are returned.\n@param input An array containing keys to return.\n@param search_value If specified, then only keys containing these values\nare returned.\n@param strict Determines if strict comparison (===) should be used during\nthe search.\n@return (PHP 4, PHP 5)\n@see array_values() - Return all the values of an array\n@see array_key_exists() - Checks if the given key or index exists in the array\n@see array_search() - Searches the array for a given value and returns the\ncorresponding key if successful\n
array_map array_map(callback $callback, array $arr1 [, array $...]) [array]\nApplies the callback to the elements of the given arrays. array_map() returns\nan array containing all the elements of `arr1` after applying the `callback`\nfunction to each one. The number of parameters that the `callback` function\naccepts should match the number of arrays passed to the array_map()\n@param callback Callback function to run for each element in each array.\n@param arr1 An array to run through the `callback` function.\n@param array Variable list of array arguments to run through the `callback`\nfunction.\n@return (PHP 4 >= 4.0.6, PHP 5)\n@see array_filter() - Filters elements of an array using a callback function\n@see array_reduce() - Iteratively reduce the array to a single value using\na callback function\n@see array_walk() - Apply a user function to every member of an array\n@see create_function() - Create an anonymous (lambda-style) function\n
array_merge_recursive array_merge_recursive(array $array1 [, array\n$...]) [array]\nMerge two or more arrays recursively. array_merge_recursive() merges the\nelements of one or more arrays together so that the values of one are appended\nto the end of the previous one. It returns the resulting array. If the input\narrays have the same string keys, then the values for these keys are merged\ntogether into an array, and this is done recursively, so that if one of the\nvalues is an array itself, the function will merge it with a corresponding\nentry in another array too. If, however, the arrays have the same numeric key,\nthe later value will not overwrite the original value, but will be appended.\n@param array1 Initial array to merge.\n@param ... Variable list of arrays to recursively merge.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@see array_merge() - Merge one or more arrays\n
array_merge array_merge(array $array1 [, array $array2 [, array $...]]) [array]\nMerge one or more arrays. Merges the elements of one or more arrays together so\nthat the values of one are appended to the end of the previous one. It returns\nthe resulting array. If the input arrays have the same string keys, then the\nlater value for that key will overwrite the previous one. If, however, the\narrays contain numeric keys, the later value will not overwrite the original\nvalue, but will be appended. Values in the input array with numeric keys will\nbe renumbered with incrementing keys starting from zero in the result array.\n@param array1 Initial array to merge.\n@param ... Variable list of arrays to merge.\n@return (PHP 4, PHP 5)\n@see array_merge_recursive() - Merge two or more arrays recursively\n@see array_combine() - Creates an array by using one array for keys and\nanother for its values\n@see array operators\n
array_multisort array_multisort(array &$arr [, mixed $arg=SORT_ASC [, mixed\n$arg=SORT_REGULAR [, mixed $...]]]) [bool]\nSort multiple or multi-dimensional arrays. array_multisort() can be used\nto sort several arrays at once, or a multi-dimensional array by one or more\ndimensions. Associative (string) keys will be maintained, but numeric keys\nwill be re-indexed.\n@param arr An array being sorted.\n@param arg Optionally another array, or sort options for the previous array\nargument: SORT_ASC, SORT_DESC, SORT_REGULAR, SORT_NUMERIC, SORT_STRING.\n@param ... Additional `arg`&#039;s.\n@return (PHP 4, PHP 5)\n@see usort() - Sort an array by values using a user-defined comparison function\n@see The comparison of array sorting functions\n
array_pad array_pad(array $input, int $pad_size, mixed $pad_value) [array]\nPad array to the specified length with a value. array_pad() returns a copy of\nthe `input` padded to size specified by `pad_size` with value `pad_value`. If\n`pad_size` is positive then the array is padded on the right, if it&#039;s\nnegative then on the left. If the absolute value of `pad_size` is less than\nor equal to the length of the `input` then no padding takes place. It is\npossible to add most 1048576 elements at a time.\n@param input Initial array of values to pad.\n@param pad_size New size of the array.\n@param pad_value Value to pad if `input` is less than `pad_size`.\n@return (PHP 4, PHP 5)\n@see array_fill() - Fill an array with values\n@see range() - Create an array containing a range of elements\n
array_pop array_pop(array &$array) [mixed]\nPop the element off the end of array. array_pop() pops and returns the last\nvalue of the `array`, shortening the `array` by one element. If `array` is\nempty (or is not an array), NULL will be returned. Will additionally produce\na Warning when called on a non-array. Note: This function will reset()\nthe array pointer after use.\n@param array The array to get the value from.\n@return (PHP 4, PHP 5)\n@see array_push() - Push one or more elements onto the end of array\n@see array_shift() - Shift an element off the beginning of array\n@see array_unshift() - Prepend one or more elements to the beginning of\nan array\n
array_product array_product(array $array) [number]\nCalculate the product of values in an array. array_product() returns the\nproduct of values in an array.\n@param array The array.\n@return (PHP 5 >= 5.1.0)\n
array_push array_push(array &$array, mixed $var [, mixed $...]) [int]\nPush one or more elements onto the end of array.\n@param array The input array.\n@param var The pushed value.\n@return (PHP 4, PHP 5)\n@see array_pop() - Pop the element off the end of array\n@see array_shift() - Shift an element off the beginning of array\n@see array_unshift() - Prepend one or more elements to the beginning of\nan array\n
array_rand array_rand(array $input [, int $num_req=1]) [mixed]\nPick one or more random entries out of an array. Picks one or more random\nentries out of an array, and returns the key (or keys) of the random entries.\n@param input The input array.\n@param num_req Specifies how many entries you want to pick. Trying to pick more\nelements than there are in the array will result in an E_WARNING level error.\n@return (PHP 4, PHP 5)\n@see shuffle() - Shuffle an array\n
array_reduce array_reduce(array $input, callback $function [, mixed\n$initial=NULL]) [mixed]\nIteratively reduce the array to a single value using a callback\nfunction. array_reduce() applies iteratively the `function` function to the\nelements of the array `input`, so as to reduce the array to a single value.\n@param input The input array.\n@param function The callback function.\n@param initial If the optional `initial` is available, it will be used at\nthe beginning of the process, or as a final result in case the array is empty.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see array_filter() - Filters elements of an array using a callback function\n@see array_map() - Applies the callback to the elements of the given arrays\n@see array_unique() - Removes duplicate values from an array\n@see array_count_values() - Counts all the values of an array\n
array_replace_recursive array_replace_recursive(array &$array, array &$array1\n[, array &$array2 [, array &$...]]) [array]\nReplaces elements from passed arrays into the first array\nrecursively. array_replace_recursive() replaces the values of the first\n`array` with the same values from all the following arrays. If a key from\nthe first array exists in the second array, its value will be replaced by\nthe value from the second array. If the key exists in the second array, and\nnot the first, it will be created in the first array. If a key only exists\nin the first array, it will be left as is. If several arrays are passed for\nreplacement, they will be processed in order, the later array overwriting\nthe previous values. array_replace_recursive() is recursive : it will recurse\ninto arrays and apply the same process to the inner value. When the value in\n`array` is scalar, it will be replaced by the value in `array1`, may it be\nscalar or array. When the value in `array` and `array1` are both arrays,\narray_replace_recursive() will replace their respective value recursively.\n@param array The array in which elements are replaced.\n@param array1 The array from which elements will be extracted.\n@return (PHP 5 >= 5.3.0)\n@see array_replace() - Replaces elements from passed arrays into the first\narray\n
array_replace array_replace(array &$array, array &$array1 [, array &$array2\n[, array &$...]]) [array]\nReplaces elements from passed arrays into the first array. array_replace()\nreplaces the values of the first `array` with the same values from all the\nfollowing arrays. If a key from the first array exists in the second array,\nits value will be replaced by the value from the second array. If the key\nexists in the second array, and not the first, it will be created in the\nfirst array. If a key only exists in the first array, it will be left as\nis. If several arrays are passed for replacement, they will be processed in\norder, the later arrays overwriting the previous values. array_replace()\nis not recursive : it will replace values in the first array by whatever\ntype is in the second array.\n@param array The array in which elements are replaced.\n@param array1 The array from which elements will be extracted.\n@return (PHP 5 >= 5.3.0)\n@see array_replace_recursive() - Replaces elements from passed arrays into\nthe first array recursively\n
array_reverse array_reverse(array $array [, bool $preserve_keys=false]) [array]\nReturn an array with elements in reverse order. Takes an input `array`\nand returns a new array with the order of the elements reversed.\n@param array The input array.\n@param preserve_keys If set to TRUE keys are preserved.\n@return (PHP 4, PHP 5)\n@see array_flip() - Exchanges all keys with their associated values in an array\n
array_search array_search(mixed $needle, array $haystack [, bool\n$strict=false]) [mixed]\nSearches the array for a given value and returns the corresponding key if\nsuccessful. Searches `haystack` for `needle`.\n@param needle The searched value. Note: If `needle` is a string, the comparison\nis done in a case-sensitive manner.\n@param haystack The array.\n@param strict If the third parameter `strict` is set to TRUE then\nthe array_search() function will search for identical elements in the\n`haystack`. This means it will also check the types of the `needle` in the\n`haystack`, and objects must be the same instance.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@see array_keys() - Return all the keys or a subset of the keys of an array\n@see array_values() - Return all the values of an array\n@see array_key_exists() - Checks if the given key or index exists in the array\n@see in_array() - Checks if a value exists in an array\n
array_shift array_shift(array &$array) [mixed]\nShift an element off the beginning of array. array_shift() shifts the first\nvalue of the `array` off and returns it, shortening the `array` by one element\nand moving everything down. All numerical array keys will be modified to\nstart counting from zero while literal keys won&#039;t be touched. Note:\nThis function will reset() the array pointer after use.\n@param array The input array.\n@return (PHP 4, PHP 5)\n@see array_unshift() - Prepend one or more elements to the beginning of\nan array\n@see array_push() - Push one or more elements onto the end of array\n@see array_pop() - Pop the element off the end of array\n
array_slice array_slice(array $array, int $offset [, int $length [, bool\n$preserve_keys=false]]) [array]\nExtract a slice of the array. array_slice() returns the sequence of\nelements from the array `array` as specified by the `offset` and `length`\nparameters. Note: This function will reset() the array pointer after use.\n@param array The input array.\n@param offset If `offset` is non-negative, the sequence will start at that\noffset in the `array`. If `offset` is negative, the sequence will start that\nfar from the end of the `array`.\n@param length If `length` is given and is positive, then the sequence will\nhave that many elements in it. If `length` is given and is negative then\nthe sequence will stop that many elements from the end of the array. If it\nis omitted, then the sequence will have everything from `offset` up until\nthe end of the `array`.\n@param preserve_keys Note that array_slice() will reorder and reset the array\nindices by default. You can change this behaviour by setting `preserve_keys`\nto TRUE.\n@return (PHP 4, PHP 5)\n@see array_splice() - Remove a portion of the array and replace it with\nsomething else\n@see unset() - Unset a given variable\n
array_splice array_splice(array &$input, int $offset [, int $length=0 [,\nmixed $replacement]]) [array]\nRemove a portion of the array and replace it with something else. Removes\nthe elements designated by `offset` and `length` from the `input` array, and\nreplaces them with the elements of the `replacement` array, if supplied. Note\nthat numeric keys in `input` are not preserved. Note: If `replacement` is\nnot an array, it will be typecast to one (i.e. (array) $parameter). This\nmay result in unexpected behavior when using an object or NULL `replacement`.\n@param input The input array.\n@param offset If `offset` is positive then the start of removed portion\nis at that offset from the beginning of the `input` array. If `offset`\nis negative then it starts that far from the end of the `input` array.\n@param length If `length` is omitted, removes everything from `offset` to the\nend of the array. If `length` is specified and is positive, then that many\nelements will be removed. If `length` is specified and is negative then the\nend of the removed portion will be that many elements from the end of the\narray. Tip: to remove everything from `offset` to the end of the array when\n`replacement` is also specified, use `count($input)` for `length`.\n@param replacement If `replacement` array is specified, then the removed\nelements are replaced with elements from this array. If `offset` and `length`\nare such that nothing is removed, then the elements from the `replacement`\narray are inserted in the place specified by the `offset`. Note that keys in\nreplacement array are not preserved. If `replacement` is just one element\nit is not necessary to put `array()` around it, unless the element is an\narray itself, an object or NULL.\n@return (PHP 4, PHP 5)\n@see array_slice() - Extract a slice of the array\n@see unset() - Unset a given variable\n@see array_merge() - Merge one or more arrays\n
array_sum array_sum(array $array) [number]\nCalculate the sum of values in an array. array_sum() returns the sum of\nvalues in an array.\n@param array The input array.\n@return (PHP 4 >= 4.0.4, PHP 5)\n
array_udiff_assoc array_udiff_assoc(array $array1, array $array2 [, array $\n...], callback $data_compare_func) [array]\nComputes the difference of arrays with additional index check, compares data\nby a callback function. Computes the difference of arrays with additional\nindex check, compares data by a callback function. Note: Please note that this\nfunction only checks one dimension of a n-dimensional array. Of course you can\ncheck deeper dimensions by using, for example, `array_udiff_assoc($array1[0],\n$array2[0], &quot;some_comparison_func&quot;);`.\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func The callback comparison function. The user supplied\ncallback function is used for comparison. It must return an integer less\nthan, equal to, or greater than zero if the first argument is considered to\nbe respectively less than, equal to, or greater than the second.\n@return (PHP 5)\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
array_udiff_uassoc array_udiff_uassoc(array $array1, array $array2 [, array $\n...], callback $data_compare_func, callback $key_compare_func) [array]\nComputes the difference of arrays with additional index check, compares data\nand indexes by a callback function. Computes the difference of arrays with\nadditional index check, compares data and indexes by a callback function. Note\nthat the keys are used in the comparison unlike array_diff() and array_udiff().\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func The callback comparison function. The user supplied\ncallback function is used for comparison. It must return an integer less than,\nequal to, or greater than zero if the first argument is considered to be\nrespectively less than, equal to, or greater than the second. The comparison\nof arrays&#039; data is performed by using an user-supplied callback :\n`data_compare_func`. In this aspect the behaviour is opposite to the behaviour\nof array_diff_assoc() which uses internal function for comparison.\n@param key_compare_func The comparison of keys (indices) is done also by\nthe callback function `key_compare_func`. This behaviour is unlike what\narray_udiff_assoc() does, since the latter compares the indices by using an\ninternal function.\n@return (PHP 5)\n@note Note: Please note that this function only checks one dimension\nof a n-dimensional array. Of course you can check deeper dimensions\nby using, for example, `array_udiff_uassoc($array1[0], $array2[0],\n&quot;data_compare_func&quot;, &quot;key_compare_func&quot;);`.\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
array_udiff array_udiff(array $array1, array $array2 [, array $ ...],\ncallback $data_compare_func) [array]\nComputes the difference of arrays by using a callback function for data\ncomparison. Computes the difference of arrays by using a callback function\nfor data comparison. This is unlike array_diff() which uses an internal\nfunction for comparing the data.\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func The callback comparison function. The user supplied\ncallback function is used for comparison. It must return an integer less\nthan, equal to, or greater than zero if the first argument is considered to\nbe respectively less than, equal to, or greater than the second.\n@return (PHP 5)\n@note Note: Please note that this function only checks one dimension of\na n-dimensional array. Of course you can check deeper dimensions by using\n`array_udiff($array1[0], $array2[0], &quot;data_compare_func&quot;);`.\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
array_uintersect_assoc array_uintersect_assoc(array $array1, array $array2\n[, array $ ...], callback $data_compare_func) [array]\nComputes the intersection of arrays with additional index check, compares data\nby a callback function. Computes the intersection of arrays with additional\nindex check, compares data by a callback function. Note that the keys are\nused in the comparison unlike in array_uintersect(). The data is compared\nby using a callback function.\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func For comparison is used the user supplied callback\nfunction. It must return an integer less than, equal to, or greater than zero\nif the first argument is considered to be respectively less than, equal to,\nor greater than the second.\n@return (PHP 5)\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
array_uintersect_uassoc array_uintersect_uassoc(array $array1, array $array2 [,\narray $ ...], callback $data_compare_func, callback $key_compare_func) [array]\nComputes the intersection of arrays with additional index check, compares data\nand indexes by a callback functions. Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions Note\nthat the keys are used in the comparison unlike in array_uintersect(). Both\nthe data and the indexes are compared by using separate callback functions.\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func For comparison is used the user supplied callback\nfunction. It must return an integer less than, equal to, or greater than zero\nif the first argument is considered to be respectively less than, equal to,\nor greater than the second.\n@param key_compare_func Key comparison callback function.\n@return (PHP 5)\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n
array_uintersect array_uintersect(array $array1, array $array2 [, array $\n...], callback $data_compare_func) [array]\nComputes the intersection of arrays, compares data by a callback\nfunction. Computes the intersection of arrays, compares data by a callback\nfunction.\n@param array1 The first array.\n@param array2 The second array.\n@param data_compare_func The callback comparison function. The user supplied\ncallback function is used for comparison. It must return an integer less\nthan, equal to, or greater than zero if the first argument is considered to\nbe respectively less than, equal to, or greater than the second.\n@return (PHP 5)\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
array_unique array_unique(array $array [, int $sort_flags=SORT_STRING]) [array]\nRemoves duplicate values from an array. Takes an input `array`\nand returns a new array without duplicate values. Note that keys are\npreserved. array_unique() sorts the values treated as string at first,\nthen will keep the first key encountered for every value, and ignore all\nfollowing keys. It does not mean that the key of the first related value\nfrom the unsorted `array` will be kept. Note: Two elements are considered\nequal if and only if `(string) $elem1 === (string) $elem2`. In words: when\nthe string representation is the same. The first element will be used.\n@param array The input array.\n@param sort_flags The optional second parameter `sort_flags` may be used\nto modify the sorting behavior using these values: Sorting type flags:\nSORT_REGULAR - compare items normally (don&#039;t change types) SORT_NUMERIC\n- compare items numerically SORT_STRING - compare items as strings\nSORT_LOCALE_STRING - compare items as strings, based on the current locale.\n@return (PHP 4 >= 4.0.1, PHP 5)\n@note Note: Note that array_unique() is not intended to work on multi\ndimensional arrays.\n
array_unshift array_unshift(array &$array, mixed $var [, mixed $...]) [int]\nPrepend one or more elements to the beginning of an array. array_unshift()\nprepends passed elements to the front of the `array`. Note that the list of\nelements is prepended as a whole, so that the prepended elements stay in the\nsame order. All numerical array keys will be modified to start counting from\nzero while literal keys won&#039;t be touched.\n@param array The input array.\n@param var The prepended variable.\n@return (PHP 4, PHP 5)\n@see array_shift() - Shift an element off the beginning of array\n@see array_push() - Push one or more elements onto the end of array\n@see array_pop() - Pop the element off the end of array\n
array_values array_values(array $input) [array]\nReturn all the values of an array. array_values() returns all the values\nfrom the `input` array and indexes numerically the array.\n@param input The array.\n@return (PHP 4, PHP 5)\n@see array_keys() - Return all the keys or a subset of the keys of an array\n
array_walk_recursive array_walk_recursive(array &$input, callback $funcname\n[, mixed $userdata]) [bool]\nApply a user function recursively to every member of an array. Applies the\nuser-defined function `funcname` to each element of the `input` array. This\nfunction will recur into deeper arrays.\n@param input The input array.\n@param funcname Typically, `funcname` takes on two parameters. The `input`\nparameter&#039;s value being the first, and the key/index second. Note: If\n`funcname` needs to be working with the actual values of the array, specify\nthe first parameter of `funcname` as a reference. Then, any changes made to\nthose elements will be made in the original array itself.\n@param userdata If the optional `userdata` parameter is supplied, it will\nbe passed as the third parameter to the callback `funcname`.\n@return (PHP 5)\n@see array_walk() - Apply a user function to every member of an array\n@see information about the callback type\n
array_walk array_walk(array &$array, callback $funcname [, mixed $userdata])\n[bool]\nApply a user function to every member of an array.\n@param array The input array.\n@param funcname Typically, `funcname` takes on two parameters. The `array`\nparameter&#039;s value being the first, and the key/index second. Note:\nIf `funcname` needs to be working with the actual values of the array,\nspecify the first parameter of `funcname` as a reference. Then, any changes\nmade to those elements will be made in the original array itself. Note:\nMany internal functions (for example strtolower()) will throw a warning if\nmore than the expected number of argument are passed in and are not usable\ndirectly as `funcname`. Only the values of the `array` may potentially be\nchanged; its structure cannot be altered, i.e., the programmer cannot add,\nunset or reorder elements. If the callback does not respect this requirement,\nthe behavior of this function is undefined, and unpredictable.\n@param userdata If the optional `userdata` parameter is supplied, it will\nbe passed as the third parameter to the callback `funcname`.\n@return (PHP 4, PHP 5)\n@see array_walk_recursive() - Apply a user function recursively to every\nmember of an array\n@see iterator_apply() - Call a function for every element in an iterator\n@see create_function() - Create an anonymous (lambda-style) function\n@see list() - Assign variables as if they were an array\n@see each() - Return the current key and value pair from an array and advance\nthe array cursor\n@see call_user_func_array() - Call a user function given with an array\nof parameters\n@see array_map() - Applies the callback to the elements of the given arrays\n@see information about the callback type\n@see foreach\n
array array array([mixed $...]) []\nCreate an array. Creates an array. Read the section on the array type for\nmore information on what an array is.\n@param ... Syntax &quot;index => values&quot;, separated by commas, define\nindex and values. index may be of type string or integer. When index is\nomitted, an integer index is automatically generated, starting at 0. If index\nis an integer, next generated index will be the biggest integer index +\n1. Note that when two identical index are defined, the last overwrite the\nfirst. Having a trailing comma after the last defined array entry, while\nunusual, is a valid syntax.\n@return (PHP 4, PHP 5)\n@note Note: array() is a language construct used to represent literal arrays,\nand not a regular function.\n@see array_pad() - Pad array to the specified length with a value\n@see list() - Assign variables as if they were an array\n@see count() - Count all elements in an array, or properties in an object\n@see range() - Create an array containing a range of elements\n@see foreach\n@see The array type\n
arsort arsort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array in reverse order and maintain index association. This function\nsorts an array such that array indices maintain their correlation with the\narray elements they are associated with. This is used mainly when sorting\nassociative arrays where the actual element order is significant.\n@param array The input array.\n@param sort_flags You may modify the behavior of the sort using the optional\nparameter `sort_flags`, for details see sort().\n@return (PHP 4, PHP 5)\n@see asort() - Sort an array and maintain index association\n@see The comparison of array sorting functions\n
asin asin(float $arg) [float]\nArc sine. Returns the arc sine of `arg` in radians. asin() is the complementary\nfunction of sin(), which means that `a==sin(asin(a))` for every value of a\nthat is within asin()&#039;s range.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see sin() - Sine\n@see asinh() - Inverse hyperbolic sine\n@see acos() - Arc cosine\n@see atan() - Arc tangent\n
asinh asinh(float $arg) [float]\nInverse hyperbolic sine. Returns the inverse hyperbolic sine of `arg`,\ni.e. the value whose hyperbolic sine is `arg`.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see sinh() - Hyperbolic sine\n@see asin() - Arc sine\n@see acosh() - Inverse hyperbolic cosine\n@see atanh() - Inverse hyperbolic tangent\n
asort asort(array &$array [, int $sort_flags=SORT_REGULAR]) [bool]\nSort an array and maintain index association. This function sorts an array\nsuch that array indices maintain their correlation with the array elements\nthey are associated with. This is used mainly when sorting associative arrays\nwhere the actual element order is significant.\n@param array The input array.\n@param sort_flags You may modify the behavior of the sort using the optional\nparameter `sort_flags`, for details see sort().\n@return (PHP 4, PHP 5)\n@see arsort() - Sort an array in reverse order and maintain index association\n@see The comparison of array sorting functions\n
assert_options assert_options(int $what [, mixed $value]) [mixed]\nSet/get the various assert flags. Set the various assert() control options\nor just query their current settings.\n@param what Assert Options Option INI Setting Default value Description\nASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING\nassert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL\nassert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL\nassert.quiet_eval 0 disable error_reporting during assertion expression\nevaluation ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed\nassertions\n@param value An optional new value for the option.\n@return (PHP 4, PHP 5)\n@see assert() - Checks if assertion is FALSE\n
assert assert(mixed $assertion) [bool]\nChecks if assertion is FALSE. assert() will check the given `assertion` and\ntake appropriate action if its result is FALSE. If the `assertion` is given\nas a string it will be evaluated as PHP code by assert(). The advantages of\na string `assertion` are less overhead when assertion checking is off and\nmessages containing the `assertion` expression when an assertion fails. This\nmeans that if you pass a boolean condition as `assertion` this condition will\nnot show up as parameter to the assertion function which you may have defined\nwith the assert_options() function, the condition is converted to a string\nbefore calling that handler function, and the boolean FALSE is converted as\nthe empty string. Assertions should be used as a debugging feature only. You\nmay use them for sanity-checks that test for conditions that should always\nbe TRUE and that indicate some programming errors if not or to check for the\npresence of certain features like extension functions or certain system limits\nand features. Assertions should not be used for normal runtime operations like\ninput parameter checks. As a rule of thumb your code should always be able to\nwork correctly if assertion checking is not activated. The behavior of assert()\nmay be configured by assert_options() or by .ini-settings described in that\nfunctions manual page. The assert_options() function and/or ASSERT_CALLBACK\nconfiguration directive allow a callback function to be set to handle failed\nassertions. assert() callbacks are particularly useful for building automated\ntest suites because they allow you to easily capture the code passed to the\nassertion, along with information on where the assertion was made. While this\ninformation can be captured via other methods, using assertions makes it much\nfaster and easier! The callback function should accept three arguments. The\nfirst argument will contain the file the assertion failed in. The second\nargument will contain the line the assertion failed on and the third argument\nwill contain the expression that failed (if any - literal values such as 1\nor &quot;two&quot; will not be passed via this argument)\n@param assertion The assertion.\n@return (PHP 4, PHP 5)\n@see assert_options() - Set/get the various assert flags\n
atan atan(float $arg) [float]\nArc tangent. Returns the arc tangent of `arg` in radians. atan() is the\ncomplementary function of tan(), which means that `a==tan(atan(a))` for\nevery value of a that is within atan()&#039;s range.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see tan() - Tangent\n@see atanh() - Inverse hyperbolic tangent\n@see asin() - Arc sine\n@see acos() - Arc cosine\n
atan2 atan2(float $y, float $x) [float]\nArc tangent of two variables.\n@param y Dividend parameter\n@param x Divisor parameter\n@return (PHP 4, PHP 5)\n@see atan() - Arc tangent\n
atanh atanh(float $arg) [float]\nInverse hyperbolic tangent. Returns the inverse hyperbolic tangent of `arg`,\ni.e. the value whose hyperbolic tangent is `arg`.\n@param arg The argument to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see tanh() - Hyperbolic tangent\n@see atan() - Arc tangent\n@see asinh() - Inverse hyperbolic sine\n@see acosh() - Inverse hyperbolic cosine\n
base_convert base_convert(string $number, int $frombase, int $tobase) [string]\nConvert a number between arbitrary bases. Returns a string containing\n`number` represented in base `tobase`. The base in which `number` is given\nis specified in `frombase`. Both `frombase` and `tobase` have to be between\n2 and 36, inclusive. Digits in numbers with a base higher than 10 will\nbe represented with the letters a-z, with a meaning 10, b meaning 11 and\nz meaning 35. base_convert() may lose precision on large numbers due to\nproperties related to the internal &quot;double&quot; or &quot;float&quot;\ntype used. Please see the Floating point numbers section in the manual for\nmore specific information and limitations.\n@param number The number to convert\n@param frombase The base `number` is in\n@param tobase The base to convert `number` to\n@return (PHP 4, PHP 5)\n@see intval() - Get the integer value of a variable\n
base64_decode base64_decode(string $data [, bool $strict=false]) [string]\nDecodes data encoded with MIME base64. Decodes a base64 encoded `data`.\n@param data The encoded data.\n@param strict Returns FALSE if input contains character from outside the\nbase64 alphabet.\n@return (PHP 4, PHP 5)\n@see base64_encode() - Encodes data with MIME base64\n@see &raquo; RFC 2045 section 6.8\n
base64_encode base64_encode(string $data) [string]\nEncodes data with MIME base64. Encodes the given `data` with base64. This\nencoding is designed to make binary data survive transport through transport\nlayers that are not 8-bit clean, such as mail bodies. Base64-encoded data\ntakes about 33% more space than the original data.\n@param data The data to encode.\n@return (PHP 4, PHP 5)\n@see base64_decode() - Decodes data encoded with MIME base64\n@see chunk_split() - Split a string into smaller chunks\n@see convert_uuencode() - Uuencode a string\n@see &raquo; RFC 2045 section 6.8\n
basename basename(string $path [, string $suffix]) [string]\nReturns trailing name component of path. Given a string containing the path\nto a file or directory, this function will return the trailing name component.\n@param path A path. On Windows, both slash (`/`) and backslash (`\`) are\nused as directory separator character. In other environments, it is the\nforward slash (`/`).\n@param suffix If the name component ends in `suffix` this will also be cut off.\n@return (PHP 4, PHP 5)\n@note Note: basename() operates naively on the input string, and is not\naware of the actual filesystem, or path components such as &quot;`..`&quot;.\n@note Note: basename() is locale aware, so for it to see the correct basename\nwith multibyte character paths, the matching locale must be set using the\nsetlocale() function.\n@see dirname() - Returns parent directory's path\n@see pathinfo() - Returns information about a file path\n
bbcode_add_element bbcode_add_element(resource $bbcode_container, string\n$tag_name, array $tag_rules) [bool]\nAdds a bbcode element. Adds a tag to an existing BBCode_Container tag_set\nusing tag_rules.\n@param bbcode_container BBCode_Container resource, returned by bbcode_create().\n@param tag_name The new tag to add to the BBCode_Container tag_set.\n@param tag_rules An associative array containing the parsing rules; see\nbbcode_create() for the available keys.\n@return (PECL bbcode >= 0.9.0)\n
bbcode_add_smiley bbcode_add_smiley(resource $bbcode_container, string $smiley,\nstring $replace_by) [bool]\nAdds a smiley to the parser. Adds a smiley to the parser\n@param bbcode_container BBCode_Container resource, returned by bbcode_create().\n@param smiley The string that will be replaced when found.\n@param replace_by The string that replace smiley when found.\n@return (PECL bbcode >= 0.10.2)\n
bbcode_create bbcode_create([array $bbcode_initial_tags]) [resource]\nCreate a BBCode Resource. This function returns a new BBCode Resource used\nto parse BBCode strings.\n@param bbcode_initial_tags An associative array containing the tag names as\nkeys and parameters required to correctly parse BBCode as their value. The\nfollowing key/value pairs are supported: flags optional - a flag set based on\nthe BBCODE_FLAGS_* constants. type required - an int indicating the type of\ntag. Use the BBCODE_TYPE_* constants. open_tag required - the HTML replacement\nstring for the open tag. close_tag required - the HTML replacement string for\nthe close tag. default_arg optional - use this value as the default argument\nif none is provided and tag_type is of type OPTARG. content_handling optional\n- Gives the callback used for modification of the content. Object Oriented\nNotation supported only since 0.10.1 callback prototype is string name(string\n$content, string $argument) param_handling optional - Gives the callback used\nfor modification of the argument. Object Oriented Notation supported only since\n0.10.1 callback prototype is string name(string $content, string $argument)\nchilds optional - List of accepted children for the tag. The format of the\nlist is a comma separated string. If the list starts with ! it will be the\nlist of rejected children for the tag. parent optional - List of accepted\nparents for the tag. The format of the list is a comma separated string.\n@return (PECL bbcode >= 0.9.0)\n
bbcode_destroy bbcode_destroy(resource $bbcode_container) [bool]\nClose BBCode_container resource. This function closes the resource opened\nby bbcode_create().\n@param bbcode_container BBCode_Container resource returned by bbcode_create().\n@return (PECL bbcode >= 0.9.0)\n
bbcode_parse bbcode_parse(resource $bbcode_container, string $to_parse)\n[string]\nParse a string following a given rule set. This function parse the string\nto_parse following the rules in the bbcode_container created by bbcode_create()\n@param bbcode_container BBCode_Container resource returned by bbcode_create().\n@param to_parse The string we need to parse.\n@return (PECL bbcode >= 0.9.0)\n
bbcode_set_arg_parser bbcode_set_arg_parser(resource $bbcode_container,\nresource $bbcode_arg_parser) [bool]\nAttach another parser in order to use another rule set for argument\nparsing. Attaches another parser to the bbcode_container. This parser is\nused only when arguments must be parsed. If this function is not used,\nthe default argument parser is the parser itself.\n@param bbcode_container BBCode_Container resource, returned by bbcode_create().\n@param bbcode_arg_parser BBCode_Container resource, returned by\nbbcode_create(). It will be used only for parsed arguments\n@return (PECL bbcode >= 0.10.2)\n
bbcode_set_flags bbcode_set_flags(resource $bbcode_container, int $flags [,\nint $mode=BBCODE_SET_FLAGS_SET]) [bool]\nSet or alter parser options. Set or alter parser options\n@param bbcode_container BBCode_Container resource, returned by bbcode_create().\n@param flags The flag set that must be applied to the bbcode_container options\n@param mode One of the BBCODE_SET_FLAGS_* constant to set, unset a specific\nflag set or to replace the flag set by flags.\n@return (PECL bbcode >= 0.10.2)\n
bcadd bcadd(string $left_operand, string $right_operand [, int $scale])\n[string]\nAdd two arbitrary precision numbers. Sums `left_operand` and `right_operand`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcsub() - Subtract one arbitrary precision number from another\n
bccomp bccomp(string $left_operand, string $right_operand [, int $scale]) [int]\nCompare two arbitrary precision numbers. Compares the `left_operand` to the\n`right_operand` and returns the result as an integer.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param scale The optional `scale` parameter is used to set the number of\ndigits after the decimal place which will be used in the comparison.\n@return (PHP 4, PHP 5)\n
bcdiv bcdiv(string $left_operand, string $right_operand [, int $scale])\n[string]\nDivide two arbitrary precision numbers. Divides the `left_operand` by the\n`right_operand`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcmul() - Multiply two arbitrary precision number\n
bcmod bcmod(string $left_operand, string $modulus) [string]\nGet modulus of an arbitrary precision number. Get the modulus of the\n`left_operand` using `modulus`.\n@param left_operand The left operand, as a string.\n@param modulus The modulus, as a string.\n@return (PHP 4, PHP 5)\n@see bcdiv() - Divide two arbitrary precision numbers\n
bcmul bcmul(string $left_operand, string $right_operand [, int $scale])\n[string]\nMultiply two arbitrary precision number. Multiply the `left_operand` by the\n`right_operand`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcdiv() - Divide two arbitrary precision numbers\n
bcompiler_load_exe bcompiler_load_exe(string $filename) [bool]\nReads and creates classes from a bcompiler exe file. Reads data from a\nbcompiler exe file and creates classes from the bytecodes.\n@param filename The exe file path, as a string.\n@return (PECL bcompiler >= 0.4)\n@see bcompiler_load() - Reads and creates classes from a bz compressed file\n
bcompiler_load bcompiler_load(string $filename) [bool]\nReads and creates classes from a bz compressed file. Reads data from a\nbzcompressed file and creates classes from the bytecodes.\n@param filename The bzcompressed file path, as a string.\n@return (PECL bcompiler >= 0.4)\n@see bcompiler_load_exe() - Reads and creates classes from a bcompiler exe file\n
bcompiler_parse_class bcompiler_parse_class(string $class, string $callback)\n[bool]\nReads the bytecodes of a class and calls back to a user function. Reads the\nbytecodes of a class and calls back to a user function.\n@param class The class name, as a string.\n@param callback\n@return (PECL bcompiler >= 0.4)\n
bcompiler_read bcompiler_read(resource $filehandle) [bool]\nReads and creates classes from a filehandle. Reads data from a open file\nhandle and creates classes from the bytecodes.\n@param filehandle A file handle as returned by fopen().\n@return (PECL bcompiler >= 0.4)\n
bcompiler_write_class bcompiler_write_class(resource $filehandle, string\n$className [, string $extends]) [bool]\nWrites an defined class as bytecodes. Reads the bytecodes from PHP for an\nexisting class, and writes them to the open file handle.\n@param filehandle A file handle as returned by fopen().\n@param className The class name, as a string.\n@param extends\n@return (PECL bcompiler >= 0.4)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_constant bcompiler_write_constant(resource $filehandle,\nstring $constantName) [bool]\nWrites a defined constant as bytecodes. Reads the bytecodes from PHP for an\nexisting constant, and writes them to the open file handle.\n@param filehandle A file handle as returned by fopen().\n@param constantName The name of the defined constant, as a string.\n@return (PECL bcompiler >= 0.5)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_exe_footer bcompiler_write_exe_footer(resource $filehandle,\nint $startpos) [bool]\nWrites the start pos, and sig to the end of a exe type file. An EXE (or\nself executable) file consists of 3 parts: The `stub` (executable code,\ne.g. a compiled C program) that loads PHP interpreter, bcompiler extension,\nstored Bytecodes and initiates a call for the specified function (e.g. main)\nor class method (e.g. `main::main`) The Bytecodes (uncompressed only for\nthe moment) The bcompiler EXE footer  To obtain a suitable stub you can\ncompile php_embed-based stub phpe.c located in the examples/embed directory\non bcompiler&#039;s CVS.\n@param filehandle A file handle as returned by fopen().\n@param startpos The file position at which the Bytecodes start, and can be\nobtained using ftell().\n@return (PECL bcompiler >= 0.4)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_class() - Writes an defined class as bytecodes\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_file bcompiler_write_file(resource $filehandle, string\n$filename) [bool]\nWrites a php source file as bytecodes. This function complies specified\nsource file into bytecodes, and writes them to the open file handle.\n@param filehandle A file handle as returned by fopen().\n@param filename The source file path, as a string.\n@return (PECL bcompiler >= 0.6)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_footer bcompiler_write_footer(resource $filehandle) [bool]\nWrites the single character \x00 to indicate End of compiled data. Writes\nthe single character \x00 to indicate End of compiled data.\n@param filehandle A file handle as returned by fopen().\n@return (PECL bcompiler >= 0.4)\n@see bcompiler_write_header() - Writes the bcompiler header\n
bcompiler_write_function bcompiler_write_function(resource $filehandle,\nstring $functionName) [bool]\nWrites an defined function as bytecodes. Reads the bytecodes from PHP for\nan existing function, and writes them to the open file handle. Order is not\nimportant, (eg. if function b uses function a, and you compile it like the\nexample below, it will work perfectly OK).\n@param filehandle A file handle as returned by fopen().\n@param functionName The function name, as a string.\n@return (PECL bcompiler >= 0.5)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_functions_from_file\nbcompiler_write_functions_from_file(resource $filehandle, string $fileName)\n[bool]\nWrites all functions defined in a file as bytecodes. Searches for all functions\ndeclared in the given file, and writes their correspondent bytecodes to the\nopen file handle.\n@param filehandle A file handle as returned by fopen().\n@param fileName The file to be compiled. You must always include or require\nthe file you intend to compile.\n@return (PECL bcompiler >= 0.5)\n@see bcompiler_write_header() - Writes the bcompiler header\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_header bcompiler_write_header(resource $filehandle [, string\n$write_ver]) [bool]\nWrites the bcompiler header. Writes the header part of a bcompiler file.\n@param filehandle A file handle as returned by fopen().\n@param write_ver Can be used to write bytecode in a previously used format,\nso that you can use it with older versions of bcompiler.\n@return (PECL bcompiler >= 0.3)\n@see bcompiler_write_footer() - Writes the single character \x00 to indicate\nEnd of compiled data\n
bcompiler_write_included_filename bcompiler_write_included_filename(resource\n$filehandle, string $filename) [bool]\nWrites an included file as bytecodes.\n@return (PECL bcompiler >= 0.5)\n
bcpow bcpow(string $left_operand, string $right_operand [, int $scale])\n[string]\nRaise an arbitrary precision number to another. Raise `left_operand` to the\npower `right_operand`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcpowmod() - Raise an arbitrary precision number to another, reduced\nby a specified modulus\n@see bcsqrt() - Get the square root of an arbitrary precision number\n
bcpowmod bcpowmod(string $left_operand, string $right_operand, string $modulus\n[, int $scale]) [string]\nRaise an arbitrary precision number to another, reduced by a specified\nmodulus. Use the fast-exponentiation method to raise `left_operand` to the\npower `right_operand` with respect to the modulus `modulus`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param modulus The modulus, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 5)\n@note Note: Because this method uses the modulus operation, numbers which\nare not positive integers may give unexpected results.\n@see bcpow() - Raise an arbitrary precision number to another\n@see bcmod() - Get modulus of an arbitrary precision number\n
bcscale bcscale(int $scale) [bool]\nSet default scale parameter for all bc math functions. Sets the default\nscale parameter for all subsequent bc math functions that do not explicitly\nspecify a scale parameter.\n@param scale The scale factor.\n@return (PHP 4, PHP 5)\n
bcsqrt bcsqrt(string $operand [, int $scale]) [string]\nGet the square root of an arbitrary precision number. Return the square root\nof the `operand`.\n@param operand The operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcpow() - Raise an arbitrary precision number to another\n
bcsub bcsub(string $left_operand, string $right_operand [, int $scale])\n[string]\nSubtract one arbitrary precision number from another. Subtracts the\n`right_operand` from the `left_operand`.\n@param left_operand The left operand, as a string.\n@param right_operand The right operand, as a string.\n@param  scale This optional parameter is used to set the number of digits\nafter the decimal place in the result. You can also set the global default\nscale for all functions by using bcscale().\n@return (PHP 4, PHP 5)\n@see bcadd() - Add two arbitrary precision numbers\n
bin2hex bin2hex(string $str) [string]\nConvert binary data into hexadecimal representation. Returns an ASCII string\ncontaining the hexadecimal representation of `str`. The conversion is done\nbyte-wise with the high-nibble first.\n@param str A character.\n@return (PHP 4, PHP 5)\n@see pack() - Pack data into binary string\n@see unpack() - Unpack data from binary string\n
bind_textdomain_codeset bind_textdomain_codeset(string $domain, string\n$codeset) [string]\nSpecify the character encoding in which the messages from the DOMAIN message\ncatalog will be returned. With bind_textdomain_codeset(), you can set in\nwhich encoding will be messages from `domain` returned by gettext() and\nsimilar functions.\n@param domain The domain\n@param codeset The code set\n@return (PHP 4 >= 4.2.0, PHP 5)\n
bindec bindec(string $binary_string) [number]\nBinary to decimal. Returns the decimal equivalent of the binary number\nrepresented by the `binary_string` argument. bindec() converts a binary number\nto an integer or, if needed for size reasons, float. bindec() interprets all\n`binary_string` values as unsigned integers. This is because bindec() sees the\nmost significant bit as another order of magnitude rather than as the sign bit.\n@param binary_string The binary string to convert\n@return (PHP 4, PHP 5)\n@see decbin() - Decimal to binary\n@see octdec() - Octal to decimal\n@see hexdec() - Hexadecimal to decimal\n@see base_convert() - Convert a number between arbitrary bases\n
bindtextdomain bindtextdomain(string $domain, string $directory) [string]\nSets the path for a domain. The bindtextdomain() function sets the path for\na domain.\n@param domain The domain\n@param directory The directory path\n@return (PHP 4, PHP 5)\n
bson_decode bson_decode(string $bson) [array]\nDeserializes a BSON object into a PHP array. This function is very beta and\nentirely useless for 99% of users. It is only useful if you&#039;re doing\nsomething weird, such as writing your own driver on top of the PHP driver.\n@param bson The BSON to be deserialized.\n@return (PECL mongo >=1.0.1)\n
bson_encode bson_encode(mixed $anything) [string]\nSerializes a PHP variable into a BSON string. This function is very beta and\nentirely useless for 99% of users. It is only useful if you&#039;re doing\nsomething weird, such as writing your own driver on top of the PHP driver.\n@param anything The variable to be serialized.\n@return (PECL mongo >=1.0.1)\n
bzclose bzclose(resource $bz) [int]\nClose a bzip2 file. Closes the given bzip2 file pointer.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzopen() - Opens a bzip2 compressed file\n
bzcompress bzcompress(string $source [, int $blocksize=4 [, int\n$workfactor=0]]) [mixed]\nCompress a string into bzip2 encoded data. bzcompress() compresses the given\nstring and returns it as bzip2 encoded data.\n@param source The string to compress.\n@param blocksize Specifies the blocksize used during compression and should\nbe a number from 1 to 9 with 9 giving the best compression, but using more\nresources to do so.\n@param workfactor Controls how the compression phase behaves when presented\nwith worst case, highly repetitive, input data. The value can be between\n0 and 250 with 0 being a special case. Regardless of the `workfactor`,\nthe generated output is the same.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzdecompress() - Decompresses bzip2 encoded data\n
bzdecompress bzdecompress(string $source [, int $small=0]) [mixed]\nDecompresses bzip2 encoded data. bzdecompress() decompresses the given string\ncontaining bzip2 encoded data.\n@param source The string to decompress.\n@param small If TRUE, an alternative decompression algorithm will be used\nwhich uses less memory (the maximum memory requirement drops to around 2300K)\nbut works at roughly half the speed. See the &raquo; bzip2 documentation\nfor more information about this feature.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzcompress() - Compress a string into bzip2 encoded data\n
bzerrno bzerrno(resource $bz) [int]\nReturns a bzip2 error number. Returns the error number of any bzip2 error\nreturned by the given file pointer.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzerror() - Returns the bzip2 error number and error string in an array\n@see bzerrstr() - Returns a bzip2 error string\n
bzerror bzerror(resource $bz) [array]\nReturns the bzip2 error number and error string in an array. Returns the error\nnumber and error string of any bzip2 error returned by the given file pointer.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzerrno() - Returns a bzip2 error number\n@see bzerrstr() - Returns a bzip2 error string\n
bzerrstr bzerrstr(resource $bz) [string]\nReturns a bzip2 error string. Gets the error string of any bzip2 error\nreturned by the given file pointer.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzerrno() - Returns a bzip2 error number\n@see bzerror() - Returns the bzip2 error number and error string in an array\n
bzflush bzflush(resource $bz) [int]\nForce a write of all buffered data. Forces a write of all buffered bzip2\ndata for the file pointer `bz`.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzread() - Binary safe bzip2 file read\n@see bzwrite() - Binary safe bzip2 file write\n
bzopen bzopen(string $filename, string $mode) [resource]\nOpens a bzip2 compressed file. bzopen() opens a bzip2 (.bz2) file for reading\nor writing.\n@param filename The name of the file to open.\n@param mode Similar to the fopen() function, only &#039;r&#039; (read) and\n&#039;w&#039; (write) are supported. Everything else will cause bzopen to\nreturn FALSE.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzclose() - Close a bzip2 file\n
bzread bzread(resource $bz [, int $length=1024]) [string]\nBinary safe bzip2 file read. bzread() reads from the given bzip2 file\npointer. Reading stops when `length` (uncompressed) bytes have been read or\nEOF is reached, whichever comes first.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@param length If not specified, bzread() will read 1024 (uncompressed)\nbytes at a time. A maximum of 8192 uncompressed bytes will be read at a time.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzwrite() - Binary safe bzip2 file write\n@see feof() - Tests for end-of-file on a file pointer\n@see bzopen() - Opens a bzip2 compressed file\n
bzwrite bzwrite(resource $bz, string $data [, int $length]) [int]\nBinary safe bzip2 file write. bzwrite() writes a string into the given bzip2\nfile stream.\n@param bz The file pointer. It must be valid and must point to a file\nsuccessfully opened by bzopen().\n@param data The written data.\n@param length If supplied, writing will stop after `length` (uncompressed)\nbytes have been written or the end of `data` is reached, whichever comes first.\n@return (PHP 4 >= 4.0.4, PHP 5)\n@see bzread() - Binary safe bzip2 file read\n@see bzopen() - Opens a bzip2 compressed file\n
cairo_create cairo_create(CairoSurface $surface) [CairoContext]\nReturns a new CairoContext object on the requested surface.. The function\ndescription goes here. This function is currently not documented; only its\nargument list is available.\n@param surface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_face_get_type cairo_font_face_get_type(CairoFontFace $fontface)\n[int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param fontface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_face_status cairo_font_face_status(CairoFontFace $fontface) [int]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@param fontface Description...\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
cairo_font_options_create cairo_font_options_create(void) [CairoFontOptions]\nDescription. The function description goes here. This function is currently\nnot documented; only its argument list is available.\n@return (PECL cairo >= 0.1.0)\n@see related function name here()\n
abs abs(mixed $number) [number]\nAbsolute value. Returns the absolute value of `number`.\n@param number The numeric value to process\n@return (PHP 4, PHP 5)\n@see gmp_abs() - Absolute value\n@see gmp_sign() - Sign of number\n
acos acos(float $arg) [float]\nArc cosine. Returns the arc cosine of `arg` in radians. acos() is the\ncomplementary function of cos(), which means that `a==cos(acos(a))` for\nevery value of a that is within acos()&#039; range.\n@param arg The argument to process\n@return (PHP 4, PHP 5)\n@see cos() - Cosine\n@see acosh() - Inverse hyperbolic cosine\n@see asin() - Arc sine\n@see atan() - Arc tangent\n
acosh acosh(float $arg) [float]\nInverse hyperbolic cosine. Returns the inverse hyperbolic cosine of `arg`,\ni.e. the value whose hyperbolic cosine is `arg`.\n@param arg The value to process\n@return (PHP 4 >= 4.1.0, PHP 5)\n@see cosh() - Hyperbolic cosine\n@see acos() - Arc cosine\n@see asinh() - Inverse hyperbolic sine\n@see atanh() - Inverse hyperbolic tangent\n
addcslashes addcslashes(string $str, string $charlist) [string]\nQuote string with slashes in a C style. Returns a string with backslashes\nbefore characters that are listed in `charlist` parameter.\n@param str The string to be escaped.\n@return (PHP 4, PHP 5)\n@see stripcslashes() - Un-quote string quoted with addcslashes\n@see stripslashes() - Un-quotes a quoted string\n@see addslashes() - Quote string with slashes\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see quotemeta() - Quote meta characters\n
addslashes addslashes(string $str) [string]\nQuote string with slashes. Returns a string with backslashes before characters\nthat need to be quoted in database queries etc. These characters are single\nquote (`&#039;`), double quote (`&quot;`), backslash (`\`) and NUL (the\nNULL byte). An example use of addslashes() is when you&#039;re entering\ndata into a database. For example, to insert the name `O&#039;reilly` into\na database, you will need to escape it. It&#039;s highly recommended to use\nDBMS specific escape function (e.g. mysqli_real_escape_string() for MySQL\nor pg_escape_string() for PostgreSQL), but if the DBMS you&#039;re using\ndoesn&#039;t have an escape function and the DBMS uses `\` to escape special\nchars, you can use this function. This would only be to get the data into\nthe database, the extra `\` will not be inserted. Having the PHP directive\nmagic_quotes_sybase set to `on` will mean `&#039;` is instead escaped with\nanother `&#039;`. The PHP directive magic_quotes_gpc is `on` by default, and\nit essentially runs addslashes() on all GET, POST, and COOKIE data. Do not use\naddslashes() on strings that have already been escaped with magic_quotes_gpc\nas you&#039;ll then do double escaping. The function get_magic_quotes_gpc()\nmay come in handy for checking this.\n@param str The string to be escaped.\n@return (PHP 4, PHP 5)\n@see stripcslashes() - Un-quote string quoted with addcslashes\n@see stripslashes() - Un-quotes a quoted string\n@see addcslashes() - Quote string with slashes in a C style\n@see htmlspecialchars() - Convert special characters to HTML entities\n@see quotemeta() - Quote meta characters\n@see get_magic_quotes_gpc() - Gets the current configuration setting of\nmagic_quotes_gpc\n
aggregate_info aggregate_info(object $object) [array]\nGets aggregation information for a given object. Gets the aggregation\ninformation for the given `object`.\n@param object\n@return (PHP 4 >= 4.3.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_methods_by_list aggregate_methods_by_list(object $object, string\n$class_name, array $methods_list [, bool $exclude=false]) [void]\nSelective dynamic class methods aggregation to an object. Aggregates methods\nfrom a class to an existing object using a list of method names. The class\nconstructor or methods whose names start with an underscore character (_),\nwhich are considered private to the aggregated class, are always excluded.\n@param object\n@param class_name\n@param methods_list\n@param exclude The optional parameter `exclude` is used to decide whether\nthe list contains the names of methods to include in the aggregation\n(i.e. `exclude` is FALSE), or to exclude from the aggregation (`exclude`\nis TRUE).\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_info() - Gets aggregation information for a given object\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_methods_by_regexp aggregate_methods_by_regexp(object $object,\nstring $class_name, string $regexp [, bool $exclude=false]) [void]\nSelective class methods aggregation to an object using a regular\n   expression. Aggregates methods from a class to an existing object using a\n   regular expression to match method names. The class constructor or methods\n   whose names start with an underscore character (_), which are considered\n   private to the aggregated class, are always excluded.\n@param object\n@param class_name\n@param regexp\n@param exclude The optional parameter `exclude` is used to decide whether\nthe regular expression will select the names of methods to include in the\naggregation (i.e. `exclude` is FALSE), or to exclude from the aggregation\n(`exclude` is TRUE).\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_info() - Gets aggregation information for a given object\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_methods aggregate_methods(object $object, string $class_name) [void]\nDynamic class and object aggregation of methods. Aggregates all methods\ndefined in a class to an existing object, except for the class constructor,\nor methods whose names start with an underscore character (_) which are\nconsidered private to the aggregated class.\n@param object\n@param class_name\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_info() - Gets aggregation information for a given object\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_properties_by_list aggregate_properties_by_list(object $object,\nstring $class_name, array $properties_list [, bool $exclude=false]) [void]\nSelective dynamic class properties aggregation to an object. Aggregates\nproperties from a class to an existing object using a list of property\nnames. The properties whose names start with an underscore character (_),\nwhich are considered private to the aggregated class, are always excluded.\n@param object\n@param class_name\n@param properties_list\n@param exclude The optional parameter `exclude` is used to decide whether the\nlist contains the names of class properties to include in the aggregation\n(i.e. `exclude` is FALSE), or to exclude from the aggregation (`exclude`\nis TRUE).\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see aggregate_info() - Gets aggregation information for a given object\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_properties_by_regexp aggregate_properties_by_regexp(object $object,\nstring $class_name, string $regexp [, bool $exclude=false]) [void]\nSelective class properties aggregation to an object using a regular\n   expression. Aggregates properties from a class to an existing object using\n   a regular expression to match their names. The properties whose names\n   start with an underscore character (_), which are considered private to\n   the aggregated class, are always excluded.\n@param object\n@param class_name\n@param regexp\n@param exclude The optional parameter `exclude` is used to decide whether the\nregular expression will select the names of class properties to include in\nthe aggregation (i.e. `exclude` is FALSE), or to exclude from the aggregation\n(`exclude` is TRUE).\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_info() - Gets aggregation information for a given object\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate_properties aggregate_properties(object $object, string $class_name)\n[void]\nDynamic aggregation of  class properties to an object. Aggregates all\nproperties defined in a class to an existing object, except for properties\nwhose names start with an underscore character (_) which are considered\nprivate to the aggregated class.\n@param object\n@param class_name\n@return (PHP 4 >= 4.2.0)\n@see aggregate() - Dynamic class and object aggregation of methods and\nproperties\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties()\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregate aggregate(object $object, string $class_name) [void]\nDynamic class and object aggregation of methods and properties. Aggregates\nmethods and properties defined in a class to an existing object. Methods\nand properties with names starting with an underscore character (_) are\nconsidered private to the aggregated class and are not used, constructors\nare also excluded from the aggregation procedure.\n@param object\n@param class_name\n@return (PHP 4 >= 4.2.0)\n@see aggregate_info() - Gets aggregation information for a given object\n@see aggregate_methods() - Dynamic class and object aggregation of methods\n@see aggregate_methods_by_list() - Selective dynamic class methods aggregation\nto an object\n@see aggregate_methods_by_regexp() - Selective class methods aggregation to\nan object using a regular expression\n@see aggregate_properties() - Dynamic aggregation of class properties to\nan object\n@see aggregate_properties_by_list() - Selective dynamic class properties\naggregation to an object\n@see aggregate_properties_by_regexp() - Selective class properties aggregation\nto an object using a regular expression\n@see deaggregate() - Removes the aggregated methods and properties from\nan object\n
aggregation_info aggregation_info\nAlias of aggregate_info.\n
apache_child_terminate apache_child_terminate(void) [bool]\nTerminate apache process after this request. apache_child_terminate() will\nregister the Apache process executing the current PHP request for termination\nonce execution of PHP code is completed. It may be used to terminate a process\nafter a script with high memory consumption has been run as memory will\nusually only be freed internally but not given back to the operating system.\n@return (PHP 4 >= 4.0.5, PHP 5)\n@note Note: This function is not implemented on Windows platforms.\n@see exit() - Output a message and terminate the current script\n
apache_get_modules apache_get_modules(void) [array]\nGet a list of loaded Apache modules. Get a list of loaded Apache modules.\n@return (PHP 4 >= 4.3.2, PHP 5)\n
apache_get_version apache_get_version(void) [string]\nFetch Apache version. Fetch the Apache version.\n@return (PHP 4 >= 4.3.2, PHP 5)\n@see phpinfo() - Outputs information about PHP's configuration\n
apache_getenv apache_getenv(string $variable [, bool $walk_to_top]) [string]\nGet an Apache subprocess_env variable. Get an Apache environment variable as\nspecified by `variable`. This function requires Apache 2 otherwise it&#039;s\nundefined.\n@param variable The Apache environment variable\n@param walk_to_top Whether to get the top-level variable available to all\nApache layers.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@see apache_setenv() - Set an Apache subprocess_env variable\n@see getenv() - Gets the value of an environment variable\n@see Superglobals\n
apache_lookup_uri apache_lookup_uri(string $filename) [object]\nPerform a partial request for the specified URI and return all info about\nit. This performs a partial request for a URI. It goes just far enough to\nobtain all the important information about the given resource. This function\nis only supported when PHP is installed as an Apache module.\n@param filename The filename (URI) that&#039;s being requested.\n@return (PHP 4, PHP 5)\n
apache_note apache_note(string $note_name [, string $note_value]) [string]\nGet and set apache request notes. This function is a wrapper for Apache&#039;s\n`table_get` and `table_set`. It edits the table of notes that exists\nduring a request. The table&#039;s purpose is to allow Apache modules to\ncommunicate. The main use for apache_note() is to pass information from one\nmodule to another within the same request.\n@param note_name The name of the note.\n@param note_value The value of the note.\n@return (PHP 4, PHP 5)\n@see virtual() - Perform an Apache sub-request\n
apache_request_headers apache_request_headers(void) [array]\nFetch all HTTP request headers. Fetches all HTTP request headers from the\ncurrent request. This function is only supported when PHP is installed as\nan Apache module.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: You can also get at the value of the common CGI variables by\nreading them from the environment, which works whether or not you are using\nPHP as an Apache module. Use phpinfo() to see a list of all of the available\nenvironment variables.\n@see apache_response_headers() - Fetch all HTTP response headers\n
apache_reset_timeout apache_reset_timeout(void) [bool]\nReset the Apache write timer. apache_reset_timeout() resets the Apache\nwrite timer, which defaults to 300 seconds. With `set_time_limit(0);\nignore_user_abort(true)` and periodic apache_reset_timeout() calls, Apache\ncan theoretically run forever. This function requires Apache 1.\n@return (PHP 5 >= 5.1.0)\n@note Note: This function is disabled when PHP is running in safe mode.\n@see set_time_limit() - Limits the maximum execution time\n@see ignore_user_abort() - Set whether a client disconnect should abort\nscript execution\n
apache_response_headers apache_response_headers(void) [array]\nFetch all HTTP response headers. Fetch all HTTP response headers.\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: As of PHP 4.3.3 you can use this function with the NSAPI server\nmodule in Netscape/iPlanet/SunONE webservers, too.\n@see apache_request_headers() - Fetch all HTTP request headers\n@see headers_sent() - Checks if or where headers have been sent\n@see headers_list() - Returns a list of response headers sent (or ready\nto send)\n
apache_setenv apache_setenv(string $variable, string $value [, bool\n$walk_to_top=false]) [bool]\nSet an Apache subprocess_env variable. apache_setenv() sets the value of\nthe Apache environment variable specified by `variable`. Note: When setting\nan Apache environment variable, the corresponding $_SERVER variable is\nnot changed.\n@param variable The environment variable that&#039;s being set.\n@param value The new `variable` value.\n@param walk_to_top Whether to set the top-level variable available to all\nApache layers.\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: apache_setenv() can be paired up with apache_getenv() across\nseparate pages or for setting variables to pass to Server Side Includes\n(.shtml) that have been included in PHP scripts.\n@see apache_getenv() - Get an Apache subprocess_env variable\n
apc_add apc_add(string $key [, mixed $var [, int $ttl=0]]) [bool]\nCache a variable in the data store. Caches a variable in the data store,\nonly if it&#039;s not already stored. Note: Unlike many other mechanisms in\nPHP, variables stored using apc_add() will persist between requests (until\nthe value is removed from the cache).\n@param key Store the variable using this name. `key`s are cache-unique,\nso attempting to use apc_add() to store data with a key that already exists\nwill not overwrite the existing data, and will instead return FALSE. (This\nis the only difference between apc_add() and apc_store().)\n@param var The variable to store\n@param ttl Time To Live; store `var` in the cache for `ttl` seconds. After\nthe `ttl` has passed, the stored variable will be expunged from the cache\n(on the next request). If no `ttl` is supplied (or if the `ttl` is `0`),\nthe value will persist until it is removed from the cache manually, or\notherwise fails to exist in the cache (clear, restart, etc.).\n@param values Names in key, variables in value.\n@return (PECL apc >= 3.0.13)\n@see apc_store() - Cache a variable in the data store\n@see apc_fetch() - Fetch a stored variable from the cache\n@see apc_delete() - Removes a stored variable from the cache\n
apc_bin_dump apc_bin_dump([array $files [, array $user_vars]]) [string]\nGet a binary dump of the given files and user variables. Returns a binary dump\nof the given files and user variables from the APC cache. A NULL for files\nor user_vars signals a dump of every entry, whereas array() will dump nothing.\n@param files The files. Passing in NULL signals a dump of every entry,\nwhile passing in array() will dump nothing.\n@param user_vars The user vars. Passing in NULL signals a dump of every entry,\nwhile passing in array() will dump nothing.\n@return (PECL apc >= 3.1.4)\n@see apc_bin_dumpfile() - Output a binary dump of cached files and user\nvariables to a file\n@see apc_bin_load() - Load a binary dump into the APC file/user cache\n
apc_bin_dumpfile apc_bin_dumpfile(array $files, array $user_vars, string\n$filename [, int $flags=0 [, resource $context]]) [int]\nOutput a binary dump of cached files and user variables to a file. Outputs\na binary dump of the given files and user variables from the APC cache to\nthe named file.\n@param files The file names being dumped.\n@param user_vars The user variables being dumped.\n@param filename The filename where the dump is being saved.\n@param flags Flags passed to the `filename` stream. See the file_put_contents()\ndocumentation for details.\n@param context The context passed to the `filename` stream. See the\nfile_put_contents() documentation for details.\n@return (PECL apc >= 3.1.4)\n@see apc_bin_dump() - Get a binary dump of the given files and user variables\n@see apc_bin_load() - Load a binary dump into the APC file/user cache\n
apc_bin_load apc_bin_load(string $data [, int $flags=0]) [bool]\nLoad a binary dump into the APC file/user cache. Loads the given binary dump\ninto the APC file/user cache.\n@param data The binary dump being loaded, likely from apc_bin_dump().\n@param flags Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.\n@return (PECL apc >= 3.1.4)\n@see apc_bin_dump() - Get a binary dump of the given files and user variables\n@see apc_bin_loadfile() - Load a binary dump from a file into the APC\nfile/user cache\n
apc_bin_loadfile apc_bin_loadfile(string $filename [, resource $context [,\nint $flags]]) [bool]\nLoad a binary dump from a file into the APC file/user cache. Loads a binary\ndump from a file into the APC file/user cache.\n@param filename The file name containing the dump, likely from\napc_bin_dumpfile().\n@param context The files context.\n@param flags Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.\n@return (PECL apc >= 3.1.4)\n@see apc_bin_dumpfile() - Output a binary dump of cached files and user\nvariables to a file\n@see apc_bin_load() - Load a binary dump into the APC file/user cache\n
apc_cache_info apc_cache_info([string $cache_type [, bool $limited=false]])\n[array]\nRetrieves cached information from APC's data store. Retrieves cached\ninformation and meta-data from APC&#039;s data store.\n@param cache_type If `cache_type` is &quot;`user`&quot;, information about\nthe user cache will be returned. If `cache_type` is &quot;`filehits`&quot;,\ninformation about which files have been served from the bytecode cache for\nthe current request will be returned. This feature must be enabled at compile\ntime using --enable-filehits . If an invalid or no `cache_type` is specified,\ninformation about the system cache (cached files) will be returned.\n@param limited If `limited` is TRUE, the return value will exclude the\nindividual list of cache entries. This is useful when trying to optimize\ncalls for statistics gathering.\n@return (PECL apc >= 2.0.0)\n@see APC configuration directives\n@see APCIterator::getTotalSize() - Get total cache size\n@see APCIterator::getTotalHits() - Get total cache hits\n@see APCIterator::getTotalCount() - Get total count\n
apc_cas apc_cas(string $key, int $old, int $new) [bool]\nUpdates an old value with a new value. apc_cas() updates an already existing\ninteger value if the `old` parameter matches the currently stored value with\nthe value of the `new` parameter.\n@param key The key of the value being updated.\n@param old The old value (the value currently stored).\n@param new The new value to update to.\n@return (PECL apc >= 3.1.1)\n@see apc_dec() - Decrease a stored number\n@see apc_store() - Cache a variable in the data store\n
apc_clear_cache apc_clear_cache([string $cache_type]) [bool]\nClears the APC cache. Clears the user/system cache.\n@param cache_type If `cache_type` is &quot;`user`&quot;, the user cache will\nbe cleared; otherwise, the system cache (cached files) will be cleared.\n@return (PECL apc >= 2.0.0)\n@see apc_cache_info() - Retrieves cached information from APC's data store\n
apc_compile_file apc_compile_file(string $filename [, bool $atomic=true])\n[mixed]\nStores a file in the bytecode cache, bypassing all filters.. Stores a file\nin the bytecode cache, bypassing all filters.\n@param filename Full or relative path to a PHP file that will be compiled\nand stored in the bytecode cache.\n@return (PECL apc >= 3.0.13)\n@see apc_bin_dumpfile() - Output a binary dump of cached files and user\nvariables to a file\n@see apc_bin_loadfile() - Load a binary dump from a file into the APC\nfile/user cache\n
apc_dec apc_dec(string $key [, int $step=1 [, bool &$success]]) [int]\nDecrease a stored number. Decreases a stored integer value.\n@param key The key of the value being decreased.\n@param step The step, or value to decrease.\n@param success Optionally pass the success or fail boolean value to this\nreferenced variable.\n@return (PECL apc >= 3.1.1)\n@see apc_inc() - Increase a stored number\n
apc_define_constants apc_define_constants(string $key, array $constants [,\nbool $case_sensitive=true]) [bool]\nDefines a set of constants for retrieval and mass-definition. define() is\nnotoriously slow. Since the main benefit of APC is to increase the performance\nof scripts/applications, this mechanism is provided to streamline the process\nof mass constant definition. However, this function does not perform as well\nas anticipated. For a better-performing solution, try the &raquo; hidef\nextension from PECL. Note: To remove a set of stored constants (without\nclearing the entire cache), an empty array may be passed as the `constants`\nparameter, effectively clearing the stored value(s).\n@param key The `key` serves as the name of the constant set being stored. This\n`key` is used to retrieve the stored constants in apc_load_constants().\n@param constants An associative array of `constant_name => value` pairs. The\n`constant_name` must follow the normal constant naming rules. `value` must\nevaluate to a scalar value.\n@param case_sensitive The default behaviour for constants is to be\ndeclared case-sensitive; i.e. `CONSTANT` and `Constant` represent different\nvalues. If this parameter evaluates to FALSE the constants will be declared\nas case-insensitive symbols.\n@return (PECL apc >= 3.0.0)\n@see apc_load_constants() - Loads a set of constants from the cache\n@see define() - Defines a named constant\n@see constant() - Returns the value of a constant\n@see Or the PHP constants reference\n
apc_delete_file apc_delete_file(mixed $keys) [mixed]\nDeletes files from the opcode cache. Deletes the given files from the\nopcode cache.\n@param keys The files to be deleted. Accepts a string, array of strings,\nor an APCIterator object.\n@return (PECL apc >= 3.1.1)\n@see apc_clear_cache() - Clears the APC cache\n@see apc_delete() - Removes a stored variable from the cache\n@see apc_exists() - Checks if APC key exists\n
apc_delete apc_delete(string $key) [mixed]\nRemoves a stored variable from the cache. Removes a stored variable from\nthe cache.\n@param key The `key` used to store the value (with apc_store()).\n@return (PECL apc >= 3.0.0)\n@see apc_store() - Cache a variable in the data store\n@see apc_fetch() - Fetch a stored variable from the cache\n
apc_exists apc_exists(mixed $keys) [mixed]\nChecks if APC key exists. Checks if one ore more APC keys exist.\n@param keys A string, or an array of strings, that contain keys.\n@return (PECL apc >= 3.1.4)\n@see apc_cache_info() - Retrieves cached information from APC's data store\n@see apc_fetch() - Fetch a stored variable from the cache\n
apc_fetch apc_fetch(mixed $key [, bool &$success]) [mixed]\nFetch a stored variable from the cache. Fetchs a stored variable from\nthe cache.\n@param key The `key` used to store the value (with apc_store()). If an array\nis passed then each element is fetched and returned.\n@param success Set to TRUE in success and FALSE in failure.\n@return (PECL apc >= 3.0.0)\n@see apc_store() - Cache a variable in the data store\n@see apc_delete() - Removes a stored variable from the cache\n@see APCIterator\n
apc_inc apc_inc(string $key [, int $step=1 [, bool &$success]]) [int]\nIncrease a stored number. Increases a stored number.\n@param key The key of the value being increased.\n@param step The step, or value to increase.\n@param success Optionally pass the success or fail boolean value to this\nreferenced variable.\n@return (PECL apc >= 3.1.1)\n@see apc_dec() - Decrease a stored number\n
apc_load_constants apc_load_constants(string $key [, bool\n$case_sensitive=true]) [bool]\nLoads a set of constants from the cache. Loads a set of constants from\nthe cache.\n@param key The name of the constant set (that was stored with\napc_define_constants()) to be retrieved.\n@param case_sensitive The default behaviour for constants is to be\ndeclared case-sensitive; i.e. `CONSTANT` and `Constant` represent different\nvalues. If this parameter evaluates to FALSE the constants will be declared\nas case-insensitive symbols.\n@return (PECL apc >= 3.0.0)\n@see apc_define_constants() - Defines a set of constants for retrieval and\nmass-definition\n@see define() - Defines a named constant\n@see constant() - Returns the value of a constant\n@see Or the PHP constants reference\n
apc_sma_info apc_sma_info([bool $limited=false]) [array]\nRetrieves APC's Shared Memory Allocation information. Retrieves APC&#039;s\nShared Memory Allocation information.\n@param limited When set to FALSE (default) apc_sma_info() will return a\ndetailed information about each segment.\n@return (PECL apc >= 2.0.0)\n@see APC configuration directives\n
apc_store apc_store(string $key, mixed $var [, int $ttl=0]) [bool]\nCache a variable in the data store. Cache a variable in the data store. Note:\nUnlike many other mechanisms in PHP, variables stored using apc_store()\nwill persist between requests (until the value is removed from the cache).\n@param key Store the variable using this name. `key`s are cache-unique, so\nstoring a second value with the same `key` will overwrite the original value.\n@param var The variable to store\n@param ttl Time To Live; store `var` in the cache for `ttl` seconds. After\nthe `ttl` has passed, the stored variable will be expunged from the cache\n(on the next request). If no `ttl` is supplied (or if the `ttl` is `0`),\nthe value will persist until it is removed from the cache manually, or\notherwise fails to exist in the cache (clear, restart, etc.).\n@param values Names in key, variables in value.\n@return (PECL apc >= 3.0.0)\n@see apc_add() - Cache a variable in the data store\n@see apc_fetch() - Fetch a stored variable from the cache\n@see apc_delete() - Removes a stored variable from the cache\n
apd_breakpoint apd_breakpoint(int $debug_level) [bool]\nStops the interpreter and waits on a CR from the socket. This can be used\nto stop the running of your script, and await responses on the connected\nsocket. To step the program, just send enter (a blank line), or enter a php\ncommand to be executed.\n@param  debug_level An integer which is formed by adding together the\n`XXX_TRACE` constants.It is not recommended to use MEMORY_TRACE. It is very\nslow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented\nyet.To turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like\nstrace -c)) use the value 99\n@return (PECL apd >= 0.2)\n
apd_callstack apd_callstack(void) [array]\nReturns the current call stack as an array. Returns the current call stack\nas an array\n@return (PECL apd 0.2-0.4)\n
apd_clunk apd_clunk(string $warning [, string $delimiter]) [void]\nThrow a warning and a callstack. Behaves like perl&#039;s Carp::cluck. Throw\na warning and a callstack.\n@param warning The warning to throw.\n@param delimiter The delimiter. Default to `&lt;BR />`.\n@return (PECL apd 0.2-0.4)\n@see apd_croak() - Throw an error, a callstack and then exit\n
apd_continue apd_continue(int $debug_level) [bool]\nRestarts the interpreter. Usually sent via the socket to restart the\ninterpreter.\n@param  debug_level An integer which is formed by adding together the\n`XXX_TRACE` constants.It is not recommended to use MEMORY_TRACE. It is very\nslow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented\nyet.To turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like\nstrace -c)) use the value 99\n@return (PECL apd >= 0.2)\n
apd_croak apd_croak(string $warning [, string $delimiter]) [void]\nThrow an error, a callstack and then exit. Behaves like perl&#039;s\nCarp::croak. Throw an error, a callstack and then exit.\n@param warning The warning to throw.\n@param delimiter The delimiter. Default to `&lt;BR />`.\n@return (PECL apd 0.2-0.4)\n@see apd_clunk() - Throw a warning and a callstack\n
apd_dump_function_table apd_dump_function_table(void) [void]\nOutputs the current function table. Outputs the current function table.\n@return (Unknown)\n
apd_dump_persistent_resources apd_dump_persistent_resources(void) [array]\nReturn all persistent resources as an array. Return all persistent resources\nas an array.\n@return (PECL apd 0.2-0.4)\n@see apd_dump_regular_resources() - Return all current regular resources as\nan array\n
apd_dump_regular_resources apd_dump_regular_resources(void) [array]\nReturn all current regular resources as an array. Return all current regular\nresources as an array.\n@return (PECL apd 0.2-0.4)\n@see apd_dump_persistent_resources() - Return all persistent resources as\nan array\n
apd_echo apd_echo(string $output) [bool]\nEcho to the debugging socket. Usually sent via the socket to request\ninformation about the running script.\n@param output The debugged variable.\n@return (PECL apd >= 0.2)\n
apd_get_active_symbols apd_get_active_symbols(void) [array]\nGet an array of the current variables names in the local scope. Returns the\nnames of all the variables defined in the active scope, (not their values).\n@return (PECL apd 0.2)\n
apd_set_pprof_trace apd_set_pprof_trace([string $dump_directory [, string\n$fragment=&quot;pprof&quot;]]) [string]\nStarts the session debugging. Starts debugging to pprof_{process_id} in the\ndump directory.\n@param dump_directory The directory in which the profile dump file is\nwritten. If not set, the apd.dumpdir setting from the php.ini file is used.\n@param fragment\n@return (PECL apd >= 0.2)\n@see apd_set_session_trace() - Starts the session debugging\n
apd_set_session_trace_socket apd_set_session_trace_socket(string $tcp_server,\nint $socket_type, int $port, int $debug_level) [bool]\nStarts the remote session debugging. Connects to the specified `tcp_server`\n(eg. tcplisten) and sends debugging data to the socket.\n@param tcp_server IP or Unix Domain socket (like a file) of the TCP server.\n@param socket_type Can be AF_UNIX for file based sockets or APD_AF_INET for\nstandard tcp/ip.\n@param port You can use any port, but higher numbers are better as most of\nthe lower numbers may be used by other system services.\n@param  debug_level An integer which is formed by adding together the\n`XXX_TRACE` constants.It is not recommended to use MEMORY_TRACE. It is very\nslow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented\nyet.To turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like\nstrace -c)) use the value 99\n@return (PECL apd >= 0.2)\n
apd_set_session_trace apd_set_session_trace(int $debug_level [, string\n$dump_directory]) [void]\nStarts the session debugging. Starts debugging to apd_dump_{process_id}\nin the dump directory.\n@param  debug_level An integer which is formed by adding together the\n`XXX_TRACE` constants.It is not recommended to use MEMORY_TRACE. It is very\nslow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented\nyet.To turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like\nstrace -c)) use the value 99\n@param dump_directory The directory in which the profile dump file is\nwritten. If not set, the `apd.dumpdir` setting from the php.ini file is used.\n@return (PECL apd 0.2-0.4)\n
apd_set_session apd_set_session(int $debug_level) [void]\nChanges or sets the current debugging level. This can be used to increase\nor decrease debugging in a different area of your application.\n@param  debug_level An integer which is formed by adding together the\n`XXX_TRACE` constants.It is not recommended to use MEMORY_TRACE. It is very\nslow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented\nyet.To turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like\nstrace -c)) use the value 99\n@return (PECL apd 0.2-0.4)\n
array_change_key_case array_change_key_case(array $input [, int\n$case=CASE_LOWER]) [array]\nChanges all keys in an array. Returns an array with all keys from `input`\nlowercased or uppercased. Numbered indices are left as is.\n@param input The array to work on\n@param case Either CASE_UPPER or CASE_LOWER (default)\n@return (PHP 4 >= 4.2.0, PHP 5)\n@note Note: If an array has indices that will be the same once run through\nthis function (e.g. &quot;`keY`&quot; and &quot;`kEY`&quot;), the value that\nis later in the array will override other indices.\n
array_chunk array_chunk(array $input, int $size [, bool $preserve_keys=false])\n[array]\nSplit an array into chunks. Chunks an array into `size` large chunks. The\nlast chunk may contain less than `size` elements.\n@param input The array to work on\n@param size The size of each chunk\n@param preserve_keys When set to TRUE keys will be preserved. Default is\nFALSE which will reindex the chunk numerically\n@return (PHP 4 >= 4.2.0, PHP 5)\n
array_combine array_combine(array $keys, array $values) [array]\nCreates an array by using one array for keys and another for its\nvalues. Creates an array by using the values from the `keys` array as keys\nand the values from the `values` array as the corresponding values.\n@param keys Array of keys to be used. Illegal values for key will be converted\nto string.\n@param values Array of values to be used\n@return (PHP 5)\n@see array_merge() - Merge one or more arrays\n@see array_walk() - Apply a user function to every member of an array\n@see array_values() - Return all the values of an array\n
array_count_values array_count_values(array $input) [array]\nCounts all the values of an array. array_count_values() returns an array\nusing the values of the `input` array as keys and their frequency in `input`\nas values.\n@param input The array of values to count\n@return (PHP 4, PHP 5)\n@see count() - Count all elements in an array, or properties in an object\n@see array_unique() - Removes duplicate values from an array\n@see array_values() - Return all the values of an array\n@see count_chars() - Return information about characters used in a string\n
array_diff_assoc array_diff_assoc(array $array1, array $array2 [, array\n$...]) [array]\nComputes the difference of arrays with additional index check. Compares\n`array1` against `array2` and returns the difference. Unlike array_diff()\nthe array keys are used in the comparison.\n@param array1 The array to compare from\n@param array2 An array to compare against\n@param ... More arrays to compare against\n@return (PHP 4 >= 4.3.0, PHP 5)\n@note Note: This function only checks one dimension of a n-dimensional\narray. Of course you can check deeper dimensions by using, for example,\n`array_diff_assoc($array1[0], $array2[0]);`.\n@see array_diff() - Computes the difference of arrays\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n
array_diff_key array_diff_key(array $array1, array $array2 [, array\n$...]) [array]\nComputes the difference of arrays using keys for comparison. Compares the keys\nfrom `array1` against the keys from `array2` and returns the difference. This\nfunction is like array_diff() except the comparison is done on the keys\ninstead of the values.\n@param array1 The array to compare from\n@param array2 An array to compare against\n@param ... More arrays to compare against\n@return (PHP 5 >= 5.1.0)\n@note Note: This function only checks one dimension of a n-dimensional\narray. Of course you can check deeper dimensions by using\n`array_diff_key($array1[0], $array2[0]);`.\n@see array_diff() - Computes the difference of arrays\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_diff_uassoc() - Computes the difference of arrays with additional\nindex check which is performed by a user supplied callback function\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_diff_ukey() - Computes the difference of arrays using a callback\nfunction on the keys for comparison\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_intersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares indexes by a callback function\n@see array_intersect_key() - Computes the intersection of arrays using keys\nfor comparison\n@see array_intersect_ukey() - Computes the intersection of arrays using a\ncallback function on the keys for comparison\n
array_diff_uassoc array_diff_uassoc(array $array1, array $array2 [, array\n$...], callback $key_compare_func) [array]\nComputes the difference of arrays with additional index check which is\nperformed by a user supplied callback function. Compares `array1` against\n`array2` and returns the difference. Unlike array_diff() the array keys are\nused in the comparison. Unlike array_diff_assoc() an user supplied callback\nfunction is used for the indices comparison, not internal function.\n@param array1 The array to compare from\n@param array2 An array to compare against\n@param ... More arrays to compare against\n@param key_compare_func callback function to use. The callback function must\nreturn an integer less than, equal to, or greater than zero if the first\nargument is considered to be respectively less than, equal to, or greater\nthan the second.\n@return (PHP 5)\n@note Note: This function only checks one dimension of a n-dimensional\narray. Of course you can check deeper dimensions by using, for example,\n`array_diff_uassoc($array1[0], $array2[0], &quot;key_compare_func&quot;);`.\n@see array_diff() - Computes the difference of arrays\n@see array_diff_assoc() - Computes the difference of arrays with additional\nindex check\n@see array_udiff() - Computes the difference of arrays by using a callback\nfunction for data comparison\n@see array_udiff_assoc() - Computes the difference of arrays with additional\nindex check, compares data by a callback function\n@see array_udiff_uassoc() - Computes the difference of arrays with additional\nindex check, compares data and indexes by a callback function\n@see array_intersect() - Computes the intersection of arrays\n@see array_intersect_assoc() - Computes the intersection of arrays with\nadditional index check\n@see array_uintersect() - Computes the intersection of arrays, compares data\nby a callback function\n@see array_uintersect_assoc() - Computes the intersection of arrays with\nadditional index check, compares data by a callback function\n@see array_uintersect_uassoc() - Computes the intersection of arrays with\nadditional index check, compares data and indexes by a callback functions\n
